
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001812c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001636c  080182dc  080182dc  000282dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802e648  0802e648  0003e648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802e650  0802e650  0003e650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802e654  0802e654  0003e654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000008d8  20000000  0802e658  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000408d8  2**0
                  CONTENTS
  8 .bss          00027380  200008d8  200008d8  000408d8  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20027c58  20027c58  000408d8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000408d8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e160  00000000  00000000  00040908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000487f  00000000  00000000  0006ea68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001580  00000000  00000000  000732e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001390  00000000  00000000  00074868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b048  00000000  00000000  00075bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000090b5  00000000  00000000  00080c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000ea  00000000  00000000  00089cf5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000057f8  00000000  00000000  00089de0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200008d8 	.word	0x200008d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080182c4 	.word	0x080182c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200008dc 	.word	0x200008dc
 80001ec:	080182c4 	.word	0x080182c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_Init+0x40>)
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_Init+0x40>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <HAL_Init+0x40>)
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x40>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <HAL_Init+0x40>)
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_Init+0x40>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f947 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f007 fa86 	bl	8007a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f95f 	bl	8000836 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f927 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200008d4 	.word	0x200008d4
 80005ac:	200008c8 	.word	0x200008c8
 80005b0:	200008c4 	.word	0x200008c4

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200008c8 	.word	0x200008c8
 80005d8:	200048c0 	.word	0x200048c0

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200048c0 	.word	0x200048c0

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffde 	bl	80005dc <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3f7      	bcc.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200008c8 	.word	0x200008c8

08000638 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006a6:	4909      	ldr	r1, [pc, #36]	; (80006cc <NVIC_EnableIRQ+0x30>)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	095b      	lsrs	r3, r3, #5
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	f002 021f 	and.w	r2, r2, #31
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	da0b      	bge.n	80006fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	490d      	ldr	r1, [pc, #52]	; (800071c <NVIC_SetPriority+0x4c>)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 030f 	and.w	r3, r3, #15
 80006ec:	3b04      	subs	r3, #4
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006fa:	e009      	b.n	8000710 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	4908      	ldr	r1, [pc, #32]	; (8000720 <NVIC_SetPriority+0x50>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00
 8000720:	e000e100 	.word	0xe000e100

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	2201      	movs	r2, #1
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	401a      	ands	r2, r3
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076a:	2101      	movs	r1, #1
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	1e59      	subs	r1, r3, #1
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ac:	f7ff ff90 	bl	80006d0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff2f 	bl	8000638 <NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff44 	bl	8000680 <NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff90 	bl	8000724 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5f 	bl	80006d0 <NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff37 	bl	800069c <NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e03b      	b.n	80008d8 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d106      	bne.n	800087a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f003 fa63 	bl	8003d40 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	6812      	ldr	r2, [r2, #0]
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	6852      	ldr	r2, [r2, #4]
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80008a2:	f022 0107 	bic.w	r1, r2, #7
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6892      	ldr	r2, [r2, #8]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	68c9      	ldr	r1, [r1, #12]
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2201      	movs	r2, #1
 80008d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d026      	beq.n	8000950 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000908:	2b00      	cmp	r3, #0
 800090a:	d021      	beq.n	8000950 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	6812      	ldr	r2, [r2, #0]
 8000916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800091a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000920:	f043 0201 	orr.w	r2, r3, #1
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2201      	movs	r2, #1
 800092e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2204      	movs	r2, #4
 8000934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	695b      	ldr	r3, [r3, #20]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	2b00      	cmp	r3, #0
 8000958:	d026      	beq.n	80009a8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000960:	2b00      	cmp	r3, #0
 8000962:	d021      	beq.n	80009a8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000972:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2220      	movs	r2, #32
 800097a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000980:	f043 0202 	orr.w	r2, r3, #2
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2204      	movs	r2, #4
 800098c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d026      	beq.n	8000a00 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d021      	beq.n	8000a00 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	6812      	ldr	r2, [r2, #0]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2208      	movs	r2, #8
 80009d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009d8:	f043 0204 	orr.w	r2, r3, #4
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2204      	movs	r2, #4
 80009e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d013      	beq.n	8000a32 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00e      	beq.n	8000a32 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a22:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2204      	movs	r2, #4
 8000a2a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f853 	bl	8000ad8 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d024      	beq.n	8000a86 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d01f      	beq.n	8000a86 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	6812      	ldr	r2, [r2, #0]
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a54:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d01f      	beq.n	8000ad0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d01a      	beq.n	8000ad0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000aa8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2210      	movs	r2, #16
 8000ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f80e 	bl	8000aec <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e177      	b.n	8000e0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 8166 	bne.w	8000e06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_Init+0x4a>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b12      	cmp	r3, #18
 8000b48:	d123      	bne.n	8000b92 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	08da      	lsrs	r2, r3, #3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3208      	adds	r2, #8
 8000b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	691a      	ldr	r2, [r3, #16]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	f003 0307 	and.w	r3, r3, #7
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	69b9      	ldr	r1, [r7, #24]
 8000b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0203 	and.w	r2, r3, #3
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d00b      	beq.n	8000be6 <HAL_GPIO_Init+0xe6>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d007      	beq.n	8000be6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bda:	2b11      	cmp	r3, #17
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d130      	bne.n	8000c48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	f003 0201 	and.w	r2, r3, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80c0 	beq.w	8000e06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4a65      	ldr	r2, [pc, #404]	; (8000e20 <HAL_GPIO_Init+0x320>)
 8000c8c:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <HAL_GPIO_Init+0x320>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b62      	ldr	r3, [pc, #392]	; (8000e20 <HAL_GPIO_Init+0x320>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca2:	4a60      	ldr	r2, [pc, #384]	; (8000e24 <HAL_GPIO_Init+0x324>)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <HAL_GPIO_Init+0x328>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d037      	beq.n	8000d3e <HAL_GPIO_Init+0x23e>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a56      	ldr	r2, [pc, #344]	; (8000e2c <HAL_GPIO_Init+0x32c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d031      	beq.n	8000d3a <HAL_GPIO_Init+0x23a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a55      	ldr	r2, [pc, #340]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d02b      	beq.n	8000d36 <HAL_GPIO_Init+0x236>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <HAL_GPIO_Init+0x334>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_Init+0x232>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a53      	ldr	r2, [pc, #332]	; (8000e38 <HAL_GPIO_Init+0x338>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x22e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <HAL_GPIO_Init+0x33c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x22a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a51      	ldr	r2, [pc, #324]	; (8000e40 <HAL_GPIO_Init+0x340>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x226>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a50      	ldr	r2, [pc, #320]	; (8000e44 <HAL_GPIO_Init+0x344>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x222>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4f      	ldr	r2, [pc, #316]	; (8000e48 <HAL_GPIO_Init+0x348>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x21e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4e      	ldr	r2, [pc, #312]	; (8000e4c <HAL_GPIO_Init+0x34c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x21a>
 8000d16:	2309      	movs	r3, #9
 8000d18:	e012      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	e010      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d1e:	2308      	movs	r3, #8
 8000d20:	e00e      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d22:	2307      	movs	r3, #7
 8000d24:	e00c      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d26:	2306      	movs	r3, #6
 8000d28:	e00a      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e008      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e004      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x240>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	f002 0203 	and.w	r2, r2, #3
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	4934      	ldr	r1, [pc, #208]	; (8000e24 <HAL_GPIO_Init+0x324>)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d82:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d88:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_GPIO_Init+0x350>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	f67f ae84 	bls.w	8000b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e14:	bf00      	nop
 8000e16:	3724      	adds	r7, #36	; 0x24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40021400 	.word	0x40021400
 8000e40:	40021800 	.word	0x40021800
 8000e44:	40021c00 	.word	0x40021c00
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	40022400 	.word	0x40022400
 8000e50:	40013c00 	.word	0x40013c00

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e70:	e003      	b.n	8000e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e72:	887b      	ldrh	r3, [r7, #2]
 8000e74:	041a      	lsls	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	619a      	str	r2, [r3, #24]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0c8      	b.n	8001034 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d106      	bne.n	8000ebc <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f006 fdf8 	bl	8007aac <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2224      	movs	r2, #36	; 0x24
 8000ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ed4:	f002 f97a 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8000ed8:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4a57      	ldr	r2, [pc, #348]	; (800103c <HAL_I2C_Init+0x1b4>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9b      	lsrs	r3, r3, #18
 8000ee4:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4952      	ldr	r1, [pc, #328]	; (8001040 <HAL_I2C_Init+0x1b8>)
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d802      	bhi.n	8000f02 <HAL_I2C_Init+0x7a>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	3301      	adds	r3, #1
 8000f00:	e009      	b.n	8000f16 <HAL_I2C_Init+0x8e>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f08:	fb01 f303 	mul.w	r3, r1, r3
 8000f0c:	494d      	ldr	r1, [pc, #308]	; (8001044 <HAL_I2C_Init+0x1bc>)
 8000f0e:	fba1 1303 	umull	r1, r3, r1, r3
 8000f12:	099b      	lsrs	r3, r3, #6
 8000f14:	3301      	adds	r3, #1
 8000f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a47      	ldr	r2, [pc, #284]	; (8001040 <HAL_I2C_Init+0x1b8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d812      	bhi.n	8000f4c <HAL_I2C_Init+0xc4>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d906      	bls.n	8000f48 <HAL_I2C_Init+0xc0>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	e045      	b.n	8000fd4 <HAL_I2C_Init+0x14c>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	e043      	b.n	8000fd4 <HAL_I2C_Init+0x14c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10f      	bne.n	8000f74 <HAL_I2C_Init+0xec>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bf0c      	ite	eq
 8000f6c:	2301      	moveq	r3, #1
 8000f6e:	2300      	movne	r3, #0
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	e010      	b.n	8000f96 <HAL_I2C_Init+0x10e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009a      	lsls	r2, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf0c      	ite	eq
 8000f90:	2301      	moveq	r3, #1
 8000f92:	2300      	movne	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_I2C_Init+0x116>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e01a      	b.n	8000fd4 <HAL_I2C_Init+0x14c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <HAL_I2C_Init+0x134>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fba:	e00b      	b.n	8000fd4 <HAL_I2C_Init+0x14c>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009a      	lsls	r2, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	69d1      	ldr	r1, [r2, #28]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6a12      	ldr	r2, [r2, #32]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6911      	ldr	r1, [r2, #16]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68d2      	ldr	r2, [r2, #12]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6951      	ldr	r1, [r2, #20]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6992      	ldr	r2, [r2, #24]
 8001002:	430a      	orrs	r2, r1
 8001004:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	f042 0201 	orr.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2220      	movs	r2, #32
 8001020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	431bde83 	.word	0x431bde83
 8001040:	000186a0 	.word	0x000186a0
 8001044:	10624dd3 	.word	0x10624dd3

08001048 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	461a      	mov	r2, r3
 8001054:	460b      	mov	r3, r1
 8001056:	817b      	strh	r3, [r7, #10]
 8001058:	4613      	mov	r3, r2
 800105a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001060:	f7ff fabc 	bl	80005dc <HAL_GetTick>
 8001064:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b20      	cmp	r3, #32
 8001070:	f040 80ee 	bne.w	8001250 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2319      	movs	r3, #25
 800107a:	2201      	movs	r2, #1
 800107c:	4977      	ldr	r1, [pc, #476]	; (800125c <HAL_I2C_Master_Transmit+0x214>)
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 fc6c 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
 800108c:	e0e1      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_I2C_Master_Transmit+0x54>
 8001098:	2302      	movs	r3, #2
 800109a:	e0da      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d007      	beq.n	80010c2 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2221      	movs	r2, #33	; 0x21
 80010d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2210      	movs	r2, #16
 80010de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	893a      	ldrh	r2, [r7, #8]
 80010f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <HAL_I2C_Master_Transmit+0x218>)
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001104:	8979      	ldrh	r1, [r7, #10]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 fadc 	bl	80016c8 <I2C_MasterRequestWrite>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00f      	beq.n	8001136 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	2b04      	cmp	r3, #4
 800111c:	d105      	bne.n	800112a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e093      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e08d      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 800114c:	e066      	b.n	800121c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	6a39      	ldr	r1, [r7, #32]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fcc1 	bl	8001ada <I2C_WaitOnTXEFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00f      	beq.n	800117e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2b04      	cmp	r3, #4
 8001164:	d109      	bne.n	800117a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001174:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e06b      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e069      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	1c58      	adds	r0, r3, #1
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	6248      	str	r0, [r1, #36]	; 0x24
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b01      	subs	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d119      	bne.n	80011ec <HAL_I2C_Master_Transmit+0x1a4>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d015      	beq.n	80011ec <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	1c58      	adds	r0, r3, #1
 80011ca:	68f9      	ldr	r1, [r7, #12]
 80011cc:	6248      	str	r0, [r1, #36]	; 0x24
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	6a39      	ldr	r1, [r7, #32]
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 fcaf 	bl	8001b54 <I2C_WaitOnBTFFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00f      	beq.n	800121c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2b04      	cmp	r3, #4
 8001202:	d109      	bne.n	8001218 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001212:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e01c      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e01a      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	2b00      	cmp	r3, #0
 8001222:	d194      	bne.n	800114e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	6812      	ldr	r2, [r2, #0]
 800122e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2220      	movs	r2, #32
 8001238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	e000      	b.n	8001252 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001250:	2302      	movs	r3, #2
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	00100002 	.word	0x00100002
 8001260:	ffff0000 	.word	0xffff0000

08001264 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	461a      	mov	r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	817b      	strh	r3, [r7, #10]
 8001274:	4613      	mov	r3, r2
 8001276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800127c:	f7ff f9ae 	bl	80005dc <HAL_GetTick>
 8001280:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b20      	cmp	r3, #32
 800128c:	f040 8215 	bne.w	80016ba <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2319      	movs	r3, #25
 8001296:	2201      	movs	r2, #1
 8001298:	4985      	ldr	r1, [pc, #532]	; (80014b0 <HAL_I2C_Master_Receive+0x24c>)
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 fb5e 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
 80012a8:	e208      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_I2C_Master_Receive+0x54>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e201      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d007      	beq.n	80012de <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2222      	movs	r2, #34	; 0x22
 80012f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2210      	movs	r2, #16
 80012fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	893a      	ldrh	r2, [r7, #8]
 800130e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a68      	ldr	r2, [pc, #416]	; (80014b4 <HAL_I2C_Master_Receive+0x250>)
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131a:	b29a      	uxth	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001320:	8979      	ldrh	r1, [r7, #10]
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fa50 	bl	80017cc <I2C_MasterRequestRead>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00f      	beq.n	8001352 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2b04      	cmp	r3, #4
 8001338:	d105      	bne.n	8001346 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1ba      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1b4      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001356:	2b00      	cmp	r3, #0
 8001358:	d113      	bne.n	8001382 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	623b      	str	r3, [r7, #32]
 800136e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e188      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001386:	2b01      	cmp	r3, #1
 8001388:	d11b      	bne.n	80013c2 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e168      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d11b      	bne.n	8001402 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	e148      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001428:	e134      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142e:	2b03      	cmp	r3, #3
 8001430:	f200 80eb 	bhi.w	800160a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001438:	2b01      	cmp	r3, #1
 800143a:	d127      	bne.n	800148c <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800143c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 fbc4 	bl	8001bce <I2C_WaitOnRXNEFlagUntilTimeout>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d007      	beq.n	800145c <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	2b20      	cmp	r3, #32
 8001452:	d101      	bne.n	8001458 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e131      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e12f      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	1c59      	adds	r1, r3, #1
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6251      	str	r1, [r2, #36]	; 0x24
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	6912      	ldr	r2, [r2, #16]
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001474:	3b01      	subs	r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800148a:	e103      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001490:	2b02      	cmp	r3, #2
 8001492:	d14a      	bne.n	800152a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	2200      	movs	r2, #0
 800149c:	4906      	ldr	r1, [pc, #24]	; (80014b8 <HAL_I2C_Master_Receive+0x254>)
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fa5c 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e106      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
 80014ae:	bf00      	nop
 80014b0:	00100002 	.word	0x00100002
 80014b4:	ffff0000 	.word	0xffff0000
 80014b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	6812      	ldr	r2, [r2, #0]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	1c59      	adds	r1, r3, #1
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	6251      	str	r1, [r2, #36]	; 0x24
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	6912      	ldr	r2, [r2, #16]
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	6251      	str	r1, [r2, #36]	; 0x24
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	6912      	ldr	r2, [r2, #16]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001512:	3b01      	subs	r3, #1
 8001514:	b29a      	uxth	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151e:	b29b      	uxth	r3, r3
 8001520:	3b01      	subs	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001528:	e0b4      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001530:	2200      	movs	r2, #0
 8001532:	4964      	ldr	r1, [pc, #400]	; (80016c4 <HAL_I2C_Master_Receive+0x460>)
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 fa11 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0bb      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	1c59      	adds	r1, r3, #1
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	6251      	str	r1, [r2, #36]	; 0x24
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	6912      	ldr	r2, [r2, #16]
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156c:	3b01      	subs	r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29a      	uxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001588:	2200      	movs	r2, #0
 800158a:	494e      	ldr	r1, [pc, #312]	; (80016c4 <HAL_I2C_Master_Receive+0x460>)
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f9e5 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e08f      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	1c59      	adds	r1, r3, #1
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6251      	str	r1, [r2, #36]	; 0x24
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	6912      	ldr	r2, [r2, #16]
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c59      	adds	r1, r3, #1
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	6251      	str	r1, [r2, #36]	; 0x24
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	6912      	ldr	r2, [r2, #16]
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001608:	e044      	b.n	8001694 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fadd 	bl	8001bce <I2C_WaitOnRXNEFlagUntilTimeout>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	2b20      	cmp	r3, #32
 8001620:	d101      	bne.n	8001626 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e04a      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e048      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	1c59      	adds	r1, r3, #1
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	6251      	str	r1, [r2, #36]	; 0x24
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	6912      	ldr	r2, [r2, #16]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	2b04      	cmp	r3, #4
 8001664:	d116      	bne.n	8001694 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	6251      	str	r1, [r2, #36]	; 0x24
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	6912      	ldr	r2, [r2, #16]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f aec6 	bne.w	800142a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80016ba:	2302      	movs	r3, #2
  }
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	00010004 	.word	0x00010004

080016c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	460b      	mov	r3, r1
 80016d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d006      	beq.n	80016f2 <I2C_MasterRequestWrite+0x2a>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d003      	beq.n	80016f2 <I2C_MasterRequestWrite+0x2a>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016f0:	d108      	bne.n	8001704 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e00b      	b.n	800171c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	2b12      	cmp	r3, #18
 800170a:	d107      	bne.n	800171c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f917 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e040      	b.n	80017ba <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001740:	d107      	bne.n	8001752 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	897a      	ldrh	r2, [r7, #10]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	e021      	b.n	8001796 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	897a      	ldrh	r2, [r7, #10]
 8001758:	11d2      	asrs	r2, r2, #7
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f002 0206 	and.w	r2, r2, #6
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f062 020f 	orn	r2, r2, #15
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4915      	ldr	r1, [pc, #84]	; (80017c4 <I2C_MasterRequestWrite+0xfc>)
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f944 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2b04      	cmp	r3, #4
 8001782:	d101      	bne.n	8001788 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e018      	b.n	80017ba <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e016      	b.n	80017ba <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	897a      	ldrh	r2, [r7, #10]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	490b      	ldr	r1, [pc, #44]	; (80017c8 <I2C_MasterRequestWrite+0x100>)
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f92e 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d101      	bne.n	80017b4 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e002      	b.n	80017ba <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e000      	b.n	80017ba <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	00010008 	.word	0x00010008
 80017c8:	00010002 	.word	0x00010002

080017cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	460b      	mov	r3, r1
 80017da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d006      	beq.n	8001806 <I2C_MasterRequestRead+0x3a>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <I2C_MasterRequestRead+0x3a>
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001804:	d108      	bne.n	8001818 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e00b      	b.n	8001830 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	2b11      	cmp	r3, #17
 800181e:	d107      	bne.n	8001830 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800182e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f88d 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e07f      	b.n	800194c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001854:	d108      	bne.n	8001868 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	897a      	ldrh	r2, [r7, #10]
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	611a      	str	r2, [r3, #16]
 8001866:	e05f      	b.n	8001928 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	897a      	ldrh	r2, [r7, #10]
 800186e:	11d2      	asrs	r2, r2, #7
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	f002 0206 	and.w	r2, r2, #6
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	f062 020f 	orn	r2, r2, #15
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4933      	ldr	r1, [pc, #204]	; (8001954 <I2C_MasterRequestRead+0x188>)
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f8b9 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	2b04      	cmp	r3, #4
 8001898:	d101      	bne.n	800189e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e056      	b.n	800194c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e054      	b.n	800194c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	897a      	ldrh	r2, [r7, #10]
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4929      	ldr	r1, [pc, #164]	; (8001958 <I2C_MasterRequestRead+0x18c>)
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f8a3 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d101      	bne.n	80018ca <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e040      	b.n	800194c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e03e      	b.n	800194c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f82b 	bl	800195c <I2C_WaitOnFlagUntilTimeout>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e01d      	b.n	800194c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	897a      	ldrh	r2, [r7, #10]
 8001916:	11d2      	asrs	r2, r2, #7
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	f002 0206 	and.w	r2, r2, #6
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	f062 020e 	orn	r2, r2, #14
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	490a      	ldr	r1, [pc, #40]	; (8001958 <I2C_MasterRequestRead+0x18c>)
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f865 	bl	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2b04      	cmp	r3, #4
 8001940:	d101      	bne.n	8001946 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e002      	b.n	800194c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e000      	b.n	800194c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	00010008 	.word	0x00010008
 8001958:	00010002 	.word	0x00010002

0800195c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800196c:	e01f      	b.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001974:	d01b      	beq.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <I2C_WaitOnFlagUntilTimeout+0x30>
 800197c:	f7fe fe2e 	bl	80005dc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d910      	bls.n	80019ae <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e023      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d10d      	bne.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0x78>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4013      	ands	r3, r2
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bf0c      	ite	eq
 80019ca:	2301      	moveq	r3, #1
 80019cc:	2300      	movne	r3, #0
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	e00c      	b.n	80019ee <I2C_WaitOnFlagUntilTimeout+0x92>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4013      	ands	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf0c      	ite	eq
 80019e6:	2301      	moveq	r3, #1
 80019e8:	2300      	movne	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d0bc      	beq.n	800196e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a0c:	e040      	b.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d11c      	bne.n	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a36:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e03c      	b.n	8001ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5e:	d017      	beq.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001a66:	f7fe fdb9 	bl	80005dc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	1ad2      	subs	r2, r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d90c      	bls.n	8001a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e020      	b.n	8001ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10c      	bne.n	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	43da      	mvns	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	e00b      	b.n	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bf14      	ite	ne
 8001ac6:	2301      	movne	r3, #1
 8001ac8:	2300      	moveq	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d19e      	bne.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b084      	sub	sp, #16
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae6:	e029      	b.n	8001b3c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f8ba 	bl	8001c62 <I2C_IsAcknowledgeFailed>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e029      	b.n	8001b4c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001afe:	d01d      	beq.n	8001b3c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b06:	f7fe fd69 	bl	80005dc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d912      	bls.n	8001b3c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f043 0220 	orr.w	r2, r3, #32
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e007      	b.n	8001b4c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	2b80      	cmp	r3, #128	; 0x80
 8001b48:	d1ce      	bne.n	8001ae8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b60:	e029      	b.n	8001bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f87d 	bl	8001c62 <I2C_IsAcknowledgeFailed>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e029      	b.n	8001bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b78:	d01d      	beq.n	8001bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b80:	f7fe fd2c 	bl	80005dc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	1ad2      	subs	r2, r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d912      	bls.n	8001bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e007      	b.n	8001bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d1ce      	bne.n	8001b62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bda:	e036      	b.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d114      	bne.n	8001c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0210 	mvn.w	r2, #16
 8001bf2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e022      	b.n	8001c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8001c1a:	f7fe fcdf 	bl	80005dc <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1ad2      	subs	r2, r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d90f      	bls.n	8001c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e007      	b.n	8001c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d1c1      	bne.n	8001bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d114      	bne.n	8001ca4 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c82:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2204      	movs	r2, #4
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d129      	bne.n	8001d1c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2224      	movs	r2, #36	; 0x24
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cea:	f022 0210 	bic.w	r2, r2, #16
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e000      	b.n	8001d1e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
  }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b20      	cmp	r3, #32
 8001d42:	d12a      	bne.n	8001d9a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001d64:	89fb      	ldrh	r3, [r7, #14]
 8001d66:	f023 030f 	bic.w	r3, r3, #15
 8001d6a:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	89fa      	ldrh	r2, [r7, #14]
 8001d7c:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 8001d9a:	2302      	movs	r3, #2
  }
}  
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0bf      	b.n	8001f42 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f001 ffcc 	bl	8003d74 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	6992      	ldr	r2, [r2, #24]
 8001dee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001df2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	6991      	ldr	r1, [r2, #24]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6850      	ldr	r0, [r2, #4]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6892      	ldr	r2, [r2, #8]
 8001e06:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001e0c:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6912      	ldr	r2, [r2, #16]
 8001e12:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001e14:	430a      	orrs	r2, r1
 8001e16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_LTDC_Init+0x1a4>)
 8001e24:	400b      	ands	r3, r1
 8001e26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	6891      	ldr	r1, [r2, #8]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6990      	ldr	r0, [r2, #24]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4302      	orrs	r2, r0
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68d9      	ldr	r1, [r3, #12]
 8001e50:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <HAL_LTDC_Init+0x1a4>)
 8001e52:	400b      	ands	r3, r1
 8001e54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	68d1      	ldr	r1, [r2, #12]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6a10      	ldr	r0, [r2, #32]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4302      	orrs	r2, r0
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_LTDC_Init+0x1a4>)
 8001e80:	400b      	ands	r3, r1
 8001e82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	041b      	lsls	r3, r3, #16
 8001e8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	6911      	ldr	r1, [r2, #16]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4302      	orrs	r2, r0
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6959      	ldr	r1, [r3, #20]
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_LTDC_Init+0x1a4>)
 8001eae:	400b      	ands	r3, r1
 8001eb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	6951      	ldr	r1, [r2, #20]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4302      	orrs	r2, r0
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001efe:	68b8      	ldr	r0, [r7, #8]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4302      	orrs	r2, r0
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001f0a:	4302      	orrs	r2, r0
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1a:	f042 0206 	orr.w	r2, r2, #6
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	6992      	ldr	r2, [r2, #24]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	f000f800 	.word	0xf000f800

08001f50 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f001 ffdb 	bl	8003f14 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f96:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d023      	beq.n	8001fea <HAL_LTDC_IRQHandler+0x6a>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01e      	beq.n	8001fea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f86f 	bl	80020c8 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d023      	beq.n	800203c <HAL_LTDC_IRQHandler+0xbc>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d01e      	beq.n	800203c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002008:	f022 0202 	bic.w	r2, r2, #2
 800200c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800201c:	f043 0202 	orr.w	r2, r3, #2
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f846 	bl	80020c8 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01b      	beq.n	800207e <HAL_LTDC_IRQHandler+0xfe>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2201      	movs	r2, #1
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f001 ff63 	bl	8003f44 <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HAL_LTDC_IRQHandler+0x140>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800209c:	f022 0208 	bic.w	r2, r2, #8
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2208      	movs	r2, #8
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f80e 	bl	80020dc <HAL_LTDC_ReloadEventCallback>
  }
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_LTDC_ConfigLayer+0x1a>
 8002106:	2302      	movs	r3, #2
 8002108:	e02c      	b.n	8002164 <HAL_LTDC_ConfigLayer+0x74>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2134      	movs	r1, #52	; 0x34
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fa63 	bl	8002610 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2201      	movs	r2, #1
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bdb0      	pop	{r4, r5, r7, pc}

0800216c <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_LTDC_ConfigColorKeying+0x1a>
 8002182:	2302      	movs	r3, #2
 8002184:	e031      	b.n	80021ea <HAL_LTDC_ConfigColorKeying+0x7e>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	01db      	lsls	r3, r3, #7
 80021a0:	4413      	add	r3, r2
 80021a2:	3384      	adds	r3, #132	; 0x84
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	01db      	lsls	r3, r3, #7
 80021b0:	440b      	add	r3, r1
 80021b2:	3384      	adds	r3, #132	; 0x84
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021ba:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	01db      	lsls	r3, r3, #7
 80021c6:	4413      	add	r3, r2
 80021c8:	3384      	adds	r3, #132	; 0x84
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2201      	movs	r2, #1
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b089      	sub	sp, #36	; 0x24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_LTDC_ConfigCLUT+0x28>
 800221a:	2302      	movs	r3, #2
 800221c:	e059      	b.n	80022d2 <HAL_LTDC_ConfigCLUT+0xdc>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e041      	b.n	80022b8 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2134      	movs	r1, #52	; 0x34
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3348      	adds	r3, #72	; 0x48
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d114      	bne.n	8002272 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	061a      	lsls	r2, r3, #24
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	431a      	orrs	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002262:	431a      	orrs	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800226c:	4313      	orrs	r3, r2
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	e010      	b.n	8002294 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	061a      	lsls	r2, r3, #24
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	431a      	orrs	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002286:	431a      	orrs	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002290:	4313      	orrs	r3, r2
 8002292:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	3304      	adds	r3, #4
 8002298:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	01db      	lsls	r3, r3, #7
 80022a8:	4413      	add	r3, r2
 80022aa:	3384      	adds	r3, #132	; 0x84
 80022ac:	461a      	mov	r2, r3
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3b9      	bcc.n	8002234 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_LTDC_EnableColorKeying+0x18>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e027      	b.n	8002346 <HAL_LTDC_EnableColorKeying+0x68>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	01db      	lsls	r3, r3, #7
 8002310:	4413      	add	r3, r2
 8002312:	3384      	adds	r3, #132	; 0x84
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	01db      	lsls	r3, r3, #7
 8002320:	440b      	add	r3, r1
 8002322:	3384      	adds	r3, #132	; 0x84
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_LTDC_DisableColorKeying+0x18>
 8002366:	2302      	movs	r3, #2
 8002368:	e027      	b.n	80023ba <HAL_LTDC_DisableColorKeying+0x68>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	01db      	lsls	r3, r3, #7
 8002384:	4413      	add	r3, r2
 8002386:	3384      	adds	r3, #132	; 0x84
 8002388:	461a      	mov	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	01db      	lsls	r3, r3, #7
 8002394:	440b      	add	r3, r1
 8002396:	3384      	adds	r3, #132	; 0x84
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0302 	bic.w	r3, r3, #2
 800239e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2201      	movs	r2, #1
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_LTDC_EnableCLUT+0x18>
 80023da:	2302      	movs	r3, #2
 80023dc:	e027      	b.n	800242e <HAL_LTDC_EnableCLUT+0x68>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	01db      	lsls	r3, r3, #7
 80023f8:	4413      	add	r3, r2
 80023fa:	3384      	adds	r3, #132	; 0x84
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4619      	mov	r1, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	440b      	add	r3, r1
 800240a:	3384      	adds	r3, #132	; 0x84
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f043 0310 	orr.w	r3, r3, #16
 8002412:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_LTDC_SetWindowPosition+0x1c>
 8002452:	2302      	movs	r3, #2
 8002454:	e033      	b.n	80024be <HAL_LTDC_SetWindowPosition+0x84>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2234      	movs	r2, #52	; 0x34
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	3338      	adds	r3, #56	; 0x38
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	441a      	add	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	441a      	add	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	6979      	ldr	r1, [r7, #20]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f8b6 	bl	8002610 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_LTDC_SetAlpha+0x1a>
 80024dc:	2302      	movs	r3, #2
 80024de:	e024      	b.n	800252a <HAL_LTDC_SetAlpha+0x64>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2234      	movs	r2, #52	; 0x34
 80024f4:	fb02 f303 	mul.w	r3, r2, r3
 80024f8:	3338      	adds	r3, #56	; 0x38
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6979      	ldr	r1, [r7, #20]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f880 	bl	8002610 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_LTDC_SetAddress+0x1a>
 8002548:	2302      	movs	r3, #2
 800254a:	e024      	b.n	8002596 <HAL_LTDC_SetAddress+0x64>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2234      	movs	r2, #52	; 0x34
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	3338      	adds	r3, #56	; 0x38
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6979      	ldr	r1, [r7, #20]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f84a 	bl	8002610 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_LTDC_ProgramLineEvent+0x18>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e023      	b.n	8002600 <HAL_LTDC_ProgramLineEvent+0x60>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <HAL_LTDC_ProgramLineEvent+0x6c>)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	40016800 	.word	0x40016800

08002610 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	0c1b      	lsrs	r3, r3, #16
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	4413      	add	r3, r2
 800263a:	041b      	lsls	r3, r3, #16
 800263c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	01db      	lsls	r3, r3, #7
 8002648:	4413      	add	r3, r2
 800264a:	3384      	adds	r3, #132	; 0x84
 800264c:	461a      	mov	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	01db      	lsls	r3, r3, #7
 8002658:	440b      	add	r3, r1
 800265a:	3384      	adds	r3, #132	; 0x84
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002662:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	01db      	lsls	r3, r3, #7
 800266e:	4413      	add	r3, r2
 8002670:	3384      	adds	r3, #132	; 0x84
 8002672:	4619      	mov	r1, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002684:	4413      	add	r3, r2
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269c:	4413      	add	r3, r2
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	3384      	adds	r3, #132	; 0x84
 80026b0:	461a      	mov	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	440b      	add	r3, r1
 80026be:	3384      	adds	r3, #132	; 0x84
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80026c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	4413      	add	r3, r2
 80026d4:	3384      	adds	r3, #132	; 0x84
 80026d6:	4619      	mov	r1, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e6:	4413      	add	r3, r2
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	01db      	lsls	r3, r3, #7
 80026fa:	4413      	add	r3, r2
 80026fc:	3384      	adds	r3, #132	; 0x84
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	01db      	lsls	r3, r3, #7
 800270a:	440b      	add	r3, r1
 800270c:	3384      	adds	r3, #132	; 0x84
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	01db      	lsls	r3, r3, #7
 8002720:	4413      	add	r3, r2
 8002722:	3384      	adds	r3, #132	; 0x84
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	01db      	lsls	r3, r3, #7
 8002752:	4413      	add	r3, r2
 8002754:	3384      	adds	r3, #132	; 0x84
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	01db      	lsls	r3, r3, #7
 8002762:	4413      	add	r3, r2
 8002764:	3384      	adds	r3, #132	; 0x84
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	01db      	lsls	r3, r3, #7
 8002776:	4413      	add	r3, r2
 8002778:	3384      	adds	r3, #132	; 0x84
 800277a:	4619      	mov	r1, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002782:	461a      	mov	r2, r3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	431a      	orrs	r2, r3
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	431a      	orrs	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	01db      	lsls	r3, r3, #7
 800279c:	4413      	add	r3, r2
 800279e:	3384      	adds	r3, #132	; 0x84
 80027a0:	461a      	mov	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4619      	mov	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	01db      	lsls	r3, r3, #7
 80027ac:	440b      	add	r3, r1
 80027ae:	3384      	adds	r3, #132	; 0x84
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	01db      	lsls	r3, r3, #7
 80027c2:	4413      	add	r3, r2
 80027c4:	3384      	adds	r3, #132	; 0x84
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	4413      	add	r3, r2
 80027da:	3384      	adds	r3, #132	; 0x84
 80027dc:	461a      	mov	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	440b      	add	r3, r1
 80027ea:	3384      	adds	r3, #132	; 0x84
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027f2:	f023 0307 	bic.w	r3, r3, #7
 80027f6:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	01db      	lsls	r3, r3, #7
 8002802:	4413      	add	r3, r2
 8002804:	3384      	adds	r3, #132	; 0x84
 8002806:	4619      	mov	r1, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4313      	orrs	r3, r2
 8002812:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	4413      	add	r3, r2
 8002820:	3384      	adds	r3, #132	; 0x84
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	01db      	lsls	r3, r3, #7
 800282e:	4413      	add	r3, r2
 8002830:	3384      	adds	r3, #132	; 0x84
 8002832:	461a      	mov	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	01db      	lsls	r3, r3, #7
 8002842:	4413      	add	r3, r2
 8002844:	3384      	adds	r3, #132	; 0x84
 8002846:	461a      	mov	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 8002856:	2304      	movs	r3, #4
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e01b      	b.n	8002894 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 8002864:	2303      	movs	r3, #3
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e014      	b.n	8002894 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00b      	beq.n	800288a <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002876:	2b02      	cmp	r3, #2
 8002878:	d007      	beq.n	800288a <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800287e:	2b03      	cmp	r3, #3
 8002880:	d003      	beq.n	800288a <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002886:	2b07      	cmp	r3, #7
 8002888:	d102      	bne.n	8002890 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 800288a:	2302      	movs	r3, #2
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e001      	b.n	8002894 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002890:	2301      	movs	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	01db      	lsls	r3, r3, #7
 800289e:	4413      	add	r3, r2
 80028a0:	3384      	adds	r3, #132	; 0x84
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	01db      	lsls	r3, r3, #7
 80028ae:	440b      	add	r3, r1
 80028b0:	3384      	adds	r3, #132	; 0x84
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80028b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	01db      	lsls	r3, r3, #7
 80028c4:	4413      	add	r3, r2
 80028c6:	3384      	adds	r3, #132	; 0x84
 80028c8:	4618      	mov	r0, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	041a      	lsls	r2, r3, #16
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1acb      	subs	r3, r1, r3
 80028e0:	69f9      	ldr	r1, [r7, #28]
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	3303      	adds	r3, #3
 80028e8:	4313      	orrs	r3, r2
 80028ea:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	01db      	lsls	r3, r3, #7
 80028f6:	4413      	add	r3, r2
 80028f8:	3384      	adds	r3, #132	; 0x84
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	01db      	lsls	r3, r3, #7
 8002906:	440b      	add	r3, r1
 8002908:	3384      	adds	r3, #132	; 0x84
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002910:	f023 0307 	bic.w	r3, r3, #7
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	01db      	lsls	r3, r3, #7
 8002920:	4413      	add	r3, r2
 8002922:	3384      	adds	r3, #132	; 0x84
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	01db      	lsls	r3, r3, #7
 8002936:	4413      	add	r3, r2
 8002938:	3384      	adds	r3, #132	; 0x84
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	01db      	lsls	r3, r3, #7
 8002946:	440b      	add	r3, r1
 8002948:	3384      	adds	r3, #132	; 0x84
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6013      	str	r3, [r2, #0]
}
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	; 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002986:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7fd fe26 	bl	80005dc <HAL_GetTick>
 8002990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002994:	f7fd fe22 	bl	80005dc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e01f      	b.n	80029e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029bc:	f7fd fe0e 	bl	80005dc <HAL_GetTick>
 80029c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029c2:	e009      	b.n	80029d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029c4:	f7fd fe0a 	bl	80005dc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d2:	d901      	bls.n	80029d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e007      	b.n	80029e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029e4:	d1ee      	bne.n	80029c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	420e0040 	.word	0x420e0040
 80029f8:	40007000 	.word	0x40007000
 80029fc:	420e0044 	.word	0x420e0044

08002a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e22d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d075      	beq.n	8002b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a1e:	4ba3      	ldr	r3, [pc, #652]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d00c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d112      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a36:	4b9d      	ldr	r3, [pc, #628]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a42:	d10b      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a44:	4b99      	ldr	r3, [pc, #612]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d05b      	beq.n	8002b08 <HAL_RCC_OscConfig+0x108>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d157      	bne.n	8002b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e208      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d106      	bne.n	8002a74 <HAL_RCC_OscConfig+0x74>
 8002a66:	4a91      	ldr	r2, [pc, #580]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	4b90      	ldr	r3, [pc, #576]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x98>
 8002a7e:	4a8b      	ldr	r2, [pc, #556]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	4b8a      	ldr	r3, [pc, #552]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4a88      	ldr	r2, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	4b87      	ldr	r3, [pc, #540]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0xb0>
 8002a98:	4a84      	ldr	r2, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4a81      	ldr	r2, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fd fd90 	bl	80005dc <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fd fd8c 	bl	80005dc <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e1cd      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
 8002ade:	e014      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fd fd7c 	bl	80005dc <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fd fd78 	bl	80005dc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1b9      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xe8>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d063      	beq.n	8002bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x152>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e18d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4956      	ldr	r1, [pc, #344]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	4b55      	ldr	r3, [pc, #340]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_RCC_OscConfig+0x2b0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fd fd31 	bl	80005dc <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fd fd2d 	bl	80005dc <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e16e      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4943      	ldr	r1, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_OscConfig+0x2b0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fd fd10 	bl	80005dc <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fd fd0c 	bl	80005dc <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e14d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b36      	ldr	r3, [pc, #216]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d030      	beq.n	8002c4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_OscConfig+0x2b4>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fd fcf0 	bl	80005dc <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fd fcec 	bl	80005dc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e12d      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x200>
 8002c1e:	e015      	b.n	8002c4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <HAL_RCC_OscConfig+0x2b4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fd fcd9 	bl	80005dc <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fd fcd5 	bl	80005dc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e116      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a0 	beq.w	8002d9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d121      	bne.n	8002cda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4a08      	ldr	r2, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x2b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fd fc9b 	bl	80005dc <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e011      	b.n	8002cce <HAL_RCC_OscConfig+0x2ce>
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	42470000 	.word	0x42470000
 8002cb4:	42470e80 	.word	0x42470e80
 8002cb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cbc:	f7fd fc8e 	bl	80005dc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0cf      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
 8002ce2:	4a66      	ldr	r2, [pc, #408]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002ce4:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	e01c      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x312>
 8002cf8:	4a60      	ldr	r2, [pc, #384]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002cfa:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6713      	str	r3, [r2, #112]	; 0x70
 8002d04:	4a5d      	ldr	r2, [pc, #372]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d10:	e00b      	b.n	8002d2a <HAL_RCC_OscConfig+0x32a>
 8002d12:	4a5a      	ldr	r2, [pc, #360]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d20:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7fd fc53 	bl	80005dc <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fd fc4f 	bl	80005dc <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e08e      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ee      	beq.n	8002d3a <HAL_RCC_OscConfig+0x33a>
 8002d5c:	e014      	b.n	8002d88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fd fc3d 	bl	80005dc <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fd fc39 	bl	80005dc <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e078      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d064      	beq.n	8002e6c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d05c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d141      	bne.n	8002e3a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_RCC_OscConfig+0x480>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fd fc0e 	bl	80005dc <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fd fc0a 	bl	80005dc <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04b      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002de2:	4926      	ldr	r1, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	019b      	lsls	r3, r3, #6
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	041b      	lsls	r3, r3, #16
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	061b      	lsls	r3, r3, #24
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <HAL_RCC_OscConfig+0x480>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fd fbe3 	bl	80005dc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fd fbdf 	bl	80005dc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e020      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x41a>
 8002e38:	e018      	b.n	8002e6c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_OscConfig+0x480>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7fd fbcc 	bl	80005dc <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fd fbc8 	bl	80005dc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCC_OscConfig+0x47c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x448>
 8002e66:	e001      	b.n	8002e6c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470060 	.word	0x42470060

08002e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0ca      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d20c      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b6      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	4b52      	ldr	r3, [pc, #328]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	494f      	ldr	r1, [pc, #316]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002efe:	4b4f      	ldr	r3, [pc, #316]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d044      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d119      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07d      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06d      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e065      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f62:	4936      	ldr	r1, [pc, #216]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	4b35      	ldr	r3, [pc, #212]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f74:	f7fd fb32 	bl	80005dc <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7c:	f7fd fb2e 	bl	80005dc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04d      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	4b2a      	ldr	r3, [pc, #168]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 020c 	and.w	r2, r3, #12
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1eb      	bne.n	8002f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90c      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e030      	b.n	800302e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4918      	ldr	r1, [pc, #96]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff6:	4911      	ldr	r1, [pc, #68]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f81d 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 800300e:	4601      	mov	r1, r0
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	5cd3      	ldrb	r3, [r2, r3]
 800301e:	fa21 f303 	lsr.w	r3, r1, r3
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003026:	200f      	movs	r0, #15
 8003028:	f7fd fa94 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	0802e554 	.word	0x0802e554
 8003044:	200008d4 	.word	0x200008d4

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003050:	2200      	movs	r2, #0
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	617a      	str	r2, [r7, #20]
 8003058:	2200      	movs	r2, #0
 800305a:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 800305c:	2200      	movs	r2, #0
 800305e:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003060:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	f002 020c 	and.w	r2, r2, #12
 8003068:	2a04      	cmp	r2, #4
 800306a:	d007      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x34>
 800306c:	2a08      	cmp	r2, #8
 800306e:	d008      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x3a>
 8003070:	2a00      	cmp	r2, #0
 8003072:	f040 8090 	bne.w	8003196 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003076:	4b4d      	ldr	r3, [pc, #308]	; (80031ac <HAL_RCC_GetSysClockFreq+0x164>)
 8003078:	613b      	str	r3, [r7, #16]
       break;
 800307a:	e08f      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800307c:	4b4c      	ldr	r3, [pc, #304]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x168>)
 800307e:	613b      	str	r3, [r7, #16]
      break;
 8003080:	e08c      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003082:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003084:	6852      	ldr	r2, [r2, #4]
 8003086:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800308a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308c:	4a46      	ldr	r2, [pc, #280]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800308e:	6852      	ldr	r2, [r2, #4]
 8003090:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003094:	2a00      	cmp	r2, #0
 8003096:	d023      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	ea03 0301 	and.w	r3, r3, r1
 80030ae:	ea04 0402 	and.w	r4, r4, r2
 80030b2:	4a3f      	ldr	r2, [pc, #252]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030b4:	fb02 f104 	mul.w	r1, r2, r4
 80030b8:	2200      	movs	r2, #0
 80030ba:	fb02 f203 	mul.w	r2, r2, r3
 80030be:	440a      	add	r2, r1
 80030c0:	493b      	ldr	r1, [pc, #236]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030c2:	fba3 0101 	umull	r0, r1, r3, r1
 80030c6:	1853      	adds	r3, r2, r1
 80030c8:	4619      	mov	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f04f 0400 	mov.w	r4, #0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	f7fd f894 	bl	8000200 <__aeabi_uldivmod>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e04c      	b.n	800317a <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e0:	4a31      	ldr	r2, [pc, #196]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030e2:	6852      	ldr	r2, [r2, #4]
 80030e4:	0992      	lsrs	r2, r2, #6
 80030e6:	4611      	mov	r1, r2
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f240 15ff 	movw	r5, #511	; 0x1ff
 80030f0:	f04f 0600 	mov.w	r6, #0
 80030f4:	ea05 0501 	and.w	r5, r5, r1
 80030f8:	ea06 0602 	and.w	r6, r6, r2
 80030fc:	4629      	mov	r1, r5
 80030fe:	4632      	mov	r2, r6
 8003100:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003104:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003108:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800310c:	4651      	mov	r1, sl
 800310e:	465a      	mov	r2, fp
 8003110:	46aa      	mov	sl, r5
 8003112:	46b3      	mov	fp, r6
 8003114:	4655      	mov	r5, sl
 8003116:	465e      	mov	r6, fp
 8003118:	1b4d      	subs	r5, r1, r5
 800311a:	eb62 0606 	sbc.w	r6, r2, r6
 800311e:	4629      	mov	r1, r5
 8003120:	4632      	mov	r2, r6
 8003122:	0194      	lsls	r4, r2, #6
 8003124:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003128:	018b      	lsls	r3, r1, #6
 800312a:	1a5b      	subs	r3, r3, r1
 800312c:	eb64 0402 	sbc.w	r4, r4, r2
 8003130:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003134:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003138:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800313c:	4643      	mov	r3, r8
 800313e:	464c      	mov	r4, r9
 8003140:	4655      	mov	r5, sl
 8003142:	465e      	mov	r6, fp
 8003144:	18ed      	adds	r5, r5, r3
 8003146:	eb46 0604 	adc.w	r6, r6, r4
 800314a:	462b      	mov	r3, r5
 800314c:	4634      	mov	r4, r6
 800314e:	02a2      	lsls	r2, r4, #10
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	029b      	lsls	r3, r3, #10
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003162:	4618      	mov	r0, r3
 8003164:	4621      	mov	r1, r4
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	f7fd f846 	bl	8000200 <__aeabi_uldivmod>
 8003174:	4603      	mov	r3, r0
 8003176:	460c      	mov	r4, r1
 8003178:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	3301      	adds	r3, #1
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	613b      	str	r3, [r7, #16]
      break;
 8003194:	e002      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetSysClockFreq+0x164>)
 8003198:	613b      	str	r3, [r7, #16]
      break;
 800319a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319c:	693b      	ldr	r3, [r7, #16]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	017d7840 	.word	0x017d7840

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	200008d4 	.word	0x200008d4

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4601      	mov	r1, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a9b      	lsrs	r3, r3, #10
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	0802e564 	.word	0x0802e564

080031f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d105      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003218:	2b00      	cmp	r3, #0
 800321a:	d061      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800321c:	4ba3      	ldr	r3, [pc, #652]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003222:	f7fd f9db 	bl	80005dc <HAL_GetTick>
 8003226:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003228:	e008      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800322a:	f7fd f9d7 	bl	80005dc <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e177      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800323c:	4b9c      	ldr	r3, [pc, #624]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d009      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003254:	4996      	ldr	r1, [pc, #600]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	071b      	lsls	r3, r3, #28
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01f      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003274:	4b8e      	ldr	r3, [pc, #568]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	0f1b      	lsrs	r3, r3, #28
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003282:	498b      	ldr	r1, [pc, #556]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	019a      	lsls	r2, r3, #6
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	431a      	orrs	r2, r3
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	071b      	lsls	r3, r3, #28
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800329c:	4984      	ldr	r1, [pc, #528]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800329e:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a4:	f023 021f 	bic.w	r2, r3, #31
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032b4:	4b7d      	ldr	r3, [pc, #500]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032ba:	f7fd f98f 	bl	80005dc <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032c2:	f7fd f98b 	bl	80005dc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e12b      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d4:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d079      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032f8:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032fe:	f7fd f96d 	bl	80005dc <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003306:	f7fd f969 	bl	80005dc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e109      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003318:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003324:	d0ef      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	0f1b      	lsrs	r3, r3, #28
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003340:	495b      	ldr	r1, [pc, #364]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	019a      	lsls	r2, r3, #6
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	431a      	orrs	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	071b      	lsls	r3, r3, #28
 8003354:	4313      	orrs	r3, r2
 8003356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800335a:	4955      	ldr	r1, [pc, #340]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800335c:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800335e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003362:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	3b01      	subs	r3, #1
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01e      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	0e1b      	lsrs	r3, r3, #24
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800338e:	4948      	ldr	r1, [pc, #288]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	019a      	lsls	r2, r3, #6
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	071b      	lsls	r3, r3, #28
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033a8:	4941      	ldr	r1, [pc, #260]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033c4:	f7fd f90a 	bl	80005dc <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80033cc:	f7fd f906 	bl	80005dc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0a6      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ea:	d1ef      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 808d 	beq.w	8003514 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003400:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003416:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003422:	f7fd f8db 	bl	80005dc <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fd f8d7 	bl	80005dc <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e077      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003450:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d039      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	429a      	cmp	r2, r3
 8003464:	d032      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01e      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd f8a5 	bl	80005dc <HAL_GetTick>
 8003492:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	e014      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd f8a1 	bl	80005dc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d90b      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e03f      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x338>
 80034ac:	42470068 	.word	0x42470068
 80034b0:	40023800 	.word	0x40023800
 80034b4:	42470070 	.word	0x42470070
 80034b8:	40007000 	.word	0x40007000
 80034bc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0e4      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d8:	d10d      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x302>
 80034da:	4916      	ldr	r1, [pc, #88]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
 80034f4:	e005      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80034f6:	4a0f      	ldr	r2, [pc, #60]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003500:	6093      	str	r3, [r2, #8]
 8003502:	490c      	ldr	r1, [pc, #48]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	4313      	orrs	r3, r2
 8003512:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003520:	4a05      	ldr	r2, [pc, #20]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003528:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40023800 	.word	0x40023800
 8003538:	424711e0 	.word	0x424711e0

0800353c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e025      	b.n	800359c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f004 fb97 	bl	8007c98 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f000 fa81 	bl	8003a84 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	6839      	ldr	r1, [r7, #0]
 800358e:	f000 faec 	bl	8003b6a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d101      	bne.n	80035c0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
 80035be:	e018      	b.n	80035f2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fb49 	bl	8003c68 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d104      	bne.n	80035e8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80035e6:	e003      	b.n	80035f0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d101      	bne.n	8003614 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	e00e      	b.n	8003632 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fb5c 	bl	8003ce0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e055      	b.n	80036f8 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 ff04 	bl	8004474 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6851      	ldr	r1, [r2, #4]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6892      	ldr	r2, [r2, #8]
 8003690:	4311      	orrs	r1, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	68d2      	ldr	r2, [r2, #12]
 8003696:	4311      	orrs	r1, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6912      	ldr	r2, [r2, #16]
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6952      	ldr	r2, [r2, #20]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6992      	ldr	r2, [r2, #24]
 80036a8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80036ac:	4311      	orrs	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	69d2      	ldr	r2, [r2, #28]
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6a12      	ldr	r2, [r2, #32]
 80036b8:	4311      	orrs	r1, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6992      	ldr	r2, [r2, #24]
 80036ca:	0c12      	lsrs	r2, r2, #16
 80036cc:	f002 0104 	and.w	r1, r2, #4
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	69d2      	ldr	r2, [r2, #28]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_SPI_Transmit+0x26>
 8003722:	2302      	movs	r3, #2
 8003724:	e123      	b.n	800396e <HAL_SPI_Transmit+0x26e>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800372e:	f7fc ff55 	bl	80005dc <HAL_GetTick>
 8003732:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d002      	beq.n	8003746 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003740:	2302      	movs	r3, #2
 8003742:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003744:	e10a      	b.n	800395c <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_SPI_Transmit+0x52>
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003756:	e101      	b.n	800395c <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379e:	d107      	bne.n	80037b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	6812      	ldr	r2, [r2, #0]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d007      	beq.n	80037ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d6:	d147      	bne.n	8003868 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d004      	beq.n	80037ea <HAL_SPI_Transmit+0xea>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d138      	bne.n	800385c <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3302      	adds	r3, #2
 80037f8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003808:	e028      	b.n	800385c <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	d10f      	bne.n	8003838 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	8812      	ldrh	r2, [r2, #0]
 8003820:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3302      	adds	r3, #2
 8003826:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382c:	b29b      	uxth	r3, r3
 800382e:	3b01      	subs	r3, #1
 8003830:	b29a      	uxth	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	86da      	strh	r2, [r3, #54]	; 0x36
 8003836:	e011      	b.n	800385c <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_SPI_Transmit+0x156>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003844:	d00a      	beq.n	800385c <HAL_SPI_Transmit+0x15c>
 8003846:	f7fc fec9 	bl	80005dc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	77fb      	strb	r3, [r7, #31]
          goto error;
 800385a:	e07f      	b.n	800395c <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1d1      	bne.n	800380a <HAL_SPI_Transmit+0x10a>
 8003866:	e048      	b.n	80038fa <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <HAL_SPI_Transmit+0x17a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d13a      	bne.n	80038f0 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	7812      	ldrb	r2, [r2, #0]
 8003884:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3301      	adds	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800389a:	e029      	b.n	80038f0 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d110      	bne.n	80038cc <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	7812      	ldrb	r2, [r2, #0]
 80038b4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80038ca:	e011      	b.n	80038f0 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_SPI_Transmit+0x1ea>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d00a      	beq.n	80038f0 <HAL_SPI_Transmit+0x1f0>
 80038da:	f7fc fe7f 	bl	80005dc <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad2      	subs	r2, r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038ee:	e035      	b.n	800395c <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1d0      	bne.n	800389c <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2201      	movs	r2, #1
 8003902:	2102      	movs	r1, #2
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f836 	bl	8003976 <SPI_WaitFlagStateUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003914:	e022      	b.n	800395c <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f894 	bl	8003a48 <SPI_CheckFlag_BSY>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003930:	e014      	b.n	800395c <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800396c:	7ffb      	ldrb	r3, [r7, #31]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003984:	e04d      	b.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800398c:	d049      	beq.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003994:	f7fc fe22 	bl	80005dc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	1ad2      	subs	r2, r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d33e      	bcc.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	6852      	ldr	r2, [r2, #4]
 80039ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b2:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039bc:	d111      	bne.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c6:	d004      	beq.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d0:	d107      	bne.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ea:	d110      	bne.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80039fa:	400b      	ands	r3, r1
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e00e      	b.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d101      	bne.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8003a32:	2201      	movs	r2, #1
 8003a34:	e000      	b.n	8003a38 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8003a36:	2200      	movs	r2, #0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d1a3      	bne.n	8003986 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff89 	bl	8003976 <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e000      	b.n	8003a7c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d029      	beq.n	8003af2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003aae:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ab8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8003abe:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8003ac4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8003aca:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003ad0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8003ad6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8003adc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003ae2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e034      	b.n	8003b5c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003afe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003b08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003b0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b26:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003b30:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8003b36:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8003b3c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003b42:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8003b48:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b087      	sub	sp, #28
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d02e      	beq.n	8003be2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b90:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003ba0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003baa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003bb4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003bbe:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003bc8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	e03b      	b.n	8003c5a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003c04:	4313      	orrs	r3, r2
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c18:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003c28:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003c32:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003c3c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003c46:	4313      	orrs	r3, r2
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c84:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8003c8e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003ca0:	f7fc fc9c 	bl	80005dc <HAL_GetTick>
 8003ca4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003ca6:	e010      	b.n	8003cca <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cae:	d00c      	beq.n	8003cca <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <FMC_SDRAM_SendCommand+0x5e>
 8003cb6:	f7fc fc91 	bl	80005dc <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1ad2      	subs	r2, r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d901      	bls.n	8003cca <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e006      	b.n	8003cd8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e8      	bne.n	8003ca8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  //
  // Assign memory to STemWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8003d0c:	f44f 310c 	mov.w	r1, #143360	; 0x23000
 8003d10:	4803      	ldr	r0, [pc, #12]	; (8003d20 <GUI_X_Config+0x18>)
 8003d12:	f004 fb2f 	bl	8008374 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8003d16:	4803      	ldr	r0, [pc, #12]	; (8003d24 <GUI_X_Config+0x1c>)
 8003d18:	f004 ff82 	bl	8008c20 <GUI_SetDefaultFont>
}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	200048c4 	.word	0x200048c4
 8003d24:	08018af4 	.word	0x08018af4

08003d28 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static inline U32 LCD_LL_GetPixelformat(U32 LayerIndex)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_DMA2D_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Enable peripheral */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_DMA2D_MspInit+0x30>)
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_DMA2D_MspInit+0x30>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d56:	6313      	str	r3, [r2, #48]	; 0x30
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_DMA2D_MspInit+0x30>)
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_LTDC_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08e      	sub	sp, #56	; 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable peripherals and GPIO Clocks */
  /* Enable the LTDC Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO Clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	4a56      	ldr	r2, [pc, #344]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003d9e:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6313      	str	r3, [r2, #48]	; 0x30
 8003da8:	4b53      	ldr	r3, [pc, #332]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc4:	4b4c      	ldr	r3, [pc, #304]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003dd6:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	6313      	str	r3, [r2, #48]	; 0x30
 8003de0:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003df2:	4b41      	ldr	r3, [pc, #260]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f043 0308 	orr.w	r3, r3, #8
 8003dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003e0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f043 0320 	orr.w	r3, r3, #32
 8003e16:	6313      	str	r3, [r2, #48]	; 0x30
 8003e18:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	4a33      	ldr	r2, [pc, #204]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003e2a:	4b33      	ldr	r3, [pc, #204]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e32:	6313      	str	r3, [r2, #48]	; 0x30
 8003e34:	4b30      	ldr	r3, [pc, #192]	; (8003ef8 <HAL_LTDC_MspInit+0x184>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003e40:	f641 0358 	movw	r3, #6232	; 0x1858
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_Init_Structure.Mode = GPIO_MODE_AF_PP;
 8003e46:	2302      	movs	r3, #2
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_Init_Structure.Speed = GPIO_SPEED_FAST;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_Init_Structure.Alternate= GPIO_AF14_LTDC;
 8003e52:	230e      	movs	r3, #14
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Structure);
 8003e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4827      	ldr	r0, [pc, #156]	; (8003efc <HAL_LTDC_MspInit+0x188>)
 8003e5e:	f7fc fe4f 	bl	8000b00 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_8 | \
 8003e62:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8003e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4824      	ldr	r0, [pc, #144]	; (8003f00 <HAL_LTDC_MspInit+0x18c>)
 8003e70:	f7fc fe46 	bl	8000b00 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003e74:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8003e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4820      	ldr	r0, [pc, #128]	; (8003f04 <HAL_LTDC_MspInit+0x190>)
 8003e82:	f7fc fe3d 	bl	8000b00 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003e86:	2348      	movs	r3, #72	; 0x48
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8003e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e8e:	4619      	mov	r1, r3
 8003e90:	481d      	ldr	r0, [pc, #116]	; (8003f08 <HAL_LTDC_MspInit+0x194>)
 8003e92:	f7fc fe35 	bl	8000b00 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10;
 8003e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 8003e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	481a      	ldr	r0, [pc, #104]	; (8003f0c <HAL_LTDC_MspInit+0x198>)
 8003ea4:	f7fc fe2c 	bl	8000b00 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003ea8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4816      	ldr	r0, [pc, #88]	; (8003f10 <HAL_LTDC_MspInit+0x19c>)
 8003eb6:	f7fc fe23 	bl	8000b00 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Alternate= GPIO_AF9_LTDC;
 8003ebe:	2309      	movs	r3, #9
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_Init_Structure);
 8003ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	480d      	ldr	r0, [pc, #52]	; (8003f00 <HAL_LTDC_MspInit+0x18c>)
 8003eca:	f7fc fe19 	bl	8000b00 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_Init_Structure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003ece:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 8003ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed8:	4619      	mov	r1, r3
 8003eda:	480d      	ldr	r0, [pc, #52]	; (8003f10 <HAL_LTDC_MspInit+0x19c>)
 8003edc:	f7fc fe10 	bl	8000b00 <HAL_GPIO_Init>

  /* Set LTDC Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	210e      	movs	r1, #14
 8003ee4:	2058      	movs	r0, #88	; 0x58
 8003ee6:	f7fc fc7c 	bl	80007e2 <HAL_NVIC_SetPriority>

  /* Enable LTDC Interrupt */
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003eea:	2058      	movs	r0, #88	; 0x58
 8003eec:	f7fc fc95 	bl	800081a <HAL_NVIC_EnableIRQ>
}
 8003ef0:	bf00      	nop
 8003ef2:	3738      	adds	r7, #56	; 0x38
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40020000 	.word	0x40020000
 8003f00:	40020400 	.word	0x40020400
 8003f04:	40020800 	.word	0x40020800
 8003f08:	40020c00 	.word	0x40020c00
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40021800 	.word	0x40021800

08003f14 <HAL_LTDC_MspDeInit>:
  *          - Disable the Peripheral's clock
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Reset peripherals */
  /* Enable LTDC reset state */
  __HAL_RCC_LTDC_FORCE_RESET();
 8003f1c:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <HAL_LTDC_MspDeInit+0x2c>)
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_LTDC_MspDeInit+0x2c>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f26:	6253      	str	r3, [r2, #36]	; 0x24

  /* Release LTDC from reset state */
  __HAL_RCC_LTDC_RELEASE_RESET();
 8003f28:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <HAL_LTDC_MspDeInit+0x2c>)
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_LTDC_MspDeInit+0x2c>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f32:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  U32 Addr;
  U32 layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e06b      	b.n	800402a <HAL_LTDC_LineEventCallback+0xe6>
  {
    if (layer_prop[layer].pending_buffer >= 0)
 8003f52:	493b      	ldr	r1, [pc, #236]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	3304      	adds	r3, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	db5d      	blt.n	8004024 <HAL_LTDC_LineEventCallback+0xe0>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + \
 8003f68:	4935      	ldr	r1, [pc, #212]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	6819      	ldr	r1, [r3, #0]
             layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8003f78:	4831      	ldr	r0, [pc, #196]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4403      	add	r3, r0
 8003f86:	330c      	adds	r3, #12
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	4c2d      	ldr	r4, [pc, #180]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4423      	add	r3, r4
 8003f98:	3310      	adds	r3, #16
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fb03 f000 	mul.w	r0, r3, r0
 8003fa0:	4c27      	ldr	r4, [pc, #156]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4423      	add	r3, r4
 8003fae:	3304      	adds	r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fb03 f000 	mul.w	r0, r3, r0
 8003fb6:	4c22      	ldr	r4, [pc, #136]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4423      	add	r3, r4
 8003fc4:	3314      	adds	r3, #20
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	fb03 f300 	mul.w	r3, r3, r0
      Addr = layer_prop[layer].address + \
 8003fcc:	440b      	add	r3, r1
 8003fce:	60bb      	str	r3, [r7, #8]

      __HAL_LTDC_LAYER(hltdc, layer)->CFBAR = Addr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4413      	add	r3, r2
 8003fdc:	3384      	adds	r3, #132	; 0x84
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6293      	str	r3, [r2, #40]	; 0x28

      __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	4912      	ldr	r1, [pc, #72]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	3304      	adds	r3, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	f005 fdef 	bl	8009bec <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 800400e:	490c      	ldr	r1, [pc, #48]	; (8004040 <HAL_LTDC_LineEventCallback+0xfc>)
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3304      	adds	r3, #4
 800401e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004022:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d090      	beq.n	8003f52 <HAL_LTDC_LineEventCallback+0xe>
    }
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004030:	2100      	movs	r1, #0
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fe fab4 	bl	80025a0 <HAL_LTDC_ProgramLineEvent>
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bd90      	pop	{r4, r7, pc}
 8004040:	20000b18 	.word	0x20000b18

08004044 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
  U32 i;

  LCD_LL_Init ();
 800404a:	f000 fa5b 	bl	8004504 <LCD_LL_Init>

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
    for (i = 0; i < GUI_NUM_LAYERS; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	e007      	b.n	8004064 <LCD_X_Config+0x20>
    {
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2103      	movs	r1, #3
 8004058:	4618      	mov	r0, r3
 800405a:	f005 fddb 	bl	8009c14 <GUI_MULTIBUF_ConfigEx>
    for (i = 0; i < GUI_NUM_LAYERS; i++)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3301      	adds	r3, #1
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f4      	beq.n	8004054 <LCD_X_Config+0x10>
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800406a:	2300      	movs	r3, #0
 800406c:	2200      	movs	r2, #0
 800406e:	4942      	ldr	r1, [pc, #264]	; (8004178 <LCD_X_Config+0x134>)
 8004070:	4842      	ldr	r0, [pc, #264]	; (800417c <LCD_X_Config+0x138>)
 8004072:	f004 ffad 	bl	8008fd0 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8004076:	2000      	movs	r0, #0
 8004078:	f007 f938 	bl	800b2ec <LCD_GetSwapXYEx>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <LCD_X_Config+0x58>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004082:	22f0      	movs	r2, #240	; 0xf0
 8004084:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004088:	2000      	movs	r0, #0
 800408a:	f007 fe10 	bl	800bcae <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800408e:	22f0      	movs	r2, #240	; 0xf0
 8004090:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004094:	2000      	movs	r0, #0
 8004096:	f007 fe38 	bl	800bd0a <LCD_SetVSizeEx>
 800409a:	e00b      	b.n	80040b4 <LCD_X_Config+0x70>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800409c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040a0:	21f0      	movs	r1, #240	; 0xf0
 80040a2:	2000      	movs	r0, #0
 80040a4:	f007 fe03 	bl	800bcae <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 80040a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80040ac:	21f0      	movs	r1, #240	; 0xf0
 80040ae:	2000      	movs	r0, #0
 80040b0:	f007 fe2b 	bl	800bd0a <LCD_SetVSizeEx>
    }
  #endif


    /*Initialize GUI Layer structure */
    layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <LCD_X_Config+0x13c>)
 80040b6:	4a33      	ldr	r2, [pc, #204]	; (8004184 <LCD_X_Config+0x140>)
 80040b8:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
    layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER;
#endif

   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e053      	b.n	8004168 <LCD_X_Config+0x124>
  {

    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 80040c0:	4a31      	ldr	r2, [pc, #196]	; (8004188 <LCD_X_Config+0x144>)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040c8:	482d      	ldr	r0, [pc, #180]	; (8004180 <LCD_X_Config+0x13c>)
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	3318      	adds	r3, #24
 80040d8:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 80040da:	4929      	ldr	r1, [pc, #164]	; (8004180 <LCD_X_Config+0x13c>)
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3304      	adds	r3, #4
 80040ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ee:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4923      	ldr	r1, [pc, #140]	; (8004180 <LCD_X_Config+0x13c>)
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	f007 fdeb 	bl	800bcde <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4618      	mov	r0, r3
 800410c:	f007 f8e2 	bl	800b2d4 <LCD_GetBitsPerPixelEx>
 8004110:	4603      	mov	r3, r0
 8004112:	10d9      	asrs	r1, r3, #3
 8004114:	481a      	ldr	r0, [pc, #104]	; (8004180 <LCD_X_Config+0x13c>)
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4403      	add	r3, r0
 8004122:	3314      	adds	r3, #20
 8004124:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <LCD_X_Config+0x148>)
 800412a:	2121      	movs	r1, #33	; 0x21
 800412c:	4618      	mov	r0, r3
 800412e:	f007 fd8e 	bl	800bc4e <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <LCD_X_Config+0x14c>)
 8004136:	2123      	movs	r1, #35	; 0x23
 8004138:	4618      	mov	r0, r3
 800413a:	f007 fd88 	bl	800bc4e <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <LCD_X_Config+0x150>)
 8004142:	2119      	movs	r1, #25
 8004144:	4618      	mov	r0, r3
 8004146:	f007 fd82 	bl	800bc4e <LCD_SetDevFunc>

    /* Set up drawing routine for 32bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_ARGB8888) {
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7ff fdec 	bl	8003d28 <LCD_LL_GetPixelformat>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <LCD_X_Config+0x11e>
     LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))CUSTOM_DrawBitmap32bpp);     /* Set up drawing routine for 32bpp bitmap using DMA2D. Makes only sense with ARGB8888 */
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <LCD_X_Config+0x154>)
 800415a:	2128      	movs	r1, #40	; 0x28
 800415c:	4618      	mov	r0, r3
 800415e:	f007 fd76 	bl	800bc4e <LCD_SetDevFunc>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3301      	adds	r3, #1
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0a8      	beq.n	80040c0 <LCD_X_Config+0x7c>
    }
  }
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	08018310 	.word	0x08018310
 800417c:	0801838c 	.word	0x0801838c
 8004180:	20000b18 	.word	0x20000b18
 8004184:	d0200000 	.word	0xd0200000
 8004188:	200008cc 	.word	0x200008cc
 800418c:	08004729 	.word	0x08004729
 8004190:	080047dd 	.word	0x080047dd
 8004194:	080048d1 	.word	0x080048d1
 8004198:	080049d1 	.word	0x080049d1

0800419c <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b08b      	sub	sp, #44	; 0x2c
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  int r = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  U32 addr;
  int xPos, yPos;
  U32 Color;

  switch (Cmd)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	2b0d      	cmp	r3, #13
 80041b2:	f200 8102 	bhi.w	80043ba <LCD_X_DisplayDriver+0x21e>
 80041b6:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <LCD_X_DisplayDriver+0x20>)
 80041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041bc:	080041f5 	.word	0x080041f5
 80041c0:	080043bb 	.word	0x080043bb
 80041c4:	080041fd 	.word	0x080041fd
 80041c8:	08004265 	.word	0x08004265
 80041cc:	08004273 	.word	0x08004273
 80041d0:	08004285 	.word	0x08004285
 80041d4:	08004315 	.word	0x08004315
 80041d8:	080042ff 	.word	0x080042ff
 80041dc:	08004297 	.word	0x08004297
 80041e0:	08004363 	.word	0x08004363
 80041e4:	080043bb 	.word	0x080043bb
 80041e8:	08004373 	.word	0x08004373
 80041ec:	0800438f 	.word	0x0800438f
 80041f0:	0800424d 	.word	0x0800424d
  {
  case LCD_X_INITCONTROLLER:
    LCD_LL_LayerInit(LayerIndex);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f8ed 	bl	80043d4 <LCD_LL_LayerInit>
    break;
 80041fa:	e0e1      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETORG:
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 80041fc:	4973      	ldr	r1, [pc, #460]	; (80043cc <LCD_X_DisplayDriver+0x230>)
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6858      	ldr	r0, [r3, #4]
 8004210:	4c6e      	ldr	r4, [pc, #440]	; (80043cc <LCD_X_DisplayDriver+0x230>)
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4423      	add	r3, r4
 800421e:	330c      	adds	r3, #12
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fb03 f000 	mul.w	r0, r3, r0
 8004226:	4c69      	ldr	r4, [pc, #420]	; (80043cc <LCD_X_DisplayDriver+0x230>)
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4423      	add	r3, r4
 8004234:	3314      	adds	r3, #20
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fb03 f300 	mul.w	r3, r3, r0
 800423c:	440b      	add	r3, r1
 800423e:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	6a39      	ldr	r1, [r7, #32]
 8004244:	4862      	ldr	r0, [pc, #392]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 8004246:	f7fe f974 	bl	8002532 <HAL_LTDC_SetAddress>
    break;
 800424a:	e0b9      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SHOWBUFFER:
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	485e      	ldr	r0, [pc, #376]	; (80043cc <LCD_X_DisplayDriver+0x230>)
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4403      	add	r3, r0
 800425e:	3304      	adds	r3, #4
 8004260:	6019      	str	r1, [r3, #0]
    break;
 8004262:	e0ad      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETLUTENTRY:
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	4859      	ldr	r0, [pc, #356]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 800426c:	f7fd ffc3 	bl	80021f6 <HAL_LTDC_ConfigCLUT>
    break;
 8004270:	e0a6      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_ON:
    __HAL_LTDC_ENABLE(&hltdc);
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	6992      	ldr	r2, [r2, #24]
 800427c:	f042 0201 	orr.w	r2, r2, #1
 8004280:	619a      	str	r2, [r3, #24]
    break;
 8004282:	e09d      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_OFF:
    __HAL_LTDC_DISABLE(&hltdc);
 8004284:	4b52      	ldr	r3, [pc, #328]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a51      	ldr	r2, [pc, #324]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	6992      	ldr	r2, [r2, #24]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	619a      	str	r2, [r3, #24]
    break;
 8004294:	e094      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d113      	bne.n	80042c6 <LCD_X_DisplayDriver+0x12a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 800429e:	4b4c      	ldr	r3, [pc, #304]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	4413      	add	r3, r2
 80042aa:	3384      	adds	r3, #132	; 0x84
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b48      	ldr	r3, [pc, #288]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4619      	mov	r1, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	01db      	lsls	r3, r3, #7
 80042b8:	440b      	add	r3, r1
 80042ba:	3384      	adds	r3, #132	; 0x84
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e012      	b.n	80042ec <LCD_X_DisplayDriver+0x150>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 80042c6:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	01db      	lsls	r3, r3, #7
 80042d0:	4413      	add	r3, r2
 80042d2:	3384      	adds	r3, #132	; 0x84
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	440b      	add	r3, r1
 80042e2:	3384      	adds	r3, #132	; 0x84
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 80042ec:	4b38      	ldr	r3, [pc, #224]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a37      	ldr	r2, [pc, #220]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 80042fc:	e060      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETPOS:
    HAL_LTDC_SetWindowPosition(&hltdc,
                               ((LCD_X_SETPOS_INFO *)pData)->xPos,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8004302:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8004308:	461a      	mov	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4830      	ldr	r0, [pc, #192]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 800430e:	f7fe f894 	bl	800243a <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8004312:	e055      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 8004314:	f107 0214 	add.w	r2, r7, #20
 8004318:	f107 0318 	add.w	r3, r7, #24
 800431c:	4619      	mov	r1, r3
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f005 fcba 	bl	8009c98 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	4828      	ldr	r0, [pc, #160]	; (80043cc <LCD_X_DisplayDriver+0x230>)
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4403      	add	r3, r0
 8004336:	330c      	adds	r3, #12
 8004338:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	4823      	ldr	r0, [pc, #140]	; (80043cc <LCD_X_DisplayDriver+0x230>)
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4403      	add	r3, r0
 800434c:	3310      	adds	r3, #16
 800434e:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	4619      	mov	r1, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	481d      	ldr	r0, [pc, #116]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 800435c:	f7fe f86d 	bl	800243a <HAL_LTDC_SetWindowPosition>
    break;
 8004360:	e02e      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4619      	mov	r1, r3
 800436a:	4819      	ldr	r0, [pc, #100]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 800436c:	f7fe f8ab 	bl	80024c6 <HAL_LTDC_SetAlpha>
    break;
 8004370:	e026      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <LCD_X_DisplayDriver+0x1e8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	4814      	ldr	r0, [pc, #80]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 800437e:	f7fd ffae 	bl	80022de <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
    }
    break;
 8004382:	e01d      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	4812      	ldr	r0, [pc, #72]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 8004388:	f7fd ffe3 	bl	8002352 <HAL_LTDC_DisableColorKeying>
    break;
 800438c:	e018      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800439e:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61fb      	str	r3, [r7, #28]

    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	4807      	ldr	r0, [pc, #28]	; (80043d0 <LCD_X_DisplayDriver+0x234>)
 80043b4:	f7fd feda 	bl	800216c <HAL_LTDC_ConfigColorKeying>
    break;
 80043b8:	e002      	b.n	80043c0 <LCD_X_DisplayDriver+0x224>

  default:
    r = -1;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	372c      	adds	r7, #44	; 0x2c
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd90      	pop	{r4, r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000b18 	.word	0x20000b18
 80043d0:	200278c4 	.word	0x200278c4

080043d4 <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(U32 LayerIndex)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b090      	sub	sp, #64	; 0x40
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d13f      	bne.n	8004462 <LCD_LL_LayerInit+0x8e>
  {
    /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 80043e6:	23f0      	movs	r3, #240	; 0xf0
 80043e8:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY0 = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
    layer_cfg.WindowY1 = YSIZE_PHYS;
 80043ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80043f2:	61bb      	str	r3, [r7, #24]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fc97 	bl	8003d28 <LCD_LL_GetPixelformat>
 80043fa:	4603      	mov	r3, r0
 80043fc:	61fb      	str	r3, [r7, #28]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 80043fe:	491b      	ldr	r1, [pc, #108]	; (800446c <LCD_LL_LayerInit+0x98>)
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.Alpha = 255;
 8004410:	23ff      	movs	r3, #255	; 0xff
 8004412:	623b      	str	r3, [r7, #32]
    layer_cfg.Alpha0 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.Backcolor.Blue = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    layer_cfg.Backcolor.Green = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    layer_cfg.Backcolor.Red = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800442a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004430:	2307      	movs	r3, #7
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8004434:	23f0      	movs	r3, #240	; 0xf0
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8004438:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800443c:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 800443e:	f107 030c 	add.w	r3, r7, #12
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4619      	mov	r1, r3
 8004446:	480a      	ldr	r0, [pc, #40]	; (8004470 <LCD_LL_LayerInit+0x9c>)
 8004448:	f7fd fe52 	bl	80020f0 <HAL_LTDC_ConfigLayer>

    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4618      	mov	r0, r3
 8004450:	f006 ff40 	bl	800b2d4 <LCD_GetBitsPerPixelEx>
 8004454:	4603      	mov	r3, r0
 8004456:	2b08      	cmp	r3, #8
 8004458:	dc03      	bgt.n	8004462 <LCD_LL_LayerInit+0x8e>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4804      	ldr	r0, [pc, #16]	; (8004470 <LCD_LL_LayerInit+0x9c>)
 800445e:	f7fd ffb2 	bl	80023c6 <HAL_LTDC_EnableCLUT>
    }
  }
}
 8004462:	bf00      	nop
 8004464:	3740      	adds	r7, #64	; 0x40
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000b18 	.word	0x20000b18
 8004470:	200278c4 	.word	0x200278c4

08004474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HAL_SPI_MspInit+0x84>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d12c      	bne.n	80044f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	4a18      	ldr	r2, [pc, #96]	; (80044fc <HAL_SPI_MspInit+0x88>)
 800449c:	4b17      	ldr	r3, [pc, #92]	; (80044fc <HAL_SPI_MspInit+0x88>)
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a4:	6453      	str	r3, [r2, #68]	; 0x44
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_SPI_MspInit+0x88>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4a11      	ldr	r2, [pc, #68]	; (80044fc <HAL_SPI_MspInit+0x88>)
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_SPI_MspInit+0x88>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <HAL_SPI_MspInit+0x88>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80044ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80044d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044dc:	2303      	movs	r3, #3
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80044e0:	2305      	movs	r3, #5
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	4619      	mov	r1, r3
 80044ea:	4805      	ldr	r0, [pc, #20]	; (8004500 <HAL_SPI_MspInit+0x8c>)
 80044ec:	f7fc fb08 	bl	8000b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80044f0:	bf00      	nop
 80044f2:	3728      	adds	r7, #40	; 0x28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40015000 	.word	0x40015000
 80044fc:	40023800 	.word	0x40023800
 8004500:	40021400 	.word	0x40021400

08004504 <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  None
  * @retval None
  */
static void LCD_LL_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 8004508:	4834      	ldr	r0, [pc, #208]	; (80045dc <LCD_LL_Init+0xd8>)
 800450a:	f7fd fd21 	bl	8001f50 <HAL_LTDC_DeInit>

      /* Initializaton of ILI9341 component*/
      //ili9341_Init();
      //MX_GPIO_Init();
      //MX_SPI5_Init();
      MyLCD_PowerOn();
 800450e:	f002 fd17 	bl	8006f40 <MyLCD_PowerOn>
      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 8004512:	4b32      	ldr	r3, [pc, #200]	; (80045dc <LCD_LL_Init+0xd8>)
 8004514:	2209      	movs	r2, #9
 8004516:	615a      	str	r2, [r3, #20]
      hltdc.Init.VerticalSync = 1;
 8004518:	4b30      	ldr	r3, [pc, #192]	; (80045dc <LCD_LL_Init+0xd8>)
 800451a:	2201      	movs	r2, #1
 800451c:	619a      	str	r2, [r3, #24]
      hltdc.Init.AccumulatedHBP = 29;
 800451e:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <LCD_LL_Init+0xd8>)
 8004520:	221d      	movs	r2, #29
 8004522:	61da      	str	r2, [r3, #28]
      hltdc.Init.AccumulatedVBP = 3;
 8004524:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <LCD_LL_Init+0xd8>)
 8004526:	2203      	movs	r2, #3
 8004528:	621a      	str	r2, [r3, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 800452a:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <LCD_LL_Init+0xd8>)
 800452c:	f240 1243 	movw	r2, #323	; 0x143
 8004530:	629a      	str	r2, [r3, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <LCD_LL_Init+0xd8>)
 8004534:	f240 120d 	movw	r2, #269	; 0x10d
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <LCD_LL_Init+0xd8>)
 800453c:	f240 1247 	movw	r2, #327	; 0x147
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <LCD_LL_Init+0xd8>)
 8004544:	f240 1217 	movw	r2, #279	; 0x117
 8004548:	62da      	str	r2, [r3, #44]	; 0x2c

      /* background value */
      hltdc.Init.Backcolor.Blue = 0;
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <LCD_LL_Init+0xd8>)
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 8004552:	4b22      	ldr	r3, [pc, #136]	; (80045dc <LCD_LL_Init+0xd8>)
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 800455a:	4b20      	ldr	r3, [pc, #128]	; (80045dc <LCD_LL_Init+0xd8>)
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 MHz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 MHz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 MHz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 MHz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004562:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <LCD_LL_Init+0xdc>)
 8004564:	2208      	movs	r2, #8
 8004566:	601a      	str	r2, [r3, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <LCD_LL_Init+0xdc>)
 800456a:	22c0      	movs	r2, #192	; 0xc0
 800456c:	611a      	str	r2, [r3, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <LCD_LL_Init+0xdc>)
 8004570:	2204      	movs	r2, #4
 8004572:	619a      	str	r2, [r3, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <LCD_LL_Init+0xdc>)
 8004576:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800457a:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800457c:	4818      	ldr	r0, [pc, #96]	; (80045e0 <LCD_LL_Init+0xdc>)
 800457e:	f7fe fe39 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>

      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004582:	4b16      	ldr	r3, [pc, #88]	; (80045dc <LCD_LL_Init+0xd8>)
 8004584:	2200      	movs	r2, #0
 8004586:	605a      	str	r2, [r3, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <LCD_LL_Init+0xd8>)
 800458a:	2200      	movs	r2, #0
 800458c:	609a      	str	r2, [r3, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <LCD_LL_Init+0xd8>)
 8004590:	2200      	movs	r2, #0
 8004592:	60da      	str	r2, [r3, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004594:	4b11      	ldr	r3, [pc, #68]	; (80045dc <LCD_LL_Init+0xd8>)
 8004596:	2200      	movs	r2, #0
 8004598:	611a      	str	r2, [r3, #16]
      hltdc.Instance = LTDC;
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <LCD_LL_Init+0xd8>)
 800459c:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <LCD_LL_Init+0xe0>)
 800459e:	601a      	str	r2, [r3, #0]

      HAL_LTDC_Init(&hltdc);
 80045a0:	480e      	ldr	r0, [pc, #56]	; (80045dc <LCD_LL_Init+0xd8>)
 80045a2:	f7fd fc01 	bl	8001da8 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 80045a6:	2100      	movs	r1, #0
 80045a8:	480c      	ldr	r0, [pc, #48]	; (80045dc <LCD_LL_Init+0xd8>)
 80045aa:	f7fd fff9 	bl	80025a0 <HAL_LTDC_ProgramLineEvent>

	  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <LCD_LL_Init+0xe4>)
 80045b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80045b4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_ARGB8888;
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <LCD_LL_Init+0xe4>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <LCD_LL_Init+0xe4>)
 80045be:	2200      	movs	r2, #0
 80045c0:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D;
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <LCD_LL_Init+0xe4>)
 80045c4:	4a09      	ldr	r2, [pc, #36]	; (80045ec <LCD_LL_Init+0xe8>)
 80045c6:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80045c8:	4807      	ldr	r0, [pc, #28]	; (80045e8 <LCD_LL_Init+0xe4>)
 80045ca:	f7fc f940 	bl	800084e <HAL_DMA2D_Init>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d000      	beq.n	80045d6 <LCD_LL_Init+0xd2>
  {
    while (1);
 80045d4:	e7fe      	b.n	80045d4 <LCD_LL_Init+0xd0>
  }
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200278c4 	.word	0x200278c4
 80045e0:	20000b34 	.word	0x20000b34
 80045e4:	40016800 	.word	0x40016800
 80045e8:	2002796c 	.word	0x2002796c
 80045ec:	4002b000 	.word	0x4002b000

080045f0 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff fb92 	bl	8003d28 <LCD_LL_GetPixelformat>
 8004604:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 8004608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460c:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;
 8004614:	4a11      	ldr	r2, [pc, #68]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 800461a:	4a10      	ldr	r2, [pc, #64]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst;
 8004620:	4a0e      	ldr	r2, [pc, #56]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 8004626:	4a0d      	ldr	r2, [pc, #52]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800462c:	4a0b      	ldr	r2, [pc, #44]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	041b      	lsls	r3, r3, #16
 8004632:	6a39      	ldr	r1, [r7, #32]
 8004634:	b289      	uxth	r1, r1
 8004636:	430b      	orrs	r3, r1
 8004638:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800463a:	4a08      	ldr	r2, [pc, #32]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8004646:	bf00      	nop
 8004648:	4b04      	ldr	r3, [pc, #16]	; (800465c <DMA2D_CopyBuffer+0x6c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f9      	bne.n	8004648 <DMA2D_CopyBuffer+0x58>
  {
  }
}
 8004654:	bf00      	nop
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	4002b000 	.word	0x4002b000

08004660 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.
  * @retval None
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]

  U32 PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fb5a 	bl	8003d28 <LCD_LL_GetPixelformat>
 8004674:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 8004676:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 8004678:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <DMA2D_FillBuffer+0x68>)
 800467a:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 800467c:	4a11      	ldr	r2, [pc, #68]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;
 8004682:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 800468e:	4a0d      	ldr	r2, [pc, #52]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	6839      	ldr	r1, [r7, #0]
 800469c:	b289      	uxth	r1, r1
 800469e:	430b      	orrs	r3, r1
 80046a0:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 80046ae:	bf00      	nop
 80046b0:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <DMA2D_FillBuffer+0x64>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f9      	bne.n	80046b0 <DMA2D_FillBuffer+0x50>
  {
  }
}
 80046bc:	bf00      	nop
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	4002b000 	.word	0x4002b000
 80046c8:	00030200 	.word	0x00030200

080046cc <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index
  * @retval None
  */
static U32 GetBufferSize(U32 LayerIndex)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  U32 BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80046d4:	4913      	ldr	r1, [pc, #76]	; (8004724 <GetBufferSize+0x58>)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	330c      	adds	r3, #12
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	480f      	ldr	r0, [pc, #60]	; (8004724 <GetBufferSize+0x58>)
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4403      	add	r3, r0
 80046f4:	3310      	adds	r3, #16
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	fb03 f101 	mul.w	r1, r3, r1
 80046fc:	4809      	ldr	r0, [pc, #36]	; (8004724 <GetBufferSize+0x58>)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4403      	add	r3, r0
 800470a:	3314      	adds	r3, #20
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	fb03 f301 	mul.w	r3, r3, r1
 8004712:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000b18 	.word	0x20000b18

08004728 <CUSTOM_CopyBuffer>:
  * @param  LayerIndex : Layer Index
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination
  * @retval None
  */
static void CUSTOM_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) {
 8004728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472a:	b08d      	sub	sp, #52	; 0x34
 800472c:	af04      	add	r7, sp, #16
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff ffc8 	bl	80046cc <GetBufferSize>
 800473c:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800473e:	4926      	ldr	r1, [pc, #152]	; (80047d8 <CUSTOM_CopyBuffer+0xb0>)
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4613      	mov	r3, r2
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4619      	mov	r1, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	69fa      	ldr	r2, [r7, #28]
 8004754:	fb02 f303 	mul.w	r3, r2, r3
 8004758:	440b      	add	r3, r1
 800475a:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 800475c:	491e      	ldr	r1, [pc, #120]	; (80047d8 <CUSTOM_CopyBuffer+0xb0>)
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	440b      	add	r3, r1
 8004778:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	69bc      	ldr	r4, [r7, #24]
 800477e:	697d      	ldr	r5, [r7, #20]
 8004780:	4915      	ldr	r1, [pc, #84]	; (80047d8 <CUSTOM_CopyBuffer+0xb0>)
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	330c      	adds	r3, #12
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461e      	mov	r6, r3
 8004794:	4910      	ldr	r1, [pc, #64]	; (80047d8 <CUSTOM_CopyBuffer+0xb0>)
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3310      	adds	r3, #16
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	9302      	str	r3, [sp, #8]
 80047ac:	2300      	movs	r3, #0
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	9200      	str	r2, [sp, #0]
 80047b2:	4633      	mov	r3, r6
 80047b4:	462a      	mov	r2, r5
 80047b6:	4621      	mov	r1, r4
 80047b8:	f7ff ff1a 	bl	80045f0 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 80047bc:	4906      	ldr	r1, [pc, #24]	; (80047d8 <CUSTOM_CopyBuffer+0xb0>)
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	3308      	adds	r3, #8
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
}
 80047d0:	bf00      	nop
 80047d2:	3724      	adds	r7, #36	; 0x24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d8:	20000b18 	.word	0x20000b18

080047dc <CUSTOM_CopyRect>:
  * @param  xSize:       X size.
  * @param  ySize:       Y size.
  * @retval None
  */
static void CUSTOM_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize)
{
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b08d      	sub	sp, #52	; 0x34
 80047e0:	af04      	add	r7, sp, #16
 80047e2:	6178      	str	r0, [r7, #20]
 80047e4:	6139      	str	r1, [r7, #16]
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	60bb      	str	r3, [r7, #8]
  U32 AddrSrc, AddrDst;

  AddrSrc = layer_prop[LayerIndex].address + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80047ea:	4938      	ldr	r1, [pc, #224]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	4834      	ldr	r0, [pc, #208]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	330c      	adds	r3, #12
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	fb02 f203 	mul.w	r2, r2, r3
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	18d0      	adds	r0, r2, r3
 8004816:	4c2d      	ldr	r4, [pc, #180]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4423      	add	r3, r4
 8004824:	3314      	adds	r3, #20
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	fb03 f300 	mul.w	r3, r3, r0
 800482c:	440b      	add	r3, r1
 800482e:	61fb      	str	r3, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8004830:	4926      	ldr	r1, [pc, #152]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	4822      	ldr	r0, [pc, #136]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	1a9b      	subs	r3, r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4403      	add	r3, r0
 800484e:	330c      	adds	r3, #12
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004854:	fb02 f203 	mul.w	r2, r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	18d0      	adds	r0, r2, r3
 800485c:	4c1b      	ldr	r4, [pc, #108]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4423      	add	r3, r4
 800486a:	3314      	adds	r3, #20
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	fb03 f300 	mul.w	r3, r3, r0
 8004872:	440b      	add	r3, r1
 8004874:	61bb      	str	r3, [r7, #24]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, layer_prop[LayerIndex].xSize - xSize);
 8004876:	697c      	ldr	r4, [r7, #20]
 8004878:	69fd      	ldr	r5, [r7, #28]
 800487a:	69be      	ldr	r6, [r7, #24]
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004882:	4812      	ldr	r0, [pc, #72]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4403      	add	r3, r0
 8004890:	330c      	adds	r3, #12
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	480c      	ldr	r0, [pc, #48]	; (80048cc <CUSTOM_CopyRect+0xf0>)
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4403      	add	r3, r0
 80048a8:	330c      	adds	r3, #12
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	9302      	str	r3, [sp, #8]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	9201      	str	r2, [sp, #4]
 80048b6:	9100      	str	r1, [sp, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4632      	mov	r2, r6
 80048bc:	4629      	mov	r1, r5
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fe96 	bl	80045f0 <DMA2D_CopyBuffer>
}
 80048c4:	bf00      	nop
 80048c6:	3724      	adds	r7, #36	; 0x24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048cc:	20000b18 	.word	0x20000b18

080048d0 <CUSTOM_FillRect>:
  * @param  y1:          Y1 position
  * @param  PixelIndex:  Pixel index.
  * @retval None
  */
static void CUSTOM_FillRect(int LayerIndex, int x0, int y0, int x1, int y1, U32 PixelIndex)
{
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	b08b      	sub	sp, #44	; 0x2c
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 80048de:	f003 ff67 	bl	80087b0 <GUI_GetDrawMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d110      	bne.n	800490a <CUSTOM_FillRect+0x3a>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80048e8:	2200      	movs	r2, #0
 80048ea:	2119      	movs	r1, #25
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f007 f9ae 	bl	800bc4e <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	68b8      	ldr	r0, [r7, #8]
 80048fa:	f005 ff75 	bl	800a7e8 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 80048fe:	4a32      	ldr	r2, [pc, #200]	; (80049c8 <CUSTOM_FillRect+0xf8>)
 8004900:	2119      	movs	r1, #25
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f007 f9a3 	bl	800bc4e <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 8004908:	e059      	b.n	80049be <CUSTOM_FillRect+0xee>
    xSize = x1 - x0 + 1;
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8004914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	3301      	adds	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fed3 	bl	80046cc <GetBufferSize>
 8004926:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8004928:	4928      	ldr	r1, [pc, #160]	; (80049cc <CUSTOM_FillRect+0xfc>)
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461c      	mov	r4, r3
 800493a:	4924      	ldr	r1, [pc, #144]	; (80049cc <CUSTOM_FillRect+0xfc>)
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	330c      	adds	r3, #12
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	fb02 f203 	mul.w	r2, r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	18d1      	adds	r1, r2, r3
 8004956:	481d      	ldr	r0, [pc, #116]	; (80049cc <CUSTOM_FillRect+0xfc>)
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4403      	add	r3, r0
 8004964:	3314      	adds	r3, #20
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	fb03 f301 	mul.w	r3, r3, r1
 800496c:	4618      	mov	r0, r3
 800496e:	4917      	ldr	r1, [pc, #92]	; (80049cc <CUSTOM_FillRect+0xfc>)
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3308      	adds	r3, #8
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fb03 f302 	mul.w	r3, r3, r2
 8004988:	4403      	add	r3, r0
 800498a:	4423      	add	r3, r4
 800498c:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	693c      	ldr	r4, [r7, #16]
 8004992:	69fd      	ldr	r5, [r7, #28]
 8004994:	69be      	ldr	r6, [r7, #24]
 8004996:	490d      	ldr	r1, [pc, #52]	; (80049cc <CUSTOM_FillRect+0xfc>)
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	330c      	adds	r3, #12
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b0:	9301      	str	r3, [sp, #4]
 80049b2:	9200      	str	r2, [sp, #0]
 80049b4:	4633      	mov	r3, r6
 80049b6:	462a      	mov	r2, r5
 80049b8:	4621      	mov	r1, r4
 80049ba:	f7ff fe51 	bl	8004660 <DMA2D_FillBuffer>
}
 80049be:	bf00      	nop
 80049c0:	3724      	adds	r7, #36	; 0x24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c6:	bf00      	nop
 80049c8:	080048d1 	.word	0x080048d1
 80049cc:	20000b18 	.word	0x20000b18

080049d0 <CUSTOM_DrawBitmap32bpp>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void CUSTOM_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 80049d0:	b5b0      	push	{r4, r5, r7, lr}
 80049d2:	b08c      	sub	sp, #48	; 0x30
 80049d4:	af04      	add	r7, sp, #16
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fe73 	bl	80046cc <GetBufferSize>
 80049e6:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80049e8:	492c      	ldr	r1, [pc, #176]	; (8004a9c <CUSTOM_DrawBitmap32bpp+0xcc>)
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461c      	mov	r4, r3
 80049fa:	4928      	ldr	r1, [pc, #160]	; (8004a9c <CUSTOM_DrawBitmap32bpp+0xcc>)
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	330c      	adds	r3, #12
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	fb02 f203 	mul.w	r2, r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	18d1      	adds	r1, r2, r3
 8004a16:	4821      	ldr	r0, [pc, #132]	; (8004a9c <CUSTOM_DrawBitmap32bpp+0xcc>)
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4403      	add	r3, r0
 8004a24:	3314      	adds	r3, #20
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	fb03 f301 	mul.w	r3, r3, r1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	491b      	ldr	r1, [pc, #108]	; (8004a9c <CUSTOM_DrawBitmap32bpp+0xcc>)
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fb03 f302 	mul.w	r3, r3, r2
 8004a48:	4403      	add	r3, r0
 8004a4a:	4423      	add	r3, r4
 8004a4c:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 4) - xSize;
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da00      	bge.n	8004a56 <CUSTOM_DrawBitmap32bpp+0x86>
 8004a54:	3303      	adds	r3, #3
 8004a56:	109b      	asrs	r3, r3, #2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8004a60:	490e      	ldr	r1, [pc, #56]	; (8004a9c <CUSTOM_DrawBitmap32bpp+0xcc>)
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	330c      	adds	r3, #12
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	69bc      	ldr	r4, [r7, #24]
 8004a7c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	6939      	ldr	r1, [r7, #16]
 8004a84:	9102      	str	r1, [sp, #8]
 8004a86:	9201      	str	r2, [sp, #4]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	462b      	mov	r3, r5
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	f7ff fdae 	bl	80045f0 <DMA2D_CopyBuffer>
}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a9c:	20000b18 	.word	0x20000b18

08004aa0 <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  return ((int) osKernelSysTick());
 8004aa4:	f000 f886 	bl	8004bb4 <osKernelSysTick>
 8004aa8:	4603      	mov	r3, r0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	bd80      	pop	{r7, pc}

08004aae <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  osDelay( ms );
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f8b9 	bl	8004c30 <osDelay>
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <GUI_X_Init>:
* GUI_X_Init() is called from GUI_Init is a possibility to init
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0
}
 8004aca:	bf00      	nop
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]

  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f8b9 	bl	8004c58 <osMutexCreate>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <GUI_X_InitOS+0x34>)
 8004aea:	601a      	str	r2, [r3, #0]

  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 8004aec:	2300      	movs	r3, #0
 8004aee:	603b      	str	r3, [r7, #0]

  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);
 8004af0:	463b      	mov	r3, r7
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 f941 	bl	8004d7c <osSemaphoreCreate>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <GUI_X_InitOS+0x38>)
 8004afe:	601a      	str	r2, [r3, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000b64 	.word	0x20000b64
 8004b0c:	20000b68 	.word	0x20000b68

08004b10 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  osMutexRelease(osMutex);
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <GUI_X_Unlock+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f8f9 	bl	8004d10 <osMutexRelease>
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000b64 	.word	0x20000b64

08004b28 <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  osMutexWait(osMutex , osWaitForever) ;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <GUI_X_Lock+0x18>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f89b 	bl	8004c70 <osMutexWait>
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000b64 	.word	0x20000b64

08004b44 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  return ((U32) osThreadGetId());
 8004b48:	f000 f86b 	bl	8004c22 <osThreadGetId>
 8004b4c:	4603      	mov	r3, r0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b085      	sub	sp, #20
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b64:	2b84      	cmp	r3, #132	; 0x84
 8004b66:	d005      	beq.n	8004b74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	3303      	adds	r3, #3
 8004b72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b88:	f3ef 8305 	mrs	r3, IPSR
 8004b8c:	607b      	str	r3, [r7, #4]
  return(result);
 8004b8e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf14      	ite	ne
 8004b94:	2301      	movne	r3, #1
 8004b96:	2300      	moveq	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004baa:	f001 fc21 	bl	80063f0 <vTaskStartScheduler>
  
  return osOK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004bb8:	f7ff ffe3 	bl	8004b82 <inHandlerMode>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004bc2:	f001 fd15 	bl	80065f0 <xTaskGetTickCountFromISR>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	e002      	b.n	8004bd0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004bca:	f001 fd01 	bl	80065d0 <xTaskGetTickCount>
 8004bce:	4603      	mov	r3, r0
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685c      	ldr	r4, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bea:	b29e      	uxth	r6, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ffad 	bl	8004b52 <makeFreeRtosPriority>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	9200      	str	r2, [sp, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	4632      	mov	r2, r6
 8004c06:	4629      	mov	r1, r5
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f001 fa94 	bl	8006136 <xTaskCreate>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	e000      	b.n	8004c1a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004c18:	68fb      	ldr	r3, [r7, #12]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c22 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8004c26:	f001 ffe9 	bl	8006bfc <xTaskGetCurrentTaskHandle>
 8004c2a:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <osDelay+0x16>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	e000      	b.n	8004c48 <osDelay+0x18>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f001 fb9d 	bl	8006388 <vTaskDelay>
  
  return osOK;
 8004c4e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8004c60:	2001      	movs	r0, #1
 8004c62:	f000 fe2d 	bl	80058c0 <xQueueCreateMutex>
 8004c66:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <osMutexWait+0x18>
    return osErrorParameter;
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	e03c      	b.n	8004d02 <osMutexWait+0x92>
  }
  
  ticks = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c92:	d103      	bne.n	8004c9c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e009      	b.n	8004cb0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <osMutexWait+0x40>
      ticks = 1;
 8004cac:	2301      	movs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004cb0:	f7ff ff67 	bl	8004b82 <inHandlerMode>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d017      	beq.n	8004cea <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004cba:	f107 0308 	add.w	r3, r7, #8
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f8aa 	bl	8005e1c <xQueueReceiveFromISR>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <osMutexWait+0x62>
      return osErrorOS;
 8004cce:	23ff      	movs	r3, #255	; 0xff
 8004cd0:	e017      	b.n	8004d02 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d013      	beq.n	8004d00 <osMutexWait+0x90>
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <osMutexWait+0x9c>)
 8004cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	e00a      	b.n	8004d00 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004cea:	2300      	movs	r3, #0
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	2100      	movs	r1, #0
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 ff81 	bl	8005bf8 <xQueueGenericReceive>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <osMutexWait+0x90>
    return osErrorOS;
 8004cfc:	23ff      	movs	r3, #255	; 0xff
 8004cfe:	e000      	b.n	8004d02 <osMutexWait+0x92>
  }
  
  return osOK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004d20:	f7ff ff2f 	bl	8004b82 <inHandlerMode>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fed7 	bl	8005ae4 <xQueueGiveFromISR>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d001      	beq.n	8004d40 <osMutexRelease+0x30>
      return osErrorOS;
 8004d3c:	23ff      	movs	r3, #255	; 0xff
 8004d3e:	e017      	b.n	8004d70 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d013      	beq.n	8004d6e <osMutexRelease+0x5e>
 8004d46:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <osMutexRelease+0x68>)
 8004d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	e00a      	b.n	8004d6e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fdc6 	bl	80058f0 <xQueueGenericSend>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004d6a:	23ff      	movs	r3, #255	; 0xff
 8004d6c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d110      	bne.n	8004dae <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2001      	movs	r0, #1
 8004d92:	f000 fd23 	bl	80057dc <xQueueGenericCreate>
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <osSemaphoreCreate+0x2e>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2200      	movs	r2, #0
 8004da2:	2100      	movs	r1, #0
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fda3 	bl	80058f0 <xQueueGenericSend>
    return sema;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	e000      	b.n	8004db0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8004dae:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004dbc:	f001 ff2e 	bl	8006c1c <xTaskGetSchedulerState>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d001      	beq.n	8004dca <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8004dc6:	f000 fa47 	bl	8005258 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004dca:	bf00      	nop
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f103 0208 	add.w	r2, r3, #8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004de6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f103 0208 	add.w	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f103 0208 	add.w	r2, r3, #8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e86:	d103      	bne.n	8004e90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e00c      	b.n	8004eaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3308      	adds	r3, #8
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e002      	b.n	8004e9e <vListInsert+0x2e>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d9f6      	bls.n	8004e98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6852      	ldr	r2, [r2, #4]
 8004f02:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d103      	bne.n	8004f16 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3b04      	subs	r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b04      	subs	r3, #4
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f023 0201 	bic.w	r2, r3, #1
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f68:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <pxPortInitialiseStack+0x64>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b14      	subs	r3, #20
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b04      	subs	r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f06f 0202 	mvn.w	r2, #2
 8004f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3b20      	subs	r3, #32
 8004f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	08004fa1 	.word	0x08004fa1

08004fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fa6:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <prvTaskExitError+0x38>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fae:	d009      	beq.n	8004fc4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	607b      	str	r3, [r7, #4]
 8004fc2:	e7fe      	b.n	8004fc2 <prvTaskExitError+0x22>
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004fd6:	e7fe      	b.n	8004fd6 <prvTaskExitError+0x36>
 8004fd8:	200008d0 	.word	0x200008d0
 8004fdc:	00000000 	.word	0x00000000

08004fe0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fe0:	4b07      	ldr	r3, [pc, #28]	; (8005000 <pxCurrentTCBConst2>)
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	f380 8809 	msr	PSP, r0
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8811 	msr	BASEPRI, r0
 8004ffa:	4770      	bx	lr
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst2>:
 8005000:	2000478c 	.word	0x2000478c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005008:	4806      	ldr	r0, [pc, #24]	; (8005024 <prvPortStartFirstTask+0x1c>)
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f380 8808 	msr	MSP, r0
 8005012:	b662      	cpsie	i
 8005014:	b661      	cpsie	f
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	df00      	svc	0
 8005020:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005022:	bf00      	nop
 8005024:	e000ed08 	.word	0xe000ed08

08005028 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800502e:	4b3b      	ldr	r3, [pc, #236]	; (800511c <xPortStartScheduler+0xf4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <xPortStartScheduler+0xf8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d109      	bne.n	800504c <xPortStartScheduler+0x24>
 8005038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	e7fe      	b.n	800504a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800504c:	4b33      	ldr	r3, [pc, #204]	; (800511c <xPortStartScheduler+0xf4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a34      	ldr	r2, [pc, #208]	; (8005124 <xPortStartScheduler+0xfc>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d109      	bne.n	800506a <xPortStartScheduler+0x42>
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e7fe      	b.n	8005068 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800506a:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <xPortStartScheduler+0x100>)
 800506c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b27      	ldr	r3, [pc, #156]	; (800512c <xPortStartScheduler+0x104>)
 8005090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005092:	4b27      	ldr	r3, [pc, #156]	; (8005130 <xPortStartScheduler+0x108>)
 8005094:	2207      	movs	r2, #7
 8005096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005098:	e009      	b.n	80050ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800509a:	4b25      	ldr	r3, [pc, #148]	; (8005130 <xPortStartScheduler+0x108>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3b01      	subs	r3, #1
 80050a0:	4a23      	ldr	r2, [pc, #140]	; (8005130 <xPortStartScheduler+0x108>)
 80050a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d0ef      	beq.n	800509a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <xPortStartScheduler+0x108>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <xPortStartScheduler+0x108>)
 80050c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050c4:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <xPortStartScheduler+0x108>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <xPortStartScheduler+0x108>)
 80050ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050d8:	4a16      	ldr	r2, [pc, #88]	; (8005134 <xPortStartScheduler+0x10c>)
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <xPortStartScheduler+0x10c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <xPortStartScheduler+0x10c>)
 80050e6:	4b13      	ldr	r3, [pc, #76]	; (8005134 <xPortStartScheduler+0x10c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f0:	f000 f8d2 	bl	8005298 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <xPortStartScheduler+0x110>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050fa:	f000 f8e9 	bl	80052d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050fe:	4a0f      	ldr	r2, [pc, #60]	; (800513c <xPortStartScheduler+0x114>)
 8005100:	4b0e      	ldr	r3, [pc, #56]	; (800513c <xPortStartScheduler+0x114>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005108:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800510a:	f7ff ff7d 	bl	8005008 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800510e:	f7ff ff47 	bl	8004fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	e000ed00 	.word	0xe000ed00
 8005120:	410fc271 	.word	0x410fc271
 8005124:	410fc270 	.word	0x410fc270
 8005128:	e000e400 	.word	0xe000e400
 800512c:	20000b6c 	.word	0x20000b6c
 8005130:	20000b70 	.word	0x20000b70
 8005134:	e000ed20 	.word	0xe000ed20
 8005138:	200008d0 	.word	0x200008d0
 800513c:	e000ef34 	.word	0xe000ef34

08005140 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005158:	4b0e      	ldr	r3, [pc, #56]	; (8005194 <vPortEnterCritical+0x54>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <vPortEnterCritical+0x54>)
 8005160:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <vPortEnterCritical+0x54>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10e      	bne.n	8005188 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <vPortEnterCritical+0x58>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <vPortEnterCritical+0x48>
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	603b      	str	r3, [r7, #0]
 8005186:	e7fe      	b.n	8005186 <vPortEnterCritical+0x46>
	}
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	200008d0 	.word	0x200008d0
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <vPortExitCritical+0x4c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <vPortExitCritical+0x22>
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
 80051bc:	e7fe      	b.n	80051bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <vPortExitCritical+0x4c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <vPortExitCritical+0x4c>)
 80051c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <vPortExitCritical+0x4c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <vPortExitCritical+0x3e>
 80051d0:	2300      	movs	r3, #0
 80051d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	200008d0 	.word	0x200008d0
 80051ec:	00000000 	.word	0x00000000

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b15      	ldr	r3, [pc, #84]	; (8005250 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f01e 0f10 	tst.w	lr, #16
 8005200:	bf08      	it	eq
 8005202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005214:	f380 8811 	msr	BASEPRI, r0
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f001 fab4 	bl	800678c <vTaskSwitchContext>
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f380 8811 	msr	BASEPRI, r0
 800522c:	bc08      	pop	{r3}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	f01e 0f10 	tst.w	lr, #16
 800523a:	bf08      	it	eq
 800523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005240:	f380 8809 	msr	PSP, r0
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst>:
 8005250:	2000478c 	.word	0x2000478c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005270:	f001 f9d0 	bl	8006614 <xTaskIncrementTick>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <xPortSysTickHandler+0x3c>)
 800527c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	2300      	movs	r3, #0
 8005284:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529c:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <vPortSetupTimerInterrupt+0x28>)
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <vPortSetupTimerInterrupt+0x2c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4909      	ldr	r1, [pc, #36]	; (80052c8 <vPortSetupTimerInterrupt+0x30>)
 80052a4:	fba1 1303 	umull	r1, r3, r1, r3
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <vPortSetupTimerInterrupt+0x34>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e014 	.word	0xe000e014
 80052c4:	200008d4 	.word	0x200008d4
 80052c8:	10624dd3 	.word	0x10624dd3
 80052cc:	e000e010 	.word	0xe000e010

080052d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052e0 <vPortEnableVFP+0x10>
 80052d4:	6801      	ldr	r1, [r0, #0]
 80052d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052da:	6001      	str	r1, [r0, #0]
 80052dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052de:	bf00      	nop
 80052e0:	e000ed88 	.word	0xe000ed88

080052e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80052ea:	f3ef 8305 	mrs	r3, IPSR
 80052ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	d913      	bls.n	800531e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052f6:	4a16      	ldr	r2, [pc, #88]	; (8005350 <vPortValidateInterruptPriority+0x6c>)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <vPortValidateInterruptPriority+0x70>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	7afa      	ldrb	r2, [r7, #11]
 8005306:	429a      	cmp	r2, r3
 8005308:	d209      	bcs.n	800531e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	e7fe      	b.n	800531c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800531e:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <vPortValidateInterruptPriority+0x74>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <vPortValidateInterruptPriority+0x78>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d909      	bls.n	8005342 <vPortValidateInterruptPriority+0x5e>
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	e7fe      	b.n	8005340 <vPortValidateInterruptPriority+0x5c>
	}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000e3f0 	.word	0xe000e3f0
 8005354:	20000b6c 	.word	0x20000b6c
 8005358:	e000ed0c 	.word	0xe000ed0c
 800535c:	20000b70 	.word	0x20000b70

08005360 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	; 0x28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800536c:	f001 f886 	bl	800647c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005370:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <pvPortMalloc+0x170>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005378:	f000 f90c 	bl	8005594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800537c:	4b55      	ldr	r3, [pc, #340]	; (80054d4 <pvPortMalloc+0x174>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	f040 808c 	bne.w	80054a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01c      	beq.n	80053ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005390:	2208      	movs	r2, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f023 0307 	bic.w	r3, r3, #7
 80053a8:	3308      	adds	r3, #8
 80053aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <pvPortMalloc+0x6a>
 80053b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e7fe      	b.n	80053c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d068      	beq.n	80054a2 <pvPortMalloc+0x142>
 80053d0:	4b41      	ldr	r3, [pc, #260]	; (80054d8 <pvPortMalloc+0x178>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d863      	bhi.n	80054a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053da:	4b40      	ldr	r3, [pc, #256]	; (80054dc <pvPortMalloc+0x17c>)
 80053dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053de:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <pvPortMalloc+0x17c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e4:	e004      	b.n	80053f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d203      	bcs.n	8005402 <pvPortMalloc+0xa2>
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f1      	bne.n	80053e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005402:	4b33      	ldr	r3, [pc, #204]	; (80054d0 <pvPortMalloc+0x170>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005408:	429a      	cmp	r2, r3
 800540a:	d04a      	beq.n	80054a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2208      	movs	r2, #8
 8005412:	4413      	add	r3, r2
 8005414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad2      	subs	r2, r2, r3
 8005426:	2308      	movs	r3, #8
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	d91e      	bls.n	800546c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <pvPortMalloc+0xf4>
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	e7fe      	b.n	8005452 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f000 f8f6 	bl	8005658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <pvPortMalloc+0x178>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <pvPortMalloc+0x178>)
 8005478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800547a:	4b17      	ldr	r3, [pc, #92]	; (80054d8 <pvPortMalloc+0x178>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <pvPortMalloc+0x180>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d203      	bcs.n	800548e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <pvPortMalloc+0x178>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <pvPortMalloc+0x180>)
 800548c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <pvPortMalloc+0x174>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	431a      	orrs	r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054a2:	f000 fff9 	bl	8006498 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d009      	beq.n	80054c4 <pvPortMalloc+0x164>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e7fe      	b.n	80054c2 <pvPortMalloc+0x162>
	return pvReturn;
 80054c4:	69fb      	ldr	r3, [r7, #28]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3728      	adds	r7, #40	; 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2000477c 	.word	0x2000477c
 80054d4:	20004788 	.word	0x20004788
 80054d8:	20004780 	.word	0x20004780
 80054dc:	20004774 	.word	0x20004774
 80054e0:	20004784 	.word	0x20004784

080054e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d046      	beq.n	8005584 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054f6:	2308      	movs	r3, #8
 80054f8:	425b      	negs	r3, r3
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	4b20      	ldr	r3, [pc, #128]	; (800558c <vPortFree+0xa8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4013      	ands	r3, r2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <vPortFree+0x42>
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e7fe      	b.n	8005524 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <vPortFree+0x5e>
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	e7fe      	b.n	8005540 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <vPortFree+0xa8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d019      	beq.n	8005584 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <vPortFree+0xa8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	43db      	mvns	r3, r3
 8005562:	401a      	ands	r2, r3
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005568:	f000 ff88 	bl	800647c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <vPortFree+0xac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4413      	add	r3, r2
 8005576:	4a06      	ldr	r2, [pc, #24]	; (8005590 <vPortFree+0xac>)
 8005578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800557a:	6938      	ldr	r0, [r7, #16]
 800557c:	f000 f86c 	bl	8005658 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005580:	f000 ff8a 	bl	8006498 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005584:	bf00      	nop
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20004788 	.word	0x20004788
 8005590:	20004780 	.word	0x20004780

08005594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800559a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800559e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055a0:	4b27      	ldr	r3, [pc, #156]	; (8005640 <prvHeapInit+0xac>)
 80055a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3307      	adds	r3, #7
 80055b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0307 	bic.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <prvHeapInit+0xac>)
 80055c4:	4413      	add	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <prvHeapInit+0xb0>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055d2:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <prvHeapInit+0xb0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055e0:	2208      	movs	r2, #8
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <prvHeapInit+0xb4>)
 80055f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <prvHeapInit+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055fe:	4b12      	ldr	r3, [pc, #72]	; (8005648 <prvHeapInit+0xb4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	1ad2      	subs	r2, r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <prvHeapInit+0xb4>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <prvHeapInit+0xb8>)
 8005622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a09      	ldr	r2, [pc, #36]	; (8005650 <prvHeapInit+0xbc>)
 800562a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <prvHeapInit+0xc0>)
 800562e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000b74 	.word	0x20000b74
 8005644:	20004774 	.word	0x20004774
 8005648:	2000477c 	.word	0x2000477c
 800564c:	20004784 	.word	0x20004784
 8005650:	20004780 	.word	0x20004780
 8005654:	20004788 	.word	0x20004788

08005658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005660:	4b28      	ldr	r3, [pc, #160]	; (8005704 <prvInsertBlockIntoFreeList+0xac>)
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e002      	b.n	800566c <prvInsertBlockIntoFreeList+0x14>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d3f7      	bcc.n	8005666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	441a      	add	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	429a      	cmp	r2, r3
 8005686:	d108      	bne.n	800569a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	441a      	add	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	441a      	add	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d118      	bne.n	80056e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <prvInsertBlockIntoFreeList+0xb0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d00d      	beq.n	80056d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	441a      	add	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e008      	b.n	80056e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <prvInsertBlockIntoFreeList+0xb0>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e003      	b.n	80056e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d002      	beq.n	80056f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20004774 	.word	0x20004774
 8005708:	2000477c 	.word	0x2000477c

0800570c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xQueueGenericReset+0x28>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	e7fe      	b.n	8005732 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005734:	f7ff fd04 	bl	8005140 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005764:	3b01      	subs	r3, #1
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	441a      	add	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	22ff      	movs	r2, #255	; 0xff
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	22ff      	movs	r2, #255	; 0xff
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d114      	bne.n	80057b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d01a      	beq.n	80057c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3310      	adds	r3, #16
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f876 	bl	8006888 <xTaskRemoveFromEventList>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d012      	beq.n	80057c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057a2:	4b0d      	ldr	r3, [pc, #52]	; (80057d8 <xQueueGenericReset+0xcc>)
 80057a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	e009      	b.n	80057c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3310      	adds	r3, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff fb08 	bl	8004dce <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff fb03 	bl	8004dce <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057c8:	f7ff fce8 	bl	800519c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057cc:	2301      	movs	r3, #1
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <xQueueGenericCreate+0x28>
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e7fe      	b.n	8005802 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	e004      	b.n	800581a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3348      	adds	r3, #72	; 0x48
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fd9e 	bl	8005360 <pvPortMalloc>
 8005824:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	3348      	adds	r3, #72	; 0x48
 8005830:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005832:	79fa      	ldrb	r2, [r7, #7]
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f805 	bl	800584e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8005844:	69bb      	ldr	r3, [r7, #24]
	}
 8005846:	4618      	mov	r0, r3
 8005848:	3720      	adds	r7, #32
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e002      	b.n	8005870 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800587c:	2101      	movs	r1, #1
 800587e:	69b8      	ldr	r0, [r7, #24]
 8005880:	f7ff ff44 	bl	800570c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00e      	beq.n	80058b8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80058ac:	2300      	movs	r3, #0
 80058ae:	2200      	movs	r2, #0
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f81c 	bl	80058f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	2300      	movs	r3, #0
 80058d0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6939      	ldr	r1, [r7, #16]
 80058d8:	6978      	ldr	r0, [r7, #20]
 80058da:	f7ff ff7f 	bl	80057dc <xQueueGenericCreate>
 80058de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff ffd3 	bl	800588c <prvInitialiseMutex>

		return pxNewQueue;
 80058e6:	68fb      	ldr	r3, [r7, #12]
	}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <xQueueGenericSend+0x30>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	62bb      	str	r3, [r7, #40]	; 0x28
 800591e:	e7fe      	b.n	800591e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d103      	bne.n	800592e <xQueueGenericSend+0x3e>
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <xQueueGenericSend+0x42>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <xQueueGenericSend+0x44>
 8005932:	2300      	movs	r3, #0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <xQueueGenericSend+0x5c>
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	e7fe      	b.n	800594a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d103      	bne.n	800595a <xQueueGenericSend+0x6a>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <xQueueGenericSend+0x6e>
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <xQueueGenericSend+0x70>
 800595e:	2300      	movs	r3, #0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <xQueueGenericSend+0x88>
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	e7fe      	b.n	8005976 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005978:	f001 f950 	bl	8006c1c <xTaskGetSchedulerState>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <xQueueGenericSend+0x98>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <xQueueGenericSend+0x9c>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <xQueueGenericSend+0x9e>
 800598c:	2300      	movs	r3, #0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <xQueueGenericSend+0xb6>
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059a6:	f7ff fbcb 	bl	8005140 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <xQueueGenericSend+0xcc>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d129      	bne.n	8005a10 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 faa8 	bl	8005f16 <prvCopyDataToQueue>
 80059c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	3324      	adds	r3, #36	; 0x24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 ff57 	bl	8006888 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <xQueueGenericSend+0x1f0>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e00a      	b.n	8005a08 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <xQueueGenericSend+0x1f0>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a08:	f7ff fbc8 	bl	800519c <vPortExitCritical>
				return pdPASS;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e063      	b.n	8005ad8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a16:	f7ff fbc1 	bl	800519c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e05c      	b.n	8005ad8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 ff8f 	bl	800694c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a32:	f7ff fbb3 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a36:	f000 fd21 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a3a:	f7ff fb81 	bl	8005140 <vPortEnterCritical>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4a:	d103      	bne.n	8005a54 <xQueueGenericSend+0x164>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a60:	d103      	bne.n	8005a6a <xQueueGenericSend+0x17a>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6a:	f7ff fb97 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a6e:	1d3a      	adds	r2, r7, #4
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	4611      	mov	r1, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 ff8c 	bl	8006994 <xTaskCheckForTimeOut>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d124      	bne.n	8005acc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a84:	f000 fb3f 	bl	8006106 <prvIsQueueFull>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	3310      	adds	r3, #16
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fed2 	bl	8006840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9e:	f000 faca 	bl	8006036 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aa2:	f000 fcf9 	bl	8006498 <xTaskResumeAll>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af7c 	bne.w	80059a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <xQueueGenericSend+0x1f0>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	e772      	b.n	80059a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac2:	f000 fab8 	bl	8006036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac6:	f000 fce7 	bl	8006498 <xTaskResumeAll>
 8005aca:	e76c      	b.n	80059a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ace:	f000 fab2 	bl	8006036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad2:	f000 fce1 	bl	8006498 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ad6:	2300      	movs	r3, #0
		}
	}
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3738      	adds	r7, #56	; 0x38
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08e      	sub	sp, #56	; 0x38
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <xQueueGiveFromISR+0x28>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	623b      	str	r3, [r7, #32]
 8005b0a:	e7fe      	b.n	8005b0a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <xQueueGiveFromISR+0x44>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e7fe      	b.n	8005b26 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <xQueueGiveFromISR+0x54>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <xQueueGiveFromISR+0x58>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <xQueueGiveFromISR+0x5a>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <xQueueGiveFromISR+0x72>
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	e7fe      	b.n	8005b54 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b56:	f7ff fbc5 	bl	80052e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	617a      	str	r2, [r7, #20]
 8005b70:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005b72:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d92b      	bls.n	8005bde <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba0:	d112      	bne.n	8005bc8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	3324      	adds	r3, #36	; 0x24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fe6a 	bl	8006888 <xTaskRemoveFromEventList>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00e      	beq.n	8005bd8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e007      	b.n	8005bd8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bcc:	3301      	adds	r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	b25a      	sxtb	r2, r3
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
 8005bdc:	e001      	b.n	8005be2 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3738      	adds	r7, #56	; 0x38
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	; 0x38
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <xQueueGenericReceive+0x30>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	e7fe      	b.n	8005c26 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d103      	bne.n	8005c36 <xQueueGenericReceive+0x3e>
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <xQueueGenericReceive+0x42>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueGenericReceive+0x44>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <xQueueGenericReceive+0x5c>
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	e7fe      	b.n	8005c52 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c54:	f000 ffe2 	bl	8006c1c <xTaskGetSchedulerState>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <xQueueGenericReceive+0x6c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <xQueueGenericReceive+0x70>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <xQueueGenericReceive+0x72>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <xQueueGenericReceive+0x8a>
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	e7fe      	b.n	8005c80 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c82:	f7ff fa5d 	bl	8005140 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d046      	beq.n	8005d20 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c9c:	f000 f9a5 	bl	8005fea <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d121      	bne.n	8005cea <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005cb6:	f001 f8c9 	bl	8006e4c <pvTaskIncrementMutexHeldCount>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d027      	beq.n	8005d18 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	3310      	adds	r3, #16
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fddb 	bl	8006888 <xTaskRemoveFromEventList>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01f      	beq.n	8005d18 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8005cd8:	4b4f      	ldr	r3, [pc, #316]	; (8005e18 <xQueueGenericReceive+0x220>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	e016      	b.n	8005d18 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cee:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00f      	beq.n	8005d18 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fdc3 	bl	8006888 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d007      	beq.n	8005d18 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d08:	4b43      	ldr	r3, [pc, #268]	; (8005e18 <xQueueGenericReceive+0x220>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005d18:	f7ff fa40 	bl	800519c <vPortExitCritical>
				return pdPASS;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e077      	b.n	8005e10 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d103      	bne.n	8005d2e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d26:	f7ff fa39 	bl	800519c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e070      	b.n	8005e10 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8005d34:	f107 0314 	add.w	r3, r7, #20
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fe07 	bl	800694c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d42:	f7ff fa2b 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d46:	f000 fb99 	bl	800647c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d4a:	f7ff f9f9 	bl	8005140 <vPortEnterCritical>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d5a:	d103      	bne.n	8005d64 <xQueueGenericReceive+0x16c>
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6a:	b25b      	sxtb	r3, r3
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d70:	d103      	bne.n	8005d7a <xQueueGenericReceive+0x182>
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7a:	f7ff fa0f 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d7e:	1d3a      	adds	r2, r7, #4
 8005d80:	f107 0314 	add.w	r3, r7, #20
 8005d84:	4611      	mov	r1, r2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fe04 	bl	8006994 <xTaskCheckForTimeOut>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d131      	bne.n	8005df6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d94:	f000 f9a1 	bl	80060da <prvIsQueueEmpty>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d025      	beq.n	8005dea <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d108      	bne.n	8005db8 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8005da6:	f7ff f9cb 	bl	8005140 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 ff52 	bl	8006c58 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005db4:	f7ff f9f2 	bl	800519c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fd3d 	bl	8006840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc8:	f000 f935 	bl	8006036 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dcc:	f000 fb64 	bl	8006498 <xTaskResumeAll>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f47f af55 	bne.w	8005c82 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <xQueueGenericReceive+0x220>)
 8005dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	e74b      	b.n	8005c82 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dec:	f000 f923 	bl	8006036 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005df0:	f000 fb52 	bl	8006498 <xTaskResumeAll>
 8005df4:	e745      	b.n	8005c82 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df8:	f000 f91d 	bl	8006036 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dfc:	f000 fb4c 	bl	8006498 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e02:	f000 f96a 	bl	80060da <prvIsQueueEmpty>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f43f af3a 	beq.w	8005c82 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3738      	adds	r7, #56	; 0x38
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08e      	sub	sp, #56	; 0x38
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <xQueueReceiveFromISR+0x2a>
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	e7fe      	b.n	8005e44 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <xQueueReceiveFromISR+0x38>
 8005e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <xQueueReceiveFromISR+0x3c>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <xQueueReceiveFromISR+0x3e>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d109      	bne.n	8005e72 <xQueueReceiveFromISR+0x56>
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	e7fe      	b.n	8005e70 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e72:	f7ff fa37 	bl	80052e4 <vPortValidateInterruptPriority>
	__asm volatile
 8005e76:	f3ef 8211 	mrs	r2, BASEPRI
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	61ba      	str	r2, [r7, #24]
 8005e8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02f      	beq.n	8005efe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eac:	f000 f89d 	bl	8005fea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	1e5a      	subs	r2, r3, #1
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005eb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec0:	d112      	bne.n	8005ee8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	3310      	adds	r3, #16
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 fcda 	bl	8006888 <xTaskRemoveFromEventList>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e007      	b.n	8005ef8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eec:	3301      	adds	r3, #1
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	b25a      	sxtb	r2, r3
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
 8005efc:	e001      	b.n	8005f02 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3738      	adds	r7, #56	; 0x38
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10d      	bne.n	8005f50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d14d      	bne.n	8005fd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 feff 	bl	8006d44 <xTaskPriorityDisinherit>
 8005f46:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	e043      	b.n	8005fd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d119      	bne.n	8005f8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6898      	ldr	r0, [r3, #8]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	f012 f981 	bl	8018268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	441a      	add	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d32b      	bcc.n	8005fd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	e026      	b.n	8005fd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	68d8      	ldr	r0, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	461a      	mov	r2, r3
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	f012 f967 	bl	8018268 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	425b      	negs	r3, r3
 8005fa4:	441a      	add	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d207      	bcs.n	8005fc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	425b      	negs	r3, r3
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d105      	bne.n	8005fd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fe0:	697b      	ldr	r3, [r7, #20]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d018      	beq.n	800602e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	441a      	add	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d303      	bcc.n	800601e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	461a      	mov	r2, r3
 8006028:	6838      	ldr	r0, [r7, #0]
 800602a:	f012 f91d 	bl	8018268 <memcpy>
	}
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800603e:	f7ff f87f 	bl	8005140 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006048:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800604a:	e011      	b.n	8006070 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fc15 	bl	8006888 <xTaskRemoveFromEventList>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006064:	f000 fcf4 	bl	8006a50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	3b01      	subs	r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006074:	2b00      	cmp	r3, #0
 8006076:	dce9      	bgt.n	800604c <prvUnlockQueue+0x16>
 8006078:	e000      	b.n	800607c <prvUnlockQueue+0x46>
					break;
 800607a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	22ff      	movs	r2, #255	; 0xff
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006084:	f7ff f88a 	bl	800519c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006088:	f7ff f85a 	bl	8005140 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006092:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006094:	e011      	b.n	80060ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3310      	adds	r3, #16
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fbf0 	bl	8006888 <xTaskRemoveFromEventList>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060ae:	f000 fccf 	bl	8006a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060b2:	7bbb      	ldrb	r3, [r7, #14]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	dce9      	bgt.n	8006096 <prvUnlockQueue+0x60>
 80060c2:	e000      	b.n	80060c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060ce:	f7ff f865 	bl	800519c <vPortExitCritical>
}
 80060d2:	bf00      	nop
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e2:	f7ff f82d 	bl	8005140 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e001      	b.n	80060f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f8:	f7ff f850 	bl	800519c <vPortExitCritical>

	return xReturn;
 80060fc:	68fb      	ldr	r3, [r7, #12]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800610e:	f7ff f817 	bl	8005140 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	429a      	cmp	r2, r3
 800611c:	d102      	bne.n	8006124 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e001      	b.n	8006128 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006128:	f7ff f838 	bl	800519c <vPortExitCritical>

	return xReturn;
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08c      	sub	sp, #48	; 0x30
 800613a:	af04      	add	r7, sp, #16
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff f908 	bl	8005360 <pvPortMalloc>
 8006150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006158:	2054      	movs	r0, #84	; 0x54
 800615a:	f7ff f901 	bl	8005360 <pvPortMalloc>
 800615e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
 800616c:	e005      	b.n	800617a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff f9b8 	bl	80054e4 <vPortFree>
 8006174:	e001      	b.n	800617a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	2300      	movs	r3, #0
 8006184:	9303      	str	r3, [sp, #12]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f80e 	bl	80061b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800619c:	69f8      	ldr	r0, [r7, #28]
 800619e:	f000 f889 	bl	80062b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e002      	b.n	80061ae <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061ae:	69bb      	ldr	r3, [r7, #24]
	}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061d0:	3b01      	subs	r3, #1
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <prvInitialiseNewTask+0x46>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e7fe      	b.n	80061fc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	e012      	b.n	800622a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	4413      	add	r3, r2
 800620a:	7819      	ldrb	r1, [r3, #0]
 800620c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	3334      	adds	r3, #52	; 0x34
 8006214:	460a      	mov	r2, r1
 8006216:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d006      	beq.n	8006232 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d9e9      	bls.n	8006204 <prvInitialiseNewTask+0x4c>
 8006230:	e000      	b.n	8006234 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006232:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	2b06      	cmp	r3, #6
 8006240:	d901      	bls.n	8006246 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006242:	2306      	movs	r3, #6
 8006244:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800624a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	2200      	movs	r2, #0
 8006256:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7fe fdd6 	bl	8004e0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	3318      	adds	r3, #24
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fdd1 	bl	8004e0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006270:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	f1c3 0207 	rsb	r2, r3, #7
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	2200      	movs	r2, #0
 8006286:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	69b8      	ldr	r0, [r7, #24]
 8006296:	f7fe fe4f 	bl	8004f38 <pxPortInitialiseStack>
 800629a:	4602      	mov	r2, r0
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ac:	bf00      	nop
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062bc:	f7fe ff40 	bl	8005140 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062c0:	4b2a      	ldr	r3, [pc, #168]	; (800636c <prvAddNewTaskToReadyList+0xb8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3301      	adds	r3, #1
 80062c6:	4a29      	ldr	r2, [pc, #164]	; (800636c <prvAddNewTaskToReadyList+0xb8>)
 80062c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ca:	4b29      	ldr	r3, [pc, #164]	; (8006370 <prvAddNewTaskToReadyList+0xbc>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062d2:	4a27      	ldr	r2, [pc, #156]	; (8006370 <prvAddNewTaskToReadyList+0xbc>)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062d8:	4b24      	ldr	r3, [pc, #144]	; (800636c <prvAddNewTaskToReadyList+0xb8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d110      	bne.n	8006302 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062e0:	f000 fbda 	bl	8006a98 <prvInitialiseTaskLists>
 80062e4:	e00d      	b.n	8006302 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80062e6:	4b23      	ldr	r3, [pc, #140]	; (8006374 <prvAddNewTaskToReadyList+0xc0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80062ee:	4b20      	ldr	r3, [pc, #128]	; (8006370 <prvAddNewTaskToReadyList+0xbc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d802      	bhi.n	8006302 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80062fc:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <prvAddNewTaskToReadyList+0xbc>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006302:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <prvAddNewTaskToReadyList+0xc4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3301      	adds	r3, #1
 8006308:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <prvAddNewTaskToReadyList+0xc4>)
 800630a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b19      	ldr	r3, [pc, #100]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4a18      	ldr	r2, [pc, #96]	; (800637c <prvAddNewTaskToReadyList+0xc8>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <prvAddNewTaskToReadyList+0xcc>)
 800632c:	441a      	add	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe fd77 	bl	8004e28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800633a:	f7fe ff2f 	bl	800519c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <prvAddNewTaskToReadyList+0xc0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00e      	beq.n	8006364 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <prvAddNewTaskToReadyList+0xbc>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006350:	429a      	cmp	r2, r3
 8006352:	d207      	bcs.n	8006364 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <prvAddNewTaskToReadyList+0xd0>)
 8006356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	2000488c 	.word	0x2000488c
 8006370:	2000478c 	.word	0x2000478c
 8006374:	20004898 	.word	0x20004898
 8006378:	200048a8 	.word	0x200048a8
 800637c:	20004894 	.word	0x20004894
 8006380:	20004790 	.word	0x20004790
 8006384:	e000ed04 	.word	0xe000ed04

08006388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d016      	beq.n	80063c8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800639a:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <vTaskDelay+0x60>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <vTaskDelay+0x2e>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	e7fe      	b.n	80063b4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80063b6:	f000 f861 	bl	800647c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063ba:	2100      	movs	r1, #0
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fd59 	bl	8006e74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063c2:	f000 f869 	bl	8006498 <xTaskResumeAll>
 80063c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d107      	bne.n	80063de <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <vTaskDelay+0x64>)
 80063d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	200048b4 	.word	0x200048b4
 80063ec:	e000ed04 	.word	0xe000ed04

080063f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80063f6:	4b1b      	ldr	r3, [pc, #108]	; (8006464 <vTaskStartScheduler+0x74>)
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	2300      	movs	r3, #0
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	2300      	movs	r3, #0
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4919      	ldr	r1, [pc, #100]	; (8006468 <vTaskStartScheduler+0x78>)
 8006404:	4819      	ldr	r0, [pc, #100]	; (800646c <vTaskStartScheduler+0x7c>)
 8006406:	f7ff fe96 	bl	8006136 <xTaskCreate>
 800640a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d115      	bne.n	800643e <vTaskStartScheduler+0x4e>
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006424:	4b12      	ldr	r3, [pc, #72]	; (8006470 <vTaskStartScheduler+0x80>)
 8006426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800642a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800642c:	4b11      	ldr	r3, [pc, #68]	; (8006474 <vTaskStartScheduler+0x84>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <vTaskStartScheduler+0x88>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006438:	f7fe fdf6 	bl	8005028 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800643c:	e00d      	b.n	800645a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006444:	d109      	bne.n	800645a <vTaskStartScheduler+0x6a>
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	e7fe      	b.n	8006458 <vTaskStartScheduler+0x68>
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200048b0 	.word	0x200048b0
 8006468:	080182dc 	.word	0x080182dc
 800646c:	08006a69 	.word	0x08006a69
 8006470:	200048ac 	.word	0x200048ac
 8006474:	20004898 	.word	0x20004898
 8006478:	20004890 	.word	0x20004890

0800647c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <vTaskSuspendAll+0x18>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	4a03      	ldr	r2, [pc, #12]	; (8006494 <vTaskSuspendAll+0x18>)
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	200048b4 	.word	0x200048b4

08006498 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064a6:	4b41      	ldr	r3, [pc, #260]	; (80065ac <xTaskResumeAll+0x114>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <xTaskResumeAll+0x2a>
 80064ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	e7fe      	b.n	80064c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80064c2:	f7fe fe3d 	bl	8005140 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <xTaskResumeAll+0x114>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	4a37      	ldr	r2, [pc, #220]	; (80065ac <xTaskResumeAll+0x114>)
 80064ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d0:	4b36      	ldr	r3, [pc, #216]	; (80065ac <xTaskResumeAll+0x114>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d161      	bne.n	800659c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80064d8:	4b35      	ldr	r3, [pc, #212]	; (80065b0 <xTaskResumeAll+0x118>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05d      	beq.n	800659c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064e0:	e02e      	b.n	8006540 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80064e2:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <xTaskResumeAll+0x11c>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3318      	adds	r3, #24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe fcf7 	bl	8004ee2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe fcf2 	bl	8004ee2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	2201      	movs	r2, #1
 8006504:	409a      	lsls	r2, r3
 8006506:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <xTaskResumeAll+0x120>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4313      	orrs	r3, r2
 800650c:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <xTaskResumeAll+0x120>)
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a27      	ldr	r2, [pc, #156]	; (80065bc <xTaskResumeAll+0x124>)
 800651e:	441a      	add	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe fc7e 	bl	8004e28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <xTaskResumeAll+0x128>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800653a:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <xTaskResumeAll+0x12c>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006540:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <xTaskResumeAll+0x11c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1cc      	bne.n	80064e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800654e:	f000 fb2f 	bl	8006bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <xTaskResumeAll+0x130>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d010      	beq.n	8006580 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800655e:	f000 f859 	bl	8006614 <xTaskIncrementTick>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006568:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <xTaskResumeAll+0x12c>)
 800656a:	2201      	movs	r2, #1
 800656c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3b01      	subs	r3, #1
 8006572:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f1      	bne.n	800655e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800657a:	4b13      	ldr	r3, [pc, #76]	; (80065c8 <xTaskResumeAll+0x130>)
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006580:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <xTaskResumeAll+0x12c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006588:	2301      	movs	r3, #1
 800658a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800658c:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <xTaskResumeAll+0x134>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800659c:	f7fe fdfe 	bl	800519c <vPortExitCritical>

	return xAlreadyYielded;
 80065a0:	68bb      	ldr	r3, [r7, #8]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	200048b4 	.word	0x200048b4
 80065b0:	2000488c 	.word	0x2000488c
 80065b4:	2000484c 	.word	0x2000484c
 80065b8:	20004894 	.word	0x20004894
 80065bc:	20004790 	.word	0x20004790
 80065c0:	2000478c 	.word	0x2000478c
 80065c4:	200048a0 	.word	0x200048a0
 80065c8:	2000489c 	.word	0x2000489c
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <xTaskGetTickCount+0x1c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80065dc:	687b      	ldr	r3, [r7, #4]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20004890 	.word	0x20004890

080065f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f6:	f7fe fe75 	bl	80052e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80065fa:	2300      	movs	r3, #0
 80065fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <xTaskGetTickCountFromISR+0x20>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006604:	683b      	ldr	r3, [r7, #0]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20004890 	.word	0x20004890

08006614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661e:	4b50      	ldr	r3, [pc, #320]	; (8006760 <xTaskIncrementTick+0x14c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	f040 808c 	bne.w	8006740 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006628:	4b4e      	ldr	r3, [pc, #312]	; (8006764 <xTaskIncrementTick+0x150>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3301      	adds	r3, #1
 800662e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006630:	4a4c      	ldr	r2, [pc, #304]	; (8006764 <xTaskIncrementTick+0x150>)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d11f      	bne.n	800667c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800663c:	4b4a      	ldr	r3, [pc, #296]	; (8006768 <xTaskIncrementTick+0x154>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <xTaskIncrementTick+0x46>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	e7fe      	b.n	8006658 <xTaskIncrementTick+0x44>
 800665a:	4b43      	ldr	r3, [pc, #268]	; (8006768 <xTaskIncrementTick+0x154>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	4b42      	ldr	r3, [pc, #264]	; (800676c <xTaskIncrementTick+0x158>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a40      	ldr	r2, [pc, #256]	; (8006768 <xTaskIncrementTick+0x154>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	4a40      	ldr	r2, [pc, #256]	; (800676c <xTaskIncrementTick+0x158>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4b40      	ldr	r3, [pc, #256]	; (8006770 <xTaskIncrementTick+0x15c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a3e      	ldr	r2, [pc, #248]	; (8006770 <xTaskIncrementTick+0x15c>)
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	f000 fa9a 	bl	8006bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800667c:	4b3d      	ldr	r3, [pc, #244]	; (8006774 <xTaskIncrementTick+0x160>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d34d      	bcc.n	8006722 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006686:	4b38      	ldr	r3, [pc, #224]	; (8006768 <xTaskIncrementTick+0x154>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <xTaskIncrementTick+0x80>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <xTaskIncrementTick+0x82>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669a:	4b36      	ldr	r3, [pc, #216]	; (8006774 <xTaskIncrementTick+0x160>)
 800669c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066a0:	601a      	str	r2, [r3, #0]
					break;
 80066a2:	e03e      	b.n	8006722 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066a4:	4b30      	ldr	r3, [pc, #192]	; (8006768 <xTaskIncrementTick+0x154>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d203      	bcs.n	80066c4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <xTaskIncrementTick+0x160>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6013      	str	r3, [r2, #0]
						break;
 80066c2:	e02e      	b.n	8006722 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	3304      	adds	r3, #4
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fc0a 	bl	8004ee2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3318      	adds	r3, #24
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fc01 	bl	8004ee2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	2201      	movs	r2, #1
 80066e6:	409a      	lsls	r2, r3
 80066e8:	4b23      	ldr	r3, [pc, #140]	; (8006778 <xTaskIncrementTick+0x164>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	4a22      	ldr	r2, [pc, #136]	; (8006778 <xTaskIncrementTick+0x164>)
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4a1f      	ldr	r2, [pc, #124]	; (800677c <xTaskIncrementTick+0x168>)
 8006700:	441a      	add	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f7fe fb8d 	bl	8004e28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006712:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <xTaskIncrementTick+0x16c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	429a      	cmp	r2, r3
 800671a:	d3b4      	bcc.n	8006686 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006720:	e7b1      	b.n	8006686 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006722:	4b17      	ldr	r3, [pc, #92]	; (8006780 <xTaskIncrementTick+0x16c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006728:	4914      	ldr	r1, [pc, #80]	; (800677c <xTaskIncrementTick+0x168>)
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d907      	bls.n	800674a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800673a:	2301      	movs	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	e004      	b.n	800674a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006740:	4b10      	ldr	r3, [pc, #64]	; (8006784 <xTaskIncrementTick+0x170>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	4a0f      	ldr	r2, [pc, #60]	; (8006784 <xTaskIncrementTick+0x170>)
 8006748:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800674a:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <xTaskIncrementTick+0x174>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006752:	2301      	movs	r3, #1
 8006754:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200048b4 	.word	0x200048b4
 8006764:	20004890 	.word	0x20004890
 8006768:	20004844 	.word	0x20004844
 800676c:	20004848 	.word	0x20004848
 8006770:	200048a4 	.word	0x200048a4
 8006774:	200048ac 	.word	0x200048ac
 8006778:	20004894 	.word	0x20004894
 800677c:	20004790 	.word	0x20004790
 8006780:	2000478c 	.word	0x2000478c
 8006784:	2000489c 	.word	0x2000489c
 8006788:	200048a0 	.word	0x200048a0

0800678c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006792:	4b26      	ldr	r3, [pc, #152]	; (800682c <vTaskSwitchContext+0xa0>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800679a:	4b25      	ldr	r3, [pc, #148]	; (8006830 <vTaskSwitchContext+0xa4>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067a0:	e03e      	b.n	8006820 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80067a2:	4b23      	ldr	r3, [pc, #140]	; (8006830 <vTaskSwitchContext+0xa4>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80067a8:	4b22      	ldr	r3, [pc, #136]	; (8006834 <vTaskSwitchContext+0xa8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	fab3 f383 	clz	r3, r3
 80067b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067b6:	7afb      	ldrb	r3, [r7, #11]
 80067b8:	f1c3 031f 	rsb	r3, r3, #31
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	491e      	ldr	r1, [pc, #120]	; (8006838 <vTaskSwitchContext+0xac>)
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4613      	mov	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	e7fe      	b.n	80067e4 <vTaskSwitchContext+0x58>
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4613      	mov	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4a11      	ldr	r2, [pc, #68]	; (8006838 <vTaskSwitchContext+0xac>)
 80067f2:	4413      	add	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	3308      	adds	r3, #8
 8006808:	429a      	cmp	r2, r3
 800680a:	d104      	bne.n	8006816 <vTaskSwitchContext+0x8a>
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4a07      	ldr	r2, [pc, #28]	; (800683c <vTaskSwitchContext+0xb0>)
 800681e:	6013      	str	r3, [r2, #0]
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	200048b4 	.word	0x200048b4
 8006830:	200048a0 	.word	0x200048a0
 8006834:	20004894 	.word	0x20004894
 8006838:	20004790 	.word	0x20004790
 800683c:	2000478c 	.word	0x2000478c

08006840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <vTaskPlaceOnEventList+0x24>
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e7fe      	b.n	8006862 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006864:	4b07      	ldr	r3, [pc, #28]	; (8006884 <vTaskPlaceOnEventList+0x44>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3318      	adds	r3, #24
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7fe faff 	bl	8004e70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006872:	2101      	movs	r1, #1
 8006874:	6838      	ldr	r0, [r7, #0]
 8006876:	f000 fafd 	bl	8006e74 <prvAddCurrentTaskToDelayedList>
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	2000478c 	.word	0x2000478c

08006888 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <xTaskRemoveFromEventList+0x2a>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e7fe      	b.n	80068b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3318      	adds	r3, #24
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7fe fb13 	bl	8004ee2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068bc:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <xTaskRemoveFromEventList+0xac>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11c      	bne.n	80068fe <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fe fb0a 	bl	8004ee2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	2201      	movs	r2, #1
 80068d4:	409a      	lsls	r2, r3
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <xTaskRemoveFromEventList+0xb0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	4a16      	ldr	r2, [pc, #88]	; (8006938 <xTaskRemoveFromEventList+0xb0>)
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4a13      	ldr	r2, [pc, #76]	; (800693c <xTaskRemoveFromEventList+0xb4>)
 80068ee:	441a      	add	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7fe fa96 	bl	8004e28 <vListInsertEnd>
 80068fc:	e005      	b.n	800690a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	3318      	adds	r3, #24
 8006902:	4619      	mov	r1, r3
 8006904:	480e      	ldr	r0, [pc, #56]	; (8006940 <xTaskRemoveFromEventList+0xb8>)
 8006906:	f7fe fa8f 	bl	8004e28 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <xTaskRemoveFromEventList+0xbc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d905      	bls.n	8006924 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800691c:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <xTaskRemoveFromEventList+0xc0>)
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e001      	b.n	8006928 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006928:	697b      	ldr	r3, [r7, #20]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200048b4 	.word	0x200048b4
 8006938:	20004894 	.word	0x20004894
 800693c:	20004790 	.word	0x20004790
 8006940:	2000484c 	.word	0x2000484c
 8006944:	2000478c 	.word	0x2000478c
 8006948:	200048a0 	.word	0x200048a0

0800694c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <vTaskSetTimeOutState+0x22>
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	e7fe      	b.n	800696c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800696e:	4b07      	ldr	r3, [pc, #28]	; (800698c <vTaskSetTimeOutState+0x40>)
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006976:	4b06      	ldr	r3, [pc, #24]	; (8006990 <vTaskSetTimeOutState+0x44>)
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	605a      	str	r2, [r3, #4]
}
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	200048a4 	.word	0x200048a4
 8006990:	20004890 	.word	0x20004890

08006994 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d109      	bne.n	80069b8 <xTaskCheckForTimeOut+0x24>
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	e7fe      	b.n	80069b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d109      	bne.n	80069d2 <xTaskCheckForTimeOut+0x3e>
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60bb      	str	r3, [r7, #8]
 80069d0:	e7fe      	b.n	80069d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80069d2:	f7fe fbb5 	bl	8005140 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <xTaskCheckForTimeOut+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e4:	d102      	bne.n	80069ec <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	e026      	b.n	8006a3a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <xTaskCheckForTimeOut+0xb8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d007      	beq.n	8006a08 <xTaskCheckForTimeOut+0x74>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d802      	bhi.n	8006a08 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a02:	2301      	movs	r3, #1
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e018      	b.n	8006a3a <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d20e      	bcs.n	8006a36 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6859      	ldr	r1, [r3, #4]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1acb      	subs	r3, r1, r3
 8006a24:	441a      	add	r2, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff ff8e 	bl	800694c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e001      	b.n	8006a3a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8006a36:	2301      	movs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006a3a:	f7fe fbaf 	bl	800519c <vPortExitCritical>

	return xReturn;
 8006a3e:	697b      	ldr	r3, [r7, #20]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20004890 	.word	0x20004890
 8006a4c:	200048a4 	.word	0x200048a4

08006a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <vTaskMissedYield+0x14>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	601a      	str	r2, [r3, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	200048a0 	.word	0x200048a0

08006a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a70:	f000 f852 	bl	8006b18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <prvIdleTask+0x28>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d9f9      	bls.n	8006a70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <prvIdleTask+0x2c>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a8c:	e7f0      	b.n	8006a70 <prvIdleTask+0x8>
 8006a8e:	bf00      	nop
 8006a90:	20004790 	.word	0x20004790
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	e00c      	b.n	8006abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <prvInitialiseTaskLists+0x60>)
 8006ab0:	4413      	add	r3, r2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe f98b 	bl	8004dce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3301      	adds	r3, #1
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	d9ef      	bls.n	8006aa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ac4:	480d      	ldr	r0, [pc, #52]	; (8006afc <prvInitialiseTaskLists+0x64>)
 8006ac6:	f7fe f982 	bl	8004dce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006aca:	480d      	ldr	r0, [pc, #52]	; (8006b00 <prvInitialiseTaskLists+0x68>)
 8006acc:	f7fe f97f 	bl	8004dce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ad0:	480c      	ldr	r0, [pc, #48]	; (8006b04 <prvInitialiseTaskLists+0x6c>)
 8006ad2:	f7fe f97c 	bl	8004dce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ad6:	480c      	ldr	r0, [pc, #48]	; (8006b08 <prvInitialiseTaskLists+0x70>)
 8006ad8:	f7fe f979 	bl	8004dce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006adc:	480b      	ldr	r0, [pc, #44]	; (8006b0c <prvInitialiseTaskLists+0x74>)
 8006ade:	f7fe f976 	bl	8004dce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <prvInitialiseTaskLists+0x78>)
 8006ae4:	4a05      	ldr	r2, [pc, #20]	; (8006afc <prvInitialiseTaskLists+0x64>)
 8006ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <prvInitialiseTaskLists+0x7c>)
 8006aea:	4a05      	ldr	r2, [pc, #20]	; (8006b00 <prvInitialiseTaskLists+0x68>)
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20004790 	.word	0x20004790
 8006afc:	2000481c 	.word	0x2000481c
 8006b00:	20004830 	.word	0x20004830
 8006b04:	2000484c 	.word	0x2000484c
 8006b08:	20004860 	.word	0x20004860
 8006b0c:	20004878 	.word	0x20004878
 8006b10:	20004844 	.word	0x20004844
 8006b14:	20004848 	.word	0x20004848

08006b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b1e:	e028      	b.n	8006b72 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8006b20:	f7ff fcac 	bl	800647c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006b24:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <prvCheckTasksWaitingTermination+0x6c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006b34:	f7ff fcb0 	bl	8006498 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d119      	bne.n	8006b72 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006b3e:	f7fe faff 	bl	8005140 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006b42:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <prvCheckTasksWaitingTermination+0x6c>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe f9c7 	bl	8004ee2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006b54:	4b0c      	ldr	r3, [pc, #48]	; (8006b88 <prvCheckTasksWaitingTermination+0x70>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	4a0b      	ldr	r2, [pc, #44]	; (8006b88 <prvCheckTasksWaitingTermination+0x70>)
 8006b5c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <prvCheckTasksWaitingTermination+0x74>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <prvCheckTasksWaitingTermination+0x74>)
 8006b66:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8006b68:	f7fe fb18 	bl	800519c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006b6c:	6838      	ldr	r0, [r7, #0]
 8006b6e:	f000 f80f 	bl	8006b90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <prvCheckTasksWaitingTermination+0x74>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1d2      	bne.n	8006b20 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b7a:	bf00      	nop
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20004860 	.word	0x20004860
 8006b88:	2000488c 	.word	0x2000488c
 8006b8c:	20004874 	.word	0x20004874

08006b90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fca1 	bl	80054e4 <vPortFree>
			vPortFree( pxTCB );
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fe fc9e 	bl	80054e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb6:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <prvResetNextTaskUnblockTime+0x44>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <prvResetNextTaskUnblockTime+0x14>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <prvResetNextTaskUnblockTime+0x16>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bca:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <prvResetNextTaskUnblockTime+0x48>)
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bd0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bd2:	e008      	b.n	8006be6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <prvResetNextTaskUnblockTime+0x44>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <prvResetNextTaskUnblockTime+0x48>)
 8006be4:	6013      	str	r3, [r2, #0]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	20004844 	.word	0x20004844
 8006bf8:	200048ac 	.word	0x200048ac

08006bfc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006c02:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <xTaskGetCurrentTaskHandle+0x1c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006c08:	687b      	ldr	r3, [r7, #4]
	}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	2000478c 	.word	0x2000478c

08006c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <xTaskGetSchedulerState+0x34>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	607b      	str	r3, [r7, #4]
 8006c2e:	e008      	b.n	8006c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <xTaskGetSchedulerState+0x38>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e001      	b.n	8006c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c42:	687b      	ldr	r3, [r7, #4]
	}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20004898 	.word	0x20004898
 8006c54:	200048b4 	.word	0x200048b4

08006c58 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d062      	beq.n	8006d30 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	4b32      	ldr	r3, [pc, #200]	; (8006d38 <vTaskPriorityInherit+0xe0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d25b      	bcs.n	8006d30 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	db06      	blt.n	8006c8e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c80:	4b2d      	ldr	r3, [pc, #180]	; (8006d38 <vTaskPriorityInherit+0xe0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	f1c3 0207 	rsb	r2, r3, #7
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6959      	ldr	r1, [r3, #20]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <vTaskPriorityInherit+0xe4>)
 8006ca0:	4413      	add	r3, r2
 8006ca2:	4299      	cmp	r1, r3
 8006ca4:	d101      	bne.n	8006caa <vTaskPriorityInherit+0x52>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <vTaskPriorityInherit+0x54>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d03a      	beq.n	8006d26 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe f914 	bl	8004ee2 <uxListRemove>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d115      	bne.n	8006cec <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	491d      	ldr	r1, [pc, #116]	; (8006d3c <vTaskPriorityInherit+0xe4>)
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <vTaskPriorityInherit+0x94>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	2201      	movs	r2, #1
 8006cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce0:	43da      	mvns	r2, r3
 8006ce2:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <vTaskPriorityInherit+0xe8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	4a15      	ldr	r2, [pc, #84]	; (8006d40 <vTaskPriorityInherit+0xe8>)
 8006cea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cec:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <vTaskPriorityInherit+0xe0>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	4b10      	ldr	r3, [pc, #64]	; (8006d40 <vTaskPriorityInherit+0xe8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	4a0e      	ldr	r2, [pc, #56]	; (8006d40 <vTaskPriorityInherit+0xe8>)
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4413      	add	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <vTaskPriorityInherit+0xe4>)
 8006d16:	441a      	add	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f7fe f882 	bl	8004e28 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d24:	e004      	b.n	8006d30 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d26:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <vTaskPriorityInherit+0xe0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	2000478c 	.word	0x2000478c
 8006d3c:	20004790 	.word	0x20004790
 8006d40:	20004894 	.word	0x20004894

08006d44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d06c      	beq.n	8006e34 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d5a:	4b39      	ldr	r3, [pc, #228]	; (8006e40 <xTaskPriorityDisinherit+0xfc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d009      	beq.n	8006d78 <xTaskPriorityDisinherit+0x34>
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e7fe      	b.n	8006d76 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <xTaskPriorityDisinherit+0x50>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	e7fe      	b.n	8006d92 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d044      	beq.n	8006e34 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d140      	bne.n	8006e34 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f893 	bl	8004ee2 <uxListRemove>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d115      	bne.n	8006dee <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	491f      	ldr	r1, [pc, #124]	; (8006e44 <xTaskPriorityDisinherit+0x100>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <xTaskPriorityDisinherit+0xaa>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	2201      	movs	r2, #1
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	43da      	mvns	r2, r3
 8006de4:	4b18      	ldr	r3, [pc, #96]	; (8006e48 <xTaskPriorityDisinherit+0x104>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4013      	ands	r3, r2
 8006dea:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <xTaskPriorityDisinherit+0x104>)
 8006dec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	f1c3 0207 	rsb	r2, r3, #7
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	2201      	movs	r2, #1
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <xTaskPriorityDisinherit+0x104>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	4a0d      	ldr	r2, [pc, #52]	; (8006e48 <xTaskPriorityDisinherit+0x104>)
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4a08      	ldr	r2, [pc, #32]	; (8006e44 <xTaskPriorityDisinherit+0x100>)
 8006e22:	441a      	add	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7fd fffc 	bl	8004e28 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e30:	2301      	movs	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e34:	697b      	ldr	r3, [r7, #20]
	}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	2000478c 	.word	0x2000478c
 8006e44:	20004790 	.word	0x20004790
 8006e48:	20004894 	.word	0x20004894

08006e4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e5e:	3201      	adds	r2, #1
 8006e60:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006e62:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e64:	681b      	ldr	r3, [r3, #0]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	2000478c 	.word	0x2000478c

08006e74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e7e:	4b29      	ldr	r3, [pc, #164]	; (8006f24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e84:	4b28      	ldr	r3, [pc, #160]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe f829 	bl	8004ee2 <uxListRemove>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	43da      	mvns	r2, r3
 8006ea4:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006eac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eb4:	d10a      	bne.n	8006ecc <prvAddCurrentTaskToDelayedList+0x58>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ebc:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	481a      	ldr	r0, [pc, #104]	; (8006f30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006ec6:	f7fd ffaf 	bl	8004e28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006eca:	e026      	b.n	8006f1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ed4:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d209      	bcs.n	8006ef8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee4:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3304      	adds	r3, #4
 8006eee:	4619      	mov	r1, r3
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	f7fd ffbd 	bl	8004e70 <vListInsert>
}
 8006ef6:	e010      	b.n	8006f1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef8:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3304      	adds	r3, #4
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7fd ffb3 	bl	8004e70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f0a:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d202      	bcs.n	8006f1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f14:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6013      	str	r3, [r2, #0]
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20004890 	.word	0x20004890
 8006f28:	2000478c 	.word	0x2000478c
 8006f2c:	20004894 	.word	0x20004894
 8006f30:	20004878 	.word	0x20004878
 8006f34:	20004848 	.word	0x20004848
 8006f38:	20004844 	.word	0x20004844
 8006f3c:	200048ac 	.word	0x200048ac

08006f40 <MyLCD_PowerOn>:
MyLCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void MyLCD_PowerOn(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
	MyLCD_WriteCommand(0xCA);
 8006f44:	20ca      	movs	r0, #202	; 0xca
 8006f46:	f000 f943 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC3);
 8006f4a:	20c3      	movs	r0, #195	; 0xc3
 8006f4c:	f000 f96a 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x08);
 8006f50:	2008      	movs	r0, #8
 8006f52:	f000 f967 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x50);
 8006f56:	2050      	movs	r0, #80	; 0x50
 8006f58:	f000 f964 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWERB);
 8006f5c:	20cf      	movs	r0, #207	; 0xcf
 8006f5e:	f000 f937 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006f62:	2000      	movs	r0, #0
 8006f64:	f000 f95e 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0xC1);
 8006f68:	20c1      	movs	r0, #193	; 0xc1
 8006f6a:	f000 f95b 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x30);
 8006f6e:	2030      	movs	r0, #48	; 0x30
 8006f70:	f000 f958 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER_SEQ);
 8006f74:	20ed      	movs	r0, #237	; 0xed
 8006f76:	f000 f92b 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x64);
 8006f7a:	2064      	movs	r0, #100	; 0x64
 8006f7c:	f000 f952 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x03);
 8006f80:	2003      	movs	r0, #3
 8006f82:	f000 f94f 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x12);
 8006f86:	2012      	movs	r0, #18
 8006f88:	f000 f94c 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x81);
 8006f8c:	2081      	movs	r0, #129	; 0x81
 8006f8e:	f000 f949 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DTCA);
 8006f92:	20e8      	movs	r0, #232	; 0xe8
 8006f94:	f000 f91c 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x85);
 8006f98:	2085      	movs	r0, #133	; 0x85
 8006f9a:	f000 f943 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f000 f940 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x78);
 8006fa4:	2078      	movs	r0, #120	; 0x78
 8006fa6:	f000 f93d 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWERA);
 8006faa:	20cb      	movs	r0, #203	; 0xcb
 8006fac:	f000 f910 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x39);
 8006fb0:	2039      	movs	r0, #57	; 0x39
 8006fb2:	f000 f937 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x2C);
 8006fb6:	202c      	movs	r0, #44	; 0x2c
 8006fb8:	f000 f934 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f000 f931 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x34);
 8006fc2:	2034      	movs	r0, #52	; 0x34
 8006fc4:	f000 f92e 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x02);
 8006fc8:	2002      	movs	r0, #2
 8006fca:	f000 f92b 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_PRC);
 8006fce:	20f7      	movs	r0, #247	; 0xf7
 8006fd0:	f000 f8fe 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x20);
 8006fd4:	2020      	movs	r0, #32
 8006fd6:	f000 f925 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DTCB);
 8006fda:	20ea      	movs	r0, #234	; 0xea
 8006fdc:	f000 f8f8 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	f000 f91f 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	f000 f91c 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_FRC);
 8006fec:	20b1      	movs	r0, #177	; 0xb1
 8006fee:	f000 f8ef 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f000 f916 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x1B);
 8006ff8:	201b      	movs	r0, #27
 8006ffa:	f000 f913 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DFC);
 8006ffe:	20b6      	movs	r0, #182	; 0xb6
 8007000:	f000 f8e6 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0A);
 8007004:	200a      	movs	r0, #10
 8007006:	f000 f90d 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0xA2);
 800700a:	20a2      	movs	r0, #162	; 0xa2
 800700c:	f000 f90a 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER1);
 8007010:	20c0      	movs	r0, #192	; 0xc0
 8007012:	f000 f8dd 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x10);
 8007016:	2010      	movs	r0, #16
 8007018:	f000 f904 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_POWER2);
 800701c:	20c1      	movs	r0, #193	; 0xc1
 800701e:	f000 f8d7 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x10);
 8007022:	2010      	movs	r0, #16
 8007024:	f000 f8fe 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_VCOM1);
 8007028:	20c5      	movs	r0, #197	; 0xc5
 800702a:	f000 f8d1 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x45);
 800702e:	2045      	movs	r0, #69	; 0x45
 8007030:	f000 f8f8 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x15);
 8007034:	2015      	movs	r0, #21
 8007036:	f000 f8f5 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_VCOM2);
 800703a:	20c7      	movs	r0, #199	; 0xc7
 800703c:	f000 f8c8 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x90);
 8007040:	2090      	movs	r0, #144	; 0x90
 8007042:	f000 f8ef 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_MAC);
 8007046:	2036      	movs	r0, #54	; 0x36
 8007048:	f000 f8c2 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC8);
 800704c:	20c8      	movs	r0, #200	; 0xc8
 800704e:	f000 f8e9 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_3GAMMA_EN);
 8007052:	20f2      	movs	r0, #242	; 0xf2
 8007054:	f000 f8bc 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 8007058:	2000      	movs	r0, #0
 800705a:	f000 f8e3 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_RGB_INTERFACE);
 800705e:	20b0      	movs	r0, #176	; 0xb0
 8007060:	f000 f8b6 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0xC2);
 8007064:	20c2      	movs	r0, #194	; 0xc2
 8007066:	f000 f8dd 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_DFC);
 800706a:	20b6      	movs	r0, #182	; 0xb6
 800706c:	f000 f8b0 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0A);
 8007070:	200a      	movs	r0, #10
 8007072:	f000 f8d7 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0xA7);
 8007076:	20a7      	movs	r0, #167	; 0xa7
 8007078:	f000 f8d4 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x27);
 800707c:	2027      	movs	r0, #39	; 0x27
 800707e:	f000 f8d1 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x04);
 8007082:	2004      	movs	r0, #4
 8007084:	f000 f8ce 	bl	8007224 <MyLCD_WriteData>

	/* colomn address set */
	MyLCD_WriteCommand(MyLCD_COLUMN_ADDR);
 8007088:	202a      	movs	r0, #42	; 0x2a
 800708a:	f000 f8a1 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 800708e:	2000      	movs	r0, #0
 8007090:	f000 f8c8 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 8007094:	2000      	movs	r0, #0
 8007096:	f000 f8c5 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 800709a:	2000      	movs	r0, #0
 800709c:	f000 f8c2 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0xEF);
 80070a0:	20ef      	movs	r0, #239	; 0xef
 80070a2:	f000 f8bf 	bl	8007224 <MyLCD_WriteData>
	/* Page Address Set */
	MyLCD_WriteCommand(MyLCD_PAGE_ADDR);
 80070a6:	202b      	movs	r0, #43	; 0x2b
 80070a8:	f000 f892 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 80070ac:	2000      	movs	r0, #0
 80070ae:	f000 f8b9 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 80070b2:	2000      	movs	r0, #0
 80070b4:	f000 f8b6 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x01);
 80070b8:	2001      	movs	r0, #1
 80070ba:	f000 f8b3 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x3F);
 80070be:	203f      	movs	r0, #63	; 0x3f
 80070c0:	f000 f8b0 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_INTERFACE);
 80070c4:	20f6      	movs	r0, #246	; 0xf6
 80070c6:	f000 f883 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x01);
 80070ca:	2001      	movs	r0, #1
 80070cc:	f000 f8aa 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 80070d0:	2000      	movs	r0, #0
 80070d2:	f000 f8a7 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x06);
 80070d6:	2006      	movs	r0, #6
 80070d8:	f000 f8a4 	bl	8007224 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_GRAM);
 80070dc:	202c      	movs	r0, #44	; 0x2c
 80070de:	f000 f877 	bl	80071d0 <MyLCD_WriteCommand>
	HAL_Delay(100);
 80070e2:	2064      	movs	r0, #100	; 0x64
 80070e4:	f7f9 fa86 	bl	80005f4 <HAL_Delay>

	MyLCD_WriteCommand(MyLCD_GAMMA);
 80070e8:	2026      	movs	r0, #38	; 0x26
 80070ea:	f000 f871 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x01);
 80070ee:	2001      	movs	r0, #1
 80070f0:	f000 f898 	bl	8007224 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_PGAMMA);
 80070f4:	20e0      	movs	r0, #224	; 0xe0
 80070f6:	f000 f86b 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x0F);
 80070fa:	200f      	movs	r0, #15
 80070fc:	f000 f892 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x29);
 8007100:	2029      	movs	r0, #41	; 0x29
 8007102:	f000 f88f 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x24);
 8007106:	2024      	movs	r0, #36	; 0x24
 8007108:	f000 f88c 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x0C);
 800710c:	200c      	movs	r0, #12
 800710e:	f000 f889 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x0E);
 8007112:	200e      	movs	r0, #14
 8007114:	f000 f886 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x09);
 8007118:	2009      	movs	r0, #9
 800711a:	f000 f883 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x4E);
 800711e:	204e      	movs	r0, #78	; 0x4e
 8007120:	f000 f880 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x78);
 8007124:	2078      	movs	r0, #120	; 0x78
 8007126:	f000 f87d 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x3C);
 800712a:	203c      	movs	r0, #60	; 0x3c
 800712c:	f000 f87a 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x09);
 8007130:	2009      	movs	r0, #9
 8007132:	f000 f877 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x13);
 8007136:	2013      	movs	r0, #19
 8007138:	f000 f874 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x05);
 800713c:	2005      	movs	r0, #5
 800713e:	f000 f871 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x17);
 8007142:	2017      	movs	r0, #23
 8007144:	f000 f86e 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x11);
 8007148:	2011      	movs	r0, #17
 800714a:	f000 f86b 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x00);
 800714e:	2000      	movs	r0, #0
 8007150:	f000 f868 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteCommand(MyLCD_NGAMMA);
 8007154:	20e1      	movs	r0, #225	; 0xe1
 8007156:	f000 f83b 	bl	80071d0 <MyLCD_WriteCommand>
	MyLCD_WriteData(0x00);
 800715a:	2000      	movs	r0, #0
 800715c:	f000 f862 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x16);
 8007160:	2016      	movs	r0, #22
 8007162:	f000 f85f 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x1B);
 8007166:	201b      	movs	r0, #27
 8007168:	f000 f85c 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x04);
 800716c:	2004      	movs	r0, #4
 800716e:	f000 f859 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x11);
 8007172:	2011      	movs	r0, #17
 8007174:	f000 f856 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x07);
 8007178:	2007      	movs	r0, #7
 800717a:	f000 f853 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x31);
 800717e:	2031      	movs	r0, #49	; 0x31
 8007180:	f000 f850 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x33);
 8007184:	2033      	movs	r0, #51	; 0x33
 8007186:	f000 f84d 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x42);
 800718a:	2042      	movs	r0, #66	; 0x42
 800718c:	f000 f84a 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x05);
 8007190:	2005      	movs	r0, #5
 8007192:	f000 f847 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x0C);
 8007196:	200c      	movs	r0, #12
 8007198:	f000 f844 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x0A);
 800719c:	200a      	movs	r0, #10
 800719e:	f000 f841 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x28);
 80071a2:	2028      	movs	r0, #40	; 0x28
 80071a4:	f000 f83e 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x2F);
 80071a8:	202f      	movs	r0, #47	; 0x2f
 80071aa:	f000 f83b 	bl	8007224 <MyLCD_WriteData>
	MyLCD_WriteData(0x0F);
 80071ae:	200f      	movs	r0, #15
 80071b0:	f000 f838 	bl	8007224 <MyLCD_WriteData>

	MyLCD_WriteCommand(MyLCD_SLEEP_OUT);
 80071b4:	2011      	movs	r0, #17
 80071b6:	f000 f80b 	bl	80071d0 <MyLCD_WriteCommand>
	HAL_Delay(100);
 80071ba:	2064      	movs	r0, #100	; 0x64
 80071bc:	f7f9 fa1a 	bl	80005f4 <HAL_Delay>
	MyLCD_WriteCommand(MyLCD_DISPLAY_ON);
 80071c0:	2029      	movs	r0, #41	; 0x29
 80071c2:	f000 f805 	bl	80071d0 <MyLCD_WriteCommand>
	/* GRAM start writing */
	MyLCD_WriteCommand(MyLCD_GRAM);
 80071c6:	202c      	movs	r0, #44	; 0x2c
 80071c8:	f000 f802 	bl	80071d0 <MyLCD_WriteCommand>
}
 80071cc:	bf00      	nop
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <MyLCD_WriteCommand>:

void MyLCD_WriteCommand(uint8_t com)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	733b      	strb	r3, [r7, #12]
 80071de:	2300      	movs	r3, #0
 80071e0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80071e2:	2200      	movs	r2, #0
 80071e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071e8:	480b      	ldr	r0, [pc, #44]	; (8007218 <MyLCD_WriteCommand+0x48>)
 80071ea:	f7f9 fe33 	bl	8000e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2104      	movs	r1, #4
 80071f2:	480a      	ldr	r0, [pc, #40]	; (800721c <MyLCD_WriteCommand+0x4c>)
 80071f4:	f7f9 fe2e 	bl	8000e54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 80071f8:	f107 010c 	add.w	r1, r7, #12
 80071fc:	2364      	movs	r3, #100	; 0x64
 80071fe:	2201      	movs	r2, #1
 8007200:	4807      	ldr	r0, [pc, #28]	; (8007220 <MyLCD_WriteCommand+0x50>)
 8007202:	f7fc fa7d 	bl	8003700 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8007206:	2201      	movs	r2, #1
 8007208:	2104      	movs	r1, #4
 800720a:	4804      	ldr	r0, [pc, #16]	; (800721c <MyLCD_WriteCommand+0x4c>)
 800720c:	f7f9 fe22 	bl	8000e54 <HAL_GPIO_WritePin>
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40020c00 	.word	0x40020c00
 800721c:	40020800 	.word	0x40020800
 8007220:	20027a04 	.word	0x20027a04

08007224 <MyLCD_WriteData>:

void MyLCD_WriteData(uint8_t data)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	733b      	strb	r3, [r7, #12]
 8007232:	2300      	movs	r3, #0
 8007234:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8007236:	2201      	movs	r2, #1
 8007238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800723c:	480b      	ldr	r0, [pc, #44]	; (800726c <MyLCD_WriteData+0x48>)
 800723e:	f7f9 fe09 	bl	8000e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8007242:	2200      	movs	r2, #0
 8007244:	2104      	movs	r1, #4
 8007246:	480a      	ldr	r0, [pc, #40]	; (8007270 <MyLCD_WriteData+0x4c>)
 8007248:	f7f9 fe04 	bl	8000e54 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 800724c:	f107 010c 	add.w	r1, r7, #12
 8007250:	2364      	movs	r3, #100	; 0x64
 8007252:	2201      	movs	r2, #1
 8007254:	4807      	ldr	r0, [pc, #28]	; (8007274 <MyLCD_WriteData+0x50>)
 8007256:	f7fc fa53 	bl	8003700 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 800725a:	2201      	movs	r2, #1
 800725c:	2104      	movs	r1, #4
 800725e:	4804      	ldr	r0, [pc, #16]	; (8007270 <MyLCD_WriteData+0x4c>)
 8007260:	f7f9 fdf8 	bl	8000e54 <HAL_GPIO_WritePin>
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40020c00 	.word	0x40020c00
 8007270:	40020800 	.word	0x40020800
 8007274:	20027a04 	.word	0x20027a04

08007278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007278:	b5b0      	push	{r4, r5, r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800727e:	f7f9 f947 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007282:	f000 f981 	bl	8007588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007286:	f000 fac7 	bl	8007818 <MX_GPIO_Init>
  //MX_LTDC_Init();
  MX_SPI5_Init();
 800728a:	f000 fa47 	bl	800771c <MX_SPI5_Init>
  MX_FMC_Init();
 800728e:	f000 fa7b 	bl	8007788 <MX_FMC_Init>
  //MX_DMA2D_Init();
  MX_I2C3_Init();
 8007292:	f000 fa03 	bl	800769c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8007296:	481c      	ldr	r0, [pc, #112]	; (8007308 <main+0x90>)
 8007298:	f000 fb74 	bl	8007984 <SDRAM_init>
  MyLCD_PowerOn();
 800729c:	f7ff fe50 	bl	8006f40 <MyLCD_PowerOn>
  //HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
  TP_Config();
 80072a0:	f000 fe24 	bl	8007eec <TP_Config>

  /* Enable CRC to Unlock GUI */
  __HAL_RCC_CRC_CLK_ENABLE();
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <main+0x94>)
 80072aa:	4b18      	ldr	r3, [pc, #96]	; (800730c <main+0x94>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072b2:	6313      	str	r3, [r2, #48]	; 0x30
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <main+0x94>)
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]

  /* Enable Back up SRAM */
  __HAL_RCC_BKPSRAM_CLK_ENABLE();
 80072c0:	2300      	movs	r3, #0
 80072c2:	607b      	str	r3, [r7, #4]
 80072c4:	4a11      	ldr	r2, [pc, #68]	; (800730c <main+0x94>)
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <main+0x94>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072ce:	6313      	str	r3, [r2, #48]	; 0x30
 80072d0:	4b0e      	ldr	r3, [pc, #56]	; (800730c <main+0x94>)
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80072dc:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <main+0x98>)
 80072de:	f107 040c 	add.w	r4, r7, #12
 80072e2:	461d      	mov	r5, r3
 80072e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fd fc6e 	bl	8004bd4 <osThreadCreate>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b06      	ldr	r3, [pc, #24]	; (8007314 <main+0x9c>)
 80072fc:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 
  GUI_X_InitOS();
 80072fe:	f7fd fbe9 	bl	8004ad4 <GUI_X_InitOS>

  /* Start scheduler */
  osKernelStart();
 8007302:	f7fd fc50 	bl	8004ba6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007306:	e7fe      	b.n	8007306 <main+0x8e>
 8007308:	20027a5c 	.word	0x20027a5c
 800730c:	40023800 	.word	0x40023800
 8007310:	080182f0 	.word	0x080182f0
 8007314:	200279ac 	.word	0x200279ac

08007318 <setGuiProfile>:
extern GUI_CONST_STORAGE GUI_BITMAP bmSTLogo;

static uint32_t idx = 0;

static void setGuiProfile(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
    FRAMEWIN_SetDefaultSkinClassic();
 800731c:	f009 f830 	bl	8010380 <FRAMEWIN_SetDefaultSkinClassic>
	PROGBAR_SetDefaultSkinClassic();
 8007320:	f009 fff4 	bl	801130c <PROGBAR_SetDefaultSkinClassic>
	RADIO_SetDefaultSkinClassic();
 8007324:	f00a f8fe 	bl	8011524 <RADIO_SetDefaultSkinClassic>
	SCROLLBAR_SetDefaultSkinClassic();
 8007328:	f00a fbc8 	bl	8011abc <SCROLLBAR_SetDefaultSkinClassic>
	SLIDER_SetDefaultSkinClassic();
 800732c:	f00a fe94 	bl	8012058 <SLIDER_SetDefaultSkinClassic>
	SPINBOX_SetDefaultSkinClassic();
 8007330:	f00a ffc8 	bl	80122c4 <SPINBOX_SetDefaultSkinClassic>
	BUTTON_SetDefaultSkinClassic();
 8007334:	f008 f914 	bl	800f560 <BUTTON_SetDefaultSkinClassic>
	DROPDOWN_SetDefaultSkinClassic();
 8007338:	f008 fc24 	bl	800fb84 <DROPDOWN_SetDefaultSkinClassic>
	MULTIPAGE_SetDefaultSkinClassic();
 800733c:	f009 ff2e 	bl	801119c <MULTIPAGE_SetDefaultSkinClassic>
	CHECKBOX_SetDefaultSkinClassic();
 8007340:	f008 fa22 	bl	800f788 <CHECKBOX_SetDefaultSkinClassic>
    FRAMEWIN_SetDefaultTextColor(0, GUI_WHITE);
 8007344:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007348:	2000      	movs	r0, #0
 800734a:	f008 fe5f 	bl	801000c <FRAMEWIN_SetDefaultTextColor>
    FRAMEWIN_SetDefaultTextColor(1, GUI_WHITE);
 800734e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007352:	2001      	movs	r0, #1
 8007354:	f008 fe5a 	bl	801000c <FRAMEWIN_SetDefaultTextColor>

    FRAMEWIN_SetDefaultFont(GUI_FONT_10_ASCII);
 8007358:	482c      	ldr	r0, [pc, #176]	; (800740c <setGuiProfile+0xf4>)
 800735a:	f008 fe45 	bl	800ffe8 <FRAMEWIN_SetDefaultFont>

	FRAMEWIN_SetDefaultClientColor(GUI_LIGHTGRAY | 0x20F50000);
 800735e:	482c      	ldr	r0, [pc, #176]	; (8007410 <setGuiProfile+0xf8>)
 8007360:	f008 fe48 	bl	800fff4 <FRAMEWIN_SetDefaultClientColor>
	FRAMEWIN_SetDefaultTitleHeight(15);
 8007364:	200f      	movs	r0, #15
 8007366:	f008 fe4b 	bl	8010000 <FRAMEWIN_SetDefaultTitleHeight>

	TREEVIEW_SetDefaultBkColor(TREEVIEW_CI_SEL, GUI_LIGHTGRAY | 0x20E50000);
 800736a:	4929      	ldr	r1, [pc, #164]	; (8007410 <setGuiProfile+0xf8>)
 800736c:	2001      	movs	r0, #1
 800736e:	f00a ffb1 	bl	80122d4 <TREEVIEW_SetDefaultBkColor>
	TREEVIEW_SetDefaultBkColor(TREEVIEW_CI_UNSEL, GUI_LIGHTGRAY | 0x20E50000);
 8007372:	4927      	ldr	r1, [pc, #156]	; (8007410 <setGuiProfile+0xf8>)
 8007374:	2000      	movs	r0, #0
 8007376:	f00a ffad 	bl	80122d4 <TREEVIEW_SetDefaultBkColor>
	TREEVIEW_SetDefaultTextColor(TREEVIEW_CI_SEL, GUI_BLUE);
 800737a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800737e:	2001      	movs	r0, #1
 8007380:	f00a ffb2 	bl	80122e8 <TREEVIEW_SetDefaultTextColor>

	WINDOW_SetDefaultBkColor(GUI_LIGHTGRAY | 0x20E50000);
 8007384:	4822      	ldr	r0, [pc, #136]	; (8007410 <setGuiProfile+0xf8>)
 8007386:	f00b fa71 	bl	801286c <WINDOW_SetDefaultBkColor>
	MULTIPAGE_SetDefaultBkColor(GUI_LIGHTGRAY | 0x20E50000, 0);
 800738a:	2100      	movs	r1, #0
 800738c:	4820      	ldr	r0, [pc, #128]	; (8007410 <setGuiProfile+0xf8>)
 800738e:	f009 fcf7 	bl	8010d80 <MULTIPAGE_SetDefaultBkColor>
	MULTIPAGE_SetDefaultBkColor(GUI_LIGHTGRAY | 0x20E50000, 1);
 8007392:	2101      	movs	r1, #1
 8007394:	481e      	ldr	r0, [pc, #120]	; (8007410 <setGuiProfile+0xf8>)
 8007396:	f009 fcf3 	bl	8010d80 <MULTIPAGE_SetDefaultBkColor>
	MULTIPAGE_SetDefaultFont(GUI_FONT_10_ASCII);
 800739a:	481c      	ldr	r0, [pc, #112]	; (800740c <setGuiProfile+0xf4>)
 800739c:	f009 fcfa 	bl	8010d94 <MULTIPAGE_SetDefaultFont>
	CHECKBOX_SetDefaultBkColor(GUI_LIGHTGRAY | 0x20E50000);
 80073a0:	481b      	ldr	r0, [pc, #108]	; (8007410 <setGuiProfile+0xf8>)
 80073a2:	f008 f8f7 	bl	800f594 <CHECKBOX_SetDefaultBkColor>

	CALENDAR_SetDefaultSize(CALENDAR_SI_HEADER, 20 );
 80073a6:	2114      	movs	r1, #20
 80073a8:	2000      	movs	r0, #0
 80073aa:	f008 f8e1 	bl	800f570 <CALENDAR_SetDefaultSize>
	CALENDAR_SetDefaultSize(CALENDAR_SI_CELL_X, 25 );
 80073ae:	2119      	movs	r1, #25
 80073b0:	2001      	movs	r0, #1
 80073b2:	f008 f8dd 	bl	800f570 <CALENDAR_SetDefaultSize>
	CALENDAR_SetDefaultSize(CALENDAR_SI_CELL_Y, 21 );
 80073b6:	2115      	movs	r1, #21
 80073b8:	2002      	movs	r0, #2
 80073ba:	f008 f8d9 	bl	800f570 <CALENDAR_SetDefaultSize>

	MULTIPAGE_SetDefaultBkColor (GUI_WHITE, 1);
 80073be:	2101      	movs	r1, #1
 80073c0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80073c4:	f009 fcdc 	bl	8010d80 <MULTIPAGE_SetDefaultBkColor>

	SPINBOX_SetDefaultButtonSize(15);
 80073c8:	200f      	movs	r0, #15
 80073ca:	f00a fe4d 	bl	8012068 <SPINBOX_SetDefaultButtonSize>
	LISTVIEW_SetDefaultGridColor(GUI_WHITE);
 80073ce:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80073d2:	f009 fccd 	bl	8010d70 <LISTVIEW_SetDefaultGridColor>
	SCROLLBAR_SetDefaultWidth(16);
 80073d6:	2010      	movs	r0, #16
 80073d8:	f00a f8cc 	bl	8011574 <SCROLLBAR_SetDefaultWidth>

	HEADER_SetDefaultBkColor(0x00C5903E);
 80073dc:	480d      	ldr	r0, [pc, #52]	; (8007414 <setGuiProfile+0xfc>)
 80073de:	f009 fa8b 	bl	80108f8 <HEADER_SetDefaultBkColor>
	HEADER_SetDefaultTextColor(GUI_WHITE);
 80073e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80073e6:	f009 fa8f 	bl	8010908 <HEADER_SetDefaultTextColor>
	SCROLLBAR_SetDefaultColor(GUI_LIGHTGRAY | 0x20F50000, SCROLLBAR_CI_THUMB);
 80073ea:	2100      	movs	r1, #0
 80073ec:	4808      	ldr	r0, [pc, #32]	; (8007410 <setGuiProfile+0xf8>)
 80073ee:	f00a f8c9 	bl	8011584 <SCROLLBAR_SetDefaultColor>
	SCROLLBAR_SetDefaultColor(GUI_LIGHTGRAY | 0x20F50000, SCROLLBAR_CI_SHAFT);
 80073f2:	2101      	movs	r1, #1
 80073f4:	4806      	ldr	r0, [pc, #24]	; (8007410 <setGuiProfile+0xf8>)
 80073f6:	f00a f8c5 	bl	8011584 <SCROLLBAR_SetDefaultColor>
	SCROLLBAR_SetDefaultColor(GUI_LIGHTGRAY | 0x20F50000, SCROLLBAR_CI_ARROW);
 80073fa:	2102      	movs	r1, #2
 80073fc:	4804      	ldr	r0, [pc, #16]	; (8007410 <setGuiProfile+0xf8>)
 80073fe:	f00a f8c1 	bl	8011584 <SCROLLBAR_SetDefaultColor>
	CHOOSEFILE_SetDelim('/');
 8007402:	202f      	movs	r0, #47	; 0x2f
 8007404:	f008 fa88 	bl	800f918 <CHOOSEFILE_SetDelim>
}
 8007408:	bf00      	nop
 800740a:	bd80      	pop	{r7, pc}
 800740c:	080183c0 	.word	0x080183c0
 8007410:	20f7d3d3 	.word	0x20f7d3d3
 8007414:	00c5903e 	.word	0x00c5903e

08007418 <_cb>:

static void _cb(WM_MESSAGE *pMsg)
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	uint16_t   xPos, Step = 20, i;
 8007420:	2314      	movs	r3, #20
 8007422:	827b      	strh	r3, [r7, #18]
	const GUI_BITMAP * pBm;

	switch (pMsg->MsgId)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b0f      	cmp	r3, #15
 800742a:	d14f      	bne.n	80074cc <_cb+0xb4>
	{
	case WM_PAINT:
	  GUI_SetBkColor(GUI_LIGHTBLUE);
 800742c:	482b      	ldr	r0, [pc, #172]	; (80074dc <_cb+0xc4>)
 800742e:	f001 fada 	bl	80089e6 <GUI_SetBkColor>
	  GUI_Clear();
 8007432:	f001 fc3b 	bl	8008cac <GUI_Clear>

	  GUI_DrawBitmap(&bmSTLogo, (LCD_GetXSize() - bmSTLogo.XSize)/2 , (LCD_GetYSize() - bmSTLogo.YSize)/2);
 8007436:	f003 ff5d 	bl	800b2f4 <LCD_GetXSize>
 800743a:	4602      	mov	r2, r0
 800743c:	4b28      	ldr	r3, [pc, #160]	; (80074e0 <_cb+0xc8>)
 800743e:	881b      	ldrh	r3, [r3, #0]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	0fda      	lsrs	r2, r3, #31
 8007444:	4413      	add	r3, r2
 8007446:	105b      	asrs	r3, r3, #1
 8007448:	461c      	mov	r4, r3
 800744a:	f003 ff5b 	bl	800b304 <LCD_GetYSize>
 800744e:	4602      	mov	r2, r0
 8007450:	4b23      	ldr	r3, [pc, #140]	; (80074e0 <_cb+0xc8>)
 8007452:	885b      	ldrh	r3, [r3, #2]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	0fda      	lsrs	r2, r3, #31
 8007458:	4413      	add	r3, r2
 800745a:	105b      	asrs	r3, r3, #1
 800745c:	461a      	mov	r2, r3
 800745e:	4621      	mov	r1, r4
 8007460:	481f      	ldr	r0, [pc, #124]	; (80074e0 <_cb+0xc8>)
 8007462:	f002 f803 	bl	800946c <GUI_DrawBitmap>

	  for (i = 0, xPos = LCD_GetXSize() / 2 - 2 * Step; i < 5; i++, xPos += Step)
 8007466:	2300      	movs	r3, #0
 8007468:	82bb      	strh	r3, [r7, #20]
 800746a:	f003 ff43 	bl	800b2f4 <LCD_GetXSize>
 800746e:	4603      	mov	r3, r0
 8007470:	0fda      	lsrs	r2, r3, #31
 8007472:	4413      	add	r3, r2
 8007474:	105b      	asrs	r3, r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	8a7b      	ldrh	r3, [r7, #18]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	b29b      	uxth	r3, r3
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	82fb      	strh	r3, [r7, #22]
 8007482:	e01f      	b.n	80074c4 <_cb+0xac>
	  {
	    pBm = (idx == i) ? &_bmWhiteCircle_10x10 : &_bmWhiteCircle_6x6;
 8007484:	8aba      	ldrh	r2, [r7, #20]
 8007486:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <_cb+0xcc>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d101      	bne.n	8007492 <_cb+0x7a>
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <_cb+0xd0>)
 8007490:	e000      	b.n	8007494 <_cb+0x7c>
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <_cb+0xd4>)
 8007494:	60fb      	str	r3, [r7, #12]
	    GUI_DrawBitmap(pBm, xPos - pBm->XSize / 2, 250 - pBm->YSize / 2);
 8007496:	8afb      	ldrh	r3, [r7, #22]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	8812      	ldrh	r2, [r2, #0]
 800749c:	0852      	lsrs	r2, r2, #1
 800749e:	b292      	uxth	r2, r2
 80074a0:	1a99      	subs	r1, r3, r2
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	885b      	ldrh	r3, [r3, #2]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f1c3 03fa 	rsb	r3, r3, #250	; 0xfa
 80074ae:	461a      	mov	r2, r3
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f001 ffdb 	bl	800946c <GUI_DrawBitmap>
	  for (i = 0, xPos = LCD_GetXSize() / 2 - 2 * Step; i < 5; i++, xPos += Step)
 80074b6:	8abb      	ldrh	r3, [r7, #20]
 80074b8:	3301      	adds	r3, #1
 80074ba:	82bb      	strh	r3, [r7, #20]
 80074bc:	8afa      	ldrh	r2, [r7, #22]
 80074be:	8a7b      	ldrh	r3, [r7, #18]
 80074c0:	4413      	add	r3, r2
 80074c2:	82fb      	strh	r3, [r7, #22]
 80074c4:	8abb      	ldrh	r3, [r7, #20]
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d9dc      	bls.n	8007484 <_cb+0x6c>
	  }
	  break;
 80074ca:	e002      	b.n	80074d2 <_cb+0xba>

	default:
	  WM_DefaultProc(pMsg);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f007 f9a1 	bl	800e814 <WM_DefaultProc>
	}
}
 80074d2:	bf00      	nop
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd90      	pop	{r4, r7, pc}
 80074da:	bf00      	nop
 80074dc:	00ff8080 	.word	0x00ff8080
 80074e0:	0802e2f8 	.word	0x0802e2f8
 80074e4:	200048b8 	.word	0x200048b8
 80074e8:	0802e540 	.word	0x0802e540
 80074ec:	0802e39c 	.word	0x0802e39c

080074f0 <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	GUI_Init();
 80074f8:	f001 fc34 	bl	8008d64 <GUI_Init>
	WM_MULTIBUF_Enable(1);
 80074fc:	2001      	movs	r0, #1
 80074fe:	f007 fd75 	bl	800efec <WM_MULTIBUF_Enable>
	setGuiProfile();
 8007502:	f7ff ff09 	bl	8007318 <setGuiProfile>
	GUI_SetBkColor(GUI_BLUE);
 8007506:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 800750a:	f001 fa6c 	bl	80089e6 <GUI_SetBkColor>
	GUI_Clear();
 800750e:	f001 fbcd 	bl	8008cac <GUI_Clear>
//	GUI_DrawBitmap(&bmstickman_50x50, 50, 200);
//	GUI_DrawBitmap(&bmfilebrowser, 100, 200);
//	GUI_SetColor(GUI_DARKMAGENTA);
//	GUI_SetFont(GUI_FONT_COMIC24B_ASCII);
//	GUI_DispStringAt("Hello world!", 10, 10);
	WM_SetCallback(WM_HBKWIN, _cb);
 8007512:	f007 fa8f 	bl	800ea34 <WM_GetDesktopWindow>
 8007516:	4603      	mov	r3, r0
 8007518:	4917      	ldr	r1, [pc, #92]	; (8007578 <StartDefaultTask+0x88>)
 800751a:	4618      	mov	r0, r3
 800751c:	f007 fcb8 	bl	800ee90 <WM_SetCallback>
	GUI_RECT Rect = {45, 230, 195, 280};
 8007520:	4a16      	ldr	r2, [pc, #88]	; (800757c <StartDefaultTask+0x8c>)
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800752a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t loop = 16;
 800752e:	2310      	movs	r3, #16
 8007530:	75fb      	strb	r3, [r7, #23]
	while (loop--)
 8007532:	e018      	b.n	8007566 <StartDefaultTask+0x76>
	{
		idx = (16 - loop) % 5;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	f1c3 0210 	rsb	r2, r3, #16
 800753a:	4b11      	ldr	r3, [pc, #68]	; (8007580 <StartDefaultTask+0x90>)
 800753c:	fb83 1302 	smull	r1, r3, r3, r2
 8007540:	1059      	asrs	r1, r3, #1
 8007542:	17d3      	asrs	r3, r2, #31
 8007544:	1ac9      	subs	r1, r1, r3
 8007546:	460b      	mov	r3, r1
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	1ad1      	subs	r1, r2, r3
 800754e:	460a      	mov	r2, r1
 8007550:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <StartDefaultTask+0x94>)
 8007552:	601a      	str	r2, [r3, #0]
		WM_InvalidateArea(&Rect);
 8007554:	f107 030c 	add.w	r3, r7, #12
 8007558:	4618      	mov	r0, r3
 800755a:	f007 fbb3 	bl	800ecc4 <WM_InvalidateArea>
		GUI_Delay(500);
 800755e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007562:	f002 fc95 	bl	8009e90 <GUI_Delay>
	while (loop--)
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	1e5a      	subs	r2, r3, #1
 800756a:	75fa      	strb	r2, [r7, #23]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e1      	bne.n	8007534 <StartDefaultTask+0x44>
	}
	while (1)
	{
		osDelay(10);
 8007570:	200a      	movs	r0, #10
 8007572:	f7fd fb5d 	bl	8004c30 <osDelay>
 8007576:	e7fb      	b.n	8007570 <StartDefaultTask+0x80>
 8007578:	08007419 	.word	0x08007419
 800757c:	08018304 	.word	0x08018304
 8007580:	66666667 	.word	0x66666667
 8007584:	200048b8 	.word	0x200048b8

08007588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b0a0      	sub	sp, #128	; 0x80
 800758c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800758e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007592:	2230      	movs	r2, #48	; 0x30
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f010 fe8b 	bl	80182b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800759c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075ac:	f107 030c 	add.w	r3, r7, #12
 80075b0:	2230      	movs	r2, #48	; 0x30
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f010 fe7c 	bl	80182b2 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	4a35      	ldr	r2, [pc, #212]	; (8007694 <SystemClock_Config+0x10c>)
 80075c0:	4b34      	ldr	r3, [pc, #208]	; (8007694 <SystemClock_Config+0x10c>)
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ca:	4b32      	ldr	r3, [pc, #200]	; (8007694 <SystemClock_Config+0x10c>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <SystemClock_Config+0x110>)
 80075dc:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <SystemClock_Config+0x110>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	4b2c      	ldr	r3, [pc, #176]	; (8007698 <SystemClock_Config+0x110>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075ee:	607b      	str	r3, [r7, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80075f2:	2302      	movs	r3, #2
 80075f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075f6:	2301      	movs	r3, #1
 80075f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80075fa:	2310      	movs	r3, #16
 80075fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075fe:	2302      	movs	r3, #2
 8007600:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007602:	2300      	movs	r3, #0
 8007604:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007606:	2308      	movs	r3, #8
 8007608:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800760a:	23b4      	movs	r3, #180	; 0xb4
 800760c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800760e:	2302      	movs	r3, #2
 8007610:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007612:	2304      	movs	r3, #4
 8007614:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007616:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800761a:	4618      	mov	r0, r3
 800761c:	f7fb f9f0 	bl	8002a00 <HAL_RCC_OscConfig>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007626:	f000 f9a5 	bl	8007974 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800762a:	f7fb f999 	bl	8002960 <HAL_PWREx_EnableOverDrive>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8007634:	f000 f99e 	bl	8007974 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007638:	230f      	movs	r3, #15
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800763c:	2302      	movs	r3, #2
 800763e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007640:	2300      	movs	r3, #0
 8007642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800764a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800764e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007650:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007654:	2105      	movs	r1, #5
 8007656:	4618      	mov	r0, r3
 8007658:	f7fb fc14 	bl	8002e84 <HAL_RCC_ClockConfig>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8007662:	f000 f987 	bl	8007974 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007666:	2308      	movs	r3, #8
 8007668:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800766a:	233c      	movs	r3, #60	; 0x3c
 800766c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800766e:	2302      	movs	r3, #2
 8007670:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007676:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007678:	f107 030c 	add.w	r3, r7, #12
 800767c:	4618      	mov	r0, r3
 800767e:	f7fb fdb9 	bl	80031f4 <HAL_RCCEx_PeriphCLKConfig>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8007688:	f000 f974 	bl	8007974 <Error_Handler>
  }
}
 800768c:	bf00      	nop
 800768e:	3780      	adds	r7, #128	; 0x80
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40023800 	.word	0x40023800
 8007698:	40007000 	.word	0x40007000

0800769c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80076a0:	4b1b      	ldr	r3, [pc, #108]	; (8007710 <MX_I2C3_Init+0x74>)
 80076a2:	4a1c      	ldr	r2, [pc, #112]	; (8007714 <MX_I2C3_Init+0x78>)
 80076a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <MX_I2C3_Init+0x74>)
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <MX_I2C3_Init+0x7c>)
 80076aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80076ac:	4b18      	ldr	r3, [pc, #96]	; (8007710 <MX_I2C3_Init+0x74>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 80076b2:	4b17      	ldr	r3, [pc, #92]	; (8007710 <MX_I2C3_Init+0x74>)
 80076b4:	2282      	movs	r2, #130	; 0x82
 80076b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80076b8:	4b15      	ldr	r3, [pc, #84]	; (8007710 <MX_I2C3_Init+0x74>)
 80076ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80076be:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80076c0:	4b13      	ldr	r3, [pc, #76]	; (8007710 <MX_I2C3_Init+0x74>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80076c6:	4b12      	ldr	r3, [pc, #72]	; (8007710 <MX_I2C3_Init+0x74>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <MX_I2C3_Init+0x74>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80076d2:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <MX_I2C3_Init+0x74>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80076d8:	480d      	ldr	r0, [pc, #52]	; (8007710 <MX_I2C3_Init+0x74>)
 80076da:	f7f9 fbd5 	bl	8000e88 <HAL_I2C_Init>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80076e4:	f000 f946 	bl	8007974 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80076e8:	2100      	movs	r1, #0
 80076ea:	4809      	ldr	r0, [pc, #36]	; (8007710 <MX_I2C3_Init+0x74>)
 80076ec:	f7fa fae1 	bl	8001cb2 <HAL_I2CEx_ConfigAnalogFilter>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80076f6:	f000 f93d 	bl	8007974 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80076fa:	2100      	movs	r1, #0
 80076fc:	4804      	ldr	r0, [pc, #16]	; (8007710 <MX_I2C3_Init+0x74>)
 80076fe:	f7fa fb14 	bl	8001d2a <HAL_I2CEx_ConfigDigitalFilter>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007708:	f000 f934 	bl	8007974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800770c:	bf00      	nop
 800770e:	bd80      	pop	{r7, pc}
 8007710:	200279b0 	.word	0x200279b0
 8007714:	40005c00 	.word	0x40005c00
 8007718:	000186a0 	.word	0x000186a0

0800771c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8007720:	4b17      	ldr	r3, [pc, #92]	; (8007780 <MX_SPI5_Init+0x64>)
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <MX_SPI5_Init+0x68>)
 8007724:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8007726:	4b16      	ldr	r3, [pc, #88]	; (8007780 <MX_SPI5_Init+0x64>)
 8007728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800772c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800772e:	4b14      	ldr	r3, [pc, #80]	; (8007780 <MX_SPI5_Init+0x64>)
 8007730:	2200      	movs	r2, #0
 8007732:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8007734:	4b12      	ldr	r3, [pc, #72]	; (8007780 <MX_SPI5_Init+0x64>)
 8007736:	2200      	movs	r2, #0
 8007738:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800773a:	4b11      	ldr	r3, [pc, #68]	; (8007780 <MX_SPI5_Init+0x64>)
 800773c:	2200      	movs	r2, #0
 800773e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <MX_SPI5_Init+0x64>)
 8007742:	2200      	movs	r2, #0
 8007744:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8007746:	4b0e      	ldr	r3, [pc, #56]	; (8007780 <MX_SPI5_Init+0x64>)
 8007748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800774c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <MX_SPI5_Init+0x64>)
 8007750:	2218      	movs	r2, #24
 8007752:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <MX_SPI5_Init+0x64>)
 8007756:	2200      	movs	r2, #0
 8007758:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <MX_SPI5_Init+0x64>)
 800775c:	2200      	movs	r2, #0
 800775e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007760:	4b07      	ldr	r3, [pc, #28]	; (8007780 <MX_SPI5_Init+0x64>)
 8007762:	2200      	movs	r2, #0
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <MX_SPI5_Init+0x64>)
 8007768:	220a      	movs	r2, #10
 800776a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800776c:	4804      	ldr	r0, [pc, #16]	; (8007780 <MX_SPI5_Init+0x64>)
 800776e:	f7fb ff64 	bl	800363a <HAL_SPI_Init>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8007778:	f000 f8fc 	bl	8007974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800777c:	bf00      	nop
 800777e:	bd80      	pop	{r7, pc}
 8007780:	20027a04 	.word	0x20027a04
 8007784:	40015000 	.word	0x40015000

08007788 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800778e:	4b20      	ldr	r3, [pc, #128]	; (8007810 <MX_FMC_Init+0x88>)
 8007790:	4a20      	ldr	r2, [pc, #128]	; (8007814 <MX_FMC_Init+0x8c>)
 8007792:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8007794:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <MX_FMC_Init+0x88>)
 8007796:	2201      	movs	r2, #1
 8007798:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <MX_FMC_Init+0x88>)
 800779c:	2200      	movs	r2, #0
 800779e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80077a0:	4b1b      	ldr	r3, [pc, #108]	; (8007810 <MX_FMC_Init+0x88>)
 80077a2:	2204      	movs	r2, #4
 80077a4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <MX_FMC_Init+0x88>)
 80077a8:	2210      	movs	r2, #16
 80077aa:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80077ac:	4b18      	ldr	r3, [pc, #96]	; (8007810 <MX_FMC_Init+0x88>)
 80077ae:	2240      	movs	r2, #64	; 0x40
 80077b0:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80077b2:	4b17      	ldr	r3, [pc, #92]	; (8007810 <MX_FMC_Init+0x88>)
 80077b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80077b8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <MX_FMC_Init+0x88>)
 80077bc:	2200      	movs	r2, #0
 80077be:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80077c0:	4b13      	ldr	r3, [pc, #76]	; (8007810 <MX_FMC_Init+0x88>)
 80077c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077c6:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80077c8:	4b11      	ldr	r3, [pc, #68]	; (8007810 <MX_FMC_Init+0x88>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80077ce:	4b10      	ldr	r3, [pc, #64]	; (8007810 <MX_FMC_Init+0x88>)
 80077d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077d4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80077d6:	2302      	movs	r3, #2
 80077d8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80077da:	2307      	movs	r3, #7
 80077dc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80077de:	2304      	movs	r3, #4
 80077e0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80077e2:	2307      	movs	r3, #7
 80077e4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80077e6:	2303      	movs	r3, #3
 80077e8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80077ea:	2302      	movs	r3, #2
 80077ec:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80077ee:	2302      	movs	r3, #2
 80077f0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80077f2:	1d3b      	adds	r3, r7, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4806      	ldr	r0, [pc, #24]	; (8007810 <MX_FMC_Init+0x88>)
 80077f8:	f7fb fea0 	bl	800353c <HAL_SDRAM_Init>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8007802:	f000 f8b7 	bl	8007974 <Error_Handler>
  }

}
 8007806:	bf00      	nop
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20027a5c 	.word	0x20027a5c
 8007814:	a0000140 	.word	0xa0000140

08007818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	; 0x30
 800781c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800781e:	f107 031c 	add.w	r3, r7, #28
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800782e:	2300      	movs	r3, #0
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	4a4c      	ldr	r2, [pc, #304]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007834:	4b4b      	ldr	r3, [pc, #300]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	f043 0320 	orr.w	r3, r3, #32
 800783c:	6313      	str	r3, [r2, #48]	; 0x30
 800783e:	4b49      	ldr	r3, [pc, #292]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	61bb      	str	r3, [r7, #24]
 8007848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800784a:	2300      	movs	r3, #0
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	4a45      	ldr	r2, [pc, #276]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007850:	4b44      	ldr	r3, [pc, #272]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	f043 0304 	orr.w	r3, r3, #4
 8007858:	6313      	str	r3, [r2, #48]	; 0x30
 800785a:	4b42      	ldr	r3, [pc, #264]	; (8007964 <MX_GPIO_Init+0x14c>)
 800785c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	4a3e      	ldr	r2, [pc, #248]	; (8007964 <MX_GPIO_Init+0x14c>)
 800786c:	4b3d      	ldr	r3, [pc, #244]	; (8007964 <MX_GPIO_Init+0x14c>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	6313      	str	r3, [r2, #48]	; 0x30
 8007876:	4b3b      	ldr	r3, [pc, #236]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	4a37      	ldr	r2, [pc, #220]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <MX_GPIO_Init+0x14c>)
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	6313      	str	r3, [r2, #48]	; 0x30
 8007892:	4b34      	ldr	r3, [pc, #208]	; (8007964 <MX_GPIO_Init+0x14c>)
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800789e:	2300      	movs	r3, #0
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	4a30      	ldr	r2, [pc, #192]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078a4:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ac:	6313      	str	r3, [r2, #48]	; 0x30
 80078ae:	4b2d      	ldr	r3, [pc, #180]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80078ba:	2300      	movs	r3, #0
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	4a29      	ldr	r2, [pc, #164]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078c0:	4b28      	ldr	r3, [pc, #160]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	f043 0310 	orr.w	r3, r3, #16
 80078c8:	6313      	str	r3, [r2, #48]	; 0x30
 80078ca:	4b26      	ldr	r3, [pc, #152]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	f003 0310 	and.w	r3, r3, #16
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80078d6:	2300      	movs	r3, #0
 80078d8:	603b      	str	r3, [r7, #0]
 80078da:	4a22      	ldr	r2, [pc, #136]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078dc:	4b21      	ldr	r3, [pc, #132]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	f043 0308 	orr.w	r3, r3, #8
 80078e4:	6313      	str	r3, [r2, #48]	; 0x30
 80078e6:	4b1f      	ldr	r3, [pc, #124]	; (8007964 <MX_GPIO_Init+0x14c>)
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80078f2:	2201      	movs	r2, #1
 80078f4:	2104      	movs	r1, #4
 80078f6:	481c      	ldr	r0, [pc, #112]	; (8007968 <MX_GPIO_Init+0x150>)
 80078f8:	f7f9 faac 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 80078fc:	2200      	movs	r2, #0
 80078fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007902:	481a      	ldr	r0, [pc, #104]	; (800796c <MX_GPIO_Init+0x154>)
 8007904:	f7f9 faa6 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 8007908:	2304      	movs	r3, #4
 800790a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800790c:	2301      	movs	r3, #1
 800790e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007910:	2300      	movs	r3, #0
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007914:	2302      	movs	r3, #2
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8007918:	f107 031c 	add.w	r3, r7, #28
 800791c:	4619      	mov	r1, r3
 800791e:	4812      	ldr	r0, [pc, #72]	; (8007968 <MX_GPIO_Init+0x150>)
 8007920:	f7f9 f8ee 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 8007924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800792a:	2301      	movs	r3, #1
 800792c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792e:	2300      	movs	r3, #0
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007932:	2302      	movs	r3, #2
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 8007936:	f107 031c 	add.w	r3, r7, #28
 800793a:	4619      	mov	r1, r3
 800793c:	480b      	ldr	r0, [pc, #44]	; (800796c <MX_GPIO_Init+0x154>)
 800793e:	f7f9 f8df 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8007942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007948:	2300      	movs	r3, #0
 800794a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794c:	2300      	movs	r3, #0
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8007950:	f107 031c 	add.w	r3, r7, #28
 8007954:	4619      	mov	r1, r3
 8007956:	4806      	ldr	r0, [pc, #24]	; (8007970 <MX_GPIO_Init+0x158>)
 8007958:	f7f9 f8d2 	bl	8000b00 <HAL_GPIO_Init>

}
 800795c:	bf00      	nop
 800795e:	3730      	adds	r7, #48	; 0x30
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40023800 	.word	0x40023800
 8007968:	40020800 	.word	0x40020800
 800796c:	40020c00 	.word	0x40020c00
 8007970:	40020000 	.word	0x40020000

08007974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8007990:	4b2f      	ldr	r3, [pc, #188]	; (8007a50 <SDRAM_init+0xcc>)
 8007992:	2201      	movs	r2, #1
 8007994:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8007996:	4b2e      	ldr	r3, [pc, #184]	; (8007a50 <SDRAM_init+0xcc>)
 8007998:	2208      	movs	r2, #8
 800799a:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800799c:	4b2c      	ldr	r3, [pc, #176]	; (8007a50 <SDRAM_init+0xcc>)
 800799e:	2201      	movs	r2, #1
 80079a0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80079a2:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <SDRAM_init+0xcc>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80079a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079ac:	4928      	ldr	r1, [pc, #160]	; (8007a50 <SDRAM_init+0xcc>)
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fb fdf8 	bl	80035a4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80079b4:	200a      	movs	r0, #10
 80079b6:	f7f8 fe1d 	bl	80005f4 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80079ba:	4b25      	ldr	r3, [pc, #148]	; (8007a50 <SDRAM_init+0xcc>)
 80079bc:	2202      	movs	r2, #2
 80079be:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80079c0:	4b23      	ldr	r3, [pc, #140]	; (8007a50 <SDRAM_init+0xcc>)
 80079c2:	2208      	movs	r2, #8
 80079c4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80079c6:	4b22      	ldr	r3, [pc, #136]	; (8007a50 <SDRAM_init+0xcc>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80079cc:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <SDRAM_init+0xcc>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80079d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079d6:	491e      	ldr	r1, [pc, #120]	; (8007a50 <SDRAM_init+0xcc>)
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7fb fde3 	bl	80035a4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80079de:	200a      	movs	r0, #10
 80079e0:	f7f8 fe08 	bl	80005f4 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80079e4:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <SDRAM_init+0xcc>)
 80079e6:	2203      	movs	r2, #3
 80079e8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80079ea:	4b19      	ldr	r3, [pc, #100]	; (8007a50 <SDRAM_init+0xcc>)
 80079ec:	2208      	movs	r2, #8
 80079ee:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 80079f0:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <SDRAM_init+0xcc>)
 80079f2:	2204      	movs	r2, #4
 80079f4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <SDRAM_init+0xcc>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80079fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a00:	4913      	ldr	r1, [pc, #76]	; (8007a50 <SDRAM_init+0xcc>)
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fb fdce 	bl	80035a4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8007a08:	200a      	movs	r0, #10
 8007a0a:	f7f8 fdf3 	bl	80005f4 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8007a0e:	f240 2331 	movw	r3, #561	; 0x231
 8007a12:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8007a14:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <SDRAM_init+0xcc>)
 8007a16:	2204      	movs	r2, #4
 8007a18:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <SDRAM_init+0xcc>)
 8007a1c:	2208      	movs	r2, #8
 8007a1e:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <SDRAM_init+0xcc>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <SDRAM_init+0xcc>)
 8007a2a:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8007a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a30:	4907      	ldr	r1, [pc, #28]	; (8007a50 <SDRAM_init+0xcc>)
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fb fdb6 	bl	80035a4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8007a38:	200a      	movs	r0, #10
 8007a3a:	f7f8 fddb 	bl	80005f4 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8007a3e:	f240 516a 	movw	r1, #1386	; 0x56a
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fb fdd9 	bl	80035fa <HAL_SDRAM_ProgramRefreshRate>
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20027a90 	.word	0x20027a90

08007a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <HAL_MspInit+0x54>)
 8007a60:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <HAL_MspInit+0x54>)
 8007a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a68:	6453      	str	r3, [r2, #68]	; 0x44
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <HAL_MspInit+0x54>)
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a72:	607b      	str	r3, [r7, #4]
 8007a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a76:	2300      	movs	r3, #0
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4a0b      	ldr	r2, [pc, #44]	; (8007aa8 <HAL_MspInit+0x54>)
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <HAL_MspInit+0x54>)
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a84:	6413      	str	r3, [r2, #64]	; 0x40
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <HAL_MspInit+0x54>)
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007a92:	2200      	movs	r2, #0
 8007a94:	210f      	movs	r1, #15
 8007a96:	f06f 0001 	mvn.w	r0, #1
 8007a9a:	f7f8 fea2 	bl	80007e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40023800 	.word	0x40023800

08007aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	; 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	605a      	str	r2, [r3, #4]
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	60da      	str	r2, [r3, #12]
 8007ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a29      	ldr	r2, [pc, #164]	; (8007b70 <HAL_I2C_MspInit+0xc4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d14b      	bne.n	8007b66 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007ad4:	4b27      	ldr	r3, [pc, #156]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	f043 0304 	orr.w	r3, r3, #4
 8007adc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ade:	4b25      	ldr	r3, [pc, #148]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	613b      	str	r3, [r7, #16]
 8007ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
 8007aee:	4a21      	ldr	r2, [pc, #132]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007af0:	4b20      	ldr	r3, [pc, #128]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	f043 0301 	orr.w	r3, r3, #1
 8007af8:	6313      	str	r3, [r2, #48]	; 0x30
 8007afa:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b0c:	2312      	movs	r3, #18
 8007b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b10:	2301      	movs	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b14:	2303      	movs	r3, #3
 8007b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007b18:	2304      	movs	r3, #4
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b1c:	f107 0314 	add.w	r3, r7, #20
 8007b20:	4619      	mov	r1, r3
 8007b22:	4815      	ldr	r0, [pc, #84]	; (8007b78 <HAL_I2C_MspInit+0xcc>)
 8007b24:	f7f8 ffec 	bl	8000b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b2e:	2312      	movs	r3, #18
 8007b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b32:	2301      	movs	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b36:	2303      	movs	r3, #3
 8007b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	4619      	mov	r1, r3
 8007b44:	480d      	ldr	r0, [pc, #52]	; (8007b7c <HAL_I2C_MspInit+0xd0>)
 8007b46:	f7f8 ffdb 	bl	8000b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
 8007b4e:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007b50:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b58:	6413      	str	r3, [r2, #64]	; 0x40
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <HAL_I2C_MspInit+0xc8>)
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007b66:	bf00      	nop
 8007b68:	3728      	adds	r7, #40	; 0x28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	40005c00 	.word	0x40005c00
 8007b74:	40023800 	.word	0x40023800
 8007b78:	40020800 	.word	0x40020800
 8007b7c:	40020000 	.word	0x40020000

08007b80 <HAL_FMC_MspInit>:
}


static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8007b86:	4b3c      	ldr	r3, [pc, #240]	; (8007c78 <HAL_FMC_MspInit+0xf8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d16f      	bne.n	8007c6e <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8007b8e:	4b3a      	ldr	r3, [pc, #232]	; (8007c78 <HAL_FMC_MspInit+0xf8>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007b94:	2300      	movs	r3, #0
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	4a38      	ldr	r2, [pc, #224]	; (8007c7c <HAL_FMC_MspInit+0xfc>)
 8007b9a:	4b38      	ldr	r3, [pc, #224]	; (8007c7c <HAL_FMC_MspInit+0xfc>)
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	6393      	str	r3, [r2, #56]	; 0x38
 8007ba4:	4b35      	ldr	r3, [pc, #212]	; (8007c7c <HAL_FMC_MspInit+0xfc>)
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	603b      	str	r3, [r7, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007bb0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007bb4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007bc6:	1d3b      	adds	r3, r7, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	482d      	ldr	r0, [pc, #180]	; (8007c80 <HAL_FMC_MspInit+0x100>)
 8007bcc:	f7f8 ff98 	bl	8000b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007be0:	230c      	movs	r3, #12
 8007be2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007be4:	1d3b      	adds	r3, r7, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	4826      	ldr	r0, [pc, #152]	; (8007c84 <HAL_FMC_MspInit+0x104>)
 8007bea:	f7f8 ff89 	bl	8000b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8007bee:	f248 1333 	movw	r3, #33075	; 0x8133
 8007bf2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c00:	230c      	movs	r3, #12
 8007c02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	481f      	ldr	r0, [pc, #124]	; (8007c88 <HAL_FMC_MspInit+0x108>)
 8007c0a:	f7f8 ff79 	bl	8000b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8007c0e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007c12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c14:	2302      	movs	r3, #2
 8007c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c20:	230c      	movs	r3, #12
 8007c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c24:	1d3b      	adds	r3, r7, #4
 8007c26:	4619      	mov	r1, r3
 8007c28:	4818      	ldr	r0, [pc, #96]	; (8007c8c <HAL_FMC_MspInit+0x10c>)
 8007c2a:	f7f8 ff69 	bl	8000b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8007c2e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007c32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c34:	2302      	movs	r3, #2
 8007c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c40:	230c      	movs	r3, #12
 8007c42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c44:	1d3b      	adds	r3, r7, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4811      	ldr	r0, [pc, #68]	; (8007c90 <HAL_FMC_MspInit+0x110>)
 8007c4a:	f7f8 ff59 	bl	8000b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007c4e:	2360      	movs	r3, #96	; 0x60
 8007c50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c52:	2302      	movs	r3, #2
 8007c54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007c5e:	230c      	movs	r3, #12
 8007c60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c62:	1d3b      	adds	r3, r7, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	480b      	ldr	r0, [pc, #44]	; (8007c94 <HAL_FMC_MspInit+0x114>)
 8007c68:	f7f8 ff4a 	bl	8000b00 <HAL_GPIO_Init>
 8007c6c:	e000      	b.n	8007c70 <HAL_FMC_MspInit+0xf0>
    return;
 8007c6e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	200048bc 	.word	0x200048bc
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	40021400 	.word	0x40021400
 8007c84:	40020800 	.word	0x40020800
 8007c88:	40021800 	.word	0x40021800
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	40020c00 	.word	0x40020c00
 8007c94:	40020400 	.word	0x40020400

08007c98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007ca0:	f7ff ff6e 	bl	8007b80 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cbe:	e7fe      	b.n	8007cbe <HardFault_Handler+0x4>

08007cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007cc4:	e7fe      	b.n	8007cc4 <MemManage_Handler+0x4>

08007cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007cca:	e7fe      	b.n	8007cca <BusFault_Handler+0x4>

08007ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007cd0:	e7fe      	b.n	8007cd0 <UsageFault_Handler+0x4>

08007cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ce4:	f7f8 fc66 	bl	80005b4 <HAL_IncTick>
  osSystickHandler();
 8007ce8:	f7fd f866 	bl	8004db8 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <LTDC_IRQHandler>:
  * @brief  This function handles LTDC global interrupt request.
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  HAL_LTDC_IRQHandler(&hltdc);
 8007cf4:	4802      	ldr	r0, [pc, #8]	; (8007d00 <LTDC_IRQHandler+0x10>)
 8007cf6:	f7fa f943 	bl	8001f80 <HAL_LTDC_IRQHandler>
}
 8007cfa:	bf00      	nop
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200278c4 	.word	0x200278c4

08007d04 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8007d08:	4802      	ldr	r0, [pc, #8]	; (8007d14 <DMA2D_IRQHandler+0x10>)
 8007d0a:	f7f8 fde9 	bl	80008e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007d0e:	bf00      	nop
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	2002796c 	.word	0x2002796c

08007d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d1c:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <SystemInit+0x60>)
 8007d1e:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <SystemInit+0x60>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007d2c:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <SystemInit+0x64>)
 8007d2e:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <SystemInit+0x64>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f043 0301 	orr.w	r3, r3, #1
 8007d36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d38:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <SystemInit+0x64>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007d3e:	4a0f      	ldr	r2, [pc, #60]	; (8007d7c <SystemInit+0x64>)
 8007d40:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <SystemInit+0x64>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d4e:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <SystemInit+0x64>)
 8007d50:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <SystemInit+0x68>)
 8007d52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d54:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <SystemInit+0x64>)
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <SystemInit+0x64>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <SystemInit+0x64>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <SystemInit+0x60>)
 8007d68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d6c:	609a      	str	r2, [r3, #8]
#endif
}
 8007d6e:	bf00      	nop
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	e000ed00 	.word	0xe000ed00
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	24003010 	.word	0x24003010

08007d84 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 8007d92:	2302      	movs	r3, #2
 8007d94:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007d96:	1d3a      	adds	r2, r7, #4
 8007d98:	2364      	movs	r3, #100	; 0x64
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	2182      	movs	r1, #130	; 0x82
 8007da0:	480b      	ldr	r0, [pc, #44]	; (8007dd0 <touchReset+0x4c>)
 8007da2:	f7f9 f951 	bl	8001048 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007da6:	2014      	movs	r0, #20
 8007da8:	f7f8 fc24 	bl	80005f4 <HAL_Delay>
	sendBuf[1] = 0x00;
 8007dac:	2300      	movs	r3, #0
 8007dae:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007db0:	1d3a      	adds	r2, r7, #4
 8007db2:	2364      	movs	r3, #100	; 0x64
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	2302      	movs	r3, #2
 8007db8:	2182      	movs	r1, #130	; 0x82
 8007dba:	4805      	ldr	r0, [pc, #20]	; (8007dd0 <touchReset+0x4c>)
 8007dbc:	f7f9 f944 	bl	8001048 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007dc0:	2014      	movs	r0, #20
 8007dc2:	f7f8 fc17 	bl	80005f4 <HAL_Delay>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	200279b0 	.word	0x200279b0

08007dd4 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	4603      	mov	r3, r0
 8007ddc:	460a      	mov	r2, r1
 8007dde:	71fb      	strb	r3, [r7, #7]
 8007de0:	4613      	mov	r3, r2
 8007de2:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8007de8:	2300      	movs	r3, #0
 8007dea:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8007dec:	2304      	movs	r3, #4
 8007dee:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007df0:	f107 020c 	add.w	r2, r7, #12
 8007df4:	2364      	movs	r3, #100	; 0x64
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	2301      	movs	r3, #1
 8007dfa:	2182      	movs	r1, #130	; 0x82
 8007dfc:	4817      	ldr	r0, [pc, #92]	; (8007e5c <fnctCmd+0x88>)
 8007dfe:	f7f9 f923 	bl	8001048 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007e02:	f107 020c 	add.w	r2, r7, #12
 8007e06:	2364      	movs	r3, #100	; 0x64
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	2182      	movs	r1, #130	; 0x82
 8007e0e:	4813      	ldr	r0, [pc, #76]	; (8007e5c <fnctCmd+0x88>)
 8007e10:	f7f9 fa28 	bl	8001264 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8007e14:	7b3b      	ldrb	r3, [r7, #12]
 8007e16:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8007e18:	79bb      	ldrb	r3, [r7, #6]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8007e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e22:	43db      	mvns	r3, r3
 8007e24:	b25a      	sxtb	r2, r3
 8007e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	73fb      	strb	r3, [r7, #15]
 8007e30:	e003      	b.n	8007e3a <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8007e32:	7bfa      	ldrb	r2, [r7, #15]
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8007e3a:	2304      	movs	r3, #4
 8007e3c:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007e42:	f107 020c 	add.w	r2, r7, #12
 8007e46:	2364      	movs	r3, #100	; 0x64
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	2182      	movs	r1, #130	; 0x82
 8007e4e:	4803      	ldr	r0, [pc, #12]	; (8007e5c <fnctCmd+0x88>)
 8007e50:	f7f9 f8fa 	bl	8001048 <HAL_I2C_Master_Transmit>
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200279b0 	.word	0x200279b0

08007e60 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	4603      	mov	r3, r0
 8007e68:	460a      	mov	r2, r1
 8007e6a:	71fb      	strb	r3, [r7, #7]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8007e74:	2300      	movs	r3, #0
 8007e76:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 8007e78:	2317      	movs	r3, #23
 8007e7a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007e7c:	f107 020c 	add.w	r2, r7, #12
 8007e80:	2364      	movs	r3, #100	; 0x64
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	2301      	movs	r3, #1
 8007e86:	2182      	movs	r1, #130	; 0x82
 8007e88:	4817      	ldr	r0, [pc, #92]	; (8007ee8 <ioAFConfig+0x88>)
 8007e8a:	f7f9 f8dd 	bl	8001048 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007e8e:	f107 020c 	add.w	r2, r7, #12
 8007e92:	2364      	movs	r3, #100	; 0x64
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	2301      	movs	r3, #1
 8007e98:	2182      	movs	r1, #130	; 0x82
 8007e9a:	4813      	ldr	r0, [pc, #76]	; (8007ee8 <ioAFConfig+0x88>)
 8007e9c:	f7f9 f9e2 	bl	8001264 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8007ea0:	7b3b      	ldrb	r3, [r7, #12]
 8007ea2:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8007ea4:	79bb      	ldrb	r3, [r7, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d004      	beq.n	8007eb4 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 8007eaa:	7bfa      	ldrb	r2, [r7, #15]
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	73fb      	strb	r3, [r7, #15]
 8007eb2:	e008      	b.n	8007ec6 <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 8007eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	b25a      	sxtb	r2, r3
 8007ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 8007ec6:	2317      	movs	r3, #23
 8007ec8:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007ece:	f107 020c 	add.w	r2, r7, #12
 8007ed2:	2364      	movs	r3, #100	; 0x64
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	2182      	movs	r1, #130	; 0x82
 8007eda:	4803      	ldr	r0, [pc, #12]	; (8007ee8 <ioAFConfig+0x88>)
 8007edc:	f7f9 f8b4 	bl	8001048 <HAL_I2C_Master_Transmit>
}
 8007ee0:	bf00      	nop
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	200279b0 	.word	0x200279b0

08007eec <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af02      	add	r7, sp, #8
	touchReset();
 8007ef2:	f7ff ff47 	bl	8007d84 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f7ff ff6b 	bl	8007dd4 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8007efe:	2101      	movs	r1, #1
 8007f00:	2002      	movs	r0, #2
 8007f02:	f7ff ff67 	bl	8007dd4 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 8007f06:	4b41      	ldr	r3, [pc, #260]	; (800800c <TP_Config+0x120>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007f0c:	1d3a      	adds	r2, r7, #4
 8007f0e:	2364      	movs	r3, #100	; 0x64
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	2302      	movs	r3, #2
 8007f14:	2182      	movs	r1, #130	; 0x82
 8007f16:	483e      	ldr	r0, [pc, #248]	; (8008010 <TP_Config+0x124>)
 8007f18:	f7f9 f896 	bl	8001048 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007f1c:	2014      	movs	r0, #20
 8007f1e:	f7f8 fb69 	bl	80005f4 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 8007f22:	2321      	movs	r3, #33	; 0x21
 8007f24:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007f26:	2301      	movs	r3, #1
 8007f28:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007f2a:	1d3a      	adds	r2, r7, #4
 8007f2c:	2364      	movs	r3, #100	; 0x64
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	2302      	movs	r3, #2
 8007f32:	2182      	movs	r1, #130	; 0x82
 8007f34:	4836      	ldr	r0, [pc, #216]	; (8008010 <TP_Config+0x124>)
 8007f36:	f7f9 f887 	bl	8001048 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	201e      	movs	r0, #30
 8007f3e:	f7ff ff8f 	bl	8007e60 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8007f42:	2341      	movs	r3, #65	; 0x41
 8007f44:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 8007f46:	239a      	movs	r3, #154	; 0x9a
 8007f48:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007f4a:	1d3a      	adds	r2, r7, #4
 8007f4c:	2364      	movs	r3, #100	; 0x64
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2182      	movs	r1, #130	; 0x82
 8007f54:	482e      	ldr	r0, [pc, #184]	; (8008010 <TP_Config+0x124>)
 8007f56:	f7f9 f877 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 8007f5a:	234a      	movs	r3, #74	; 0x4a
 8007f5c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007f62:	1d3a      	adds	r2, r7, #4
 8007f64:	2364      	movs	r3, #100	; 0x64
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2302      	movs	r3, #2
 8007f6a:	2182      	movs	r1, #130	; 0x82
 8007f6c:	4828      	ldr	r0, [pc, #160]	; (8008010 <TP_Config+0x124>)
 8007f6e:	f7f9 f86b 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8007f72:	234b      	movs	r3, #75	; 0x4b
 8007f74:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007f76:	2301      	movs	r3, #1
 8007f78:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007f7a:	1d3a      	adds	r2, r7, #4
 8007f7c:	2364      	movs	r3, #100	; 0x64
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	2302      	movs	r3, #2
 8007f82:	2182      	movs	r1, #130	; 0x82
 8007f84:	4822      	ldr	r0, [pc, #136]	; (8008010 <TP_Config+0x124>)
 8007f86:	f7f9 f85f 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8007f8a:	234b      	movs	r3, #75	; 0x4b
 8007f8c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007f92:	1d3a      	adds	r2, r7, #4
 8007f94:	2364      	movs	r3, #100	; 0x64
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2182      	movs	r1, #130	; 0x82
 8007f9c:	481c      	ldr	r0, [pc, #112]	; (8008010 <TP_Config+0x124>)
 8007f9e:	f7f9 f853 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 8007fa2:	2356      	movs	r3, #86	; 0x56
 8007fa4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007faa:	1d3a      	adds	r2, r7, #4
 8007fac:	2364      	movs	r3, #100	; 0x64
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	2182      	movs	r1, #130	; 0x82
 8007fb4:	4816      	ldr	r0, [pc, #88]	; (8008010 <TP_Config+0x124>)
 8007fb6:	f7f9 f847 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8007fba:	2358      	movs	r3, #88	; 0x58
 8007fbc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007fc2:	1d3a      	adds	r2, r7, #4
 8007fc4:	2364      	movs	r3, #100	; 0x64
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	2302      	movs	r3, #2
 8007fca:	2182      	movs	r1, #130	; 0x82
 8007fcc:	4810      	ldr	r0, [pc, #64]	; (8008010 <TP_Config+0x124>)
 8007fce:	f7f9 f83b 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 8007fd2:	2340      	movs	r3, #64	; 0x40
 8007fd4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007fda:	1d3a      	adds	r2, r7, #4
 8007fdc:	2364      	movs	r3, #100	; 0x64
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	2182      	movs	r1, #130	; 0x82
 8007fe4:	480a      	ldr	r0, [pc, #40]	; (8008010 <TP_Config+0x124>)
 8007fe6:	f7f9 f82f 	bl	8001048 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8007fea:	230b      	movs	r3, #11
 8007fec:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8007fee:	23ff      	movs	r3, #255	; 0xff
 8007ff0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007ff2:	1d3a      	adds	r2, r7, #4
 8007ff4:	2364      	movs	r3, #100	; 0x64
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	2182      	movs	r1, #130	; 0x82
 8007ffc:	4804      	ldr	r0, [pc, #16]	; (8008010 <TP_Config+0x124>)
 8007ffe:	f7f9 f823 	bl	8001048 <HAL_I2C_Master_Transmit>

}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	0801830c 	.word	0x0801830c
 8008010:	200279b0 	.word	0x200279b0

08008014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800804c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008018:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800801a:	e003      	b.n	8008024 <LoopCopyDataInit>

0800801c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800801c:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800801e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008020:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008022:	3104      	adds	r1, #4

08008024 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008024:	480b      	ldr	r0, [pc, #44]	; (8008054 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008026:	4b0c      	ldr	r3, [pc, #48]	; (8008058 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008028:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800802a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800802c:	d3f6      	bcc.n	800801c <CopyDataInit>
  ldr  r2, =_sbss
 800802e:	4a0b      	ldr	r2, [pc, #44]	; (800805c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008030:	e002      	b.n	8008038 <LoopFillZerobss>

08008032 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008032:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008034:	f842 3b04 	str.w	r3, [r2], #4

08008038 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008038:	4b09      	ldr	r3, [pc, #36]	; (8008060 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800803a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800803c:	d3f9      	bcc.n	8008032 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800803e:	f7ff fe6b 	bl	8007d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008042:	f010 f8ed 	bl	8018220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008046:	f7ff f917 	bl	8007278 <main>
  bx  lr    
 800804a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800804c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8008050:	0802e658 	.word	0x0802e658
  ldr  r0, =_sdata
 8008054:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008058:	200008d8 	.word	0x200008d8
  ldr  r2, =_sbss
 800805c:	200008d8 	.word	0x200008d8
  ldr  r3, = _ebss
 8008060:	20027c58 	.word	0x20027c58

08008064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008064:	e7fe      	b.n	8008064 <ADC_IRQHandler>

08008066 <_Color2Index_M8888I>:
 8008066:	43c3      	mvns	r3, r0
 8008068:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800806c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008070:	431a      	orrs	r2, r3
 8008072:	0403      	lsls	r3, r0, #16
 8008074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008078:	4313      	orrs	r3, r2
 800807a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800807e:	4318      	orrs	r0, r3
 8008080:	4770      	bx	lr

08008082 <_GetIndexMask_M8888I>:
 8008082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008086:	4770      	bx	lr

08008088 <_Color2IndexBulk_M8888I>:
 8008088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800808a:	f8df e044 	ldr.w	lr, [pc, #68]	; 80080d0 <_Color2IndexBulk_M8888I+0x48>
 800808e:	f8de e000 	ldr.w	lr, [lr]
 8008092:	4606      	mov	r6, r0
 8008094:	460d      	mov	r5, r1
 8008096:	4614      	mov	r4, r2
 8008098:	461f      	mov	r7, r3
 800809a:	f1be 0f00 	cmp.w	lr, #0
 800809e:	d003      	beq.n	80080a8 <_Color2IndexBulk_M8888I+0x20>
 80080a0:	46f4      	mov	ip, lr
 80080a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80080a6:	4760      	bx	ip
 80080a8:	f856 3b04 	ldr.w	r3, [r6], #4
 80080ac:	43da      	mvns	r2, r3
 80080ae:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80080b2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80080b6:	4311      	orrs	r1, r2
 80080b8:	041a      	lsls	r2, r3, #16
 80080ba:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80080be:	430a      	orrs	r2, r1
 80080c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080c4:	4313      	orrs	r3, r2
 80080c6:	3c01      	subs	r4, #1
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	443d      	add	r5, r7
 80080cc:	d1ec      	bne.n	80080a8 <_Color2IndexBulk_M8888I+0x20>
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	200008f4 	.word	0x200008f4

080080d4 <_Index2ColorBulk_M8888I>:
 80080d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d6:	f8df e044 	ldr.w	lr, [pc, #68]	; 800811c <_Index2ColorBulk_M8888I+0x48>
 80080da:	f8de e004 	ldr.w	lr, [lr, #4]
 80080de:	4605      	mov	r5, r0
 80080e0:	460e      	mov	r6, r1
 80080e2:	4614      	mov	r4, r2
 80080e4:	461f      	mov	r7, r3
 80080e6:	f1be 0f00 	cmp.w	lr, #0
 80080ea:	d003      	beq.n	80080f4 <_Index2ColorBulk_M8888I+0x20>
 80080ec:	46f4      	mov	ip, lr
 80080ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80080f2:	4760      	bx	ip
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	43da      	mvns	r2, r3
 80080f8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80080fc:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008100:	4311      	orrs	r1, r2
 8008102:	041a      	lsls	r2, r3, #16
 8008104:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8008108:	430a      	orrs	r2, r1
 800810a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800810e:	4313      	orrs	r3, r2
 8008110:	3c01      	subs	r4, #1
 8008112:	f846 3b04 	str.w	r3, [r6], #4
 8008116:	443d      	add	r5, r7
 8008118:	d1ec      	bne.n	80080f4 <_Index2ColorBulk_M8888I+0x20>
 800811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811c:	200008f4 	.word	0x200008f4

08008120 <LCD_Index2Color_M8888I>:
 8008120:	43c3      	mvns	r3, r0
 8008122:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8008126:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800812a:	431a      	orrs	r2, r3
 800812c:	0403      	lsls	r3, r0, #16
 800812e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008132:	4313      	orrs	r3, r2
 8008134:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8008138:	4318      	orrs	r0, r3
 800813a:	4770      	bx	lr

0800813c <_PushFreeBlock>:
 800813c:	4b07      	ldr	r3, [pc, #28]	; (800815c <_PushFreeBlock+0x20>)
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	3201      	adds	r2, #1
 8008142:	b510      	push	{r4, lr}
 8008144:	605a      	str	r2, [r3, #4]
 8008146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008148:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800814a:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800814e:	604c      	str	r4, [r1, #4]
 8008150:	2100      	movs	r1, #0
 8008152:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8008156:	6258      	str	r0, [r3, #36]	; 0x24
 8008158:	bd10      	pop	{r4, pc}
 800815a:	bf00      	nop
 800815c:	20027aa0 	.word	0x20027aa0

08008160 <_RemoveFreeBlock>:
 8008160:	b510      	push	{r4, lr}
 8008162:	490e      	ldr	r1, [pc, #56]	; (800819c <_RemoveFreeBlock+0x3c>)
 8008164:	6844      	ldr	r4, [r0, #4]
 8008166:	230f      	movs	r3, #15
 8008168:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800816c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800816e:	4294      	cmp	r4, r2
 8008170:	4a0a      	ldr	r2, [pc, #40]	; (800819c <_RemoveFreeBlock+0x3c>)
 8008172:	d203      	bcs.n	800817c <_RemoveFreeBlock+0x1c>
 8008174:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8008178:	d2f6      	bcs.n	8008168 <_RemoveFreeBlock+0x8>
 800817a:	bd10      	pop	{r4, pc}
 800817c:	2b0f      	cmp	r3, #15
 800817e:	d80c      	bhi.n	800819a <_RemoveFreeBlock+0x3a>
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	1b09      	subs	r1, r1, r4
 8008184:	6011      	str	r1, [r2, #0]
 8008186:	6881      	ldr	r1, [r0, #8]
 8008188:	68c0      	ldr	r0, [r0, #12]
 800818a:	b101      	cbz	r1, 800818e <_RemoveFreeBlock+0x2e>
 800818c:	6048      	str	r0, [r1, #4]
 800818e:	b108      	cbz	r0, 8008194 <_RemoveFreeBlock+0x34>
 8008190:	6001      	str	r1, [r0, #0]
 8008192:	bd10      	pop	{r4, pc}
 8008194:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008198:	6459      	str	r1, [r3, #68]	; 0x44
 800819a:	bd10      	pop	{r4, pc}
 800819c:	20027aa0 	.word	0x20027aa0

080081a0 <_AddFreeMemory>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	4e27      	ldr	r6, [pc, #156]	; (8008240 <_AddFreeMemory+0xa0>)
 80081a4:	68f3      	ldr	r3, [r6, #12]
 80081a6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80081a8:	3b01      	subs	r3, #1
 80081aa:	4605      	mov	r5, r0
 80081ac:	4413      	add	r3, r2
 80081ae:	1808      	adds	r0, r1, r0
 80081b0:	4283      	cmp	r3, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	d305      	bcc.n	80081c2 <_AddFreeMemory+0x22>
 80081b6:	594b      	ldr	r3, [r1, r5]
 80081b8:	b91b      	cbnz	r3, 80081c2 <_AddFreeMemory+0x22>
 80081ba:	6843      	ldr	r3, [r0, #4]
 80081bc:	441d      	add	r5, r3
 80081be:	f7ff ffcf 	bl	8008160 <_RemoveFreeBlock>
 80081c2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d90a      	bls.n	80081de <_AddFreeMemory+0x3e>
 80081c8:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80081cc:	1be7      	subs	r7, r4, r7
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	b92b      	cbnz	r3, 80081de <_AddFreeMemory+0x3e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4638      	mov	r0, r7
 80081d6:	441d      	add	r5, r3
 80081d8:	f7ff ffc2 	bl	8008160 <_RemoveFreeBlock>
 80081dc:	463c      	mov	r4, r7
 80081de:	230f      	movs	r3, #15
 80081e0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80081e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80081e6:	4295      	cmp	r5, r2
 80081e8:	d203      	bcs.n	80081f2 <_AddFreeMemory+0x52>
 80081ea:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80081ee:	d2f7      	bcs.n	80081e0 <_AddFreeMemory+0x40>
 80081f0:	e023      	b.n	800823a <_AddFreeMemory+0x9a>
 80081f2:	2b0f      	cmp	r3, #15
 80081f4:	d821      	bhi.n	800823a <_AddFreeMemory+0x9a>
 80081f6:	3308      	adds	r3, #8
 80081f8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80081fc:	1960      	adds	r0, r4, r5
 80081fe:	6851      	ldr	r1, [r2, #4]
 8008200:	60a1      	str	r1, [r4, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	e884 0024 	stmia.w	r4, {r2, r5}
 8008208:	6124      	str	r4, [r4, #16]
 800820a:	f840 5c04 	str.w	r5, [r0, #-4]
 800820e:	f104 0008 	add.w	r0, r4, #8
 8008212:	b101      	cbz	r1, 8008216 <_AddFreeMemory+0x76>
 8008214:	6048      	str	r0, [r1, #4]
 8008216:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800821a:	60a1      	str	r1, [r4, #8]
 800821c:	60e2      	str	r2, [r4, #12]
 800821e:	6058      	str	r0, [r3, #4]
 8008220:	6833      	ldr	r3, [r6, #0]
 8008222:	4907      	ldr	r1, [pc, #28]	; (8008240 <_AddFreeMemory+0xa0>)
 8008224:	18ea      	adds	r2, r5, r3
 8008226:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 800822a:	6032      	str	r2, [r6, #0]
 800822c:	b92b      	cbnz	r3, 800823a <_AddFreeMemory+0x9a>
 800822e:	68cb      	ldr	r3, [r1, #12]
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	688a      	ldr	r2, [r1, #8]
 8008234:	4293      	cmp	r3, r2
 8008236:	bf88      	it	hi
 8008238:	608b      	strhi	r3, [r1, #8]
 800823a:	4628      	mov	r0, r5
 800823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823e:	bf00      	nop
 8008240:	20027aa0 	.word	0x20027aa0

08008244 <_RemoveHoles>:
 8008244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	4f24      	ldr	r7, [pc, #144]	; (80082dc <_RemoveHoles+0x98>)
 800824a:	68fe      	ldr	r6, [r7, #12]
 800824c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800824e:	3e01      	subs	r6, #1
 8008250:	4683      	mov	fp, r0
 8008252:	4426      	add	r6, r4
 8008254:	46b8      	mov	r8, r7
 8008256:	e894 0028 	ldmia.w	r4, {r3, r5}
 800825a:	bbab      	cbnz	r3, 80082c8 <_RemoveHoles+0x84>
 800825c:	1961      	adds	r1, r4, r5
 800825e:	428e      	cmp	r6, r1
 8008260:	d932      	bls.n	80082c8 <_RemoveHoles+0x84>
 8008262:	f854 a005 	ldr.w	sl, [r4, r5]
 8008266:	f1ba 0f00 	cmp.w	sl, #0
 800826a:	d02d      	beq.n	80082c8 <_RemoveHoles+0x84>
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d128      	bne.n	80082c8 <_RemoveHoles+0x84>
 8008276:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800827a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	4620      	mov	r0, r4
 8008282:	9101      	str	r1, [sp, #4]
 8008284:	f7ff ff6c 	bl	8008160 <_RemoveFreeBlock>
 8008288:	9901      	ldr	r1, [sp, #4]
 800828a:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800828e:	6808      	ldr	r0, [r1, #0]
 8008290:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008294:	4620      	mov	r0, r4
 8008296:	6054      	str	r4, [r2, #4]
 8008298:	464a      	mov	r2, r9
 800829a:	f00f fff0 	bl	801827e <memmove>
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	459a      	cmp	sl, r3
 80082a2:	bf08      	it	eq
 80082a4:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 80082a8:	eb04 0109 	add.w	r1, r4, r9
 80082ac:	bf08      	it	eq
 80082ae:	1b5b      	subeq	r3, r3, r5
 80082b0:	4628      	mov	r0, r5
 80082b2:	bf08      	it	eq
 80082b4:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 80082b8:	f7ff ff72 	bl	80081a0 <_AddFreeMemory>
 80082bc:	f1bb 0f00 	cmp.w	fp, #0
 80082c0:	d001      	beq.n	80082c6 <_RemoveHoles+0x82>
 80082c2:	4558      	cmp	r0, fp
 80082c4:	d205      	bcs.n	80082d2 <_RemoveHoles+0x8e>
 80082c6:	464d      	mov	r5, r9
 80082c8:	442c      	add	r4, r5
 80082ca:	42a6      	cmp	r6, r4
 80082cc:	d8c3      	bhi.n	8008256 <_RemoveHoles+0x12>
 80082ce:	2001      	movs	r0, #1
 80082d0:	e000      	b.n	80082d4 <_RemoveHoles+0x90>
 80082d2:	2000      	movs	r0, #0
 80082d4:	b003      	add	sp, #12
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	bf00      	nop
 80082dc:	20027aa0 	.word	0x20027aa0

080082e0 <GUI_ALLOC_FreeFixedBlock>:
 80082e0:	b128      	cbz	r0, 80082ee <GUI_ALLOC_FreeFixedBlock+0xe>
 80082e2:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80082e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e6:	6002      	str	r2, [r0, #0]
 80082e8:	b102      	cbz	r2, 80082ec <GUI_ALLOC_FreeFixedBlock+0xc>
 80082ea:	6050      	str	r0, [r2, #4]
 80082ec:	63d8      	str	r0, [r3, #60]	; 0x3c
 80082ee:	4770      	bx	lr
 80082f0:	20027aa0 	.word	0x20027aa0

080082f4 <GUI_ALLOC_h2p>:
 80082f4:	4b03      	ldr	r3, [pc, #12]	; (8008304 <GUI_ALLOC_h2p+0x10>)
 80082f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80082fc:	6840      	ldr	r0, [r0, #4]
 80082fe:	3008      	adds	r0, #8
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20027aa0 	.word	0x20027aa0

08008308 <GUI_ALLOC_LockH>:
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <GUI_ALLOC_LockH+0x18>)
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	3201      	adds	r2, #1
 800830e:	61da      	str	r2, [r3, #28]
 8008310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008312:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 8008316:	3301      	adds	r3, #1
 8008318:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 800831c:	f7ff bfea 	b.w	80082f4 <GUI_ALLOC_h2p>
 8008320:	20027aa0 	.word	0x20027aa0

08008324 <GUI_ALLOC_UnlockH>:
 8008324:	b530      	push	{r4, r5, lr}
 8008326:	6803      	ldr	r3, [r0, #0]
 8008328:	4909      	ldr	r1, [pc, #36]	; (8008350 <GUI_ALLOC_UnlockH+0x2c>)
 800832a:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800832e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008330:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d903      	bls.n	8008340 <GUI_ALLOC_UnlockH+0x1c>
 8008338:	69ca      	ldr	r2, [r1, #28]
 800833a:	b10a      	cbz	r2, 8008340 <GUI_ALLOC_UnlockH+0x1c>
 800833c:	3a01      	subs	r2, #1
 800833e:	61ca      	str	r2, [r1, #28]
 8008340:	3b01      	subs	r3, #1
 8008342:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 8008346:	2300      	movs	r3, #0
 8008348:	6003      	str	r3, [r0, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	bd30      	pop	{r4, r5, pc}
 800834e:	bf00      	nop
 8008350:	20027aa0 	.word	0x20027aa0

08008354 <GUI_ALLOC_Lock>:
 8008354:	4a02      	ldr	r2, [pc, #8]	; (8008360 <GUI_ALLOC_Lock+0xc>)
 8008356:	6993      	ldr	r3, [r2, #24]
 8008358:	3301      	adds	r3, #1
 800835a:	6193      	str	r3, [r2, #24]
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20027aa0 	.word	0x20027aa0

08008364 <GUI_ALLOC_Unlock>:
 8008364:	4a02      	ldr	r2, [pc, #8]	; (8008370 <GUI_ALLOC_Unlock+0xc>)
 8008366:	6993      	ldr	r3, [r2, #24]
 8008368:	3b01      	subs	r3, #1
 800836a:	6193      	str	r3, [r2, #24]
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	20027aa0 	.word	0x20027aa0

08008374 <GUI_ALLOC_AssignMemory>:
 8008374:	4b02      	ldr	r3, [pc, #8]	; (8008380 <GUI_ALLOC_AssignMemory+0xc>)
 8008376:	f021 0103 	bic.w	r1, r1, #3
 800837a:	6018      	str	r0, [r3, #0]
 800837c:	6059      	str	r1, [r3, #4]
 800837e:	4770      	bx	lr
 8008380:	200008fc 	.word	0x200008fc

08008384 <GUI_ALLOC_Free>:
 8008384:	b510      	push	{r4, lr}
 8008386:	4604      	mov	r4, r0
 8008388:	b180      	cbz	r0, 80083ac <GUI_ALLOC_Free+0x28>
 800838a:	f001 fce7 	bl	8009d5c <GUI_Lock>
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <GUI_ALLOC_Free+0x2c>)
 8008390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008396:	6859      	ldr	r1, [r3, #4]
 8008398:	6848      	ldr	r0, [r1, #4]
 800839a:	f7ff ff01 	bl	80081a0 <_AddFreeMemory>
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fecc 	bl	800813c <_PushFreeBlock>
 80083a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a8:	f001 bcce 	b.w	8009d48 <GUI_Unlock>
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	20027aa0 	.word	0x20027aa0

080083b4 <_EnlargeBlocks>:
 80083b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	4c22      	ldr	r4, [pc, #136]	; (8008444 <_EnlargeBlocks+0x90>)
 80083ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80083bc:	b93b      	cbnz	r3, 80083ce <_EnlargeBlocks+0x1a>
 80083be:	4b22      	ldr	r3, [pc, #136]	; (8008448 <_EnlargeBlocks+0x94>)
 80083c0:	689d      	ldr	r5, [r3, #8]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	3508      	adds	r5, #8
 80083c6:	fbb3 f5f5 	udiv	r5, r3, r5
 80083ca:	3502      	adds	r5, #2
 80083cc:	e003      	b.n	80083d6 <_EnlargeBlocks+0x22>
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	1d1d      	adds	r5, r3, #4
 80083d2:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80083d6:	00e8      	lsls	r0, r5, #3
 80083d8:	f000 f8fa 	bl	80085d0 <_Alloc>
 80083dc:	4680      	mov	r8, r0
 80083de:	b360      	cbz	r0, 800843a <_EnlargeBlocks+0x86>
 80083e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083e6:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80083ea:	00d2      	lsls	r2, r2, #3
 80083ec:	685e      	ldr	r6, [r3, #4]
 80083ee:	4b17      	ldr	r3, [pc, #92]	; (800844c <_EnlargeBlocks+0x98>)
 80083f0:	3608      	adds	r6, #8
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4630      	mov	r0, r6
 80083f6:	4798      	blx	r3
 80083f8:	6922      	ldr	r2, [r4, #16]
 80083fa:	6366      	str	r6, [r4, #52]	; 0x34
 80083fc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8008400:	4613      	mov	r3, r2
 8008402:	1e69      	subs	r1, r5, #1
 8008404:	428b      	cmp	r3, r1
 8008406:	d205      	bcs.n	8008414 <_EnlargeBlocks+0x60>
 8008408:	3301      	adds	r3, #1
 800840a:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 800840e:	f840 3c04 	str.w	r3, [r0, #-4]
 8008412:	e7f7      	b.n	8008404 <_EnlargeBlocks+0x50>
 8008414:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8008418:	f04f 0800 	mov.w	r8, #0
 800841c:	f8c6 8004 	str.w	r8, [r6, #4]
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	6262      	str	r2, [r4, #36]	; 0x24
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	442b      	add	r3, r5
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	6125      	str	r5, [r4, #16]
 800842c:	4638      	mov	r0, r7
 800842e:	b13f      	cbz	r7, 8008440 <_EnlargeBlocks+0x8c>
 8008430:	f7ff ffa8 	bl	8008384 <GUI_ALLOC_Free>
 8008434:	4640      	mov	r0, r8
 8008436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843a:	2001      	movs	r0, #1
 800843c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	20027aa0 	.word	0x20027aa0
 8008448:	200008fc 	.word	0x200008fc
 800844c:	2000003c 	.word	0x2000003c

08008450 <_InitOnce>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4a17      	ldr	r2, [pc, #92]	; (80084b0 <_InitOnce+0x60>)
 8008454:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8008458:	bb43      	cbnz	r3, 80084ac <_InitOnce+0x5c>
 800845a:	2301      	movs	r3, #1
 800845c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8008460:	4b14      	ldr	r3, [pc, #80]	; (80084b4 <_InitOnce+0x64>)
 8008462:	6899      	ldr	r1, [r3, #8]
 8008464:	b911      	cbnz	r1, 800846c <_InitOnce+0x1c>
 8008466:	6859      	ldr	r1, [r3, #4]
 8008468:	0889      	lsrs	r1, r1, #2
 800846a:	6099      	str	r1, [r3, #8]
 800846c:	215a      	movs	r1, #90	; 0x5a
 800846e:	6211      	str	r1, [r2, #32]
 8008470:	2610      	movs	r6, #16
 8008472:	2100      	movs	r1, #0
 8008474:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8008478:	fa06 f501 	lsl.w	r5, r6, r1
 800847c:	3101      	adds	r1, #1
 800847e:	2910      	cmp	r1, #16
 8008480:	4c0b      	ldr	r4, [pc, #44]	; (80084b0 <_InitOnce+0x60>)
 8008482:	6405      	str	r5, [r0, #64]	; 0x40
 8008484:	d1f6      	bne.n	8008474 <_InitOnce+0x24>
 8008486:	6858      	ldr	r0, [r3, #4]
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	63a1      	str	r1, [r4, #56]	; 0x38
 800848c:	2302      	movs	r3, #2
 800848e:	6123      	str	r3, [r4, #16]
 8008490:	f1a0 0314 	sub.w	r3, r0, #20
 8008494:	440b      	add	r3, r1
 8008496:	2501      	movs	r5, #1
 8008498:	6363      	str	r3, [r4, #52]	; 0x34
 800849a:	60e0      	str	r0, [r4, #12]
 800849c:	605d      	str	r5, [r3, #4]
 800849e:	6265      	str	r5, [r4, #36]	; 0x24
 80084a0:	6065      	str	r5, [r4, #4]
 80084a2:	f7ff fe7d 	bl	80081a0 <_AddFreeMemory>
 80084a6:	f7ff ff85 	bl	80083b4 <_EnlargeBlocks>
 80084aa:	6325      	str	r5, [r4, #48]	; 0x30
 80084ac:	bd70      	pop	{r4, r5, r6, pc}
 80084ae:	bf00      	nop
 80084b0:	20027aa0 	.word	0x20027aa0
 80084b4:	200008fc 	.word	0x200008fc

080084b8 <GUI_ALLOC_GetFixedBlock>:
 80084b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084bc:	4607      	mov	r7, r0
 80084be:	4e26      	ldr	r6, [pc, #152]	; (8008558 <GUI_ALLOC_GetFixedBlock+0xa0>)
 80084c0:	3703      	adds	r7, #3
 80084c2:	f7ff ffc5 	bl	8008450 <_InitOnce>
 80084c6:	f027 0703 	bic.w	r7, r7, #3
 80084ca:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80084cc:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80084ce:	3704      	adds	r7, #4
 80084d0:	4287      	cmp	r7, r0
 80084d2:	bf38      	it	cc
 80084d4:	4607      	movcc	r7, r0
 80084d6:	4614      	mov	r4, r2
 80084d8:	b134      	cbz	r4, 80084e8 <GUI_ALLOC_GetFixedBlock+0x30>
 80084da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80084de:	429f      	cmp	r7, r3
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	d02c      	beq.n	800853e <GUI_ALLOC_GetFixedBlock+0x86>
 80084e4:	461c      	mov	r4, r3
 80084e6:	e7f7      	b.n	80084d8 <GUI_ALLOC_GetFixedBlock+0x20>
 80084e8:	68f3      	ldr	r3, [r6, #12]
 80084ea:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80084ec:	eb02 0803 	add.w	r8, r2, r3
 80084f0:	f858 5c04 	ldr.w	r5, [r8, #-4]
 80084f4:	ebc5 0508 	rsb	r5, r5, r8
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b133      	cbz	r3, 800850a <GUI_ALLOC_GetFixedBlock+0x52>
 80084fc:	4620      	mov	r0, r4
 80084fe:	f7ff fea1 	bl	8008244 <_RemoveHoles>
 8008502:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8008506:	ebc5 0508 	rsb	r5, r5, r8
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	bb0b      	cbnz	r3, 8008552 <GUI_ALLOC_GetFixedBlock+0x9a>
 800850e:	686b      	ldr	r3, [r5, #4]
 8008510:	429f      	cmp	r7, r3
 8008512:	dc1e      	bgt.n	8008552 <GUI_ALLOC_GetFixedBlock+0x9a>
 8008514:	4628      	mov	r0, r5
 8008516:	1d1c      	adds	r4, r3, #4
 8008518:	f7ff fe22 	bl	8008160 <_RemoveFreeBlock>
 800851c:	68f3      	ldr	r3, [r6, #12]
 800851e:	6868      	ldr	r0, [r5, #4]
 8008520:	1bdb      	subs	r3, r3, r7
 8008522:	60f3      	str	r3, [r6, #12]
 8008524:	6973      	ldr	r3, [r6, #20]
 8008526:	1be4      	subs	r4, r4, r7
 8008528:	443b      	add	r3, r7
 800852a:	1bc0      	subs	r0, r0, r7
 800852c:	442c      	add	r4, r5
 800852e:	6173      	str	r3, [r6, #20]
 8008530:	d002      	beq.n	8008538 <GUI_ALLOC_GetFixedBlock+0x80>
 8008532:	4629      	mov	r1, r5
 8008534:	f7ff fe34 	bl	80081a0 <_AddFreeMemory>
 8008538:	f844 7c04 	str.w	r7, [r4, #-4]
 800853c:	e009      	b.n	8008552 <GUI_ALLOC_GetFixedBlock+0x9a>
 800853e:	b10b      	cbz	r3, 8008544 <GUI_ALLOC_GetFixedBlock+0x8c>
 8008540:	6861      	ldr	r1, [r4, #4]
 8008542:	6059      	str	r1, [r3, #4]
 8008544:	6861      	ldr	r1, [r4, #4]
 8008546:	b101      	cbz	r1, 800854a <GUI_ALLOC_GetFixedBlock+0x92>
 8008548:	600b      	str	r3, [r1, #0]
 800854a:	42a2      	cmp	r2, r4
 800854c:	d101      	bne.n	8008552 <GUI_ALLOC_GetFixedBlock+0x9a>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	63f3      	str	r3, [r6, #60]	; 0x3c
 8008552:	4620      	mov	r0, r4
 8008554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008558:	20027aa0 	.word	0x20027aa0

0800855c <GUI_ALLOC_GetMaxSize>:
 800855c:	b508      	push	{r3, lr}
 800855e:	f7ff ff77 	bl	8008450 <_InitOnce>
 8008562:	4a0c      	ldr	r2, [pc, #48]	; (8008594 <GUI_ALLOC_GetMaxSize+0x38>)
 8008564:	2300      	movs	r3, #0
 8008566:	1899      	adds	r1, r3, r2
 8008568:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800856c:	b110      	cbz	r0, 8008574 <GUI_ALLOC_GetMaxSize+0x18>
 800856e:	6883      	ldr	r3, [r0, #8]
 8008570:	2000      	movs	r0, #0
 8008572:	e00b      	b.n	800858c <GUI_ALLOC_GetMaxSize+0x30>
 8008574:	3b08      	subs	r3, #8
 8008576:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800857a:	d1f4      	bne.n	8008566 <GUI_ALLOC_GetMaxSize+0xa>
 800857c:	e008      	b.n	8008590 <GUI_ALLOC_GetMaxSize+0x34>
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	4290      	cmp	r0, r2
 8008584:	bf38      	it	cc
 8008586:	4610      	movcc	r0, r2
 8008588:	b113      	cbz	r3, 8008590 <GUI_ALLOC_GetMaxSize+0x34>
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f6      	bne.n	800857e <GUI_ALLOC_GetMaxSize+0x22>
 8008590:	380c      	subs	r0, #12
 8008592:	bd08      	pop	{r3, pc}
 8008594:	20027aa0 	.word	0x20027aa0

08008598 <GUI_ALLOC_RequestSize>:
 8008598:	b510      	push	{r4, lr}
 800859a:	f001 fbdf 	bl	8009d5c <GUI_Lock>
 800859e:	f7ff ffdd 	bl	800855c <GUI_ALLOC_GetMaxSize>
 80085a2:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <GUI_ALLOC_RequestSize+0x34>)
 80085a4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80085a8:	bf8c      	ite	hi
 80085aa:	6a1b      	ldrhi	r3, [r3, #32]
 80085ac:	6a1b      	ldrls	r3, [r3, #32]
 80085ae:	f04f 0464 	mov.w	r4, #100	; 0x64
 80085b2:	bf87      	ittee	hi
 80085b4:	fb90 f0f4 	sdivhi	r0, r0, r4
 80085b8:	fb03 f400 	mulhi.w	r4, r3, r0
 80085bc:	4358      	mulls	r0, r3
 80085be:	fbb0 f4f4 	udivls	r4, r0, r4
 80085c2:	f001 fbc1 	bl	8009d48 <GUI_Unlock>
 80085c6:	4620      	mov	r0, r4
 80085c8:	bd10      	pop	{r4, pc}
 80085ca:	bf00      	nop
 80085cc:	20027aa0 	.word	0x20027aa0

080085d0 <_Alloc>:
 80085d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	4e39      	ldr	r6, [pc, #228]	; (80086bc <_Alloc+0xec>)
 80085d6:	4604      	mov	r4, r0
 80085d8:	f7ff ff3a 	bl	8008450 <_InitOnce>
 80085dc:	6c35      	ldr	r5, [r6, #64]	; 0x40
 80085de:	6833      	ldr	r3, [r6, #0]
 80085e0:	42ac      	cmp	r4, r5
 80085e2:	bf24      	itt	cs
 80085e4:	3403      	addcs	r4, #3
 80085e6:	f024 0503 	biccs.w	r5, r4, #3
 80085ea:	350c      	adds	r5, #12
 80085ec:	42ab      	cmp	r3, r5
 80085ee:	4c33      	ldr	r4, [pc, #204]	; (80086bc <_Alloc+0xec>)
 80085f0:	d33e      	bcc.n	8008670 <_Alloc+0xa0>
 80085f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80085f4:	6862      	ldr	r2, [r4, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d90f      	bls.n	800861a <_Alloc+0x4a>
 80085fa:	6873      	ldr	r3, [r6, #4]
 80085fc:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80085fe:	3b01      	subs	r3, #1
 8008600:	6073      	str	r3, [r6, #4]
 8008602:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008604:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8008608:	eb03 0208 	add.w	r2, r3, r8
 800860c:	6852      	ldr	r2, [r2, #4]
 800860e:	6272      	str	r2, [r6, #36]	; 0x24
 8008610:	2201      	movs	r2, #1
 8008612:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8008616:	b957      	cbnz	r7, 800862e <_Alloc+0x5e>
 8008618:	e02a      	b.n	8008670 <_Alloc+0xa0>
 800861a:	3b01      	subs	r3, #1
 800861c:	6323      	str	r3, [r4, #48]	; 0x30
 800861e:	f7ff fec9 	bl	80083b4 <_EnlargeBlocks>
 8008622:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008624:	3301      	adds	r3, #1
 8008626:	6323      	str	r3, [r4, #48]	; 0x30
 8008628:	2800      	cmp	r0, #0
 800862a:	d0e6      	beq.n	80085fa <_Alloc+0x2a>
 800862c:	e020      	b.n	8008670 <_Alloc+0xa0>
 800862e:	230f      	movs	r3, #15
 8008630:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8008634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008636:	4295      	cmp	r5, r2
 8008638:	d20c      	bcs.n	8008654 <_Alloc+0x84>
 800863a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800863e:	d2f7      	bcs.n	8008630 <_Alloc+0x60>
 8008640:	e008      	b.n	8008654 <_Alloc+0x84>
 8008642:	6894      	ldr	r4, [r2, #8]
 8008644:	b12c      	cbz	r4, 8008652 <_Alloc+0x82>
 8008646:	6862      	ldr	r2, [r4, #4]
 8008648:	4295      	cmp	r5, r2
 800864a:	d914      	bls.n	8008676 <_Alloc+0xa6>
 800864c:	68a2      	ldr	r2, [r4, #8]
 800864e:	2a00      	cmp	r2, #0
 8008650:	d1f7      	bne.n	8008642 <_Alloc+0x72>
 8008652:	3301      	adds	r3, #1
 8008654:	2b0f      	cmp	r3, #15
 8008656:	d803      	bhi.n	8008660 <_Alloc+0x90>
 8008658:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800865c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800865e:	e7f6      	b.n	800864e <_Alloc+0x7e>
 8008660:	4628      	mov	r0, r5
 8008662:	f7ff fdef 	bl	8008244 <_RemoveHoles>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0e1      	beq.n	800862e <_Alloc+0x5e>
 800866a:	4638      	mov	r0, r7
 800866c:	f7ff fd66 	bl	800813c <_PushFreeBlock>
 8008670:	2000      	movs	r0, #0
 8008672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008676:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800867a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800867c:	ebc5 0209 	rsb	r2, r5, r9
 8008680:	330c      	adds	r3, #12
 8008682:	4620      	mov	r0, r4
 8008684:	429a      	cmp	r2, r3
 8008686:	bf38      	it	cc
 8008688:	464d      	movcc	r5, r9
 800868a:	f7ff fd69 	bl	8008160 <_RemoveFreeBlock>
 800868e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008690:	1961      	adds	r1, r4, r5
 8008692:	4498      	add	r8, r3
 8008694:	454d      	cmp	r5, r9
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	f8c8 4004 	str.w	r4, [r8, #4]
 800869e:	6027      	str	r7, [r4, #0]
 80086a0:	6065      	str	r5, [r4, #4]
 80086a2:	60a3      	str	r3, [r4, #8]
 80086a4:	6124      	str	r4, [r4, #16]
 80086a6:	f841 5c04 	str.w	r5, [r1, #-4]
 80086aa:	da03      	bge.n	80086b4 <_Alloc+0xe4>
 80086ac:	ebc5 0009 	rsb	r0, r5, r9
 80086b0:	f7ff fd76 	bl	80081a0 <_AddFreeMemory>
 80086b4:	4638      	mov	r0, r7
 80086b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ba:	bf00      	nop
 80086bc:	20027aa0 	.word	0x20027aa0

080086c0 <GUI_ALLOC_AllocNoInit>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	b138      	cbz	r0, 80086d6 <GUI_ALLOC_AllocNoInit+0x16>
 80086c6:	f001 fb49 	bl	8009d5c <GUI_Lock>
 80086ca:	4620      	mov	r0, r4
 80086cc:	f7ff ff80 	bl	80085d0 <_Alloc>
 80086d0:	4604      	mov	r4, r0
 80086d2:	f001 fb39 	bl	8009d48 <GUI_Unlock>
 80086d6:	4620      	mov	r0, r4
 80086d8:	bd10      	pop	{r4, pc}
	...

080086dc <GUI_ALLOC_AllocZero>:
 80086dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086de:	4605      	mov	r5, r0
 80086e0:	f001 fb3c 	bl	8009d5c <GUI_Lock>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f7ff ffeb 	bl	80086c0 <GUI_ALLOC_AllocNoInit>
 80086ea:	4606      	mov	r6, r0
 80086ec:	b160      	cbz	r0, 8008708 <GUI_ALLOC_AllocZero+0x2c>
 80086ee:	f7ff fe0b 	bl	8008308 <GUI_ALLOC_LockH>
 80086f2:	ac02      	add	r4, sp, #8
 80086f4:	4b07      	ldr	r3, [pc, #28]	; (8008714 <GUI_ALLOC_AllocZero+0x38>)
 80086f6:	f844 0d04 	str.w	r0, [r4, #-4]!
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	462a      	mov	r2, r5
 80086fe:	2100      	movs	r1, #0
 8008700:	4798      	blx	r3
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff fe0e 	bl	8008324 <GUI_ALLOC_UnlockH>
 8008708:	f001 fb1e 	bl	8009d48 <GUI_Unlock>
 800870c:	4630      	mov	r0, r6
 800870e:	b002      	add	sp, #8
 8008710:	bd70      	pop	{r4, r5, r6, pc}
 8008712:	bf00      	nop
 8008714:	20000040 	.word	0x20000040

08008718 <GUI__GetFontSizeY>:
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <GUI__GetFontSizeY+0x10>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	7e18      	ldrb	r0, [r3, #24]
 8008720:	7edb      	ldrb	r3, [r3, #27]
 8008722:	4358      	muls	r0, r3
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000014 	.word	0x20000014

0800872c <GUI_CalcColorDist>:
 800872c:	b2c3      	uxtb	r3, r0
 800872e:	b2ca      	uxtb	r2, r1
 8008730:	1a9a      	subs	r2, r3, r2
 8008732:	b292      	uxth	r2, r2
 8008734:	b510      	push	{r4, lr}
 8008736:	b214      	sxth	r4, r2
 8008738:	2c00      	cmp	r4, #0
 800873a:	bfbc      	itt	lt
 800873c:	4252      	neglt	r2, r2
 800873e:	b214      	sxthlt	r4, r2
 8008740:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008744:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8008748:	1a9b      	subs	r3, r3, r2
 800874a:	b29b      	uxth	r3, r3
 800874c:	0c09      	lsrs	r1, r1, #16
 800874e:	b21a      	sxth	r2, r3
 8008750:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8008754:	2a00      	cmp	r2, #0
 8008756:	b289      	uxth	r1, r1
 8008758:	b208      	sxth	r0, r1
 800875a:	bfbc      	itt	lt
 800875c:	425b      	neglt	r3, r3
 800875e:	b21a      	sxthlt	r2, r3
 8008760:	2800      	cmp	r0, #0
 8008762:	bfbc      	itt	lt
 8008764:	4249      	neglt	r1, r1
 8008766:	b208      	sxthlt	r0, r1
 8008768:	4352      	muls	r2, r2
 800876a:	fb04 2204 	mla	r2, r4, r4, r2
 800876e:	b280      	uxth	r0, r0
 8008770:	fb00 2000 	mla	r0, r0, r0, r2
 8008774:	bd10      	pop	{r4, pc}

08008776 <GUI_GetClientRect>:
 8008776:	b108      	cbz	r0, 800877c <GUI_GetClientRect+0x6>
 8008778:	f006 b938 	b.w	800e9ec <WM_GetClientRect>
 800877c:	4770      	bx	lr

0800877e <GUI_GetBkColor>:
 800877e:	b510      	push	{r4, lr}
 8008780:	f001 faec 	bl	8009d5c <GUI_Lock>
 8008784:	f002 fd6a 	bl	800b25c <LCD_GetBkColorIndex>
 8008788:	f002 fac6 	bl	800ad18 <LCD_Index2Color>
 800878c:	4604      	mov	r4, r0
 800878e:	f001 fadb 	bl	8009d48 <GUI_Unlock>
 8008792:	4620      	mov	r0, r4
 8008794:	bd10      	pop	{r4, pc}

08008796 <GUI_GetColor>:
 8008796:	b510      	push	{r4, lr}
 8008798:	f001 fae0 	bl	8009d5c <GUI_Lock>
 800879c:	f002 fd66 	bl	800b26c <LCD_GetColorIndex>
 80087a0:	f002 faba 	bl	800ad18 <LCD_Index2Color>
 80087a4:	4604      	mov	r4, r0
 80087a6:	f001 facf 	bl	8009d48 <GUI_Unlock>
 80087aa:	4620      	mov	r0, r4
 80087ac:	bd10      	pop	{r4, pc}
	...

080087b0 <GUI_GetDrawMode>:
 80087b0:	b510      	push	{r4, lr}
 80087b2:	f001 fad3 	bl	8009d5c <GUI_Lock>
 80087b6:	4b03      	ldr	r3, [pc, #12]	; (80087c4 <GUI_GetDrawMode+0x14>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	7c1c      	ldrb	r4, [r3, #16]
 80087bc:	f001 fac4 	bl	8009d48 <GUI_Unlock>
 80087c0:	4620      	mov	r0, r4
 80087c2:	bd10      	pop	{r4, pc}
 80087c4:	20000014 	.word	0x20000014

080087c8 <GUI_GetFontInfo>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4604      	mov	r4, r0
 80087cc:	460d      	mov	r5, r1
 80087ce:	f001 fac5 	bl	8009d5c <GUI_Lock>
 80087d2:	b914      	cbnz	r4, 80087da <GUI_GetFontInfo+0x12>
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <GUI_GetFontInfo+0x34>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	69dc      	ldr	r4, [r3, #28]
 80087da:	f894 3020 	ldrb.w	r3, [r4, #32]
 80087de:	70ab      	strb	r3, [r5, #2]
 80087e0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80087e4:	712b      	strb	r3, [r5, #4]
 80087e6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80087ea:	70eb      	strb	r3, [r5, #3]
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	4629      	mov	r1, r5
 80087f0:	4620      	mov	r0, r4
 80087f2:	4798      	blx	r3
 80087f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f8:	f001 baa6 	b.w	8009d48 <GUI_Unlock>
 80087fc:	20000014 	.word	0x20000014

08008800 <GUI_GetFontSizeY>:
 8008800:	b510      	push	{r4, lr}
 8008802:	f001 faab 	bl	8009d5c <GUI_Lock>
 8008806:	f7ff ff87 	bl	8008718 <GUI__GetFontSizeY>
 800880a:	4604      	mov	r4, r0
 800880c:	f001 fa9c 	bl	8009d48 <GUI_Unlock>
 8008810:	4620      	mov	r0, r4
 8008812:	bd10      	pop	{r4, pc}

08008814 <GUI_GetOrg>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4605      	mov	r5, r0
 8008818:	460c      	mov	r4, r1
 800881a:	f001 fa9f 	bl	8009d5c <GUI_Lock>
 800881e:	4b06      	ldr	r3, [pc, #24]	; (8008838 <GUI_GetOrg+0x24>)
 8008820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <GUI_GetOrg+0x28>)
 8008828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008832:	f001 ba89 	b.w	8009d48 <GUI_Unlock>
 8008836:	bf00      	nop
 8008838:	20027b88 	.word	0x20027b88
 800883c:	20027b78 	.word	0x20027b78

08008840 <GUI_GetVersionString>:
 8008840:	4804      	ldr	r0, [pc, #16]	; (8008854 <GUI_GetVersionString+0x14>)
 8008842:	2335      	movs	r3, #53	; 0x35
 8008844:	7003      	strb	r3, [r0, #0]
 8008846:	2334      	movs	r3, #52	; 0x34
 8008848:	7083      	strb	r3, [r0, #2]
 800884a:	70c3      	strb	r3, [r0, #3]
 800884c:	2361      	movs	r3, #97	; 0x61
 800884e:	7103      	strb	r3, [r0, #4]
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000000 	.word	0x20000000

08008858 <GUI_GetYSizeOfFont>:
 8008858:	7e02      	ldrb	r2, [r0, #24]
 800885a:	7ec0      	ldrb	r0, [r0, #27]
 800885c:	4350      	muls	r0, r2
 800885e:	4770      	bx	lr

08008860 <GUI_MergeRect>:
 8008860:	b510      	push	{r4, lr}
 8008862:	b338      	cbz	r0, 80088b4 <GUI_MergeRect+0x54>
 8008864:	b309      	cbz	r1, 80088aa <GUI_MergeRect+0x4a>
 8008866:	b30a      	cbz	r2, 80088ac <GUI_MergeRect+0x4c>
 8008868:	f9b2 4000 	ldrsh.w	r4, [r2]
 800886c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8008870:	42a3      	cmp	r3, r4
 8008872:	bfa8      	it	ge
 8008874:	4623      	movge	r3, r4
 8008876:	8003      	strh	r3, [r0, #0]
 8008878:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800887c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8008880:	42a3      	cmp	r3, r4
 8008882:	bfa8      	it	ge
 8008884:	4623      	movge	r3, r4
 8008886:	8043      	strh	r3, [r0, #2]
 8008888:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800888c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8008890:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008894:	42a3      	cmp	r3, r4
 8008896:	bfb8      	it	lt
 8008898:	4623      	movlt	r3, r4
 800889a:	8083      	strh	r3, [r0, #4]
 800889c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80088a0:	4293      	cmp	r3, r2
 80088a2:	bfb8      	it	lt
 80088a4:	4613      	movlt	r3, r2
 80088a6:	80c3      	strh	r3, [r0, #6]
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	4611      	mov	r1, r2
 80088ac:	680b      	ldr	r3, [r1, #0]
 80088ae:	6003      	str	r3, [r0, #0]
 80088b0:	684b      	ldr	r3, [r1, #4]
 80088b2:	6043      	str	r3, [r0, #4]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <GUI_MoveRect>:
 80088b6:	b168      	cbz	r0, 80088d4 <GUI_MoveRect+0x1e>
 80088b8:	8803      	ldrh	r3, [r0, #0]
 80088ba:	b289      	uxth	r1, r1
 80088bc:	440b      	add	r3, r1
 80088be:	8003      	strh	r3, [r0, #0]
 80088c0:	8883      	ldrh	r3, [r0, #4]
 80088c2:	4419      	add	r1, r3
 80088c4:	8843      	ldrh	r3, [r0, #2]
 80088c6:	8081      	strh	r1, [r0, #4]
 80088c8:	b292      	uxth	r2, r2
 80088ca:	4413      	add	r3, r2
 80088cc:	8043      	strh	r3, [r0, #2]
 80088ce:	88c3      	ldrh	r3, [r0, #6]
 80088d0:	441a      	add	r2, r3
 80088d2:	80c2      	strh	r2, [r0, #6]
 80088d4:	4770      	bx	lr
	...

080088d8 <GUI_Exec1>:
 80088d8:	4b0c      	ldr	r3, [pc, #48]	; (800890c <GUI_Exec1+0x34>)
 80088da:	b510      	push	{r4, lr}
 80088dc:	681c      	ldr	r4, [r3, #0]
 80088de:	b11c      	cbz	r4, 80088e8 <GUI_Exec1+0x10>
 80088e0:	47a0      	blx	r4
 80088e2:	1c04      	adds	r4, r0, #0
 80088e4:	bf18      	it	ne
 80088e6:	2401      	movne	r4, #1
 80088e8:	f005 ff38 	bl	800e75c <WM_Exec>
 80088ec:	4b08      	ldr	r3, [pc, #32]	; (8008910 <GUI_Exec1+0x38>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2800      	cmp	r0, #0
 80088f2:	bf18      	it	ne
 80088f4:	2401      	movne	r4, #1
 80088f6:	b11b      	cbz	r3, 8008900 <GUI_Exec1+0x28>
 80088f8:	4798      	blx	r3
 80088fa:	2800      	cmp	r0, #0
 80088fc:	bf18      	it	ne
 80088fe:	2401      	movne	r4, #1
 8008900:	4b04      	ldr	r3, [pc, #16]	; (8008914 <GUI_Exec1+0x3c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b103      	cbz	r3, 8008908 <GUI_Exec1+0x30>
 8008906:	4798      	blx	r3
 8008908:	4620      	mov	r0, r4
 800890a:	bd10      	pop	{r4, pc}
 800890c:	20027b84 	.word	0x20027b84
 8008910:	20027bac 	.word	0x20027bac
 8008914:	20027ba4 	.word	0x20027ba4

08008918 <GUI_Exec>:
 8008918:	b510      	push	{r4, lr}
 800891a:	2400      	movs	r4, #0
 800891c:	f7ff ffdc 	bl	80088d8 <GUI_Exec1>
 8008920:	b108      	cbz	r0, 8008926 <GUI_Exec+0xe>
 8008922:	2401      	movs	r4, #1
 8008924:	e7fa      	b.n	800891c <GUI_Exec+0x4>
 8008926:	4620      	mov	r0, r4
 8008928:	bd10      	pop	{r4, pc}
	...

0800892c <GUI_GotoXY>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4605      	mov	r5, r0
 8008930:	460c      	mov	r4, r1
 8008932:	f001 fa13 	bl	8009d5c <GUI_Lock>
 8008936:	4b04      	ldr	r3, [pc, #16]	; (8008948 <GUI_GotoXY+0x1c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	845d      	strh	r5, [r3, #34]	; 0x22
 800893c:	849c      	strh	r4, [r3, #36]	; 0x24
 800893e:	f001 fa03 	bl	8009d48 <GUI_Unlock>
 8008942:	2000      	movs	r0, #0
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	bf00      	nop
 8008948:	20000014 	.word	0x20000014

0800894c <GUI_SetPenSize>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4605      	mov	r5, r0
 8008950:	f001 fa04 	bl	8009d5c <GUI_Lock>
 8008954:	4b03      	ldr	r3, [pc, #12]	; (8008964 <GUI_SetPenSize+0x18>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	7e1c      	ldrb	r4, [r3, #24]
 800895a:	761d      	strb	r5, [r3, #24]
 800895c:	f001 f9f4 	bl	8009d48 <GUI_Unlock>
 8008960:	4620      	mov	r0, r4
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	20000014 	.word	0x20000014

08008968 <GUI_RectsIntersect>:
 8008968:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800896c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8008970:	429a      	cmp	r2, r3
 8008972:	dc14      	bgt.n	800899e <GUI_RectsIntersect+0x36>
 8008974:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8008978:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800897c:	429a      	cmp	r2, r3
 800897e:	dc0e      	bgt.n	800899e <GUI_RectsIntersect+0x36>
 8008980:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008984:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8008988:	429a      	cmp	r2, r3
 800898a:	dc08      	bgt.n	800899e <GUI_RectsIntersect+0x36>
 800898c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008990:	f9b1 3000 	ldrsh.w	r3, [r1]
 8008994:	4283      	cmp	r3, r0
 8008996:	bfcc      	ite	gt
 8008998:	2000      	movgt	r0, #0
 800899a:	2001      	movle	r0, #1
 800899c:	4770      	bx	lr
 800899e:	2000      	movs	r0, #0
 80089a0:	4770      	bx	lr
	...

080089a4 <GUI_SaveContext_W>:
 80089a4:	b508      	push	{r3, lr}
 80089a6:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <GUI_SaveContext_W+0x10>)
 80089a8:	2274      	movs	r2, #116	; 0x74
 80089aa:	6819      	ldr	r1, [r3, #0]
 80089ac:	f00f fc5c 	bl	8018268 <memcpy>
 80089b0:	bd08      	pop	{r3, pc}
 80089b2:	bf00      	nop
 80089b4:	20000014 	.word	0x20000014

080089b8 <GUI_RestoreContext>:
 80089b8:	b508      	push	{r3, lr}
 80089ba:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <GUI_RestoreContext+0x10>)
 80089bc:	4601      	mov	r1, r0
 80089be:	2274      	movs	r2, #116	; 0x74
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f00f fc51 	bl	8018268 <memcpy>
 80089c6:	bd08      	pop	{r3, pc}
 80089c8:	20000014 	.word	0x20000014

080089cc <GUI_SelectLCD>:
 80089cc:	b508      	push	{r3, lr}
 80089ce:	f001 f9c5 	bl	8009d5c <GUI_Lock>
 80089d2:	f003 f903 	bl	800bbdc <LCD_SelectLCD>
 80089d6:	f003 f9b1 	bl	800bd3c <LCD_UpdateColorIndices>
 80089da:	f005 ff03 	bl	800e7e4 <WM_Activate>
 80089de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089e2:	f001 b9b1 	b.w	8009d48 <GUI_Unlock>

080089e6 <GUI_SetBkColor>:
 80089e6:	b510      	push	{r4, lr}
 80089e8:	4604      	mov	r4, r0
 80089ea:	f001 f9b7 	bl	8009d5c <GUI_Lock>
 80089ee:	4620      	mov	r0, r4
 80089f0:	f002 f9d8 	bl	800ada4 <LCD_SetBkColor>
 80089f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f8:	f001 b9a6 	b.w	8009d48 <GUI_Unlock>

080089fc <GUI_SetColor>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	4604      	mov	r4, r0
 8008a00:	f001 f9ac 	bl	8009d5c <GUI_Lock>
 8008a04:	4620      	mov	r0, r4
 8008a06:	f002 f9d3 	bl	800adb0 <LCD_SetColor>
 8008a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a0e:	f001 b99b 	b.w	8009d48 <GUI_Unlock>
	...

08008a14 <GUI_SetColorIndex>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	f001 f9a0 	bl	8009d5c <GUI_Lock>
 8008a1c:	4b05      	ldr	r3, [pc, #20]	; (8008a34 <GUI_SetColorIndex+0x20>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008a24:	4620      	mov	r0, r4
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30
 8008a28:	f002 f984 	bl	800ad34 <LCD_SetColorIndex>
 8008a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a30:	f001 b98a 	b.w	8009d48 <GUI_Unlock>
 8008a34:	20000014 	.word	0x20000014

08008a38 <GUI_SetDrawMode>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	f001 f98e 	bl	8009d5c <GUI_Lock>
 8008a40:	4620      	mov	r0, r4
 8008a42:	f001 fe49 	bl	800a6d8 <LCD_SetDrawMode>
 8008a46:	4604      	mov	r4, r0
 8008a48:	f001 f97e 	bl	8009d48 <GUI_Unlock>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	bd10      	pop	{r4, pc}

08008a50 <GUI_SetFont>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4604      	mov	r4, r0
 8008a54:	f001 f982 	bl	8009d5c <GUI_Lock>
 8008a58:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <GUI_SetFont+0x1c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69dd      	ldr	r5, [r3, #28]
 8008a5e:	b104      	cbz	r4, 8008a62 <GUI_SetFont+0x12>
 8008a60:	61dc      	str	r4, [r3, #28]
 8008a62:	f001 f971 	bl	8009d48 <GUI_Unlock>
 8008a66:	4628      	mov	r0, r5
 8008a68:	bd38      	pop	{r3, r4, r5, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000014 	.word	0x20000014

08008a70 <GUI_SetLineStyle>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4605      	mov	r5, r0
 8008a74:	f001 f972 	bl	8009d5c <GUI_Lock>
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <GUI_SetLineStyle+0x18>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	7e9c      	ldrb	r4, [r3, #26]
 8008a7e:	769d      	strb	r5, [r3, #26]
 8008a80:	f001 f962 	bl	8009d48 <GUI_Unlock>
 8008a84:	4620      	mov	r0, r4
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	20000014 	.word	0x20000014

08008a8c <GUI_SetOrg>:
 8008a8c:	b570      	push	{r4, r5, r6, lr}
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460d      	mov	r5, r1
 8008a92:	f001 f963 	bl	8009d5c <GUI_Lock>
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <GUI_SetOrg+0x30>)
 8008a98:	801c      	strh	r4, [r3, #0]
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <GUI_SetOrg+0x34>)
 8008a9c:	801d      	strh	r5, [r3, #0]
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <GUI_SetOrg+0x38>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	7c5a      	ldrb	r2, [r3, #17]
 8008aa4:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <GUI_SetOrg+0x3c>)
 8008aa6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008aaa:	68c2      	ldr	r2, [r0, #12]
 8008aac:	4621      	mov	r1, r4
 8008aae:	6a16      	ldr	r6, [r2, #32]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	47b0      	blx	r6
 8008ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ab8:	f001 b946 	b.w	8009d48 <GUI_Unlock>
 8008abc:	20027b88 	.word	0x20027b88
 8008ac0:	20027b78 	.word	0x20027b78
 8008ac4:	20000014 	.word	0x20000014
 8008ac8:	20027bb0 	.word	0x20027bb0

08008acc <GUI_SetTextAlign>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4605      	mov	r5, r0
 8008ad0:	f001 f944 	bl	8009d5c <GUI_Lock>
 8008ad4:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <GUI_SetTextAlign+0x1c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 8008adc:	859d      	strh	r5, [r3, #44]	; 0x2c
 8008ade:	f001 f933 	bl	8009d48 <GUI_Unlock>
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	bd38      	pop	{r3, r4, r5, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000014 	.word	0x20000014

08008aec <GUI_SetTextMode>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4605      	mov	r5, r0
 8008af0:	f001 f934 	bl	8009d5c <GUI_Lock>
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <GUI_SetTextMode+0x1c>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8008afc:	855d      	strh	r5, [r3, #42]	; 0x2a
 8008afe:	f001 f923 	bl	8009d48 <GUI_Unlock>
 8008b02:	4620      	mov	r0, r4
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	bf00      	nop
 8008b08:	20000014 	.word	0x20000014

08008b0c <GL_SetDefault>:
 8008b0c:	b508      	push	{r3, lr}
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <GL_SetDefault+0x3c>)
 8008b10:	6818      	ldr	r0, [r3, #0]
 8008b12:	f7ff ff68 	bl	80089e6 <GUI_SetBkColor>
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <GL_SetDefault+0x40>)
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	f7ff ff6f 	bl	80089fc <GUI_SetColor>
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f7ff ff14 	bl	800894c <GUI_SetPenSize>
 8008b24:	2000      	movs	r0, #0
 8008b26:	f7ff ffd1 	bl	8008acc <GUI_SetTextAlign>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f7ff ffde 	bl	8008aec <GUI_SetTextMode>
 8008b30:	2000      	movs	r0, #0
 8008b32:	f7ff ff81 	bl	8008a38 <GUI_SetDrawMode>
 8008b36:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <GL_SetDefault+0x44>)
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f7ff ff89 	bl	8008a50 <GUI_SetFont>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b44:	f7ff bf94 	b.w	8008a70 <GUI_SetLineStyle>
 8008b48:	20000910 	.word	0x20000910
 8008b4c:	20000010 	.word	0x20000010
 8008b50:	2000000c 	.word	0x2000000c

08008b54 <_InitContext>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4e1a      	ldr	r6, [pc, #104]	; (8008bc0 <_InitContext+0x6c>)
 8008b58:	4d1a      	ldr	r5, [pc, #104]	; (8008bc4 <_InitContext+0x70>)
 8008b5a:	f106 0384 	add.w	r3, r6, #132	; 0x84
 8008b5e:	6703      	str	r3, [r0, #112]	; 0x70
 8008b60:	68eb      	ldr	r3, [r5, #12]
 8008b62:	1d1a      	adds	r2, r3, #4
 8008b64:	63da      	str	r2, [r3, #60]	; 0x3c
 8008b66:	f103 0208 	add.w	r2, r3, #8
 8008b6a:	639b      	str	r3, [r3, #56]	; 0x38
 8008b6c:	641b      	str	r3, [r3, #64]	; 0x40
 8008b6e:	6142      	str	r2, [r0, #20]
 8008b70:	7c5a      	ldrb	r2, [r3, #17]
 8008b72:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <_InitContext+0x74>)
 8008b74:	4604      	mov	r4, r0
 8008b76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b7a:	68c3      	ldr	r3, [r0, #12]
 8008b7c:	f104 0108 	add.w	r1, r4, #8
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	4798      	blx	r3
 8008b84:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <_InitContext+0x78>)
 8008b86:	6663      	str	r3, [r4, #100]	; 0x64
 8008b88:	686b      	ldr	r3, [r5, #4]
 8008b8a:	61e3      	str	r3, [r4, #28]
 8008b8c:	68eb      	ldr	r3, [r5, #12]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6163      	str	r3, [r4, #20]
 8008b92:	2301      	movs	r3, #1
 8008b94:	7623      	strb	r3, [r4, #24]
 8008b96:	76e3      	strb	r3, [r4, #27]
 8008b98:	f005 ff4c 	bl	800ea34 <WM_GetDesktopWindow>
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8008ba2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008ba6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8008baa:	64a0      	str	r0, [r4, #72]	; 0x48
 8008bac:	6830      	ldr	r0, [r6, #0]
 8008bae:	f002 f8f9 	bl	800ada4 <LCD_SetBkColor>
 8008bb2:	68a8      	ldr	r0, [r5, #8]
 8008bb4:	f002 f8fc 	bl	800adb0 <LCD_SetColor>
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <_InitContext+0x7c>)
 8008bba:	4a06      	ldr	r2, [pc, #24]	; (8008bd4 <_InitContext+0x80>)
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	20000910 	.word	0x20000910
 8008bc4:	20000008 	.word	0x20000008
 8008bc8:	20027bb0 	.word	0x20027bb0
 8008bcc:	08018328 	.word	0x08018328
 8008bd0:	20027ba8 	.word	0x20027ba8
 8008bd4:	08018360 	.word	0x08018360

08008bd8 <_OnExit>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	4d0b      	ldr	r5, [pc, #44]	; (8008c08 <_OnExit+0x30>)
 8008bdc:	4e0b      	ldr	r6, [pc, #44]	; (8008c0c <_OnExit+0x34>)
 8008bde:	2400      	movs	r4, #0
 8008be0:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8008be4:	3504      	adds	r5, #4
 8008be6:	6833      	ldr	r3, [r6, #0]
 8008be8:	2274      	movs	r2, #116	; 0x74
 8008bea:	4621      	mov	r1, r4
 8008bec:	4628      	mov	r0, r5
 8008bee:	4798      	blx	r3
 8008bf0:	6833      	ldr	r3, [r6, #0]
 8008bf2:	4807      	ldr	r0, [pc, #28]	; (8008c10 <_OnExit+0x38>)
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4798      	blx	r3
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <_OnExit+0x3c>)
 8008bfc:	60dd      	str	r5, [r3, #12]
 8008bfe:	4b06      	ldr	r3, [pc, #24]	; (8008c18 <_OnExit+0x40>)
 8008c00:	701c      	strb	r4, [r3, #0]
 8008c02:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <_OnExit+0x44>)
 8008c04:	601c      	str	r4, [r3, #0]
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	20000910 	.word	0x20000910
 8008c0c:	20000040 	.word	0x20000040
 8008c10:	20027bb0 	.word	0x20027bb0
 8008c14:	20000008 	.word	0x20000008
 8008c18:	20027b98 	.word	0x20027b98
 8008c1c:	20027b74 	.word	0x20027b74

08008c20 <GUI_SetDefaultFont>:
 8008c20:	4b01      	ldr	r3, [pc, #4]	; (8008c28 <GUI_SetDefaultFont+0x8>)
 8008c22:	6058      	str	r0, [r3, #4]
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000008 	.word	0x20000008

08008c2c <GUI_ClearRect>:
 8008c2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c30:	4616      	mov	r6, r2
 8008c32:	461f      	mov	r7, r3
 8008c34:	4604      	mov	r4, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	f001 f890 	bl	8009d5c <GUI_Lock>
 8008c3c:	2004      	movs	r0, #4
 8008c3e:	f001 fd4b 	bl	800a6d8 <LCD_SetDrawMode>
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <GUI_ClearRect+0x68>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	4414      	add	r4, r2
 8008c4e:	441d      	add	r5, r3
 8008c50:	4416      	add	r6, r2
 8008c52:	441f      	add	r7, r3
 8008c54:	4668      	mov	r0, sp
 8008c56:	f8ad 4000 	strh.w	r4, [sp]
 8008c5a:	f8ad 6004 	strh.w	r6, [sp, #4]
 8008c5e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8008c62:	f8ad 7006 	strh.w	r7, [sp, #6]
 8008c66:	f005 fc01 	bl	800e46c <WM__InitIVRSearch>
 8008c6a:	b938      	cbnz	r0, 8008c7c <GUI_ClearRect+0x50>
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	f001 fd33 	bl	800a6d8 <LCD_SetDrawMode>
 8008c72:	f001 f869 	bl	8009d48 <GUI_Unlock>
 8008c76:	b002      	add	sp, #8
 8008c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7c:	463b      	mov	r3, r7
 8008c7e:	4632      	mov	r2, r6
 8008c80:	4629      	mov	r1, r5
 8008c82:	4620      	mov	r0, r4
 8008c84:	f001 fdb0 	bl	800a7e8 <LCD_FillRect>
 8008c88:	f005 fb2e 	bl	800e2e8 <WM__GetNextIVR>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d1f5      	bne.n	8008c7c <GUI_ClearRect+0x50>
 8008c90:	e7ec      	b.n	8008c6c <GUI_ClearRect+0x40>
 8008c92:	bf00      	nop
 8008c94:	20000008 	.word	0x20000008

08008c98 <GUI_ClearRectEx>:
 8008c98:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8008c9c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8008ca0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8008ca4:	f9b0 0000 	ldrsh.w	r0, [r0]
 8008ca8:	f7ff bfc0 	b.w	8008c2c <GUI_ClearRect>

08008cac <GUI_Clear>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	2100      	movs	r1, #0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	f7ff fe3b 	bl	800892c <GUI_GotoXY>
 8008cb6:	4904      	ldr	r1, [pc, #16]	; (8008cc8 <GUI_Clear+0x1c>)
 8008cb8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc4:	f7ff bfb2 	b.w	8008c2c <GUI_ClearRect>
 8008cc8:	ffffc001 	.word	0xffffc001

08008ccc <GUI__Config>:
 8008ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cce:	4d20      	ldr	r5, [pc, #128]	; (8008d50 <GUI__Config+0x84>)
 8008cd0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d138      	bne.n	8008d4c <GUI__Config+0x80>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 8008ce0:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <GUI__Config+0x88>)
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f103 0708 	add.w	r7, r3, #8
 8008ce8:	466e      	mov	r6, sp
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	6859      	ldr	r1, [r3, #4]
 8008cee:	4614      	mov	r4, r2
 8008cf0:	c403      	stmia	r4!, {r0, r1}
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	42bb      	cmp	r3, r7
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	d1f7      	bne.n	8008cea <GUI__Config+0x1e>
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	8899      	ldrh	r1, [r3, #4]
 8008cfe:	799b      	ldrb	r3, [r3, #6]
 8008d00:	71a3      	strb	r3, [r4, #6]
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	80a1      	strh	r1, [r4, #4]
 8008d06:	4c14      	ldr	r4, [pc, #80]	; (8008d58 <GUI__Config+0x8c>)
 8008d08:	4633      	mov	r3, r6
 8008d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d0e:	f804 2b01 	strb.w	r2, [r4], #1
 8008d12:	781a      	ldrb	r2, [r3, #0]
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	d1f8      	bne.n	8008d0a <GUI__Config+0x3e>
 8008d18:	f7ff fd92 	bl	8008840 <GUI_GetVersionString>
 8008d1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008d20:	4622      	mov	r2, r4
 8008d22:	f804 3b01 	strb.w	r3, [r4], #1
 8008d26:	7803      	ldrb	r3, [r0, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1f7      	bne.n	8008d1c <GUI__Config+0x50>
 8008d2c:	7053      	strb	r3, [r2, #1]
 8008d2e:	f7fa ffeb 	bl	8003d08 <GUI_X_Config>
 8008d32:	f001 f84f 	bl	8009dd4 <GUITASK_Init>
 8008d36:	f7fb f985 	bl	8004044 <LCD_X_Config>
 8008d3a:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <GUI__Config+0x90>)
 8008d3c:	4808      	ldr	r0, [pc, #32]	; (8008d60 <GUI__Config+0x94>)
 8008d3e:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8008d42:	b005      	add	sp, #20
 8008d44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008d48:	f000 b88a 	b.w	8008e60 <GUI__RegisterExit>
 8008d4c:	b005      	add	sp, #20
 8008d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d50:	20000910 	.word	0x20000910
 8008d54:	08018330 	.word	0x08018330
 8008d58:	20000994 	.word	0x20000994
 8008d5c:	08008bd9 	.word	0x08008bd9
 8008d60:	200009a8 	.word	0x200009a8

08008d64 <GUI_Init>:
 8008d64:	b590      	push	{r4, r7, lr}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4a34      	ldr	r2, [pc, #208]	; (8008e3c <GUI_Init+0xd8>)
 8008d6c:	4b33      	ldr	r3, [pc, #204]	; (8008e3c <GUI_Init+0xd8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f023 0301 	bic.w	r3, r3, #1
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	4b32      	ldr	r3, [pc, #200]	; (8008e40 <GUI_Init+0xdc>)
 8008d78:	2201      	movs	r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	bf00      	nop
 8008d7e:	4b30      	ldr	r3, [pc, #192]	; (8008e40 <GUI_Init+0xdc>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1fb      	bne.n	8008d7e <GUI_Init+0x1a>
 8008d86:	4b2f      	ldr	r3, [pc, #188]	; (8008e44 <GUI_Init+0xe0>)
 8008d88:	4a2f      	ldr	r2, [pc, #188]	; (8008e48 <GUI_Init+0xe4>)
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	4b2d      	ldr	r3, [pc, #180]	; (8008e44 <GUI_Init+0xe0>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a2e      	ldr	r2, [pc, #184]	; (8008e4c <GUI_Init+0xe8>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d000      	beq.n	8008d98 <GUI_Init+0x34>
 8008d96:	e7fe      	b.n	8008d96 <GUI_Init+0x32>
 8008d98:	f7ff ff98 	bl	8008ccc <GUI__Config>
 8008d9c:	4b2c      	ldr	r3, [pc, #176]	; (8008e50 <GUI_Init+0xec>)
 8008d9e:	222e      	movs	r2, #46	; 0x2e
 8008da0:	701a      	strb	r2, [r3, #0]
 8008da2:	f7fb fe90 	bl	8004ac6 <GUI_X_Init>
 8008da6:	482b      	ldr	r0, [pc, #172]	; (8008e54 <GUI_Init+0xf0>)
 8008da8:	f7ff fed4 	bl	8008b54 <_InitContext>
 8008dac:	f001 ff54 	bl	800ac58 <emWin_LCD_Init>
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	f002 faf5 	bl	800b3a0 <LCD_GetXSizeDisplay>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bf0c      	ite	eq
 8008dbc:	2301      	moveq	r3, #1
 8008dbe:	2300      	movne	r3, #0
 8008dc0:	b2dc      	uxtb	r4, r3
 8008dc2:	f002 faf3 	bl	800b3ac <LCD_GetYSizeDisplay>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	bf0c      	ite	eq
 8008dcc:	2301      	moveq	r3, #1
 8008dce:	2300      	movne	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	4323      	orrs	r3, r4
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <GUI_Init+0x8a>
 8008dda:	f002 fad1 	bl	800b380 <LCD_GetXSizeMax>
 8008dde:	4604      	mov	r4, r0
 8008de0:	f002 fad1 	bl	800b386 <LCD_GetYSizeMax>
 8008de4:	4603      	mov	r3, r0
 8008de6:	4619      	mov	r1, r3
 8008de8:	4620      	mov	r0, r4
 8008dea:	f002 fad3 	bl	800b394 <LCD_SetDisplaySize>
 8008dee:	2100      	movs	r1, #0
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7ff fe4b 	bl	8008a8c <GUI_SetOrg>
 8008df6:	f005 fd65 	bl	800e8c4 <WM_Init>
 8008dfa:	f001 f811 	bl	8009e20 <GUITASK_CopyContext>
 8008dfe:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <GUI_Init+0xf4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d012      	beq.n	8008e2c <GUI_Init+0xc8>
 8008e06:	e00d      	b.n	8008e24 <GUI_Init+0xc0>
 8008e08:	4b13      	ldr	r3, [pc, #76]	; (8008e58 <GUI_Init+0xf4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <GUI_Init+0xb6>
 8008e12:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <GUI_Init+0xf4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4798      	blx	r3
 8008e1a:	4b0f      	ldr	r3, [pc, #60]	; (8008e58 <GUI_Init+0xf4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4a0d      	ldr	r2, [pc, #52]	; (8008e58 <GUI_Init+0xf4>)
 8008e22:	6013      	str	r3, [r2, #0]
 8008e24:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <GUI_Init+0xf4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ed      	bne.n	8008e08 <GUI_Init+0xa4>
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <GUI_Init+0xf8>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd90      	pop	{r4, r7, pc}
 8008e3c:	e0002000 	.word	0xe0002000
 8008e40:	40023008 	.word	0x40023008
 8008e44:	40023000 	.word	0x40023000
 8008e48:	f407a5c2 	.word	0xf407a5c2
 8008e4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e50:	20027b68 	.word	0x20027b68
 8008e54:	20000914 	.word	0x20000914
 8008e58:	2000098c 	.word	0x2000098c
 8008e5c:	20027b90 	.word	0x20027b90

08008e60 <GUI__RegisterExit>:
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <GUI__RegisterExit+0x24>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	605a      	str	r2, [r3, #4]
 8008e70:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <GUI__RegisterExit+0x24>)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20000988 	.word	0x20000988

08008e88 <GUI_DCACHE_Clear>:
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <GUI_DCACHE_Clear+0x20>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <GUI_DCACHE_Clear+0x18>
 8008e98:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <GUI_DCACHE_Clear+0x20>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20027b74 	.word	0x20027b74

08008eac <GUI_DEVICE__GetpDriver>:
 8008eac:	2801      	cmp	r0, #1
 8008eae:	dc09      	bgt.n	8008ec4 <GUI_DEVICE__GetpDriver+0x18>
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <GUI_DEVICE__GetpDriver+0x1c>)
 8008eb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008eb6:	b120      	cbz	r0, 8008ec2 <GUI_DEVICE__GetpDriver+0x16>
 8008eb8:	68c3      	ldr	r3, [r0, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	b11b      	cbz	r3, 8008ec6 <GUI_DEVICE__GetpDriver+0x1a>
 8008ebe:	6800      	ldr	r0, [r0, #0]
 8008ec0:	e7f9      	b.n	8008eb6 <GUI_DEVICE__GetpDriver+0xa>
 8008ec2:	4770      	bx	lr
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	4770      	bx	lr
 8008ec8:	20027bb0 	.word	0x20027bb0

08008ecc <GUI_DEVICE_Delete>:
 8008ecc:	f7ff ba08 	b.w	80082e0 <GUI_ALLOC_FreeFixedBlock>

08008ed0 <GUI_DEVICE_Create>:
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	460d      	mov	r5, r1
 8008ed8:	4617      	mov	r7, r2
 8008eda:	461c      	mov	r4, r3
 8008edc:	dd01      	ble.n	8008ee2 <GUI_DEVICE_Create+0x12>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee2:	201c      	movs	r0, #28
 8008ee4:	f7ff fae8 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d0f8      	beq.n	8008ede <GUI_DEVICE_Create+0xe>
 8008eec:	b10d      	cbz	r5, 8008ef2 <GUI_DEVICE_Create+0x22>
 8008eee:	6105      	str	r5, [r0, #16]
 8008ef0:	e009      	b.n	8008f06 <GUI_DEVICE_Create+0x36>
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <GUI_DEVICE_Create+0x48>)
 8008ef4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008ef8:	b129      	cbz	r1, 8008f06 <GUI_DEVICE_Create+0x36>
 8008efa:	680b      	ldr	r3, [r1, #0]
 8008efc:	b10b      	cbz	r3, 8008f02 <GUI_DEVICE_Create+0x32>
 8008efe:	4619      	mov	r1, r3
 8008f00:	e7fb      	b.n	8008efa <GUI_DEVICE_Create+0x2a>
 8008f02:	690b      	ldr	r3, [r1, #16]
 8008f04:	6103      	str	r3, [r0, #16]
 8008f06:	2300      	movs	r3, #0
 8008f08:	6083      	str	r3, [r0, #8]
 8008f0a:	6184      	str	r4, [r0, #24]
 8008f0c:	8287      	strh	r7, [r0, #20]
 8008f0e:	60c6      	str	r6, [r0, #12]
 8008f10:	6003      	str	r3, [r0, #0]
 8008f12:	6043      	str	r3, [r0, #4]
 8008f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20027bb0 	.word	0x20027bb0

08008f1c <GUI_DEVICE_Unlink>:
 8008f1c:	6981      	ldr	r1, [r0, #24]
 8008f1e:	4a0a      	ldr	r2, [pc, #40]	; (8008f48 <GUI_DEVICE_Unlink+0x2c>)
 8008f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f24:	4298      	cmp	r0, r3
 8008f26:	6803      	ldr	r3, [r0, #0]
 8008f28:	d104      	bne.n	8008f34 <GUI_DEVICE_Unlink+0x18>
 8008f2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008f2e:	b10b      	cbz	r3, 8008f34 <GUI_DEVICE_Unlink+0x18>
 8008f30:	2200      	movs	r2, #0
 8008f32:	605a      	str	r2, [r3, #4]
 8008f34:	6842      	ldr	r2, [r0, #4]
 8008f36:	b102      	cbz	r2, 8008f3a <GUI_DEVICE_Unlink+0x1e>
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	6803      	ldr	r3, [r0, #0]
 8008f3c:	b103      	cbz	r3, 8008f40 <GUI_DEVICE_Unlink+0x24>
 8008f3e:	605a      	str	r2, [r3, #4]
 8008f40:	2300      	movs	r3, #0
 8008f42:	6003      	str	r3, [r0, #0]
 8008f44:	6043      	str	r3, [r0, #4]
 8008f46:	4770      	bx	lr
 8008f48:	20027bb0 	.word	0x20027bb0

08008f4c <GUI_DEVICE_Link>:
 8008f4c:	b530      	push	{r4, r5, lr}
 8008f4e:	b908      	cbnz	r0, 8008f54 <GUI_DEVICE_Link+0x8>
 8008f50:	2001      	movs	r0, #1
 8008f52:	bd30      	pop	{r4, r5, pc}
 8008f54:	6984      	ldr	r4, [r0, #24]
 8008f56:	2c01      	cmp	r4, #1
 8008f58:	dcfa      	bgt.n	8008f50 <GUI_DEVICE_Link+0x4>
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <GUI_DEVICE_Link+0x7c>)
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	4294      	cmp	r4, r2
 8008f60:	bfa4      	itt	ge
 8008f62:	1c62      	addge	r2, r4, #1
 8008f64:	701a      	strbge	r2, [r3, #0]
 8008f66:	4a19      	ldr	r2, [pc, #100]	; (8008fcc <GUI_DEVICE_Link+0x80>)
 8008f68:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	b91b      	cbnz	r3, 8008f78 <GUI_DEVICE_Link+0x2c>
 8008f70:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8008f74:	4618      	mov	r0, r3
 8008f76:	bd30      	pop	{r4, r5, pc}
 8008f78:	685a      	ldr	r2, [r3, #4]
 8008f7a:	b10a      	cbz	r2, 8008f80 <GUI_DEVICE_Link+0x34>
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	e7fb      	b.n	8008f78 <GUI_DEVICE_Link+0x2c>
 8008f80:	68c2      	ldr	r2, [r0, #12]
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	68d9      	ldr	r1, [r3, #12]
 8008f86:	6809      	ldr	r1, [r1, #0]
 8008f88:	4291      	cmp	r1, r2
 8008f8a:	dd03      	ble.n	8008f94 <GUI_DEVICE_Link+0x48>
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f8      	bne.n	8008f84 <GUI_DEVICE_Link+0x38>
 8008f92:	e7dd      	b.n	8008f50 <GUI_DEVICE_Link+0x4>
 8008f94:	d109      	bne.n	8008faa <GUI_DEVICE_Link+0x5e>
 8008f96:	8a81      	ldrh	r1, [r0, #20]
 8008f98:	2901      	cmp	r1, #1
 8008f9a:	d106      	bne.n	8008faa <GUI_DEVICE_Link+0x5e>
 8008f9c:	6819      	ldr	r1, [r3, #0]
 8008f9e:	b121      	cbz	r1, 8008faa <GUI_DEVICE_Link+0x5e>
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	68c9      	ldr	r1, [r1, #12]
 8008fa4:	6809      	ldr	r1, [r1, #0]
 8008fa6:	428a      	cmp	r2, r1
 8008fa8:	ddf8      	ble.n	8008f9c <GUI_DEVICE_Link+0x50>
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	b112      	cbz	r2, 8008fb4 <GUI_DEVICE_Link+0x68>
 8008fae:	6010      	str	r0, [r2, #0]
 8008fb0:	6042      	str	r2, [r0, #4]
 8008fb2:	e001      	b.n	8008fb8 <GUI_DEVICE_Link+0x6c>
 8008fb4:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8008fb8:	6058      	str	r0, [r3, #4]
 8008fba:	4298      	cmp	r0, r3
 8008fbc:	bf08      	it	eq
 8008fbe:	2300      	moveq	r3, #0
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	bd30      	pop	{r4, r5, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20027b62 	.word	0x20027b62
 8008fcc:	20027bb0 	.word	0x20027bb0

08008fd0 <GUI_DEVICE_CreateAndLink>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	f7ff ff7c 	bl	8008ed0 <GUI_DEVICE_Create>
 8008fd8:	4604      	mov	r4, r0
 8008fda:	b148      	cbz	r0, 8008ff0 <GUI_DEVICE_CreateAndLink+0x20>
 8008fdc:	f7ff ffb6 	bl	8008f4c <GUI_DEVICE_Link>
 8008fe0:	68e3      	ldr	r3, [r4, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	b923      	cbnz	r3, 8008ff0 <GUI_DEVICE_CreateAndLink+0x20>
 8008fe6:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <GUI_DEVICE_CreateAndLink+0x24>)
 8008fe8:	3516      	adds	r5, #22
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20000014 	.word	0x20000014

08008ff8 <GUI_DEVICE_UnlinkTaskDevices>:
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	4770      	bx	lr

08008ffc <GUI_DEVICE_LinkDevices>:
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	b120      	cbz	r0, 800900a <GUI_DEVICE_LinkDevices+0xe>
 8009000:	6804      	ldr	r4, [r0, #0]
 8009002:	f7ff ffa3 	bl	8008f4c <GUI_DEVICE_Link>
 8009006:	4620      	mov	r0, r4
 8009008:	e7f9      	b.n	8008ffe <GUI_DEVICE_LinkDevices+0x2>
 800900a:	bd10      	pop	{r4, pc}

0800900c <GUI_DispString>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	4605      	mov	r5, r0
 8009012:	b085      	sub	sp, #20
 8009014:	2800      	cmp	r0, #0
 8009016:	f000 8084 	beq.w	8009122 <GUI_DispString+0x116>
 800901a:	4c43      	ldr	r4, [pc, #268]	; (8009128 <GUI_DispString+0x11c>)
 800901c:	f000 fe9e 	bl	8009d5c <GUI_Lock>
 8009020:	f009 fcf4 	bl	8012a0c <GUI_GetFontDistY>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	4607      	mov	r7, r0
 8009028:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 800902c:	f009 fcd0 	bl	80129d0 <GUI_GetYAdjust>
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8009034:	b286      	uxth	r6, r0
 8009036:	1b9b      	subs	r3, r3, r6
 8009038:	8493      	strh	r3, [r2, #36]	; 0x24
 800903a:	46a1      	mov	r9, r4
 800903c:	782b      	ldrb	r3, [r5, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d061      	beq.n	8009106 <GUI_DispString+0xfa>
 8009042:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009046:	4628      	mov	r0, r5
 8009048:	f009 fd64 	bl	8012b14 <GUI__GetLineNumChars>
 800904c:	4601      	mov	r1, r0
 800904e:	4682      	mov	sl, r0
 8009050:	4628      	mov	r0, r5
 8009052:	f009 fd89 	bl	8012b68 <GUI__GetLineDistX>
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	2b01      	cmp	r3, #1
 8009060:	d004      	beq.n	800906c <GUI_DispString+0x60>
 8009062:	2b02      	cmp	r3, #2
 8009064:	d104      	bne.n	8009070 <GUI_DispString+0x64>
 8009066:	fb90 f3f3 	sdiv	r3, r0, r3
 800906a:	e002      	b.n	8009072 <GUI_DispString+0x66>
 800906c:	4603      	mov	r3, r0
 800906e:	e000      	b.n	8009072 <GUI_DispString+0x66>
 8009070:	2300      	movs	r3, #0
 8009072:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8009074:	1acb      	subs	r3, r1, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	b219      	sxth	r1, r3
 800907a:	fa1f fb80 	uxth.w	fp, r0
 800907e:	8451      	strh	r1, [r2, #34]	; 0x22
 8009080:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009084:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8009088:	f8ad 200a 	strh.w	r2, [sp, #10]
 800908c:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 8009090:	440b      	add	r3, r1
 8009092:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009096:	3a01      	subs	r2, #1
 8009098:	b2bb      	uxth	r3, r7
 800909a:	441a      	add	r2, r3
 800909c:	f8ad 200e 	strh.w	r2, [sp, #14]
 80090a0:	4651      	mov	r1, sl
 80090a2:	aa02      	add	r2, sp, #8
 80090a4:	4628      	mov	r0, r5
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	f009 fd8e 	bl	8012bc8 <GUI__DispLine>
 80090ac:	6822      	ldr	r2, [r4, #0]
 80090ae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80090b2:	8491      	strh	r1, [r2, #36]	; 0x24
 80090b4:	4628      	mov	r0, r5
 80090b6:	4651      	mov	r1, sl
 80090b8:	f000 ff34 	bl	8009f24 <GUI_UC__NumChars2NumBytes>
 80090bc:	5c2a      	ldrb	r2, [r5, r0]
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	2a0a      	cmp	r2, #10
 80090c2:	eb05 0e00 	add.w	lr, r5, r0
 80090c6:	d001      	beq.n	80090cc <GUI_DispString+0xc0>
 80090c8:	2a0d      	cmp	r2, #13
 80090ca:	d112      	bne.n	80090f2 <GUI_DispString+0xe6>
 80090cc:	6822      	ldr	r2, [r4, #0]
 80090ce:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80090d0:	f001 0103 	and.w	r1, r1, #3
 80090d4:	3901      	subs	r1, #1
 80090d6:	2901      	cmp	r1, #1
 80090d8:	bf8a      	itet	hi
 80090da:	8c11      	ldrhhi	r1, [r2, #32]
 80090dc:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 80090e0:	8451      	strhhi	r1, [r2, #34]	; 0x22
 80090e2:	f89e 1000 	ldrb.w	r1, [lr]
 80090e6:	290a      	cmp	r1, #10
 80090e8:	d10a      	bne.n	8009100 <GUI_DispString+0xf4>
 80090ea:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80090ec:	440b      	add	r3, r1
 80090ee:	8493      	strh	r3, [r2, #36]	; 0x24
 80090f0:	e006      	b.n	8009100 <GUI_DispString+0xf4>
 80090f2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80090f6:	f8d9 3000 	ldr.w	r3, [r9]
 80090fa:	4483      	add	fp, r0
 80090fc:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 8009100:	f89e 3000 	ldrb.w	r3, [lr]
 8009104:	b953      	cbnz	r3, 800911c <GUI_DispString+0x110>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800910a:	4416      	add	r6, r2
 800910c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800910e:	849e      	strh	r6, [r3, #36]	; 0x24
 8009110:	f022 0203 	bic.w	r2, r2, #3
 8009114:	859a      	strh	r2, [r3, #44]	; 0x2c
 8009116:	f000 fe17 	bl	8009d48 <GUI_Unlock>
 800911a:	e002      	b.n	8009122 <GUI_DispString+0x116>
 800911c:	f10e 0501 	add.w	r5, lr, #1
 8009120:	e78c      	b.n	800903c <GUI_DispString+0x30>
 8009122:	b005      	add	sp, #20
 8009124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009128:	20000014 	.word	0x20000014

0800912c <GUI_DispStringAt>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	460e      	mov	r6, r1
 8009130:	4615      	mov	r5, r2
 8009132:	4604      	mov	r4, r0
 8009134:	f000 fe12 	bl	8009d5c <GUI_Lock>
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <GUI_DispStringAt+0x24>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4620      	mov	r0, r4
 800913e:	845e      	strh	r6, [r3, #34]	; 0x22
 8009140:	849d      	strh	r5, [r3, #36]	; 0x24
 8009142:	f7ff ff63 	bl	800900c <GUI_DispString>
 8009146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800914a:	f000 bdfd 	b.w	8009d48 <GUI_Unlock>
 800914e:	bf00      	nop
 8009150:	20000014 	.word	0x20000014

08009154 <GUI__DispStringInRect>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	460c      	mov	r4, r1
 800915c:	9001      	str	r0, [sp, #4]
 800915e:	4616      	mov	r6, r2
 8009160:	461f      	mov	r7, r3
 8009162:	f009 fc53 	bl	8012a0c <GUI_GetFontDistY>
 8009166:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800916a:	4680      	mov	r8, r0
 800916c:	b124      	cbz	r4, 8009178 <GUI__DispStringInRect+0x24>
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	6861      	ldr	r1, [r4, #4]
 8009172:	ab04      	add	r3, sp, #16
 8009174:	c303      	stmia	r3!, {r0, r1}
 8009176:	e002      	b.n	800917e <GUI__DispStringInRect+0x2a>
 8009178:	a804      	add	r0, sp, #16
 800917a:	f7ff fafc 	bl	8008776 <GUI_GetClientRect>
 800917e:	f016 0a0c 	ands.w	sl, r6, #12
 8009182:	d102      	bne.n	800918a <GUI__DispStringInRect+0x36>
 8009184:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 8009188:	e031      	b.n	80091ee <GUI__DispStringInRect+0x9a>
 800918a:	463c      	mov	r4, r7
 800918c:	2500      	movs	r5, #0
 800918e:	b18c      	cbz	r4, 80091b4 <GUI__DispStringInRect+0x60>
 8009190:	4621      	mov	r1, r4
 8009192:	9801      	ldr	r0, [sp, #4]
 8009194:	f009 fcbe 	bl	8012b14 <GUI__GetLineNumChars>
 8009198:	4601      	mov	r1, r0
 800919a:	1a24      	subs	r4, r4, r0
 800919c:	9801      	ldr	r0, [sp, #4]
 800919e:	f000 fec1 	bl	8009f24 <GUI_UC__NumChars2NumBytes>
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	4418      	add	r0, r3
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	a801      	add	r0, sp, #4
 80091aa:	3501      	adds	r5, #1
 80091ac:	f001 f9d5 	bl	800a55a <GUI__HandleEOLine>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0ec      	beq.n	800918e <GUI__DispStringInRect+0x3a>
 80091b4:	f1ba 0f08 	cmp.w	sl, #8
 80091b8:	d005      	beq.n	80091c6 <GUI__DispStringInRect+0x72>
 80091ba:	f1ba 0f0c 	cmp.w	sl, #12
 80091be:	d008      	beq.n	80091d2 <GUI__DispStringInRect+0x7e>
 80091c0:	f1ba 0f04 	cmp.w	sl, #4
 80091c4:	d112      	bne.n	80091ec <GUI__DispStringInRect+0x98>
 80091c6:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 80091ca:	fb08 4415 	mls	r4, r8, r5, r4
 80091ce:	3401      	adds	r4, #1
 80091d0:	e00d      	b.n	80091ee <GUI__DispStringInRect+0x9a>
 80091d2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80091d6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	3301      	adds	r3, #1
 80091de:	2402      	movs	r4, #2
 80091e0:	fb08 3515 	mls	r5, r8, r5, r3
 80091e4:	fb95 f5f4 	sdiv	r5, r5, r4
 80091e8:	18ac      	adds	r4, r5, r2
 80091ea:	e000      	b.n	80091ee <GUI__DispStringInRect+0x9a>
 80091ec:	2400      	movs	r4, #0
 80091ee:	f8cd 9004 	str.w	r9, [sp, #4]
 80091f2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800929c <GUI__DispStringInRect+0x148>
 80091f6:	2500      	movs	r5, #0
 80091f8:	f006 0603 	and.w	r6, r6, #3
 80091fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009200:	2f00      	cmp	r7, #0
 8009202:	d048      	beq.n	8009296 <GUI__DispStringInRect+0x142>
 8009204:	4639      	mov	r1, r7
 8009206:	9801      	ldr	r0, [sp, #4]
 8009208:	f009 fc84 	bl	8012b14 <GUI__GetLineNumChars>
 800920c:	4601      	mov	r1, r0
 800920e:	4682      	mov	sl, r0
 8009210:	1a3f      	subs	r7, r7, r0
 8009212:	9801      	ldr	r0, [sp, #4]
 8009214:	f009 fca8 	bl	8012b68 <GUI__GetLineDistX>
 8009218:	2e01      	cmp	r6, #1
 800921a:	d00f      	beq.n	800923c <GUI__DispStringInRect+0xe8>
 800921c:	2e02      	cmp	r6, #2
 800921e:	d003      	beq.n	8009228 <GUI__DispStringInRect+0xd4>
 8009220:	b986      	cbnz	r6, 8009244 <GUI__DispStringInRect+0xf0>
 8009222:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8009226:	e00d      	b.n	8009244 <GUI__DispStringInRect+0xf0>
 8009228:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 800922c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8009230:	1b5b      	subs	r3, r3, r5
 8009232:	1a1b      	subs	r3, r3, r0
 8009234:	fb93 f3f6 	sdiv	r3, r3, r6
 8009238:	441d      	add	r5, r3
 800923a:	e003      	b.n	8009244 <GUI__DispStringInRect+0xf0>
 800923c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8009240:	1a2d      	subs	r5, r5, r0
 8009242:	3501      	adds	r5, #1
 8009244:	f8d9 1000 	ldr.w	r1, [r9]
 8009248:	3801      	subs	r0, #1
 800924a:	b223      	sxth	r3, r4
 800924c:	b22a      	sxth	r2, r5
 800924e:	4428      	add	r0, r5
 8009250:	844a      	strh	r2, [r1, #34]	; 0x22
 8009252:	848b      	strh	r3, [r1, #36]	; 0x24
 8009254:	f8ad 2008 	strh.w	r2, [sp, #8]
 8009258:	4651      	mov	r1, sl
 800925a:	aa02      	add	r2, sp, #8
 800925c:	f8ad 000c 	strh.w	r0, [sp, #12]
 8009260:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009264:	9801      	ldr	r0, [sp, #4]
 8009266:	eb08 0304 	add.w	r3, r8, r4
 800926a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800926e:	f009 fcab 	bl	8012bc8 <GUI__DispLine>
 8009272:	4651      	mov	r1, sl
 8009274:	9801      	ldr	r0, [sp, #4]
 8009276:	f000 fe55 	bl	8009f24 <GUI_UC__NumChars2NumBytes>
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	f10d 0a18 	add.w	sl, sp, #24
 8009280:	4418      	add	r0, r3
 8009282:	f84a 0d14 	str.w	r0, [sl, #-20]!
 8009286:	f009 fbc1 	bl	8012a0c <GUI_GetFontDistY>
 800928a:	4404      	add	r4, r0
 800928c:	4650      	mov	r0, sl
 800928e:	f001 f964 	bl	800a55a <GUI__HandleEOLine>
 8009292:	2800      	cmp	r0, #0
 8009294:	d0b4      	beq.n	8009200 <GUI__DispStringInRect+0xac>
 8009296:	b006      	add	sp, #24
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	20000014 	.word	0x20000014

080092a0 <GUI_DispStringInRectMax>:
 80092a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092a4:	460c      	mov	r4, r1
 80092a6:	4617      	mov	r7, r2
 80092a8:	4698      	mov	r8, r3
 80092aa:	4606      	mov	r6, r0
 80092ac:	b1e0      	cbz	r0, 80092e8 <GUI_DispStringInRectMax+0x48>
 80092ae:	f000 fd55 	bl	8009d5c <GUI_Lock>
 80092b2:	b16c      	cbz	r4, 80092d0 <GUI_DispStringInRectMax+0x30>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f005 fe31 	bl	800ef1c <WM_SetUserClipRect>
 80092ba:	4605      	mov	r5, r0
 80092bc:	b148      	cbz	r0, 80092d2 <GUI_DispStringInRectMax+0x32>
 80092be:	4602      	mov	r2, r0
 80092c0:	4621      	mov	r1, r4
 80092c2:	4668      	mov	r0, sp
 80092c4:	f001 f979 	bl	800a5ba <GUI__IntersectRects>
 80092c8:	4668      	mov	r0, sp
 80092ca:	f005 fe27 	bl	800ef1c <WM_SetUserClipRect>
 80092ce:	e000      	b.n	80092d2 <GUI_DispStringInRectMax+0x32>
 80092d0:	4625      	mov	r5, r4
 80092d2:	4643      	mov	r3, r8
 80092d4:	463a      	mov	r2, r7
 80092d6:	4621      	mov	r1, r4
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff ff3b 	bl	8009154 <GUI__DispStringInRect>
 80092de:	4628      	mov	r0, r5
 80092e0:	f005 fe1c 	bl	800ef1c <WM_SetUserClipRect>
 80092e4:	f000 fd30 	bl	8009d48 <GUI_Unlock>
 80092e8:	b002      	add	sp, #8
 80092ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080092ee <GUI_DispStringInRect>:
 80092ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80092f2:	f7ff bfd5 	b.w	80092a0 <GUI_DispStringInRectMax>

080092f6 <GUI_GetStringDistX>:
 80092f6:	b510      	push	{r4, lr}
 80092f8:	4604      	mov	r4, r0
 80092fa:	f000 fe25 	bl	8009f48 <GUI__GetNumChars>
 80092fe:	4601      	mov	r1, r0
 8009300:	4620      	mov	r0, r4
 8009302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009306:	f009 bc2f 	b.w	8012b68 <GUI__GetLineDistX>
	...

0800930c <_SetRotation>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4604      	mov	r4, r0
 8009310:	f000 fd24 	bl	8009d5c <GUI_Lock>
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <_SetRotation+0x28>)
 8009316:	4a08      	ldr	r2, [pc, #32]	; (8009338 <_SetRotation+0x2c>)
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	b10c      	cbz	r4, 8009322 <_SetRotation+0x16>
 800931e:	2100      	movs	r1, #0
 8009320:	e001      	b.n	8009326 <_SetRotation+0x1a>
 8009322:	f102 0108 	add.w	r1, r2, #8
 8009326:	6151      	str	r1, [r2, #20]
 8009328:	601c      	str	r4, [r3, #0]
 800932a:	f000 fd0d 	bl	8009d48 <GUI_Unlock>
 800932e:	4628      	mov	r0, r5
 8009330:	bd38      	pop	{r3, r4, r5, pc}
 8009332:	bf00      	nop
 8009334:	20027b6c 	.word	0x20027b6c
 8009338:	20000014 	.word	0x20000014

0800933c <GUI_DispStringInRectEx>:
 800933c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009340:	b085      	sub	sp, #20
 8009342:	4607      	mov	r7, r0
 8009344:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009346:	460c      	mov	r4, r1
 8009348:	4690      	mov	r8, r2
 800934a:	4699      	mov	r9, r3
 800934c:	b916      	cbnz	r6, 8009354 <GUI_DispStringInRectEx+0x18>
 800934e:	f7ff ffa7 	bl	80092a0 <GUI_DispStringInRectMax>
 8009352:	e032      	b.n	80093ba <GUI_DispStringInRectEx+0x7e>
 8009354:	2300      	movs	r3, #0
 8009356:	9302      	str	r3, [sp, #8]
 8009358:	9303      	str	r3, [sp, #12]
 800935a:	f000 fcff 	bl	8009d5c <GUI_Lock>
 800935e:	b1b4      	cbz	r4, 800938e <GUI_DispStringInRectEx+0x52>
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	6861      	ldr	r1, [r4, #4]
 8009364:	4a16      	ldr	r2, [pc, #88]	; (80093c0 <GUI_DispStringInRectEx+0x84>)
 8009366:	ab02      	add	r3, sp, #8
 8009368:	c303      	stmia	r3!, {r0, r1}
 800936a:	ab02      	add	r3, sp, #8
 800936c:	cb03      	ldmia	r3!, {r0, r1}
 800936e:	6010      	str	r0, [r2, #0]
 8009370:	4620      	mov	r0, r4
 8009372:	6051      	str	r1, [r2, #4]
 8009374:	f005 fdd2 	bl	800ef1c <WM_SetUserClipRect>
 8009378:	4605      	mov	r5, r0
 800937a:	b148      	cbz	r0, 8009390 <GUI_DispStringInRectEx+0x54>
 800937c:	4602      	mov	r2, r0
 800937e:	4621      	mov	r1, r4
 8009380:	4668      	mov	r0, sp
 8009382:	f001 f91a 	bl	800a5ba <GUI__IntersectRects>
 8009386:	4668      	mov	r0, sp
 8009388:	f005 fdc8 	bl	800ef1c <WM_SetUserClipRect>
 800938c:	e000      	b.n	8009390 <GUI_DispStringInRectEx+0x54>
 800938e:	4625      	mov	r5, r4
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff ffbb 	bl	800930c <_SetRotation>
 8009396:	6873      	ldr	r3, [r6, #4]
 8009398:	4604      	mov	r4, r0
 800939a:	a802      	add	r0, sp, #8
 800939c:	4798      	blx	r3
 800939e:	464b      	mov	r3, r9
 80093a0:	4642      	mov	r2, r8
 80093a2:	a902      	add	r1, sp, #8
 80093a4:	4638      	mov	r0, r7
 80093a6:	f7ff fed5 	bl	8009154 <GUI__DispStringInRect>
 80093aa:	4628      	mov	r0, r5
 80093ac:	f005 fdb6 	bl	800ef1c <WM_SetUserClipRect>
 80093b0:	4620      	mov	r0, r4
 80093b2:	f7ff ffab 	bl	800930c <_SetRotation>
 80093b6:	f000 fcc7 	bl	8009d48 <GUI_Unlock>
 80093ba:	b005      	add	sp, #20
 80093bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093c0:	20027bc0 	.word	0x20027bc0

080093c4 <GL_DrawBitmap>:
 80093c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c8:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80093cc:	b086      	sub	sp, #24
 80093ce:	4604      	mov	r4, r0
 80093d0:	2000      	movs	r0, #0
 80093d2:	460e      	mov	r6, r1
 80093d4:	4617      	mov	r7, r2
 80093d6:	f7ff fb2f 	bl	8008a38 <GUI_SetDrawMode>
 80093da:	4605      	mov	r5, r0
 80093dc:	f1b8 0f00 	cmp.w	r8, #0
 80093e0:	d005      	beq.n	80093ee <GL_DrawBitmap+0x2a>
 80093e2:	f898 3004 	ldrb.w	r3, [r8, #4]
 80093e6:	b113      	cbz	r3, 80093ee <GL_DrawBitmap+0x2a>
 80093e8:	f040 0002 	orr.w	r0, r0, #2
 80093ec:	e001      	b.n	80093f2 <GL_DrawBitmap+0x2e>
 80093ee:	f025 0002 	bic.w	r0, r5, #2
 80093f2:	f7ff fb21 	bl	8008a38 <GUI_SetDrawMode>
 80093f6:	6921      	ldr	r1, [r4, #16]
 80093f8:	b169      	cbz	r1, 8009416 <GL_DrawBitmap+0x52>
 80093fa:	2001      	movs	r0, #1
 80093fc:	8863      	ldrh	r3, [r4, #2]
 80093fe:	8822      	ldrh	r2, [r4, #0]
 8009400:	9003      	str	r0, [sp, #12]
 8009402:	9002      	str	r0, [sp, #8]
 8009404:	68e0      	ldr	r0, [r4, #12]
 8009406:	9001      	str	r0, [sp, #4]
 8009408:	68a0      	ldr	r0, [r4, #8]
 800940a:	9000      	str	r0, [sp, #0]
 800940c:	680c      	ldr	r4, [r1, #0]
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	47a0      	blx	r4
 8009414:	e01f      	b.n	8009456 <GL_DrawBitmap+0x92>
 8009416:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8009468 <GL_DrawBitmap+0xa4>
 800941a:	4b12      	ldr	r3, [pc, #72]	; (8009464 <GL_DrawBitmap+0xa0>)
 800941c:	f8d8 2000 	ldr.w	r2, [r8]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	7c52      	ldrb	r2, [r2, #17]
 8009424:	68e0      	ldr	r0, [r4, #12]
 8009426:	4621      	mov	r1, r4
 8009428:	4798      	blx	r3
 800942a:	88e1      	ldrh	r1, [r4, #6]
 800942c:	b920      	cbnz	r0, 8009438 <GL_DrawBitmap+0x74>
 800942e:	2901      	cmp	r1, #1
 8009430:	bf04      	itt	eq
 8009432:	f8d8 3000 	ldreq.w	r3, [r8]
 8009436:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8009438:	8863      	ldrh	r3, [r4, #2]
 800943a:	8822      	ldrh	r2, [r4, #0]
 800943c:	9005      	str	r0, [sp, #20]
 800943e:	68a0      	ldr	r0, [r4, #8]
 8009440:	9004      	str	r0, [sp, #16]
 8009442:	88a0      	ldrh	r0, [r4, #4]
 8009444:	9102      	str	r1, [sp, #8]
 8009446:	2101      	movs	r1, #1
 8009448:	9003      	str	r0, [sp, #12]
 800944a:	9101      	str	r1, [sp, #4]
 800944c:	9100      	str	r1, [sp, #0]
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f001 fae1 	bl	800aa18 <LCD_DrawBitmap>
 8009456:	4628      	mov	r0, r5
 8009458:	b006      	add	sp, #24
 800945a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800945e:	f7ff baeb 	b.w	8008a38 <GUI_SetDrawMode>
 8009462:	bf00      	nop
 8009464:	20000008 	.word	0x20000008
 8009468:	20000014 	.word	0x20000014

0800946c <GUI_DrawBitmap>:
 800946c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800946e:	4606      	mov	r6, r0
 8009470:	4615      	mov	r5, r2
 8009472:	460c      	mov	r4, r1
 8009474:	f000 fc72 	bl	8009d5c <GUI_Lock>
 8009478:	4b11      	ldr	r3, [pc, #68]	; (80094c0 <GUI_DrawBitmap+0x54>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800947e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009480:	441d      	add	r5, r3
 8009482:	8833      	ldrh	r3, [r6, #0]
 8009484:	f8ad 5002 	strh.w	r5, [sp, #2]
 8009488:	4414      	add	r4, r2
 800948a:	3b01      	subs	r3, #1
 800948c:	4423      	add	r3, r4
 800948e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009492:	8873      	ldrh	r3, [r6, #2]
 8009494:	f8ad 4000 	strh.w	r4, [sp]
 8009498:	3b01      	subs	r3, #1
 800949a:	442b      	add	r3, r5
 800949c:	4668      	mov	r0, sp
 800949e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80094a2:	f004 ffe3 	bl	800e46c <WM__InitIVRSearch>
 80094a6:	b918      	cbnz	r0, 80094b0 <GUI_DrawBitmap+0x44>
 80094a8:	f000 fc4e 	bl	8009d48 <GUI_Unlock>
 80094ac:	b002      	add	sp, #8
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	462a      	mov	r2, r5
 80094b2:	4621      	mov	r1, r4
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff ff85 	bl	80093c4 <GL_DrawBitmap>
 80094ba:	f004 ff15 	bl	800e2e8 <WM__GetNextIVR>
 80094be:	e7f2      	b.n	80094a6 <GUI_DrawBitmap+0x3a>
 80094c0:	20000014 	.word	0x20000014

080094c4 <_DoClipping>:
 80094c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094c8:	680c      	ldr	r4, [r1, #0]
 80094ca:	681d      	ldr	r5, [r3, #0]
 80094cc:	f8df e098 	ldr.w	lr, [pc, #152]	; 8009568 <_DoClipping+0xa4>
 80094d0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80094d4:	f8de e000 	ldr.w	lr, [lr]
 80094d8:	f8d9 6000 	ldr.w	r6, [r9]
 80094dc:	f9be 800a 	ldrsh.w	r8, [lr, #10]
 80094e0:	4425      	add	r5, r4
 80094e2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80094e6:	6815      	ldr	r5, [r2, #0]
 80094e8:	462f      	mov	r7, r5
 80094ea:	6805      	ldr	r5, [r0, #0]
 80094ec:	4544      	cmp	r4, r8
 80094ee:	442f      	add	r7, r5
 80094f0:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80094f4:	da0b      	bge.n	800950e <_DoClipping+0x4a>
 80094f6:	f8c1 8000 	str.w	r8, [r1]
 80094fa:	9908      	ldr	r1, [sp, #32]
 80094fc:	ebc4 0408 	rsb	r4, r4, r8
 8009500:	4361      	muls	r1, r4
 8009502:	f021 0103 	bic.w	r1, r1, #3
 8009506:	440e      	add	r6, r1
 8009508:	6819      	ldr	r1, [r3, #0]
 800950a:	1b0c      	subs	r4, r1, r4
 800950c:	601c      	str	r4, [r3, #0]
 800950e:	f9be 100e 	ldrsh.w	r1, [lr, #14]
 8009512:	ebc1 010c 	rsb	r1, r1, ip
 8009516:	2900      	cmp	r1, #0
 8009518:	bfc2      	ittt	gt
 800951a:	681c      	ldrgt	r4, [r3, #0]
 800951c:	1a61      	subgt	r1, r4, r1
 800951e:	6019      	strgt	r1, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dc02      	bgt.n	800952c <_DoClipping+0x68>
 8009526:	2001      	movs	r0, #1
 8009528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800952c:	f9be 300c 	ldrsh.w	r3, [lr, #12]
 8009530:	1aeb      	subs	r3, r5, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	bfc2      	ittt	gt
 8009536:	6811      	ldrgt	r1, [r2, #0]
 8009538:	1acb      	subgt	r3, r1, r3
 800953a:	6013      	strgt	r3, [r2, #0]
 800953c:	6801      	ldr	r1, [r0, #0]
 800953e:	f9be 3008 	ldrsh.w	r3, [lr, #8]
 8009542:	4299      	cmp	r1, r3
 8009544:	da08      	bge.n	8009558 <_DoClipping+0x94>
 8009546:	1a5b      	subs	r3, r3, r1
 8009548:	6811      	ldr	r1, [r2, #0]
 800954a:	1ac9      	subs	r1, r1, r3
 800954c:	6011      	str	r1, [r2, #0]
 800954e:	6801      	ldr	r1, [r0, #0]
 8009550:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8009554:	440b      	add	r3, r1
 8009556:	6003      	str	r3, [r0, #0]
 8009558:	6813      	ldr	r3, [r2, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	dde3      	ble.n	8009526 <_DoClipping+0x62>
 800955e:	f8c9 6000 	str.w	r6, [r9]
 8009562:	2000      	movs	r0, #0
 8009564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009568:	20000014 	.word	0x20000014

0800956c <_DrawBitmapHW_8888>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	b089      	sub	sp, #36	; 0x24
 8009572:	9104      	str	r1, [sp, #16]
 8009574:	9205      	str	r2, [sp, #20]
 8009576:	9306      	str	r3, [sp, #24]
 8009578:	9003      	str	r0, [sp, #12]
 800957a:	f001 fe77 	bl	800b26c <LCD_GetColorIndex>
 800957e:	9e05      	ldr	r6, [sp, #20]
 8009580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	00b6      	lsls	r6, r6, #2
 8009586:	ab07      	add	r3, sp, #28
 8009588:	4607      	mov	r7, r0
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	9601      	str	r6, [sp, #4]
 800958e:	ab06      	add	r3, sp, #24
 8009590:	aa05      	add	r2, sp, #20
 8009592:	a904      	add	r1, sp, #16
 8009594:	a803      	add	r0, sp, #12
 8009596:	f7ff ff95 	bl	80094c4 <_DoClipping>
 800959a:	bb58      	cbnz	r0, 80095f4 <_DrawBitmapHW_8888+0x88>
 800959c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80095fc <_DrawBitmapHW_8888+0x90>
 80095a0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8009600 <_DrawBitmapHW_8888+0x94>
 80095a4:	4604      	mov	r4, r0
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	429c      	cmp	r4, r3
 80095aa:	da20      	bge.n	80095ee <_DrawBitmapHW_8888+0x82>
 80095ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095b0:	2500      	movs	r5, #0
 80095b2:	9b05      	ldr	r3, [sp, #20]
 80095b4:	429d      	cmp	r5, r3
 80095b6:	da15      	bge.n	80095e4 <_DrawBitmapHW_8888+0x78>
 80095b8:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80095bc:	f001 fb9e 	bl	800acfc <LCD_Color2Index>
 80095c0:	f8d9 3000 	ldr.w	r3, [r9]
 80095c4:	9a04      	ldr	r2, [sp, #16]
 80095c6:	7c5b      	ldrb	r3, [r3, #17]
 80095c8:	9903      	ldr	r1, [sp, #12]
 80095ca:	f858 e023 	ldr.w	lr, [r8, r3, lsl #2]
 80095ce:	f8de 300c 	ldr.w	r3, [lr, #12]
 80095d2:	4429      	add	r1, r5
 80095d4:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80095d8:	4422      	add	r2, r4
 80095da:	4603      	mov	r3, r0
 80095dc:	4670      	mov	r0, lr
 80095de:	47d8      	blx	fp
 80095e0:	3501      	adds	r5, #1
 80095e2:	e7e6      	b.n	80095b2 <_DrawBitmapHW_8888+0x46>
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	4433      	add	r3, r6
 80095e8:	9307      	str	r3, [sp, #28]
 80095ea:	3401      	adds	r4, #1
 80095ec:	e7db      	b.n	80095a6 <_DrawBitmapHW_8888+0x3a>
 80095ee:	4638      	mov	r0, r7
 80095f0:	f7ff fa10 	bl	8008a14 <GUI_SetColorIndex>
 80095f4:	b009      	add	sp, #36	; 0x24
 80095f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fa:	bf00      	nop
 80095fc:	20027bb0 	.word	0x20027bb0
 8009600:	20000014 	.word	0x20000014

08009604 <_DrawBitmap>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	b095      	sub	sp, #84	; 0x54
 800960a:	4ca4      	ldr	r4, [pc, #656]	; (800989c <_DrawBitmap+0x298>)
 800960c:	920f      	str	r2, [sp, #60]	; 0x3c
 800960e:	930e      	str	r3, [sp, #56]	; 0x38
 8009610:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009614:	9110      	str	r1, [sp, #64]	; 0x40
 8009616:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800961a:	fa5f fa83 	uxtb.w	sl, r3
 800961e:	9011      	str	r0, [sp, #68]	; 0x44
 8009620:	f7ff f8b9 	bl	8008796 <GUI_GetColor>
 8009624:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009626:	9313      	str	r3, [sp, #76]	; 0x4c
 8009628:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800962a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800962c:	900c      	str	r0, [sp, #48]	; 0x30
 800962e:	ea43 0602 	orr.w	r6, r3, r2
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009636:	7c58      	ldrb	r0, [r3, #17]
 8009638:	f001 fe9a 	bl	800b370 <GUI_GetpfColor2IndexEx>
 800963c:	00ab      	lsls	r3, r5, #2
 800963e:	2e01      	cmp	r6, #1
 8009640:	9007      	str	r0, [sp, #28]
 8009642:	46a3      	mov	fp, r4
 8009644:	9306      	str	r3, [sp, #24]
 8009646:	f040 80e0 	bne.w	800980a <_DrawBitmap+0x206>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	7c58      	ldrb	r0, [r3, #17]
 800964e:	f001 fe87 	bl	800b360 <GUI_GetpfIndex2ColorEx>
 8009652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009654:	4283      	cmp	r3, r0
 8009656:	f040 8165 	bne.w	8009924 <_DrawBitmap+0x320>
 800965a:	f00a 0902 	and.w	r9, sl, #2
 800965e:	f06f 4770 	mvn.w	r7, #4026531840	; 0xf0000000
 8009662:	fa5f f989 	uxtb.w	r9, r9
 8009666:	f8db 0000 	ldr.w	r0, [fp]
 800966a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800966c:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 8009670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009672:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8009676:	1acb      	subs	r3, r1, r3
 8009678:	4293      	cmp	r3, r2
 800967a:	dd03      	ble.n	8009684 <_DrawBitmap+0x80>
 800967c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800967e:	f7ff f9bd 	bl	80089fc <GUI_SetColor>
 8009682:	e1d5      	b.n	8009a30 <_DrawBitmap+0x42c>
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd0a      	ble.n	800969e <_DrawBitmap+0x9a>
 8009688:	9110      	str	r1, [sp, #64]	; 0x40
 800968a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800968c:	4359      	muls	r1, r3
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800969a:	930e      	str	r3, [sp, #56]	; 0x38
 800969c:	ddee      	ble.n	800967c <_DrawBitmap+0x78>
 800969e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80096a2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80096a4:	428b      	cmp	r3, r1
 80096a6:	dbe9      	blt.n	800967c <_DrawBitmap+0x78>
 80096a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80096aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80096ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096ae:	190a      	adds	r2, r1, r4
 80096b0:	3a01      	subs	r2, #1
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfc8      	it	gt
 80096b8:	1ae3      	subgt	r3, r4, r3
 80096ba:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80096be:	bfc8      	it	gt
 80096c0:	930e      	strgt	r3, [sp, #56]	; 0x38
 80096c2:	1ba3      	subs	r3, r4, r6
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dd05      	ble.n	80096d4 <_DrawBitmap+0xd0>
 80096c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80096ce:	9213      	str	r2, [sp, #76]	; 0x4c
 80096d0:	1aed      	subs	r5, r5, r3
 80096d2:	4626      	mov	r6, r4
 80096d4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80096d8:	429e      	cmp	r6, r3
 80096da:	dccf      	bgt.n	800967c <_DrawBitmap+0x78>
 80096dc:	19aa      	adds	r2, r5, r6
 80096de:	3a01      	subs	r2, #1
 80096e0:	4293      	cmp	r3, r2
 80096e2:	bfbc      	itt	lt
 80096e4:	1b9d      	sublt	r5, r3, r6
 80096e6:	3501      	addlt	r5, #1
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	ddc7      	ble.n	800967c <_DrawBitmap+0x78>
 80096ec:	4b6c      	ldr	r3, [pc, #432]	; (80098a0 <_DrawBitmap+0x29c>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b183      	cbz	r3, 8009714 <_DrawBitmap+0x110>
 80096f2:	2300      	movs	r3, #0
 80096f4:	9305      	str	r3, [sp, #20]
 80096f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9b06      	ldr	r3, [sp, #24]
 80096fc:	9303      	str	r3, [sp, #12]
 80096fe:	2320      	movs	r3, #32
 8009700:	9302      	str	r3, [sp, #8]
 8009702:	2301      	movs	r3, #1
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	462a      	mov	r2, r5
 800970a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800970c:	4630      	mov	r0, r6
 800970e:	f001 f983 	bl	800aa18 <LCD_DrawBitmap>
 8009712:	e18d      	b.n	8009a30 <_DrawBitmap+0x42c>
 8009714:	9307      	str	r3, [sp, #28]
 8009716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009718:	f1b9 0f00 	cmp.w	r9, #0
 800971c:	d00b      	beq.n	8009736 <_DrawBitmap+0x132>
 800971e:	2400      	movs	r4, #0
 8009720:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8009724:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009728:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800972c:	d10c      	bne.n	8009748 <_DrawBitmap+0x144>
 800972e:	3401      	adds	r4, #1
 8009730:	42a5      	cmp	r5, r4
 8009732:	d1f5      	bne.n	8009720 <_DrawBitmap+0x11c>
 8009734:	e008      	b.n	8009748 <_DrawBitmap+0x144>
 8009736:	464c      	mov	r4, r9
 8009738:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800973c:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8009740:	d102      	bne.n	8009748 <_DrawBitmap+0x144>
 8009742:	3401      	adds	r4, #1
 8009744:	42a5      	cmp	r5, r4
 8009746:	d1f7      	bne.n	8009738 <_DrawBitmap+0x134>
 8009748:	b1ac      	cbz	r4, 8009776 <_DrawBitmap+0x172>
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	9b06      	ldr	r3, [sp, #24]
 800974e:	9303      	str	r3, [sp, #12]
 8009750:	2320      	movs	r3, #32
 8009752:	9a07      	ldr	r2, [sp, #28]
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	2301      	movs	r3, #1
 8009758:	9205      	str	r2, [sp, #20]
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4630      	mov	r0, r6
 8009760:	4622      	mov	r2, r4
 8009762:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009764:	f001 f958 	bl	800aa18 <LCD_DrawBitmap>
 8009768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800976a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800976e:	4426      	add	r6, r4
 8009770:	9313      	str	r3, [sp, #76]	; 0x4c
 8009772:	1b2d      	subs	r5, r5, r4
 8009774:	e039      	b.n	80097ea <_DrawBitmap+0x1e6>
 8009776:	1d1a      	adds	r2, r3, #4
 8009778:	f1ba 0f02 	cmp.w	sl, #2
 800977c:	9213      	str	r2, [sp, #76]	; 0x4c
 800977e:	681c      	ldr	r4, [r3, #0]
 8009780:	d01b      	beq.n	80097ba <_DrawBitmap+0x1b6>
 8009782:	f1ba 0f03 	cmp.w	sl, #3
 8009786:	d00b      	beq.n	80097a0 <_DrawBitmap+0x19c>
 8009788:	f1ba 0f01 	cmp.w	sl, #1
 800978c:	d117      	bne.n	80097be <_DrawBitmap+0x1ba>
 800978e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8009792:	f004 23ff 	and.w	r3, r4, #4278255360	; 0xff00ff00
 8009796:	0624      	lsls	r4, r4, #24
 8009798:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
 800979c:	4314      	orrs	r4, r2
 800979e:	e00e      	b.n	80097be <_DrawBitmap+0x1ba>
 80097a0:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80097a4:	0622      	lsls	r2, r4, #24
 80097a6:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 80097aa:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 80097ae:	43e4      	mvns	r4, r4
 80097b0:	4313      	orrs	r3, r2
 80097b2:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 80097b6:	431c      	orrs	r4, r3
 80097b8:	e001      	b.n	80097be <_DrawBitmap+0x1ba>
 80097ba:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 80097be:	0e22      	lsrs	r2, r4, #24
 80097c0:	2aff      	cmp	r2, #255	; 0xff
 80097c2:	d010      	beq.n	80097e6 <_DrawBitmap+0x1e2>
 80097c4:	42a7      	cmp	r7, r4
 80097c6:	d004      	beq.n	80097d2 <_DrawBitmap+0x1ce>
 80097c8:	4620      	mov	r0, r4
 80097ca:	9208      	str	r2, [sp, #32]
 80097cc:	f001 faf0 	bl	800adb0 <LCD_SetColor>
 80097d0:	9a08      	ldr	r2, [sp, #32]
 80097d2:	4f34      	ldr	r7, [pc, #208]	; (80098a4 <_DrawBitmap+0x2a0>)
 80097d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80097d6:	683f      	ldr	r7, [r7, #0]
 80097d8:	43d2      	mvns	r2, r2
 80097da:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 80097de:	b2d2      	uxtb	r2, r2
 80097e0:	4630      	mov	r0, r6
 80097e2:	47b8      	blx	r7
 80097e4:	4627      	mov	r7, r4
 80097e6:	3601      	adds	r6, #1
 80097e8:	3d01      	subs	r5, #1
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	dc93      	bgt.n	8009716 <_DrawBitmap+0x112>
 80097ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097f0:	3301      	adds	r3, #1
 80097f2:	9310      	str	r3, [sp, #64]	; 0x40
 80097f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097f6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80097fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80097fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097fe:	3b01      	subs	r3, #1
 8009800:	930e      	str	r3, [sp, #56]	; 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	f47f af2f 	bne.w	8009666 <_DrawBitmap+0x62>
 8009808:	e738      	b.n	800967c <_DrawBitmap+0x78>
 800980a:	2300      	movs	r3, #0
 800980c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800980e:	9308      	str	r3, [sp, #32]
 8009810:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009816:	9908      	ldr	r1, [sp, #32]
 8009818:	4299      	cmp	r1, r3
 800981a:	f6bf af2f 	bge.w	800967c <_DrawBitmap+0x78>
 800981e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009820:	18fb      	adds	r3, r7, r3
 8009822:	930a      	str	r3, [sp, #40]	; 0x28
 8009824:	3b01      	subs	r3, #1
 8009826:	9309      	str	r3, [sp, #36]	; 0x24
 8009828:	4b1c      	ldr	r3, [pc, #112]	; (800989c <_DrawBitmap+0x298>)
 800982a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8009832:	4281      	cmp	r1, r0
 8009834:	dc6d      	bgt.n	8009912 <_DrawBitmap+0x30e>
 8009836:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800983a:	429f      	cmp	r7, r3
 800983c:	dc69      	bgt.n	8009912 <_DrawBitmap+0x30e>
 800983e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009840:	930d      	str	r3, [sp, #52]	; 0x34
 8009842:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009844:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009846:	f04f 0b00 	mov.w	fp, #0
 800984a:	441d      	add	r5, r3
 800984c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800984e:	1aeb      	subs	r3, r5, r3
 8009850:	930b      	str	r3, [sp, #44]	; 0x2c
 8009852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009854:	459b      	cmp	fp, r3
 8009856:	da5c      	bge.n	8009912 <_DrawBitmap+0x30e>
 8009858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800985a:	f1ba 0f02 	cmp.w	sl, #2
 800985e:	f853 402b 	ldr.w	r4, [r3, fp, lsl #2]
 8009862:	d021      	beq.n	80098a8 <_DrawBitmap+0x2a4>
 8009864:	f1ba 0f03 	cmp.w	sl, #3
 8009868:	d00b      	beq.n	8009882 <_DrawBitmap+0x27e>
 800986a:	f1ba 0f01 	cmp.w	sl, #1
 800986e:	d11d      	bne.n	80098ac <_DrawBitmap+0x2a8>
 8009870:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8009874:	f004 23ff 	and.w	r3, r4, #4278255360	; 0xff00ff00
 8009878:	0624      	lsls	r4, r4, #24
 800987a:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
 800987e:	430c      	orrs	r4, r1
 8009880:	e014      	b.n	80098ac <_DrawBitmap+0x2a8>
 8009882:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8009886:	0621      	lsls	r1, r4, #24
 8009888:	ea43 2111 	orr.w	r1, r3, r1, lsr #8
 800988c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8009890:	43e4      	mvns	r4, r4
 8009892:	430b      	orrs	r3, r1
 8009894:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8009898:	431c      	orrs	r4, r3
 800989a:	e007      	b.n	80098ac <_DrawBitmap+0x2a8>
 800989c:	20000014 	.word	0x20000014
 80098a0:	20027b98 	.word	0x20027b98
 80098a4:	20000018 	.word	0x20000018
 80098a8:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 80098ac:	42a2      	cmp	r2, r4
 80098ae:	ea4f 6614 	mov.w	r6, r4, lsr #24
 80098b2:	d002      	beq.n	80098ba <_DrawBitmap+0x2b6>
 80098b4:	4620      	mov	r0, r4
 80098b6:	f001 fa7b 	bl	800adb0 <LCD_SetColor>
 80098ba:	2eff      	cmp	r6, #255	; 0xff
 80098bc:	d023      	beq.n	8009906 <_DrawBitmap+0x302>
 80098be:	fa5f f886 	uxtb.w	r8, r6
 80098c2:	b1d6      	cbz	r6, 80098fa <_DrawBitmap+0x2f6>
 80098c4:	ea6f 0808 	mvn.w	r8, r8
 80098c8:	fa5f f888 	uxtb.w	r8, r8
 80098cc:	46b9      	mov	r9, r7
 80098ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	429d      	cmp	r5, r3
 80098d6:	dd0a      	ble.n	80098ee <_DrawBitmap+0x2ea>
 80098d8:	4b57      	ldr	r3, [pc, #348]	; (8009a38 <_DrawBitmap+0x434>)
 80098da:	9807      	ldr	r0, [sp, #28]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4642      	mov	r2, r8
 80098e0:	461e      	mov	r6, r3
 80098e2:	4649      	mov	r1, r9
 80098e4:	4623      	mov	r3, r4
 80098e6:	47b0      	blx	r6
 80098e8:	9b07      	ldr	r3, [sp, #28]
 80098ea:	3301      	adds	r3, #1
 80098ec:	e7f0      	b.n	80098d0 <_DrawBitmap+0x2cc>
 80098ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f0:	f109 0901 	add.w	r9, r9, #1
 80098f4:	454b      	cmp	r3, r9
 80098f6:	daea      	bge.n	80098ce <_DrawBitmap+0x2ca>
 80098f8:	e005      	b.n	8009906 <_DrawBitmap+0x302>
 80098fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80098fe:	1e6a      	subs	r2, r5, #1
 8009900:	4639      	mov	r1, r7
 8009902:	f000 ff71 	bl	800a7e8 <LCD_FillRect>
 8009906:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009908:	f10b 0b01 	add.w	fp, fp, #1
 800990c:	441d      	add	r5, r3
 800990e:	4622      	mov	r2, r4
 8009910:	e79c      	b.n	800984c <_DrawBitmap+0x248>
 8009912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009914:	9906      	ldr	r1, [sp, #24]
 8009916:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009918:	440b      	add	r3, r1
 800991a:	9313      	str	r3, [sp, #76]	; 0x4c
 800991c:	9b08      	ldr	r3, [sp, #32]
 800991e:	3301      	adds	r3, #1
 8009920:	9308      	str	r3, [sp, #32]
 8009922:	e777      	b.n	8009814 <_DrawBitmap+0x210>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	ab13      	add	r3, sp, #76	; 0x4c
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	aa0f      	add	r2, sp, #60	; 0x3c
 800992e:	ab0e      	add	r3, sp, #56	; 0x38
 8009930:	a910      	add	r1, sp, #64	; 0x40
 8009932:	a811      	add	r0, sp, #68	; 0x44
 8009934:	f7ff fdc6 	bl	80094c4 <_DoClipping>
 8009938:	2800      	cmp	r0, #0
 800993a:	d179      	bne.n	8009a30 <_DrawBitmap+0x42c>
 800993c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8009a40 <_DrawBitmap+0x43c>
 8009940:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
 8009944:	4606      	mov	r6, r0
 8009946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009948:	429e      	cmp	r6, r3
 800994a:	f6bf ae97 	bge.w	800967c <_DrawBitmap+0x78>
 800994e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009950:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009a38 <_DrawBitmap+0x434>
 8009954:	9308      	str	r3, [sp, #32]
 8009956:	2700      	movs	r7, #0
 8009958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800995a:	429f      	cmp	r7, r3
 800995c:	da62      	bge.n	8009a24 <_DrawBitmap+0x420>
 800995e:	9b08      	ldr	r3, [sp, #32]
 8009960:	f1ba 0f02 	cmp.w	sl, #2
 8009964:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009968:	d01b      	beq.n	80099a2 <_DrawBitmap+0x39e>
 800996a:	f1ba 0f03 	cmp.w	sl, #3
 800996e:	d00b      	beq.n	8009988 <_DrawBitmap+0x384>
 8009970:	f1ba 0f01 	cmp.w	sl, #1
 8009974:	d117      	bne.n	80099a6 <_DrawBitmap+0x3a2>
 8009976:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800997a:	f004 23ff 	and.w	r3, r4, #4278255360	; 0xff00ff00
 800997e:	0624      	lsls	r4, r4, #24
 8009980:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
 8009984:	4314      	orrs	r4, r2
 8009986:	e00e      	b.n	80099a6 <_DrawBitmap+0x3a2>
 8009988:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800998c:	0622      	lsls	r2, r4, #24
 800998e:	ea43 2212 	orr.w	r2, r3, r2, lsr #8
 8009992:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8009996:	43e4      	mvns	r4, r4
 8009998:	4313      	orrs	r3, r2
 800999a:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800999e:	431c      	orrs	r4, r3
 80099a0:	e001      	b.n	80099a6 <_DrawBitmap+0x3a2>
 80099a2:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 80099a6:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <_DrawBitmap+0x438>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	b193      	cbz	r3, 80099d2 <_DrawBitmap+0x3ce>
 80099ac:	9b07      	ldr	r3, [sp, #28]
 80099ae:	4620      	mov	r0, r4
 80099b0:	4798      	blx	r3
 80099b2:	f8db 3000 	ldr.w	r3, [fp]
 80099b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099b8:	7c5b      	ldrb	r3, [r3, #17]
 80099ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80099bc:	f858 e023 	ldr.w	lr, [r8, r3, lsl #2]
 80099c0:	f8de 300c 	ldr.w	r3, [lr, #12]
 80099c4:	4432      	add	r2, r6
 80099c6:	699c      	ldr	r4, [r3, #24]
 80099c8:	4439      	add	r1, r7
 80099ca:	4603      	mov	r3, r0
 80099cc:	4670      	mov	r0, lr
 80099ce:	47a0      	blx	r4
 80099d0:	e026      	b.n	8009a20 <_DrawBitmap+0x41c>
 80099d2:	0e23      	lsrs	r3, r4, #24
 80099d4:	2bff      	cmp	r3, #255	; 0xff
 80099d6:	d023      	beq.n	8009a20 <_DrawBitmap+0x41c>
 80099d8:	42a5      	cmp	r5, r4
 80099da:	d004      	beq.n	80099e6 <_DrawBitmap+0x3e2>
 80099dc:	4620      	mov	r0, r4
 80099de:	9309      	str	r3, [sp, #36]	; 0x24
 80099e0:	f001 f9e6 	bl	800adb0 <LCD_SetColor>
 80099e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	b15b      	cbz	r3, 8009a02 <_DrawBitmap+0x3fe>
 80099ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80099ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80099ee:	f8d9 5000 	ldr.w	r5, [r9]
 80099f2:	43d2      	mvns	r2, r2
 80099f4:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	4431      	add	r1, r6
 80099fc:	4438      	add	r0, r7
 80099fe:	47a8      	blx	r5
 8009a00:	e00d      	b.n	8009a1e <_DrawBitmap+0x41a>
 8009a02:	f8db 3000 	ldr.w	r3, [fp]
 8009a06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009a08:	7c5a      	ldrb	r2, [r3, #17]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0c:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68c2      	ldr	r2, [r0, #12]
 8009a14:	6995      	ldr	r5, [r2, #24]
 8009a16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a18:	4439      	add	r1, r7
 8009a1a:	4432      	add	r2, r6
 8009a1c:	47a8      	blx	r5
 8009a1e:	4625      	mov	r5, r4
 8009a20:	3701      	adds	r7, #1
 8009a22:	e799      	b.n	8009958 <_DrawBitmap+0x354>
 8009a24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a26:	9a06      	ldr	r2, [sp, #24]
 8009a28:	4413      	add	r3, r2
 8009a2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	e78a      	b.n	8009946 <_DrawBitmap+0x342>
 8009a30:	b015      	add	sp, #84	; 0x54
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	bf00      	nop
 8009a38:	20000018 	.word	0x20000018
 8009a3c:	20027b98 	.word	0x20027b98
 8009a40:	20027bb0 	.word	0x20027bb0

08009a44 <_DrawBitmap_8888>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	2400      	movs	r4, #0
 8009a4a:	9405      	str	r4, [sp, #20]
 8009a4c:	9404      	str	r4, [sp, #16]
 8009a4e:	4c06      	ldr	r4, [pc, #24]	; (8009a68 <_DrawBitmap_8888+0x24>)
 8009a50:	9403      	str	r4, [sp, #12]
 8009a52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a54:	9402      	str	r4, [sp, #8]
 8009a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a58:	9401      	str	r4, [sp, #4]
 8009a5a:	9c08      	ldr	r4, [sp, #32]
 8009a5c:	9400      	str	r4, [sp, #0]
 8009a5e:	f7ff fdd1 	bl	8009604 <_DrawBitmap>
 8009a62:	b006      	add	sp, #24
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	bf00      	nop
 8009a68:	0801293b 	.word	0x0801293b

08009a6c <_DrawBitmap_M8888I>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	2401      	movs	r4, #1
 8009a72:	9405      	str	r4, [sp, #20]
 8009a74:	9404      	str	r4, [sp, #16]
 8009a76:	4c06      	ldr	r4, [pc, #24]	; (8009a90 <_DrawBitmap_M8888I+0x24>)
 8009a78:	9403      	str	r4, [sp, #12]
 8009a7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009a7c:	9402      	str	r4, [sp, #8]
 8009a7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a80:	9401      	str	r4, [sp, #4]
 8009a82:	9c08      	ldr	r4, [sp, #32]
 8009a84:	9400      	str	r4, [sp, #0]
 8009a86:	f7ff fdbd 	bl	8009604 <_DrawBitmap>
 8009a8a:	b006      	add	sp, #24
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	bf00      	nop
 8009a90:	08008121 	.word	0x08008121

08009a94 <_SetPixelAlpha>:
 8009a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a98:	460f      	mov	r7, r1
 8009a9a:	461d      	mov	r5, r3
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	4690      	mov	r8, r2
 8009aa0:	f001 fd1c 	bl	800b4dc <LCD_GetPixelColor>
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <_SetPixelAlpha+0x40>)
 8009aa6:	4642      	mov	r2, r8
 8009aa8:	681c      	ldr	r4, [r3, #0]
 8009aaa:	4601      	mov	r1, r0
 8009aac:	4628      	mov	r0, r5
 8009aae:	47a0      	blx	r4
 8009ab0:	f001 f924 	bl	800acfc <LCD_Color2Index>
 8009ab4:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <_SetPixelAlpha+0x44>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	7c5a      	ldrb	r2, [r3, #17]
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <_SetPixelAlpha+0x48>)
 8009abc:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8009ac0:	68e3      	ldr	r3, [r4, #12]
 8009ac2:	699d      	ldr	r5, [r3, #24]
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4620      	mov	r0, r4
 8009acc:	46ac      	mov	ip, r5
 8009ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad2:	4760      	bx	ip
 8009ad4:	20000034 	.word	0x20000034
 8009ad8:	20000014 	.word	0x20000014
 8009adc:	20027bb0 	.word	0x20027bb0

08009ae0 <_OnExit>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4c0e      	ldr	r4, [pc, #56]	; (8009b1c <_OnExit+0x3c>)
 8009ae4:	4d0e      	ldr	r5, [pc, #56]	; (8009b20 <_OnExit+0x40>)
 8009ae6:	2208      	movs	r2, #8
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	2100      	movs	r1, #0
 8009aec:	4620      	mov	r0, r4
 8009aee:	4798      	blx	r3
 8009af0:	2208      	movs	r2, #8
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	2100      	movs	r1, #0
 8009af6:	18a0      	adds	r0, r4, r2
 8009af8:	4798      	blx	r3
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	2208      	movs	r2, #8
 8009afe:	2100      	movs	r1, #0
 8009b00:	f104 0010 	add.w	r0, r4, #16
 8009b04:	4798      	blx	r3
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	2208      	movs	r2, #8
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	f104 0018 	add.w	r0, r4, #24
 8009b10:	4798      	blx	r3
 8009b12:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <_OnExit+0x44>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	bd38      	pop	{r3, r4, r5, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200009b0 	.word	0x200009b0
 8009b20:	20000040 	.word	0x20000040
 8009b24:	20027b64 	.word	0x20027b64

08009b28 <GUI_MULTIBUF_BeginEx>:
 8009b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b2a:	4917      	ldr	r1, [pc, #92]	; (8009b88 <GUI_MULTIBUF_BeginEx+0x60>)
 8009b2c:	6a0b      	ldr	r3, [r1, #32]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	bf0c      	ite	eq
 8009b32:	4606      	moveq	r6, r0
 8009b34:	2600      	movne	r6, #0
 8009b36:	4b15      	ldr	r3, [pc, #84]	; (8009b8c <GUI_MULTIBUF_BeginEx+0x64>)
 8009b38:	579d      	ldrsb	r5, [r3, r6]
 8009b3a:	2d01      	cmp	r5, #1
 8009b3c:	dd21      	ble.n	8009b82 <GUI_MULTIBUF_BeginEx+0x5a>
 8009b3e:	eb01 0386 	add.w	r3, r1, r6, lsl #2
 8009b42:	691a      	ldr	r2, [r3, #16]
 8009b44:	1c54      	adds	r4, r2, #1
 8009b46:	611c      	str	r4, [r3, #16]
 8009b48:	b9da      	cbnz	r2, 8009b82 <GUI_MULTIBUF_BeginEx+0x5a>
 8009b4a:	689c      	ldr	r4, [r3, #8]
 8009b4c:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8009b50:	4611      	mov	r1, r2
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	3201      	adds	r2, #1
 8009b56:	42aa      	cmp	r2, r5
 8009b58:	bf08      	it	eq
 8009b5a:	460a      	moveq	r2, r1
 8009b5c:	42ba      	cmp	r2, r7
 8009b5e:	609a      	str	r2, [r3, #8]
 8009b60:	4616      	mov	r6, r2
 8009b62:	d0f6      	beq.n	8009b52 <GUI_MULTIBUF_BeginEx+0x2a>
 8009b64:	f7ff f9a2 	bl	8008eac <GUI_DEVICE__GetpDriver>
 8009b68:	9001      	str	r0, [sp, #4]
 8009b6a:	b150      	cbz	r0, 8009b82 <GUI_MULTIBUF_BeginEx+0x5a>
 8009b6c:	68c3      	ldr	r3, [r0, #12]
 8009b6e:	2121      	movs	r1, #33	; 0x21
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	a801      	add	r0, sp, #4
 8009b74:	4798      	blx	r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	b118      	cbz	r0, 8009b82 <GUI_MULTIBUF_BeginEx+0x5a>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	9801      	ldr	r0, [sp, #4]
 8009b80:	4798      	blx	r3
 8009b82:	b003      	add	sp, #12
 8009b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200009b0 	.word	0x200009b0
 8009b8c:	20027b60 	.word	0x20027b60

08009b90 <GUI_MULTIBUF_EndEx>:
 8009b90:	4b14      	ldr	r3, [pc, #80]	; (8009be4 <GUI_MULTIBUF_EndEx+0x54>)
 8009b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b94:	6a1a      	ldr	r2, [r3, #32]
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	bf0c      	ite	eq
 8009b9a:	4604      	moveq	r4, r0
 8009b9c:	2400      	movne	r4, #0
 8009b9e:	4a12      	ldr	r2, [pc, #72]	; (8009be8 <GUI_MULTIBUF_EndEx+0x58>)
 8009ba0:	5712      	ldrsb	r2, [r2, r4]
 8009ba2:	2a01      	cmp	r2, #1
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	dd1a      	ble.n	8009bde <GUI_MULTIBUF_EndEx+0x4e>
 8009ba8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	6123      	str	r3, [r4, #16]
 8009bb2:	b9a3      	cbnz	r3, 8009bde <GUI_MULTIBUF_EndEx+0x4e>
 8009bb4:	2001      	movs	r0, #1
 8009bb6:	40a8      	lsls	r0, r5
 8009bb8:	f7ff f966 	bl	8008e88 <GUI_DCACHE_Clear>
 8009bbc:	68a6      	ldr	r6, [r4, #8]
 8009bbe:	61a6      	str	r6, [r4, #24]
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f7ff f973 	bl	8008eac <GUI_DEVICE__GetpDriver>
 8009bc6:	9001      	str	r0, [sp, #4]
 8009bc8:	b148      	cbz	r0, 8009bde <GUI_MULTIBUF_EndEx+0x4e>
 8009bca:	68c3      	ldr	r3, [r0, #12]
 8009bcc:	2122      	movs	r1, #34	; 0x22
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	a801      	add	r0, sp, #4
 8009bd2:	4798      	blx	r3
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	b110      	cbz	r0, 8009bde <GUI_MULTIBUF_EndEx+0x4e>
 8009bd8:	4631      	mov	r1, r6
 8009bda:	9801      	ldr	r0, [sp, #4]
 8009bdc:	4798      	blx	r3
 8009bde:	b002      	add	sp, #8
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	bf00      	nop
 8009be4:	200009b0 	.word	0x200009b0
 8009be8:	20027b60 	.word	0x20027b60

08009bec <GUI_MULTIBUF_ConfirmEx>:
 8009bec:	4b08      	ldr	r3, [pc, #32]	; (8009c10 <GUI_MULTIBUF_ConfirmEx+0x24>)
 8009bee:	6a1a      	ldr	r2, [r3, #32]
 8009bf0:	2a00      	cmp	r2, #0
 8009bf2:	bf18      	it	ne
 8009bf4:	2000      	movne	r0, #0
 8009bf6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	6994      	ldr	r4, [r2, #24]
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	bfa2      	ittt	ge
 8009c02:	f843 1020 	strge.w	r1, [r3, r0, lsl #2]
 8009c06:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
 8009c0a:	6193      	strge	r3, [r2, #24]
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	bf00      	nop
 8009c10:	200009b0 	.word	0x200009b0

08009c14 <GUI_MULTIBUF_ConfigEx>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	4c0a      	ldr	r4, [pc, #40]	; (8009c40 <GUI_MULTIBUF_ConfigEx+0x2c>)
 8009c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	b92b      	cbnz	r3, 8009c2c <GUI_MULTIBUF_ConfigEx+0x18>
 8009c20:	4620      	mov	r0, r4
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <GUI_MULTIBUF_ConfigEx+0x30>)
 8009c24:	f840 3f24 	str.w	r3, [r0, #36]!
 8009c28:	f7ff f91a 	bl	8008e60 <GUI__RegisterExit>
 8009c2c:	6a23      	ldr	r3, [r4, #32]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bf18      	it	ne
 8009c32:	2500      	movne	r5, #0
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <GUI_MULTIBUF_ConfigEx+0x34>)
 8009c36:	2e01      	cmp	r6, #1
 8009c38:	bfb8      	it	lt
 8009c3a:	2601      	movlt	r6, #1
 8009c3c:	555e      	strb	r6, [r3, r5]
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	200009b0 	.word	0x200009b0
 8009c44:	08009ae1 	.word	0x08009ae1
 8009c48:	20027b60 	.word	0x20027b60

08009c4c <GUI_StoreKey>:
 8009c4c:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <GUI_StoreKey+0xc>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	b902      	cbnz	r2, 8009c54 <GUI_StoreKey+0x8>
 8009c52:	6018      	str	r0, [r3, #0]
 8009c54:	f000 b990 	b.w	8009f78 <GUI_SignalEvent>
 8009c58:	200009dc 	.word	0x200009dc

08009c5c <GUI_PollKeyMsg>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	f000 f87d 	bl	8009d5c <GUI_Lock>
 8009c62:	4a0b      	ldr	r2, [pc, #44]	; (8009c90 <GUI_PollKeyMsg+0x34>)
 8009c64:	6813      	ldr	r3, [r2, #0]
 8009c66:	6851      	ldr	r1, [r2, #4]
 8009c68:	428b      	cmp	r3, r1
 8009c6a:	d00b      	beq.n	8009c84 <GUI_PollKeyMsg+0x28>
 8009c6c:	4c09      	ldr	r4, [pc, #36]	; (8009c94 <GUI_PollKeyMsg+0x38>)
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c74:	bf14      	ite	ne
 8009c76:	3308      	addne	r3, #8
 8009c78:	3b50      	subeq	r3, #80	; 0x50
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	2401      	movs	r4, #1
 8009c7e:	f005 f837 	bl	800ecf0 <WM_OnKey>
 8009c82:	e000      	b.n	8009c86 <GUI_PollKeyMsg+0x2a>
 8009c84:	2400      	movs	r4, #0
 8009c86:	f000 f85f 	bl	8009d48 <GUI_Unlock>
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	bd10      	pop	{r4, pc}
 8009c8e:	bf00      	nop
 8009c90:	20000020 	.word	0x20000020
 8009c94:	20000a30 	.word	0x20000a30

08009c98 <GUI_GetLayerPosEx>:
 8009c98:	b570      	push	{r4, r5, r6, lr}
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	460e      	mov	r6, r1
 8009c9e:	4615      	mov	r5, r2
 8009ca0:	f000 f85c 	bl	8009d5c <GUI_Lock>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	4631      	mov	r1, r6
 8009caa:	f001 ffb7 	bl	800bc1c <LCD_GetPosEx>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	b110      	cbz	r0, 8009cb8 <GUI_GetLayerPosEx+0x20>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6033      	str	r3, [r6, #0]
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f000 f846 	bl	8009d48 <GUI_Unlock>
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}

08009cc0 <GUI_SelectLayer>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4d0b      	ldr	r5, [pc, #44]	; (8009cf0 <GUI_SelectLayer+0x30>)
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	7c5e      	ldrb	r6, [r3, #17]
 8009cca:	f000 f847 	bl	8009d5c <GUI_Lock>
 8009cce:	2c01      	cmp	r4, #1
 8009cd0:	d809      	bhi.n	8009ce6 <GUI_SelectLayer+0x26>
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f7ff f8ea 	bl	8008eac <GUI_DEVICE__GetpDriver>
 8009cd8:	b128      	cbz	r0, 8009ce6 <GUI_SelectLayer+0x26>
 8009cda:	682b      	ldr	r3, [r5, #0]
 8009cdc:	745c      	strb	r4, [r3, #17]
 8009cde:	f7fe fe75 	bl	80089cc <GUI_SelectLCD>
 8009ce2:	4b04      	ldr	r3, [pc, #16]	; (8009cf4 <GUI_SelectLayer+0x34>)
 8009ce4:	601c      	str	r4, [r3, #0]
 8009ce6:	f000 f82f 	bl	8009d48 <GUI_Unlock>
 8009cea:	4630      	mov	r0, r6
 8009cec:	bd70      	pop	{r4, r5, r6, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000014 	.word	0x20000014
 8009cf4:	20027bf4 	.word	0x20027bf4

08009cf8 <_GetTaskNo>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	4d0c      	ldr	r5, [pc, #48]	; (8009d2c <_GetTaskNo+0x34>)
 8009cfc:	4e0c      	ldr	r6, [pc, #48]	; (8009d30 <_GetTaskNo+0x38>)
 8009cfe:	2400      	movs	r4, #0
 8009d00:	277c      	movs	r7, #124	; 0x7c
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	429c      	cmp	r4, r3
 8009d06:	da0d      	bge.n	8009d24 <_GetTaskNo+0x2c>
 8009d08:	f7fa ff1c 	bl	8004b44 <GUI_X_GetTaskId>
 8009d0c:	fb07 f304 	mul.w	r3, r7, r4
 8009d10:	6832      	ldr	r2, [r6, #0]
 8009d12:	18d1      	adds	r1, r2, r3
 8009d14:	58d3      	ldr	r3, [r2, r3]
 8009d16:	4298      	cmp	r0, r3
 8009d18:	d006      	beq.n	8009d28 <_GetTaskNo+0x30>
 8009d1a:	b90b      	cbnz	r3, 8009d20 <_GetTaskNo+0x28>
 8009d1c:	6008      	str	r0, [r1, #0]
 8009d1e:	e003      	b.n	8009d28 <_GetTaskNo+0x30>
 8009d20:	3401      	adds	r4, #1
 8009d22:	e7ee      	b.n	8009d02 <_GetTaskNo+0xa>
 8009d24:	2000      	movs	r0, #0
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d28:	4620      	mov	r0, r4
 8009d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2c:	20000028 	.word	0x20000028
 8009d30:	20000a3c 	.word	0x20000a3c

08009d34 <_OnExit>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	4c03      	ldr	r4, [pc, #12]	; (8009d44 <_OnExit+0x10>)
 8009d38:	6820      	ldr	r0, [r4, #0]
 8009d3a:	f7fe fad1 	bl	80082e0 <GUI_ALLOC_FreeFixedBlock>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd10      	pop	{r4, pc}
 8009d44:	20000a3c 	.word	0x20000a3c

08009d48 <GUI_Unlock>:
 8009d48:	4a03      	ldr	r2, [pc, #12]	; (8009d58 <GUI_Unlock+0x10>)
 8009d4a:	6853      	ldr	r3, [r2, #4]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	6053      	str	r3, [r2, #4]
 8009d50:	b90b      	cbnz	r3, 8009d56 <GUI_Unlock+0xe>
 8009d52:	f7fa bedd 	b.w	8004b10 <GUI_X_Unlock>
 8009d56:	4770      	bx	lr
 8009d58:	20000a3c 	.word	0x20000a3c

08009d5c <GUI_Lock>:
 8009d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	4c19      	ldr	r4, [pc, #100]	; (8009dc8 <GUI_Lock+0x6c>)
 8009d62:	6863      	ldr	r3, [r4, #4]
 8009d64:	b123      	cbz	r3, 8009d70 <GUI_Lock+0x14>
 8009d66:	f7fa feed 	bl	8004b44 <GUI_X_GetTaskId>
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	d004      	beq.n	8009d7a <GUI_Lock+0x1e>
 8009d70:	f7fa feda 	bl	8004b28 <GUI_X_Lock>
 8009d74:	f7fa fee6 	bl	8004b44 <GUI_X_GetTaskId>
 8009d78:	60a0      	str	r0, [r4, #8]
 8009d7a:	6863      	ldr	r3, [r4, #4]
 8009d7c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8009dc8 <GUI_Lock+0x6c>
 8009d80:	3301      	adds	r3, #1
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	d11c      	bne.n	8009dc2 <GUI_Lock+0x66>
 8009d88:	f7ff ffb6 	bl	8009cf8 <_GetTaskNo>
 8009d8c:	4a0f      	ldr	r2, [pc, #60]	; (8009dcc <GUI_Lock+0x70>)
 8009d8e:	6853      	ldr	r3, [r2, #4]
 8009d90:	4298      	cmp	r0, r3
 8009d92:	4607      	mov	r7, r0
 8009d94:	4616      	mov	r6, r2
 8009d96:	d014      	beq.n	8009dc2 <GUI_Lock+0x66>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	db11      	blt.n	8009dc0 <GUI_Lock+0x64>
 8009d9c:	f8d8 5000 	ldr.w	r5, [r8]
 8009da0:	247c      	movs	r4, #124	; 0x7c
 8009da2:	fb04 5503 	mla	r5, r4, r3, r5
 8009da6:	f7ff f927 	bl	8008ff8 <GUI_DEVICE_UnlinkTaskDevices>
 8009daa:	f8d8 3000 	ldr.w	r3, [r8]
 8009dae:	67a8      	str	r0, [r5, #120]	; 0x78
 8009db0:	fb04 3407 	mla	r4, r4, r7, r3
 8009db4:	4b06      	ldr	r3, [pc, #24]	; (8009dd0 <GUI_Lock+0x74>)
 8009db6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8009db8:	1d22      	adds	r2, r4, #4
 8009dba:	601a      	str	r2, [r3, #0]
 8009dbc:	f7ff f91e 	bl	8008ffc <GUI_DEVICE_LinkDevices>
 8009dc0:	6077      	str	r7, [r6, #4]
 8009dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000a3c 	.word	0x20000a3c
 8009dcc:	20000028 	.word	0x20000028
 8009dd0:	20000014 	.word	0x20000014

08009dd4 <GUITASK_Init>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	4e0e      	ldr	r6, [pc, #56]	; (8009e10 <GUITASK_Init+0x3c>)
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <GUITASK_Init+0x40>)
 8009dda:	4d0f      	ldr	r5, [pc, #60]	; (8009e18 <GUITASK_Init+0x44>)
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f840 3f0c 	str.w	r3, [r0, #12]!
 8009de2:	f7ff f83d 	bl	8008e60 <GUI__RegisterExit>
 8009de6:	682c      	ldr	r4, [r5, #0]
 8009de8:	237c      	movs	r3, #124	; 0x7c
 8009dea:	435c      	muls	r4, r3
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7fe fb63 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 8009df2:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <GUITASK_Init+0x48>)
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4622      	mov	r2, r4
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4798      	blx	r3
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e02:	606b      	str	r3, [r5, #4]
 8009e04:	f7fa fe66 	bl	8004ad4 <GUI_X_InitOS>
 8009e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e0c:	f7ff bf74 	b.w	8009cf8 <_GetTaskNo>
 8009e10:	20000a3c 	.word	0x20000a3c
 8009e14:	08009d35 	.word	0x08009d35
 8009e18:	20000028 	.word	0x20000028
 8009e1c:	20000040 	.word	0x20000040

08009e20 <GUITASK_CopyContext>:
 8009e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e24:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009e8c <GUITASK_CopyContext+0x6c>
 8009e28:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009e84 <GUITASK_CopyContext+0x64>
 8009e2c:	f8df a058 	ldr.w	sl, [pc, #88]	; 8009e88 <GUITASK_CopyContext+0x68>
 8009e30:	2500      	movs	r5, #0
 8009e32:	f8d8 3000 	ldr.w	r3, [r8]
 8009e36:	429d      	cmp	r5, r3
 8009e38:	da17      	bge.n	8009e6a <GUITASK_CopyContext+0x4a>
 8009e3a:	f8d9 7000 	ldr.w	r7, [r9]
 8009e3e:	f8da 1000 	ldr.w	r1, [sl]
 8009e42:	267c      	movs	r6, #124	; 0x7c
 8009e44:	436e      	muls	r6, r5
 8009e46:	19bc      	adds	r4, r7, r6
 8009e48:	1d23      	adds	r3, r4, #4
 8009e4a:	2274      	movs	r2, #116	; 0x74
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f00e fa0b 	bl	8018268 <memcpy>
 8009e52:	2200      	movs	r2, #0
 8009e54:	51ba      	str	r2, [r7, r6]
 8009e56:	f104 020c 	add.w	r2, r4, #12
 8009e5a:	61a2      	str	r2, [r4, #24]
 8009e5c:	f104 0208 	add.w	r2, r4, #8
 8009e60:	63e0      	str	r0, [r4, #60]	; 0x3c
 8009e62:	6422      	str	r2, [r4, #64]	; 0x40
 8009e64:	6460      	str	r0, [r4, #68]	; 0x44
 8009e66:	3501      	adds	r5, #1
 8009e68:	e7e3      	b.n	8009e32 <GUITASK_CopyContext+0x12>
 8009e6a:	f7ff ff45 	bl	8009cf8 <_GetTaskNo>
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <GUITASK_CopyContext+0x64>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	237c      	movs	r3, #124	; 0x7c
 8009e74:	fb03 2000 	mla	r0, r3, r0, r2
 8009e78:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <GUITASK_CopyContext+0x68>)
 8009e7a:	3004      	adds	r0, #4
 8009e7c:	6018      	str	r0, [r3, #0]
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	bf00      	nop
 8009e84:	20000a3c 	.word	0x20000a3c
 8009e88:	20000014 	.word	0x20000014
 8009e8c:	20000028 	.word	0x20000028

08009e90 <GUI_Delay>:
 8009e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e94:	4605      	mov	r5, r0
 8009e96:	f7fa fe03 	bl	8004aa0 <GUI_X_GetTime>
 8009e9a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8009ef4 <GUI_Delay+0x64>
 8009e9e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8009ef8 <GUI_Delay+0x68>
 8009ea2:	4405      	add	r5, r0
 8009ea4:	f7fa fdfc 	bl	8004aa0 <GUI_X_GetTime>
 8009ea8:	1a2e      	subs	r6, r5, r0
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	dd1f      	ble.n	8009eee <GUI_Delay+0x5e>
 8009eae:	f7fe fd33 	bl	8008918 <GUI_Exec>
 8009eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb6:	429e      	cmp	r6, r3
 8009eb8:	bfa8      	it	ge
 8009eba:	461e      	movge	r6, r3
 8009ebc:	f7ff ff4e 	bl	8009d5c <GUI_Lock>
 8009ec0:	f8d9 4000 	ldr.w	r4, [r9]
 8009ec4:	f7fe fa46 	bl	8008354 <GUI_ALLOC_Lock>
 8009ec8:	4627      	mov	r7, r4
 8009eca:	b11f      	cbz	r7, 8009ed4 <GUI_Delay+0x44>
 8009ecc:	f7ff ff3c 	bl	8009d48 <GUI_Unlock>
 8009ed0:	3f01      	subs	r7, #1
 8009ed2:	e7fa      	b.n	8009eca <GUI_Delay+0x3a>
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7fa fdea 	bl	8004aae <GUI_X_Delay>
 8009eda:	b11c      	cbz	r4, 8009ee4 <GUI_Delay+0x54>
 8009edc:	f7ff ff3e 	bl	8009d5c <GUI_Lock>
 8009ee0:	3c01      	subs	r4, #1
 8009ee2:	e7fa      	b.n	8009eda <GUI_Delay+0x4a>
 8009ee4:	f7fe fa3e 	bl	8008364 <GUI_ALLOC_Unlock>
 8009ee8:	f7ff ff2e 	bl	8009d48 <GUI_Unlock>
 8009eec:	e7da      	b.n	8009ea4 <GUI_Delay+0x14>
 8009eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20000030 	.word	0x20000030
 8009ef8:	20000a40 	.word	0x20000a40

08009efc <GUI_UC__GetCharCodeInc>:
 8009efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efe:	4e08      	ldr	r6, [pc, #32]	; (8009f20 <GUI_UC__GetCharCodeInc+0x24>)
 8009f00:	6804      	ldr	r4, [r0, #0]
 8009f02:	6833      	ldr	r3, [r6, #0]
 8009f04:	4605      	mov	r5, r0
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4620      	mov	r0, r4
 8009f0a:	4798      	blx	r3
 8009f0c:	6833      	ldr	r3, [r6, #0]
 8009f0e:	4607      	mov	r7, r0
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	4620      	mov	r0, r4
 8009f14:	4798      	blx	r3
 8009f16:	4420      	add	r0, r4
 8009f18:	6028      	str	r0, [r5, #0]
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20027ba8 	.word	0x20027ba8

08009f24 <GUI_UC__NumChars2NumBytes>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	4f07      	ldr	r7, [pc, #28]	; (8009f44 <GUI_UC__NumChars2NumBytes+0x20>)
 8009f28:	4606      	mov	r6, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	2400      	movs	r4, #0
 8009f2e:	b13d      	cbz	r5, 8009f40 <GUI_UC__NumChars2NumBytes+0x1c>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	4630      	mov	r0, r6
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	4798      	blx	r3
 8009f38:	3d01      	subs	r5, #1
 8009f3a:	4406      	add	r6, r0
 8009f3c:	4404      	add	r4, r0
 8009f3e:	e7f6      	b.n	8009f2e <GUI_UC__NumChars2NumBytes+0xa>
 8009f40:	4620      	mov	r0, r4
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f44:	20027ba8 	.word	0x20027ba8

08009f48 <GUI__GetNumChars>:
 8009f48:	b513      	push	{r0, r1, r4, lr}
 8009f4a:	9001      	str	r0, [sp, #4]
 8009f4c:	b130      	cbz	r0, 8009f5c <GUI__GetNumChars+0x14>
 8009f4e:	2400      	movs	r4, #0
 8009f50:	a801      	add	r0, sp, #4
 8009f52:	f7ff ffd3 	bl	8009efc <GUI_UC__GetCharCodeInc>
 8009f56:	b110      	cbz	r0, 8009f5e <GUI__GetNumChars+0x16>
 8009f58:	3401      	adds	r4, #1
 8009f5a:	e7f9      	b.n	8009f50 <GUI__GetNumChars+0x8>
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	b002      	add	sp, #8
 8009f62:	bd10      	pop	{r4, pc}

08009f64 <_GetCharCode>:
 8009f64:	7800      	ldrb	r0, [r0, #0]
 8009f66:	4770      	bx	lr

08009f68 <_GetCharSize>:
 8009f68:	2001      	movs	r0, #1
 8009f6a:	4770      	bx	lr

08009f6c <_CalcSizeOfChar>:
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	4770      	bx	lr

08009f70 <_Encode>:
 8009f70:	7001      	strb	r1, [r0, #0]
 8009f72:	2001      	movs	r0, #1
 8009f74:	4770      	bx	lr
	...

08009f78 <GUI_SignalEvent>:
 8009f78:	4b02      	ldr	r3, [pc, #8]	; (8009f84 <GUI_SignalEvent+0xc>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	b103      	cbz	r3, 8009f80 <GUI_SignalEvent+0x8>
 8009f7e:	4718      	bx	r3
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20000a50 	.word	0x20000a50

08009f88 <GUI__MixColorsBulk>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	b087      	sub	sp, #28
 8009f8e:	4606      	mov	r6, r0
 8009f90:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8009f94:	9304      	str	r3, [sp, #16]
 8009f96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f98:	009d      	lsls	r5, r3, #2
 8009f9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	4b19      	ldr	r3, [pc, #100]	; (800a00c <GUI__MixColorsBulk+0x84>)
 8009fa8:	460f      	mov	r7, r1
 8009faa:	4690      	mov	r8, r2
 8009fac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009fae:	9901      	ldr	r1, [sp, #4]
 8009fb0:	4291      	cmp	r1, r2
 8009fb2:	d028      	beq.n	800a006 <GUI__MixColorsBulk+0x7e>
 8009fb4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8009fb8:	9702      	str	r7, [sp, #8]
 8009fba:	46c2      	mov	sl, r8
 8009fbc:	46b3      	mov	fp, r6
 8009fbe:	f85b 0b04 	ldr.w	r0, [fp], #4
 8009fc2:	9c02      	ldr	r4, [sp, #8]
 8009fc4:	9904      	ldr	r1, [sp, #16]
 8009fc6:	9305      	str	r3, [sp, #20]
 8009fc8:	0e02      	lsrs	r2, r0, #24
 8009fca:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8009fce:	434a      	muls	r2, r1
 8009fd0:	21ff      	movs	r1, #255	; 0xff
 8009fd2:	fbb2 f2f1 	udiv	r2, r2, r1
 8009fd6:	f854 1b04 	ldr.w	r1, [r4], #4
 8009fda:	9402      	str	r4, [sp, #8]
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	681c      	ldr	r4, [r3, #0]
 8009fe0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009fe4:	47a0      	blx	r4
 8009fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8009fea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8009fee:	f84a 0b04 	str.w	r0, [sl], #4
 8009ff2:	9b05      	ldr	r3, [sp, #20]
 8009ff4:	d1e3      	bne.n	8009fbe <GUI__MixColorsBulk+0x36>
 8009ff6:	9a03      	ldr	r2, [sp, #12]
 8009ff8:	4417      	add	r7, r2
 8009ffa:	9a01      	ldr	r2, [sp, #4]
 8009ffc:	3201      	adds	r2, #1
 8009ffe:	442e      	add	r6, r5
 800a000:	44a8      	add	r8, r5
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	e7d2      	b.n	8009fac <GUI__MixColorsBulk+0x24>
 800a006:	b007      	add	sp, #28
 800a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00c:	20000034 	.word	0x20000034

0800a010 <GUI__MixColors>:
 800a010:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800a014:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800a018:	0e0b      	lsrs	r3, r1, #24
 800a01a:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800a01e:	bf08      	it	eq
 800a020:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800a024:	b530      	push	{r4, r5, lr}
 800a026:	435a      	muls	r2, r3
 800a028:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800a02c:	23ff      	movs	r3, #255	; 0xff
 800a02e:	fbb2 f2f3 	udiv	r2, r2, r3
 800a032:	1a9d      	subs	r5, r3, r2
 800a034:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 800a038:	0a0c      	lsrs	r4, r1, #8
 800a03a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 800a03e:	436c      	muls	r4, r5
 800a040:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800a044:	fb02 4403 	mla	r4, r2, r3, r4
 800a048:	4342      	muls	r2, r0
 800a04a:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800a04e:	fb05 2103 	mla	r1, r5, r3, r2
 800a052:	0a09      	lsrs	r1, r1, #8
 800a054:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800a058:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800a05c:	ea44 0001 	orr.w	r0, r4, r1
 800a060:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800a064:	bd30      	pop	{r4, r5, pc}
	...

0800a068 <_OnExit>:
 800a068:	b510      	push	{r4, lr}
 800a06a:	4c08      	ldr	r4, [pc, #32]	; (800a08c <_OnExit+0x24>)
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	f7fe f937 	bl	80082e0 <GUI_ALLOC_FreeFixedBlock>
 800a072:	6860      	ldr	r0, [r4, #4]
 800a074:	f7fe f934 	bl	80082e0 <GUI_ALLOC_FreeFixedBlock>
 800a078:	68a0      	ldr	r0, [r4, #8]
 800a07a:	f7fe f931 	bl	80082e0 <GUI_ALLOC_FreeFixedBlock>
 800a07e:	2300      	movs	r3, #0
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	6063      	str	r3, [r4, #4]
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	60e3      	str	r3, [r4, #12]
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	bd10      	pop	{r4, pc}
 800a08c:	20000a58 	.word	0x20000a58

0800a090 <GUI__GetAlphaBuffer>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	4c29      	ldr	r4, [pc, #164]	; (800a13c <GUI__GetAlphaBuffer+0xac>)
 800a096:	461d      	mov	r5, r3
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	4606      	mov	r6, r0
 800a09c:	4688      	mov	r8, r1
 800a09e:	4617      	mov	r7, r2
 800a0a0:	b93b      	cbnz	r3, 800a0b2 <GUI__GetAlphaBuffer+0x22>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	6123      	str	r3, [r4, #16]
 800a0a8:	4b25      	ldr	r3, [pc, #148]	; (800a140 <GUI__GetAlphaBuffer+0xb0>)
 800a0aa:	f840 3f14 	str.w	r3, [r0, #20]!
 800a0ae:	f7fe fed7 	bl	8008e60 <GUI__RegisterExit>
 800a0b2:	68e3      	ldr	r3, [r4, #12]
 800a0b4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800a13c <GUI__GetAlphaBuffer+0xac>
 800a0b8:	b943      	cbnz	r3, 800a0cc <GUI__GetAlphaBuffer+0x3c>
 800a0ba:	4b22      	ldr	r3, [pc, #136]	; (800a144 <GUI__GetAlphaBuffer+0xb4>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f8c9 300c 	str.w	r3, [r9, #12]
 800a0c2:	b91b      	cbnz	r3, 800a0cc <GUI__GetAlphaBuffer+0x3c>
 800a0c4:	f001 f962 	bl	800b38c <LCD_GetVXSizeMax>
 800a0c8:	f8c9 000c 	str.w	r0, [r9, #12]
 800a0cc:	b10d      	cbz	r5, 800a0d2 <GUI__GetAlphaBuffer+0x42>
 800a0ce:	68e3      	ldr	r3, [r4, #12]
 800a0d0:	602b      	str	r3, [r5, #0]
 800a0d2:	b17e      	cbz	r6, 800a0f4 <GUI__GetAlphaBuffer+0x64>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	4d19      	ldr	r5, [pc, #100]	; (800a13c <GUI__GetAlphaBuffer+0xac>)
 800a0d8:	b943      	cbnz	r3, 800a0ec <GUI__GetAlphaBuffer+0x5c>
 800a0da:	68e8      	ldr	r0, [r5, #12]
 800a0dc:	0080      	lsls	r0, r0, #2
 800a0de:	f7fe f9eb 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 800a0e2:	6028      	str	r0, [r5, #0]
 800a0e4:	fab0 f580 	clz	r5, r0
 800a0e8:	096d      	lsrs	r5, r5, #5
 800a0ea:	e000      	b.n	800a0ee <GUI__GetAlphaBuffer+0x5e>
 800a0ec:	2500      	movs	r5, #0
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	6033      	str	r3, [r6, #0]
 800a0f2:	e000      	b.n	800a0f6 <GUI__GetAlphaBuffer+0x66>
 800a0f4:	4635      	mov	r5, r6
 800a0f6:	f1b8 0f00 	cmp.w	r8, #0
 800a0fa:	d00d      	beq.n	800a118 <GUI__GetAlphaBuffer+0x88>
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	4e0f      	ldr	r6, [pc, #60]	; (800a13c <GUI__GetAlphaBuffer+0xac>)
 800a100:	b93b      	cbnz	r3, 800a112 <GUI__GetAlphaBuffer+0x82>
 800a102:	68f0      	ldr	r0, [r6, #12]
 800a104:	0080      	lsls	r0, r0, #2
 800a106:	f7fe f9d7 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	6070      	str	r0, [r6, #4]
 800a10e:	bf08      	it	eq
 800a110:	2501      	moveq	r5, #1
 800a112:	6863      	ldr	r3, [r4, #4]
 800a114:	f8c8 3000 	str.w	r3, [r8]
 800a118:	b167      	cbz	r7, 800a134 <GUI__GetAlphaBuffer+0xa4>
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	4e07      	ldr	r6, [pc, #28]	; (800a13c <GUI__GetAlphaBuffer+0xac>)
 800a11e:	b93b      	cbnz	r3, 800a130 <GUI__GetAlphaBuffer+0xa0>
 800a120:	68f0      	ldr	r0, [r6, #12]
 800a122:	0080      	lsls	r0, r0, #2
 800a124:	f7fe f9c8 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 800a128:	2800      	cmp	r0, #0
 800a12a:	60b0      	str	r0, [r6, #8]
 800a12c:	bf08      	it	eq
 800a12e:	2501      	moveq	r5, #1
 800a130:	68a3      	ldr	r3, [r4, #8]
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	4628      	mov	r0, r5
 800a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a13a:	bf00      	nop
 800a13c:	20000a58 	.word	0x20000a58
 800a140:	0800a069 	.word	0x0800a069
 800a144:	20027bb8 	.word	0x20027bb8

0800a148 <GUI__DoAlphaBlending>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	b093      	sub	sp, #76	; 0x4c
 800a14e:	2400      	movs	r4, #0
 800a150:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800a152:	900a      	str	r0, [sp, #40]	; 0x28
 800a154:	910b      	str	r1, [sp, #44]	; 0x2c
 800a156:	4692      	mov	sl, r2
 800a158:	461e      	mov	r6, r3
 800a15a:	603c      	str	r4, [r7, #0]
 800a15c:	ab11      	add	r3, sp, #68	; 0x44
 800a15e:	4622      	mov	r2, r4
 800a160:	a910      	add	r1, sp, #64	; 0x40
 800a162:	a80f      	add	r0, sp, #60	; 0x3c
 800a164:	f7ff ff94 	bl	800a090 <GUI__GetAlphaBuffer>
 800a168:	4605      	mov	r5, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f040 80c5 	bne.w	800a2fa <GUI__DoAlphaBlending+0x1b2>
 800a170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a172:	4c64      	ldr	r4, [pc, #400]	; (800a304 <GUI__DoAlphaBlending+0x1bc>)
 800a174:	42b3      	cmp	r3, r6
 800a176:	bfa8      	it	ge
 800a178:	4633      	movge	r3, r6
 800a17a:	9309      	str	r3, [sp, #36]	; 0x24
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	7c58      	ldrb	r0, [r3, #17]
 800a180:	4b61      	ldr	r3, [pc, #388]	; (800a308 <GUI__DoAlphaBlending+0x1c0>)
 800a182:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a186:	9306      	str	r3, [sp, #24]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	930c      	str	r3, [sp, #48]	; 0x30
 800a18c:	f001 f8ca 	bl	800b324 <GUI_GetBitsPerPixelEx>
 800a190:	6823      	ldr	r3, [r4, #0]
 800a192:	9007      	str	r0, [sp, #28]
 800a194:	7c58      	ldrb	r0, [r3, #17]
 800a196:	f001 f8e3 	bl	800b360 <GUI_GetpfIndex2ColorEx>
 800a19a:	4b5c      	ldr	r3, [pc, #368]	; (800a30c <GUI__DoAlphaBlending+0x1c4>)
 800a19c:	9003      	str	r0, [sp, #12]
 800a19e:	4298      	cmp	r0, r3
 800a1a0:	d005      	beq.n	800a1ae <GUI__DoAlphaBlending+0x66>
 800a1a2:	4b5b      	ldr	r3, [pc, #364]	; (800a310 <GUI__DoAlphaBlending+0x1c8>)
 800a1a4:	1ac3      	subs	r3, r0, r3
 800a1a6:	bf18      	it	ne
 800a1a8:	2301      	movne	r3, #1
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	e000      	b.n	800a1b0 <GUI__DoAlphaBlending+0x68>
 800a1ae:	9505      	str	r5, [sp, #20]
 800a1b0:	2600      	movs	r6, #0
 800a1b2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800a1b6:	4635      	mov	r5, r6
 800a1b8:	4653      	mov	r3, sl
 800a1ba:	f853 0b04 	ldr.w	r0, [r3], #4
 800a1be:	930d      	str	r3, [sp, #52]	; 0x34
 800a1c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a1c2:	4798      	blx	r3
 800a1c4:	0e03      	lsrs	r3, r0, #24
 800a1c6:	9004      	str	r0, [sp, #16]
 800a1c8:	9308      	str	r3, [sp, #32]
 800a1ca:	f000 8084 	beq.w	800a2d6 <GUI__DoAlphaBlending+0x18e>
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	d139      	bne.n	800a246 <GUI__DoAlphaBlending+0xfe>
 800a1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1d6:	eb03 0906 	add.w	r9, r3, r6
 800a1da:	4b4a      	ldr	r3, [pc, #296]	; (800a304 <GUI__DoAlphaBlending+0x1bc>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a1e2:	454b      	cmp	r3, r9
 800a1e4:	bfc4      	itt	gt
 800a1e6:	ebc9 0503 	rsbgt	r5, r9, r3
 800a1ea:	4699      	movgt	r9, r3
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ee:	eb03 0802 	add.w	r8, r3, r2
 800a1f2:	9b06      	ldr	r3, [sp, #24]
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	19ac      	adds	r4, r5, r6
 800a1f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1fa:	00a4      	lsls	r4, r4, #2
 800a1fc:	4423      	add	r3, r4
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a202:	4648      	mov	r0, r9
 800a204:	4619      	mov	r1, r3
 800a206:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800a20a:	f001 fa41 	bl	800b690 <GUI_ReadRectEx>
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a212:	2b17      	cmp	r3, #23
 800a214:	dc07      	bgt.n	800a226 <GUI__DoAlphaBlending+0xde>
 800a216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a218:	9a07      	ldr	r2, [sp, #28]
 800a21a:	ebc5 010b 	rsb	r1, r5, fp
 800a21e:	4420      	add	r0, r4
 800a220:	f000 f889 	bl	800a336 <GUI__ExpandPixelIndicesEx>
 800a224:	e001      	b.n	800a22a <GUI__DoAlphaBlending+0xe2>
 800a226:	9b05      	ldr	r3, [sp, #20]
 800a228:	b90b      	cbnz	r3, 800a22e <GUI__DoAlphaBlending+0xe6>
 800a22a:	2501      	movs	r5, #1
 800a22c:	e00b      	b.n	800a246 <GUI__DoAlphaBlending+0xfe>
 800a22e:	4404      	add	r4, r0
 800a230:	ebc9 0808 	rsb	r8, r9, r8
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	9b03      	ldr	r3, [sp, #12]
 800a238:	4798      	blx	r3
 800a23a:	f1b8 0801 	subs.w	r8, r8, #1
 800a23e:	f844 0b04 	str.w	r0, [r4], #4
 800a242:	d1f7      	bne.n	800a234 <GUI__DoAlphaBlending+0xec>
 800a244:	e7f1      	b.n	800a22a <GUI__DoAlphaBlending+0xe2>
 800a246:	4b33      	ldr	r3, [pc, #204]	; (800a314 <GUI__DoAlphaBlending+0x1cc>)
 800a248:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800a24c:	00b4      	lsls	r4, r6, #2
 800a24e:	f1b8 0f00 	cmp.w	r8, #0
 800a252:	d027      	beq.n	800a2a4 <GUI__DoAlphaBlending+0x15c>
 800a254:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a256:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a258:	192a      	adds	r2, r5, r4
 800a25a:	4421      	add	r1, r4
 800a25c:	910f      	str	r1, [sp, #60]	; 0x3c
 800a25e:	465b      	mov	r3, fp
 800a260:	9210      	str	r2, [sp, #64]	; 0x40
 800a262:	4650      	mov	r0, sl
 800a264:	47c0      	blx	r8
 800a266:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a268:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a26a:	2300      	movs	r3, #0
 800a26c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800a270:	f000 427f 	and.w	r2, r0, #4278190080	; 0xff000000
 800a274:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a278:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800a27c:	d102      	bne.n	800a284 <GUI__DoAlphaBlending+0x13c>
 800a27e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a282:	e006      	b.n	800a292 <GUI__DoAlphaBlending+0x14a>
 800a284:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800a288:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800a28c:	bf08      	it	eq
 800a28e:	f841 0023 	streq.w	r0, [r1, r3, lsl #2]
 800a292:	3301      	adds	r3, #1
 800a294:	459b      	cmp	fp, r3
 800a296:	d1e9      	bne.n	800a26c <GUI__DoAlphaBlending+0x124>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	9510      	str	r5, [sp, #64]	; 0x40
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	e028      	b.n	800a2f6 <GUI__DoAlphaBlending+0x1ae>
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800a2aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800a2ae:	2bff      	cmp	r3, #255	; 0xff
 800a2b0:	d104      	bne.n	800a2bc <GUI__DoAlphaBlending+0x174>
 800a2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b4:	591b      	ldr	r3, [r3, r4]
 800a2b6:	f848 3004 	str.w	r3, [r8, r4]
 800a2ba:	e014      	b.n	800a2e6 <GUI__DoAlphaBlending+0x19e>
 800a2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2be:	5919      	ldr	r1, [r3, r4]
 800a2c0:	9b04      	ldr	r3, [sp, #16]
 800a2c2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <GUI__DoAlphaBlending+0x1d0>)
 800a2c8:	43d2      	mvns	r2, r2
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4798      	blx	r3
 800a2d0:	f848 0004 	str.w	r0, [r8, r4]
 800a2d4:	e003      	b.n	800a2de <GUI__DoAlphaBlending+0x196>
 800a2d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2d8:	9a04      	ldr	r2, [sp, #16]
 800a2da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	f043 0301 	orr.w	r3, r3, #1
 800a2e4:	603b      	str	r3, [r7, #0]
 800a2e6:	f1bb 0b01 	subs.w	fp, fp, #1
 800a2ea:	f106 0601 	add.w	r6, r6, #1
 800a2ee:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800a2f2:	f47f af61 	bne.w	800a1b8 <GUI__DoAlphaBlending+0x70>
 800a2f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2f8:	e000      	b.n	800a2fc <GUI__DoAlphaBlending+0x1b4>
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	b013      	add	sp, #76	; 0x4c
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	bf00      	nop
 800a304:	20000014 	.word	0x20000014
 800a308:	20027bb0 	.word	0x20027bb0
 800a30c:	0801293b 	.word	0x0801293b
 800a310:	0801293d 	.word	0x0801293d
 800a314:	20000a58 	.word	0x20000a58
 800a318:	20000034 	.word	0x20000034

0800a31c <GUI__AllocAlphaBuffer>:
 800a31c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a31e:	b908      	cbnz	r0, 800a324 <GUI__AllocAlphaBuffer+0x8>
 800a320:	4602      	mov	r2, r0
 800a322:	e000      	b.n	800a326 <GUI__AllocAlphaBuffer+0xa>
 800a324:	aa03      	add	r2, sp, #12
 800a326:	2300      	movs	r3, #0
 800a328:	a902      	add	r1, sp, #8
 800a32a:	a801      	add	r0, sp, #4
 800a32c:	f7ff feb0 	bl	800a090 <GUI__GetAlphaBuffer>
 800a330:	b005      	add	sp, #20
 800a332:	f85d fb04 	ldr.w	pc, [sp], #4

0800a336 <GUI__ExpandPixelIndicesEx>:
 800a336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a33a:	1e0c      	subs	r4, r1, #0
 800a33c:	4605      	mov	r5, r0
 800a33e:	f340 80b6 	ble.w	800a4ae <GUI__ExpandPixelIndicesEx+0x178>
 800a342:	2a08      	cmp	r2, #8
 800a344:	685e      	ldr	r6, [r3, #4]
 800a346:	dd04      	ble.n	800a352 <GUI__ExpandPixelIndicesEx+0x1c>
 800a348:	2a10      	cmp	r2, #16
 800a34a:	f340 809a 	ble.w	800a482 <GUI__ExpandPixelIndicesEx+0x14c>
 800a34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a352:	3a01      	subs	r2, #1
 800a354:	2a07      	cmp	r2, #7
 800a356:	f200 80aa 	bhi.w	800a4ae <GUI__ExpandPixelIndicesEx+0x178>
 800a35a:	e8df f002 	tbb	[pc, r2]
 800a35e:	2d04      	.short	0x2d04
 800a360:	a8a859a8 	.word	0xa8a859a8
 800a364:	85a8      	.short	0x85a8
 800a366:	1e67      	subs	r7, r4, #1
 800a368:	10fb      	asrs	r3, r7, #3
 800a36a:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800a36e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a372:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800a376:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800a37a:	f007 0707 	and.w	r7, r7, #7
 800a37e:	44a9      	add	r9, r5
 800a380:	f815 a003 	ldrb.w	sl, [r5, r3]
 800a384:	2580      	movs	r5, #128	; 0x80
 800a386:	413d      	asrs	r5, r7
 800a388:	b2ed      	uxtb	r5, r5
 800a38a:	f1c7 0307 	rsb	r3, r7, #7
 800a38e:	ea05 000a 	and.w	r0, r5, sl
 800a392:	4118      	asrs	r0, r3
 800a394:	47b0      	blx	r6
 800a396:	f848 0904 	str.w	r0, [r8], #-4
 800a39a:	b937      	cbnz	r7, 800a3aa <GUI__ExpandPixelIndicesEx+0x74>
 800a39c:	f899 a000 	ldrb.w	sl, [r9]
 800a3a0:	2501      	movs	r5, #1
 800a3a2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a3a6:	2707      	movs	r7, #7
 800a3a8:	e002      	b.n	800a3b0 <GUI__ExpandPixelIndicesEx+0x7a>
 800a3aa:	006d      	lsls	r5, r5, #1
 800a3ac:	3f01      	subs	r7, #1
 800a3ae:	b2ed      	uxtb	r5, r5
 800a3b0:	3c01      	subs	r4, #1
 800a3b2:	d1ea      	bne.n	800a38a <GUI__ExpandPixelIndicesEx+0x54>
 800a3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b8:	1e67      	subs	r7, r4, #1
 800a3ba:	10bb      	asrs	r3, r7, #2
 800a3bc:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800a3c0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800a3c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a3c8:	f007 0703 	and.w	r7, r7, #3
 800a3cc:	f815 a003 	ldrb.w	sl, [r5, r3]
 800a3d0:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800a3d4:	44a9      	add	r9, r5
 800a3d6:	23c0      	movs	r3, #192	; 0xc0
 800a3d8:	007d      	lsls	r5, r7, #1
 800a3da:	fa43 f505 	asr.w	r5, r3, r5
 800a3de:	b2ed      	uxtb	r5, r5
 800a3e0:	007b      	lsls	r3, r7, #1
 800a3e2:	f1c3 0306 	rsb	r3, r3, #6
 800a3e6:	ea05 000a 	and.w	r0, r5, sl
 800a3ea:	4118      	asrs	r0, r3
 800a3ec:	47b0      	blx	r6
 800a3ee:	f848 0904 	str.w	r0, [r8], #-4
 800a3f2:	b937      	cbnz	r7, 800a402 <GUI__ExpandPixelIndicesEx+0xcc>
 800a3f4:	2503      	movs	r5, #3
 800a3f6:	f899 a000 	ldrb.w	sl, [r9]
 800a3fa:	462f      	mov	r7, r5
 800a3fc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a400:	e002      	b.n	800a408 <GUI__ExpandPixelIndicesEx+0xd2>
 800a402:	00ad      	lsls	r5, r5, #2
 800a404:	3f01      	subs	r7, #1
 800a406:	b2ed      	uxtb	r5, r5
 800a408:	3c01      	subs	r4, #1
 800a40a:	d1e9      	bne.n	800a3e0 <GUI__ExpandPixelIndicesEx+0xaa>
 800a40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a410:	1e67      	subs	r7, r4, #1
 800a412:	107b      	asrs	r3, r7, #1
 800a414:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800a418:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800a41c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a420:	f007 0701 	and.w	r7, r7, #1
 800a424:	f815 a003 	ldrb.w	sl, [r5, r3]
 800a428:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800a42c:	44a9      	add	r9, r5
 800a42e:	23f0      	movs	r3, #240	; 0xf0
 800a430:	00bd      	lsls	r5, r7, #2
 800a432:	fa43 f505 	asr.w	r5, r3, r5
 800a436:	b2ed      	uxtb	r5, r5
 800a438:	00bb      	lsls	r3, r7, #2
 800a43a:	f1c3 0304 	rsb	r3, r3, #4
 800a43e:	ea05 000a 	and.w	r0, r5, sl
 800a442:	4118      	asrs	r0, r3
 800a444:	47b0      	blx	r6
 800a446:	f848 0904 	str.w	r0, [r8], #-4
 800a44a:	b937      	cbnz	r7, 800a45a <GUI__ExpandPixelIndicesEx+0x124>
 800a44c:	f899 a000 	ldrb.w	sl, [r9]
 800a450:	250f      	movs	r5, #15
 800a452:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a456:	2701      	movs	r7, #1
 800a458:	e002      	b.n	800a460 <GUI__ExpandPixelIndicesEx+0x12a>
 800a45a:	012d      	lsls	r5, r5, #4
 800a45c:	b2ed      	uxtb	r5, r5
 800a45e:	2700      	movs	r7, #0
 800a460:	3c01      	subs	r4, #1
 800a462:	d1e9      	bne.n	800a438 <GUI__ExpandPixelIndicesEx+0x102>
 800a464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a468:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800a46c:	4425      	add	r5, r4
 800a46e:	1b64      	subs	r4, r4, r5
 800a470:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 800a474:	47b0      	blx	r6
 800a476:	42e5      	cmn	r5, r4
 800a478:	f847 0d04 	str.w	r0, [r7, #-4]!
 800a47c:	d1f8      	bne.n	800a470 <GUI__ExpandPixelIndicesEx+0x13a>
 800a47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a482:	695f      	ldr	r7, [r3, #20]
 800a484:	b137      	cbz	r7, 800a494 <GUI__ExpandPixelIndicesEx+0x15e>
 800a486:	4622      	mov	r2, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	46bc      	mov	ip, r7
 800a48c:	2302      	movs	r3, #2
 800a48e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a492:	4760      	bx	ip
 800a494:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800a498:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800a49c:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 800a4a0:	47b0      	blx	r6
 800a4a2:	3c01      	subs	r4, #1
 800a4a4:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a4a8:	d1f8      	bne.n	800a49c <GUI__ExpandPixelIndicesEx+0x166>
 800a4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4b2 <GUI__CalcTextRect>:
 800a4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	4615      	mov	r5, r2
 800a4ba:	4698      	mov	r8, r3
 800a4bc:	b3d8      	cbz	r0, 800a536 <GUI__CalcTextRect+0x84>
 800a4be:	f7fe ff1a 	bl	80092f6 <GUI_GetStringDistX>
 800a4c2:	f008 0203 	and.w	r2, r8, #3
 800a4c6:	2a01      	cmp	r2, #1
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	d00c      	beq.n	800a4e6 <GUI__CalcTextRect+0x34>
 800a4cc:	2a02      	cmp	r2, #2
 800a4ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 800a4d2:	d10c      	bne.n	800a4ee <GUI__CalcTextRect+0x3c>
 800a4d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800a4d8:	1b1b      	subs	r3, r3, r4
 800a4da:	3301      	adds	r3, #1
 800a4dc:	1a1b      	subs	r3, r3, r0
 800a4de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4e2:	441c      	add	r4, r3
 800a4e4:	e003      	b.n	800a4ee <GUI__CalcTextRect+0x3c>
 800a4e6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800a4ea:	1a24      	subs	r4, r4, r0
 800a4ec:	3401      	adds	r4, #1
 800a4ee:	f008 080c 	and.w	r8, r8, #12
 800a4f2:	f008 fa8b 	bl	8012a0c <GUI_GetFontDistY>
 800a4f6:	f1b8 0f04 	cmp.w	r8, #4
 800a4fa:	d00e      	beq.n	800a51a <GUI__CalcTextRect+0x68>
 800a4fc:	f1b8 0f0c 	cmp.w	r8, #12
 800a500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a504:	d10d      	bne.n	800a522 <GUI__CalcTextRect+0x70>
 800a506:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a50a:	1ac9      	subs	r1, r1, r3
 800a50c:	3101      	adds	r1, #1
 800a50e:	1a09      	subs	r1, r1, r0
 800a510:	2202      	movs	r2, #2
 800a512:	fb91 f1f2 	sdiv	r1, r1, r2
 800a516:	440b      	add	r3, r1
 800a518:	e003      	b.n	800a522 <GUI__CalcTextRect+0x70>
 800a51a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a51e:	1a1b      	subs	r3, r3, r0
 800a520:	3301      	adds	r3, #1
 800a522:	3e01      	subs	r6, #1
 800a524:	3801      	subs	r0, #1
 800a526:	802c      	strh	r4, [r5, #0]
 800a528:	806b      	strh	r3, [r5, #2]
 800a52a:	4434      	add	r4, r6
 800a52c:	4403      	add	r3, r0
 800a52e:	80ac      	strh	r4, [r5, #4]
 800a530:	80eb      	strh	r3, [r5, #6]
 800a532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a536:	680b      	ldr	r3, [r1, #0]
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	684b      	ldr	r3, [r1, #4]
 800a53c:	6053      	str	r3, [r2, #4]
 800a53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a542 <GUI__DivideRound32>:
 800a542:	b141      	cbz	r1, 800a556 <GUI__DivideRound32+0x14>
 800a544:	2800      	cmp	r0, #0
 800a546:	ea4f 0361 	mov.w	r3, r1, asr #1
 800a54a:	bfb4      	ite	lt
 800a54c:	1ac0      	sublt	r0, r0, r3
 800a54e:	18c0      	addge	r0, r0, r3
 800a550:	fb90 f0f1 	sdiv	r0, r0, r1
 800a554:	4770      	bx	lr
 800a556:	4608      	mov	r0, r1
 800a558:	4770      	bx	lr

0800a55a <GUI__HandleEOLine>:
 800a55a:	b513      	push	{r0, r1, r4, lr}
 800a55c:	6803      	ldr	r3, [r0, #0]
 800a55e:	4604      	mov	r4, r0
 800a560:	a802      	add	r0, sp, #8
 800a562:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a566:	f7ff fcc9 	bl	8009efc <GUI_UC__GetCharCodeInc>
 800a56a:	b120      	cbz	r0, 800a576 <GUI__HandleEOLine+0x1c>
 800a56c:	280a      	cmp	r0, #10
 800a56e:	d104      	bne.n	800a57a <GUI__HandleEOLine+0x20>
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	6023      	str	r3, [r4, #0]
 800a574:	e001      	b.n	800a57a <GUI__HandleEOLine+0x20>
 800a576:	2001      	movs	r0, #1
 800a578:	e000      	b.n	800a57c <GUI__HandleEOLine+0x22>
 800a57a:	2000      	movs	r0, #0
 800a57c:	b002      	add	sp, #8
 800a57e:	bd10      	pop	{r4, pc}

0800a580 <GUI__IntersectRect>:
 800a580:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a584:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a588:	429a      	cmp	r2, r3
 800a58a:	bfb8      	it	lt
 800a58c:	8003      	strhlt	r3, [r0, #0]
 800a58e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a592:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800a596:	429a      	cmp	r2, r3
 800a598:	bfb8      	it	lt
 800a59a:	8043      	strhlt	r3, [r0, #2]
 800a59c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800a5a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	bfc8      	it	gt
 800a5a8:	8083      	strhgt	r3, [r0, #4]
 800a5aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800a5ae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bfc8      	it	gt
 800a5b6:	80c3      	strhgt	r3, [r0, #6]
 800a5b8:	4770      	bx	lr

0800a5ba <GUI__IntersectRects>:
 800a5ba:	b570      	push	{r4, r5, r6, lr}
 800a5bc:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a5c0:	f9b2 5000 	ldrsh.w	r5, [r2]
 800a5c4:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800a5c8:	429d      	cmp	r5, r3
 800a5ca:	bfb8      	it	lt
 800a5cc:	461d      	movlt	r5, r3
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800a5d4:	8005      	strh	r5, [r0, #0]
 800a5d6:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800a5da:	4283      	cmp	r3, r0
 800a5dc:	bfb8      	it	lt
 800a5de:	4603      	movlt	r3, r0
 800a5e0:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 800a5e4:	8073      	strh	r3, [r6, #2]
 800a5e6:	4284      	cmp	r4, r0
 800a5e8:	bfa8      	it	ge
 800a5ea:	4604      	movge	r4, r0
 800a5ec:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800a5f0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 800a5f4:	80b4      	strh	r4, [r6, #4]
 800a5f6:	4282      	cmp	r2, r0
 800a5f8:	bfa8      	it	ge
 800a5fa:	4602      	movge	r2, r0
 800a5fc:	42a5      	cmp	r5, r4
 800a5fe:	80f2      	strh	r2, [r6, #6]
 800a600:	dc04      	bgt.n	800a60c <GUI__IntersectRects+0x52>
 800a602:	4293      	cmp	r3, r2
 800a604:	bfcc      	ite	gt
 800a606:	2000      	movgt	r0, #0
 800a608:	2001      	movle	r0, #1
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
 800a60c:	2000      	movs	r0, #0
 800a60e:	bd70      	pop	{r4, r5, r6, pc}

0800a610 <GUI__memset>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	b2c9      	uxtb	r1, r1
 800a614:	4603      	mov	r3, r0
 800a616:	b12a      	cbz	r2, 800a624 <GUI__memset+0x14>
 800a618:	079c      	lsls	r4, r3, #30
 800a61a:	d003      	beq.n	800a624 <GUI__memset+0x14>
 800a61c:	f803 1b01 	strb.w	r1, [r3], #1
 800a620:	3a01      	subs	r2, #1
 800a622:	e7f8      	b.n	800a616 <GUI__memset+0x6>
 800a624:	0895      	lsrs	r5, r2, #2
 800a626:	d101      	bne.n	800a62c <GUI__memset+0x1c>
 800a628:	441a      	add	r2, r3
 800a62a:	e01a      	b.n	800a662 <GUI__memset+0x52>
 800a62c:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800a630:	f002 0203 	and.w	r2, r2, #3
 800a634:	434c      	muls	r4, r1
 800a636:	2d03      	cmp	r5, #3
 800a638:	461e      	mov	r6, r3
 800a63a:	f103 0310 	add.w	r3, r3, #16
 800a63e:	dd09      	ble.n	800a654 <GUI__memset+0x44>
 800a640:	f843 4c10 	str.w	r4, [r3, #-16]
 800a644:	f843 4c0c 	str.w	r4, [r3, #-12]
 800a648:	f843 4c08 	str.w	r4, [r3, #-8]
 800a64c:	f843 4c04 	str.w	r4, [r3, #-4]
 800a650:	3d04      	subs	r5, #4
 800a652:	e7f0      	b.n	800a636 <GUI__memset+0x26>
 800a654:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800a658:	429e      	cmp	r6, r3
 800a65a:	d0e5      	beq.n	800a628 <GUI__memset+0x18>
 800a65c:	f846 4b04 	str.w	r4, [r6], #4
 800a660:	e7fa      	b.n	800a658 <GUI__memset+0x48>
 800a662:	4293      	cmp	r3, r2
 800a664:	d002      	beq.n	800a66c <GUI__memset+0x5c>
 800a666:	f803 1b01 	strb.w	r1, [r3], #1
 800a66a:	e7fa      	b.n	800a662 <GUI__memset+0x52>
 800a66c:	bd70      	pop	{r4, r5, r6, pc}

0800a66e <GUI__ReduceRect>:
 800a66e:	880b      	ldrh	r3, [r1, #0]
 800a670:	b292      	uxth	r2, r2
 800a672:	4413      	add	r3, r2
 800a674:	8003      	strh	r3, [r0, #0]
 800a676:	888b      	ldrh	r3, [r1, #4]
 800a678:	1a9b      	subs	r3, r3, r2
 800a67a:	8083      	strh	r3, [r0, #4]
 800a67c:	884b      	ldrh	r3, [r1, #2]
 800a67e:	4413      	add	r3, r2
 800a680:	8043      	strh	r3, [r0, #2]
 800a682:	88cb      	ldrh	r3, [r1, #6]
 800a684:	1a9a      	subs	r2, r3, r2
 800a686:	80c2      	strh	r2, [r0, #6]
 800a688:	4770      	bx	lr

0800a68a <GUI__sqrt32>:
 800a68a:	b510      	push	{r4, lr}
 800a68c:	2110      	movs	r1, #16
 800a68e:	2300      	movs	r3, #0
 800a690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a694:	18d4      	adds	r4, r2, r3
 800a696:	42a0      	cmp	r0, r4
 800a698:	bf24      	itt	cs
 800a69a:	1913      	addcs	r3, r2, r4
 800a69c:	1b00      	subcs	r0, r0, r4
 800a69e:	3901      	subs	r1, #1
 800a6a0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800a6a4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800a6a8:	d1f4      	bne.n	800a694 <GUI__sqrt32+0xa>
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	bd10      	pop	{r4, pc}
	...

0800a6b0 <_SetDrawMode>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <_SetDrawMode+0x24>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	7c1a      	ldrb	r2, [r3, #16]
 800a6b8:	ea82 0100 	eor.w	r1, r2, r0
 800a6bc:	0749      	lsls	r1, r1, #29
 800a6be:	d505      	bpl.n	800a6cc <_SetDrawMode+0x1c>
 800a6c0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800a6c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a6c4:	6825      	ldr	r5, [r4, #0]
 800a6c6:	680e      	ldr	r6, [r1, #0]
 800a6c8:	6026      	str	r6, [r4, #0]
 800a6ca:	600d      	str	r5, [r1, #0]
 800a6cc:	7418      	strb	r0, [r3, #16]
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000014 	.word	0x20000014

0800a6d8 <LCD_SetDrawMode>:
 800a6d8:	4b01      	ldr	r3, [pc, #4]	; (800a6e0 <LCD_SetDrawMode+0x8>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	4718      	bx	r3
 800a6e0:	20000044 	.word	0x20000044

0800a6e4 <LCD_DrawPixel>:
 800a6e4:	4b15      	ldr	r3, [pc, #84]	; (800a73c <LCD_DrawPixel+0x58>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	460a      	mov	r2, r1
 800a6ea:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800a6ee:	4291      	cmp	r1, r2
 800a6f0:	b430      	push	{r4, r5}
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	dc20      	bgt.n	800a738 <LCD_DrawPixel+0x54>
 800a6f6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800a6fa:	428a      	cmp	r2, r1
 800a6fc:	dc1c      	bgt.n	800a738 <LCD_DrawPixel+0x54>
 800a6fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800a702:	4281      	cmp	r1, r0
 800a704:	dc18      	bgt.n	800a738 <LCD_DrawPixel+0x54>
 800a706:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800a70a:	4288      	cmp	r0, r1
 800a70c:	dc14      	bgt.n	800a738 <LCD_DrawPixel+0x54>
 800a70e:	7c19      	ldrb	r1, [r3, #16]
 800a710:	7c58      	ldrb	r0, [r3, #17]
 800a712:	f011 0f01 	tst.w	r1, #1
 800a716:	490a      	ldr	r1, [pc, #40]	; (800a740 <LCD_DrawPixel+0x5c>)
 800a718:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a71c:	d004      	beq.n	800a728 <LCD_DrawPixel+0x44>
 800a71e:	68c3      	ldr	r3, [r0, #12]
 800a720:	4621      	mov	r1, r4
 800a722:	69db      	ldr	r3, [r3, #28]
 800a724:	bc30      	pop	{r4, r5}
 800a726:	4718      	bx	r3
 800a728:	68c1      	ldr	r1, [r0, #12]
 800a72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72c:	698d      	ldr	r5, [r1, #24]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4621      	mov	r1, r4
 800a732:	46ac      	mov	ip, r5
 800a734:	bc30      	pop	{r4, r5}
 800a736:	4760      	bx	ip
 800a738:	bc30      	pop	{r4, r5}
 800a73a:	4770      	bx	lr
 800a73c:	20000014 	.word	0x20000014
 800a740:	20027bb0 	.word	0x20027bb0

0800a744 <LCD_DrawHLine>:
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <LCD_DrawHLine+0x48>)
 800a746:	b430      	push	{r4, r5}
 800a748:	681c      	ldr	r4, [r3, #0]
 800a74a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a74e:	428b      	cmp	r3, r1
 800a750:	460d      	mov	r5, r1
 800a752:	dc19      	bgt.n	800a788 <LCD_DrawHLine+0x44>
 800a754:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a758:	4299      	cmp	r1, r3
 800a75a:	dc15      	bgt.n	800a788 <LCD_DrawHLine+0x44>
 800a75c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800a760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a764:	4281      	cmp	r1, r0
 800a766:	bfb8      	it	lt
 800a768:	4601      	movlt	r1, r0
 800a76a:	4293      	cmp	r3, r2
 800a76c:	bfa8      	it	ge
 800a76e:	4613      	movge	r3, r2
 800a770:	4299      	cmp	r1, r3
 800a772:	dc09      	bgt.n	800a788 <LCD_DrawHLine+0x44>
 800a774:	7c60      	ldrb	r0, [r4, #17]
 800a776:	4a06      	ldr	r2, [pc, #24]	; (800a790 <LCD_DrawHLine+0x4c>)
 800a778:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800a77c:	68c2      	ldr	r2, [r0, #12]
 800a77e:	6894      	ldr	r4, [r2, #8]
 800a780:	462a      	mov	r2, r5
 800a782:	46a4      	mov	ip, r4
 800a784:	bc30      	pop	{r4, r5}
 800a786:	4760      	bx	ip
 800a788:	bc30      	pop	{r4, r5}
 800a78a:	4770      	bx	lr
 800a78c:	20000014 	.word	0x20000014
 800a790:	20027bb0 	.word	0x20027bb0

0800a794 <LCD_DrawVLine>:
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <LCD_DrawVLine+0x4c>)
 800a796:	b430      	push	{r4, r5}
 800a798:	681c      	ldr	r4, [r3, #0]
 800a79a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800a79e:	4283      	cmp	r3, r0
 800a7a0:	dc1b      	bgt.n	800a7da <LCD_DrawVLine+0x46>
 800a7a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a6:	4298      	cmp	r0, r3
 800a7a8:	dc17      	bgt.n	800a7da <LCD_DrawVLine+0x46>
 800a7aa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a7ae:	4299      	cmp	r1, r3
 800a7b0:	bfb8      	it	lt
 800a7b2:	4619      	movlt	r1, r3
 800a7b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfa8      	it	ge
 800a7bc:	4613      	movge	r3, r2
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	dc0b      	bgt.n	800a7da <LCD_DrawVLine+0x46>
 800a7c2:	4a08      	ldr	r2, [pc, #32]	; (800a7e4 <LCD_DrawVLine+0x50>)
 800a7c4:	7c64      	ldrb	r4, [r4, #17]
 800a7c6:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800a7ca:	68e2      	ldr	r2, [r4, #12]
 800a7cc:	68d5      	ldr	r5, [r2, #12]
 800a7ce:	460a      	mov	r2, r1
 800a7d0:	46ac      	mov	ip, r5
 800a7d2:	4601      	mov	r1, r0
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	bc30      	pop	{r4, r5}
 800a7d8:	4760      	bx	ip
 800a7da:	bc30      	pop	{r4, r5}
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20000014 	.word	0x20000014
 800a7e4:	20027bb0 	.word	0x20027bb0

0800a7e8 <LCD_FillRect>:
 800a7e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7ea:	4c13      	ldr	r4, [pc, #76]	; (800a838 <LCD_FillRect+0x50>)
 800a7ec:	6824      	ldr	r4, [r4, #0]
 800a7ee:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 800a7f2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800a7f6:	4285      	cmp	r5, r0
 800a7f8:	bfb8      	it	lt
 800a7fa:	4605      	movlt	r5, r0
 800a7fc:	4296      	cmp	r6, r2
 800a7fe:	bfa8      	it	ge
 800a800:	4616      	movge	r6, r2
 800a802:	42ae      	cmp	r6, r5
 800a804:	db15      	blt.n	800a832 <LCD_FillRect+0x4a>
 800a806:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800a80a:	428a      	cmp	r2, r1
 800a80c:	bfb8      	it	lt
 800a80e:	460a      	movlt	r2, r1
 800a810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a814:	428b      	cmp	r3, r1
 800a816:	bfa8      	it	ge
 800a818:	460b      	movge	r3, r1
 800a81a:	429a      	cmp	r2, r3
 800a81c:	dc09      	bgt.n	800a832 <LCD_FillRect+0x4a>
 800a81e:	7c60      	ldrb	r0, [r4, #17]
 800a820:	4906      	ldr	r1, [pc, #24]	; (800a83c <LCD_FillRect+0x54>)
 800a822:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800a826:	68c1      	ldr	r1, [r0, #12]
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	690c      	ldr	r4, [r1, #16]
 800a82c:	4633      	mov	r3, r6
 800a82e:	4629      	mov	r1, r5
 800a830:	47a0      	blx	r4
 800a832:	b002      	add	sp, #8
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	bf00      	nop
 800a838:	20000014 	.word	0x20000014
 800a83c:	20027bb0 	.word	0x20027bb0

0800a840 <LCD__DrawBitmap_1bpp>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	b08f      	sub	sp, #60	; 0x3c
 800a846:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 800aa14 <LCD__DrawBitmap_1bpp+0x1d4>
 800a84a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a84c:	9502      	str	r5, [sp, #8]
 800a84e:	f8de e000 	ldr.w	lr, [lr]
 800a852:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a854:	9508      	str	r5, [sp, #32]
 800a856:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a858:	9503      	str	r5, [sp, #12]
 800a85a:	9007      	str	r0, [sp, #28]
 800a85c:	460c      	mov	r4, r1
 800a85e:	4617      	mov	r7, r2
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a866:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800a868:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800a86c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800a86e:	f1be 0f00 	cmp.w	lr, #0
 800a872:	d002      	beq.n	800a87a <LCD__DrawBitmap_1bpp+0x3a>
 800a874:	f8de 4000 	ldr.w	r4, [lr]
 800a878:	e054      	b.n	800a924 <LCD__DrawBitmap_1bpp+0xe4>
 800a87a:	9b02      	ldr	r3, [sp, #8]
 800a87c:	9a08      	ldr	r2, [sp, #32]
 800a87e:	4313      	orrs	r3, r2
 800a880:	2b01      	cmp	r3, #1
 800a882:	d154      	bne.n	800a92e <LCD__DrawBitmap_1bpp+0xee>
 800a884:	4b61      	ldr	r3, [pc, #388]	; (800aa0c <LCD__DrawBitmap_1bpp+0x1cc>)
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800a88c:	1a53      	subs	r3, r2, r1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dd0a      	ble.n	800a8a8 <LCD__DrawBitmap_1bpp+0x68>
 800a892:	9901      	ldr	r1, [sp, #4]
 800a894:	ebc3 0e01 	rsb	lr, r3, r1
 800a898:	f1be 0f00 	cmp.w	lr, #0
 800a89c:	f340 80b2 	ble.w	800aa04 <LCD__DrawBitmap_1bpp+0x1c4>
 800a8a0:	9903      	ldr	r1, [sp, #12]
 800a8a2:	fb01 6603 	mla	r6, r1, r3, r6
 800a8a6:	e002      	b.n	800a8ae <LCD__DrawBitmap_1bpp+0x6e>
 800a8a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a8ac:	460a      	mov	r2, r1
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	441c      	add	r4, r3
 800a8b2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800a8b6:	3c01      	subs	r4, #1
 800a8b8:	1ae4      	subs	r4, r4, r3
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	dd05      	ble.n	800a8ca <LCD__DrawBitmap_1bpp+0x8a>
 800a8be:	ebc4 0e0e 	rsb	lr, r4, lr
 800a8c2:	f1be 0f00 	cmp.w	lr, #0
 800a8c6:	f340 809d 	ble.w	800aa04 <LCD__DrawBitmap_1bpp+0x1c4>
 800a8ca:	9b07      	ldr	r3, [sp, #28]
 800a8cc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800a8d0:	443b      	add	r3, r7
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	1a5b      	subs	r3, r3, r1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfc8      	it	gt
 800a8da:	1aff      	subgt	r7, r7, r3
 800a8dc:	9b07      	ldr	r3, [sp, #28]
 800a8de:	1b59      	subs	r1, r3, r5
 800a8e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a8e4:	4299      	cmp	r1, r3
 800a8e6:	da09      	bge.n	800a8fc <LCD__DrawBitmap_1bpp+0xbc>
 800a8e8:	1a5b      	subs	r3, r3, r1
 800a8ea:	441d      	add	r5, r3
 800a8ec:	1aff      	subs	r7, r7, r3
 800a8ee:	f023 0307 	bic.w	r3, r3, #7
 800a8f2:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 800a8f6:	4419      	add	r1, r3
 800a8f8:	f005 0507 	and.w	r5, r5, #7
 800a8fc:	2f00      	cmp	r7, #0
 800a8fe:	f340 8081 	ble.w	800aa04 <LCD__DrawBitmap_1bpp+0x1c4>
 800a902:	7c40      	ldrb	r0, [r0, #17]
 800a904:	4b42      	ldr	r3, [pc, #264]	; (800aa10 <LCD__DrawBitmap_1bpp+0x1d0>)
 800a906:	9c03      	ldr	r4, [sp, #12]
 800a908:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a90c:	68c3      	ldr	r3, [r0, #12]
 800a90e:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 800a912:	951c      	str	r5, [sp, #112]	; 0x70
 800a914:	961b      	str	r6, [sp, #108]	; 0x6c
 800a916:	941a      	str	r4, [sp, #104]	; 0x68
 800a918:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800a91c:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 800a920:	685c      	ldr	r4, [r3, #4]
 800a922:	463b      	mov	r3, r7
 800a924:	46a4      	mov	ip, r4
 800a926:	b00f      	add	sp, #60	; 0x3c
 800a928:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	4760      	bx	ip
 800a92e:	f1ca 0308 	rsb	r3, sl, #8
 800a932:	930b      	str	r3, [sp, #44]	; 0x2c
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 800aa0c <LCD__DrawBitmap_1bpp+0x1cc>
 800a93a:	f8cd e014 	str.w	lr, [sp, #20]
 800a93e:	3b01      	subs	r3, #1
 800a940:	4675      	mov	r5, lr
 800a942:	930d      	str	r3, [sp, #52]	; 0x34
 800a944:	9b05      	ldr	r3, [sp, #20]
 800a946:	9a01      	ldr	r2, [sp, #4]
 800a948:	4293      	cmp	r3, r2
 800a94a:	da5b      	bge.n	800aa04 <LCD__DrawBitmap_1bpp+0x1c4>
 800a94c:	9b08      	ldr	r3, [sp, #32]
 800a94e:	18e3      	adds	r3, r4, r3
 800a950:	9309      	str	r3, [sp, #36]	; 0x24
 800a952:	3b01      	subs	r3, #1
 800a954:	930a      	str	r3, [sp, #40]	; 0x28
 800a956:	f8d9 3000 	ldr.w	r3, [r9]
 800a95a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a95c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800a960:	428a      	cmp	r2, r1
 800a962:	dc48      	bgt.n	800a9f6 <LCD__DrawBitmap_1bpp+0x1b6>
 800a964:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800a968:	429c      	cmp	r4, r3
 800a96a:	dc44      	bgt.n	800a9f6 <LCD__DrawBitmap_1bpp+0x1b6>
 800a96c:	9b07      	ldr	r3, [sp, #28]
 800a96e:	9606      	str	r6, [sp, #24]
 800a970:	f04f 0800 	mov.w	r8, #0
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	f8cd 8010 	str.w	r8, [sp, #16]
 800a97a:	9b04      	ldr	r3, [sp, #16]
 800a97c:	42bb      	cmp	r3, r7
 800a97e:	da3a      	bge.n	800a9f6 <LCD__DrawBitmap_1bpp+0x1b6>
 800a980:	f1b8 0f00 	cmp.w	r8, #0
 800a984:	d105      	bne.n	800a992 <LCD__DrawBitmap_1bpp+0x152>
 800a986:	9b06      	ldr	r3, [sp, #24]
 800a988:	781d      	ldrb	r5, [r3, #0]
 800a98a:	3301      	adds	r3, #1
 800a98c:	9306      	str	r3, [sp, #24]
 800a98e:	f04f 0808 	mov.w	r8, #8
 800a992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a994:	fa45 f303 	asr.w	r3, r5, r3
 800a998:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800a99c:	fa05 f50a 	lsl.w	r5, r5, sl
 800a9a0:	b2ed      	uxtb	r5, r5
 800a9a2:	ebca 0808 	rsb	r8, sl, r8
 800a9a6:	d104      	bne.n	800a9b2 <LCD__DrawBitmap_1bpp+0x172>
 800a9a8:	f8d9 2000 	ldr.w	r2, [r9]
 800a9ac:	7c12      	ldrb	r2, [r2, #16]
 800a9ae:	0792      	lsls	r2, r2, #30
 800a9b0:	d419      	bmi.n	800a9e6 <LCD__DrawBitmap_1bpp+0x1a6>
 800a9b2:	f8d9 2000 	ldr.w	r2, [r9]
 800a9b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a9b8:	6810      	ldr	r0, [r2, #0]
 800a9ba:	900c      	str	r0, [sp, #48]	; 0x30
 800a9bc:	f1bb 0f00 	cmp.w	fp, #0
 800a9c0:	d002      	beq.n	800a9c8 <LCD__DrawBitmap_1bpp+0x188>
 800a9c2:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 800a9c6:	e000      	b.n	800a9ca <LCD__DrawBitmap_1bpp+0x18a>
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	9900      	ldr	r1, [sp, #0]
 800a9ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d2:	9800      	ldr	r0, [sp, #0]
 800a9d4:	440a      	add	r2, r1
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	f7ff ff06 	bl	800a7e8 <LCD_FillRect>
 800a9dc:	f8d9 3000 	ldr.w	r3, [r9]
 800a9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	9a02      	ldr	r2, [sp, #8]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	e7c1      	b.n	800a97a <LCD__DrawBitmap_1bpp+0x13a>
 800a9f6:	9b05      	ldr	r3, [sp, #20]
 800a9f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	441e      	add	r6, r3
 800aa02:	e79f      	b.n	800a944 <LCD__DrawBitmap_1bpp+0x104>
 800aa04:	b00f      	add	sp, #60	; 0x3c
 800aa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000014 	.word	0x20000014
 800aa10:	20027bb0 	.word	0x20027bb0
 800aa14:	20027b6c 	.word	0x20027b6c

0800aa18 <LCD_DrawBitmap>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	b08f      	sub	sp, #60	; 0x3c
 800aa1e:	f8df e218 	ldr.w	lr, [pc, #536]	; 800ac38 <LCD_DrawBitmap+0x220>
 800aa22:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800aa24:	9402      	str	r4, [sp, #8]
 800aa26:	f8de e000 	ldr.w	lr, [lr]
 800aa2a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800aa2c:	9408      	str	r4, [sp, #32]
 800aa2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800aa30:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800aa32:	9403      	str	r4, [sp, #12]
 800aa34:	4605      	mov	r5, r0
 800aa36:	9100      	str	r1, [sp, #0]
 800aa38:	4690      	mov	r8, r2
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800aa3e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800aa40:	9604      	str	r6, [sp, #16]
 800aa42:	f1be 0f00 	cmp.w	lr, #0
 800aa46:	d002      	beq.n	800aa4e <LCD_DrawBitmap+0x36>
 800aa48:	f8de 4000 	ldr.w	r4, [lr]
 800aa4c:	e07a      	b.n	800ab44 <LCD_DrawBitmap+0x12c>
 800aa4e:	9b02      	ldr	r3, [sp, #8]
 800aa50:	9a08      	ldr	r2, [sp, #32]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d17a      	bne.n	800ab4e <LCD_DrawBitmap+0x136>
 800aa58:	4b75      	ldr	r3, [pc, #468]	; (800ac30 <LCD_DrawBitmap+0x218>)
 800aa5a:	9901      	ldr	r1, [sp, #4]
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd07      	ble.n	800aa7a <LCD_DrawBitmap+0x62>
 800aa6a:	1ac9      	subs	r1, r1, r3
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	f340 80db 	ble.w	800ac28 <LCD_DrawBitmap+0x210>
 800aa72:	9e03      	ldr	r6, [sp, #12]
 800aa74:	fb06 4403 	mla	r4, r6, r3, r4
 800aa78:	e000      	b.n	800aa7c <LCD_DrawBitmap+0x64>
 800aa7a:	9a00      	ldr	r2, [sp, #0]
 800aa7c:	e89d 0048 	ldmia.w	sp, {r3, r6}
 800aa80:	441e      	add	r6, r3
 800aa82:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800aa86:	3e01      	subs	r6, #1
 800aa88:	1af6      	subs	r6, r6, r3
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	dd03      	ble.n	800aa96 <LCD_DrawBitmap+0x7e>
 800aa8e:	1b89      	subs	r1, r1, r6
 800aa90:	2900      	cmp	r1, #0
 800aa92:	f340 80c9 	ble.w	800ac28 <LCD_DrawBitmap+0x210>
 800aa96:	eb05 0308 	add.w	r3, r5, r8
 800aa9a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	1b9b      	subs	r3, r3, r6
 800aaa2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfc8      	it	gt
 800aaaa:	ebc3 0808 	rsbgt	r8, r3, r8
 800aaae:	42b5      	cmp	r5, r6
 800aab0:	da31      	bge.n	800ab16 <LCD_DrawBitmap+0xfe>
 800aab2:	1b73      	subs	r3, r6, r5
 800aab4:	2f08      	cmp	r7, #8
 800aab6:	ebc3 0808 	rsb	r8, r3, r8
 800aaba:	d027      	beq.n	800ab0c <LCD_DrawBitmap+0xf4>
 800aabc:	dc0d      	bgt.n	800aada <LCD_DrawBitmap+0xc2>
 800aabe:	2f02      	cmp	r7, #2
 800aac0:	d014      	beq.n	800aaec <LCD_DrawBitmap+0xd4>
 800aac2:	2f04      	cmp	r7, #4
 800aac4:	d01a      	beq.n	800aafc <LCD_DrawBitmap+0xe4>
 800aac6:	2f01      	cmp	r7, #1
 800aac8:	d126      	bne.n	800ab18 <LCD_DrawBitmap+0x100>
 800aaca:	f023 0607 	bic.w	r6, r3, #7
 800aace:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800aad2:	4435      	add	r5, r6
 800aad4:	f003 0307 	and.w	r3, r3, #7
 800aad8:	e01e      	b.n	800ab18 <LCD_DrawBitmap+0x100>
 800aada:	2f18      	cmp	r7, #24
 800aadc:	d018      	beq.n	800ab10 <LCD_DrawBitmap+0xf8>
 800aade:	2f20      	cmp	r7, #32
 800aae0:	d016      	beq.n	800ab10 <LCD_DrawBitmap+0xf8>
 800aae2:	2f10      	cmp	r7, #16
 800aae4:	d118      	bne.n	800ab18 <LCD_DrawBitmap+0x100>
 800aae6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800aaea:	e013      	b.n	800ab14 <LCD_DrawBitmap+0xfc>
 800aaec:	f023 0603 	bic.w	r6, r3, #3
 800aaf0:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800aaf4:	4435      	add	r5, r6
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	e00d      	b.n	800ab18 <LCD_DrawBitmap+0x100>
 800aafc:	f023 0601 	bic.w	r6, r3, #1
 800ab00:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800ab04:	4435      	add	r5, r6
 800ab06:	f003 0301 	and.w	r3, r3, #1
 800ab0a:	e005      	b.n	800ab18 <LCD_DrawBitmap+0x100>
 800ab0c:	441c      	add	r4, r3
 800ab0e:	e001      	b.n	800ab14 <LCD_DrawBitmap+0xfc>
 800ab10:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800ab14:	4635      	mov	r5, r6
 800ab16:	2300      	movs	r3, #0
 800ab18:	f1b8 0f00 	cmp.w	r8, #0
 800ab1c:	f340 8084 	ble.w	800ac28 <LCD_DrawBitmap+0x210>
 800ab20:	7c46      	ldrb	r6, [r0, #17]
 800ab22:	4844      	ldr	r0, [pc, #272]	; (800ac34 <LCD_DrawBitmap+0x21c>)
 800ab24:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800ab28:	9e04      	ldr	r6, [sp, #16]
 800ab2a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800ab2e:	931c      	str	r3, [sp, #112]	; 0x70
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	931a      	str	r3, [sp, #104]	; 0x68
 800ab34:	9118      	str	r1, [sp, #96]	; 0x60
 800ab36:	961d      	str	r6, [sp, #116]	; 0x74
 800ab38:	941b      	str	r4, [sp, #108]	; 0x6c
 800ab3a:	9719      	str	r7, [sp, #100]	; 0x64
 800ab3c:	f8de 4004 	ldr.w	r4, [lr, #4]
 800ab40:	4643      	mov	r3, r8
 800ab42:	4629      	mov	r1, r5
 800ab44:	46a4      	mov	ip, r4
 800ab46:	b00f      	add	sp, #60	; 0x3c
 800ab48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	4760      	bx	ip
 800ab4e:	f1c7 0308 	rsb	r3, r7, #8
 800ab52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab54:	9b02      	ldr	r3, [sp, #8]
 800ab56:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ac30 <LCD_DrawBitmap+0x218>
 800ab5a:	f8cd e018 	str.w	lr, [sp, #24]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	46f3      	mov	fp, lr
 800ab62:	930d      	str	r3, [sp, #52]	; 0x34
 800ab64:	9b06      	ldr	r3, [sp, #24]
 800ab66:	9a01      	ldr	r2, [sp, #4]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	da5d      	bge.n	800ac28 <LCD_DrawBitmap+0x210>
 800ab6c:	9a00      	ldr	r2, [sp, #0]
 800ab6e:	9b08      	ldr	r3, [sp, #32]
 800ab70:	4413      	add	r3, r2
 800ab72:	9309      	str	r3, [sp, #36]	; 0x24
 800ab74:	3b01      	subs	r3, #1
 800ab76:	930a      	str	r3, [sp, #40]	; 0x28
 800ab78:	f8da 3000 	ldr.w	r3, [sl]
 800ab7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab7e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800ab82:	428a      	cmp	r2, r1
 800ab84:	dc48      	bgt.n	800ac18 <LCD_DrawBitmap+0x200>
 800ab86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ab8a:	9a00      	ldr	r2, [sp, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	dc43      	bgt.n	800ac18 <LCD_DrawBitmap+0x200>
 800ab90:	f04f 0900 	mov.w	r9, #0
 800ab94:	9407      	str	r4, [sp, #28]
 800ab96:	462e      	mov	r6, r5
 800ab98:	f8cd 9014 	str.w	r9, [sp, #20]
 800ab9c:	9b05      	ldr	r3, [sp, #20]
 800ab9e:	4543      	cmp	r3, r8
 800aba0:	da3a      	bge.n	800ac18 <LCD_DrawBitmap+0x200>
 800aba2:	f1b9 0f00 	cmp.w	r9, #0
 800aba6:	d106      	bne.n	800abb6 <LCD_DrawBitmap+0x19e>
 800aba8:	9b07      	ldr	r3, [sp, #28]
 800abaa:	f893 b000 	ldrb.w	fp, [r3]
 800abae:	3301      	adds	r3, #1
 800abb0:	9307      	str	r3, [sp, #28]
 800abb2:	f04f 0908 	mov.w	r9, #8
 800abb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb8:	fa4b f303 	asr.w	r3, fp, r3
 800abbc:	fa0b f207 	lsl.w	r2, fp, r7
 800abc0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800abc4:	fa5f fb82 	uxtb.w	fp, r2
 800abc8:	ebc7 0909 	rsb	r9, r7, r9
 800abcc:	d104      	bne.n	800abd8 <LCD_DrawBitmap+0x1c0>
 800abce:	f8da 2000 	ldr.w	r2, [sl]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	0792      	lsls	r2, r2, #30
 800abd6:	d417      	bmi.n	800ac08 <LCD_DrawBitmap+0x1f0>
 800abd8:	f8da 2000 	ldr.w	r2, [sl]
 800abdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abde:	6810      	ldr	r0, [r2, #0]
 800abe0:	900c      	str	r0, [sp, #48]	; 0x30
 800abe2:	9804      	ldr	r0, [sp, #16]
 800abe4:	b110      	cbz	r0, 800abec <LCD_DrawBitmap+0x1d4>
 800abe6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800abea:	e000      	b.n	800abee <LCD_DrawBitmap+0x1d6>
 800abec:	b2db      	uxtb	r3, r3
 800abee:	6013      	str	r3, [r2, #0]
 800abf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf4:	9900      	ldr	r1, [sp, #0]
 800abf6:	4432      	add	r2, r6
 800abf8:	4630      	mov	r0, r6
 800abfa:	f7ff fdf5 	bl	800a7e8 <LCD_FillRect>
 800abfe:	f8da 3000 	ldr.w	r3, [sl]
 800ac02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	9b05      	ldr	r3, [sp, #20]
 800ac0a:	9a02      	ldr	r2, [sp, #8]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	4633      	mov	r3, r6
 800ac12:	4413      	add	r3, r2
 800ac14:	461e      	mov	r6, r3
 800ac16:	e7c1      	b.n	800ab9c <LCD_DrawBitmap+0x184>
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	9306      	str	r3, [sp, #24]
 800ac1e:	9b03      	ldr	r3, [sp, #12]
 800ac20:	441c      	add	r4, r3
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	e79d      	b.n	800ab64 <LCD_DrawBitmap+0x14c>
 800ac28:	b00f      	add	sp, #60	; 0x3c
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000014 	.word	0x20000014
 800ac34:	20027bb0 	.word	0x20027bb0
 800ac38:	20027b6c 	.word	0x20027b6c

0800ac3c <LCD_SetClipRectMax>:
 800ac3c:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <LCD_SetClipRectMax+0x14>)
 800ac3e:	6819      	ldr	r1, [r3, #0]
 800ac40:	4b04      	ldr	r3, [pc, #16]	; (800ac54 <LCD_SetClipRectMax+0x18>)
 800ac42:	7c4a      	ldrb	r2, [r1, #17]
 800ac44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ac48:	68c3      	ldr	r3, [r0, #12]
 800ac4a:	3108      	adds	r1, #8
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	4718      	bx	r3
 800ac50:	20000014 	.word	0x20000014
 800ac54:	20027bb0 	.word	0x20027bb0

0800ac58 <emWin_LCD_Init>:
 800ac58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac5a:	f7ff ffef 	bl	800ac3c <LCD_SetClipRectMax>
 800ac5e:	f000 fa63 	bl	800b128 <LCD_InitColors>
 800ac62:	4604      	mov	r4, r0
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d144      	bne.n	800acf2 <emWin_LCD_Init+0x9a>
 800ac68:	4605      	mov	r5, r0
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7fe f91e 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800ac70:	9001      	str	r0, [sp, #4]
 800ac72:	b150      	cbz	r0, 800ac8a <emWin_LCD_Init+0x32>
 800ac74:	68c3      	ldr	r3, [r0, #12]
 800ac76:	210c      	movs	r1, #12
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	a801      	add	r0, sp, #4
 800ac7c:	4798      	blx	r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d034      	beq.n	800acee <emWin_LCD_Init+0x96>
 800ac84:	9801      	ldr	r0, [sp, #4]
 800ac86:	4798      	blx	r3
 800ac88:	4304      	orrs	r4, r0
 800ac8a:	3501      	adds	r5, #1
 800ac8c:	2d02      	cmp	r5, #2
 800ac8e:	d1ec      	bne.n	800ac6a <emWin_LCD_Init+0x12>
 800ac90:	bb7c      	cbnz	r4, 800acf2 <emWin_LCD_Init+0x9a>
 800ac92:	f000 fa9f 	bl	800b1d4 <LCD_InitLUT>
 800ac96:	4b18      	ldr	r3, [pc, #96]	; (800acf8 <emWin_LCD_Init+0xa0>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d101      	bne.n	800aca6 <emWin_LCD_Init+0x4e>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e026      	b.n	800acf4 <emWin_LCD_Init+0x9c>
 800aca6:	2401      	movs	r4, #1
 800aca8:	4620      	mov	r0, r4
 800acaa:	f7fe f8ff 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800acae:	9001      	str	r0, [sp, #4]
 800acb0:	b1c8      	cbz	r0, 800ace6 <emWin_LCD_Init+0x8e>
 800acb2:	4620      	mov	r0, r4
 800acb4:	f7ff f804 	bl	8009cc0 <GUI_SelectLayer>
 800acb8:	2004      	movs	r0, #4
 800acba:	f7ff fd0d 	bl	800a6d8 <LCD_SetDrawMode>
 800acbe:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800acc2:	2100      	movs	r1, #0
 800acc4:	461a      	mov	r2, r3
 800acc6:	4608      	mov	r0, r1
 800acc8:	f7ff fd8e 	bl	800a7e8 <LCD_FillRect>
 800accc:	2000      	movs	r0, #0
 800acce:	f7ff fd03 	bl	800a6d8 <LCD_SetDrawMode>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	210e      	movs	r1, #14
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	a801      	add	r0, sp, #4
 800acdc:	4798      	blx	r3
 800acde:	4603      	mov	r3, r0
 800ace0:	b108      	cbz	r0, 800ace6 <emWin_LCD_Init+0x8e>
 800ace2:	9801      	ldr	r0, [sp, #4]
 800ace4:	4798      	blx	r3
 800ace6:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800acea:	d2dd      	bcs.n	800aca8 <emWin_LCD_Init+0x50>
 800acec:	e7d9      	b.n	800aca2 <emWin_LCD_Init+0x4a>
 800acee:	2001      	movs	r0, #1
 800acf0:	e000      	b.n	800acf4 <emWin_LCD_Init+0x9c>
 800acf2:	4620      	mov	r0, r4
 800acf4:	b003      	add	sp, #12
 800acf6:	bd30      	pop	{r4, r5, pc}
 800acf8:	20000910 	.word	0x20000910

0800acfc <LCD_Color2Index>:
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <LCD_Color2Index+0x14>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	7c5a      	ldrb	r2, [r3, #17]
 800ad02:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <LCD_Color2Index+0x18>)
 800ad04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4718      	bx	r3
 800ad0e:	bf00      	nop
 800ad10:	20000014 	.word	0x20000014
 800ad14:	20027bb0 	.word	0x20027bb0

0800ad18 <LCD_Index2Color>:
 800ad18:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <LCD_Index2Color+0x14>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	7c5a      	ldrb	r2, [r3, #17]
 800ad1e:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <LCD_Index2Color+0x18>)
 800ad20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	4718      	bx	r3
 800ad2a:	bf00      	nop
 800ad2c:	20000014 	.word	0x20000014
 800ad30:	20027bb0 	.word	0x20027bb0

0800ad34 <LCD_SetColorIndex>:
 800ad34:	4b04      	ldr	r3, [pc, #16]	; (800ad48 <LCD_SetColorIndex+0x14>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	7c1a      	ldrb	r2, [r3, #16]
 800ad3a:	0752      	lsls	r2, r2, #29
 800ad3c:	bf4c      	ite	mi
 800ad3e:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800ad40:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800ad42:	6018      	str	r0, [r3, #0]
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000014 	.word	0x20000014

0800ad4c <_SetColor>:
 800ad4c:	b508      	push	{r3, lr}
 800ad4e:	4b06      	ldr	r3, [pc, #24]	; (800ad68 <_SetColor+0x1c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ad54:	4281      	cmp	r1, r0
 800ad56:	d006      	beq.n	800ad66 <_SetColor+0x1a>
 800ad58:	6318      	str	r0, [r3, #48]	; 0x30
 800ad5a:	f7ff ffcf 	bl	800acfc <LCD_Color2Index>
 800ad5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad62:	f7ff bfe7 	b.w	800ad34 <LCD_SetColorIndex>
 800ad66:	bd08      	pop	{r3, pc}
 800ad68:	20000014 	.word	0x20000014

0800ad6c <LCD_SetBkColorIndex>:
 800ad6c:	4b04      	ldr	r3, [pc, #16]	; (800ad80 <LCD_SetBkColorIndex+0x14>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	7c1a      	ldrb	r2, [r3, #16]
 800ad72:	0752      	lsls	r2, r2, #29
 800ad74:	bf4c      	ite	mi
 800ad76:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800ad78:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800ad7a:	6018      	str	r0, [r3, #0]
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	20000014 	.word	0x20000014

0800ad84 <_SetBkColor>:
 800ad84:	b508      	push	{r3, lr}
 800ad86:	4b06      	ldr	r3, [pc, #24]	; (800ada0 <_SetBkColor+0x1c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ad8c:	4281      	cmp	r1, r0
 800ad8e:	d006      	beq.n	800ad9e <_SetBkColor+0x1a>
 800ad90:	6358      	str	r0, [r3, #52]	; 0x34
 800ad92:	f7ff ffb3 	bl	800acfc <LCD_Color2Index>
 800ad96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad9a:	f7ff bfe7 	b.w	800ad6c <LCD_SetBkColorIndex>
 800ad9e:	bd08      	pop	{r3, pc}
 800ada0:	20000014 	.word	0x20000014

0800ada4 <LCD_SetBkColor>:
 800ada4:	4b01      	ldr	r3, [pc, #4]	; (800adac <LCD_SetBkColor+0x8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	4718      	bx	r3
 800adac:	20000044 	.word	0x20000044

0800adb0 <LCD_SetColor>:
 800adb0:	4b01      	ldr	r3, [pc, #4]	; (800adb8 <LCD_SetColor+0x8>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4718      	bx	r3
 800adb8:	20000044 	.word	0x20000044

0800adbc <LCD_SetPixelAA4_NoTrans>:
 800adbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc0:	4f27      	ldr	r7, [pc, #156]	; (800ae60 <LCD_SetPixelAA4_NoTrans+0xa4>)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	4690      	mov	r8, r2
 800adc6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800adca:	428a      	cmp	r2, r1
 800adcc:	4604      	mov	r4, r0
 800adce:	460d      	mov	r5, r1
 800add0:	dc44      	bgt.n	800ae5c <LCD_SetPixelAA4_NoTrans+0xa0>
 800add2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800add6:	4291      	cmp	r1, r2
 800add8:	dc40      	bgt.n	800ae5c <LCD_SetPixelAA4_NoTrans+0xa0>
 800adda:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800adde:	4282      	cmp	r2, r0
 800ade0:	dc3c      	bgt.n	800ae5c <LCD_SetPixelAA4_NoTrans+0xa0>
 800ade2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800ade6:	4290      	cmp	r0, r2
 800ade8:	dc38      	bgt.n	800ae5c <LCD_SetPixelAA4_NoTrans+0xa0>
 800adea:	4e1e      	ldr	r6, [pc, #120]	; (800ae64 <LCD_SetPixelAA4_NoTrans+0xa8>)
 800adec:	f1b8 0f00 	cmp.w	r8, #0
 800adf0:	d107      	bne.n	800ae02 <LCD_SetPixelAA4_NoTrans+0x46>
 800adf2:	7c5a      	ldrb	r2, [r3, #17]
 800adf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf6:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68c2      	ldr	r2, [r0, #12]
 800adfe:	6996      	ldr	r6, [r2, #24]
 800ae00:	e009      	b.n	800ae16 <LCD_SetPixelAA4_NoTrans+0x5a>
 800ae02:	f1b8 0f0f 	cmp.w	r8, #15
 800ae06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae08:	d109      	bne.n	800ae1e <LCD_SetPixelAA4_NoTrans+0x62>
 800ae0a:	7c5b      	ldrb	r3, [r3, #17]
 800ae0c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800ae10:	68c3      	ldr	r3, [r0, #12]
 800ae12:	699e      	ldr	r6, [r3, #24]
 800ae14:	6813      	ldr	r3, [r2, #0]
 800ae16:	462a      	mov	r2, r5
 800ae18:	4621      	mov	r1, r4
 800ae1a:	46b4      	mov	ip, r6
 800ae1c:	e01b      	b.n	800ae56 <LCD_SetPixelAA4_NoTrans+0x9a>
 800ae1e:	6810      	ldr	r0, [r2, #0]
 800ae20:	f7ff ff7a 	bl	800ad18 <LCD_Index2Color>
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae28:	4681      	mov	r9, r0
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	f7ff ff74 	bl	800ad18 <LCD_Index2Color>
 800ae30:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <LCD_SetPixelAA4_NoTrans+0xac>)
 800ae32:	4601      	mov	r1, r0
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4642      	mov	r2, r8
 800ae38:	4648      	mov	r0, r9
 800ae3a:	4798      	blx	r3
 800ae3c:	f7ff ff5e 	bl	800acfc <LCD_Color2Index>
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	7c5b      	ldrb	r3, [r3, #17]
 800ae44:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 800ae48:	68f3      	ldr	r3, [r6, #12]
 800ae4a:	699f      	ldr	r7, [r3, #24]
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4603      	mov	r3, r0
 800ae50:	4621      	mov	r1, r4
 800ae52:	4630      	mov	r0, r6
 800ae54:	46bc      	mov	ip, r7
 800ae56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5a:	4760      	bx	ip
 800ae5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae60:	20000014 	.word	0x20000014
 800ae64:	20027bb0 	.word	0x20027bb0
 800ae68:	20000048 	.word	0x20000048

0800ae6c <LCD_AA_MixColors16>:
 800ae6c:	0e0b      	lsrs	r3, r1, #24
 800ae6e:	2bff      	cmp	r3, #255	; 0xff
 800ae70:	b510      	push	{r4, lr}
 800ae72:	4c0e      	ldr	r4, [pc, #56]	; (800aeac <LCD_AA_MixColors16+0x40>)
 800ae74:	d110      	bne.n	800ae98 <LCD_AA_MixColors16+0x2c>
 800ae76:	0e03      	lsrs	r3, r0, #24
 800ae78:	d108      	bne.n	800ae8c <LCD_AA_MixColors16+0x20>
 800ae7a:	f06f 0310 	mvn.w	r3, #16
 800ae7e:	435a      	muls	r2, r3
 800ae80:	32ff      	adds	r2, #255	; 0xff
 800ae82:	6963      	ldr	r3, [r4, #20]
 800ae84:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800ae88:	4018      	ands	r0, r3
 800ae8a:	bd10      	pop	{r4, pc}
 800ae8c:	2bff      	cmp	r3, #255	; 0xff
 800ae8e:	d103      	bne.n	800ae98 <LCD_AA_MixColors16+0x2c>
 800ae90:	6963      	ldr	r3, [r4, #20]
 800ae92:	ea01 0003 	and.w	r0, r1, r3
 800ae96:	bd10      	pop	{r4, pc}
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <LCD_AA_MixColors16+0x44>)
 800ae9a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	b2d2      	uxtb	r2, r2
 800aea2:	4798      	blx	r3
 800aea4:	6961      	ldr	r1, [r4, #20]
 800aea6:	4008      	ands	r0, r1
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	20000048 	.word	0x20000048
 800aeb0:	20000034 	.word	0x20000034

0800aeb4 <LCD_SetPixelAA4_Trans>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	4604      	mov	r4, r0
 800aeba:	460d      	mov	r5, r1
 800aebc:	4616      	mov	r6, r2
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	d040      	beq.n	800af44 <LCD_SetPixelAA4_Trans+0x90>
 800aec2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800af50 <LCD_SetPixelAA4_Trans+0x9c>
 800aec6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeca:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800aece:	4291      	cmp	r1, r2
 800aed0:	db38      	blt.n	800af44 <LCD_SetPixelAA4_Trans+0x90>
 800aed2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800aed6:	4291      	cmp	r1, r2
 800aed8:	dc34      	bgt.n	800af44 <LCD_SetPixelAA4_Trans+0x90>
 800aeda:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800aede:	4290      	cmp	r0, r2
 800aee0:	db30      	blt.n	800af44 <LCD_SetPixelAA4_Trans+0x90>
 800aee2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800aee6:	4290      	cmp	r0, r2
 800aee8:	dc2c      	bgt.n	800af44 <LCD_SetPixelAA4_Trans+0x90>
 800aeea:	2e0e      	cmp	r6, #14
 800aeec:	4f16      	ldr	r7, [pc, #88]	; (800af48 <LCD_SetPixelAA4_Trans+0x94>)
 800aeee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef0:	d909      	bls.n	800af06 <LCD_SetPixelAA4_Trans+0x52>
 800aef2:	7c5b      	ldrb	r3, [r3, #17]
 800aef4:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800aef8:	68c3      	ldr	r3, [r0, #12]
 800aefa:	699e      	ldr	r6, [r3, #24]
 800aefc:	6813      	ldr	r3, [r2, #0]
 800aefe:	46b4      	mov	ip, r6
 800af00:	460a      	mov	r2, r1
 800af02:	4621      	mov	r1, r4
 800af04:	e01b      	b.n	800af3e <LCD_SetPixelAA4_Trans+0x8a>
 800af06:	6810      	ldr	r0, [r2, #0]
 800af08:	f7ff ff06 	bl	800ad18 <LCD_Index2Color>
 800af0c:	4629      	mov	r1, r5
 800af0e:	4681      	mov	r9, r0
 800af10:	4620      	mov	r0, r4
 800af12:	f000 fae3 	bl	800b4dc <LCD_GetPixelColor>
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <LCD_SetPixelAA4_Trans+0x98>)
 800af18:	4632      	mov	r2, r6
 800af1a:	4601      	mov	r1, r0
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4648      	mov	r0, r9
 800af20:	4798      	blx	r3
 800af22:	f7ff feeb 	bl	800acfc <LCD_Color2Index>
 800af26:	f8d8 3000 	ldr.w	r3, [r8]
 800af2a:	7c5b      	ldrb	r3, [r3, #17]
 800af2c:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 800af30:	68f3      	ldr	r3, [r6, #12]
 800af32:	699f      	ldr	r7, [r3, #24]
 800af34:	462a      	mov	r2, r5
 800af36:	4603      	mov	r3, r0
 800af38:	4621      	mov	r1, r4
 800af3a:	4630      	mov	r0, r6
 800af3c:	46bc      	mov	ip, r7
 800af3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af42:	4760      	bx	ip
 800af44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af48:	20027bb0 	.word	0x20027bb0
 800af4c:	20000048 	.word	0x20000048
 800af50:	20000014 	.word	0x20000014

0800af54 <LCD_AA_SetAndMask>:
 800af54:	4b02      	ldr	r3, [pc, #8]	; (800af60 <LCD_AA_SetAndMask+0xc>)
 800af56:	695a      	ldr	r2, [r3, #20]
 800af58:	6158      	str	r0, [r3, #20]
 800af5a:	4610      	mov	r0, r2
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20000048 	.word	0x20000048

0800af64 <LCD_AA_MixColors256>:
 800af64:	b508      	push	{r3, lr}
 800af66:	4b03      	ldr	r3, [pc, #12]	; (800af74 <LCD_AA_MixColors256+0x10>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4798      	blx	r3
 800af6c:	4b02      	ldr	r3, [pc, #8]	; (800af78 <LCD_AA_MixColors256+0x14>)
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	4018      	ands	r0, r3
 800af72:	bd08      	pop	{r3, pc}
 800af74:	20000034 	.word	0x20000034
 800af78:	20000048 	.word	0x20000048

0800af7c <LCD_SetPixelAA8_Trans>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	4604      	mov	r4, r0
 800af82:	460d      	mov	r5, r1
 800af84:	4616      	mov	r6, r2
 800af86:	2a00      	cmp	r2, #0
 800af88:	d03f      	beq.n	800b00a <LCD_SetPixelAA8_Trans+0x8e>
 800af8a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800b014 <LCD_SetPixelAA8_Trans+0x98>
 800af8e:	f8d8 3000 	ldr.w	r3, [r8]
 800af92:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800af96:	4291      	cmp	r1, r2
 800af98:	db37      	blt.n	800b00a <LCD_SetPixelAA8_Trans+0x8e>
 800af9a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800af9e:	4291      	cmp	r1, r2
 800afa0:	dc33      	bgt.n	800b00a <LCD_SetPixelAA8_Trans+0x8e>
 800afa2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800afa6:	4290      	cmp	r0, r2
 800afa8:	db2f      	blt.n	800b00a <LCD_SetPixelAA8_Trans+0x8e>
 800afaa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800afae:	4290      	cmp	r0, r2
 800afb0:	dc2b      	bgt.n	800b00a <LCD_SetPixelAA8_Trans+0x8e>
 800afb2:	2eff      	cmp	r6, #255	; 0xff
 800afb4:	4f16      	ldr	r7, [pc, #88]	; (800b010 <LCD_SetPixelAA8_Trans+0x94>)
 800afb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afb8:	d109      	bne.n	800afce <LCD_SetPixelAA8_Trans+0x52>
 800afba:	7c5b      	ldrb	r3, [r3, #17]
 800afbc:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800afc0:	68c3      	ldr	r3, [r0, #12]
 800afc2:	699e      	ldr	r6, [r3, #24]
 800afc4:	6813      	ldr	r3, [r2, #0]
 800afc6:	46b4      	mov	ip, r6
 800afc8:	460a      	mov	r2, r1
 800afca:	4621      	mov	r1, r4
 800afcc:	e01a      	b.n	800b004 <LCD_SetPixelAA8_Trans+0x88>
 800afce:	6810      	ldr	r0, [r2, #0]
 800afd0:	f7ff fea2 	bl	800ad18 <LCD_Index2Color>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4681      	mov	r9, r0
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fa7f 	bl	800b4dc <LCD_GetPixelColor>
 800afde:	4632      	mov	r2, r6
 800afe0:	4601      	mov	r1, r0
 800afe2:	4648      	mov	r0, r9
 800afe4:	f7ff ffbe 	bl	800af64 <LCD_AA_MixColors256>
 800afe8:	f7ff fe88 	bl	800acfc <LCD_Color2Index>
 800afec:	f8d8 3000 	ldr.w	r3, [r8]
 800aff0:	7c5b      	ldrb	r3, [r3, #17]
 800aff2:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
 800aff6:	68f3      	ldr	r3, [r6, #12]
 800aff8:	699f      	ldr	r7, [r3, #24]
 800affa:	462a      	mov	r2, r5
 800affc:	4603      	mov	r3, r0
 800affe:	4621      	mov	r1, r4
 800b000:	4630      	mov	r0, r6
 800b002:	46bc      	mov	ip, r7
 800b004:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b008:	4760      	bx	ip
 800b00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00e:	bf00      	nop
 800b010:	20027bb0 	.word	0x20027bb0
 800b014:	20000014 	.word	0x20000014

0800b018 <LCD_SetPixelAA8_NoTrans>:
 800b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b01c:	4f27      	ldr	r7, [pc, #156]	; (800b0bc <LCD_SetPixelAA8_NoTrans+0xa4>)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	4690      	mov	r8, r2
 800b022:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b026:	428a      	cmp	r2, r1
 800b028:	4604      	mov	r4, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	dc43      	bgt.n	800b0b6 <LCD_SetPixelAA8_NoTrans+0x9e>
 800b02e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800b032:	4291      	cmp	r1, r2
 800b034:	dc3f      	bgt.n	800b0b6 <LCD_SetPixelAA8_NoTrans+0x9e>
 800b036:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800b03a:	4282      	cmp	r2, r0
 800b03c:	dc3b      	bgt.n	800b0b6 <LCD_SetPixelAA8_NoTrans+0x9e>
 800b03e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800b042:	4290      	cmp	r0, r2
 800b044:	dc37      	bgt.n	800b0b6 <LCD_SetPixelAA8_NoTrans+0x9e>
 800b046:	4e1e      	ldr	r6, [pc, #120]	; (800b0c0 <LCD_SetPixelAA8_NoTrans+0xa8>)
 800b048:	f1b8 0f00 	cmp.w	r8, #0
 800b04c:	d107      	bne.n	800b05e <LCD_SetPixelAA8_NoTrans+0x46>
 800b04e:	7c5a      	ldrb	r2, [r3, #17]
 800b050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b052:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	68c2      	ldr	r2, [r0, #12]
 800b05a:	6996      	ldr	r6, [r2, #24]
 800b05c:	e009      	b.n	800b072 <LCD_SetPixelAA8_NoTrans+0x5a>
 800b05e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b064:	d109      	bne.n	800b07a <LCD_SetPixelAA8_NoTrans+0x62>
 800b066:	7c5b      	ldrb	r3, [r3, #17]
 800b068:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800b06c:	68c3      	ldr	r3, [r0, #12]
 800b06e:	699e      	ldr	r6, [r3, #24]
 800b070:	6813      	ldr	r3, [r2, #0]
 800b072:	462a      	mov	r2, r5
 800b074:	4621      	mov	r1, r4
 800b076:	46b4      	mov	ip, r6
 800b078:	e01a      	b.n	800b0b0 <LCD_SetPixelAA8_NoTrans+0x98>
 800b07a:	6810      	ldr	r0, [r2, #0]
 800b07c:	f7ff fe4c 	bl	800ad18 <LCD_Index2Color>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	4681      	mov	r9, r0
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	f7ff fe46 	bl	800ad18 <LCD_Index2Color>
 800b08c:	4642      	mov	r2, r8
 800b08e:	4601      	mov	r1, r0
 800b090:	4648      	mov	r0, r9
 800b092:	f7ff ff67 	bl	800af64 <LCD_AA_MixColors256>
 800b096:	f7ff fe31 	bl	800acfc <LCD_Color2Index>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	7c5b      	ldrb	r3, [r3, #17]
 800b09e:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 800b0a2:	68f3      	ldr	r3, [r6, #12]
 800b0a4:	699f      	ldr	r7, [r3, #24]
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	46bc      	mov	ip, r7
 800b0b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	4760      	bx	ip
 800b0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000014 	.word	0x20000014
 800b0c0:	20027bb0 	.word	0x20027bb0

0800b0c4 <LCD__GetPfSetPixel>:
 800b0c4:	2804      	cmp	r0, #4
 800b0c6:	d003      	beq.n	800b0d0 <LCD__GetPfSetPixel+0xc>
 800b0c8:	2808      	cmp	r0, #8
 800b0ca:	d009      	beq.n	800b0e0 <LCD__GetPfSetPixel+0x1c>
 800b0cc:	2802      	cmp	r0, #2
 800b0ce:	d111      	bne.n	800b0f4 <LCD__GetPfSetPixel+0x30>
 800b0d0:	4b09      	ldr	r3, [pc, #36]	; (800b0f8 <LCD__GetPfSetPixel+0x34>)
 800b0d2:	480a      	ldr	r0, [pc, #40]	; (800b0fc <LCD__GetPfSetPixel+0x38>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	7c1b      	ldrb	r3, [r3, #16]
 800b0d8:	f013 0f02 	tst.w	r3, #2
 800b0dc:	4b08      	ldr	r3, [pc, #32]	; (800b100 <LCD__GetPfSetPixel+0x3c>)
 800b0de:	e006      	b.n	800b0ee <LCD__GetPfSetPixel+0x2a>
 800b0e0:	4b05      	ldr	r3, [pc, #20]	; (800b0f8 <LCD__GetPfSetPixel+0x34>)
 800b0e2:	4808      	ldr	r0, [pc, #32]	; (800b104 <LCD__GetPfSetPixel+0x40>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	7c1b      	ldrb	r3, [r3, #16]
 800b0e8:	f013 0f02 	tst.w	r3, #2
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <LCD__GetPfSetPixel+0x44>)
 800b0ee:	bf08      	it	eq
 800b0f0:	4618      	moveq	r0, r3
 800b0f2:	4770      	bx	lr
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	4770      	bx	lr
 800b0f8:	20000014 	.word	0x20000014
 800b0fc:	0800aeb5 	.word	0x0800aeb5
 800b100:	0800adbd 	.word	0x0800adbd
 800b104:	0800af7d 	.word	0x0800af7d
 800b108:	0800b019 	.word	0x0800b019

0800b10c <_OnExit>:
 800b10c:	b510      	push	{r4, lr}
 800b10e:	4c04      	ldr	r4, [pc, #16]	; (800b120 <_OnExit+0x14>)
 800b110:	6820      	ldr	r0, [r4, #0]
 800b112:	f7fd f8e5 	bl	80082e0 <GUI_ALLOC_FreeFixedBlock>
 800b116:	4a03      	ldr	r2, [pc, #12]	; (800b124 <_OnExit+0x18>)
 800b118:	2300      	movs	r3, #0
 800b11a:	6023      	str	r3, [r4, #0]
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	bd10      	pop	{r4, pc}
 800b120:	20027bc8 	.word	0x20027bc8
 800b124:	20000a78 	.word	0x20000a78

0800b128 <LCD_InitColors>:
 800b128:	b538      	push	{r3, r4, r5, lr}
 800b12a:	4d0a      	ldr	r5, [pc, #40]	; (800b154 <LCD_InitColors+0x2c>)
 800b12c:	682c      	ldr	r4, [r5, #0]
 800b12e:	b964      	cbnz	r4, 800b14a <LCD_InitColors+0x22>
 800b130:	4b09      	ldr	r3, [pc, #36]	; (800b158 <LCD_InitColors+0x30>)
 800b132:	6818      	ldr	r0, [r3, #0]
 800b134:	0080      	lsls	r0, r0, #2
 800b136:	f7fd f9bf 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 800b13a:	6028      	str	r0, [r5, #0]
 800b13c:	b138      	cbz	r0, 800b14e <LCD_InitColors+0x26>
 800b13e:	4807      	ldr	r0, [pc, #28]	; (800b15c <LCD_InitColors+0x34>)
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <LCD_InitColors+0x38>)
 800b142:	f840 3f04 	str.w	r3, [r0, #4]!
 800b146:	f7fd fe8b 	bl	8008e60 <GUI__RegisterExit>
 800b14a:	2000      	movs	r0, #0
 800b14c:	bd38      	pop	{r3, r4, r5, pc}
 800b14e:	2001      	movs	r0, #1
 800b150:	bd38      	pop	{r3, r4, r5, pc}
 800b152:	bf00      	nop
 800b154:	20027bc8 	.word	0x20027bc8
 800b158:	20000060 	.word	0x20000060
 800b15c:	20000a78 	.word	0x20000a78
 800b160:	0800b10d 	.word	0x0800b10d

0800b164 <LCD_GetpPalConvTableUncached>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4604      	mov	r4, r0
 800b16a:	b318      	cbz	r0, 800b1b4 <LCD_GetpPalConvTableUncached+0x50>
 800b16c:	6887      	ldr	r7, [r0, #8]
 800b16e:	b31f      	cbz	r7, 800b1b8 <LCD_GetpPalConvTableUncached+0x54>
 800b170:	4d14      	ldr	r5, [pc, #80]	; (800b1c4 <LCD_GetpPalConvTableUncached+0x60>)
 800b172:	6828      	ldr	r0, [r5, #0]
 800b174:	b320      	cbz	r0, 800b1c0 <LCD_GetpPalConvTableUncached+0x5c>
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b17c:	dc1f      	bgt.n	800b1be <LCD_GetpPalConvTableUncached+0x5a>
 800b17e:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <LCD_GetpPalConvTableUncached+0x64>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	429a      	cmp	r2, r3
 800b184:	bfa8      	it	ge
 800b186:	461a      	movge	r2, r3
 800b188:	4690      	mov	r8, r2
 800b18a:	2600      	movs	r6, #0
 800b18c:	4546      	cmp	r6, r8
 800b18e:	da09      	bge.n	800b1a4 <LCD_GetpPalConvTableUncached+0x40>
 800b190:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 800b194:	f8d5 9000 	ldr.w	r9, [r5]
 800b198:	f7ff fdb0 	bl	800acfc <LCD_Color2Index>
 800b19c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f3      	b.n	800b18c <LCD_GetpPalConvTableUncached+0x28>
 800b1a4:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <LCD_GetpPalConvTableUncached+0x68>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	b10b      	cbz	r3, 800b1ae <LCD_GetpPalConvTableUncached+0x4a>
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	4798      	blx	r3
 800b1ae:	6828      	ldr	r0, [r5, #0]
 800b1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1be:	2000      	movs	r0, #0
 800b1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1c4:	20027bc8 	.word	0x20027bc8
 800b1c8:	20000060 	.word	0x20000060
 800b1cc:	20000a78 	.word	0x20000a78

0800b1d0 <LCD_GetpPalConvTableBM>:
 800b1d0:	f7ff bfc8 	b.w	800b164 <LCD_GetpPalConvTableUncached>

0800b1d4 <LCD_InitLUT>:
 800b1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	f000 f943 	bl	800b462 <LCD_GetNumLayers>
 800b1dc:	4e1c      	ldr	r6, [pc, #112]	; (800b250 <LCD_InitLUT+0x7c>)
 800b1de:	f8df a078 	ldr.w	sl, [pc, #120]	; 800b258 <LCD_InitLUT+0x84>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	2400      	movs	r4, #0
 800b1e6:	46b1      	mov	r9, r6
 800b1e8:	4544      	cmp	r4, r8
 800b1ea:	da2d      	bge.n	800b248 <LCD_InitLUT+0x74>
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f7fd fe5d 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800b1f2:	b338      	cbz	r0, 800b244 <LCD_InitLUT+0x70>
 800b1f4:	6833      	ldr	r3, [r6, #0]
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f893 b011 	ldrb.w	fp, [r3, #17]
 800b1fc:	745c      	strb	r4, [r3, #17]
 800b1fe:	f000 f869 	bl	800b2d4 <LCD_GetBitsPerPixelEx>
 800b202:	2808      	cmp	r0, #8
 800b204:	dd04      	ble.n	800b210 <LCD_InitLUT+0x3c>
 800b206:	f8d9 3000 	ldr.w	r3, [r9]
 800b20a:	f883 b011 	strb.w	fp, [r3, #17]
 800b20e:	e019      	b.n	800b244 <LCD_InitLUT+0x70>
 800b210:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	4b0f      	ldr	r3, [pc, #60]	; (800b254 <LCD_InitLUT+0x80>)
 800b218:	429a      	cmp	r2, r3
 800b21a:	d0f4      	beq.n	800b206 <LCD_InitLUT+0x32>
 800b21c:	4620      	mov	r0, r4
 800b21e:	f000 f85c 	bl	800b2da <LCD_GetNumColorsEx>
 800b222:	2500      	movs	r5, #0
 800b224:	4603      	mov	r3, r0
 800b226:	429d      	cmp	r5, r3
 800b228:	daed      	bge.n	800b206 <LCD_InitLUT+0x32>
 800b22a:	b2ef      	uxtb	r7, r5
 800b22c:	4638      	mov	r0, r7
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	f7ff fd72 	bl	800ad18 <LCD_Index2Color>
 800b234:	4639      	mov	r1, r7
 800b236:	4602      	mov	r2, r0
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fd20 	bl	800bc7e <LCD_SetLUTEntryEx>
 800b23e:	3501      	adds	r5, #1
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	e7f0      	b.n	800b226 <LCD_InitLUT+0x52>
 800b244:	3401      	adds	r4, #1
 800b246:	e7cf      	b.n	800b1e8 <LCD_InitLUT+0x14>
 800b248:	b003      	add	sp, #12
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24e:	bf00      	nop
 800b250:	20000014 	.word	0x20000014
 800b254:	080194c4 	.word	0x080194c4
 800b258:	20027bb0 	.word	0x20027bb0

0800b25c <LCD_GetBkColorIndex>:
 800b25c:	4b02      	ldr	r3, [pc, #8]	; (800b268 <LCD_GetBkColorIndex+0xc>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b262:	6818      	ldr	r0, [r3, #0]
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20000014 	.word	0x20000014

0800b26c <LCD_GetColorIndex>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <LCD_GetColorIndex+0xc>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	20000014 	.word	0x20000014

0800b27c <_GetDevProp>:
 800b27c:	2801      	cmp	r0, #1
 800b27e:	b510      	push	{r4, lr}
 800b280:	460c      	mov	r4, r1
 800b282:	dc08      	bgt.n	800b296 <_GetDevProp+0x1a>
 800b284:	f7fd fe12 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800b288:	b128      	cbz	r0, 800b296 <_GetDevProp+0x1a>
 800b28a:	68c3      	ldr	r3, [r0, #12]
 800b28c:	4621      	mov	r1, r4
 800b28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b294:	4718      	bx	r3
 800b296:	2000      	movs	r0, #0
 800b298:	bd10      	pop	{r4, pc}

0800b29a <_GetMaxValue>:
 800b29a:	b538      	push	{r3, r4, r5, lr}
 800b29c:	4601      	mov	r1, r0
 800b29e:	4605      	mov	r5, r0
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	f7ff ffeb 	bl	800b27c <_GetDevProp>
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	f7ff ffe6 	bl	800b27c <_GetDevProp>
 800b2b0:	42a0      	cmp	r0, r4
 800b2b2:	bfb8      	it	lt
 800b2b4:	4620      	movlt	r0, r4
 800b2b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}

0800b2bc <LCD_GetXSizeEx>:
 800b2bc:	2101      	movs	r1, #1
 800b2be:	f7ff bfdd 	b.w	800b27c <_GetDevProp>

0800b2c2 <LCD_GetYSizeEx>:
 800b2c2:	2102      	movs	r1, #2
 800b2c4:	f7ff bfda 	b.w	800b27c <_GetDevProp>

0800b2c8 <LCD_GetVXSizeEx>:
 800b2c8:	2103      	movs	r1, #3
 800b2ca:	f7ff bfd7 	b.w	800b27c <_GetDevProp>

0800b2ce <LCD_GetVYSizeEx>:
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	f7ff bfd4 	b.w	800b27c <_GetDevProp>

0800b2d4 <LCD_GetBitsPerPixelEx>:
 800b2d4:	2108      	movs	r1, #8
 800b2d6:	f7ff bfd1 	b.w	800b27c <_GetDevProp>

0800b2da <LCD_GetNumColorsEx>:
 800b2da:	2109      	movs	r1, #9
 800b2dc:	f7ff bfce 	b.w	800b27c <_GetDevProp>

0800b2e0 <LCD_GetMirrorXEx>:
 800b2e0:	210c      	movs	r1, #12
 800b2e2:	f7ff bfcb 	b.w	800b27c <_GetDevProp>

0800b2e6 <LCD_GetMirrorYEx>:
 800b2e6:	210d      	movs	r1, #13
 800b2e8:	f7ff bfc8 	b.w	800b27c <_GetDevProp>

0800b2ec <LCD_GetSwapXYEx>:
 800b2ec:	210e      	movs	r1, #14
 800b2ee:	f7ff bfc5 	b.w	800b27c <_GetDevProp>
	...

0800b2f4 <LCD_GetXSize>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <LCD_GetXSize+0xc>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	7c58      	ldrb	r0, [r3, #17]
 800b2fa:	f7ff bfdf 	b.w	800b2bc <LCD_GetXSizeEx>
 800b2fe:	bf00      	nop
 800b300:	20000014 	.word	0x20000014

0800b304 <LCD_GetYSize>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <LCD_GetYSize+0xc>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	7c58      	ldrb	r0, [r3, #17]
 800b30a:	f7ff bfda 	b.w	800b2c2 <LCD_GetYSizeEx>
 800b30e:	bf00      	nop
 800b310:	20000014 	.word	0x20000014

0800b314 <LCD_GetNumColors>:
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <LCD_GetNumColors+0xc>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	7c58      	ldrb	r0, [r3, #17]
 800b31a:	f7ff bfde 	b.w	800b2da <LCD_GetNumColorsEx>
 800b31e:	bf00      	nop
 800b320:	20000014 	.word	0x20000014

0800b324 <GUI_GetBitsPerPixelEx>:
 800b324:	4b03      	ldr	r3, [pc, #12]	; (800b334 <GUI_GetBitsPerPixelEx+0x10>)
 800b326:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b32a:	68c3      	ldr	r3, [r0, #12]
 800b32c:	2108      	movs	r1, #8
 800b32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b330:	4718      	bx	r3
 800b332:	bf00      	nop
 800b334:	20027bb0 	.word	0x20027bb0

0800b338 <LCD_GetPaletteEx>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	f7fd fdb7 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800b33e:	b128      	cbz	r0, 800b34c <LCD_GetPaletteEx+0x14>
 800b340:	68c3      	ldr	r3, [r0, #12]
 800b342:	2102      	movs	r1, #2
 800b344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b34a:	4718      	bx	r3
 800b34c:	bd10      	pop	{r4, pc}
	...

0800b350 <LCD_GetPalette>:
 800b350:	4b02      	ldr	r3, [pc, #8]	; (800b35c <LCD_GetPalette+0xc>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	7c58      	ldrb	r0, [r3, #17]
 800b356:	f7ff bfef 	b.w	800b338 <LCD_GetPaletteEx>
 800b35a:	bf00      	nop
 800b35c:	20000014 	.word	0x20000014

0800b360 <GUI_GetpfIndex2ColorEx>:
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <GUI_GetpfIndex2ColorEx+0xc>)
 800b362:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	6858      	ldr	r0, [r3, #4]
 800b36a:	4770      	bx	lr
 800b36c:	20027bb0 	.word	0x20027bb0

0800b370 <GUI_GetpfColor2IndexEx>:
 800b370:	4b02      	ldr	r3, [pc, #8]	; (800b37c <GUI_GetpfColor2IndexEx+0xc>)
 800b372:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	4770      	bx	lr
 800b37c:	20027bb0 	.word	0x20027bb0

0800b380 <LCD_GetXSizeMax>:
 800b380:	2001      	movs	r0, #1
 800b382:	f7ff bf8a 	b.w	800b29a <_GetMaxValue>

0800b386 <LCD_GetYSizeMax>:
 800b386:	2002      	movs	r0, #2
 800b388:	f7ff bf87 	b.w	800b29a <_GetMaxValue>

0800b38c <LCD_GetVXSizeMax>:
 800b38c:	2003      	movs	r0, #3
 800b38e:	f7ff bf84 	b.w	800b29a <_GetMaxValue>
	...

0800b394 <LCD_SetDisplaySize>:
 800b394:	4b01      	ldr	r3, [pc, #4]	; (800b39c <LCD_SetDisplaySize+0x8>)
 800b396:	e883 0003 	stmia.w	r3, {r0, r1}
 800b39a:	4770      	bx	lr
 800b39c:	20000a84 	.word	0x20000a84

0800b3a0 <LCD_GetXSizeDisplay>:
 800b3a0:	4b01      	ldr	r3, [pc, #4]	; (800b3a8 <LCD_GetXSizeDisplay+0x8>)
 800b3a2:	6818      	ldr	r0, [r3, #0]
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	20000a84 	.word	0x20000a84

0800b3ac <LCD_GetYSizeDisplay>:
 800b3ac:	4b01      	ldr	r3, [pc, #4]	; (800b3b4 <LCD_GetYSizeDisplay+0x8>)
 800b3ae:	6858      	ldr	r0, [r3, #4]
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	20000a84 	.word	0x20000a84

0800b3b8 <LCD__GetBPP>:
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d03b      	beq.n	800b434 <LCD__GetBPP+0x7c>
 800b3bc:	f030 0301 	bics.w	r3, r0, #1
 800b3c0:	d029      	beq.n	800b416 <LCD__GetBPP+0x5e>
 800b3c2:	f030 0303 	bics.w	r3, r0, #3
 800b3c6:	d028      	beq.n	800b41a <LCD__GetBPP+0x62>
 800b3c8:	f030 0307 	bics.w	r3, r0, #7
 800b3cc:	d027      	beq.n	800b41e <LCD__GetBPP+0x66>
 800b3ce:	f030 030f 	bics.w	r3, r0, #15
 800b3d2:	d026      	beq.n	800b422 <LCD__GetBPP+0x6a>
 800b3d4:	f030 031f 	bics.w	r3, r0, #31
 800b3d8:	d025      	beq.n	800b426 <LCD__GetBPP+0x6e>
 800b3da:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b3de:	d024      	beq.n	800b42a <LCD__GetBPP+0x72>
 800b3e0:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b3e4:	f023 0301 	bic.w	r3, r3, #1
 800b3e8:	b30b      	cbz	r3, 800b42e <LCD__GetBPP+0x76>
 800b3ea:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800b3ee:	f023 030f 	bic.w	r3, r3, #15
 800b3f2:	b1e3      	cbz	r3, 800b42e <LCD__GetBPP+0x76>
 800b3f4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800b3f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b3fc:	b1bb      	cbz	r3, 800b42e <LCD__GetBPP+0x76>
 800b3fe:	0c03      	lsrs	r3, r0, #16
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	b1a3      	cbz	r3, 800b42e <LCD__GetBPP+0x76>
 800b404:	0c83      	lsrs	r3, r0, #18
 800b406:	049b      	lsls	r3, r3, #18
 800b408:	b19b      	cbz	r3, 800b432 <LCD__GetBPP+0x7a>
 800b40a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b40e:	bf0c      	ite	eq
 800b410:	2018      	moveq	r0, #24
 800b412:	2020      	movne	r0, #32
 800b414:	4770      	bx	lr
 800b416:	2001      	movs	r0, #1
 800b418:	4770      	bx	lr
 800b41a:	2002      	movs	r0, #2
 800b41c:	4770      	bx	lr
 800b41e:	2003      	movs	r0, #3
 800b420:	4770      	bx	lr
 800b422:	2004      	movs	r0, #4
 800b424:	4770      	bx	lr
 800b426:	2005      	movs	r0, #5
 800b428:	4770      	bx	lr
 800b42a:	2008      	movs	r0, #8
 800b42c:	4770      	bx	lr
 800b42e:	2010      	movs	r0, #16
 800b430:	4770      	bx	lr
 800b432:	2012      	movs	r0, #18
 800b434:	4770      	bx	lr

0800b436 <LCD__GetBPPDevice>:
 800b436:	b508      	push	{r3, lr}
 800b438:	f7ff ffbe 	bl	800b3b8 <LCD__GetBPP>
 800b43c:	2801      	cmp	r0, #1
 800b43e:	d00f      	beq.n	800b460 <LCD__GetBPPDevice+0x2a>
 800b440:	1e83      	subs	r3, r0, #2
 800b442:	2b06      	cmp	r3, #6
 800b444:	d909      	bls.n	800b45a <LCD__GetBPPDevice+0x24>
 800b446:	f1a0 0309 	sub.w	r3, r0, #9
 800b44a:	2b07      	cmp	r3, #7
 800b44c:	d907      	bls.n	800b45e <LCD__GetBPPDevice+0x28>
 800b44e:	3811      	subs	r0, #17
 800b450:	280f      	cmp	r0, #15
 800b452:	bf8c      	ite	hi
 800b454:	2000      	movhi	r0, #0
 800b456:	2020      	movls	r0, #32
 800b458:	bd08      	pop	{r3, pc}
 800b45a:	2008      	movs	r0, #8
 800b45c:	bd08      	pop	{r3, pc}
 800b45e:	2010      	movs	r0, #16
 800b460:	bd08      	pop	{r3, pc}

0800b462 <LCD_GetNumLayers>:
 800b462:	b510      	push	{r4, lr}
 800b464:	2000      	movs	r0, #0
 800b466:	f7fd fd21 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800b46a:	1c04      	adds	r4, r0, #0
 800b46c:	f04f 0001 	mov.w	r0, #1
 800b470:	bf18      	it	ne
 800b472:	2401      	movne	r4, #1
 800b474:	f7fd fd1a 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800b478:	b100      	cbz	r0, 800b47c <LCD_GetNumLayers+0x1a>
 800b47a:	3401      	adds	r4, #1
 800b47c:	4620      	mov	r0, r4
 800b47e:	bd10      	pop	{r4, pc}

0800b480 <LCD_GetPixelIndex>:
 800b480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b482:	4f14      	ldr	r7, [pc, #80]	; (800b4d4 <LCD_GetPixelIndex+0x54>)
 800b484:	4e14      	ldr	r6, [pc, #80]	; (800b4d8 <LCD_GetPixelIndex+0x58>)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	7c5b      	ldrb	r3, [r3, #17]
 800b48a:	4604      	mov	r4, r0
 800b48c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800b490:	68c3      	ldr	r3, [r0, #12]
 800b492:	460d      	mov	r5, r1
 800b494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b496:	4669      	mov	r1, sp
 800b498:	4798      	blx	r3
 800b49a:	f9bd 3000 	ldrsh.w	r3, [sp]
 800b49e:	42a3      	cmp	r3, r4
 800b4a0:	dc15      	bgt.n	800b4ce <LCD_GetPixelIndex+0x4e>
 800b4a2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800b4a6:	429c      	cmp	r4, r3
 800b4a8:	dc11      	bgt.n	800b4ce <LCD_GetPixelIndex+0x4e>
 800b4aa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800b4ae:	42ab      	cmp	r3, r5
 800b4b0:	dc0d      	bgt.n	800b4ce <LCD_GetPixelIndex+0x4e>
 800b4b2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800b4b6:	429d      	cmp	r5, r3
 800b4b8:	dc09      	bgt.n	800b4ce <LCD_GetPixelIndex+0x4e>
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	7c5b      	ldrb	r3, [r3, #17]
 800b4be:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 800b4c2:	68c3      	ldr	r3, [r0, #12]
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	4798      	blx	r3
 800b4cc:	e000      	b.n	800b4d0 <LCD_GetPixelIndex+0x50>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	b003      	add	sp, #12
 800b4d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4d4:	20000014 	.word	0x20000014
 800b4d8:	20027bb0 	.word	0x20027bb0

0800b4dc <LCD_GetPixelColor>:
 800b4dc:	b508      	push	{r3, lr}
 800b4de:	f7ff ffcf 	bl	800b480 <LCD_GetPixelIndex>
 800b4e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b4e6:	f7ff bc17 	b.w	800ad18 <LCD_Index2Color>
	...

0800b4ec <LCD_ReadRectEx>:
 800b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	b087      	sub	sp, #28
 800b4f2:	4690      	mov	r8, r2
 800b4f4:	9303      	str	r3, [sp, #12]
 800b4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b4fa:	68da      	ldr	r2, [r3, #12]
 800b4fc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b4fe:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800b502:	4607      	mov	r7, r0
 800b504:	460e      	mov	r6, r1
 800b506:	b96b      	cbnz	r3, 800b524 <LCD_ReadRectEx+0x38>
 800b508:	4b60      	ldr	r3, [pc, #384]	; (800b68c <LCD_ReadRectEx+0x1a0>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	7c58      	ldrb	r0, [r3, #17]
 800b50e:	f7ff ff09 	bl	800b324 <GUI_GetBitsPerPixelEx>
 800b512:	2808      	cmp	r0, #8
 800b514:	dd15      	ble.n	800b542 <LCD_ReadRectEx+0x56>
 800b516:	2811      	cmp	r0, #17
 800b518:	bfb4      	ite	lt
 800b51a:	f04f 0a02 	movlt.w	sl, #2
 800b51e:	f04f 0a04 	movge.w	sl, #4
 800b522:	e010      	b.n	800b546 <LCD_ReadRectEx+0x5a>
 800b524:	2101      	movs	r1, #1
 800b526:	a811      	add	r0, sp, #68	; 0x44
 800b528:	4798      	blx	r3
 800b52a:	4605      	mov	r5, r0
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d0eb      	beq.n	800b508 <LCD_ReadRectEx+0x1c>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	9401      	str	r4, [sp, #4]
 800b536:	4643      	mov	r3, r8
 800b538:	4632      	mov	r2, r6
 800b53a:	4639      	mov	r1, r7
 800b53c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b53e:	47a8      	blx	r5
 800b540:	e0a0      	b.n	800b684 <LCD_ReadRectEx+0x198>
 800b542:	f04f 0a01 	mov.w	sl, #1
 800b546:	1e43      	subs	r3, r0, #1
 800b548:	2500      	movs	r5, #0
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	429e      	cmp	r6, r3
 800b550:	f300 8098 	bgt.w	800b684 <LCD_ReadRectEx+0x198>
 800b554:	f1ba 0f02 	cmp.w	sl, #2
 800b558:	d009      	beq.n	800b56e <LCD_ReadRectEx+0x82>
 800b55a:	f1ba 0f04 	cmp.w	sl, #4
 800b55e:	d004      	beq.n	800b56a <LCD_ReadRectEx+0x7e>
 800b560:	f1ba 0f01 	cmp.w	sl, #1
 800b564:	f040 808c 	bne.w	800b680 <LCD_ReadRectEx+0x194>
 800b568:	e003      	b.n	800b572 <LCD_ReadRectEx+0x86>
 800b56a:	46bb      	mov	fp, r7
 800b56c:	e07d      	b.n	800b66a <LCD_ReadRectEx+0x17e>
 800b56e:	46bb      	mov	fp, r7
 800b570:	e070      	b.n	800b654 <LCD_ReadRectEx+0x168>
 800b572:	9b04      	ldr	r3, [sp, #16]
 800b574:	2b07      	cmp	r3, #7
 800b576:	f200 8083 	bhi.w	800b680 <LCD_ReadRectEx+0x194>
 800b57a:	e8df f003 	tbb	[pc, r3]
 800b57e:	0a0e      	.short	0x0a0e
 800b580:	04040707 	.word	0x04040707
 800b584:	0404      	.short	0x0404
 800b586:	ebc4 0b07 	rsb	fp, r4, r7
 800b58a:	e059      	b.n	800b640 <LCD_ReadRectEx+0x154>
 800b58c:	46bb      	mov	fp, r7
 800b58e:	230f      	movs	r3, #15
 800b590:	e03b      	b.n	800b60a <LCD_ReadRectEx+0x11e>
 800b592:	46bb      	mov	fp, r7
 800b594:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b598:	e019      	b.n	800b5ce <LCD_ReadRectEx+0xe2>
 800b59a:	46bb      	mov	fp, r7
 800b59c:	45c3      	cmp	fp, r8
 800b59e:	dc6f      	bgt.n	800b680 <LCD_ReadRectEx+0x194>
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	4659      	mov	r1, fp
 800b5a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b5a6:	47c8      	blx	r9
 800b5a8:	7822      	ldrb	r2, [r4, #0]
 800b5aa:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800b5ae:	412b      	asrs	r3, r5
 800b5b0:	401a      	ands	r2, r3
 800b5b2:	f1c5 0307 	rsb	r3, r5, #7
 800b5b6:	4098      	lsls	r0, r3
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	4310      	orrs	r0, r2
 800b5bc:	f025 0307 	bic.w	r3, r5, #7
 800b5c0:	7020      	strb	r0, [r4, #0]
 800b5c2:	f10b 0b01 	add.w	fp, fp, #1
 800b5c6:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 800b5ca:	411d      	asrs	r5, r3
 800b5cc:	e7e6      	b.n	800b59c <LCD_ReadRectEx+0xb0>
 800b5ce:	45c3      	cmp	fp, r8
 800b5d0:	dc56      	bgt.n	800b680 <LCD_ReadRectEx+0x194>
 800b5d2:	4659      	mov	r1, fp
 800b5d4:	4632      	mov	r2, r6
 800b5d6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b5d8:	9305      	str	r3, [sp, #20]
 800b5da:	47c8      	blx	r9
 800b5dc:	9b05      	ldr	r3, [sp, #20]
 800b5de:	f894 e000 	ldrb.w	lr, [r4]
 800b5e2:	006a      	lsls	r2, r5, #1
 800b5e4:	fa43 f102 	asr.w	r1, r3, r2
 800b5e8:	f1c2 0206 	rsb	r2, r2, #6
 800b5ec:	ea0e 0101 	and.w	r1, lr, r1
 800b5f0:	4090      	lsls	r0, r2
 800b5f2:	3501      	adds	r5, #1
 800b5f4:	ea41 0200 	orr.w	r2, r1, r0
 800b5f8:	7022      	strb	r2, [r4, #0]
 800b5fa:	f025 0203 	bic.w	r2, r5, #3
 800b5fe:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 800b602:	f10b 0b01 	add.w	fp, fp, #1
 800b606:	4115      	asrs	r5, r2
 800b608:	e7e1      	b.n	800b5ce <LCD_ReadRectEx+0xe2>
 800b60a:	45c3      	cmp	fp, r8
 800b60c:	dc38      	bgt.n	800b680 <LCD_ReadRectEx+0x194>
 800b60e:	4659      	mov	r1, fp
 800b610:	4632      	mov	r2, r6
 800b612:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b614:	9305      	str	r3, [sp, #20]
 800b616:	47c8      	blx	r9
 800b618:	9b05      	ldr	r3, [sp, #20]
 800b61a:	f894 e000 	ldrb.w	lr, [r4]
 800b61e:	00aa      	lsls	r2, r5, #2
 800b620:	fa03 f102 	lsl.w	r1, r3, r2
 800b624:	f1c2 0204 	rsb	r2, r2, #4
 800b628:	ea0e 0101 	and.w	r1, lr, r1
 800b62c:	4090      	lsls	r0, r2
 800b62e:	ea41 0200 	orr.w	r2, r1, r0
 800b632:	7022      	strb	r2, [r4, #0]
 800b634:	f10b 0b01 	add.w	fp, fp, #1
 800b638:	442c      	add	r4, r5
 800b63a:	f085 0501 	eor.w	r5, r5, #1
 800b63e:	e7e4      	b.n	800b60a <LCD_ReadRectEx+0x11e>
 800b640:	eb04 010b 	add.w	r1, r4, fp
 800b644:	4588      	cmp	r8, r1
 800b646:	db1b      	blt.n	800b680 <LCD_ReadRectEx+0x194>
 800b648:	4632      	mov	r2, r6
 800b64a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b64c:	47c8      	blx	r9
 800b64e:	f804 0b01 	strb.w	r0, [r4], #1
 800b652:	e7f5      	b.n	800b640 <LCD_ReadRectEx+0x154>
 800b654:	45c3      	cmp	fp, r8
 800b656:	dc13      	bgt.n	800b680 <LCD_ReadRectEx+0x194>
 800b658:	4659      	mov	r1, fp
 800b65a:	4632      	mov	r2, r6
 800b65c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b65e:	47c8      	blx	r9
 800b660:	f10b 0b01 	add.w	fp, fp, #1
 800b664:	f824 0b02 	strh.w	r0, [r4], #2
 800b668:	e7f4      	b.n	800b654 <LCD_ReadRectEx+0x168>
 800b66a:	45c3      	cmp	fp, r8
 800b66c:	dc08      	bgt.n	800b680 <LCD_ReadRectEx+0x194>
 800b66e:	4659      	mov	r1, fp
 800b670:	4632      	mov	r2, r6
 800b672:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b674:	47c8      	blx	r9
 800b676:	f10b 0b01 	add.w	fp, fp, #1
 800b67a:	f844 0b04 	str.w	r0, [r4], #4
 800b67e:	e7f4      	b.n	800b66a <LCD_ReadRectEx+0x17e>
 800b680:	3601      	adds	r6, #1
 800b682:	e763      	b.n	800b54c <LCD_ReadRectEx+0x60>
 800b684:	b007      	add	sp, #28
 800b686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68a:	bf00      	nop
 800b68c:	20000014 	.word	0x20000014

0800b690 <GUI_ReadRectEx>:
 800b690:	b4f0      	push	{r4, r5, r6, r7}
 800b692:	4d16      	ldr	r5, [pc, #88]	; (800b6ec <GUI_ReadRectEx+0x5c>)
 800b694:	9e04      	ldr	r6, [sp, #16]
 800b696:	682d      	ldr	r5, [r5, #0]
 800b698:	9c05      	ldr	r4, [sp, #20]
 800b69a:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800b69e:	42b8      	cmp	r0, r7
 800b6a0:	bfb8      	it	lt
 800b6a2:	4638      	movlt	r0, r7
 800b6a4:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800b6a8:	42ba      	cmp	r2, r7
 800b6aa:	bfa8      	it	ge
 800b6ac:	463a      	movge	r2, r7
 800b6ae:	4290      	cmp	r0, r2
 800b6b0:	dc1a      	bgt.n	800b6e8 <GUI_ReadRectEx+0x58>
 800b6b2:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800b6b6:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800b6ba:	42b9      	cmp	r1, r7
 800b6bc:	bfb8      	it	lt
 800b6be:	4639      	movlt	r1, r7
 800b6c0:	42ab      	cmp	r3, r5
 800b6c2:	bfa8      	it	ge
 800b6c4:	462b      	movge	r3, r5
 800b6c6:	428b      	cmp	r3, r1
 800b6c8:	db0e      	blt.n	800b6e8 <GUI_ReadRectEx+0x58>
 800b6ca:	68e5      	ldr	r5, [r4, #12]
 800b6cc:	682d      	ldr	r5, [r5, #0]
 800b6ce:	f035 0504 	bics.w	r5, r5, #4
 800b6d2:	d104      	bne.n	800b6de <GUI_ReadRectEx+0x4e>
 800b6d4:	9405      	str	r4, [sp, #20]
 800b6d6:	9604      	str	r6, [sp, #16]
 800b6d8:	bcf0      	pop	{r4, r5, r6, r7}
 800b6da:	f7ff bf07 	b.w	800b4ec <LCD_ReadRectEx>
 800b6de:	6825      	ldr	r5, [r4, #0]
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	d0f7      	beq.n	800b6d4 <GUI_ReadRectEx+0x44>
 800b6e4:	462c      	mov	r4, r5
 800b6e6:	e7f0      	b.n	800b6ca <GUI_ReadRectEx+0x3a>
 800b6e8:	bcf0      	pop	{r4, r5, r6, r7}
 800b6ea:	4770      	bx	lr
 800b6ec:	20000014 	.word	0x20000014

0800b6f0 <_Rect2TextRect>:
 800b6f0:	88c1      	ldrh	r1, [r0, #6]
 800b6f2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b6f6:	8843      	ldrh	r3, [r0, #2]
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	8804      	ldrh	r4, [r0, #0]
 800b6fc:	4421      	add	r1, r4
 800b6fe:	1ac9      	subs	r1, r1, r3
 800b700:	4413      	add	r3, r2
 800b702:	1b1b      	subs	r3, r3, r4
 800b704:	8081      	strh	r1, [r0, #4]
 800b706:	80c3      	strh	r3, [r0, #6]
 800b708:	bd10      	pop	{r4, pc}
	...

0800b70c <_TransformPoint>:
 800b70c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b70e:	460c      	mov	r4, r1
 800b710:	4605      	mov	r5, r0
 800b712:	2300      	movs	r3, #0
 800b714:	4668      	mov	r0, sp
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	f003 fa97 	bl	800ec4c <WM_GetWindowRect>
 800b71e:	f7ff fde9 	bl	800b2f4 <LCD_GetXSize>
 800b722:	f7ff fdef 	bl	800b304 <LCD_GetYSize>
 800b726:	6821      	ldr	r1, [r4, #0]
 800b728:	f9bd 2000 	ldrsh.w	r2, [sp]
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	1a52      	subs	r2, r2, r1
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 800b736:	4909      	ldr	r1, [pc, #36]	; (800b75c <_TransformPoint+0x50>)
 800b738:	4413      	add	r3, r2
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	682a      	ldr	r2, [r5, #0]
 800b73e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800b742:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 800b746:	441a      	add	r2, r3
 800b748:	4402      	add	r2, r0
 800b74a:	602a      	str	r2, [r5, #0]
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	f9b1 2000 	ldrsh.w	r2, [r1]
 800b752:	4403      	add	r3, r0
 800b754:	1a9b      	subs	r3, r3, r2
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	b003      	add	sp, #12
 800b75a:	bd30      	pop	{r4, r5, pc}
 800b75c:	20027bc0 	.word	0x20027bc0

0800b760 <_TransformRect>:
 800b760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b762:	f9b0 3000 	ldrsh.w	r3, [r0]
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b76c:	9301      	str	r3, [sp, #4]
 800b76e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	4604      	mov	r4, r0
 800b776:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	a901      	add	r1, sp, #4
 800b77e:	4668      	mov	r0, sp
 800b780:	f7ff ffc4 	bl	800b70c <_TransformPoint>
 800b784:	a903      	add	r1, sp, #12
 800b786:	a802      	add	r0, sp, #8
 800b788:	f7ff ffc0 	bl	800b70c <_TransformPoint>
 800b78c:	9b02      	ldr	r3, [sp, #8]
 800b78e:	8023      	strh	r3, [r4, #0]
 800b790:	9b01      	ldr	r3, [sp, #4]
 800b792:	8063      	strh	r3, [r4, #2]
 800b794:	9b00      	ldr	r3, [sp, #0]
 800b796:	80a3      	strh	r3, [r4, #4]
 800b798:	9b03      	ldr	r3, [sp, #12]
 800b79a:	80e3      	strh	r3, [r4, #6]
 800b79c:	b004      	add	sp, #16
 800b79e:	bd10      	pop	{r4, pc}

0800b7a0 <_DrawBitmapCW>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	b091      	sub	sp, #68	; 0x44
 800b7a6:	461d      	mov	r5, r3
 800b7a8:	9009      	str	r0, [sp, #36]	; 0x24
 800b7aa:	9108      	str	r1, [sp, #32]
 800b7ac:	4410      	add	r0, r2
 800b7ae:	4419      	add	r1, r3
 800b7b0:	3901      	subs	r1, #1
 800b7b2:	3801      	subs	r0, #1
 800b7b4:	910b      	str	r1, [sp, #44]	; 0x2c
 800b7b6:	900a      	str	r0, [sp, #40]	; 0x28
 800b7b8:	a908      	add	r1, sp, #32
 800b7ba:	a809      	add	r0, sp, #36	; 0x24
 800b7bc:	4691      	mov	r9, r2
 800b7be:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b7c0:	f7ff ffa4 	bl	800b70c <_TransformPoint>
 800b7c4:	a90b      	add	r1, sp, #44	; 0x2c
 800b7c6:	a80a      	add	r0, sp, #40	; 0x28
 800b7c8:	f7ff ffa0 	bl	800b70c <_TransformPoint>
 800b7cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d2:	f040 8196 	bne.w	800bb02 <_DrawBitmapCW+0x362>
 800b7d6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b7d8:	2a01      	cmp	r2, #1
 800b7da:	f040 8192 	bne.w	800bb02 <_DrawBitmapCW+0x362>
 800b7de:	4aa1      	ldr	r2, [pc, #644]	; (800ba64 <_DrawBitmapCW+0x2c4>)
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800b7e6:	4299      	cmp	r1, r3
 800b7e8:	da05      	bge.n	800b7f6 <_DrawBitmapCW+0x56>
 800b7ea:	1a5b      	subs	r3, r3, r1
 800b7ec:	9109      	str	r1, [sp, #36]	; 0x24
 800b7ee:	991d      	ldr	r1, [sp, #116]	; 0x74
 800b7f0:	1aed      	subs	r5, r5, r3
 800b7f2:	fb01 4403 	mla	r4, r1, r3, r4
 800b7f6:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800b7fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b7fc:	428b      	cmp	r3, r1
 800b7fe:	bfc2      	ittt	gt
 800b800:	930a      	strgt	r3, [sp, #40]	; 0x28
 800b802:	1a5b      	subgt	r3, r3, r1
 800b804:	1aed      	subgt	r5, r5, r3
 800b806:	f9b2 100e 	ldrsh.w	r1, [r2, #14]
 800b80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b80c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800b810:	4299      	cmp	r1, r3
 800b812:	bfbc      	itt	lt
 800b814:	1a5b      	sublt	r3, r3, r1
 800b816:	ebc3 0909 	rsblt	r9, r3, r9
 800b81a:	9b08      	ldr	r3, [sp, #32]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	dd2a      	ble.n	800b876 <_DrawBitmapCW+0xd6>
 800b820:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b822:	1ad6      	subs	r6, r2, r3
 800b824:	3901      	subs	r1, #1
 800b826:	ebc6 0909 	rsb	r9, r6, r9
 800b82a:	2907      	cmp	r1, #7
 800b82c:	d824      	bhi.n	800b878 <_DrawBitmapCW+0xd8>
 800b82e:	e8df f001 	tbb	[pc, r1]
 800b832:	0d04      	.short	0x0d04
 800b834:	23231623 	.word	0x23231623
 800b838:	1f23      	.short	0x1f23
 800b83a:	f026 0207 	bic.w	r2, r6, #7
 800b83e:	4413      	add	r3, r2
 800b840:	eb04 04e6 	add.w	r4, r4, r6, asr #3
 800b844:	9308      	str	r3, [sp, #32]
 800b846:	f006 0607 	and.w	r6, r6, #7
 800b84a:	e015      	b.n	800b878 <_DrawBitmapCW+0xd8>
 800b84c:	f026 0203 	bic.w	r2, r6, #3
 800b850:	4413      	add	r3, r2
 800b852:	eb04 04a6 	add.w	r4, r4, r6, asr #2
 800b856:	9308      	str	r3, [sp, #32]
 800b858:	f006 0603 	and.w	r6, r6, #3
 800b85c:	e00c      	b.n	800b878 <_DrawBitmapCW+0xd8>
 800b85e:	f026 0201 	bic.w	r2, r6, #1
 800b862:	4413      	add	r3, r2
 800b864:	eb04 0466 	add.w	r4, r4, r6, asr #1
 800b868:	9308      	str	r3, [sp, #32]
 800b86a:	f006 0601 	and.w	r6, r6, #1
 800b86e:	e003      	b.n	800b878 <_DrawBitmapCW+0xd8>
 800b870:	4434      	add	r4, r6
 800b872:	9208      	str	r2, [sp, #32]
 800b874:	e000      	b.n	800b878 <_DrawBitmapCW+0xd8>
 800b876:	2600      	movs	r6, #0
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	f340 81a8 	ble.w	800bbd0 <_DrawBitmapCW+0x430>
 800b880:	2d00      	cmp	r5, #0
 800b882:	f340 81a5 	ble.w	800bbd0 <_DrawBitmapCW+0x430>
 800b886:	9b08      	ldr	r3, [sp, #32]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b88e:	1b1b      	subs	r3, r3, r4
 800b890:	9302      	str	r3, [sp, #8]
 800b892:	eb04 0309 	add.w	r3, r4, r9
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	ebc5 030a 	rsb	r3, r5, sl
 800b89c:	9305      	str	r3, [sp, #20]
 800b89e:	9b00      	ldr	r3, [sp, #0]
 800b8a0:	ebc9 0403 	rsb	r4, r9, r3
 800b8a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	2b07      	cmp	r3, #7
 800b8aa:	f200 811c 	bhi.w	800bae6 <_DrawBitmapCW+0x346>
 800b8ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b8b2:	0008      	.short	0x0008
 800b8b4:	011a00a3 	.word	0x011a00a3
 800b8b8:	011a00df 	.word	0x011a00df
 800b8bc:	011a011a 	.word	0x011a011a
 800b8c0:	010d      	.short	0x010d
 800b8c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8c4:	4f67      	ldr	r7, [pc, #412]	; (800ba64 <_DrawBitmapCW+0x2c4>)
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	9303      	str	r3, [sp, #12]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	18f5      	adds	r5, r6, r3
 800b8d0:	7c13      	ldrb	r3, [r2, #16]
 800b8d2:	f003 0303 	and.w	r3, r3, #3
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d051      	beq.n	800b97e <_DrawBitmapCW+0x1de>
 800b8da:	d307      	bcc.n	800b8ec <_DrawBitmapCW+0x14c>
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	f040 8102 	bne.w	800bae6 <_DrawBitmapCW+0x346>
 800b8e2:	eb05 0b09 	add.w	fp, r5, r9
 800b8e6:	46b0      	mov	r8, r6
 800b8e8:	9704      	str	r7, [sp, #16]
 800b8ea:	e034      	b.n	800b956 <_DrawBitmapCW+0x1b6>
 800b8ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b8ee:	9706      	str	r7, [sp, #24]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	9304      	str	r3, [sp, #16]
 800b8f4:	eb05 0b09 	add.w	fp, r5, r9
 800b8f8:	46b0      	mov	r8, r6
 800b8fa:	9b06      	ldr	r3, [sp, #24]
 800b8fc:	4a5a      	ldr	r2, [pc, #360]	; (800ba68 <_DrawBitmapCW+0x2c8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	7c5b      	ldrb	r3, [r3, #17]
 800b902:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b906:	7822      	ldrb	r2, [r4, #0]
 800b908:	68c3      	ldr	r3, [r0, #12]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	461f      	mov	r7, r3
 800b90e:	2380      	movs	r3, #128	; 0x80
 800b910:	fa43 f308 	asr.w	r3, r3, r8
 800b914:	421a      	tst	r2, r3
 800b916:	9a04      	ldr	r2, [sp, #16]
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	f108 0801 	add.w	r8, r8, #1
 800b91e:	bf08      	it	eq
 800b920:	4613      	moveq	r3, r2
 800b922:	4651      	mov	r1, sl
 800b924:	462a      	mov	r2, r5
 800b926:	47b8      	blx	r7
 800b928:	3501      	adds	r5, #1
 800b92a:	f1b8 0f08 	cmp.w	r8, #8
 800b92e:	bf04      	itt	eq
 800b930:	3401      	addeq	r4, #1
 800b932:	f04f 0800 	moveq.w	r8, #0
 800b936:	455d      	cmp	r5, fp
 800b938:	d1df      	bne.n	800b8fa <_DrawBitmapCW+0x15a>
 800b93a:	e0d4      	b.n	800bae6 <_DrawBitmapCW+0x346>
 800b93c:	f108 0801 	add.w	r8, r8, #1
 800b940:	f1b8 0f08 	cmp.w	r8, #8
 800b944:	f105 0501 	add.w	r5, r5, #1
 800b948:	bf04      	itt	eq
 800b94a:	3401      	addeq	r4, #1
 800b94c:	f04f 0800 	moveq.w	r8, #0
 800b950:	455d      	cmp	r5, fp
 800b952:	f000 80c8 	beq.w	800bae6 <_DrawBitmapCW+0x346>
 800b956:	7822      	ldrb	r2, [r4, #0]
 800b958:	2380      	movs	r3, #128	; 0x80
 800b95a:	fa43 f308 	asr.w	r3, r3, r8
 800b95e:	421a      	tst	r2, r3
 800b960:	d0ec      	beq.n	800b93c <_DrawBitmapCW+0x19c>
 800b962:	9b04      	ldr	r3, [sp, #16]
 800b964:	4a40      	ldr	r2, [pc, #256]	; (800ba68 <_DrawBitmapCW+0x2c8>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	7c5b      	ldrb	r3, [r3, #17]
 800b96a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b96e:	68c3      	ldr	r3, [r0, #12]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	462a      	mov	r2, r5
 800b974:	461f      	mov	r7, r3
 800b976:	4651      	mov	r1, sl
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	47b8      	blx	r7
 800b97c:	e7de      	b.n	800b93c <_DrawBitmapCW+0x19c>
 800b97e:	7c53      	ldrb	r3, [r2, #17]
 800b980:	4a39      	ldr	r2, [pc, #228]	; (800ba68 <_DrawBitmapCW+0x2c8>)
 800b982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	4798      	blx	r3
 800b98c:	eb05 0309 	add.w	r3, r5, r9
 800b990:	9004      	str	r0, [sp, #16]
 800b992:	9306      	str	r3, [sp, #24]
 800b994:	46b0      	mov	r8, r6
 800b996:	f04f 0b80 	mov.w	fp, #128	; 0x80
 800b99a:	9703      	str	r7, [sp, #12]
 800b99c:	7822      	ldrb	r2, [r4, #0]
 800b99e:	fa4b f308 	asr.w	r3, fp, r8
 800b9a2:	421a      	tst	r2, r3
 800b9a4:	d01a      	beq.n	800b9dc <_DrawBitmapCW+0x23c>
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	4a2f      	ldr	r2, [pc, #188]	; (800ba68 <_DrawBitmapCW+0x2c8>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	7c5b      	ldrb	r3, [r3, #17]
 800b9ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b9b2:	68c3      	ldr	r3, [r0, #12]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	4651      	mov	r1, sl
 800b9ba:	4798      	blx	r3
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	4a2a      	ldr	r2, [pc, #168]	; (800ba68 <_DrawBitmapCW+0x2c8>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	7c5b      	ldrb	r3, [r3, #17]
 800b9c4:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]
 800b9c8:	f8de 300c 	ldr.w	r3, [lr, #12]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	9b04      	ldr	r3, [sp, #16]
 800b9d2:	462a      	mov	r2, r5
 800b9d4:	4043      	eors	r3, r0
 800b9d6:	4651      	mov	r1, sl
 800b9d8:	4670      	mov	r0, lr
 800b9da:	47b8      	blx	r7
 800b9dc:	f108 0801 	add.w	r8, r8, #1
 800b9e0:	9b06      	ldr	r3, [sp, #24]
 800b9e2:	f1b8 0f08 	cmp.w	r8, #8
 800b9e6:	f105 0501 	add.w	r5, r5, #1
 800b9ea:	bf04      	itt	eq
 800b9ec:	3401      	addeq	r4, #1
 800b9ee:	f04f 0800 	moveq.w	r8, #0
 800b9f2:	429d      	cmp	r5, r3
 800b9f4:	d1d2      	bne.n	800b99c <_DrawBitmapCW+0x1fc>
 800b9f6:	e076      	b.n	800bae6 <_DrawBitmapCW+0x346>
 800b9f8:	4b1c      	ldr	r3, [pc, #112]	; (800ba6c <_DrawBitmapCW+0x2cc>)
 800b9fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b9fc:	ad10      	add	r5, sp, #64	; 0x40
 800b9fe:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
 800ba02:	f1c9 0300 	rsb	r3, r9, #0
 800ba06:	9a00      	ldr	r2, [sp, #0]
 800ba08:	f812 8003 	ldrb.w	r8, [r2, r3]
 800ba0c:	9b01      	ldr	r3, [sp, #4]
 800ba0e:	2002      	movs	r0, #2
 800ba10:	18f5      	adds	r5, r6, r3
 800ba12:	f7ff fb57 	bl	800b0c4 <LCD__GetPfSetPixel>
 800ba16:	eb05 0309 	add.w	r3, r5, r9
 800ba1a:	9003      	str	r0, [sp, #12]
 800ba1c:	9304      	str	r3, [sp, #16]
 800ba1e:	4637      	mov	r7, r6
 800ba20:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
 800ba24:	f1c7 0303 	rsb	r3, r7, #3
 800ba28:	005a      	lsls	r2, r3, #1
 800ba2a:	f1c2 0306 	rsb	r3, r2, #6
 800ba2e:	fa4b f303 	asr.w	r3, fp, r3
 800ba32:	ea03 0308 	and.w	r3, r3, r8
 800ba36:	40d3      	lsrs	r3, r2
 800ba38:	aa10      	add	r2, sp, #64	; 0x40
 800ba3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	4650      	mov	r0, sl
 800ba48:	4798      	blx	r3
 800ba4a:	3701      	adds	r7, #1
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	2f04      	cmp	r7, #4
 800ba50:	f105 0501 	add.w	r5, r5, #1
 800ba54:	bf02      	ittt	eq
 800ba56:	f894 8001 	ldrbeq.w	r8, [r4, #1]
 800ba5a:	2700      	moveq	r7, #0
 800ba5c:	3401      	addeq	r4, #1
 800ba5e:	429d      	cmp	r5, r3
 800ba60:	d1e0      	bne.n	800ba24 <_DrawBitmapCW+0x284>
 800ba62:	e040      	b.n	800bae6 <_DrawBitmapCW+0x346>
 800ba64:	20000014 	.word	0x20000014
 800ba68:	20027bb0 	.word	0x20027bb0
 800ba6c:	0801837c 	.word	0x0801837c
 800ba70:	f1c9 0300 	rsb	r3, r9, #0
 800ba74:	9a00      	ldr	r2, [sp, #0]
 800ba76:	f812 8003 	ldrb.w	r8, [r2, r3]
 800ba7a:	9b01      	ldr	r3, [sp, #4]
 800ba7c:	2004      	movs	r0, #4
 800ba7e:	18f5      	adds	r5, r6, r3
 800ba80:	f7ff fb20 	bl	800b0c4 <LCD__GetPfSetPixel>
 800ba84:	eb05 0309 	add.w	r3, r5, r9
 800ba88:	9003      	str	r0, [sp, #12]
 800ba8a:	9304      	str	r3, [sp, #16]
 800ba8c:	4637      	mov	r7, r6
 800ba8e:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
 800ba92:	f1c7 0201 	rsb	r2, r7, #1
 800ba96:	0092      	lsls	r2, r2, #2
 800ba98:	f1c2 0304 	rsb	r3, r2, #4
 800ba9c:	fa4b f303 	asr.w	r3, fp, r3
 800baa0:	ea03 0308 	and.w	r3, r3, r8
 800baa4:	fa23 f202 	lsr.w	r2, r3, r2
 800baa8:	4629      	mov	r1, r5
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	4650      	mov	r0, sl
 800bab0:	4798      	blx	r3
 800bab2:	3701      	adds	r7, #1
 800bab4:	9b04      	ldr	r3, [sp, #16]
 800bab6:	2f02      	cmp	r7, #2
 800bab8:	f105 0501 	add.w	r5, r5, #1
 800babc:	bf02      	ittt	eq
 800babe:	f894 8001 	ldrbeq.w	r8, [r4, #1]
 800bac2:	2700      	moveq	r7, #0
 800bac4:	3401      	addeq	r4, #1
 800bac6:	429d      	cmp	r5, r3
 800bac8:	d1e3      	bne.n	800ba92 <_DrawBitmapCW+0x2f2>
 800baca:	e00c      	b.n	800bae6 <_DrawBitmapCW+0x346>
 800bacc:	2008      	movs	r0, #8
 800bace:	f7ff faf9 	bl	800b0c4 <LCD__GetPfSetPixel>
 800bad2:	4605      	mov	r5, r0
 800bad4:	9b02      	ldr	r3, [sp, #8]
 800bad6:	4650      	mov	r0, sl
 800bad8:	18e1      	adds	r1, r4, r3
 800bada:	f814 2b01 	ldrb.w	r2, [r4], #1
 800bade:	47a8      	blx	r5
 800bae0:	9b00      	ldr	r3, [sp, #0]
 800bae2:	429c      	cmp	r4, r3
 800bae4:	d1f6      	bne.n	800bad4 <_DrawBitmapCW+0x334>
 800bae6:	9b02      	ldr	r3, [sp, #8]
 800bae8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800baea:	1a9b      	subs	r3, r3, r2
 800baec:	9302      	str	r3, [sp, #8]
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	4413      	add	r3, r2
 800baf2:	9300      	str	r3, [sp, #0]
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bafa:	459a      	cmp	sl, r3
 800bafc:	f47f aecf 	bne.w	800b89e <_DrawBitmapCW+0xfe>
 800bb00:	e066      	b.n	800bbd0 <_DrawBitmapCW+0x430>
 800bb02:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bbd8 <_DrawBitmapCW+0x438>
 800bb08:	469a      	mov	sl, r3
 800bb0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bb0c:	f1c2 0208 	rsb	r2, r2, #8
 800bb10:	f04f 0b00 	mov.w	fp, #0
 800bb14:	3b01      	subs	r3, #1
 800bb16:	9205      	str	r2, [sp, #20]
 800bb18:	465e      	mov	r6, fp
 800bb1a:	9307      	str	r3, [sp, #28]
 800bb1c:	45ab      	cmp	fp, r5
 800bb1e:	da57      	bge.n	800bbd0 <_DrawBitmapCW+0x430>
 800bb20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb22:	ebc3 030a 	rsb	r3, r3, sl
 800bb26:	9303      	str	r3, [sp, #12]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	9304      	str	r3, [sp, #16]
 800bb2c:	f8d8 3000 	ldr.w	r3, [r8]
 800bb30:	9904      	ldr	r1, [sp, #16]
 800bb32:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800bb36:	428a      	cmp	r2, r1
 800bb38:	dc43      	bgt.n	800bbc2 <_DrawBitmapCW+0x422>
 800bb3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bb3e:	459a      	cmp	sl, r3
 800bb40:	dc3f      	bgt.n	800bbc2 <_DrawBitmapCW+0x422>
 800bb42:	9b08      	ldr	r3, [sp, #32]
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	2700      	movs	r7, #0
 800bb48:	9402      	str	r4, [sp, #8]
 800bb4a:	9701      	str	r7, [sp, #4]
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	454b      	cmp	r3, r9
 800bb50:	da37      	bge.n	800bbc2 <_DrawBitmapCW+0x422>
 800bb52:	b927      	cbnz	r7, 800bb5e <_DrawBitmapCW+0x3be>
 800bb54:	9b02      	ldr	r3, [sp, #8]
 800bb56:	781e      	ldrb	r6, [r3, #0]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	9302      	str	r3, [sp, #8]
 800bb5c:	2708      	movs	r7, #8
 800bb5e:	9b05      	ldr	r3, [sp, #20]
 800bb60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bb62:	fa46 f303 	asr.w	r3, r6, r3
 800bb66:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800bb6a:	fa06 f602 	lsl.w	r6, r6, r2
 800bb6e:	b2f6      	uxtb	r6, r6
 800bb70:	eba7 0702 	sub.w	r7, r7, r2
 800bb74:	d104      	bne.n	800bb80 <_DrawBitmapCW+0x3e0>
 800bb76:	f8d8 2000 	ldr.w	r2, [r8]
 800bb7a:	7c12      	ldrb	r2, [r2, #16]
 800bb7c:	0792      	lsls	r2, r2, #30
 800bb7e:	d418      	bmi.n	800bbb2 <_DrawBitmapCW+0x412>
 800bb80:	f8d8 2000 	ldr.w	r2, [r8]
 800bb84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bb86:	6810      	ldr	r0, [r2, #0]
 800bb88:	9006      	str	r0, [sp, #24]
 800bb8a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800bb8c:	b110      	cbz	r0, 800bb94 <_DrawBitmapCW+0x3f4>
 800bb8e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800bb92:	e000      	b.n	800bb96 <_DrawBitmapCW+0x3f6>
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	9a00      	ldr	r2, [sp, #0]
 800bb9a:	9b07      	ldr	r3, [sp, #28]
 800bb9c:	9900      	ldr	r1, [sp, #0]
 800bb9e:	9804      	ldr	r0, [sp, #16]
 800bba0:	4413      	add	r3, r2
 800bba2:	4652      	mov	r2, sl
 800bba4:	f7fe fe20 	bl	800a7e8 <LCD_FillRect>
 800bba8:	f8d8 3000 	ldr.w	r3, [r8]
 800bbac:	9a06      	ldr	r2, [sp, #24]
 800bbae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	9301      	str	r3, [sp, #4]
 800bbba:	9b00      	ldr	r3, [sp, #0]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	e7c4      	b.n	800bb4c <_DrawBitmapCW+0x3ac>
 800bbc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbc4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800bbc8:	f10b 0b01 	add.w	fp, fp, #1
 800bbcc:	441c      	add	r4, r3
 800bbce:	e7a5      	b.n	800bb1c <_DrawBitmapCW+0x37c>
 800bbd0:	b011      	add	sp, #68	; 0x44
 800bbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20000014 	.word	0x20000014

0800bbdc <LCD_SelectLCD>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	4b0d      	ldr	r3, [pc, #52]	; (800bc14 <LCD_SelectLCD+0x38>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	7c51      	ldrb	r1, [r2, #17]
 800bbe4:	4a0c      	ldr	r2, [pc, #48]	; (800bc18 <LCD_SelectLCD+0x3c>)
 800bbe6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800bbea:	461c      	mov	r4, r3
 800bbec:	b140      	cbz	r0, 800bc00 <LCD_SelectLCD+0x24>
 800bbee:	68c3      	ldr	r3, [r0, #12]
 800bbf0:	b113      	cbz	r3, 800bbf8 <LCD_SelectLCD+0x1c>
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	d001      	beq.n	800bbfc <LCD_SelectLCD+0x20>
 800bbf8:	6800      	ldr	r0, [r0, #0]
 800bbfa:	e7f7      	b.n	800bbec <LCD_SelectLCD+0x10>
 800bbfc:	f7fd f98e 	bl	8008f1c <GUI_DEVICE_Unlink>
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	661a      	str	r2, [r3, #96]	; 0x60
 800bc06:	f103 0208 	add.w	r2, r3, #8
 800bc0a:	615a      	str	r2, [r3, #20]
 800bc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc10:	f7ff b814 	b.w	800ac3c <LCD_SetClipRectMax>
 800bc14:	20000014 	.word	0x20000014
 800bc18:	20027bb0 	.word	0x20027bb0

0800bc1c <LCD_GetPosEx>:
 800bc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc1e:	460c      	mov	r4, r1
 800bc20:	4615      	mov	r5, r2
 800bc22:	f7fd f943 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800bc26:	9001      	str	r0, [sp, #4]
 800bc28:	b908      	cbnz	r0, 800bc2e <LCD_GetPosEx+0x12>
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	e00d      	b.n	800bc4a <LCD_GetPosEx+0x2e>
 800bc2e:	68c3      	ldr	r3, [r0, #12]
 800bc30:	2104      	movs	r1, #4
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	eb0d 0001 	add.w	r0, sp, r1
 800bc38:	4798      	blx	r3
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d0f4      	beq.n	800bc2a <LCD_GetPosEx+0xe>
 800bc40:	9801      	ldr	r0, [sp, #4]
 800bc42:	462a      	mov	r2, r5
 800bc44:	4621      	mov	r1, r4
 800bc46:	4798      	blx	r3
 800bc48:	2000      	movs	r0, #0
 800bc4a:	b003      	add	sp, #12
 800bc4c:	bd30      	pop	{r4, r5, pc}

0800bc4e <LCD_SetDevFunc>:
 800bc4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc50:	460c      	mov	r4, r1
 800bc52:	4615      	mov	r5, r2
 800bc54:	f7fd f92a 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800bc58:	9001      	str	r0, [sp, #4]
 800bc5a:	b908      	cbnz	r0, 800bc60 <LCD_SetDevFunc+0x12>
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	e00c      	b.n	800bc7a <LCD_SetDevFunc+0x2c>
 800bc60:	68c3      	ldr	r3, [r0, #12]
 800bc62:	2116      	movs	r1, #22
 800bc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc66:	a801      	add	r0, sp, #4
 800bc68:	4798      	blx	r3
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d0f5      	beq.n	800bc5c <LCD_SetDevFunc+0xe>
 800bc70:	9801      	ldr	r0, [sp, #4]
 800bc72:	462a      	mov	r2, r5
 800bc74:	4621      	mov	r1, r4
 800bc76:	4798      	blx	r3
 800bc78:	2000      	movs	r0, #0
 800bc7a:	b003      	add	sp, #12
 800bc7c:	bd30      	pop	{r4, r5, pc}

0800bc7e <LCD_SetLUTEntryEx>:
 800bc7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc80:	460c      	mov	r4, r1
 800bc82:	4615      	mov	r5, r2
 800bc84:	f7fd f912 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800bc88:	9001      	str	r0, [sp, #4]
 800bc8a:	b908      	cbnz	r0, 800bc90 <LCD_SetLUTEntryEx+0x12>
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	e00c      	b.n	800bcaa <LCD_SetLUTEntryEx+0x2c>
 800bc90:	68c3      	ldr	r3, [r0, #12]
 800bc92:	2110      	movs	r1, #16
 800bc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc96:	a801      	add	r0, sp, #4
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d0f5      	beq.n	800bc8c <LCD_SetLUTEntryEx+0xe>
 800bca0:	9801      	ldr	r0, [sp, #4]
 800bca2:	462a      	mov	r2, r5
 800bca4:	4621      	mov	r1, r4
 800bca6:	4798      	blx	r3
 800bca8:	2000      	movs	r0, #0
 800bcaa:	b003      	add	sp, #12
 800bcac:	bd30      	pop	{r4, r5, pc}

0800bcae <LCD_SetSizeEx>:
 800bcae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	4615      	mov	r5, r2
 800bcb4:	f7fd f8fa 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800bcb8:	9001      	str	r0, [sp, #4]
 800bcba:	b908      	cbnz	r0, 800bcc0 <LCD_SetSizeEx+0x12>
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	e00c      	b.n	800bcda <LCD_SetSizeEx+0x2c>
 800bcc0:	68c3      	ldr	r3, [r0, #12]
 800bcc2:	210b      	movs	r1, #11
 800bcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc6:	a801      	add	r0, sp, #4
 800bcc8:	4798      	blx	r3
 800bcca:	4603      	mov	r3, r0
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d0f5      	beq.n	800bcbc <LCD_SetSizeEx+0xe>
 800bcd0:	9801      	ldr	r0, [sp, #4]
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	4798      	blx	r3
 800bcd8:	2000      	movs	r0, #0
 800bcda:	b003      	add	sp, #12
 800bcdc:	bd30      	pop	{r4, r5, pc}

0800bcde <LCD_SetVRAMAddrEx>:
 800bcde:	b513      	push	{r0, r1, r4, lr}
 800bce0:	460c      	mov	r4, r1
 800bce2:	f7fd f8e3 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800bce6:	9001      	str	r0, [sp, #4]
 800bce8:	b908      	cbnz	r0, 800bcee <LCD_SetVRAMAddrEx+0x10>
 800bcea:	2001      	movs	r0, #1
 800bcec:	e00b      	b.n	800bd06 <LCD_SetVRAMAddrEx+0x28>
 800bcee:	68c3      	ldr	r3, [r0, #12]
 800bcf0:	2109      	movs	r1, #9
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	a801      	add	r0, sp, #4
 800bcf6:	4798      	blx	r3
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0f5      	beq.n	800bcea <LCD_SetVRAMAddrEx+0xc>
 800bcfe:	9801      	ldr	r0, [sp, #4]
 800bd00:	4621      	mov	r1, r4
 800bd02:	4798      	blx	r3
 800bd04:	2000      	movs	r0, #0
 800bd06:	b002      	add	sp, #8
 800bd08:	bd10      	pop	{r4, pc}

0800bd0a <LCD_SetVSizeEx>:
 800bd0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	4615      	mov	r5, r2
 800bd10:	f7fd f8cc 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800bd14:	9001      	str	r0, [sp, #4]
 800bd16:	b908      	cbnz	r0, 800bd1c <LCD_SetVSizeEx+0x12>
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e00c      	b.n	800bd36 <LCD_SetVSizeEx+0x2c>
 800bd1c:	68c3      	ldr	r3, [r0, #12]
 800bd1e:	210a      	movs	r1, #10
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	a801      	add	r0, sp, #4
 800bd24:	4798      	blx	r3
 800bd26:	4603      	mov	r3, r0
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d0f5      	beq.n	800bd18 <LCD_SetVSizeEx+0xe>
 800bd2c:	9801      	ldr	r0, [sp, #4]
 800bd2e:	462a      	mov	r2, r5
 800bd30:	4621      	mov	r1, r4
 800bd32:	4798      	blx	r3
 800bd34:	2000      	movs	r0, #0
 800bd36:	b003      	add	sp, #12
 800bd38:	bd30      	pop	{r4, r5, pc}
	...

0800bd3c <LCD_UpdateColorIndices>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	4c07      	ldr	r4, [pc, #28]	; (800bd5c <LCD_UpdateColorIndices+0x20>)
 800bd40:	6823      	ldr	r3, [r4, #0]
 800bd42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd44:	f7fe ffda 	bl	800acfc <LCD_Color2Index>
 800bd48:	f7fe fff4 	bl	800ad34 <LCD_SetColorIndex>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bd50:	f7fe ffd4 	bl	800acfc <LCD_Color2Index>
 800bd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd58:	f7ff b808 	b.w	800ad6c <LCD_SetBkColorIndex>
 800bd5c:	20000014 	.word	0x20000014

0800bd60 <_GetRect>:
 800bd60:	6882      	ldr	r2, [r0, #8]
 800bd62:	2300      	movs	r3, #0
 800bd64:	800b      	strh	r3, [r1, #0]
 800bd66:	804b      	strh	r3, [r1, #2]
 800bd68:	6993      	ldr	r3, [r2, #24]
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	808b      	strh	r3, [r1, #4]
 800bd6e:	69d3      	ldr	r3, [r2, #28]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	80cb      	strh	r3, [r1, #6]
 800bd74:	4770      	bx	lr

0800bd76 <_SetPixelIndex>:
 800bd76:	b510      	push	{r4, lr}
 800bd78:	6884      	ldr	r4, [r0, #8]
 800bd7a:	6a20      	ldr	r0, [r4, #32]
 800bd7c:	fb00 1202 	mla	r2, r0, r2, r1
 800bd80:	6821      	ldr	r1, [r4, #0]
 800bd82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd86:	bd10      	pop	{r4, pc}

0800bd88 <_GetPixelIndex>:
 800bd88:	6880      	ldr	r0, [r0, #8]
 800bd8a:	6a03      	ldr	r3, [r0, #32]
 800bd8c:	fb03 1202 	mla	r2, r3, r2, r1
 800bd90:	6803      	ldr	r3, [r0, #0]
 800bd92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bd96:	4770      	bx	lr

0800bd98 <_XorPixel>:
 800bd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	460d      	mov	r5, r1
 800bda0:	4616      	mov	r6, r2
 800bda2:	f7ff fff1 	bl	800bd88 <_GetPixelIndex>
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	4607      	mov	r7, r0
 800bdac:	4798      	blx	r3
 800bdae:	4632      	mov	r2, r6
 800bdb0:	ea87 0300 	eor.w	r3, r7, r0
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbc:	f7ff bfdb 	b.w	800bd76 <_SetPixelIndex>

0800bdc0 <_FillRect>:
 800bdc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc4:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800bdc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bdca:	f8d9 6034 	ldr.w	r6, [r9, #52]	; 0x34
 800bdce:	f8df e140 	ldr.w	lr, [pc, #320]	; 800bf10 <_FillRect+0x150>
 800bdd2:	468a      	mov	sl, r1
 800bdd4:	4615      	mov	r5, r2
 800bdd6:	b146      	cbz	r6, 800bdea <_FillRect+0x2a>
 800bdd8:	f8de 5000 	ldr.w	r5, [lr]
 800bddc:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800bdde:	682d      	ldr	r5, [r5, #0]
 800bde0:	e88d 0030 	stmia.w	sp, {r4, r5}
 800bde4:	6980      	ldr	r0, [r0, #24]
 800bde6:	47b0      	blx	r6
 800bde8:	e08e      	b.n	800bf08 <_FillRect+0x148>
 800bdea:	1a5b      	subs	r3, r3, r1
 800bdec:	f8de 1000 	ldr.w	r1, [lr]
 800bdf0:	f8d9 8020 	ldr.w	r8, [r9, #32]
 800bdf4:	1aa4      	subs	r4, r4, r2
 800bdf6:	7c0a      	ldrb	r2, [r1, #16]
 800bdf8:	f012 0201 	ands.w	r2, r2, #1
 800bdfc:	f103 0701 	add.w	r7, r3, #1
 800be00:	f104 0601 	add.w	r6, r4, #1
 800be04:	d022      	beq.n	800be4c <_FillRect+0x8c>
 800be06:	6903      	ldr	r3, [r0, #16]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	4798      	blx	r3
 800be0c:	2f00      	cmp	r7, #0
 800be0e:	d07b      	beq.n	800bf08 <_FillRect+0x148>
 800be10:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800be14:	fb03 a505 	mla	r5, r3, r5, sl
 800be18:	f06f 0203 	mvn.w	r2, #3
 800be1c:	fb08 5404 	mla	r4, r8, r4, r5
 800be20:	fb02 f208 	mul.w	r2, r2, r8
 800be24:	00a4      	lsls	r4, r4, #2
 800be26:	2e00      	cmp	r6, #0
 800be28:	d06e      	beq.n	800bf08 <_FillRect+0x148>
 800be2a:	3e01      	subs	r6, #1
 800be2c:	4623      	mov	r3, r4
 800be2e:	463d      	mov	r5, r7
 800be30:	f8d9 e000 	ldr.w	lr, [r9]
 800be34:	f853 100e 	ldr.w	r1, [r3, lr]
 800be38:	3d01      	subs	r5, #1
 800be3a:	ea81 0100 	eor.w	r1, r1, r0
 800be3e:	f843 100e 	str.w	r1, [r3, lr]
 800be42:	f103 0304 	add.w	r3, r3, #4
 800be46:	d1f3      	bne.n	800be30 <_FillRect+0x70>
 800be48:	4414      	add	r4, r2
 800be4a:	e7ec      	b.n	800be26 <_FillRect+0x66>
 800be4c:	f8d9 0000 	ldr.w	r0, [r9]
 800be50:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800be52:	fb08 a505 	mla	r5, r8, r5, sl
 800be56:	2f0f      	cmp	r7, #15
 800be58:	eb00 0a85 	add.w	sl, r0, r5, lsl #2
 800be5c:	6808      	ldr	r0, [r1, #0]
 800be5e:	d940      	bls.n	800bee2 <_FillRect+0x122>
 800be60:	f1a3 050f 	sub.w	r5, r3, #15
 800be64:	092d      	lsrs	r5, r5, #4
 800be66:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 800be6a:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 800be6e:	3501      	adds	r5, #1
 800be70:	fb0e a101 	mla	r1, lr, r1, sl
 800be74:	01ad      	lsls	r5, r5, #6
 800be76:	46b4      	mov	ip, r6
 800be78:	4692      	mov	sl, r2
 800be7a:	f1bc 0f00 	cmp.w	ip, #0
 800be7e:	d02e      	beq.n	800bede <_FillRect+0x11e>
 800be80:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800be84:	463a      	mov	r2, r7
 800be86:	3a10      	subs	r2, #16
 800be88:	2a0f      	cmp	r2, #15
 800be8a:	f843 0c40 	str.w	r0, [r3, #-64]
 800be8e:	f843 0c3c 	str.w	r0, [r3, #-60]
 800be92:	f843 0c38 	str.w	r0, [r3, #-56]
 800be96:	f843 0c34 	str.w	r0, [r3, #-52]
 800be9a:	f843 0c30 	str.w	r0, [r3, #-48]
 800be9e:	f843 0c2c 	str.w	r0, [r3, #-44]
 800bea2:	f843 0c28 	str.w	r0, [r3, #-40]
 800bea6:	f843 0c24 	str.w	r0, [r3, #-36]
 800beaa:	f843 0c20 	str.w	r0, [r3, #-32]
 800beae:	f843 0c1c 	str.w	r0, [r3, #-28]
 800beb2:	f843 0c18 	str.w	r0, [r3, #-24]
 800beb6:	f843 0c14 	str.w	r0, [r3, #-20]
 800beba:	f843 0c10 	str.w	r0, [r3, #-16]
 800bebe:	f843 0c0c 	str.w	r0, [r3, #-12]
 800bec2:	f843 0c08 	str.w	r0, [r3, #-8]
 800bec6:	f843 0c04 	str.w	r0, [r3, #-4]
 800beca:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800bece:	d8da      	bhi.n	800be86 <_FillRect+0xc6>
 800bed0:	eb01 0a05 	add.w	sl, r1, r5
 800bed4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bed8:	ebce 0101 	rsb	r1, lr, r1
 800bedc:	e7cd      	b.n	800be7a <_FillRect+0xba>
 800bede:	f007 070f 	and.w	r7, r7, #15
 800bee2:	b18f      	cbz	r7, 800bf08 <_FillRect+0x148>
 800bee4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800bee8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800beec:	fb08 a404 	mla	r4, r8, r4, sl
 800bef0:	00bb      	lsls	r3, r7, #2
 800bef2:	b14e      	cbz	r6, 800bf08 <_FillRect+0x148>
 800bef4:	4622      	mov	r2, r4
 800bef6:	1919      	adds	r1, r3, r4
 800bef8:	f842 0b04 	str.w	r0, [r2], #4
 800befc:	428a      	cmp	r2, r1
 800befe:	d1fb      	bne.n	800bef8 <_FillRect+0x138>
 800bf00:	3e01      	subs	r6, #1
 800bf02:	ebc8 0404 	rsb	r4, r8, r4
 800bf06:	e7f4      	b.n	800bef2 <_FillRect+0x132>
 800bf08:	b002      	add	sp, #8
 800bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0e:	bf00      	nop
 800bf10:	20000014 	.word	0x20000014

0800bf14 <_DrawHLine>:
 800bf14:	b507      	push	{r0, r1, r2, lr}
 800bf16:	9200      	str	r2, [sp, #0]
 800bf18:	f7ff ff52 	bl	800bdc0 <_FillRect>
 800bf1c:	b003      	add	sp, #12
 800bf1e:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf22 <_DrawVLine>:
 800bf22:	b507      	push	{r0, r1, r2, lr}
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	460b      	mov	r3, r1
 800bf28:	f7ff ff4a 	bl	800bdc0 <_FillRect>
 800bf2c:	b003      	add	sp, #12
 800bf2e:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf32 <_GetDevProp>:
 800bf32:	3901      	subs	r1, #1
 800bf34:	6883      	ldr	r3, [r0, #8]
 800bf36:	290d      	cmp	r1, #13
 800bf38:	d814      	bhi.n	800bf64 <_GetDevProp+0x32>
 800bf3a:	e8df f001 	tbb	[pc, r1]
 800bf3e:	0b09      	.short	0x0b09
 800bf40:	13130f0d 	.word	0x13130f0d
 800bf44:	11071613 	.word	0x11071613
 800bf48:	07070711 	.word	0x07070711
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	4770      	bx	lr
 800bf50:	6918      	ldr	r0, [r3, #16]
 800bf52:	4770      	bx	lr
 800bf54:	6958      	ldr	r0, [r3, #20]
 800bf56:	4770      	bx	lr
 800bf58:	6998      	ldr	r0, [r3, #24]
 800bf5a:	4770      	bx	lr
 800bf5c:	69d8      	ldr	r0, [r3, #28]
 800bf5e:	4770      	bx	lr
 800bf60:	2001      	movs	r0, #1
 800bf62:	4770      	bx	lr
 800bf64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf68:	4770      	bx	lr
 800bf6a:	2020      	movs	r0, #32
 800bf6c:	4770      	bx	lr
	...

0800bf70 <_GetDevData>:
 800bf70:	2901      	cmp	r1, #1
 800bf72:	4802      	ldr	r0, [pc, #8]	; (800bf7c <_GetDevData+0xc>)
 800bf74:	bf18      	it	ne
 800bf76:	2000      	movne	r0, #0
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	0801920c 	.word	0x0801920c

0800bf80 <_ReadRect>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	6887      	ldr	r7, [r0, #8]
 800bf86:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800bf88:	6a3d      	ldr	r5, [r7, #32]
 800bf8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bf8c:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 800bf90:	ebc1 0e03 	rsb	lr, r1, r3
 800bf94:	3801      	subs	r0, #1
 800bf96:	3301      	adds	r3, #1
 800bf98:	fb05 1502 	mla	r5, r5, r2, r1
 800bf9c:	ebce 0000 	rsb	r0, lr, r0
 800bfa0:	1a59      	subs	r1, r3, r1
 800bfa2:	0080      	lsls	r0, r0, #2
 800bfa4:	ebc6 0585 	rsb	r5, r6, r5, lsl #2
 800bfa8:	0089      	lsls	r1, r1, #2
 800bfaa:	f04f 0c00 	mov.w	ip, #0
 800bfae:	f10e 0801 	add.w	r8, lr, #1
 800bfb2:	46b1      	mov	r9, r6
 800bfb4:	eb0c 0a05 	add.w	sl, ip, r5
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	eb09 0b0a 	add.w	fp, r9, sl
 800bfbe:	f1b8 0801 	subs.w	r8, r8, #1
 800bfc2:	f85b 3003 	ldr.w	r3, [fp, r3]
 800bfc6:	f849 3b04 	str.w	r3, [r9], #4
 800bfca:	d1f5      	bne.n	800bfb8 <_ReadRect+0x38>
 800bfcc:	3201      	adds	r2, #1
 800bfce:	1e53      	subs	r3, r2, #1
 800bfd0:	429c      	cmp	r4, r3
 800bfd2:	440e      	add	r6, r1
 800bfd4:	4484      	add	ip, r0
 800bfd6:	dcea      	bgt.n	800bfae <_ReadRect+0x2e>
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfdc <_GetDevFunc>:
 800bfdc:	3901      	subs	r1, #1
 800bfde:	2928      	cmp	r1, #40	; 0x28
 800bfe0:	d848      	bhi.n	800c074 <_GetDevFunc+0x98>
 800bfe2:	e8df f001 	tbb	[pc, r1]
 800bfe6:	1f45      	.short	0x1f45
 800bfe8:	21471d1b 	.word	0x21471d1b
 800bfec:	17494747 	.word	0x17494747
 800bff0:	25472319 	.word	0x25472319
 800bff4:	47474727 	.word	0x47474727
 800bff8:	332d2b29 	.word	0x332d2b29
 800bffc:	47354747 	.word	0x47354747
 800c000:	47474747 	.word	0x47474747
 800c004:	312f3947 	.word	0x312f3947
 800c008:	473d4741 	.word	0x473d4741
 800c00c:	4747      	.short	0x4747
 800c00e:	15          	.byte	0x15
 800c00f:	00          	.byte	0x00
 800c010:	481a      	ldr	r0, [pc, #104]	; (800c07c <_GetDevFunc+0xa0>)
 800c012:	4770      	bx	lr
 800c014:	481a      	ldr	r0, [pc, #104]	; (800c080 <_GetDevFunc+0xa4>)
 800c016:	4770      	bx	lr
 800c018:	481a      	ldr	r0, [pc, #104]	; (800c084 <_GetDevFunc+0xa8>)
 800c01a:	4770      	bx	lr
 800c01c:	481a      	ldr	r0, [pc, #104]	; (800c088 <_GetDevFunc+0xac>)
 800c01e:	4770      	bx	lr
 800c020:	481a      	ldr	r0, [pc, #104]	; (800c08c <_GetDevFunc+0xb0>)
 800c022:	4770      	bx	lr
 800c024:	481a      	ldr	r0, [pc, #104]	; (800c090 <_GetDevFunc+0xb4>)
 800c026:	4770      	bx	lr
 800c028:	481a      	ldr	r0, [pc, #104]	; (800c094 <_GetDevFunc+0xb8>)
 800c02a:	4770      	bx	lr
 800c02c:	481a      	ldr	r0, [pc, #104]	; (800c098 <_GetDevFunc+0xbc>)
 800c02e:	4770      	bx	lr
 800c030:	481a      	ldr	r0, [pc, #104]	; (800c09c <_GetDevFunc+0xc0>)
 800c032:	4770      	bx	lr
 800c034:	481a      	ldr	r0, [pc, #104]	; (800c0a0 <_GetDevFunc+0xc4>)
 800c036:	4770      	bx	lr
 800c038:	481a      	ldr	r0, [pc, #104]	; (800c0a4 <_GetDevFunc+0xc8>)
 800c03a:	4770      	bx	lr
 800c03c:	481a      	ldr	r0, [pc, #104]	; (800c0a8 <_GetDevFunc+0xcc>)
 800c03e:	4770      	bx	lr
 800c040:	481a      	ldr	r0, [pc, #104]	; (800c0ac <_GetDevFunc+0xd0>)
 800c042:	4770      	bx	lr
 800c044:	481a      	ldr	r0, [pc, #104]	; (800c0b0 <_GetDevFunc+0xd4>)
 800c046:	4770      	bx	lr
 800c048:	481a      	ldr	r0, [pc, #104]	; (800c0b4 <_GetDevFunc+0xd8>)
 800c04a:	4770      	bx	lr
 800c04c:	481a      	ldr	r0, [pc, #104]	; (800c0b8 <_GetDevFunc+0xdc>)
 800c04e:	4770      	bx	lr
 800c050:	6803      	ldr	r3, [r0, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c056:	4770      	bx	lr
 800c058:	6803      	ldr	r3, [r0, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c05e:	4770      	bx	lr
 800c060:	6803      	ldr	r3, [r0, #0]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c066:	4770      	bx	lr
 800c068:	6803      	ldr	r3, [r0, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800c06e:	4770      	bx	lr
 800c070:	4812      	ldr	r0, [pc, #72]	; (800c0bc <_GetDevFunc+0xe0>)
 800c072:	4770      	bx	lr
 800c074:	2000      	movs	r0, #0
 800c076:	4770      	bx	lr
 800c078:	4811      	ldr	r0, [pc, #68]	; (800c0c0 <_GetDevFunc+0xe4>)
 800c07a:	4770      	bx	lr
 800c07c:	0800c785 	.word	0x0800c785
 800c080:	0800c997 	.word	0x0800c997
 800c084:	0800c955 	.word	0x0800c955
 800c088:	0800c857 	.word	0x0800c857
 800c08c:	0800c769 	.word	0x0800c769
 800c090:	0800c805 	.word	0x0800c805
 800c094:	0800c7dd 	.word	0x0800c7dd
 800c098:	0800c7c3 	.word	0x0800c7c3
 800c09c:	0800c111 	.word	0x0800c111
 800c0a0:	0800c107 	.word	0x0800c107
 800c0a4:	0800c0f1 	.word	0x0800c0f1
 800c0a8:	0800c0db 	.word	0x0800c0db
 800c0ac:	0800c0c5 	.word	0x0800c0c5
 800c0b0:	0800c705 	.word	0x0800c705
 800c0b4:	0800c79d 	.word	0x0800c79d
 800c0b8:	0800c6b7 	.word	0x0800c6b7
 800c0bc:	0800bf81 	.word	0x0800bf81
 800c0c0:	0800c82d 	.word	0x0800c82d

0800c0c4 <_SetChroma>:
 800c0c4:	b507      	push	{r0, r1, r2, lr}
 800c0c6:	6980      	ldr	r0, [r0, #24]
 800c0c8:	e88d 0006 	stmia.w	sp, {r1, r2}
 800c0cc:	466a      	mov	r2, sp
 800c0ce:	210d      	movs	r1, #13
 800c0d0:	f7f8 f864 	bl	800419c <LCD_X_DisplayDriver>
 800c0d4:	b003      	add	sp, #12
 800c0d6:	f85d fb04 	ldr.w	pc, [sp], #4

0800c0da <_SetChromaMode>:
 800c0da:	b507      	push	{r0, r1, r2, lr}
 800c0dc:	aa02      	add	r2, sp, #8
 800c0de:	6980      	ldr	r0, [r0, #24]
 800c0e0:	f842 1d04 	str.w	r1, [r2, #-4]!
 800c0e4:	210c      	movs	r1, #12
 800c0e6:	f7f8 f859 	bl	800419c <LCD_X_DisplayDriver>
 800c0ea:	b003      	add	sp, #12
 800c0ec:	f85d fb04 	ldr.w	pc, [sp], #4

0800c0f0 <_SetAlphaMode>:
 800c0f0:	b507      	push	{r0, r1, r2, lr}
 800c0f2:	aa02      	add	r2, sp, #8
 800c0f4:	6980      	ldr	r0, [r0, #24]
 800c0f6:	f842 1d04 	str.w	r1, [r2, #-4]!
 800c0fa:	210b      	movs	r1, #11
 800c0fc:	f7f8 f84e 	bl	800419c <LCD_X_DisplayDriver>
 800c100:	b003      	add	sp, #12
 800c102:	f85d fb04 	ldr.w	pc, [sp], #4

0800c106 <_Off>:
 800c106:	2200      	movs	r2, #0
 800c108:	2106      	movs	r1, #6
 800c10a:	6980      	ldr	r0, [r0, #24]
 800c10c:	f7f8 b846 	b.w	800419c <LCD_X_DisplayDriver>

0800c110 <_On>:
 800c110:	2200      	movs	r2, #0
 800c112:	2105      	movs	r1, #5
 800c114:	6980      	ldr	r0, [r0, #24]
 800c116:	f7f8 b841 	b.w	800419c <LCD_X_DisplayDriver>

0800c11a <_SetOrg>:
 800c11a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c11e:	2300      	movs	r3, #0
 800c120:	4607      	mov	r7, r0
 800c122:	6884      	ldr	r4, [r0, #8]
 800c124:	6980      	ldr	r0, [r0, #24]
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	460d      	mov	r5, r1
 800c12a:	4616      	mov	r6, r2
 800c12c:	9301      	str	r3, [sp, #4]
 800c12e:	f7ff f8d7 	bl	800b2e0 <LCD_GetMirrorXEx>
 800c132:	4680      	mov	r8, r0
 800c134:	69b8      	ldr	r0, [r7, #24]
 800c136:	f7ff f8d6 	bl	800b2e6 <LCD_GetMirrorYEx>
 800c13a:	4681      	mov	r9, r0
 800c13c:	69b8      	ldr	r0, [r7, #24]
 800c13e:	f7ff f8d5 	bl	800b2ec <LCD_GetSwapXYEx>
 800c142:	0080      	lsls	r0, r0, #2
 800c144:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800c148:	ea40 0008 	orr.w	r0, r0, r8
 800c14c:	2807      	cmp	r0, #7
 800c14e:	d826      	bhi.n	800c19e <_SetOrg+0x84>
 800c150:	e8df f000 	tbb	[pc, r0]
 800c154:	0b0f0408 	.word	0x0b0f0408
 800c158:	1b1f1519 	.word	0x1b1f1519
 800c15c:	69a3      	ldr	r3, [r4, #24]
 800c15e:	6921      	ldr	r1, [r4, #16]
 800c160:	1a59      	subs	r1, r3, r1
 800c162:	1b4d      	subs	r5, r1, r5
 800c164:	9500      	str	r5, [sp, #0]
 800c166:	9601      	str	r6, [sp, #4]
 800c168:	e019      	b.n	800c19e <_SetOrg+0x84>
 800c16a:	69a3      	ldr	r3, [r4, #24]
 800c16c:	6921      	ldr	r1, [r4, #16]
 800c16e:	1a5b      	subs	r3, r3, r1
 800c170:	1b5d      	subs	r5, r3, r5
 800c172:	69e3      	ldr	r3, [r4, #28]
 800c174:	6962      	ldr	r2, [r4, #20]
 800c176:	9500      	str	r5, [sp, #0]
 800c178:	1a9a      	subs	r2, r3, r2
 800c17a:	1b96      	subs	r6, r2, r6
 800c17c:	e7f3      	b.n	800c166 <_SetOrg+0x4c>
 800c17e:	69e3      	ldr	r3, [r4, #28]
 800c180:	6962      	ldr	r2, [r4, #20]
 800c182:	1a9a      	subs	r2, r3, r2
 800c184:	1b96      	subs	r6, r2, r6
 800c186:	9600      	str	r6, [sp, #0]
 800c188:	e008      	b.n	800c19c <_SetOrg+0x82>
 800c18a:	69e3      	ldr	r3, [r4, #28]
 800c18c:	6962      	ldr	r2, [r4, #20]
 800c18e:	1a9b      	subs	r3, r3, r2
 800c190:	1b9e      	subs	r6, r3, r6
 800c192:	69a3      	ldr	r3, [r4, #24]
 800c194:	6921      	ldr	r1, [r4, #16]
 800c196:	9600      	str	r6, [sp, #0]
 800c198:	1a59      	subs	r1, r3, r1
 800c19a:	1b4d      	subs	r5, r1, r5
 800c19c:	9501      	str	r5, [sp, #4]
 800c19e:	466a      	mov	r2, sp
 800c1a0:	2103      	movs	r1, #3
 800c1a2:	69b8      	ldr	r0, [r7, #24]
 800c1a4:	f7f7 fffa 	bl	800419c <LCD_X_DisplayDriver>
 800c1a8:	b003      	add	sp, #12
 800c1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800c1b0 <_DrawBitmap>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	b089      	sub	sp, #36	; 0x24
 800c1b6:	4680      	mov	r8, r0
 800c1b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c1ba:	9103      	str	r1, [sp, #12]
 800c1bc:	469b      	mov	fp, r3
 800c1be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	2804      	cmp	r0, #4
 800c1c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	9202      	str	r2, [sp, #8]
 800c1ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c1cc:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 800c1d0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1d6:	d016      	beq.n	800c206 <_DrawBitmap+0x56>
 800c1d8:	dc0e      	bgt.n	800c1f8 <_DrawBitmap+0x48>
 800c1da:	2801      	cmp	r0, #1
 800c1dc:	d01d      	beq.n	800c21a <_DrawBitmap+0x6a>
 800c1de:	2802      	cmp	r0, #2
 800c1e0:	f040 8253 	bne.w	800c68a <_DrawBitmap+0x4da>
 800c1e4:	4aac      	ldr	r2, [pc, #688]	; (800c498 <_DrawBitmap+0x2e8>)
 800c1e6:	6812      	ldr	r2, [r2, #0]
 800c1e8:	9204      	str	r2, [sp, #16]
 800c1ea:	9a03      	ldr	r2, [sp, #12]
 800c1ec:	4452      	add	r2, sl
 800c1ee:	2700      	movs	r7, #0
 800c1f0:	9203      	str	r2, [sp, #12]
 800c1f2:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800c1f6:	e0bd      	b.n	800c374 <_DrawBitmap+0x1c4>
 800c1f8:	2808      	cmp	r0, #8
 800c1fa:	f000 816e 	beq.w	800c4da <_DrawBitmap+0x32a>
 800c1fe:	2820      	cmp	r0, #32
 800c200:	f000 8219 	beq.w	800c636 <_DrawBitmap+0x486>
 800c204:	e241      	b.n	800c68a <_DrawBitmap+0x4da>
 800c206:	4aa4      	ldr	r2, [pc, #656]	; (800c498 <_DrawBitmap+0x2e8>)
 800c208:	6812      	ldr	r2, [r2, #0]
 800c20a:	9204      	str	r2, [sp, #16]
 800c20c:	9a03      	ldr	r2, [sp, #12]
 800c20e:	4452      	add	r2, sl
 800c210:	2700      	movs	r7, #0
 800c212:	9203      	str	r2, [sp, #12]
 800c214:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800c218:	e105      	b.n	800c426 <_DrawBitmap+0x276>
 800c21a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800c21c:	b916      	cbnz	r6, 800c224 <_DrawBitmap+0x74>
 800c21e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c222:	e04d      	b.n	800c2c0 <_DrawBitmap+0x110>
 800c224:	4b9c      	ldr	r3, [pc, #624]	; (800c498 <_DrawBitmap+0x2e8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	7c1b      	ldrb	r3, [r3, #16]
 800c22a:	07df      	lsls	r7, r3, #31
 800c22c:	d4f7      	bmi.n	800c21e <_DrawBitmap+0x6e>
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	9315      	str	r3, [sp, #84]	; 0x54
 800c232:	9b00      	ldr	r3, [sp, #0]
 800c234:	9314      	str	r3, [sp, #80]	; 0x50
 800c236:	9516      	str	r5, [sp, #88]	; 0x58
 800c238:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800c23c:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800c240:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800c244:	4623      	mov	r3, r4
 800c246:	46b4      	mov	ip, r6
 800c248:	b009      	add	sp, #36	; 0x24
 800c24a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24e:	4760      	bx	ip
 800c250:	9b03      	ldr	r3, [sp, #12]
 800c252:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800c256:	f8d8 6008 	ldr.w	r6, [r8, #8]
 800c25a:	eb03 070a 	add.w	r7, r3, sl
 800c25e:	4b8e      	ldr	r3, [pc, #568]	; (800c498 <_DrawBitmap+0x2e8>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	7c1b      	ldrb	r3, [r3, #16]
 800c264:	f003 0303 	and.w	r3, r3, #3
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d030      	beq.n	800c2ce <_DrawBitmap+0x11e>
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d04f      	beq.n	800c310 <_DrawBitmap+0x160>
 800c270:	2b01      	cmp	r3, #1
 800c272:	d04d      	beq.n	800c310 <_DrawBitmap+0x160>
 800c274:	4989      	ldr	r1, [pc, #548]	; (800c49c <_DrawBitmap+0x2ec>)
 800c276:	7823      	ldrb	r3, [r4, #0]
 800c278:	6828      	ldr	r0, [r5, #0]
 800c27a:	5ccb      	ldrb	r3, [r1, r3]
 800c27c:	6a31      	ldr	r1, [r6, #32]
 800c27e:	fb01 7709 	mla	r7, r1, r9, r7
 800c282:	6831      	ldr	r1, [r6, #0]
 800c284:	f1ca 0208 	rsb	r2, sl, #8
 800c288:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c28c:	fa43 f30a 	asr.w	r3, r3, sl
 800c290:	4659      	mov	r1, fp
 800c292:	4626      	mov	r6, r4
 800c294:	f013 0f01 	tst.w	r3, #1
 800c298:	bf0c      	ite	eq
 800c29a:	4686      	moveq	lr, r0
 800c29c:	46e6      	movne	lr, ip
 800c29e:	3a01      	subs	r2, #1
 800c2a0:	bf04      	itt	eq
 800c2a2:	7873      	ldrbeq	r3, [r6, #1]
 800c2a4:	4a7d      	ldreq	r2, [pc, #500]	; (800c49c <_DrawBitmap+0x2ec>)
 800c2a6:	f847 eb04 	str.w	lr, [r7], #4
 800c2aa:	bf09      	itett	eq
 800c2ac:	5cd3      	ldrbeq	r3, [r2, r3]
 800c2ae:	085b      	lsrne	r3, r3, #1
 800c2b0:	3601      	addeq	r6, #1
 800c2b2:	2208      	moveq	r2, #8
 800c2b4:	3901      	subs	r1, #1
 800c2b6:	d1ed      	bne.n	800c294 <_DrawBitmap+0xe4>
 800c2b8:	9b01      	ldr	r3, [sp, #4]
 800c2ba:	f109 0901 	add.w	r9, r9, #1
 800c2be:	441c      	add	r4, r3
 800c2c0:	9b02      	ldr	r3, [sp, #8]
 800c2c2:	9a00      	ldr	r2, [sp, #0]
 800c2c4:	ebc3 0309 	rsb	r3, r3, r9
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	dcc1      	bgt.n	800c250 <_DrawBitmap+0xa0>
 800c2cc:	e1dd      	b.n	800c68a <_DrawBitmap+0x4da>
 800c2ce:	7823      	ldrb	r3, [r4, #0]
 800c2d0:	4a72      	ldr	r2, [pc, #456]	; (800c49c <_DrawBitmap+0x2ec>)
 800c2d2:	5cd2      	ldrb	r2, [r2, r3]
 800c2d4:	6a33      	ldr	r3, [r6, #32]
 800c2d6:	fb03 7709 	mla	r7, r3, r9, r7
 800c2da:	6833      	ldr	r3, [r6, #0]
 800c2dc:	f1ca 0108 	rsb	r1, sl, #8
 800c2e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2e4:	fa42 f20a 	asr.w	r2, r2, sl
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	07d6      	lsls	r6, r2, #31
 800c2ee:	bf48      	it	mi
 800c2f0:	f847 c020 	strmi.w	ip, [r7, r0, lsl #2]
 800c2f4:	3901      	subs	r1, #1
 800c2f6:	bf04      	itt	eq
 800c2f8:	785a      	ldrbeq	r2, [r3, #1]
 800c2fa:	4968      	ldreq	r1, [pc, #416]	; (800c49c <_DrawBitmap+0x2ec>)
 800c2fc:	f100 0001 	add.w	r0, r0, #1
 800c300:	bf09      	itett	eq
 800c302:	5c8a      	ldrbeq	r2, [r1, r2]
 800c304:	0852      	lsrne	r2, r2, #1
 800c306:	3301      	addeq	r3, #1
 800c308:	2108      	moveq	r1, #8
 800c30a:	4583      	cmp	fp, r0
 800c30c:	d1ee      	bne.n	800c2ec <_DrawBitmap+0x13c>
 800c30e:	e7d3      	b.n	800c2b8 <_DrawBitmap+0x108>
 800c310:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	4798      	blx	r3
 800c318:	eb07 030b 	add.w	r3, r7, fp
 800c31c:	9006      	str	r0, [sp, #24]
 800c31e:	f8cd b014 	str.w	fp, [sp, #20]
 800c322:	4656      	mov	r6, sl
 800c324:	9404      	str	r4, [sp, #16]
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	9b07      	ldr	r3, [sp, #28]
 800c32a:	9a05      	ldr	r2, [sp, #20]
 800c32c:	1a9f      	subs	r7, r3, r2
 800c32e:	9b04      	ldr	r3, [sp, #16]
 800c330:	781a      	ldrb	r2, [r3, #0]
 800c332:	2380      	movs	r3, #128	; 0x80
 800c334:	4133      	asrs	r3, r6
 800c336:	421a      	tst	r2, r3
 800c338:	d00b      	beq.n	800c352 <_DrawBitmap+0x1a2>
 800c33a:	464a      	mov	r2, r9
 800c33c:	4639      	mov	r1, r7
 800c33e:	4640      	mov	r0, r8
 800c340:	f7ff fd22 	bl	800bd88 <_GetPixelIndex>
 800c344:	9b06      	ldr	r3, [sp, #24]
 800c346:	464a      	mov	r2, r9
 800c348:	4043      	eors	r3, r0
 800c34a:	4639      	mov	r1, r7
 800c34c:	4640      	mov	r0, r8
 800c34e:	f7ff fd12 	bl	800bd76 <_SetPixelIndex>
 800c352:	3601      	adds	r6, #1
 800c354:	2e08      	cmp	r6, #8
 800c356:	bf02      	ittt	eq
 800c358:	9b04      	ldreq	r3, [sp, #16]
 800c35a:	3301      	addeq	r3, #1
 800c35c:	9304      	streq	r3, [sp, #16]
 800c35e:	9b05      	ldr	r3, [sp, #20]
 800c360:	bf08      	it	eq
 800c362:	2600      	moveq	r6, #0
 800c364:	3b01      	subs	r3, #1
 800c366:	9305      	str	r3, [sp, #20]
 800c368:	d1de      	bne.n	800c328 <_DrawBitmap+0x178>
 800c36a:	e7a5      	b.n	800c2b8 <_DrawBitmap+0x108>
 800c36c:	b935      	cbnz	r5, 800c37c <_DrawBitmap+0x1cc>
 800c36e:	9a01      	ldr	r2, [sp, #4]
 800c370:	3701      	adds	r7, #1
 800c372:	4414      	add	r4, r2
 800c374:	9a00      	ldr	r2, [sp, #0]
 800c376:	4297      	cmp	r7, r2
 800c378:	dbf8      	blt.n	800c36c <_DrawBitmap+0x1bc>
 800c37a:	e186      	b.n	800c68a <_DrawBitmap+0x4da>
 800c37c:	9a02      	ldr	r2, [sp, #8]
 800c37e:	6a19      	ldr	r1, [r3, #32]
 800c380:	9803      	ldr	r0, [sp, #12]
 800c382:	f894 e000 	ldrb.w	lr, [r4]
 800c386:	443a      	add	r2, r7
 800c388:	fb01 0102 	mla	r1, r1, r2, r0
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c392:	9904      	ldr	r1, [sp, #16]
 800c394:	7c09      	ldrb	r1, [r1, #16]
 800c396:	f011 0103 	ands.w	r1, r1, #3
 800c39a:	4690      	mov	r8, r2
 800c39c:	d006      	beq.n	800c3ac <_DrawBitmap+0x1fc>
 800c39e:	2902      	cmp	r1, #2
 800c3a0:	d1e5      	bne.n	800c36e <_DrawBitmap+0x1be>
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	46a1      	mov	r9, r4
 800c3a6:	f04f 0800 	mov.w	r8, #0
 800c3aa:	e01b      	b.n	800c3e4 <_DrawBitmap+0x234>
 800c3ac:	4651      	mov	r1, sl
 800c3ae:	465e      	mov	r6, fp
 800c3b0:	46a1      	mov	r9, r4
 800c3b2:	f1c1 0003 	rsb	r0, r1, #3
 800c3b6:	0040      	lsls	r0, r0, #1
 800c3b8:	f1c0 0206 	rsb	r2, r0, #6
 800c3bc:	fa4c f202 	asr.w	r2, ip, r2
 800c3c0:	ea02 020e 	and.w	r2, r2, lr
 800c3c4:	40c2      	lsrs	r2, r0
 800c3c6:	3101      	adds	r1, #1
 800c3c8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c3cc:	f848 2b04 	str.w	r2, [r8], #4
 800c3d0:	2904      	cmp	r1, #4
 800c3d2:	bf02      	ittt	eq
 800c3d4:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800c3d8:	2100      	moveq	r1, #0
 800c3da:	f109 0901 	addeq.w	r9, r9, #1
 800c3de:	3e01      	subs	r6, #1
 800c3e0:	d1e7      	bne.n	800c3b2 <_DrawBitmap+0x202>
 800c3e2:	e7c4      	b.n	800c36e <_DrawBitmap+0x1be>
 800c3e4:	f1c0 0603 	rsb	r6, r0, #3
 800c3e8:	0076      	lsls	r6, r6, #1
 800c3ea:	f1c6 0106 	rsb	r1, r6, #6
 800c3ee:	fa4c f101 	asr.w	r1, ip, r1
 800c3f2:	ea01 010e 	and.w	r1, r1, lr
 800c3f6:	40f1      	lsrs	r1, r6
 800c3f8:	f100 0001 	add.w	r0, r0, #1
 800c3fc:	bf1c      	itt	ne
 800c3fe:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 800c402:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 800c406:	2804      	cmp	r0, #4
 800c408:	f108 0801 	add.w	r8, r8, #1
 800c40c:	bf02      	ittt	eq
 800c40e:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800c412:	2000      	moveq	r0, #0
 800c414:	f109 0901 	addeq.w	r9, r9, #1
 800c418:	45d8      	cmp	r8, fp
 800c41a:	d1e3      	bne.n	800c3e4 <_DrawBitmap+0x234>
 800c41c:	e7a7      	b.n	800c36e <_DrawBitmap+0x1be>
 800c41e:	b935      	cbnz	r5, 800c42e <_DrawBitmap+0x27e>
 800c420:	9a01      	ldr	r2, [sp, #4]
 800c422:	3701      	adds	r7, #1
 800c424:	4414      	add	r4, r2
 800c426:	9a00      	ldr	r2, [sp, #0]
 800c428:	4297      	cmp	r7, r2
 800c42a:	dbf8      	blt.n	800c41e <_DrawBitmap+0x26e>
 800c42c:	e12d      	b.n	800c68a <_DrawBitmap+0x4da>
 800c42e:	9a02      	ldr	r2, [sp, #8]
 800c430:	6a19      	ldr	r1, [r3, #32]
 800c432:	9803      	ldr	r0, [sp, #12]
 800c434:	f894 e000 	ldrb.w	lr, [r4]
 800c438:	443a      	add	r2, r7
 800c43a:	fb01 0102 	mla	r1, r1, r2, r0
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c444:	9904      	ldr	r1, [sp, #16]
 800c446:	7c09      	ldrb	r1, [r1, #16]
 800c448:	f011 0103 	ands.w	r1, r1, #3
 800c44c:	4690      	mov	r8, r2
 800c44e:	d006      	beq.n	800c45e <_DrawBitmap+0x2ae>
 800c450:	2902      	cmp	r1, #2
 800c452:	d1e5      	bne.n	800c420 <_DrawBitmap+0x270>
 800c454:	4650      	mov	r0, sl
 800c456:	46a1      	mov	r9, r4
 800c458:	f04f 0800 	mov.w	r8, #0
 800c45c:	e020      	b.n	800c4a0 <_DrawBitmap+0x2f0>
 800c45e:	4651      	mov	r1, sl
 800c460:	465e      	mov	r6, fp
 800c462:	46a1      	mov	r9, r4
 800c464:	f1c1 0001 	rsb	r0, r1, #1
 800c468:	0080      	lsls	r0, r0, #2
 800c46a:	f1c0 0204 	rsb	r2, r0, #4
 800c46e:	fa4c f202 	asr.w	r2, ip, r2
 800c472:	ea02 020e 	and.w	r2, r2, lr
 800c476:	40c2      	lsrs	r2, r0
 800c478:	3101      	adds	r1, #1
 800c47a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c47e:	f848 2b04 	str.w	r2, [r8], #4
 800c482:	2902      	cmp	r1, #2
 800c484:	bf02      	ittt	eq
 800c486:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800c48a:	2100      	moveq	r1, #0
 800c48c:	f109 0901 	addeq.w	r9, r9, #1
 800c490:	3e01      	subs	r6, #1
 800c492:	d1e7      	bne.n	800c464 <_DrawBitmap+0x2b4>
 800c494:	e7c4      	b.n	800c420 <_DrawBitmap+0x270>
 800c496:	bf00      	nop
 800c498:	20000014 	.word	0x20000014
 800c49c:	0801a9a4 	.word	0x0801a9a4
 800c4a0:	f1c0 0601 	rsb	r6, r0, #1
 800c4a4:	00b6      	lsls	r6, r6, #2
 800c4a6:	f1c6 0104 	rsb	r1, r6, #4
 800c4aa:	fa4c f101 	asr.w	r1, ip, r1
 800c4ae:	ea01 010e 	and.w	r1, r1, lr
 800c4b2:	40f1      	lsrs	r1, r6
 800c4b4:	f100 0001 	add.w	r0, r0, #1
 800c4b8:	bf1c      	itt	ne
 800c4ba:	f855 1021 	ldrne.w	r1, [r5, r1, lsl #2]
 800c4be:	f842 1028 	strne.w	r1, [r2, r8, lsl #2]
 800c4c2:	2802      	cmp	r0, #2
 800c4c4:	f108 0801 	add.w	r8, r8, #1
 800c4c8:	bf02      	ittt	eq
 800c4ca:	f899 e001 	ldrbeq.w	lr, [r9, #1]
 800c4ce:	2000      	moveq	r0, #0
 800c4d0:	f109 0901 	addeq.w	r9, r9, #1
 800c4d4:	45c3      	cmp	fp, r8
 800c4d6:	d1e3      	bne.n	800c4a0 <_DrawBitmap+0x2f0>
 800c4d8:	e7a2      	b.n	800c420 <_DrawBitmap+0x270>
 800c4da:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 800c4dc:	4f6c      	ldr	r7, [pc, #432]	; (800c690 <_DrawBitmap+0x4e0>)
 800c4de:	b926      	cbnz	r6, 800c4ea <_DrawBitmap+0x33a>
 800c4e0:	f8d7 c000 	ldr.w	ip, [r7]
 800c4e4:	f04f 0e00 	mov.w	lr, #0
 800c4e8:	e019      	b.n	800c51e <_DrawBitmap+0x36e>
 800c4ea:	6838      	ldr	r0, [r7, #0]
 800c4ec:	7c00      	ldrb	r0, [r0, #16]
 800c4ee:	0780      	lsls	r0, r0, #30
 800c4f0:	d4f6      	bmi.n	800c4e0 <_DrawBitmap+0x330>
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	d0f4      	beq.n	800c4e0 <_DrawBitmap+0x330>
 800c4f6:	9b01      	ldr	r3, [sp, #4]
 800c4f8:	9314      	str	r3, [sp, #80]	; 0x50
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800c4fe:	9515      	str	r5, [sp, #84]	; 0x54
 800c500:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800c504:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800c508:	4623      	mov	r3, r4
 800c50a:	46b4      	mov	ip, r6
 800c50c:	b009      	add	sp, #36	; 0x24
 800c50e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c512:	4760      	bx	ip
 800c514:	b93d      	cbnz	r5, 800c526 <_DrawBitmap+0x376>
 800c516:	9a01      	ldr	r2, [sp, #4]
 800c518:	f10e 0e01 	add.w	lr, lr, #1
 800c51c:	4414      	add	r4, r2
 800c51e:	9a00      	ldr	r2, [sp, #0]
 800c520:	4596      	cmp	lr, r2
 800c522:	dbf7      	blt.n	800c514 <_DrawBitmap+0x364>
 800c524:	e0b1      	b.n	800c68a <_DrawBitmap+0x4da>
 800c526:	9a02      	ldr	r2, [sp, #8]
 800c528:	6a19      	ldr	r1, [r3, #32]
 800c52a:	9803      	ldr	r0, [sp, #12]
 800c52c:	4472      	add	r2, lr
 800c52e:	fb01 0202 	mla	r2, r1, r2, r0
 800c532:	6819      	ldr	r1, [r3, #0]
 800c534:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c538:	f89c 1010 	ldrb.w	r1, [ip, #16]
 800c53c:	f011 0103 	ands.w	r1, r1, #3
 800c540:	d003      	beq.n	800c54a <_DrawBitmap+0x39a>
 800c542:	2902      	cmp	r1, #2
 800c544:	d1e7      	bne.n	800c516 <_DrawBitmap+0x366>
 800c546:	2000      	movs	r0, #0
 800c548:	e070      	b.n	800c62c <_DrawBitmap+0x47c>
 800c54a:	4620      	mov	r0, r4
 800c54c:	4659      	mov	r1, fp
 800c54e:	2907      	cmp	r1, #7
 800c550:	f100 0708 	add.w	r7, r0, #8
 800c554:	f102 0620 	add.w	r6, r2, #32
 800c558:	dd33      	ble.n	800c5c2 <_DrawBitmap+0x412>
 800c55a:	f817 2c08 	ldrb.w	r2, [r7, #-8]
 800c55e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c562:	f846 2c20 	str.w	r2, [r6, #-32]
 800c566:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800c56a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c56e:	f846 2c1c 	str.w	r2, [r6, #-28]
 800c572:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800c576:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c57a:	f846 2c18 	str.w	r2, [r6, #-24]
 800c57e:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800c582:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c586:	f846 2c14 	str.w	r2, [r6, #-20]
 800c58a:	f817 2c04 	ldrb.w	r2, [r7, #-4]
 800c58e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c592:	f846 2c10 	str.w	r2, [r6, #-16]
 800c596:	f817 2c03 	ldrb.w	r2, [r7, #-3]
 800c59a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c59e:	f846 2c0c 	str.w	r2, [r6, #-12]
 800c5a2:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 800c5a6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c5aa:	f846 2c08 	str.w	r2, [r6, #-8]
 800c5ae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c5b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c5b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800c5ba:	3908      	subs	r1, #8
 800c5bc:	4632      	mov	r2, r6
 800c5be:	4638      	mov	r0, r7
 800c5c0:	e7c5      	b.n	800c54e <_DrawBitmap+0x39e>
 800c5c2:	2903      	cmp	r1, #3
 800c5c4:	4616      	mov	r6, r2
 800c5c6:	4607      	mov	r7, r0
 800c5c8:	f102 0210 	add.w	r2, r2, #16
 800c5cc:	f100 0004 	add.w	r0, r0, #4
 800c5d0:	dd19      	ble.n	800c606 <_DrawBitmap+0x456>
 800c5d2:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 800c5d6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c5da:	f842 6c10 	str.w	r6, [r2, #-16]
 800c5de:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 800c5e2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c5e6:	f842 6c0c 	str.w	r6, [r2, #-12]
 800c5ea:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800c5ee:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c5f2:	f842 6c08 	str.w	r6, [r2, #-8]
 800c5f6:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800c5fa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c5fe:	f842 6c04 	str.w	r6, [r2, #-4]
 800c602:	3904      	subs	r1, #4
 800c604:	e7dd      	b.n	800c5c2 <_DrawBitmap+0x412>
 800c606:	3f01      	subs	r7, #1
 800c608:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800c60c:	42b1      	cmp	r1, r6
 800c60e:	d082      	beq.n	800c516 <_DrawBitmap+0x366>
 800c610:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800c614:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c618:	f846 2b04 	str.w	r2, [r6], #4
 800c61c:	e7f6      	b.n	800c60c <_DrawBitmap+0x45c>
 800c61e:	5c21      	ldrb	r1, [r4, r0]
 800c620:	b119      	cbz	r1, 800c62a <_DrawBitmap+0x47a>
 800c622:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800c626:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800c62a:	3001      	adds	r0, #1
 800c62c:	ebc0 010b 	rsb	r1, r0, fp
 800c630:	2900      	cmp	r1, #0
 800c632:	dcf4      	bgt.n	800c61e <_DrawBitmap+0x46e>
 800c634:	e76f      	b.n	800c516 <_DrawBitmap+0x366>
 800c636:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800c638:	b90d      	cbnz	r5, 800c63e <_DrawBitmap+0x48e>
 800c63a:	462a      	mov	r2, r5
 800c63c:	e017      	b.n	800c66e <_DrawBitmap+0x4be>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	9314      	str	r3, [sp, #80]	; 0x50
 800c642:	9b00      	ldr	r3, [sp, #0]
 800c644:	9313      	str	r3, [sp, #76]	; 0x4c
 800c646:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800c64a:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800c64e:	4623      	mov	r3, r4
 800c650:	46ac      	mov	ip, r5
 800c652:	b009      	add	sp, #36	; 0x24
 800c654:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c658:	4760      	bx	ip
 800c65a:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
 800c65e:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
 800c662:	3101      	adds	r1, #1
 800c664:	4559      	cmp	r1, fp
 800c666:	d1f8      	bne.n	800c65a <_DrawBitmap+0x4aa>
 800c668:	9901      	ldr	r1, [sp, #4]
 800c66a:	3201      	adds	r2, #1
 800c66c:	440c      	add	r4, r1
 800c66e:	9900      	ldr	r1, [sp, #0]
 800c670:	428a      	cmp	r2, r1
 800c672:	da0a      	bge.n	800c68a <_DrawBitmap+0x4da>
 800c674:	9902      	ldr	r1, [sp, #8]
 800c676:	6a18      	ldr	r0, [r3, #32]
 800c678:	9d03      	ldr	r5, [sp, #12]
 800c67a:	4411      	add	r1, r2
 800c67c:	fb00 5101 	mla	r1, r0, r1, r5
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c686:	2100      	movs	r1, #0
 800c688:	e7e7      	b.n	800c65a <_DrawBitmap+0x4aa>
 800c68a:	b009      	add	sp, #36	; 0x24
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c690:	20000014 	.word	0x20000014

0800c694 <_InitOnce.isra.4>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	6805      	ldr	r5, [r0, #0]
 800c698:	4604      	mov	r4, r0
 800c69a:	b93d      	cbnz	r5, 800c6ac <_InitOnce.isra.4+0x18>
 800c69c:	2050      	movs	r0, #80	; 0x50
 800c69e:	f7fb ff0b 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 800c6a2:	2250      	movs	r2, #80	; 0x50
 800c6a4:	6020      	str	r0, [r4, #0]
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7fd ffb2 	bl	800a610 <GUI__memset>
 800c6ac:	6820      	ldr	r0, [r4, #0]
 800c6ae:	fab0 f080 	clz	r0, r0
 800c6b2:	0940      	lsrs	r0, r0, #5
 800c6b4:	bd38      	pop	{r3, r4, r5, pc}

0800c6b6 <_SetDevFunc>:
 800c6b6:	b570      	push	{r4, r5, r6, lr}
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	3008      	adds	r0, #8
 800c6bc:	460d      	mov	r5, r1
 800c6be:	4614      	mov	r4, r2
 800c6c0:	f7ff ffe8 	bl	800c694 <_InitOnce.isra.4>
 800c6c4:	68b3      	ldr	r3, [r6, #8]
 800c6c6:	b1db      	cbz	r3, 800c700 <_SetDevFunc+0x4a>
 800c6c8:	2d21      	cmp	r5, #33	; 0x21
 800c6ca:	d012      	beq.n	800c6f2 <_SetDevFunc+0x3c>
 800c6cc:	dc07      	bgt.n	800c6de <_SetDevFunc+0x28>
 800c6ce:	2d19      	cmp	r5, #25
 800c6d0:	d00d      	beq.n	800c6ee <_SetDevFunc+0x38>
 800c6d2:	2d20      	cmp	r5, #32
 800c6d4:	d00f      	beq.n	800c6f6 <_SetDevFunc+0x40>
 800c6d6:	2d03      	cmp	r5, #3
 800c6d8:	d112      	bne.n	800c700 <_SetDevFunc+0x4a>
 800c6da:	649c      	str	r4, [r3, #72]	; 0x48
 800c6dc:	bd70      	pop	{r4, r5, r6, pc}
 800c6de:	2d25      	cmp	r5, #37	; 0x25
 800c6e0:	d00b      	beq.n	800c6fa <_SetDevFunc+0x44>
 800c6e2:	2d28      	cmp	r5, #40	; 0x28
 800c6e4:	d00b      	beq.n	800c6fe <_SetDevFunc+0x48>
 800c6e6:	2d23      	cmp	r5, #35	; 0x23
 800c6e8:	d10a      	bne.n	800c700 <_SetDevFunc+0x4a>
 800c6ea:	645c      	str	r4, [r3, #68]	; 0x44
 800c6ec:	bd70      	pop	{r4, r5, r6, pc}
 800c6ee:	635c      	str	r4, [r3, #52]	; 0x34
 800c6f0:	bd70      	pop	{r4, r5, r6, pc}
 800c6f2:	639c      	str	r4, [r3, #56]	; 0x38
 800c6f4:	bd70      	pop	{r4, r5, r6, pc}
 800c6f6:	63dc      	str	r4, [r3, #60]	; 0x3c
 800c6f8:	bd70      	pop	{r4, r5, r6, pc}
 800c6fa:	641c      	str	r4, [r3, #64]	; 0x40
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
 800c6fe:	64dc      	str	r4, [r3, #76]	; 0x4c
 800c700:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c704 <_CopyBuffer>:
 800c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c708:	4606      	mov	r6, r0
 800c70a:	3008      	adds	r0, #8
 800c70c:	460f      	mov	r7, r1
 800c70e:	4690      	mov	r8, r2
 800c710:	f7ff ffc0 	bl	800c694 <_InitOnce.isra.4>
 800c714:	68b4      	ldr	r4, [r6, #8]
 800c716:	b31c      	cbz	r4, 800c760 <_CopyBuffer+0x5c>
 800c718:	4547      	cmp	r7, r8
 800c71a:	d021      	beq.n	800c760 <_CopyBuffer+0x5c>
 800c71c:	68f3      	ldr	r3, [r6, #12]
 800c71e:	2108      	movs	r1, #8
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	4630      	mov	r0, r6
 800c724:	4798      	blx	r3
 800c726:	69a2      	ldr	r2, [r4, #24]
 800c728:	6963      	ldr	r3, [r4, #20]
 800c72a:	4353      	muls	r3, r2
 800c72c:	4358      	muls	r0, r3
 800c72e:	68a3      	ldr	r3, [r4, #8]
 800c730:	08c2      	lsrs	r2, r0, #3
 800c732:	b123      	cbz	r3, 800c73e <_CopyBuffer+0x3a>
 800c734:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800c738:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 800c73c:	e004      	b.n	800c748 <_CopyBuffer+0x44>
 800c73e:	6865      	ldr	r5, [r4, #4]
 800c740:	fb02 5107 	mla	r1, r2, r7, r5
 800c744:	fb02 5508 	mla	r5, r2, r8, r5
 800c748:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c74a:	b123      	cbz	r3, 800c756 <_CopyBuffer+0x52>
 800c74c:	4642      	mov	r2, r8
 800c74e:	4639      	mov	r1, r7
 800c750:	69b0      	ldr	r0, [r6, #24]
 800c752:	4798      	blx	r3
 800c754:	e003      	b.n	800c75e <_CopyBuffer+0x5a>
 800c756:	4b03      	ldr	r3, [pc, #12]	; (800c764 <_CopyBuffer+0x60>)
 800c758:	4628      	mov	r0, r5
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4798      	blx	r3
 800c75e:	6025      	str	r5, [r4, #0]
 800c760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c764:	2000003c 	.word	0x2000003c

0800c768 <_GetPos>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	4604      	mov	r4, r0
 800c76c:	3008      	adds	r0, #8
 800c76e:	460e      	mov	r6, r1
 800c770:	4615      	mov	r5, r2
 800c772:	f7ff ff8f 	bl	800c694 <_InitOnce.isra.4>
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	b11b      	cbz	r3, 800c782 <_GetPos+0x1a>
 800c77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c77c:	6032      	str	r2, [r6, #0]
 800c77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	bd70      	pop	{r4, r5, r6, pc}

0800c784 <_SetVRAM_BufferPTR>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4605      	mov	r5, r0
 800c788:	3008      	adds	r0, #8
 800c78a:	460c      	mov	r4, r1
 800c78c:	f7ff ff82 	bl	800c694 <_InitOnce.isra.4>
 800c790:	68ab      	ldr	r3, [r5, #8]
 800c792:	b113      	cbz	r3, 800c79a <_SetVRAM_BufferPTR+0x16>
 800c794:	6822      	ldr	r2, [r4, #0]
 800c796:	609c      	str	r4, [r3, #8]
 800c798:	601a      	str	r2, [r3, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}

0800c79c <_ShowBuffer>:
 800c79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c79e:	4604      	mov	r4, r0
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	3008      	adds	r0, #8
 800c7a4:	9301      	str	r3, [sp, #4]
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	f7ff ff74 	bl	800c694 <_InitOnce.isra.4>
 800c7ac:	68a3      	ldr	r3, [r4, #8]
 800c7ae:	b133      	cbz	r3, 800c7be <_ShowBuffer+0x22>
 800c7b0:	aa02      	add	r2, sp, #8
 800c7b2:	210e      	movs	r1, #14
 800c7b4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c7b8:	69a0      	ldr	r0, [r4, #24]
 800c7ba:	f7f7 fcef 	bl	800419c <LCD_X_DisplayDriver>
 800c7be:	b003      	add	sp, #12
 800c7c0:	bd30      	pop	{r4, r5, pc}

0800c7c2 <_Init>:
 800c7c2:	b538      	push	{r3, r4, r5, lr}
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	3008      	adds	r0, #8
 800c7c8:	f7ff ff64 	bl	800c694 <_InitOnce.isra.4>
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	69a0      	ldr	r0, [r4, #24]
 800c7d4:	f7f7 fce2 	bl	800419c <LCD_X_DisplayDriver>
 800c7d8:	4328      	orrs	r0, r5
 800c7da:	bd38      	pop	{r3, r4, r5, pc}

0800c7dc <_SetVis>:
 800c7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7de:	4604      	mov	r4, r0
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	3008      	adds	r0, #8
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	460d      	mov	r5, r1
 800c7e8:	f7ff ff54 	bl	800c694 <_InitOnce.isra.4>
 800c7ec:	68a3      	ldr	r3, [r4, #8]
 800c7ee:	b13b      	cbz	r3, 800c800 <_SetVis+0x24>
 800c7f0:	aa02      	add	r2, sp, #8
 800c7f2:	631d      	str	r5, [r3, #48]	; 0x30
 800c7f4:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c7f8:	2109      	movs	r1, #9
 800c7fa:	69a0      	ldr	r0, [r4, #24]
 800c7fc:	f7f7 fcce 	bl	800419c <LCD_X_DisplayDriver>
 800c800:	b003      	add	sp, #12
 800c802:	bd30      	pop	{r4, r5, pc}

0800c804 <_SetAlpha>:
 800c804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c806:	4604      	mov	r4, r0
 800c808:	2300      	movs	r3, #0
 800c80a:	3008      	adds	r0, #8
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	460d      	mov	r5, r1
 800c810:	f7ff ff40 	bl	800c694 <_InitOnce.isra.4>
 800c814:	68a3      	ldr	r3, [r4, #8]
 800c816:	b13b      	cbz	r3, 800c828 <_SetAlpha+0x24>
 800c818:	aa02      	add	r2, sp, #8
 800c81a:	62dd      	str	r5, [r3, #44]	; 0x2c
 800c81c:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c820:	210a      	movs	r1, #10
 800c822:	69a0      	ldr	r0, [r4, #24]
 800c824:	f7f7 fcba 	bl	800419c <LCD_X_DisplayDriver>
 800c828:	b003      	add	sp, #12
 800c82a:	bd30      	pop	{r4, r5, pc}

0800c82c <_SetVRAMAddr>:
 800c82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c82e:	4604      	mov	r4, r0
 800c830:	2300      	movs	r3, #0
 800c832:	3008      	adds	r0, #8
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	460d      	mov	r5, r1
 800c838:	f7ff ff2c 	bl	800c694 <_InitOnce.isra.4>
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	b143      	cbz	r3, 800c852 <_SetVRAMAddr+0x26>
 800c840:	aa02      	add	r2, sp, #8
 800c842:	601d      	str	r5, [r3, #0]
 800c844:	605d      	str	r5, [r3, #4]
 800c846:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c84a:	2102      	movs	r1, #2
 800c84c:	69a0      	ldr	r0, [r4, #24]
 800c84e:	f7f7 fca5 	bl	800419c <LCD_X_DisplayDriver>
 800c852:	b003      	add	sp, #12
 800c854:	bd30      	pop	{r4, r5, pc}

0800c856 <_SetPos>:
 800c856:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85a:	b089      	sub	sp, #36	; 0x24
 800c85c:	4606      	mov	r6, r0
 800c85e:	460d      	mov	r5, r1
 800c860:	4614      	mov	r4, r2
 800c862:	2100      	movs	r1, #0
 800c864:	2218      	movs	r2, #24
 800c866:	a802      	add	r0, sp, #8
 800c868:	f00b fd23 	bl	80182b2 <memset>
 800c86c:	f106 0008 	add.w	r0, r6, #8
 800c870:	f7ff ff10 	bl	800c694 <_InitOnce.isra.4>
 800c874:	68b7      	ldr	r7, [r6, #8]
 800c876:	2f00      	cmp	r7, #0
 800c878:	d069      	beq.n	800c94e <_SetPos+0xf8>
 800c87a:	f8d7 b048 	ldr.w	fp, [r7, #72]	; 0x48
 800c87e:	f1bb 0f00 	cmp.w	fp, #0
 800c882:	d004      	beq.n	800c88e <_SetPos+0x38>
 800c884:	4622      	mov	r2, r4
 800c886:	4629      	mov	r1, r5
 800c888:	69b0      	ldr	r0, [r6, #24]
 800c88a:	47d8      	blx	fp
 800c88c:	e05f      	b.n	800c94e <_SetPos+0xf8>
 800c88e:	627d      	str	r5, [r7, #36]	; 0x24
 800c890:	62bc      	str	r4, [r7, #40]	; 0x28
 800c892:	f7fe fd85 	bl	800b3a0 <LCD_GetXSizeDisplay>
 800c896:	4681      	mov	r9, r0
 800c898:	f7fe fd88 	bl	800b3ac <LCD_GetYSizeDisplay>
 800c89c:	68f2      	ldr	r2, [r6, #12]
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c8a2:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	2108      	movs	r1, #8
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4790      	blx	r2
 800c8b0:	2d00      	cmp	r5, #0
 800c8b2:	f100 0007 	add.w	r0, r0, #7
 800c8b6:	f04f 0208 	mov.w	r2, #8
 800c8ba:	eb05 010a 	add.w	r1, r5, sl
 800c8be:	fb90 f0f2 	sdiv	r0, r0, r2
 800c8c2:	9b01      	ldr	r3, [sp, #4]
 800c8c4:	9006      	str	r0, [sp, #24]
 800c8c6:	da07      	bge.n	800c8d8 <_SetPos+0x82>
 800c8c8:	9a07      	ldr	r2, [sp, #28]
 800c8ca:	f8cd b008 	str.w	fp, [sp, #8]
 800c8ce:	fb00 2015 	mls	r0, r0, r5, r2
 800c8d2:	9007      	str	r0, [sp, #28]
 800c8d4:	9104      	str	r1, [sp, #16]
 800c8d6:	e007      	b.n	800c8e8 <_SetPos+0x92>
 800c8d8:	4589      	cmp	r9, r1
 800c8da:	9502      	str	r5, [sp, #8]
 800c8dc:	bfb6      	itet	lt
 800c8de:	ebc5 0509 	rsblt	r5, r5, r9
 800c8e2:	f8cd a010 	strge.w	sl, [sp, #16]
 800c8e6:	9504      	strlt	r5, [sp, #16]
 800c8e8:	2c00      	cmp	r4, #0
 800c8ea:	eb04 0203 	add.w	r2, r4, r3
 800c8ee:	da09      	bge.n	800c904 <_SetPos+0xae>
 800c8f0:	9b06      	ldr	r3, [sp, #24]
 800c8f2:	9205      	str	r2, [sp, #20]
 800c8f4:	435c      	muls	r4, r3
 800c8f6:	9b07      	ldr	r3, [sp, #28]
 800c8f8:	fb0a 3414 	mls	r4, sl, r4, r3
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	9407      	str	r4, [sp, #28]
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	e006      	b.n	800c912 <_SetPos+0xbc>
 800c904:	4590      	cmp	r8, r2
 800c906:	9403      	str	r4, [sp, #12]
 800c908:	bfb6      	itet	lt
 800c90a:	ebc4 0408 	rsblt	r4, r4, r8
 800c90e:	9305      	strge	r3, [sp, #20]
 800c910:	9405      	strlt	r4, [sp, #20]
 800c912:	9b04      	ldr	r3, [sp, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	dd08      	ble.n	800c92c <_SetPos+0xd6>
 800c91a:	9a05      	ldr	r2, [sp, #20]
 800c91c:	2a00      	cmp	r2, #0
 800c91e:	dd05      	ble.n	800c92c <_SetPos+0xd6>
 800c920:	9a02      	ldr	r2, [sp, #8]
 800c922:	4591      	cmp	r9, r2
 800c924:	dd02      	ble.n	800c92c <_SetPos+0xd6>
 800c926:	9a03      	ldr	r2, [sp, #12]
 800c928:	4590      	cmp	r8, r2
 800c92a:	dc06      	bgt.n	800c93a <_SetPos+0xe4>
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d10e      	bne.n	800c94e <_SetPos+0xf8>
 800c930:	2100      	movs	r1, #0
 800c932:	4630      	mov	r0, r6
 800c934:	f7ff ff52 	bl	800c7dc <_SetVis>
 800c938:	e009      	b.n	800c94e <_SetPos+0xf8>
 800c93a:	b91b      	cbnz	r3, 800c944 <_SetPos+0xee>
 800c93c:	2101      	movs	r1, #1
 800c93e:	4630      	mov	r0, r6
 800c940:	f7ff ff4c 	bl	800c7dc <_SetVis>
 800c944:	aa02      	add	r2, sp, #8
 800c946:	2108      	movs	r1, #8
 800c948:	69b0      	ldr	r0, [r6, #24]
 800c94a:	f7f7 fc27 	bl	800419c <LCD_X_DisplayDriver>
 800c94e:	b009      	add	sp, #36	; 0x24
 800c950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c954 <_SetSize>:
 800c954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c956:	4605      	mov	r5, r0
 800c958:	2300      	movs	r3, #0
 800c95a:	3008      	adds	r0, #8
 800c95c:	460f      	mov	r7, r1
 800c95e:	4616      	mov	r6, r2
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	9301      	str	r3, [sp, #4]
 800c964:	f7ff fe96 	bl	800c694 <_InitOnce.isra.4>
 800c968:	68ac      	ldr	r4, [r5, #8]
 800c96a:	b194      	cbz	r4, 800c992 <_SetSize+0x3e>
 800c96c:	6a23      	ldr	r3, [r4, #32]
 800c96e:	b93b      	cbnz	r3, 800c980 <_SetSize+0x2c>
 800c970:	69a8      	ldr	r0, [r5, #24]
 800c972:	f7fe fcbb 	bl	800b2ec <LCD_GetSwapXYEx>
 800c976:	2800      	cmp	r0, #0
 800c978:	bf0c      	ite	eq
 800c97a:	4638      	moveq	r0, r7
 800c97c:	4630      	movne	r0, r6
 800c97e:	6220      	str	r0, [r4, #32]
 800c980:	6127      	str	r7, [r4, #16]
 800c982:	6166      	str	r6, [r4, #20]
 800c984:	466a      	mov	r2, sp
 800c986:	2107      	movs	r1, #7
 800c988:	69a8      	ldr	r0, [r5, #24]
 800c98a:	9700      	str	r7, [sp, #0]
 800c98c:	9601      	str	r6, [sp, #4]
 800c98e:	f7f7 fc05 	bl	800419c <LCD_X_DisplayDriver>
 800c992:	b003      	add	sp, #12
 800c994:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c996 <_SetVSize>:
 800c996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c998:	4607      	mov	r7, r0
 800c99a:	3008      	adds	r0, #8
 800c99c:	460d      	mov	r5, r1
 800c99e:	4616      	mov	r6, r2
 800c9a0:	f7ff fe78 	bl	800c694 <_InitOnce.isra.4>
 800c9a4:	68bc      	ldr	r4, [r7, #8]
 800c9a6:	b144      	cbz	r4, 800c9ba <_SetVSize+0x24>
 800c9a8:	69b8      	ldr	r0, [r7, #24]
 800c9aa:	f7fe fc9f 	bl	800b2ec <LCD_GetSwapXYEx>
 800c9ae:	61a5      	str	r5, [r4, #24]
 800c9b0:	61e6      	str	r6, [r4, #28]
 800c9b2:	b108      	cbz	r0, 800c9b8 <_SetVSize+0x22>
 800c9b4:	6226      	str	r6, [r4, #32]
 800c9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9b8:	6225      	str	r5, [r4, #32]
 800c9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9bc <_GetDevData>:
 800c9bc:	2901      	cmp	r1, #1
 800c9be:	4802      	ldr	r0, [pc, #8]	; (800c9c8 <_GetDevData+0xc>)
 800c9c0:	bf18      	it	ne
 800c9c2:	2000      	movne	r0, #0
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	0801920c 	.word	0x0801920c

0800c9cc <_GetDevFunc>:
 800c9cc:	2916      	cmp	r1, #22
 800c9ce:	4802      	ldr	r0, [pc, #8]	; (800c9d8 <_GetDevFunc+0xc>)
 800c9d0:	bf18      	it	ne
 800c9d2:	2000      	movne	r0, #0
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	0800d405 	.word	0x0800d405

0800c9dc <_GetDevProp>:
 800c9dc:	2908      	cmp	r1, #8
 800c9de:	bf0c      	ite	eq
 800c9e0:	2020      	moveq	r0, #32
 800c9e2:	2000      	movne	r0, #0
 800c9e4:	4770      	bx	lr

0800c9e6 <_SetOrg>:
 800c9e6:	6800      	ldr	r0, [r0, #0]
 800c9e8:	68c3      	ldr	r3, [r0, #12]
 800c9ea:	6a1b      	ldr	r3, [r3, #32]
 800c9ec:	4718      	bx	r3

0800c9ee <_GetRect>:
 800c9ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9f0:	6880      	ldr	r0, [r0, #8]
 800c9f2:	460d      	mov	r5, r1
 800c9f4:	f7fb fc88 	bl	8008308 <GUI_ALLOC_LockH>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	a802      	add	r0, sp, #8
 800c9fc:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ca00:	8914      	ldrh	r4, [r2, #8]
 800ca02:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800ca06:	802b      	strh	r3, [r5, #0]
 800ca08:	441c      	add	r4, r3
 800ca0a:	8953      	ldrh	r3, [r2, #10]
 800ca0c:	f840 2d04 	str.w	r2, [r0, #-4]!
 800ca10:	440b      	add	r3, r1
 800ca12:	3b01      	subs	r3, #1
 800ca14:	3c01      	subs	r4, #1
 800ca16:	8069      	strh	r1, [r5, #2]
 800ca18:	80ac      	strh	r4, [r5, #4]
 800ca1a:	80eb      	strh	r3, [r5, #6]
 800ca1c:	f7fb fc82 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ca20:	b003      	add	sp, #12
 800ca22:	bd30      	pop	{r4, r5, pc}

0800ca24 <_XY2PTR>:
 800ca24:	4b0e      	ldr	r3, [pc, #56]	; (800ca60 <_XY2PTR+0x3c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca2a:	4606      	mov	r6, r0
 800ca2c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ca2e:	460d      	mov	r5, r1
 800ca30:	f7fb fc6a 	bl	8008308 <GUI_ALLOC_LockH>
 800ca34:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800ca38:	68c4      	ldr	r4, [r0, #12]
 800ca3a:	1a69      	subs	r1, r5, r1
 800ca3c:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800ca40:	ab02      	add	r3, sp, #8
 800ca42:	1b76      	subs	r6, r6, r5
 800ca44:	00b6      	lsls	r6, r6, #2
 800ca46:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ca4a:	3618      	adds	r6, #24
 800ca4c:	fb04 6501 	mla	r5, r4, r1, r6
 800ca50:	1944      	adds	r4, r0, r5
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fb fc66 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ca58:	4620      	mov	r0, r4
 800ca5a:	b002      	add	sp, #8
 800ca5c:	bd70      	pop	{r4, r5, r6, pc}
 800ca5e:	bf00      	nop
 800ca60:	20000014 	.word	0x20000014

0800ca64 <_GetPixelIndex>:
 800ca64:	b508      	push	{r3, lr}
 800ca66:	4608      	mov	r0, r1
 800ca68:	4611      	mov	r1, r2
 800ca6a:	f7ff ffdb 	bl	800ca24 <_XY2PTR>
 800ca6e:	6800      	ldr	r0, [r0, #0]
 800ca70:	bd08      	pop	{r3, pc}
	...

0800ca74 <_XorPixel>:
 800ca74:	4b15      	ldr	r3, [pc, #84]	; (800cacc <_XorPixel+0x58>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca7a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800ca7c:	4616      	mov	r6, r2
 800ca7e:	460d      	mov	r5, r1
 800ca80:	f7fb fc42 	bl	8008308 <GUI_ALLOC_LockH>
 800ca84:	4631      	mov	r1, r6
 800ca86:	9000      	str	r0, [sp, #0]
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f7ff ffcb 	bl	800ca24 <_XY2PTR>
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	4604      	mov	r4, r0
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	4798      	blx	r3
 800ca9a:	6823      	ldr	r3, [r4, #0]
 800ca9c:	4058      	eors	r0, r3
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	6020      	str	r0, [r4, #0]
 800caa2:	6958      	ldr	r0, [r3, #20]
 800caa4:	b160      	cbz	r0, 800cac0 <_XorPixel+0x4c>
 800caa6:	f7fb fc2f 	bl	8008308 <GUI_ALLOC_LockH>
 800caaa:	ac02      	add	r4, sp, #8
 800caac:	6883      	ldr	r3, [r0, #8]
 800caae:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4632      	mov	r2, r6
 800cab6:	4629      	mov	r1, r5
 800cab8:	4798      	blx	r3
 800caba:	4620      	mov	r0, r4
 800cabc:	f7fb fc32 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cac0:	4668      	mov	r0, sp
 800cac2:	f7fb fc2f 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cac6:	b002      	add	sp, #8
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
 800caca:	bf00      	nop
 800cacc:	20000014 	.word	0x20000014

0800cad0 <_SetPixelIndex>:
 800cad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cad2:	461c      	mov	r4, r3
 800cad4:	4b10      	ldr	r3, [pc, #64]	; (800cb18 <_SetPixelIndex+0x48>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cada:	460d      	mov	r5, r1
 800cadc:	4616      	mov	r6, r2
 800cade:	f7fb fc13 	bl	8008308 <GUI_ALLOC_LockH>
 800cae2:	4631      	mov	r1, r6
 800cae4:	9000      	str	r0, [sp, #0]
 800cae6:	4628      	mov	r0, r5
 800cae8:	f7ff ff9c 	bl	800ca24 <_XY2PTR>
 800caec:	9b00      	ldr	r3, [sp, #0]
 800caee:	6004      	str	r4, [r0, #0]
 800caf0:	6958      	ldr	r0, [r3, #20]
 800caf2:	b160      	cbz	r0, 800cb0e <_SetPixelIndex+0x3e>
 800caf4:	f7fb fc08 	bl	8008308 <GUI_ALLOC_LockH>
 800caf8:	ac02      	add	r4, sp, #8
 800cafa:	6883      	ldr	r3, [r0, #8]
 800cafc:	f844 0d04 	str.w	r0, [r4, #-4]!
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4632      	mov	r2, r6
 800cb04:	4629      	mov	r1, r5
 800cb06:	4798      	blx	r3
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f7fb fc0b 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cb0e:	4668      	mov	r0, sp
 800cb10:	f7fb fc08 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cb14:	b002      	add	sp, #8
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	20000014 	.word	0x20000014

0800cb1c <_DrawVLine>:
 800cb1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb20:	4c2a      	ldr	r4, [pc, #168]	; (800cbcc <_DrawVLine+0xb0>)
 800cb22:	461e      	mov	r6, r3
 800cb24:	6823      	ldr	r3, [r4, #0]
 800cb26:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cb28:	4688      	mov	r8, r1
 800cb2a:	4615      	mov	r5, r2
 800cb2c:	f7fb fbec 	bl	8008308 <GUI_ALLOC_LockH>
 800cb30:	9000      	str	r0, [sp, #0]
 800cb32:	6940      	ldr	r0, [r0, #20]
 800cb34:	4627      	mov	r7, r4
 800cb36:	b108      	cbz	r0, 800cb3c <_DrawVLine+0x20>
 800cb38:	f7fb fbe6 	bl	8008308 <GUI_ALLOC_LockH>
 800cb3c:	9001      	str	r0, [sp, #4]
 800cb3e:	4629      	mov	r1, r5
 800cb40:	4640      	mov	r0, r8
 800cb42:	f7ff ff6f 	bl	800ca24 <_XY2PTR>
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	9a00      	ldr	r2, [sp, #0]
 800cb4a:	7c19      	ldrb	r1, [r3, #16]
 800cb4c:	07c9      	lsls	r1, r1, #31
 800cb4e:	4604      	mov	r4, r0
 800cb50:	d51d      	bpl.n	800cb8e <_DrawVLine+0x72>
 800cb52:	6813      	ldr	r3, [r2, #0]
 800cb54:	691b      	ldr	r3, [r3, #16]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	4798      	blx	r3
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	9801      	ldr	r0, [sp, #4]
 800cb5e:	b120      	cbz	r0, 800cb6a <_DrawVLine+0x4e>
 800cb60:	6883      	ldr	r3, [r0, #8]
 800cb62:	462a      	mov	r2, r5
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4641      	mov	r1, r8
 800cb68:	4798      	blx	r3
 800cb6a:	6823      	ldr	r3, [r4, #0]
 800cb6c:	407b      	eors	r3, r7
 800cb6e:	6023      	str	r3, [r4, #0]
 800cb70:	9b00      	ldr	r3, [sp, #0]
 800cb72:	3501      	adds	r5, #1
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	42b5      	cmp	r5, r6
 800cb78:	441c      	add	r4, r3
 800cb7a:	ddef      	ble.n	800cb5c <_DrawVLine+0x40>
 800cb7c:	4668      	mov	r0, sp
 800cb7e:	f7fb fbd1 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cb82:	9b01      	ldr	r3, [sp, #4]
 800cb84:	b1f3      	cbz	r3, 800cbc4 <_DrawVLine+0xa8>
 800cb86:	a801      	add	r0, sp, #4
 800cb88:	f7fb fbcc 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cb8c:	e01a      	b.n	800cbc4 <_DrawVLine+0xa8>
 800cb8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb90:	68d7      	ldr	r7, [r2, #12]
 800cb92:	f8d3 9000 	ldr.w	r9, [r3]
 800cb96:	9b01      	ldr	r3, [sp, #4]
 800cb98:	b163      	cbz	r3, 800cbb4 <_DrawVLine+0x98>
 800cb9a:	9801      	ldr	r0, [sp, #4]
 800cb9c:	6883      	ldr	r3, [r0, #8]
 800cb9e:	462a      	mov	r2, r5
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4641      	mov	r1, r8
 800cba4:	3501      	adds	r5, #1
 800cba6:	4798      	blx	r3
 800cba8:	42ae      	cmp	r6, r5
 800cbaa:	f8c4 9000 	str.w	r9, [r4]
 800cbae:	443c      	add	r4, r7
 800cbb0:	daf3      	bge.n	800cb9a <_DrawVLine+0x7e>
 800cbb2:	e7e3      	b.n	800cb7c <_DrawVLine+0x60>
 800cbb4:	1b75      	subs	r5, r6, r5
 800cbb6:	3501      	adds	r5, #1
 800cbb8:	3d01      	subs	r5, #1
 800cbba:	f8c4 9000 	str.w	r9, [r4]
 800cbbe:	443c      	add	r4, r7
 800cbc0:	d1fa      	bne.n	800cbb8 <_DrawVLine+0x9c>
 800cbc2:	e7db      	b.n	800cb7c <_DrawVLine+0x60>
 800cbc4:	b003      	add	sp, #12
 800cbc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000014 	.word	0x20000014

0800cbd0 <_FillRect>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	4e2a      	ldr	r6, [pc, #168]	; (800cc80 <_FillRect+0xb0>)
 800cbd6:	461c      	mov	r4, r3
 800cbd8:	6833      	ldr	r3, [r6, #0]
 800cbda:	b085      	sub	sp, #20
 800cbdc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cbde:	4689      	mov	r9, r1
 800cbe0:	4615      	mov	r5, r2
 800cbe2:	f7fb fb91 	bl	8008308 <GUI_ALLOC_LockH>
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	9002      	str	r0, [sp, #8]
 800cbea:	4648      	mov	r0, r9
 800cbec:	f7ff ff1a 	bl	800ca24 <_XY2PTR>
 800cbf0:	9b02      	ldr	r3, [sp, #8]
 800cbf2:	6832      	ldr	r2, [r6, #0]
 800cbf4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800cbf8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	6958      	ldr	r0, [r3, #20]
 800cbfe:	f8d2 b000 	ldr.w	fp, [r2]
 800cc02:	ebc9 0404 	rsb	r4, r9, r4
 800cc06:	3401      	adds	r4, #1
 800cc08:	b330      	cbz	r0, 800cc58 <_FillRect+0x88>
 800cc0a:	f7fb fb7d 	bl	8008308 <GUI_ALLOC_LockH>
 800cc0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc10:	f10d 0810 	add.w	r8, sp, #16
 800cc14:	1b5b      	subs	r3, r3, r5
 800cc16:	f848 0d04 	str.w	r0, [r8, #-4]!
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	462a      	mov	r2, r5
 800cc20:	4623      	mov	r3, r4
 800cc22:	4649      	mov	r1, r9
 800cc24:	f000 fbdb 	bl	800d3de <GUI_USAGE_AddRect>
 800cc28:	4640      	mov	r0, r8
 800cc2a:	f7fb fb7b 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cc2e:	e013      	b.n	800cc58 <_FillRect+0x88>
 800cc30:	6833      	ldr	r3, [r6, #0]
 800cc32:	7c1b      	ldrb	r3, [r3, #16]
 800cc34:	07db      	lsls	r3, r3, #31
 800cc36:	d513      	bpl.n	800cc60 <_FillRect+0x90>
 800cc38:	9b02      	ldr	r3, [sp, #8]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	4798      	blx	r3
 800cc42:	463a      	mov	r2, r7
 800cc44:	4623      	mov	r3, r4
 800cc46:	6811      	ldr	r1, [r2, #0]
 800cc48:	3b01      	subs	r3, #1
 800cc4a:	ea81 0100 	eor.w	r1, r1, r0
 800cc4e:	f842 1b04 	str.w	r1, [r2], #4
 800cc52:	d1f8      	bne.n	800cc46 <_FillRect+0x76>
 800cc54:	4457      	add	r7, sl
 800cc56:	3501      	adds	r5, #1
 800cc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc5a:	429d      	cmp	r5, r3
 800cc5c:	dde8      	ble.n	800cc30 <_FillRect+0x60>
 800cc5e:	e008      	b.n	800cc72 <_FillRect+0xa2>
 800cc60:	2c00      	cmp	r4, #0
 800cc62:	ddf7      	ble.n	800cc54 <_FillRect+0x84>
 800cc64:	4623      	mov	r3, r4
 800cc66:	463a      	mov	r2, r7
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	f842 bb04 	str.w	fp, [r2], #4
 800cc6e:	d1fb      	bne.n	800cc68 <_FillRect+0x98>
 800cc70:	e7f0      	b.n	800cc54 <_FillRect+0x84>
 800cc72:	a802      	add	r0, sp, #8
 800cc74:	f7fb fb56 	bl	8008324 <GUI_ALLOC_UnlockH>
 800cc78:	b005      	add	sp, #20
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000014 	.word	0x20000014

0800cc84 <_DrawHLine>:
 800cc84:	b507      	push	{r0, r1, r2, lr}
 800cc86:	9200      	str	r2, [sp, #0]
 800cc88:	f7ff ffa2 	bl	800cbd0 <_FillRect>
 800cc8c:	b003      	add	sp, #12
 800cc8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cc94 <_DrawBitmap>:
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	4da8      	ldr	r5, [pc, #672]	; (800cf3c <_DrawBitmap+0x2a8>)
 800cc9a:	b091      	sub	sp, #68	; 0x44
 800cc9c:	460e      	mov	r6, r1
 800cc9e:	9302      	str	r3, [sp, #8]
 800cca0:	682b      	ldr	r3, [r5, #0]
 800cca2:	9005      	str	r0, [sp, #20]
 800cca4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cca6:	9206      	str	r2, [sp, #24]
 800cca8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800ccaa:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	f000 8379 	beq.w	800d3a6 <_DrawBitmap+0x712>
 800ccb4:	f7fb fb28 	bl	8008308 <GUI_ALLOC_LockH>
 800ccb8:	900e      	str	r0, [sp, #56]	; 0x38
 800ccba:	6940      	ldr	r0, [r0, #20]
 800ccbc:	b108      	cbz	r0, 800ccc2 <_DrawBitmap+0x2e>
 800ccbe:	f7fb fb23 	bl	8008308 <GUI_ALLOC_LockH>
 800ccc2:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccc4:	a810      	add	r0, sp, #64	; 0x40
 800ccc6:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	9308      	str	r3, [sp, #32]
 800ccce:	f7fb fb29 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ccd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ccd4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ccd6:	18f3      	adds	r3, r6, r3
 800ccd8:	9303      	str	r3, [sp, #12]
 800ccda:	b150      	cbz	r0, 800ccf2 <_DrawBitmap+0x5e>
 800ccdc:	682b      	ldr	r3, [r5, #0]
 800ccde:	7c1b      	ldrb	r3, [r3, #16]
 800cce0:	079d      	lsls	r5, r3, #30
 800cce2:	d406      	bmi.n	800ccf2 <_DrawBitmap+0x5e>
 800cce4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cce6:	9300      	str	r3, [sp, #0]
 800cce8:	9a06      	ldr	r2, [sp, #24]
 800ccea:	9b02      	ldr	r3, [sp, #8]
 800ccec:	9903      	ldr	r1, [sp, #12]
 800ccee:	f000 fb76 	bl	800d3de <GUI_USAGE_AddRect>
 800ccf2:	9906      	ldr	r1, [sp, #24]
 800ccf4:	9803      	ldr	r0, [sp, #12]
 800ccf6:	f7ff fe95 	bl	800ca24 <_XY2PTR>
 800ccfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccfc:	2b17      	cmp	r3, #23
 800ccfe:	4605      	mov	r5, r0
 800cd00:	dd68      	ble.n	800cdd4 <_DrawBitmap+0x140>
 800cd02:	9b02      	ldr	r3, [sp, #8]
 800cd04:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800cf44 <_DrawBitmap+0x2b0>
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	9307      	str	r3, [sp, #28]
 800cd0c:	f04f 0b00 	mov.w	fp, #0
 800cd10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cd12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cd14:	459b      	cmp	fp, r3
 800cd16:	da59      	bge.n	800cdcc <_DrawBitmap+0x138>
 800cd18:	b130      	cbz	r0, 800cd28 <_DrawBitmap+0x94>
 800cd1a:	6883      	ldr	r3, [r0, #8]
 800cd1c:	9a06      	ldr	r2, [sp, #24]
 800cd1e:	685e      	ldr	r6, [r3, #4]
 800cd20:	9903      	ldr	r1, [sp, #12]
 800cd22:	9b02      	ldr	r3, [sp, #8]
 800cd24:	445a      	add	r2, fp
 800cd26:	47b0      	blx	r6
 800cd28:	9b05      	ldr	r3, [sp, #20]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	68d8      	ldr	r0, [r3, #12]
 800cd2e:	b130      	cbz	r0, 800cd3e <_DrawBitmap+0xaa>
 800cd30:	f8d9 3000 	ldr.w	r3, [r9]
 800cd34:	9a07      	ldr	r2, [sp, #28]
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	4798      	blx	r3
 800cd3c:	e03f      	b.n	800cdbe <_DrawBitmap+0x12a>
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	4798      	blx	r3
 800cd42:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cd46:	0e03      	lsrs	r3, r0, #24
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	462f      	mov	r7, r5
 800cd4c:	4626      	mov	r6, r4
 800cd4e:	4642      	mov	r2, r8
 800cd50:	4631      	mov	r1, r6
 800cd52:	f04f 0a00 	mov.w	sl, #0
 800cd56:	f851 3b04 	ldr.w	r3, [r1], #4
 800cd5a:	9804      	ldr	r0, [sp, #16]
 800cd5c:	0e1b      	lsrs	r3, r3, #24
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	9804      	ldr	r0, [sp, #16]
 800cd62:	bf08      	it	eq
 800cd64:	f10a 0a01 	addeq.w	sl, sl, #1
 800cd68:	4298      	cmp	r0, r3
 800cd6a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800cd6e:	d011      	beq.n	800cd94 <_DrawBitmap+0x100>
 800cd70:	f1ba 0f00 	cmp.w	sl, #0
 800cd74:	d011      	beq.n	800cd9a <_DrawBitmap+0x106>
 800cd76:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4638      	mov	r0, r7
 800cd82:	f8d9 3000 	ldr.w	r3, [r9]
 800cd86:	4798      	blx	r3
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	ebca 0808 	rsb	r8, sl, r8
 800cd8e:	441f      	add	r7, r3
 800cd90:	441e      	add	r6, r3
 800cd92:	e011      	b.n	800cdb8 <_DrawBitmap+0x124>
 800cd94:	2a00      	cmp	r2, #0
 800cd96:	d1de      	bne.n	800cd56 <_DrawBitmap+0xc2>
 800cd98:	e7ea      	b.n	800cd70 <_DrawBitmap+0xdc>
 800cd9a:	6830      	ldr	r0, [r6, #0]
 800cd9c:	0e02      	lsrs	r2, r0, #24
 800cd9e:	2aff      	cmp	r2, #255	; 0xff
 800cda0:	d006      	beq.n	800cdb0 <_DrawBitmap+0x11c>
 800cda2:	4b67      	ldr	r3, [pc, #412]	; (800cf40 <_DrawBitmap+0x2ac>)
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	43d2      	mvns	r2, r2
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	4798      	blx	r3
 800cdae:	6038      	str	r0, [r7, #0]
 800cdb0:	3704      	adds	r7, #4
 800cdb2:	3604      	adds	r6, #4
 800cdb4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cdb8:	f1b8 0f00 	cmp.w	r8, #0
 800cdbc:	d1c7      	bne.n	800cd4e <_DrawBitmap+0xba>
 800cdbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cdc0:	441c      	add	r4, r3
 800cdc2:	9b08      	ldr	r3, [sp, #32]
 800cdc4:	f10b 0b01 	add.w	fp, fp, #1
 800cdc8:	441d      	add	r5, r3
 800cdca:	e7a1      	b.n	800cd10 <_DrawBitmap+0x7c>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f040 82e7 	bne.w	800d3a0 <_DrawBitmap+0x70c>
 800cdd2:	e2e8      	b.n	800d3a6 <_DrawBitmap+0x712>
 800cdd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdd6:	2b10      	cmp	r3, #16
 800cdd8:	d137      	bne.n	800ce4a <_DrawBitmap+0x1b6>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	9a03      	ldr	r2, [sp, #12]
 800cdde:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 800cde2:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 800cde6:	9b02      	ldr	r3, [sp, #8]
 800cde8:	f04f 0800 	mov.w	r8, #0
 800cdec:	eb03 0a02 	add.w	sl, r3, r2
 800cdf0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cdf2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800cdf4:	4598      	cmp	r8, r3
 800cdf6:	da24      	bge.n	800ce42 <_DrawBitmap+0x1ae>
 800cdf8:	9b06      	ldr	r3, [sp, #24]
 800cdfa:	eb03 0908 	add.w	r9, r3, r8
 800cdfe:	b136      	cbz	r6, 800ce0e <_DrawBitmap+0x17a>
 800ce00:	68b3      	ldr	r3, [r6, #8]
 800ce02:	9903      	ldr	r1, [sp, #12]
 800ce04:	685f      	ldr	r7, [r3, #4]
 800ce06:	9b02      	ldr	r3, [sp, #8]
 800ce08:	464a      	mov	r2, r9
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	47b8      	blx	r7
 800ce0e:	9f03      	ldr	r7, [sp, #12]
 800ce10:	9b05      	ldr	r3, [sp, #20]
 800ce12:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	4798      	blx	r3
 800ce1c:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 800ce20:	b12e      	cbz	r6, 800ce2e <_DrawBitmap+0x19a>
 800ce22:	68b3      	ldr	r3, [r6, #8]
 800ce24:	464a      	mov	r2, r9
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4639      	mov	r1, r7
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4798      	blx	r3
 800ce2e:	3701      	adds	r7, #1
 800ce30:	4557      	cmp	r7, sl
 800ce32:	d1ed      	bne.n	800ce10 <_DrawBitmap+0x17c>
 800ce34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ce36:	441c      	add	r4, r3
 800ce38:	9b08      	ldr	r3, [sp, #32]
 800ce3a:	f108 0801 	add.w	r8, r8, #1
 800ce3e:	441d      	add	r5, r3
 800ce40:	e7d6      	b.n	800cdf0 <_DrawBitmap+0x15c>
 800ce42:	2e00      	cmp	r6, #0
 800ce44:	f040 82ac 	bne.w	800d3a0 <_DrawBitmap+0x70c>
 800ce48:	e2ad      	b.n	800d3a6 <_DrawBitmap+0x712>
 800ce4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce4c:	2b08      	cmp	r3, #8
 800ce4e:	f040 8081 	bne.w	800cf54 <_DrawBitmap+0x2c0>
 800ce52:	9a03      	ldr	r2, [sp, #12]
 800ce54:	9e06      	ldr	r6, [sp, #24]
 800ce56:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800cf3c <_DrawBitmap+0x2a8>
 800ce5a:	f06f 0303 	mvn.w	r3, #3
 800ce5e:	4353      	muls	r3, r2
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	9b02      	ldr	r3, [sp, #8]
 800ce64:	4413      	add	r3, r2
 800ce66:	9305      	str	r3, [sp, #20]
 800ce68:	9b06      	ldr	r3, [sp, #24]
 800ce6a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ce6c:	1af3      	subs	r3, r6, r3
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	f340 8294 	ble.w	800d39c <_DrawBitmap+0x708>
 800ce74:	f8d9 3000 	ldr.w	r3, [r9]
 800ce78:	7c1b      	ldrb	r3, [r3, #16]
 800ce7a:	f1bb 0f00 	cmp.w	fp, #0
 800ce7e:	d032      	beq.n	800cee6 <_DrawBitmap+0x252>
 800ce80:	f013 0303 	ands.w	r3, r3, #3
 800ce84:	d00a      	beq.n	800ce9c <_DrawBitmap+0x208>
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d15e      	bne.n	800cf48 <_DrawBitmap+0x2b4>
 800ce8a:	9b04      	ldr	r3, [sp, #16]
 800ce8c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800ce90:	9f03      	ldr	r7, [sp, #12]
 800ce92:	18eb      	adds	r3, r5, r3
 800ce94:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800ce98:	9307      	str	r3, [sp, #28]
 800ce9a:	e01f      	b.n	800cedc <_DrawBitmap+0x248>
 800ce9c:	9a02      	ldr	r2, [sp, #8]
 800ce9e:	4623      	mov	r3, r4
 800cea0:	18a1      	adds	r1, r4, r2
 800cea2:	462a      	mov	r2, r5
 800cea4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cea8:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800ceac:	f842 0b04 	str.w	r0, [r2], #4
 800ceb0:	428b      	cmp	r3, r1
 800ceb2:	d1f7      	bne.n	800cea4 <_DrawBitmap+0x210>
 800ceb4:	e048      	b.n	800cf48 <_DrawBitmap+0x2b4>
 800ceb6:	9a07      	ldr	r2, [sp, #28]
 800ceb8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cebc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800cec0:	f1b8 0f00 	cmp.w	r8, #0
 800cec4:	d006      	beq.n	800ced4 <_DrawBitmap+0x240>
 800cec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceca:	4632      	mov	r2, r6
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4639      	mov	r1, r7
 800ced0:	4640      	mov	r0, r8
 800ced2:	4798      	blx	r3
 800ced4:	9b05      	ldr	r3, [sp, #20]
 800ced6:	3701      	adds	r7, #1
 800ced8:	42bb      	cmp	r3, r7
 800ceda:	d035      	beq.n	800cf48 <_DrawBitmap+0x2b4>
 800cedc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d0f7      	beq.n	800ced4 <_DrawBitmap+0x240>
 800cee4:	e7e7      	b.n	800ceb6 <_DrawBitmap+0x222>
 800cee6:	f013 0303 	ands.w	r3, r3, #3
 800ceea:	d00a      	beq.n	800cf02 <_DrawBitmap+0x26e>
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d12b      	bne.n	800cf48 <_DrawBitmap+0x2b4>
 800cef0:	9b04      	ldr	r3, [sp, #16]
 800cef2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800cef6:	9f03      	ldr	r7, [sp, #12]
 800cef8:	18eb      	adds	r3, r5, r3
 800cefa:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800cefe:	9307      	str	r3, [sp, #28]
 800cf00:	e017      	b.n	800cf32 <_DrawBitmap+0x29e>
 800cf02:	4b10      	ldr	r3, [pc, #64]	; (800cf44 <_DrawBitmap+0x2b0>)
 800cf04:	9a02      	ldr	r2, [sp, #8]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4621      	mov	r1, r4
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	4798      	blx	r3
 800cf0e:	e01b      	b.n	800cf48 <_DrawBitmap+0x2b4>
 800cf10:	9a07      	ldr	r2, [sp, #28]
 800cf12:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800cf16:	f1b8 0f00 	cmp.w	r8, #0
 800cf1a:	d006      	beq.n	800cf2a <_DrawBitmap+0x296>
 800cf1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf20:	4632      	mov	r2, r6
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4639      	mov	r1, r7
 800cf26:	4640      	mov	r0, r8
 800cf28:	4798      	blx	r3
 800cf2a:	9b05      	ldr	r3, [sp, #20]
 800cf2c:	3701      	adds	r7, #1
 800cf2e:	42bb      	cmp	r3, r7
 800cf30:	d00a      	beq.n	800cf48 <_DrawBitmap+0x2b4>
 800cf32:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0f7      	beq.n	800cf2a <_DrawBitmap+0x296>
 800cf3a:	e7e9      	b.n	800cf10 <_DrawBitmap+0x27c>
 800cf3c:	20000014 	.word	0x20000014
 800cf40:	20000034 	.word	0x20000034
 800cf44:	2000003c 	.word	0x2000003c
 800cf48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cf4a:	441c      	add	r4, r3
 800cf4c:	9b08      	ldr	r3, [sp, #32]
 800cf4e:	3601      	adds	r6, #1
 800cf50:	441d      	add	r5, r3
 800cf52:	e789      	b.n	800ce68 <_DrawBitmap+0x1d4>
 800cf54:	4bb0      	ldr	r3, [pc, #704]	; (800d218 <_DrawBitmap+0x584>)
 800cf56:	f1bb 0f00 	cmp.w	fp, #0
 800cf5a:	bf08      	it	eq
 800cf5c:	469b      	moveq	fp, r3
 800cf5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	930a      	str	r3, [sp, #40]	; 0x28
 800cf64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf6a:	1c63      	adds	r3, r4, #1
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	1d03      	adds	r3, r0, #4
 800cf70:	9307      	str	r3, [sp, #28]
 800cf72:	9b06      	ldr	r3, [sp, #24]
 800cf74:	9305      	str	r3, [sp, #20]
 800cf76:	9b07      	ldr	r3, [sp, #28]
 800cf78:	9a06      	ldr	r2, [sp, #24]
 800cf7a:	1f1c      	subs	r4, r3, #4
 800cf7c:	9b04      	ldr	r3, [sp, #16]
 800cf7e:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800cf82:	9b05      	ldr	r3, [sp, #20]
 800cf84:	1a9b      	subs	r3, r3, r2
 800cf86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	f340 8207 	ble.w	800d39c <_DrawBitmap+0x708>
 800cf8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	f000 8098 	beq.w	800d0c6 <_DrawBitmap+0x432>
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	f000 812b 	beq.w	800d1f2 <_DrawBitmap+0x55e>
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	f040 81f1 	bne.w	800d384 <_DrawBitmap+0x6f0>
 800cfa2:	4b9e      	ldr	r3, [pc, #632]	; (800d21c <_DrawBitmap+0x588>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800cfa8:	f7fb f9ae 	bl	8008308 <GUI_ALLOC_LockH>
 800cfac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cfae:	4a9c      	ldr	r2, [pc, #624]	; (800d220 <_DrawBitmap+0x58c>)
 800cfb0:	900e      	str	r0, [sp, #56]	; 0x38
 800cfb2:	f1c3 0508 	rsb	r5, r3, #8
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	9f02      	ldr	r7, [sp, #8]
 800cfba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cfbe:	5cd6      	ldrb	r6, [r2, r3]
 800cfc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cfc2:	411e      	asrs	r6, r3
 800cfc4:	4b95      	ldr	r3, [pc, #596]	; (800d21c <_DrawBitmap+0x588>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	7c1b      	ldrb	r3, [r3, #16]
 800cfca:	f003 0303 	and.w	r3, r3, #3
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d01d      	beq.n	800d00e <_DrawBitmap+0x37a>
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d055      	beq.n	800d082 <_DrawBitmap+0x3ee>
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d053      	beq.n	800d082 <_DrawBitmap+0x3ee>
 800cfda:	42bd      	cmp	r5, r7
 800cfdc:	bf28      	it	cs
 800cfde:	463d      	movcs	r5, r7
 800cfe0:	1b7f      	subs	r7, r7, r5
 800cfe2:	462b      	mov	r3, r5
 800cfe4:	4622      	mov	r2, r4
 800cfe6:	f006 0101 	and.w	r1, r6, #1
 800cfea:	3b01      	subs	r3, #1
 800cfec:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800cff0:	f842 1b04 	str.w	r1, [r2], #4
 800cff4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cff8:	d1f5      	bne.n	800cfe6 <_DrawBitmap+0x352>
 800cffa:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800cffe:	2f00      	cmp	r7, #0
 800d000:	d05d      	beq.n	800d0be <_DrawBitmap+0x42a>
 800d002:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800d006:	4a86      	ldr	r2, [pc, #536]	; (800d220 <_DrawBitmap+0x58c>)
 800d008:	2508      	movs	r5, #8
 800d00a:	5cd6      	ldrb	r6, [r2, r3]
 800d00c:	e7e5      	b.n	800cfda <_DrawBitmap+0x346>
 800d00e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d012:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800d016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d01a:	9309      	str	r3, [sp, #36]	; 0x24
 800d01c:	42bd      	cmp	r5, r7
 800d01e:	bf28      	it	cs
 800d020:	463d      	movcs	r5, r7
 800d022:	1b7f      	subs	r7, r7, r5
 800d024:	f1b9 0f00 	cmp.w	r9, #0
 800d028:	d020      	beq.n	800d06c <_DrawBitmap+0x3d8>
 800d02a:	b91e      	cbnz	r6, 800d034 <_DrawBitmap+0x3a0>
 800d02c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d030:	44a8      	add	r8, r5
 800d032:	e01f      	b.n	800d074 <_DrawBitmap+0x3e0>
 800d034:	07f0      	lsls	r0, r6, #31
 800d036:	d508      	bpl.n	800d04a <_DrawBitmap+0x3b6>
 800d038:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d03c:	9a05      	ldr	r2, [sp, #20]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4641      	mov	r1, r8
 800d042:	4648      	mov	r0, r9
 800d044:	4798      	blx	r3
 800d046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	3d01      	subs	r5, #1
 800d04c:	f108 0801 	add.w	r8, r8, #1
 800d050:	f104 0404 	add.w	r4, r4, #4
 800d054:	d00e      	beq.n	800d074 <_DrawBitmap+0x3e0>
 800d056:	0876      	lsrs	r6, r6, #1
 800d058:	e7e7      	b.n	800d02a <_DrawBitmap+0x396>
 800d05a:	07f1      	lsls	r1, r6, #31
 800d05c:	bf44      	itt	mi
 800d05e:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 800d060:	6023      	strmi	r3, [r4, #0]
 800d062:	3d01      	subs	r5, #1
 800d064:	f104 0404 	add.w	r4, r4, #4
 800d068:	d004      	beq.n	800d074 <_DrawBitmap+0x3e0>
 800d06a:	0876      	lsrs	r6, r6, #1
 800d06c:	2e00      	cmp	r6, #0
 800d06e:	d1f4      	bne.n	800d05a <_DrawBitmap+0x3c6>
 800d070:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d074:	b31f      	cbz	r7, 800d0be <_DrawBitmap+0x42a>
 800d076:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800d07a:	4a69      	ldr	r2, [pc, #420]	; (800d220 <_DrawBitmap+0x58c>)
 800d07c:	2508      	movs	r5, #8
 800d07e:	5cd6      	ldrb	r6, [r2, r3]
 800d080:	e7cc      	b.n	800d01c <_DrawBitmap+0x388>
 800d082:	6803      	ldr	r3, [r0, #0]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	4798      	blx	r3
 800d08a:	42bd      	cmp	r5, r7
 800d08c:	bf28      	it	cs
 800d08e:	463d      	movcs	r5, r7
 800d090:	1b7f      	subs	r7, r7, r5
 800d092:	4629      	mov	r1, r5
 800d094:	4623      	mov	r3, r4
 800d096:	07f2      	lsls	r2, r6, #31
 800d098:	bf42      	ittt	mi
 800d09a:	681a      	ldrmi	r2, [r3, #0]
 800d09c:	4042      	eormi	r2, r0
 800d09e:	601a      	strmi	r2, [r3, #0]
 800d0a0:	3901      	subs	r1, #1
 800d0a2:	f103 0304 	add.w	r3, r3, #4
 800d0a6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0aa:	d1f4      	bne.n	800d096 <_DrawBitmap+0x402>
 800d0ac:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d0b0:	b12f      	cbz	r7, 800d0be <_DrawBitmap+0x42a>
 800d0b2:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800d0b6:	4a5a      	ldr	r2, [pc, #360]	; (800d220 <_DrawBitmap+0x58c>)
 800d0b8:	2508      	movs	r5, #8
 800d0ba:	5cd6      	ldrb	r6, [r2, r3]
 800d0bc:	e7e5      	b.n	800d08a <_DrawBitmap+0x3f6>
 800d0be:	a80e      	add	r0, sp, #56	; 0x38
 800d0c0:	f7fb f930 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d0c4:	e15e      	b.n	800d384 <_DrawBitmap+0x6f0>
 800d0c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d0c8:	f1c3 0504 	rsb	r5, r3, #4
 800d0cc:	9b04      	ldr	r3, [sp, #16]
 800d0ce:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800d0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d4:	409e      	lsls	r6, r3
 800d0d6:	4b51      	ldr	r3, [pc, #324]	; (800d21c <_DrawBitmap+0x588>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	7c1b      	ldrb	r3, [r3, #16]
 800d0dc:	f003 0303 	and.w	r3, r3, #3
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	b2ed      	uxtb	r5, r5
 800d0e4:	b2f6      	uxtb	r6, r6
 800d0e6:	d009      	beq.n	800d0fc <_DrawBitmap+0x468>
 800d0e8:	d30a      	bcc.n	800d100 <_DrawBitmap+0x46c>
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	f040 814a 	bne.w	800d384 <_DrawBitmap+0x6f0>
 800d0f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0f4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d0f8:	9f03      	ldr	r7, [sp, #12]
 800d0fa:	e035      	b.n	800d168 <_DrawBitmap+0x4d4>
 800d0fc:	9b02      	ldr	r3, [sp, #8]
 800d0fe:	e071      	b.n	800d1e4 <_DrawBitmap+0x550>
 800d100:	9b02      	ldr	r3, [sp, #8]
 800d102:	429d      	cmp	r5, r3
 800d104:	bfc8      	it	gt
 800d106:	b2dd      	uxtbgt	r5, r3
 800d108:	1b5b      	subs	r3, r3, r5
 800d10a:	462a      	mov	r2, r5
 800d10c:	4621      	mov	r1, r4
 800d10e:	09b0      	lsrs	r0, r6, #6
 800d110:	3a01      	subs	r2, #1
 800d112:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800d116:	f841 0b04 	str.w	r0, [r1], #4
 800d11a:	00b6      	lsls	r6, r6, #2
 800d11c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800d120:	b2f6      	uxtb	r6, r6
 800d122:	d1f4      	bne.n	800d10e <_DrawBitmap+0x47a>
 800d124:	3d01      	subs	r5, #1
 800d126:	b2ed      	uxtb	r5, r5
 800d128:	3501      	adds	r5, #1
 800d12a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 8128 	beq.w	800d384 <_DrawBitmap+0x6f0>
 800d134:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800d138:	2504      	movs	r5, #4
 800d13a:	e7e2      	b.n	800d102 <_DrawBitmap+0x46e>
 800d13c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800d140:	d124      	bne.n	800d18c <_DrawBitmap+0x4f8>
 800d142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d144:	f109 0901 	add.w	r9, r9, #1
 800d148:	00b6      	lsls	r6, r6, #2
 800d14a:	4599      	cmp	r9, r3
 800d14c:	b2f6      	uxtb	r6, r6
 800d14e:	d1f5      	bne.n	800d13c <_DrawBitmap+0x4a8>
 800d150:	1c6b      	adds	r3, r5, #1
 800d152:	3701      	adds	r7, #1
 800d154:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d158:	442f      	add	r7, r5
 800d15a:	f1b8 0f00 	cmp.w	r8, #0
 800d15e:	f000 8111 	beq.w	800d384 <_DrawBitmap+0x6f0>
 800d162:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800d166:	2504      	movs	r5, #4
 800d168:	4545      	cmp	r5, r8
 800d16a:	bfc8      	it	gt
 800d16c:	fa5f f588 	uxtbgt.w	r5, r8
 800d170:	ebc5 0808 	rsb	r8, r5, r8
 800d174:	3d01      	subs	r5, #1
 800d176:	b2ed      	uxtb	r5, r5
 800d178:	1c7b      	adds	r3, r7, #1
 800d17a:	442b      	add	r3, r5
 800d17c:	930d      	str	r3, [sp, #52]	; 0x34
 800d17e:	f06f 0303 	mvn.w	r3, #3
 800d182:	fb03 4307 	mla	r3, r3, r7, r4
 800d186:	930c      	str	r3, [sp, #48]	; 0x30
 800d188:	46b9      	mov	r9, r7
 800d18a:	e7d7      	b.n	800d13c <_DrawBitmap+0x4a8>
 800d18c:	09b3      	lsrs	r3, r6, #6
 800d18e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d190:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800d194:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 800d198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0d1      	beq.n	800d142 <_DrawBitmap+0x4ae>
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	9a05      	ldr	r2, [sp, #20]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	4798      	blx	r3
 800d1aa:	e7ca      	b.n	800d142 <_DrawBitmap+0x4ae>
 800d1ac:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800d1b0:	bf18      	it	ne
 800d1b2:	6801      	ldrne	r1, [r0, #0]
 800d1b4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d1b8:	bf1c      	itt	ne
 800d1ba:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 800d1be:	6001      	strne	r1, [r0, #0]
 800d1c0:	00b6      	lsls	r6, r6, #2
 800d1c2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800d1c6:	f100 0004 	add.w	r0, r0, #4
 800d1ca:	b2f6      	uxtb	r6, r6
 800d1cc:	d1ee      	bne.n	800d1ac <_DrawBitmap+0x518>
 800d1ce:	3d01      	subs	r5, #1
 800d1d0:	b2ed      	uxtb	r5, r5
 800d1d2:	3501      	adds	r5, #1
 800d1d4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 80d3 	beq.w	800d384 <_DrawBitmap+0x6f0>
 800d1de:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800d1e2:	2504      	movs	r5, #4
 800d1e4:	429d      	cmp	r5, r3
 800d1e6:	bfc8      	it	gt
 800d1e8:	b2dd      	uxtbgt	r5, r3
 800d1ea:	1b5b      	subs	r3, r3, r5
 800d1ec:	462a      	mov	r2, r5
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	e7dc      	b.n	800d1ac <_DrawBitmap+0x518>
 800d1f2:	9b04      	ldr	r3, [sp, #16]
 800d1f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d1fa:	4093      	lsls	r3, r2
 800d1fc:	4a07      	ldr	r2, [pc, #28]	; (800d21c <_DrawBitmap+0x588>)
 800d1fe:	6812      	ldr	r2, [r2, #0]
 800d200:	7c12      	ldrb	r2, [r2, #16]
 800d202:	f002 0203 	and.w	r2, r2, #3
 800d206:	2a01      	cmp	r2, #1
 800d208:	b2dd      	uxtb	r5, r3
 800d20a:	f000 8095 	beq.w	800d338 <_DrawBitmap+0x6a4>
 800d20e:	d309      	bcc.n	800d224 <_DrawBitmap+0x590>
 800d210:	2a02      	cmp	r2, #2
 800d212:	d039      	beq.n	800d288 <_DrawBitmap+0x5f4>
 800d214:	e0b6      	b.n	800d384 <_DrawBitmap+0x6f0>
 800d216:	bf00      	nop
 800d218:	08019240 	.word	0x08019240
 800d21c:	20000014 	.word	0x20000014
 800d220:	0801a9a4 	.word	0x0801a9a4
 800d224:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d226:	b153      	cbz	r3, 800d23e <_DrawBitmap+0x5aa>
 800d228:	092d      	lsrs	r5, r5, #4
 800d22a:	9a04      	ldr	r2, [sp, #16]
 800d22c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	9b02      	ldr	r3, [sp, #8]
 800d234:	9c07      	ldr	r4, [sp, #28]
 800d236:	7815      	ldrb	r5, [r2, #0]
 800d238:	3b01      	subs	r3, #1
 800d23a:	4692      	mov	sl, r2
 800d23c:	e000      	b.n	800d240 <_DrawBitmap+0x5ac>
 800d23e:	9b02      	ldr	r3, [sp, #8]
 800d240:	2b01      	cmp	r3, #1
 800d242:	dd19      	ble.n	800d278 <_DrawBitmap+0x5e4>
 800d244:	1058      	asrs	r0, r3, #1
 800d246:	f104 0208 	add.w	r2, r4, #8
 800d24a:	f003 0301 	and.w	r3, r3, #1
 800d24e:	eb0a 0600 	add.w	r6, sl, r0
 800d252:	0929      	lsrs	r1, r5, #4
 800d254:	f005 050f 	and.w	r5, r5, #15
 800d258:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800d25c:	f842 1c08 	str.w	r1, [r2, #-8]
 800d260:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800d264:	f842 1c04 	str.w	r1, [r2, #-4]
 800d268:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800d26c:	45b2      	cmp	sl, r6
 800d26e:	f102 0208 	add.w	r2, r2, #8
 800d272:	d1ee      	bne.n	800d252 <_DrawBitmap+0x5be>
 800d274:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 8083 	beq.w	800d384 <_DrawBitmap+0x6f0>
 800d27e:	092d      	lsrs	r5, r5, #4
 800d280:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	e07d      	b.n	800d384 <_DrawBitmap+0x6f0>
 800d288:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d28a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800d28c:	b1ba      	cbz	r2, 800d2be <_DrawBitmap+0x62a>
 800d28e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800d292:	d00a      	beq.n	800d2aa <_DrawBitmap+0x616>
 800d294:	092d      	lsrs	r5, r5, #4
 800d296:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	b12e      	cbz	r6, 800d2aa <_DrawBitmap+0x616>
 800d29e:	68b3      	ldr	r3, [r6, #8]
 800d2a0:	9a05      	ldr	r2, [sp, #20]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	9903      	ldr	r1, [sp, #12]
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	4798      	blx	r3
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	9c07      	ldr	r4, [sp, #28]
 800d2ae:	1c5f      	adds	r7, r3, #1
 800d2b0:	9b02      	ldr	r3, [sp, #8]
 800d2b2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800d2b6:	9b04      	ldr	r3, [sp, #16]
 800d2b8:	781d      	ldrb	r5, [r3, #0]
 800d2ba:	469a      	mov	sl, r3
 800d2bc:	e00f      	b.n	800d2de <_DrawBitmap+0x64a>
 800d2be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d2c2:	9f03      	ldr	r7, [sp, #12]
 800d2c4:	e00b      	b.n	800d2de <_DrawBitmap+0x64a>
 800d2c6:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800d2ca:	d10c      	bne.n	800d2e6 <_DrawBitmap+0x652>
 800d2cc:	f015 050f 	ands.w	r5, r5, #15
 800d2d0:	d116      	bne.n	800d300 <_DrawBitmap+0x66c>
 800d2d2:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800d2d6:	3408      	adds	r4, #8
 800d2d8:	3702      	adds	r7, #2
 800d2da:	f1a8 0802 	sub.w	r8, r8, #2
 800d2de:	f1b8 0f01 	cmp.w	r8, #1
 800d2e2:	dcf0      	bgt.n	800d2c6 <_DrawBitmap+0x632>
 800d2e4:	e018      	b.n	800d318 <_DrawBitmap+0x684>
 800d2e6:	092b      	lsrs	r3, r5, #4
 800d2e8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	2e00      	cmp	r6, #0
 800d2f0:	d0ec      	beq.n	800d2cc <_DrawBitmap+0x638>
 800d2f2:	68b3      	ldr	r3, [r6, #8]
 800d2f4:	9a05      	ldr	r2, [sp, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4639      	mov	r1, r7
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	4798      	blx	r3
 800d2fe:	e7e5      	b.n	800d2cc <_DrawBitmap+0x638>
 800d300:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800d304:	6063      	str	r3, [r4, #4]
 800d306:	2e00      	cmp	r6, #0
 800d308:	d0e3      	beq.n	800d2d2 <_DrawBitmap+0x63e>
 800d30a:	68b3      	ldr	r3, [r6, #8]
 800d30c:	9a05      	ldr	r2, [sp, #20]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	1c79      	adds	r1, r7, #1
 800d312:	4630      	mov	r0, r6
 800d314:	4798      	blx	r3
 800d316:	e7dc      	b.n	800d2d2 <_DrawBitmap+0x63e>
 800d318:	f1b8 0f00 	cmp.w	r8, #0
 800d31c:	d032      	beq.n	800d384 <_DrawBitmap+0x6f0>
 800d31e:	092d      	lsrs	r5, r5, #4
 800d320:	d030      	beq.n	800d384 <_DrawBitmap+0x6f0>
 800d322:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	b366      	cbz	r6, 800d384 <_DrawBitmap+0x6f0>
 800d32a:	68b3      	ldr	r3, [r6, #8]
 800d32c:	9a05      	ldr	r2, [sp, #20]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4639      	mov	r1, r7
 800d332:	4630      	mov	r0, r6
 800d334:	4798      	blx	r3
 800d336:	e025      	b.n	800d384 <_DrawBitmap+0x6f0>
 800d338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d33a:	9a02      	ldr	r2, [sp, #8]
 800d33c:	f1c3 0302 	rsb	r3, r3, #2
 800d340:	b2db      	uxtb	r3, r3
 800d342:	4293      	cmp	r3, r2
 800d344:	bfc8      	it	gt
 800d346:	b2d3      	uxtbgt	r3, r2
 800d348:	1ad2      	subs	r2, r2, r3
 800d34a:	4619      	mov	r1, r3
 800d34c:	4626      	mov	r6, r4
 800d34e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800d352:	bf18      	it	ne
 800d354:	6830      	ldrne	r0, [r6, #0]
 800d356:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800d35a:	bf1c      	itt	ne
 800d35c:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 800d360:	6030      	strne	r0, [r6, #0]
 800d362:	012d      	lsls	r5, r5, #4
 800d364:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d368:	f106 0604 	add.w	r6, r6, #4
 800d36c:	b2ed      	uxtb	r5, r5
 800d36e:	d1ee      	bne.n	800d34e <_DrawBitmap+0x6ba>
 800d370:	3b01      	subs	r3, #1
 800d372:	b2db      	uxtb	r3, r3
 800d374:	3301      	adds	r3, #1
 800d376:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d37a:	b11a      	cbz	r2, 800d384 <_DrawBitmap+0x6f0>
 800d37c:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800d380:	2302      	movs	r3, #2
 800d382:	e7de      	b.n	800d342 <_DrawBitmap+0x6ae>
 800d384:	9b05      	ldr	r3, [sp, #20]
 800d386:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d388:	3301      	adds	r3, #1
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	4413      	add	r3, r2
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	9a08      	ldr	r2, [sp, #32]
 800d394:	9b07      	ldr	r3, [sp, #28]
 800d396:	4413      	add	r3, r2
 800d398:	9307      	str	r3, [sp, #28]
 800d39a:	e5ec      	b.n	800cf76 <_DrawBitmap+0x2e2>
 800d39c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d39e:	b113      	cbz	r3, 800d3a6 <_DrawBitmap+0x712>
 800d3a0:	a80f      	add	r0, sp, #60	; 0x3c
 800d3a2:	f7fa ffbf 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d3a6:	b011      	add	sp, #68	; 0x44
 800d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3ac <GUI_USAGE_DecUseCnt>:
 800d3ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	f7fc fcd4 	bl	8009d5c <GUI_Lock>
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f7fa ffa7 	bl	8008308 <GUI_ALLOC_LockH>
 800d3ba:	ab02      	add	r3, sp, #8
 800d3bc:	8984      	ldrh	r4, [r0, #12]
 800d3be:	f843 0d04 	str.w	r0, [r3, #-4]!
 800d3c2:	3c01      	subs	r4, #1
 800d3c4:	b224      	sxth	r4, r4
 800d3c6:	8184      	strh	r4, [r0, #12]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fa ffab 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d3ce:	b914      	cbnz	r4, 800d3d6 <GUI_USAGE_DecUseCnt+0x2a>
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7fa ffd7 	bl	8008384 <GUI_ALLOC_Free>
 800d3d6:	f7fc fcb7 	bl	8009d48 <GUI_Unlock>
 800d3da:	b003      	add	sp, #12
 800d3dc:	bd30      	pop	{r4, r5, pc}

0800d3de <GUI_USAGE_AddRect>:
 800d3de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3e2:	9c08      	ldr	r4, [sp, #32]
 800d3e4:	4605      	mov	r5, r0
 800d3e6:	4688      	mov	r8, r1
 800d3e8:	4699      	mov	r9, r3
 800d3ea:	4414      	add	r4, r2
 800d3ec:	68ab      	ldr	r3, [r5, #8]
 800d3ee:	1c56      	adds	r6, r2, #1
 800d3f0:	685f      	ldr	r7, [r3, #4]
 800d3f2:	4641      	mov	r1, r8
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	47b8      	blx	r7
 800d3fa:	42b4      	cmp	r4, r6
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	d1f5      	bne.n	800d3ec <GUI_USAGE_AddRect+0xe>
 800d400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d404 <GUI_MEMDEV__WriteToActiveAlpha>:
 800d404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d408:	4c5c      	ldr	r4, [pc, #368]	; (800d57c <GUI_MEMDEV__WriteToActiveAlpha+0x178>)
 800d40a:	4f5d      	ldr	r7, [pc, #372]	; (800d580 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>)
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	7c5b      	ldrb	r3, [r3, #17]
 800d410:	b091      	sub	sp, #68	; 0x44
 800d412:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d416:	900c      	str	r0, [sp, #48]	; 0x30
 800d418:	4688      	mov	r8, r1
 800d41a:	4615      	mov	r5, r2
 800d41c:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800d420:	f7fa ff72 	bl	8008308 <GUI_ALLOC_LockH>
 800d424:	4603      	mov	r3, r0
 800d426:	a810      	add	r0, sp, #64	; 0x40
 800d428:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 800d42c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d430:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	9308      	str	r3, [sp, #32]
 800d43c:	f7fa ff72 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	7c5b      	ldrb	r3, [r3, #17]
 800d444:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800d448:	68c3      	ldr	r3, [r0, #12]
 800d44a:	2108      	movs	r1, #8
 800d44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44e:	4798      	blx	r3
 800d450:	2817      	cmp	r0, #23
 800d452:	4607      	mov	r7, r0
 800d454:	d804      	bhi.n	800d460 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 800d456:	2803      	cmp	r0, #3
 800d458:	bf14      	ite	ne
 800d45a:	4607      	movne	r7, r0
 800d45c:	2708      	moveq	r7, #8
 800d45e:	e000      	b.n	800d462 <GUI_MEMDEV__WriteToActiveAlpha+0x5e>
 800d460:	2720      	movs	r7, #32
 800d462:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d466:	9309      	str	r3, [sp, #36]	; 0x24
 800d468:	2000      	movs	r0, #0
 800d46a:	f8da 3000 	ldr.w	r3, [sl]
 800d46e:	930a      	str	r3, [sp, #40]	; 0x28
 800d470:	f7fc ff54 	bl	800a31c <GUI__AllocAlphaBuffer>
 800d474:	2800      	cmp	r0, #0
 800d476:	d17e      	bne.n	800d576 <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800d478:	6822      	ldr	r2, [r4, #0]
 800d47a:	eb08 0406 	add.w	r4, r8, r6
 800d47e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800d482:	3c01      	subs	r4, #1
 800d484:	1ae4      	subs	r4, r4, r3
 800d486:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800d48a:	2c00      	cmp	r4, #0
 800d48c:	bfcc      	ite	gt
 800d48e:	1b34      	subgt	r4, r6, r4
 800d490:	4634      	movle	r4, r6
 800d492:	4598      	cmp	r8, r3
 800d494:	bfbd      	ittte	lt
 800d496:	ebc8 0103 	rsblt	r1, r8, r3
 800d49a:	1a64      	sublt	r4, r4, r1
 800d49c:	4698      	movlt	r8, r3
 800d49e:	2100      	movge	r1, #0
 800d4a0:	2c00      	cmp	r4, #0
 800d4a2:	dd68      	ble.n	800d576 <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800d4a4:	eb05 0309 	add.w	r3, r5, r9
 800d4a8:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 800d4ac:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	1a1b      	subs	r3, r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	bfc8      	it	gt
 800d4b8:	ebc3 0909 	rsbgt	r9, r3, r9
 800d4bc:	4295      	cmp	r5, r2
 800d4be:	bfbd      	ittte	lt
 800d4c0:	1b53      	sublt	r3, r2, r5
 800d4c2:	ebc3 0909 	rsblt	r9, r3, r9
 800d4c6:	4615      	movlt	r5, r2
 800d4c8:	2300      	movge	r3, #0
 800d4ca:	f1b9 0f00 	cmp.w	r9, #0
 800d4ce:	dd52      	ble.n	800d576 <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800d4d0:	fb03 1106 	mla	r1, r3, r6, r1
 800d4d4:	008b      	lsls	r3, r1, #2
 800d4d6:	9307      	str	r3, [sp, #28]
 800d4d8:	eb05 0309 	add.w	r3, r5, r9
 800d4dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4de:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d4e0:	f007 fbca 	bl	8014c78 <GUI_MEMDEV_GetDataPtr>
 800d4e4:	ab0f      	add	r3, sp, #60	; 0x3c
 800d4e6:	9a07      	ldr	r2, [sp, #28]
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	9300      	str	r3, [sp, #0]
 800d4ee:	1882      	adds	r2, r0, r2
 800d4f0:	4623      	mov	r3, r4
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	4640      	mov	r0, r8
 800d4f6:	f7fc fe27 	bl	800a148 <GUI__DoAlphaBlending>
 800d4fa:	4681      	mov	r9, r0
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	d03a      	beq.n	800d576 <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800d500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d502:	461a      	mov	r2, r3
 800d504:	4b1f      	ldr	r3, [pc, #124]	; (800d584 <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 800d506:	429a      	cmp	r2, r3
 800d508:	d01c      	beq.n	800d544 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800d50a:	4653      	mov	r3, sl
 800d50c:	463a      	mov	r2, r7
 800d50e:	4621      	mov	r1, r4
 800d510:	f006 fcfd 	bl	8013f0e <GUI__CompactPixelIndicesEx>
 800d514:	b9b0      	cbnz	r0, 800d544 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800d516:	f8da b010 	ldr.w	fp, [sl, #16]
 800d51a:	f1bb 0f00 	cmp.w	fp, #0
 800d51e:	d005      	beq.n	800d52c <GUI_MEMDEV__WriteToActiveAlpha+0x128>
 800d520:	2304      	movs	r3, #4
 800d522:	4632      	mov	r2, r6
 800d524:	4649      	mov	r1, r9
 800d526:	4648      	mov	r0, r9
 800d528:	47d8      	blx	fp
 800d52a:	e00b      	b.n	800d544 <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800d52c:	464b      	mov	r3, r9
 800d52e:	46b3      	mov	fp, r6
 800d530:	6818      	ldr	r0, [r3, #0]
 800d532:	930d      	str	r3, [sp, #52]	; 0x34
 800d534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d536:	4798      	blx	r3
 800d538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d53a:	f1bb 0b01 	subs.w	fp, fp, #1
 800d53e:	f843 0b04 	str.w	r0, [r3], #4
 800d542:	d1f5      	bne.n	800d530 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>
 800d544:	2300      	movs	r3, #0
 800d546:	9305      	str	r3, [sp, #20]
 800d548:	9303      	str	r3, [sp, #12]
 800d54a:	2301      	movs	r3, #1
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	f8cd 9010 	str.w	r9, [sp, #16]
 800d554:	9702      	str	r7, [sp, #8]
 800d556:	4622      	mov	r2, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	4640      	mov	r0, r8
 800d55c:	f7fd fa5c 	bl	800aa18 <LCD_DrawBitmap>
 800d560:	9b07      	ldr	r3, [sp, #28]
 800d562:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800d566:	9307      	str	r3, [sp, #28]
 800d568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d56a:	f105 0b01 	add.w	fp, r5, #1
 800d56e:	459b      	cmp	fp, r3
 800d570:	d001      	beq.n	800d576 <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800d572:	465d      	mov	r5, fp
 800d574:	e7b3      	b.n	800d4de <GUI_MEMDEV__WriteToActiveAlpha+0xda>
 800d576:	b011      	add	sp, #68	; 0x44
 800d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57c:	20000014 	.word	0x20000014
 800d580:	20027bb0 	.word	0x20027bb0
 800d584:	0801293b 	.word	0x0801293b

0800d588 <_OnExit>:
 800d588:	4b18      	ldr	r3, [pc, #96]	; (800d5ec <_OnExit+0x64>)
 800d58a:	4819      	ldr	r0, [pc, #100]	; (800d5f0 <_OnExit+0x68>)
 800d58c:	4a19      	ldr	r2, [pc, #100]	; (800d5f4 <_OnExit+0x6c>)
 800d58e:	b570      	push	{r4, r5, r6, lr}
 800d590:	2400      	movs	r4, #0
 800d592:	601c      	str	r4, [r3, #0]
 800d594:	4b18      	ldr	r3, [pc, #96]	; (800d5f8 <_OnExit+0x70>)
 800d596:	4d19      	ldr	r5, [pc, #100]	; (800d5fc <_OnExit+0x74>)
 800d598:	601c      	str	r4, [r3, #0]
 800d59a:	605c      	str	r4, [r3, #4]
 800d59c:	4b18      	ldr	r3, [pc, #96]	; (800d600 <_OnExit+0x78>)
 800d59e:	7004      	strb	r4, [r0, #0]
 800d5a0:	601c      	str	r4, [r3, #0]
 800d5a2:	4b18      	ldr	r3, [pc, #96]	; (800d604 <_OnExit+0x7c>)
 800d5a4:	6044      	str	r4, [r0, #4]
 800d5a6:	601c      	str	r4, [r3, #0]
 800d5a8:	4b17      	ldr	r3, [pc, #92]	; (800d608 <_OnExit+0x80>)
 800d5aa:	6014      	str	r4, [r2, #0]
 800d5ac:	601c      	str	r4, [r3, #0]
 800d5ae:	4b17      	ldr	r3, [pc, #92]	; (800d60c <_OnExit+0x84>)
 800d5b0:	6054      	str	r4, [r2, #4]
 800d5b2:	601c      	str	r4, [r3, #0]
 800d5b4:	6084      	str	r4, [r0, #8]
 800d5b6:	682b      	ldr	r3, [r5, #0]
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	2218      	movs	r2, #24
 800d5bc:	300c      	adds	r0, #12
 800d5be:	4798      	blx	r3
 800d5c0:	4b13      	ldr	r3, [pc, #76]	; (800d610 <_OnExit+0x88>)
 800d5c2:	4814      	ldr	r0, [pc, #80]	; (800d614 <_OnExit+0x8c>)
 800d5c4:	601c      	str	r4, [r3, #0]
 800d5c6:	4b14      	ldr	r3, [pc, #80]	; (800d618 <_OnExit+0x90>)
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	601c      	str	r4, [r3, #0]
 800d5cc:	605c      	str	r4, [r3, #4]
 800d5ce:	2210      	movs	r2, #16
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	4798      	blx	r3
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	4811      	ldr	r0, [pc, #68]	; (800d61c <_OnExit+0x94>)
 800d5d8:	4621      	mov	r1, r4
 800d5da:	2210      	movs	r2, #16
 800d5dc:	4798      	blx	r3
 800d5de:	682b      	ldr	r3, [r5, #0]
 800d5e0:	480f      	ldr	r0, [pc, #60]	; (800d620 <_OnExit+0x98>)
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	2210      	movs	r2, #16
 800d5e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d5ea:	4718      	bx	r3
 800d5ec:	20027c10 	.word	0x20027c10
 800d5f0:	20000a8c 	.word	0x20000a8c
 800d5f4:	20027be4 	.word	0x20027be4
 800d5f8:	20027c18 	.word	0x20027c18
 800d5fc:	20000040 	.word	0x20000040
 800d600:	20027c24 	.word	0x20027c24
 800d604:	20027bd0 	.word	0x20027bd0
 800d608:	20027c04 	.word	0x20027c04
 800d60c:	20027c14 	.word	0x20027c14
 800d610:	20027be0 	.word	0x20027be0
 800d614:	20027c48 	.word	0x20027c48
 800d618:	20027bd4 	.word	0x20027bd4
 800d61c:	20027c38 	.word	0x20027c38
 800d620:	20027c28 	.word	0x20027c28

0800d624 <_Paint1>:
 800d624:	b510      	push	{r4, lr}
 800d626:	4604      	mov	r4, r0
 800d628:	f7fa fe64 	bl	80082f4 <GUI_ALLOC_h2p>
 800d62c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d62e:	4a05      	ldr	r2, [pc, #20]	; (800d644 <_Paint1+0x20>)
 800d630:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800d634:	4620      	mov	r0, r4
 800d636:	4b04      	ldr	r3, [pc, #16]	; (800d648 <_Paint1+0x24>)
 800d638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d63c:	bf08      	it	eq
 800d63e:	4613      	moveq	r3, r2
 800d640:	4718      	bx	r3
 800d642:	bf00      	nop
 800d644:	0800e581 	.word	0x0800e581
 800d648:	08014edd 	.word	0x08014edd

0800d64c <_Findy1>:
 800d64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d64e:	b085      	sub	sp, #20
 800d650:	4607      	mov	r7, r0
 800d652:	460c      	mov	r4, r1
 800d654:	4616      	mov	r6, r2
 800d656:	ad02      	add	r5, sp, #8
 800d658:	2f00      	cmp	r7, #0
 800d65a:	d048      	beq.n	800d6ee <_Findy1+0xa2>
 800d65c:	4638      	mov	r0, r7
 800d65e:	f7fa fe53 	bl	8008308 <GUI_ALLOC_LockH>
 800d662:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800d664:	9001      	str	r0, [sp, #4]
 800d666:	07bb      	lsls	r3, r7, #30
 800d668:	4601      	mov	r1, r0
 800d66a:	d53a      	bpl.n	800d6e2 <_Findy1+0x96>
 800d66c:	b126      	cbz	r6, 800d678 <_Findy1+0x2c>
 800d66e:	4632      	mov	r2, r6
 800d670:	4628      	mov	r0, r5
 800d672:	f7fc ffa2 	bl	800a5ba <GUI__IntersectRects>
 800d676:	e002      	b.n	800d67e <_Findy1+0x32>
 800d678:	c803      	ldmia	r0, {r0, r1}
 800d67a:	e885 0003 	stmia.w	r5, {r0, r1}
 800d67e:	4629      	mov	r1, r5
 800d680:	4620      	mov	r0, r4
 800d682:	f7fb f971 	bl	8008968 <GUI_RectsIntersect>
 800d686:	b360      	cbz	r0, 800d6e2 <_Findy1+0x96>
 800d688:	f017 0f01 	tst.w	r7, #1
 800d68c:	9b01      	ldr	r3, [sp, #4]
 800d68e:	d11c      	bne.n	800d6ca <_Findy1+0x7e>
 800d690:	b13e      	cbz	r6, 800d6a2 <_Findy1+0x56>
 800d692:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d696:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800d69a:	4293      	cmp	r3, r2
 800d69c:	bfb8      	it	lt
 800d69e:	4613      	movlt	r3, r2
 800d6a0:	e001      	b.n	800d6a6 <_Findy1+0x5a>
 800d6a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d6a6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d6b0:	dd05      	ble.n	800d6be <_Findy1+0x72>
 800d6b2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	db13      	blt.n	800d6e2 <_Findy1+0x96>
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	e003      	b.n	800d6c6 <_Findy1+0x7a>
 800d6be:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	dd0d      	ble.n	800d6e2 <_Findy1+0x96>
 800d6c6:	80e3      	strh	r3, [r4, #6]
 800d6c8:	e00b      	b.n	800d6e2 <_Findy1+0x96>
 800d6ca:	69df      	ldr	r7, [r3, #28]
 800d6cc:	b14f      	cbz	r7, 800d6e2 <_Findy1+0x96>
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	462a      	mov	r2, r5
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	f7ff ffba 	bl	800d64c <_Findy1>
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f7fa fe0b 	bl	80082f4 <GUI_ALLOC_h2p>
 800d6de:	6a07      	ldr	r7, [r0, #32]
 800d6e0:	e7f4      	b.n	800d6cc <_Findy1+0x80>
 800d6e2:	9b01      	ldr	r3, [sp, #4]
 800d6e4:	a801      	add	r0, sp, #4
 800d6e6:	6a1f      	ldr	r7, [r3, #32]
 800d6e8:	f7fa fe1c 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d6ec:	e7b4      	b.n	800d658 <_Findy1+0xc>
 800d6ee:	b005      	add	sp, #20
 800d6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6f2 <_Findx0>:
 800d6f2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	460f      	mov	r7, r1
 800d6fa:	4690      	mov	r8, r2
 800d6fc:	2500      	movs	r5, #0
 800d6fe:	ac02      	add	r4, sp, #8
 800d700:	2e00      	cmp	r6, #0
 800d702:	d035      	beq.n	800d770 <_Findx0+0x7e>
 800d704:	4630      	mov	r0, r6
 800d706:	f7fa fdff 	bl	8008308 <GUI_ALLOC_LockH>
 800d70a:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800d70c:	9001      	str	r0, [sp, #4]
 800d70e:	07b2      	lsls	r2, r6, #30
 800d710:	4601      	mov	r1, r0
 800d712:	d527      	bpl.n	800d764 <_Findx0+0x72>
 800d714:	f1b8 0f00 	cmp.w	r8, #0
 800d718:	d004      	beq.n	800d724 <_Findx0+0x32>
 800d71a:	4642      	mov	r2, r8
 800d71c:	4620      	mov	r0, r4
 800d71e:	f7fc ff4c 	bl	800a5ba <GUI__IntersectRects>
 800d722:	e002      	b.n	800d72a <_Findx0+0x38>
 800d724:	c803      	ldmia	r0, {r0, r1}
 800d726:	e884 0003 	stmia.w	r4, {r0, r1}
 800d72a:	4621      	mov	r1, r4
 800d72c:	4638      	mov	r0, r7
 800d72e:	f7fb f91b 	bl	8008968 <GUI_RectsIntersect>
 800d732:	b1b8      	cbz	r0, 800d764 <_Findx0+0x72>
 800d734:	07f3      	lsls	r3, r6, #31
 800d736:	d405      	bmi.n	800d744 <_Findx0+0x52>
 800d738:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d73c:	3301      	adds	r3, #1
 800d73e:	803b      	strh	r3, [r7, #0]
 800d740:	2501      	movs	r5, #1
 800d742:	e00f      	b.n	800d764 <_Findx0+0x72>
 800d744:	9b01      	ldr	r3, [sp, #4]
 800d746:	69de      	ldr	r6, [r3, #28]
 800d748:	b166      	cbz	r6, 800d764 <_Findx0+0x72>
 800d74a:	4622      	mov	r2, r4
 800d74c:	4639      	mov	r1, r7
 800d74e:	4630      	mov	r0, r6
 800d750:	f7ff ffcf 	bl	800d6f2 <_Findx0>
 800d754:	2800      	cmp	r0, #0
 800d756:	4630      	mov	r0, r6
 800d758:	bf18      	it	ne
 800d75a:	2501      	movne	r5, #1
 800d75c:	f7fa fdca 	bl	80082f4 <GUI_ALLOC_h2p>
 800d760:	6a06      	ldr	r6, [r0, #32]
 800d762:	e7f1      	b.n	800d748 <_Findx0+0x56>
 800d764:	9b01      	ldr	r3, [sp, #4]
 800d766:	a801      	add	r0, sp, #4
 800d768:	6a1e      	ldr	r6, [r3, #32]
 800d76a:	f7fa fddb 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d76e:	e7c7      	b.n	800d700 <_Findx0+0xe>
 800d770:	4628      	mov	r0, r5
 800d772:	b004      	add	sp, #16
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d778 <_Findx1>:
 800d778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d77a:	b085      	sub	sp, #20
 800d77c:	4605      	mov	r5, r0
 800d77e:	460e      	mov	r6, r1
 800d780:	4617      	mov	r7, r2
 800d782:	ac02      	add	r4, sp, #8
 800d784:	b37d      	cbz	r5, 800d7e6 <_Findx1+0x6e>
 800d786:	4628      	mov	r0, r5
 800d788:	f7fa fdbe 	bl	8008308 <GUI_ALLOC_LockH>
 800d78c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800d78e:	9001      	str	r0, [sp, #4]
 800d790:	07aa      	lsls	r2, r5, #30
 800d792:	4601      	mov	r1, r0
 800d794:	d521      	bpl.n	800d7da <_Findx1+0x62>
 800d796:	b127      	cbz	r7, 800d7a2 <_Findx1+0x2a>
 800d798:	463a      	mov	r2, r7
 800d79a:	4620      	mov	r0, r4
 800d79c:	f7fc ff0d 	bl	800a5ba <GUI__IntersectRects>
 800d7a0:	e002      	b.n	800d7a8 <_Findx1+0x30>
 800d7a2:	c803      	ldmia	r0, {r0, r1}
 800d7a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7fb f8dc 	bl	8008968 <GUI_RectsIntersect>
 800d7b0:	b198      	cbz	r0, 800d7da <_Findx1+0x62>
 800d7b2:	07eb      	lsls	r3, r5, #31
 800d7b4:	d404      	bmi.n	800d7c0 <_Findx1+0x48>
 800d7b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	80b3      	strh	r3, [r6, #4]
 800d7be:	e00c      	b.n	800d7da <_Findx1+0x62>
 800d7c0:	9b01      	ldr	r3, [sp, #4]
 800d7c2:	69dd      	ldr	r5, [r3, #28]
 800d7c4:	b14d      	cbz	r5, 800d7da <_Findx1+0x62>
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	f7ff ffd4 	bl	800d778 <_Findx1>
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f7fa fd8f 	bl	80082f4 <GUI_ALLOC_h2p>
 800d7d6:	6a05      	ldr	r5, [r0, #32]
 800d7d8:	e7f4      	b.n	800d7c4 <_Findx1+0x4c>
 800d7da:	9b01      	ldr	r3, [sp, #4]
 800d7dc:	a801      	add	r0, sp, #4
 800d7de:	6a1d      	ldr	r5, [r3, #32]
 800d7e0:	f7fa fda0 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d7e4:	e7ce      	b.n	800d784 <_Findx1+0xc>
 800d7e6:	b005      	add	sp, #20
 800d7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d7ec <_Paint1Trans>:
 800d7ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d7f0:	4d21      	ldr	r5, [pc, #132]	; (800d878 <_Paint1Trans+0x8c>)
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	4607      	mov	r7, r0
 800d7f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d7f8:	f7fa fd86 	bl	8008308 <GUI_ALLOC_LockH>
 800d7fc:	9000      	str	r0, [sp, #0]
 800d7fe:	4638      	mov	r0, r7
 800d800:	f7fa fd82 	bl	8008308 <GUI_ALLOC_LockH>
 800d804:	ac02      	add	r4, sp, #8
 800d806:	4601      	mov	r1, r0
 800d808:	9001      	str	r0, [sp, #4]
 800d80a:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800d80e:	3008      	adds	r0, #8
 800d810:	f7fb f8aa 	bl	8008968 <GUI_RectsIntersect>
 800d814:	4606      	mov	r6, r0
 800d816:	b328      	cbz	r0, 800d864 <_Paint1Trans+0x78>
 800d818:	9901      	ldr	r1, [sp, #4]
 800d81a:	9a00      	ldr	r2, [sp, #0]
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	3208      	adds	r2, #8
 800d820:	f101 0008 	add.w	r0, r1, #8
 800d824:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800d826:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 800d82a:	f7fc fec6 	bl	800a5ba <GUI__IntersectRects>
 800d82e:	4620      	mov	r0, r4
 800d830:	f7fa fd78 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d834:	9a01      	ldr	r2, [sp, #4]
 800d836:	682b      	ldr	r3, [r5, #0]
 800d838:	f9b2 1000 	ldrsh.w	r1, [r2]
 800d83c:	4c0f      	ldr	r4, [pc, #60]	; (800d87c <_Paint1Trans+0x90>)
 800d83e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d842:	64d9      	str	r1, [r3, #76]	; 0x4c
 800d844:	651a      	str	r2, [r3, #80]	; 0x50
 800d846:	a801      	add	r0, sp, #4
 800d848:	6027      	str	r7, [r4, #0]
 800d84a:	f7fa fd6b 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d84e:	4638      	mov	r0, r7
 800d850:	f7ff fee8 	bl	800d624 <_Paint1>
 800d854:	2300      	movs	r3, #0
 800d856:	6023      	str	r3, [r4, #0]
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	64de      	str	r6, [r3, #76]	; 0x4c
 800d85c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 800d860:	2601      	movs	r6, #1
 800d862:	e005      	b.n	800d870 <_Paint1Trans+0x84>
 800d864:	4620      	mov	r0, r4
 800d866:	f7fa fd5d 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d86a:	a801      	add	r0, sp, #4
 800d86c:	f7fa fd5a 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d870:	4630      	mov	r0, r6
 800d872:	b002      	add	sp, #8
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	20000014 	.word	0x20000014
 800d87c:	20027bd0 	.word	0x20027bd0

0800d880 <_PaintTransChildren>:
 800d880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d884:	4605      	mov	r5, r0
 800d886:	f7fa fd3f 	bl	8008308 <GUI_ALLOC_LockH>
 800d88a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d88c:	9001      	str	r0, [sp, #4]
 800d88e:	079b      	lsls	r3, r3, #30
 800d890:	d405      	bmi.n	800d89e <_PaintTransChildren+0x1e>
 800d892:	a801      	add	r0, sp, #4
 800d894:	f7fa fd46 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d898:	b003      	add	sp, #12
 800d89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d89e:	69c4      	ldr	r4, [r0, #28]
 800d8a0:	2c00      	cmp	r4, #0
 800d8a2:	d0f6      	beq.n	800d892 <_PaintTransChildren+0x12>
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7fa fd2f 	bl	8008308 <GUI_ALLOC_LockH>
 800d8aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d8ac:	9000      	str	r0, [sp, #0]
 800d8ae:	f003 0303 	and.w	r3, r3, #3
 800d8b2:	2b03      	cmp	r3, #3
 800d8b4:	d135      	bne.n	800d922 <_PaintTransChildren+0xa2>
 800d8b6:	9901      	ldr	r1, [sp, #4]
 800d8b8:	3108      	adds	r1, #8
 800d8ba:	f7fb f855 	bl	8008968 <GUI_RectsIntersect>
 800d8be:	b380      	cbz	r0, 800d922 <_PaintTransChildren+0xa2>
 800d8c0:	9b01      	ldr	r3, [sp, #4]
 800d8c2:	a801      	add	r0, sp, #4
 800d8c4:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 800d8c8:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800d8cc:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 800d8d0:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 800d8d4:	f7fa fd26 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d8d8:	4668      	mov	r0, sp
 800d8da:	f7fa fd23 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f7ff ff84 	bl	800d7ec <_Paint1Trans>
 800d8e4:	b170      	cbz	r0, 800d904 <_PaintTransChildren+0x84>
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f7fa fd04 	bl	80082f4 <GUI_ALLOC_h2p>
 800d8ec:	9000      	str	r0, [sp, #0]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f7ff ffc6 	bl	800d880 <_PaintTransChildren>
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7fa fcfd 	bl	80082f4 <GUI_ALLOC_h2p>
 800d8fa:	9000      	str	r0, [sp, #0]
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f7fa fcf9 	bl	80082f4 <GUI_ALLOC_h2p>
 800d902:	9001      	str	r0, [sp, #4]
 800d904:	4628      	mov	r0, r5
 800d906:	f7fa fcff 	bl	8008308 <GUI_ALLOC_LockH>
 800d90a:	9001      	str	r0, [sp, #4]
 800d90c:	4620      	mov	r0, r4
 800d90e:	f7fa fcfb 	bl	8008308 <GUI_ALLOC_LockH>
 800d912:	9b01      	ldr	r3, [sp, #4]
 800d914:	9000      	str	r0, [sp, #0]
 800d916:	f8a3 9008 	strh.w	r9, [r3, #8]
 800d91a:	f8a3 800a 	strh.w	r8, [r3, #10]
 800d91e:	819f      	strh	r7, [r3, #12]
 800d920:	81de      	strh	r6, [r3, #14]
 800d922:	9b00      	ldr	r3, [sp, #0]
 800d924:	4668      	mov	r0, sp
 800d926:	6a1c      	ldr	r4, [r3, #32]
 800d928:	f7fa fcfc 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d92c:	e7b8      	b.n	800d8a0 <_PaintTransChildren+0x20>
	...

0800d930 <WM__PaintWinAndOverlays>:
 800d930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d932:	4604      	mov	r4, r0
 800d934:	f7fa fce8 	bl	8008308 <GUI_ALLOC_LockH>
 800d938:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d93a:	9001      	str	r0, [sp, #4]
 800d93c:	f640 0301 	movw	r3, #2049	; 0x801
 800d940:	4013      	ands	r3, r2
 800d942:	2b01      	cmp	r3, #1
 800d944:	d005      	beq.n	800d952 <WM__PaintWinAndOverlays+0x22>
 800d946:	a801      	add	r0, sp, #4
 800d948:	f7fa fcec 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d94c:	4620      	mov	r0, r4
 800d94e:	f7ff fe69 	bl	800d624 <_Paint1>
 800d952:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <WM__PaintWinAndOverlays+0x74>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	b313      	cbz	r3, 800d99e <WM__PaintWinAndOverlays+0x6e>
 800d958:	4620      	mov	r0, r4
 800d95a:	f7ff ff91 	bl	800d880 <_PaintTransChildren>
 800d95e:	4620      	mov	r0, r4
 800d960:	f7fa fcc8 	bl	80082f4 <GUI_ALLOC_h2p>
 800d964:	6985      	ldr	r5, [r0, #24]
 800d966:	6a04      	ldr	r4, [r0, #32]
 800d968:	b1cd      	cbz	r5, 800d99e <WM__PaintWinAndOverlays+0x6e>
 800d96a:	b194      	cbz	r4, 800d992 <WM__PaintWinAndOverlays+0x62>
 800d96c:	4620      	mov	r0, r4
 800d96e:	f7fa fcc1 	bl	80082f4 <GUI_ALLOC_h2p>
 800d972:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d974:	f003 0303 	and.w	r3, r3, #3
 800d978:	2b03      	cmp	r3, #3
 800d97a:	d102      	bne.n	800d982 <WM__PaintWinAndOverlays+0x52>
 800d97c:	4620      	mov	r0, r4
 800d97e:	f7ff ff35 	bl	800d7ec <_Paint1Trans>
 800d982:	4620      	mov	r0, r4
 800d984:	f7ff ff7c 	bl	800d880 <_PaintTransChildren>
 800d988:	4620      	mov	r0, r4
 800d98a:	f7fa fcb3 	bl	80082f4 <GUI_ALLOC_h2p>
 800d98e:	6a04      	ldr	r4, [r0, #32]
 800d990:	e7eb      	b.n	800d96a <WM__PaintWinAndOverlays+0x3a>
 800d992:	4628      	mov	r0, r5
 800d994:	f7fa fcae 	bl	80082f4 <GUI_ALLOC_h2p>
 800d998:	6a04      	ldr	r4, [r0, #32]
 800d99a:	6985      	ldr	r5, [r0, #24]
 800d99c:	e7e4      	b.n	800d968 <WM__PaintWinAndOverlays+0x38>
 800d99e:	b003      	add	sp, #12
 800d9a0:	bd30      	pop	{r4, r5, pc}
 800d9a2:	bf00      	nop
 800d9a4:	20027c24 	.word	0x20027c24

0800d9a8 <_cbPaintMemDev>:
 800d9a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ac:	4d18      	ldr	r5, [pc, #96]	; (800da10 <_cbPaintMemDev+0x68>)
 800d9ae:	682b      	ldr	r3, [r5, #0]
 800d9b0:	4682      	mov	sl, r0
 800d9b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d9b4:	f7fa fca8 	bl	8008308 <GUI_ALLOC_LockH>
 800d9b8:	682a      	ldr	r2, [r5, #0]
 800d9ba:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 800d9be:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 800d9c2:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800d9c6:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800d9ca:	ac02      	add	r4, sp, #8
 800d9cc:	3208      	adds	r2, #8
 800d9ce:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d9d2:	f100 0308 	add.w	r3, r0, #8
 800d9d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d9da:	e883 0003 	stmia.w	r3, {r0, r1}
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f7fa fca0 	bl	8008324 <GUI_ALLOC_UnlockH>
 800d9e4:	f8da 0000 	ldr.w	r0, [sl]
 800d9e8:	f7ff ffa2 	bl	800d930 <WM__PaintWinAndOverlays>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d9f0:	f7fa fc8a 	bl	8008308 <GUI_ALLOC_LockH>
 800d9f4:	9001      	str	r0, [sp, #4]
 800d9f6:	f8a0 9008 	strh.w	r9, [r0, #8]
 800d9fa:	f8a0 800a 	strh.w	r8, [r0, #10]
 800d9fe:	8187      	strh	r7, [r0, #12]
 800da00:	81c6      	strh	r6, [r0, #14]
 800da02:	4620      	mov	r0, r4
 800da04:	f7fa fc8e 	bl	8008324 <GUI_ALLOC_UnlockH>
 800da08:	b002      	add	sp, #8
 800da0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0e:	bf00      	nop
 800da10:	20000014 	.word	0x20000014

0800da14 <WM__ClipAtParentBorders>:
 800da14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da16:	4606      	mov	r6, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	4628      	mov	r0, r5
 800da1c:	f7fa fc74 	bl	8008308 <GUI_ALLOC_LockH>
 800da20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800da22:	9001      	str	r0, [sp, #4]
 800da24:	f013 0402 	ands.w	r4, r3, #2
 800da28:	4601      	mov	r1, r0
 800da2a:	d104      	bne.n	800da36 <WM__ClipAtParentBorders+0x22>
 800da2c:	a801      	add	r0, sp, #4
 800da2e:	f7fa fc79 	bl	8008324 <GUI_ALLOC_UnlockH>
 800da32:	4620      	mov	r0, r4
 800da34:	e016      	b.n	800da64 <WM__ClipAtParentBorders+0x50>
 800da36:	4630      	mov	r0, r6
 800da38:	f7fc fda2 	bl	800a580 <GUI__IntersectRect>
 800da3c:	9b01      	ldr	r3, [sp, #4]
 800da3e:	699c      	ldr	r4, [r3, #24]
 800da40:	a801      	add	r0, sp, #4
 800da42:	b954      	cbnz	r4, 800da5a <WM__ClipAtParentBorders+0x46>
 800da44:	f7fa fc6e 	bl	8008324 <GUI_ALLOC_UnlockH>
 800da48:	4b07      	ldr	r3, [pc, #28]	; (800da68 <WM__ClipAtParentBorders+0x54>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	4295      	cmp	r5, r2
 800da4e:	d008      	beq.n	800da62 <WM__ClipAtParentBorders+0x4e>
 800da50:	6858      	ldr	r0, [r3, #4]
 800da52:	1b43      	subs	r3, r0, r5
 800da54:	4258      	negs	r0, r3
 800da56:	4158      	adcs	r0, r3
 800da58:	e004      	b.n	800da64 <WM__ClipAtParentBorders+0x50>
 800da5a:	f7fa fc63 	bl	8008324 <GUI_ALLOC_UnlockH>
 800da5e:	4625      	mov	r5, r4
 800da60:	e7db      	b.n	800da1a <WM__ClipAtParentBorders+0x6>
 800da62:	2001      	movs	r0, #1
 800da64:	b002      	add	sp, #8
 800da66:	bd70      	pop	{r4, r5, r6, pc}
 800da68:	20027bd4 	.word	0x20027bd4

0800da6c <WM__InsertWindowIntoList>:
 800da6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800da70:	4606      	mov	r6, r0
 800da72:	460c      	mov	r4, r1
 800da74:	2900      	cmp	r1, #0
 800da76:	d04c      	beq.n	800db12 <WM__InsertWindowIntoList+0xa6>
 800da78:	f7fa fc46 	bl	8008308 <GUI_ALLOC_LockH>
 800da7c:	2300      	movs	r3, #0
 800da7e:	6184      	str	r4, [r0, #24]
 800da80:	9001      	str	r0, [sp, #4]
 800da82:	6203      	str	r3, [r0, #32]
 800da84:	4620      	mov	r0, r4
 800da86:	f7fa fc3f 	bl	8008308 <GUI_ALLOC_LockH>
 800da8a:	ac04      	add	r4, sp, #16
 800da8c:	69c7      	ldr	r7, [r0, #28]
 800da8e:	f844 0d08 	str.w	r0, [r4, #-8]!
 800da92:	b92f      	cbnz	r7, 800daa0 <WM__InsertWindowIntoList+0x34>
 800da94:	61c6      	str	r6, [r0, #28]
 800da96:	a801      	add	r0, sp, #4
 800da98:	f7fa fc44 	bl	8008324 <GUI_ALLOC_UnlockH>
 800da9c:	4620      	mov	r0, r4
 800da9e:	e036      	b.n	800db0e <WM__InsertWindowIntoList+0xa2>
 800daa0:	9b01      	ldr	r3, [sp, #4]
 800daa2:	4638      	mov	r0, r7
 800daa4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800daa6:	f7fa fc2f 	bl	8008308 <GUI_ALLOC_LockH>
 800daaa:	f10d 0810 	add.w	r8, sp, #16
 800daae:	f005 0508 	and.w	r5, r5, #8
 800dab2:	f848 0d04 	str.w	r0, [r8, #-4]!
 800dab6:	b975      	cbnz	r5, 800dad6 <WM__InsertWindowIntoList+0x6a>
 800dab8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800daba:	071a      	lsls	r2, r3, #28
 800dabc:	d50b      	bpl.n	800dad6 <WM__InsertWindowIntoList+0x6a>
 800dabe:	9b01      	ldr	r3, [sp, #4]
 800dac0:	621f      	str	r7, [r3, #32]
 800dac2:	9b02      	ldr	r3, [sp, #8]
 800dac4:	a801      	add	r0, sp, #4
 800dac6:	61de      	str	r6, [r3, #28]
 800dac8:	f7fa fc2c 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dacc:	4620      	mov	r0, r4
 800dace:	f7fa fc29 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dad2:	4640      	mov	r0, r8
 800dad4:	e01b      	b.n	800db0e <WM__InsertWindowIntoList+0xa2>
 800dad6:	4620      	mov	r0, r4
 800dad8:	f7fa fc24 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dadc:	4640      	mov	r0, r8
 800dade:	f7fa fc21 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dae2:	4638      	mov	r0, r7
 800dae4:	f7fa fc06 	bl	80082f4 <GUI_ALLOC_h2p>
 800dae8:	9003      	str	r0, [sp, #12]
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	6a1c      	ldr	r4, [r3, #32]
 800daee:	b90c      	cbnz	r4, 800daf4 <WM__InsertWindowIntoList+0x88>
 800daf0:	621e      	str	r6, [r3, #32]
 800daf2:	e00b      	b.n	800db0c <WM__InsertWindowIntoList+0xa0>
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7fa fbfd 	bl	80082f4 <GUI_ALLOC_h2p>
 800dafa:	2d00      	cmp	r5, #0
 800dafc:	d1f4      	bne.n	800dae8 <WM__InsertWindowIntoList+0x7c>
 800dafe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800db00:	071b      	lsls	r3, r3, #28
 800db02:	d5f1      	bpl.n	800dae8 <WM__InsertWindowIntoList+0x7c>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	621e      	str	r6, [r3, #32]
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	621c      	str	r4, [r3, #32]
 800db0c:	a801      	add	r0, sp, #4
 800db0e:	f7fa fc09 	bl	8008324 <GUI_ALLOC_UnlockH>
 800db12:	b004      	add	sp, #16
 800db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db18 <WM__RemoveWindowFromList>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	4604      	mov	r4, r0
 800db1c:	f7fa fbea 	bl	80082f4 <GUI_ALLOC_h2p>
 800db20:	4605      	mov	r5, r0
 800db22:	6980      	ldr	r0, [r0, #24]
 800db24:	b1a8      	cbz	r0, 800db52 <WM__RemoveWindowFromList+0x3a>
 800db26:	f7fa fbe5 	bl	80082f4 <GUI_ALLOC_h2p>
 800db2a:	69c3      	ldr	r3, [r0, #28]
 800db2c:	429c      	cmp	r4, r3
 800db2e:	4606      	mov	r6, r0
 800db30:	d105      	bne.n	800db3e <WM__RemoveWindowFromList+0x26>
 800db32:	4620      	mov	r0, r4
 800db34:	f7fa fbde 	bl	80082f4 <GUI_ALLOC_h2p>
 800db38:	6a03      	ldr	r3, [r0, #32]
 800db3a:	61f3      	str	r3, [r6, #28]
 800db3c:	bd70      	pop	{r4, r5, r6, pc}
 800db3e:	b143      	cbz	r3, 800db52 <WM__RemoveWindowFromList+0x3a>
 800db40:	4618      	mov	r0, r3
 800db42:	f7fa fbd7 	bl	80082f4 <GUI_ALLOC_h2p>
 800db46:	6a03      	ldr	r3, [r0, #32]
 800db48:	429c      	cmp	r4, r3
 800db4a:	d1f8      	bne.n	800db3e <WM__RemoveWindowFromList+0x26>
 800db4c:	6a2b      	ldr	r3, [r5, #32]
 800db4e:	6203      	str	r3, [r0, #32]
 800db50:	bd70      	pop	{r4, r5, r6, pc}
 800db52:	bd70      	pop	{r4, r5, r6, pc}

0800db54 <WM__Client2Screen>:
 800db54:	4603      	mov	r3, r0
 800db56:	4608      	mov	r0, r1
 800db58:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800db5c:	f9b3 1000 	ldrsh.w	r1, [r3]
 800db60:	f7fa bea9 	b.w	80088b6 <GUI_MoveRect>

0800db64 <_SetClipRectUserIntersect>:
 800db64:	4b11      	ldr	r3, [pc, #68]	; (800dbac <_SetClipRectUserIntersect+0x48>)
 800db66:	b530      	push	{r4, r5, lr}
 800db68:	681c      	ldr	r4, [r3, #0]
 800db6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800db6c:	b085      	sub	sp, #20
 800db6e:	4605      	mov	r5, r0
 800db70:	b1ba      	cbz	r2, 800dba2 <_SetClipRectUserIntersect+0x3e>
 800db72:	6810      	ldr	r0, [r2, #0]
 800db74:	6851      	ldr	r1, [r2, #4]
 800db76:	ab02      	add	r3, sp, #8
 800db78:	c303      	stmia	r3!, {r0, r1}
 800db7a:	4b0d      	ldr	r3, [pc, #52]	; (800dbb0 <_SetClipRectUserIntersect+0x4c>)
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	b900      	cbnz	r0, 800db82 <_SetClipRectUserIntersect+0x1e>
 800db80:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800db82:	f7fa fbc1 	bl	8008308 <GUI_ALLOC_LockH>
 800db86:	ac04      	add	r4, sp, #16
 800db88:	a902      	add	r1, sp, #8
 800db8a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800db8e:	f7ff ffe1 	bl	800db54 <WM__Client2Screen>
 800db92:	4620      	mov	r0, r4
 800db94:	f7fa fbc6 	bl	8008324 <GUI_ALLOC_UnlockH>
 800db98:	a802      	add	r0, sp, #8
 800db9a:	4629      	mov	r1, r5
 800db9c:	f7fc fcf0 	bl	800a580 <GUI__IntersectRect>
 800dba0:	a802      	add	r0, sp, #8
 800dba2:	f006 fdbd 	bl	8014720 <LCD_SetClipRectEx>
 800dba6:	b005      	add	sp, #20
 800dba8:	bd30      	pop	{r4, r5, pc}
 800dbaa:	bf00      	nop
 800dbac:	20000014 	.word	0x20000014
 800dbb0:	20027bd0 	.word	0x20027bd0

0800dbb4 <WM__ActivateClipRect>:
 800dbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbb6:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <WM__ActivateClipRect+0x3c>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800dbbe:	b10a      	cbz	r2, 800dbc4 <WM__ActivateClipRect+0x10>
 800dbc0:	480c      	ldr	r0, [pc, #48]	; (800dbf4 <WM__ActivateClipRect+0x40>)
 800dbc2:	e011      	b.n	800dbe8 <WM__ActivateClipRect+0x34>
 800dbc4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800dbc6:	f7fa fb9f 	bl	8008308 <GUI_ALLOC_LockH>
 800dbca:	9001      	str	r0, [sp, #4]
 800dbcc:	c803      	ldmia	r0, {r0, r1}
 800dbce:	ac02      	add	r4, sp, #8
 800dbd0:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbd4:	a801      	add	r0, sp, #4
 800dbd6:	f7fa fba5 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <WM__ActivateClipRect+0x44>)
 800dbdc:	6819      	ldr	r1, [r3, #0]
 800dbde:	b111      	cbz	r1, 800dbe6 <WM__ActivateClipRect+0x32>
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f7ff ff17 	bl	800da14 <WM__ClipAtParentBorders>
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f7ff ffbc 	bl	800db64 <_SetClipRectUserIntersect>
 800dbec:	b004      	add	sp, #16
 800dbee:	bd10      	pop	{r4, pc}
 800dbf0:	20000014 	.word	0x20000014
 800dbf4:	20000aa0 	.word	0x20000aa0
 800dbf8:	20027bd0 	.word	0x20027bd0

0800dbfc <WM__IsWindow>:
 800dbfc:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <WM__IsWindow+0x1c>)
 800dbfe:	b510      	push	{r4, lr}
 800dc00:	4604      	mov	r4, r0
 800dc02:	6818      	ldr	r0, [r3, #0]
 800dc04:	b128      	cbz	r0, 800dc12 <WM__IsWindow+0x16>
 800dc06:	42a0      	cmp	r0, r4
 800dc08:	d004      	beq.n	800dc14 <WM__IsWindow+0x18>
 800dc0a:	f7fa fb73 	bl	80082f4 <GUI_ALLOC_h2p>
 800dc0e:	6940      	ldr	r0, [r0, #20]
 800dc10:	e7f8      	b.n	800dc04 <WM__IsWindow+0x8>
 800dc12:	bd10      	pop	{r4, pc}
 800dc14:	2001      	movs	r0, #1
 800dc16:	bd10      	pop	{r4, pc}
 800dc18:	20027bf0 	.word	0x20027bf0

0800dc1c <WM__InvalidateDrawAndDescs>:
 800dc1c:	b513      	push	{r0, r1, r4, lr}
 800dc1e:	4604      	mov	r4, r0
 800dc20:	b300      	cbz	r0, 800dc64 <WM__InvalidateDrawAndDescs+0x48>
 800dc22:	f7fa fb71 	bl	8008308 <GUI_ALLOC_LockH>
 800dc26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dc28:	9001      	str	r0, [sp, #4]
 800dc2a:	079b      	lsls	r3, r3, #30
 800dc2c:	d517      	bpl.n	800dc5e <WM__InvalidateDrawAndDescs+0x42>
 800dc2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dc30:	b140      	cbz	r0, 800dc44 <WM__InvalidateDrawAndDescs+0x28>
 800dc32:	4b0d      	ldr	r3, [pc, #52]	; (800dc68 <WM__InvalidateDrawAndDescs+0x4c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	429c      	cmp	r4, r3
 800dc38:	d004      	beq.n	800dc44 <WM__InvalidateDrawAndDescs+0x28>
 800dc3a:	f006 fe51 	bl	80148e0 <GUI_MEMDEV_Delete>
 800dc3e:	9b01      	ldr	r3, [sp, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	625a      	str	r2, [r3, #36]	; 0x24
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 ff01 	bl	800ea4c <WM_GetFirstChild>
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	b13c      	cbz	r4, 800dc5e <WM__InvalidateDrawAndDescs+0x42>
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f7ff ffe4 	bl	800dc1c <WM__InvalidateDrawAndDescs>
 800dc54:	4620      	mov	r0, r4
 800dc56:	f7fa fb4d 	bl	80082f4 <GUI_ALLOC_h2p>
 800dc5a:	6a04      	ldr	r4, [r0, #32]
 800dc5c:	e7f6      	b.n	800dc4c <WM__InvalidateDrawAndDescs+0x30>
 800dc5e:	a801      	add	r0, sp, #4
 800dc60:	f7fa fb60 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dc64:	b002      	add	sp, #8
 800dc66:	bd10      	pop	{r4, pc}
 800dc68:	20027c20 	.word	0x20027c20

0800dc6c <WM__RectIsNZ>:
 800dc6c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dc70:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	dc08      	bgt.n	800dc8a <WM__RectIsNZ+0x1e>
 800dc78:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800dc7c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800dc80:	4283      	cmp	r3, r0
 800dc82:	bfcc      	ite	gt
 800dc84:	2000      	movgt	r0, #0
 800dc86:	2001      	movle	r0, #1
 800dc88:	4770      	bx	lr
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	4770      	bx	lr

0800dc8e <WM_SendMessage>:
 800dc8e:	b538      	push	{r3, r4, r5, lr}
 800dc90:	460d      	mov	r5, r1
 800dc92:	4604      	mov	r4, r0
 800dc94:	b148      	cbz	r0, 800dcaa <WM_SendMessage+0x1c>
 800dc96:	f7fc f861 	bl	8009d5c <GUI_Lock>
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f001 faeb 	bl	800f278 <WM__SendMessage>
 800dca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca6:	f7fc b84f 	b.w	8009d48 <GUI_Unlock>
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}

0800dcac <WM__SendMsgNoData>:
 800dcac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcae:	ab04      	add	r3, sp, #16
 800dcb0:	9001      	str	r0, [sp, #4]
 800dcb2:	f843 1d10 	str.w	r1, [r3, #-16]!
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	f001 fade 	bl	800f278 <WM__SendMessage>
 800dcbc:	b005      	add	sp, #20
 800dcbe:	f85d fb04 	ldr.w	pc, [sp], #4

0800dcc2 <WM__GetClientRectWin>:
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	800b      	strh	r3, [r1, #0]
 800dcc6:	8802      	ldrh	r2, [r0, #0]
 800dcc8:	804b      	strh	r3, [r1, #2]
 800dcca:	8883      	ldrh	r3, [r0, #4]
 800dccc:	1a9b      	subs	r3, r3, r2
 800dcce:	808b      	strh	r3, [r1, #4]
 800dcd0:	8842      	ldrh	r2, [r0, #2]
 800dcd2:	88c3      	ldrh	r3, [r0, #6]
 800dcd4:	1a9b      	subs	r3, r3, r2
 800dcd6:	80cb      	strh	r3, [r1, #6]
 800dcd8:	4770      	bx	lr
	...

0800dcdc <WM__GetTopLevelLayer>:
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	4604      	mov	r4, r0
 800dce0:	f7fa fb08 	bl	80082f4 <GUI_ALLOC_h2p>
 800dce4:	6980      	ldr	r0, [r0, #24]
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d1f9      	bne.n	800dcde <WM__GetTopLevelLayer+0x2>
 800dcea:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <WM__GetTopLevelLayer+0x24>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4294      	cmp	r4, r2
 800dcf0:	d005      	beq.n	800dcfe <WM__GetTopLevelLayer+0x22>
 800dcf2:	6858      	ldr	r0, [r3, #4]
 800dcf4:	4284      	cmp	r4, r0
 800dcf6:	bf0c      	ite	eq
 800dcf8:	2001      	moveq	r0, #1
 800dcfa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800dcfe:	bd10      	pop	{r4, pc}
 800dd00:	20027bd4 	.word	0x20027bd4

0800dd04 <_Invalidate1Abs>:
 800dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd06:	b085      	sub	sp, #20
 800dd08:	460d      	mov	r5, r1
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	4617      	mov	r7, r2
 800dd0e:	f7fa faf1 	bl	80082f4 <GUI_ALLOC_h2p>
 800dd12:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800dd14:	9001      	str	r0, [sp, #4]
 800dd16:	078b      	lsls	r3, r1, #30
 800dd18:	d53e      	bpl.n	800dd98 <_Invalidate1Abs+0x94>
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	f7ff ffa6 	bl	800dc6c <WM__RectIsNZ>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	d039      	beq.n	800dd98 <_Invalidate1Abs+0x94>
 800dd24:	f640 0301 	movw	r3, #2049	; 0x801
 800dd28:	400b      	ands	r3, r1
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d034      	beq.n	800dd98 <_Invalidate1Abs+0x94>
 800dd2e:	4630      	mov	r0, r6
 800dd30:	f7fa faea 	bl	8008308 <GUI_ALLOC_LockH>
 800dd34:	ac02      	add	r4, sp, #8
 800dd36:	4602      	mov	r2, r0
 800dd38:	9001      	str	r0, [sp, #4]
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f7fc fc3c 	bl	800a5ba <GUI__IntersectRects>
 800dd42:	4620      	mov	r0, r4
 800dd44:	f7ff ff92 	bl	800dc6c <WM__RectIsNZ>
 800dd48:	b318      	cbz	r0, 800dd92 <_Invalidate1Abs+0x8e>
 800dd4a:	9b01      	ldr	r3, [sp, #4]
 800dd4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd4e:	f244 0120 	movw	r1, #16416	; 0x4020
 800dd52:	4011      	ands	r1, r2
 800dd54:	f103 0508 	add.w	r5, r3, #8
 800dd58:	b129      	cbz	r1, 800dd66 <_Invalidate1Abs+0x62>
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f7fa fd7e 	bl	8008860 <GUI_MergeRect>
 800dd64:	e015      	b.n	800dd92 <_Invalidate1Abs+0x8e>
 800dd66:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd6a:	433a      	orrs	r2, r7
 800dd6c:	e885 0003 	stmia.w	r5, {r0, r1}
 800dd70:	629a      	str	r2, [r3, #40]	; 0x28
 800dd72:	4a0a      	ldr	r2, [pc, #40]	; (800dd9c <_Invalidate1Abs+0x98>)
 800dd74:	8813      	ldrh	r3, [r2, #0]
 800dd76:	4630      	mov	r0, r6
 800dd78:	3301      	adds	r3, #1
 800dd7a:	8013      	strh	r3, [r2, #0]
 800dd7c:	f7ff ffae 	bl	800dcdc <WM__GetTopLevelLayer>
 800dd80:	4a07      	ldr	r2, [pc, #28]	; (800dda0 <_Invalidate1Abs+0x9c>)
 800dd82:	2301      	movs	r3, #1
 800dd84:	fa03 f000 	lsl.w	r0, r3, r0
 800dd88:	6813      	ldr	r3, [r2, #0]
 800dd8a:	4303      	orrs	r3, r0
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	f7fc f8f3 	bl	8009f78 <GUI_SignalEvent>
 800dd92:	a801      	add	r0, sp, #4
 800dd94:	f7fa fac6 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dd98:	b005      	add	sp, #20
 800dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9c:	20027bec 	.word	0x20027bec
 800dda0:	20027bfc 	.word	0x20027bfc

0800dda4 <WM__Invalidate1Abs>:
 800dda4:	2220      	movs	r2, #32
 800dda6:	f7ff bfad 	b.w	800dd04 <_Invalidate1Abs>

0800ddaa <WM_InvalidateWindowAndDescsEx>:
 800ddaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddac:	460f      	mov	r7, r1
 800ddae:	b085      	sub	sp, #20
 800ddb0:	4615      	mov	r5, r2
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	b348      	cbz	r0, 800de0a <WM_InvalidateWindowAndDescsEx+0x60>
 800ddb6:	f7fa faa7 	bl	8008308 <GUI_ALLOC_LockH>
 800ddba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ddbc:	ac04      	add	r4, sp, #16
 800ddbe:	079b      	lsls	r3, r3, #30
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800ddc6:	d403      	bmi.n	800ddd0 <WM_InvalidateWindowAndDescsEx+0x26>
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f7fa faab 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ddce:	e01c      	b.n	800de0a <WM_InvalidateWindowAndDescsEx+0x60>
 800ddd0:	4639      	mov	r1, r7
 800ddd2:	a802      	add	r0, sp, #8
 800ddd4:	f7fc fbf1 	bl	800a5ba <GUI__IntersectRects>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d0f5      	beq.n	800ddc8 <WM_InvalidateWindowAndDescsEx+0x1e>
 800dddc:	4620      	mov	r0, r4
 800ddde:	f7fa faa1 	bl	8008324 <GUI_ALLOC_UnlockH>
 800dde2:	462a      	mov	r2, r5
 800dde4:	a902      	add	r1, sp, #8
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7ff ff8c 	bl	800dd04 <_Invalidate1Abs>
 800ddec:	4630      	mov	r0, r6
 800ddee:	f000 fe2d 	bl	800ea4c <WM_GetFirstChild>
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	b14c      	cbz	r4, 800de0a <WM_InvalidateWindowAndDescsEx+0x60>
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	a902      	add	r1, sp, #8
 800ddfc:	f7ff ffd5 	bl	800ddaa <WM_InvalidateWindowAndDescsEx>
 800de00:	4620      	mov	r0, r4
 800de02:	f7fa fa77 	bl	80082f4 <GUI_ALLOC_h2p>
 800de06:	6a04      	ldr	r4, [r0, #32]
 800de08:	e7f4      	b.n	800ddf4 <WM_InvalidateWindowAndDescsEx+0x4a>
 800de0a:	b005      	add	sp, #20
 800de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de0e <WM__InvalidateRect>:
 800de0e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800de12:	4680      	mov	r8, r0
 800de14:	4617      	mov	r7, r2
 800de16:	461d      	mov	r5, r3
 800de18:	460c      	mov	r4, r1
 800de1a:	b381      	cbz	r1, 800de7e <WM__InvalidateRect+0x70>
 800de1c:	4608      	mov	r0, r1
 800de1e:	f7fa fa73 	bl	8008308 <GUI_ALLOC_LockH>
 800de22:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800de24:	9001      	str	r0, [sp, #4]
 800de26:	07b3      	lsls	r3, r6, #30
 800de28:	4602      	mov	r2, r0
 800de2a:	d525      	bpl.n	800de78 <WM__InvalidateRect+0x6a>
 800de2c:	4641      	mov	r1, r8
 800de2e:	a802      	add	r0, sp, #8
 800de30:	f7fc fbc3 	bl	800a5ba <GUI__IntersectRects>
 800de34:	b300      	cbz	r0, 800de78 <WM__InvalidateRect+0x6a>
 800de36:	f640 0301 	movw	r3, #2049	; 0x801
 800de3a:	4033      	ands	r3, r6
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d107      	bne.n	800de50 <WM__InvalidateRect+0x42>
 800de40:	9901      	ldr	r1, [sp, #4]
 800de42:	462b      	mov	r3, r5
 800de44:	6a0a      	ldr	r2, [r1, #32]
 800de46:	6989      	ldr	r1, [r1, #24]
 800de48:	a802      	add	r0, sp, #8
 800de4a:	f7ff ffe0 	bl	800de0e <WM__InvalidateRect>
 800de4e:	e004      	b.n	800de5a <WM__InvalidateRect+0x4c>
 800de50:	462a      	mov	r2, r5
 800de52:	a902      	add	r1, sp, #8
 800de54:	4620      	mov	r0, r4
 800de56:	f7ff ff55 	bl	800dd04 <_Invalidate1Abs>
 800de5a:	9b01      	ldr	r3, [sp, #4]
 800de5c:	69dc      	ldr	r4, [r3, #28]
 800de5e:	b15c      	cbz	r4, 800de78 <WM__InvalidateRect+0x6a>
 800de60:	42bc      	cmp	r4, r7
 800de62:	d009      	beq.n	800de78 <WM__InvalidateRect+0x6a>
 800de64:	4620      	mov	r0, r4
 800de66:	462a      	mov	r2, r5
 800de68:	a902      	add	r1, sp, #8
 800de6a:	f7ff ff9e 	bl	800ddaa <WM_InvalidateWindowAndDescsEx>
 800de6e:	4620      	mov	r0, r4
 800de70:	f7fa fa40 	bl	80082f4 <GUI_ALLOC_h2p>
 800de74:	6a04      	ldr	r4, [r0, #32]
 800de76:	e7f2      	b.n	800de5e <WM__InvalidateRect+0x50>
 800de78:	a801      	add	r0, sp, #4
 800de7a:	f7fa fa53 	bl	8008324 <GUI_ALLOC_UnlockH>
 800de7e:	b004      	add	sp, #16
 800de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de84 <WM__InvalidateParent>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	4605      	mov	r5, r0
 800de88:	4608      	mov	r0, r1
 800de8a:	460c      	mov	r4, r1
 800de8c:	4616      	mov	r6, r2
 800de8e:	f7fa fa31 	bl	80082f4 <GUI_ALLOC_h2p>
 800de92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800de98:	4632      	mov	r2, r6
 800de9a:	4621      	mov	r1, r4
 800de9c:	4628      	mov	r0, r5
 800de9e:	bf14      	ite	ne
 800dea0:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 800dea4:	2320      	moveq	r3, #32
 800dea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800deaa:	f7ff bfb0 	b.w	800de0e <WM__InvalidateRect>

0800deae <WM__InvalidateRectEx>:
 800deae:	2320      	movs	r3, #32
 800deb0:	f7ff bfad 	b.w	800de0e <WM__InvalidateRect>

0800deb4 <WM__DetachWindow>:
 800deb4:	b513      	push	{r0, r1, r4, lr}
 800deb6:	4604      	mov	r4, r0
 800deb8:	f7fa fa26 	bl	8008308 <GUI_ALLOC_LockH>
 800debc:	6981      	ldr	r1, [r0, #24]
 800debe:	9001      	str	r0, [sp, #4]
 800dec0:	b141      	cbz	r1, 800ded4 <WM__DetachWindow+0x20>
 800dec2:	6a02      	ldr	r2, [r0, #32]
 800dec4:	f7ff fff3 	bl	800deae <WM__InvalidateRectEx>
 800dec8:	4620      	mov	r0, r4
 800deca:	f7ff fe25 	bl	800db18 <WM__RemoveWindowFromList>
 800dece:	9b01      	ldr	r3, [sp, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	619a      	str	r2, [r3, #24]
 800ded4:	a801      	add	r0, sp, #4
 800ded6:	f7fa fa25 	bl	8008324 <GUI_ALLOC_UnlockH>
 800deda:	b002      	add	sp, #8
 800dedc:	bd10      	pop	{r4, pc}

0800dede <WM_InvalidateRect>:
 800dede:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee0:	460f      	mov	r7, r1
 800dee2:	b087      	sub	sp, #28
 800dee4:	4605      	mov	r5, r0
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d038      	beq.n	800df5c <WM_InvalidateRect+0x7e>
 800deea:	f7fb ff37 	bl	8009d5c <GUI_Lock>
 800deee:	4628      	mov	r0, r5
 800def0:	f7fa fa0a 	bl	8008308 <GUI_ALLOC_LockH>
 800def4:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800def6:	9001      	str	r0, [sp, #4]
 800def8:	07b2      	lsls	r2, r6, #30
 800defa:	d52a      	bpl.n	800df52 <WM_InvalidateRect+0x74>
 800defc:	c803      	ldmia	r0, {r0, r1}
 800defe:	ac04      	add	r4, sp, #16
 800df00:	03f3      	lsls	r3, r6, #15
 800df02:	e884 0003 	stmia.w	r4, {r0, r1}
 800df06:	d502      	bpl.n	800df0e <WM_InvalidateRect+0x30>
 800df08:	4628      	mov	r0, r5
 800df0a:	f7ff fe87 	bl	800dc1c <WM__InvalidateDrawAndDescs>
 800df0e:	b15f      	cbz	r7, 800df28 <WM_InvalidateRect+0x4a>
 800df10:	6838      	ldr	r0, [r7, #0]
 800df12:	6879      	ldr	r1, [r7, #4]
 800df14:	ab02      	add	r3, sp, #8
 800df16:	c303      	stmia	r3!, {r0, r1}
 800df18:	a902      	add	r1, sp, #8
 800df1a:	9801      	ldr	r0, [sp, #4]
 800df1c:	f7ff fe1a 	bl	800db54 <WM__Client2Screen>
 800df20:	a902      	add	r1, sp, #8
 800df22:	4620      	mov	r0, r4
 800df24:	f7fc fb2c 	bl	800a580 <GUI__IntersectRect>
 800df28:	4629      	mov	r1, r5
 800df2a:	4620      	mov	r0, r4
 800df2c:	f7ff fd72 	bl	800da14 <WM__ClipAtParentBorders>
 800df30:	b178      	cbz	r0, 800df52 <WM_InvalidateRect+0x74>
 800df32:	f640 0301 	movw	r3, #2049	; 0x801
 800df36:	4033      	ands	r3, r6
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d106      	bne.n	800df4a <WM_InvalidateRect+0x6c>
 800df3c:	9b01      	ldr	r3, [sp, #4]
 800df3e:	4620      	mov	r0, r4
 800df40:	6a1a      	ldr	r2, [r3, #32]
 800df42:	6999      	ldr	r1, [r3, #24]
 800df44:	f7ff ffb3 	bl	800deae <WM__InvalidateRectEx>
 800df48:	e003      	b.n	800df52 <WM_InvalidateRect+0x74>
 800df4a:	4621      	mov	r1, r4
 800df4c:	4628      	mov	r0, r5
 800df4e:	f7ff ff29 	bl	800dda4 <WM__Invalidate1Abs>
 800df52:	a801      	add	r0, sp, #4
 800df54:	f7fa f9e6 	bl	8008324 <GUI_ALLOC_UnlockH>
 800df58:	f7fb fef6 	bl	8009d48 <GUI_Unlock>
 800df5c:	b007      	add	sp, #28
 800df5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df60 <WM_InvalidateWindow>:
 800df60:	2100      	movs	r1, #0
 800df62:	f7ff bfbc 	b.w	800dede <WM_InvalidateRect>

0800df66 <WM__SelectTopLevelLayer>:
 800df66:	b508      	push	{r3, lr}
 800df68:	f7ff feb8 	bl	800dcdc <WM__GetTopLevelLayer>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	db03      	blt.n	800df78 <WM__SelectTopLevelLayer+0x12>
 800df70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800df74:	f7fb bea4 	b.w	8009cc0 <GUI_SelectLayer>
 800df78:	bd08      	pop	{r3, pc}
	...

0800df7c <WM_SelectWindow>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	4604      	mov	r4, r0
 800df80:	f7fb feec 	bl	8009d5c <GUI_Lock>
 800df84:	4b0d      	ldr	r3, [pc, #52]	; (800dfbc <WM_SelectWindow+0x40>)
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	461d      	mov	r5, r3
 800df8a:	6c96      	ldr	r6, [r2, #72]	; 0x48
 800df8c:	b90c      	cbnz	r4, 800df92 <WM_SelectWindow+0x16>
 800df8e:	4b0c      	ldr	r3, [pc, #48]	; (800dfc0 <WM_SelectWindow+0x44>)
 800df90:	681c      	ldr	r4, [r3, #0]
 800df92:	6494      	str	r4, [r2, #72]	; 0x48
 800df94:	4620      	mov	r0, r4
 800df96:	f7ff ffe6 	bl	800df66 <WM__SelectTopLevelLayer>
 800df9a:	f7fc fe4f 	bl	800ac3c <LCD_SetClipRectMax>
 800df9e:	4620      	mov	r0, r4
 800dfa0:	f7fa f9a8 	bl	80082f4 <GUI_ALLOC_h2p>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	f9b0 2000 	ldrsh.w	r2, [r0]
 800dfaa:	64da      	str	r2, [r3, #76]	; 0x4c
 800dfac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800dfb0:	651a      	str	r2, [r3, #80]	; 0x50
 800dfb2:	f7fb fec9 	bl	8009d48 <GUI_Unlock>
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	bd70      	pop	{r4, r5, r6, pc}
 800dfba:	bf00      	nop
 800dfbc:	20000014 	.word	0x20000014
 800dfc0:	20027bf0 	.word	0x20027bf0

0800dfc4 <WM_CreateWindowAsChild>:
 800dfc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dfcc:	4698      	mov	r8, r3
 800dfce:	4605      	mov	r5, r0
 800dfd0:	460e      	mov	r6, r1
 800dfd2:	4617      	mov	r7, r2
 800dfd4:	f7fb fec2 	bl	8009d5c <GUI_Lock>
 800dfd8:	4b4d      	ldr	r3, [pc, #308]	; (800e110 <WM_CreateWindowAsChild+0x14c>)
 800dfda:	f8d3 9000 	ldr.w	r9, [r3]
 800dfde:	f1ba 0f00 	cmp.w	sl, #0
 800dfe2:	d128      	bne.n	800e036 <WM_CreateWindowAsChild+0x72>
 800dfe4:	4b4b      	ldr	r3, [pc, #300]	; (800e114 <WM_CreateWindowAsChild+0x150>)
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	b353      	cbz	r3, 800e040 <WM_CreateWindowAsChild+0x7c>
 800dfea:	4b4b      	ldr	r3, [pc, #300]	; (800e118 <WM_CreateWindowAsChild+0x154>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	7c5a      	ldrb	r2, [r3, #17]
 800dff0:	4b4a      	ldr	r3, [pc, #296]	; (800e11c <WM_CreateWindowAsChild+0x158>)
 800dff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	2a01      	cmp	r2, #1
 800dffa:	d921      	bls.n	800e040 <WM_CreateWindowAsChild+0x7c>
 800dffc:	469a      	mov	sl, r3
 800dffe:	4650      	mov	r0, sl
 800e000:	f7fa f982 	bl	8008308 <GUI_ALLOC_LockH>
 800e004:	f9b0 1000 	ldrsh.w	r1, [r0]
 800e008:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e00c:	9001      	str	r0, [sp, #4]
 800e00e:	440d      	add	r5, r1
 800e010:	4416      	add	r6, r2
 800e012:	b91f      	cbnz	r7, 800e01c <WM_CreateWindowAsChild+0x58>
 800e014:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e018:	1a5f      	subs	r7, r3, r1
 800e01a:	3701      	adds	r7, #1
 800e01c:	f1b8 0f00 	cmp.w	r8, #0
 800e020:	d105      	bne.n	800e02e <WM_CreateWindowAsChild+0x6a>
 800e022:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800e026:	ebc2 0803 	rsb	r8, r2, r3
 800e02a:	f108 0801 	add.w	r8, r8, #1
 800e02e:	a801      	add	r0, sp, #4
 800e030:	f7fa f978 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e034:	e004      	b.n	800e040 <WM_CreateWindowAsChild+0x7c>
 800e036:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800e03a:	d1e0      	bne.n	800dffe <WM_CreateWindowAsChild+0x3a>
 800e03c:	f04f 0a00 	mov.w	sl, #0
 800e040:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e042:	302c      	adds	r0, #44	; 0x2c
 800e044:	f7fa fb4a 	bl	80086dc <GUI_ALLOC_AllocZero>
 800e048:	4604      	mov	r4, r0
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d059      	beq.n	800e102 <WM_CreateWindowAsChild+0x13e>
 800e04e:	4a31      	ldr	r2, [pc, #196]	; (800e114 <WM_CreateWindowAsChild+0x150>)
 800e050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e052:	ea49 0903 	orr.w	r9, r9, r3
 800e056:	8813      	ldrh	r3, [r2, #0]
 800e058:	3301      	adds	r3, #1
 800e05a:	8013      	strh	r3, [r2, #0]
 800e05c:	f7fa f954 	bl	8008308 <GUI_ALLOC_LockH>
 800e060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e062:	6103      	str	r3, [r0, #16]
 800e064:	f10d 0b08 	add.w	fp, sp, #8
 800e068:	4b2d      	ldr	r3, [pc, #180]	; (800e120 <WM_CreateWindowAsChild+0x15c>)
 800e06a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e06c:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800e070:	ea09 0303 	and.w	r3, r9, r3
 800e074:	8005      	strh	r5, [r0, #0]
 800e076:	8046      	strh	r6, [r0, #2]
 800e078:	443d      	add	r5, r7
 800e07a:	4446      	add	r6, r8
 800e07c:	4313      	orrs	r3, r2
 800e07e:	3d01      	subs	r5, #1
 800e080:	3e01      	subs	r6, #1
 800e082:	6283      	str	r3, [r0, #40]	; 0x28
 800e084:	8085      	strh	r5, [r0, #4]
 800e086:	80c6      	strh	r6, [r0, #6]
 800e088:	4658      	mov	r0, fp
 800e08a:	f7fa f94b 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e08e:	4b25      	ldr	r3, [pc, #148]	; (800e124 <WM_CreateWindowAsChild+0x160>)
 800e090:	6818      	ldr	r0, [r3, #0]
 800e092:	b148      	cbz	r0, 800e0a8 <WM_CreateWindowAsChild+0xe4>
 800e094:	f7fa f92e 	bl	80082f4 <GUI_ALLOC_h2p>
 800e098:	4605      	mov	r5, r0
 800e09a:	4620      	mov	r0, r4
 800e09c:	f7fa f92a 	bl	80082f4 <GUI_ALLOC_h2p>
 800e0a0:	696b      	ldr	r3, [r5, #20]
 800e0a2:	6143      	str	r3, [r0, #20]
 800e0a4:	616c      	str	r4, [r5, #20]
 800e0a6:	e000      	b.n	800e0aa <WM_CreateWindowAsChild+0xe6>
 800e0a8:	601c      	str	r4, [r3, #0]
 800e0aa:	4651      	mov	r1, sl
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f7ff fcdd 	bl	800da6c <WM__InsertWindowIntoList>
 800e0b2:	f019 0f20 	tst.w	r9, #32
 800e0b6:	d002      	beq.n	800e0be <WM_CreateWindowAsChild+0xfa>
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f7ff ff5f 	bl	800df7c <WM_SelectWindow>
 800e0be:	f019 0f01 	tst.w	r9, #1
 800e0c2:	bf1f      	itttt	ne
 800e0c4:	4a18      	ldrne	r2, [pc, #96]	; (800e128 <WM_CreateWindowAsChild+0x164>)
 800e0c6:	6813      	ldrne	r3, [r2, #0]
 800e0c8:	3301      	addne	r3, #1
 800e0ca:	6013      	strne	r3, [r2, #0]
 800e0cc:	f019 0f40 	tst.w	r9, #64	; 0x40
 800e0d0:	d002      	beq.n	800e0d8 <WM_CreateWindowAsChild+0x114>
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f000 fd56 	bl	800eb84 <WM_BringToBottom>
 800e0d8:	f019 0f02 	tst.w	r9, #2
 800e0dc:	d00d      	beq.n	800e0fa <WM_CreateWindowAsChild+0x136>
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f7fa f912 	bl	8008308 <GUI_ALLOC_LockH>
 800e0e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e0e6:	9000      	str	r0, [sp, #0]
 800e0e8:	f043 0302 	orr.w	r3, r3, #2
 800e0ec:	6283      	str	r3, [r0, #40]	; 0x28
 800e0ee:	4658      	mov	r0, fp
 800e0f0:	f7fa f918 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f7ff ff33 	bl	800df60 <WM_InvalidateWindow>
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f7ff fdd5 	bl	800dcac <WM__SendMsgNoData>
 800e102:	f7fb fe21 	bl	8009d48 <GUI_Unlock>
 800e106:	4620      	mov	r0, r4
 800e108:	b003      	add	sp, #12
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	bf00      	nop
 800e110:	20027c04 	.word	0x20027c04
 800e114:	20027bcc 	.word	0x20027bcc
 800e118:	20000014 	.word	0x20000014
 800e11c:	20027bd4 	.word	0x20027bd4
 800e120:	003f3f9f 	.word	0x003f3f9f
 800e124:	20027bf0 	.word	0x20027bf0
 800e128:	20027c24 	.word	0x20027c24

0800e12c <WM_DeleteWindow>:
 800e12c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e12e:	4604      	mov	r4, r0
 800e130:	2800      	cmp	r0, #0
 800e132:	d077      	beq.n	800e224 <WM_DeleteWindow+0xf8>
 800e134:	f7fb fe12 	bl	8009d5c <GUI_Lock>
 800e138:	4620      	mov	r0, r4
 800e13a:	f7ff fd5f 	bl	800dbfc <WM__IsWindow>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d06e      	beq.n	800e220 <WM_DeleteWindow+0xf4>
 800e142:	4620      	mov	r0, r4
 800e144:	f7ff fdca 	bl	800dcdc <WM__GetTopLevelLayer>
 800e148:	210b      	movs	r1, #11
 800e14a:	4605      	mov	r5, r0
 800e14c:	4620      	mov	r0, r4
 800e14e:	f7ff fdad 	bl	800dcac <WM__SendMsgNoData>
 800e152:	4620      	mov	r0, r4
 800e154:	f001 f837 	bl	800f1c6 <WM__DeleteAssocTimer>
 800e158:	4620      	mov	r0, r4
 800e15a:	f7fa f8d5 	bl	8008308 <GUI_ALLOC_LockH>
 800e15e:	9001      	str	r0, [sp, #4]
 800e160:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800e162:	b108      	cbz	r0, 800e168 <WM_DeleteWindow+0x3c>
 800e164:	f006 fbbc 	bl	80148e0 <GUI_MEMDEV_Delete>
 800e168:	4b2f      	ldr	r3, [pc, #188]	; (800e228 <WM_DeleteWindow+0xfc>)
 800e16a:	4a30      	ldr	r2, [pc, #192]	; (800e22c <WM_DeleteWindow+0x100>)
 800e16c:	2100      	movs	r1, #0
 800e16e:	6099      	str	r1, [r3, #8]
 800e170:	4b2f      	ldr	r3, [pc, #188]	; (800e230 <WM_DeleteWindow+0x104>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e178:	4284      	cmp	r4, r0
 800e17a:	bf08      	it	eq
 800e17c:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800e180:	4a2c      	ldr	r2, [pc, #176]	; (800e234 <WM_DeleteWindow+0x108>)
 800e182:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e186:	428c      	cmp	r4, r1
 800e188:	bf04      	itt	eq
 800e18a:	2100      	moveq	r1, #0
 800e18c:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800e190:	4b29      	ldr	r3, [pc, #164]	; (800e238 <WM_DeleteWindow+0x10c>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2200      	movs	r2, #0
 800e196:	b12b      	cbz	r3, 800e1a4 <WM_DeleteWindow+0x78>
 800e198:	6859      	ldr	r1, [r3, #4]
 800e19a:	428c      	cmp	r4, r1
 800e19c:	bf08      	it	eq
 800e19e:	605a      	streq	r2, [r3, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	e7f8      	b.n	800e196 <WM_DeleteWindow+0x6a>
 800e1a4:	2107      	movs	r1, #7
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	f000 fe68 	bl	800ee7c <WM_NotifyParent>
 800e1ac:	9e01      	ldr	r6, [sp, #4]
 800e1ae:	69f0      	ldr	r0, [r6, #28]
 800e1b0:	f7ff ffbc 	bl	800e12c <WM_DeleteWindow>
 800e1b4:	69f3      	ldr	r3, [r6, #28]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f9      	bne.n	800e1ae <WM_DeleteWindow+0x82>
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f7ff fe7a 	bl	800deb4 <WM__DetachWindow>
 800e1c0:	4b1e      	ldr	r3, [pc, #120]	; (800e23c <WM_DeleteWindow+0x110>)
 800e1c2:	6818      	ldr	r0, [r3, #0]
 800e1c4:	b150      	cbz	r0, 800e1dc <WM_DeleteWindow+0xb0>
 800e1c6:	f7fa f895 	bl	80082f4 <GUI_ALLOC_h2p>
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	6940      	ldr	r0, [r0, #20]
 800e1ce:	4284      	cmp	r4, r0
 800e1d0:	d1f8      	bne.n	800e1c4 <WM_DeleteWindow+0x98>
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f7fa f88e 	bl	80082f4 <GUI_ALLOC_h2p>
 800e1d8:	6943      	ldr	r3, [r0, #20]
 800e1da:	6173      	str	r3, [r6, #20]
 800e1dc:	9b01      	ldr	r3, [sp, #4]
 800e1de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1e0:	07d1      	lsls	r1, r2, #31
 800e1e2:	bf41      	itttt	mi
 800e1e4:	4916      	ldrmi	r1, [pc, #88]	; (800e240 <WM_DeleteWindow+0x114>)
 800e1e6:	680b      	ldrmi	r3, [r1, #0]
 800e1e8:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800e1ec:	600b      	strmi	r3, [r1, #0]
 800e1ee:	0693      	lsls	r3, r2, #26
 800e1f0:	bf44      	itt	mi
 800e1f2:	4a14      	ldrmi	r2, [pc, #80]	; (800e244 <WM_DeleteWindow+0x118>)
 800e1f4:	8813      	ldrhmi	r3, [r2, #0]
 800e1f6:	a801      	add	r0, sp, #4
 800e1f8:	bf44      	itt	mi
 800e1fa:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800e1fe:	8013      	strhmi	r3, [r2, #0]
 800e200:	f7fa f890 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e204:	4a10      	ldr	r2, [pc, #64]	; (800e248 <WM_DeleteWindow+0x11c>)
 800e206:	8813      	ldrh	r3, [r2, #0]
 800e208:	4620      	mov	r0, r4
 800e20a:	3b01      	subs	r3, #1
 800e20c:	8013      	strh	r3, [r2, #0]
 800e20e:	f7fa f8b9 	bl	8008384 <GUI_ALLOC_Free>
 800e212:	2d00      	cmp	r5, #0
 800e214:	db04      	blt.n	800e220 <WM_DeleteWindow+0xf4>
 800e216:	4b0d      	ldr	r3, [pc, #52]	; (800e24c <WM_DeleteWindow+0x120>)
 800e218:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e21c:	f7ff feae 	bl	800df7c <WM_SelectWindow>
 800e220:	f7fb fd92 	bl	8009d48 <GUI_Unlock>
 800e224:	b002      	add	sp, #8
 800e226:	bd70      	pop	{r4, r5, r6, pc}
 800e228:	20000a8c 	.word	0x20000a8c
 800e22c:	20027be4 	.word	0x20027be4
 800e230:	20027bf4 	.word	0x20027bf4
 800e234:	20027c18 	.word	0x20027c18
 800e238:	20027c10 	.word	0x20027c10
 800e23c:	20027bf0 	.word	0x20027bf0
 800e240:	20027c24 	.word	0x20027c24
 800e244:	20027bec 	.word	0x20027bec
 800e248:	20027bcc 	.word	0x20027bcc
 800e24c:	20027bd4 	.word	0x20027bd4

0800e250 <_Exec1Input>:
 800e250:	4b1d      	ldr	r3, [pc, #116]	; (800e2c8 <_Exec1Input+0x78>)
 800e252:	685a      	ldr	r2, [r3, #4]
 800e254:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e256:	461d      	mov	r5, r3
 800e258:	b1ea      	cbz	r2, 800e296 <_Exec1Input+0x46>
 800e25a:	f7fb fd7f 	bl	8009d5c <GUI_Lock>
 800e25e:	4b1b      	ldr	r3, [pc, #108]	; (800e2cc <_Exec1Input+0x7c>)
 800e260:	681c      	ldr	r4, [r3, #0]
 800e262:	b1ac      	cbz	r4, 800e290 <_Exec1Input+0x40>
 800e264:	4620      	mov	r0, r4
 800e266:	f7fa f84f 	bl	8008308 <GUI_ALLOC_LockH>
 800e26a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e26c:	9001      	str	r0, [sp, #4]
 800e26e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800e272:	6946      	ldr	r6, [r0, #20]
 800e274:	d007      	beq.n	800e286 <_Exec1Input+0x36>
 800e276:	a801      	add	r0, sp, #4
 800e278:	f7fa f854 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e27c:	4620      	mov	r0, r4
 800e27e:	f7ff ff55 	bl	800e12c <WM_DeleteWindow>
 800e282:	4634      	mov	r4, r6
 800e284:	e7ed      	b.n	800e262 <_Exec1Input+0x12>
 800e286:	a801      	add	r0, sp, #4
 800e288:	4634      	mov	r4, r6
 800e28a:	f7fa f84b 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e28e:	e7e8      	b.n	800e262 <_Exec1Input+0x12>
 800e290:	606c      	str	r4, [r5, #4]
 800e292:	f7fb fd59 	bl	8009d48 <GUI_Unlock>
 800e296:	4b0e      	ldr	r3, [pc, #56]	; (800e2d0 <_Exec1Input+0x80>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	b103      	cbz	r3, 800e29e <_Exec1Input+0x4e>
 800e29c:	4798      	blx	r3
 800e29e:	4b0d      	ldr	r3, [pc, #52]	; (800e2d4 <_Exec1Input+0x84>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	b953      	cbnz	r3, 800e2ba <_Exec1Input+0x6a>
 800e2a4:	4b0c      	ldr	r3, [pc, #48]	; (800e2d8 <_Exec1Input+0x88>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800e2ac:	b148      	cbz	r0, 800e2c2 <_Exec1Input+0x72>
 800e2ae:	f7fb fcd5 	bl	8009c5c <GUI_PollKeyMsg>
 800e2b2:	3000      	adds	r0, #0
 800e2b4:	bf18      	it	ne
 800e2b6:	2001      	movne	r0, #1
 800e2b8:	e003      	b.n	800e2c2 <_Exec1Input+0x72>
 800e2ba:	4798      	blx	r3
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d0f1      	beq.n	800e2a4 <_Exec1Input+0x54>
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	b002      	add	sp, #8
 800e2c4:	bd70      	pop	{r4, r5, r6, pc}
 800e2c6:	bf00      	nop
 800e2c8:	20000a8c 	.word	0x20000a8c
 800e2cc:	20027bf0 	.word	0x20027bf0
 800e2d0:	20027bdc 	.word	0x20027bdc
 800e2d4:	20027bbc 	.word	0x20027bbc
 800e2d8:	20000014 	.word	0x20000014

0800e2dc <WM_GetActiveWindow>:
 800e2dc:	4b01      	ldr	r3, [pc, #4]	; (800e2e4 <WM_GetActiveWindow+0x8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e2e2:	4770      	bx	lr
 800e2e4:	20000014 	.word	0x20000014

0800e2e8 <WM__GetNextIVR>:
 800e2e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e2ec:	4f5d      	ldr	r7, [pc, #372]	; (800e464 <WM__GetNextIVR+0x17c>)
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	f000 80b1 	beq.w	800e45c <WM__GetNextIVR+0x174>
 800e2fa:	4a5b      	ldr	r2, [pc, #364]	; (800e468 <WM__GetNextIVR+0x180>)
 800e2fc:	6a13      	ldr	r3, [r2, #32]
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	4614      	mov	r4, r2
 800e302:	dd03      	ble.n	800e30c <WM__GetNextIVR+0x24>
 800e304:	3b01      	subs	r3, #1
 800e306:	6213      	str	r3, [r2, #32]
 800e308:	2000      	movs	r0, #0
 800e30a:	e0a7      	b.n	800e45c <WM__GetNextIVR+0x174>
 800e30c:	f102 0614 	add.w	r6, r2, #20
 800e310:	69d3      	ldr	r3, [r2, #28]
 800e312:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e316:	3301      	adds	r3, #1
 800e318:	ad02      	add	r5, sp, #8
 800e31a:	61d3      	str	r3, [r2, #28]
 800e31c:	e885 0003 	stmia.w	r5, {r0, r1}
 800e320:	b923      	cbnz	r3, 800e32c <WM__GetNextIVR+0x44>
 800e322:	8993      	ldrh	r3, [r2, #12]
 800e324:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e328:	89d3      	ldrh	r3, [r2, #14]
 800e32a:	e010      	b.n	800e34e <WM__GetNextIVR+0x66>
 800e32c:	8b13      	ldrh	r3, [r2, #24]
 800e32e:	8ad2      	ldrh	r2, [r2, #22]
 800e330:	f8ad 200a 	strh.w	r2, [sp, #10]
 800e334:	3301      	adds	r3, #1
 800e336:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800e33a:	b21b      	sxth	r3, r3
 800e33c:	429a      	cmp	r2, r3
 800e33e:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e342:	da06      	bge.n	800e352 <WM__GetNextIVR+0x6a>
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e34a:	8b63      	ldrh	r3, [r4, #26]
 800e34c:	3301      	adds	r3, #1
 800e34e:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e352:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800e356:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 800e35a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800e468 <WM__GetNextIVR+0x180>
 800e35e:	429a      	cmp	r2, r3
 800e360:	dd04      	ble.n	800e36c <WM__GetNextIVR+0x84>
 800e362:	6a23      	ldr	r3, [r4, #32]
 800e364:	3b01      	subs	r3, #1
 800e366:	2000      	movs	r0, #0
 800e368:	6223      	str	r3, [r4, #32]
 800e36a:	e077      	b.n	800e45c <WM__GetNextIVR+0x174>
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800e370:	f7f9 ffca 	bl	8008308 <GUI_ALLOC_LockH>
 800e374:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800e378:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800e37c:	9001      	str	r0, [sp, #4]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d11c      	bne.n	800e3bc <WM__GetNextIVR+0xd4>
 800e382:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800e386:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e38a:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 800e38e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e392:	4b34      	ldr	r3, [pc, #208]	; (800e464 <WM__GetNextIVR+0x17c>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e398:	b15a      	cbz	r2, 800e3b2 <WM__GetNextIVR+0xca>
 800e39a:	4610      	mov	r0, r2
 800e39c:	f7f9 ffaa 	bl	80082f4 <GUI_ALLOC_h2p>
 800e3a0:	4680      	mov	r8, r0
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	6a00      	ldr	r0, [r0, #32]
 800e3a8:	f7ff f950 	bl	800d64c <_Findy1>
 800e3ac:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e3b0:	e7f2      	b.n	800e398 <WM__GetNextIVR+0xb0>
 800e3b2:	9b01      	ldr	r3, [sp, #4]
 800e3b4:	4629      	mov	r1, r5
 800e3b6:	69d8      	ldr	r0, [r3, #28]
 800e3b8:	f7ff f948 	bl	800d64c <_Findy1>
 800e3bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e3c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3c8:	b16a      	cbz	r2, 800e3e6 <WM__GetNextIVR+0xfe>
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	f7f9 ff92 	bl	80082f4 <GUI_ALLOC_h2p>
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4629      	mov	r1, r5
 800e3d6:	6a00      	ldr	r0, [r0, #32]
 800e3d8:	f7ff f98b 	bl	800d6f2 <_Findx0>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	d1ed      	bne.n	800e3bc <WM__GetNextIVR+0xd4>
 800e3e0:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e3e4:	e7f0      	b.n	800e3c8 <WM__GetNextIVR+0xe0>
 800e3e6:	9b01      	ldr	r3, [sp, #4]
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	69d8      	ldr	r0, [r3, #28]
 800e3ec:	f7ff f981 	bl	800d6f2 <_Findx0>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	d1e3      	bne.n	800e3bc <WM__GetNextIVR+0xd4>
 800e3f4:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 800e3f8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800e3fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e400:	429a      	cmp	r2, r3
 800e402:	dd07      	ble.n	800e414 <WM__GetNextIVR+0x12c>
 800e404:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e408:	e886 0003 	stmia.w	r6, {r0, r1}
 800e40c:	a801      	add	r0, sp, #4
 800e40e:	f7f9 ff89 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e412:	e797      	b.n	800e344 <WM__GetNextIVR+0x5c>
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e418:	b152      	cbz	r2, 800e430 <WM__GetNextIVR+0x148>
 800e41a:	4610      	mov	r0, r2
 800e41c:	f7f9 ff6a 	bl	80082f4 <GUI_ALLOC_h2p>
 800e420:	4607      	mov	r7, r0
 800e422:	2200      	movs	r2, #0
 800e424:	4629      	mov	r1, r5
 800e426:	6a00      	ldr	r0, [r0, #32]
 800e428:	f7ff f9a6 	bl	800d778 <_Findx1>
 800e42c:	69ba      	ldr	r2, [r7, #24]
 800e42e:	e7f3      	b.n	800e418 <WM__GetNextIVR+0x130>
 800e430:	af04      	add	r7, sp, #16
 800e432:	4629      	mov	r1, r5
 800e434:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800e438:	69d8      	ldr	r0, [r3, #28]
 800e43a:	f7ff f99d 	bl	800d778 <_Findx1>
 800e43e:	4638      	mov	r0, r7
 800e440:	f7f9 ff70 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e444:	69e2      	ldr	r2, [r4, #28]
 800e446:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e44a:	429a      	cmp	r2, r3
 800e44c:	dc89      	bgt.n	800e362 <WM__GetNextIVR+0x7a>
 800e44e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e452:	e886 0003 	stmia.w	r6, {r0, r1}
 800e456:	f7ff fbad 	bl	800dbb4 <WM__ActivateClipRect>
 800e45a:	2001      	movs	r0, #1
 800e45c:	b004      	add	sp, #16
 800e45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e462:	bf00      	nop
 800e464:	20000014 	.word	0x20000014
 800e468:	20000a8c 	.word	0x20000a8c

0800e46c <WM__InitIVRSearch>:
 800e46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e470:	4e39      	ldr	r6, [pc, #228]	; (800e558 <WM__InitIVRSearch+0xec>)
 800e472:	6832      	ldr	r2, [r6, #0]
 800e474:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 800e478:	b086      	sub	sp, #24
 800e47a:	4680      	mov	r8, r0
 800e47c:	b913      	cbnz	r3, 800e484 <WM__InitIVRSearch+0x18>
 800e47e:	f7ff fb99 	bl	800dbb4 <WM__ActivateClipRect>
 800e482:	e064      	b.n	800e54e <WM__InitIVRSearch+0xe2>
 800e484:	4f35      	ldr	r7, [pc, #212]	; (800e55c <WM__InitIVRSearch+0xf0>)
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	3301      	adds	r3, #1
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	623b      	str	r3, [r7, #32]
 800e48e:	463d      	mov	r5, r7
 800e490:	dc5d      	bgt.n	800e54e <WM__InitIVRSearch+0xe2>
 800e492:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800e494:	f7f9 ff38 	bl	8008308 <GUI_ALLOC_LockH>
 800e498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e49c:	61fb      	str	r3, [r7, #28]
 800e49e:	4b30      	ldr	r3, [pc, #192]	; (800e560 <WM__InitIVRSearch+0xf4>)
 800e4a0:	9000      	str	r0, [sp, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	b113      	cbz	r3, 800e4ac <WM__InitIVRSearch+0x40>
 800e4a6:	ab02      	add	r3, sp, #8
 800e4a8:	3008      	adds	r0, #8
 800e4aa:	e004      	b.n	800e4b6 <WM__InitIVRSearch+0x4a>
 800e4ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e4ae:	f013 0402 	ands.w	r4, r3, #2
 800e4b2:	d00c      	beq.n	800e4ce <WM__InitIVRSearch+0x62>
 800e4b4:	ab02      	add	r3, sp, #8
 800e4b6:	c803      	ldmia	r0, {r0, r1}
 800e4b8:	ac02      	add	r4, sp, #8
 800e4ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800e4be:	f1b8 0f00 	cmp.w	r8, #0
 800e4c2:	d00c      	beq.n	800e4de <WM__InitIVRSearch+0x72>
 800e4c4:	4641      	mov	r1, r8
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	f7fc f85a 	bl	800a580 <GUI__IntersectRect>
 800e4cc:	e007      	b.n	800e4de <WM__InitIVRSearch+0x72>
 800e4ce:	6a3b      	ldr	r3, [r7, #32]
 800e4d0:	4668      	mov	r0, sp
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	623b      	str	r3, [r7, #32]
 800e4d6:	f7f9 ff25 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e4da:	4620      	mov	r0, r4
 800e4dc:	e038      	b.n	800e550 <WM__InitIVRSearch+0xe4>
 800e4de:	6833      	ldr	r3, [r6, #0]
 800e4e0:	4f20      	ldr	r7, [pc, #128]	; (800e564 <WM__InitIVRSearch+0xf8>)
 800e4e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4e4:	b1c2      	cbz	r2, 800e518 <WM__InitIVRSearch+0xac>
 800e4e6:	9b00      	ldr	r3, [sp, #0]
 800e4e8:	6810      	ldr	r0, [r2, #0]
 800e4ea:	6851      	ldr	r1, [r2, #4]
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	ab04      	add	r3, sp, #16
 800e4f0:	c303      	stmia	r3!, {r0, r1}
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	b133      	cbz	r3, 800e504 <WM__InitIVRSearch+0x98>
 800e4f6:	a801      	add	r0, sp, #4
 800e4f8:	f7f9 ff14 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e4fc:	6838      	ldr	r0, [r7, #0]
 800e4fe:	f7f9 ff03 	bl	8008308 <GUI_ALLOC_LockH>
 800e502:	9001      	str	r0, [sp, #4]
 800e504:	a904      	add	r1, sp, #16
 800e506:	9801      	ldr	r0, [sp, #4]
 800e508:	f7ff fb24 	bl	800db54 <WM__Client2Screen>
 800e50c:	4620      	mov	r0, r4
 800e50e:	a904      	add	r1, sp, #16
 800e510:	f7fc f836 	bl	800a580 <GUI__IntersectRect>
 800e514:	a801      	add	r0, sp, #4
 800e516:	e000      	b.n	800e51a <WM__InitIVRSearch+0xae>
 800e518:	4668      	mov	r0, sp
 800e51a:	f7f9 ff03 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	b119      	cbz	r1, 800e52a <WM__InitIVRSearch+0xbe>
 800e522:	4620      	mov	r0, r4
 800e524:	f7ff fa76 	bl	800da14 <WM__ClipAtParentBorders>
 800e528:	b128      	cbz	r0, 800e536 <WM__InitIVRSearch+0xca>
 800e52a:	6833      	ldr	r3, [r6, #0]
 800e52c:	4620      	mov	r0, r4
 800e52e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800e530:	f7ff fa70 	bl	800da14 <WM__ClipAtParentBorders>
 800e534:	b918      	cbnz	r0, 800e53e <WM__InitIVRSearch+0xd2>
 800e536:	6a2b      	ldr	r3, [r5, #32]
 800e538:	3b01      	subs	r3, #1
 800e53a:	622b      	str	r3, [r5, #32]
 800e53c:	e008      	b.n	800e550 <WM__InitIVRSearch+0xe4>
 800e53e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e542:	4b09      	ldr	r3, [pc, #36]	; (800e568 <WM__InitIVRSearch+0xfc>)
 800e544:	e883 0003 	stmia.w	r3, {r0, r1}
 800e548:	f7ff fece 	bl	800e2e8 <WM__GetNextIVR>
 800e54c:	e000      	b.n	800e550 <WM__InitIVRSearch+0xe4>
 800e54e:	2001      	movs	r0, #1
 800e550:	b006      	add	sp, #24
 800e552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e556:	bf00      	nop
 800e558:	20000014 	.word	0x20000014
 800e55c:	20000a8c 	.word	0x20000a8c
 800e560:	20027c00 	.word	0x20027c00
 800e564:	20027bd0 	.word	0x20027bd0
 800e568:	20000a98 	.word	0x20000a98

0800e56c <WM_SetDefault>:
 800e56c:	b508      	push	{r3, lr}
 800e56e:	f7fa facd 	bl	8008b0c <GL_SetDefault>
 800e572:	4b02      	ldr	r3, [pc, #8]	; (800e57c <WM_SetDefault+0x10>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	2200      	movs	r2, #0
 800e578:	645a      	str	r2, [r3, #68]	; 0x44
 800e57a:	bd08      	pop	{r3, pc}
 800e57c:	20000014 	.word	0x20000014

0800e580 <WM__Paint1>:
 800e580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e582:	b089      	sub	sp, #36	; 0x24
 800e584:	4604      	mov	r4, r0
 800e586:	f7f9 febf 	bl	8008308 <GUI_ALLOC_LockH>
 800e58a:	6907      	ldr	r7, [r0, #16]
 800e58c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800e58e:	9001      	str	r0, [sp, #4]
 800e590:	3008      	adds	r0, #8
 800e592:	c803      	ldmia	r0, {r0, r1}
 800e594:	ae02      	add	r6, sp, #8
 800e596:	e886 0003 	stmia.w	r6, {r0, r1}
 800e59a:	a801      	add	r0, sp, #4
 800e59c:	f7f9 fec2 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e5a0:	2f00      	cmp	r7, #0
 800e5a2:	d032      	beq.n	800e60a <WM__Paint1+0x8a>
 800e5a4:	07ab      	lsls	r3, r5, #30
 800e5a6:	d530      	bpl.n	800e60a <WM__Paint1+0x8a>
 800e5a8:	212e      	movs	r1, #46	; 0x2e
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 fc46 	bl	800ee3c <WM_SendMessageNoPara>
 800e5b0:	4b17      	ldr	r3, [pc, #92]	; (800e610 <WM__Paint1+0x90>)
 800e5b2:	781a      	ldrb	r2, [r3, #0]
 800e5b4:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800e5b8:	f102 0201 	add.w	r2, r2, #1
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	461d      	mov	r5, r3
 800e5c0:	d00a      	beq.n	800e5d8 <WM__Paint1+0x58>
 800e5c2:	230f      	movs	r3, #15
 800e5c4:	9405      	str	r4, [sp, #20]
 800e5c6:	9304      	str	r3, [sp, #16]
 800e5c8:	9607      	str	r6, [sp, #28]
 800e5ca:	f7ff ffcf 	bl	800e56c <WM_SetDefault>
 800e5ce:	a904      	add	r1, sp, #16
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 fe51 	bl	800f278 <WM__SendMessage>
 800e5d6:	e011      	b.n	800e5fc <WM__Paint1+0x7c>
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f7ff ff47 	bl	800e46c <WM__InitIVRSearch>
 800e5de:	b168      	cbz	r0, 800e5fc <WM__Paint1+0x7c>
 800e5e0:	270f      	movs	r7, #15
 800e5e2:	9405      	str	r4, [sp, #20]
 800e5e4:	9704      	str	r7, [sp, #16]
 800e5e6:	9607      	str	r6, [sp, #28]
 800e5e8:	f7ff ffc0 	bl	800e56c <WM_SetDefault>
 800e5ec:	a904      	add	r1, sp, #16
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	f000 fe42 	bl	800f278 <WM__SendMessage>
 800e5f4:	f7ff fe78 	bl	800e2e8 <WM__GetNextIVR>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d1f2      	bne.n	800e5e2 <WM__Paint1+0x62>
 800e5fc:	782b      	ldrb	r3, [r5, #0]
 800e5fe:	212f      	movs	r1, #47	; 0x2f
 800e600:	3b01      	subs	r3, #1
 800e602:	4620      	mov	r0, r4
 800e604:	702b      	strb	r3, [r5, #0]
 800e606:	f000 fc19 	bl	800ee3c <WM_SendMessageNoPara>
 800e60a:	b009      	add	sp, #36	; 0x24
 800e60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e60e:	bf00      	nop
 800e610:	20027c00 	.word	0x20027c00

0800e614 <WM__Paint>:
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e618:	b088      	sub	sp, #32
 800e61a:	ae06      	add	r6, sp, #24
 800e61c:	9003      	str	r0, [sp, #12]
 800e61e:	f7f9 fe73 	bl	8008308 <GUI_ALLOC_LockH>
 800e622:	4603      	mov	r3, r0
 800e624:	f100 0208 	add.w	r2, r0, #8
 800e628:	9005      	str	r0, [sp, #20]
 800e62a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e62e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e630:	699f      	ldr	r7, [r3, #24]
 800e632:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800e636:	f244 0420 	movw	r4, #16416	; 0x4020
 800e63a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e63e:	402c      	ands	r4, r5
 800e640:	a805      	add	r0, sp, #20
 800e642:	f7f9 fe6f 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e646:	2c00      	cmp	r4, #0
 800e648:	d035      	beq.n	800e6b6 <WM__Paint+0xa2>
 800e64a:	f1b8 0f00 	cmp.w	r8, #0
 800e64e:	d017      	beq.n	800e680 <WM__Paint+0x6c>
 800e650:	9903      	ldr	r1, [sp, #12]
 800e652:	4630      	mov	r0, r6
 800e654:	f7ff f9de 	bl	800da14 <WM__ClipAtParentBorders>
 800e658:	b190      	cbz	r0, 800e680 <WM__Paint+0x6c>
 800e65a:	9803      	ldr	r0, [sp, #12]
 800e65c:	f7ff fc8e 	bl	800df7c <WM_SelectWindow>
 800e660:	0769      	lsls	r1, r5, #29
 800e662:	d50f      	bpl.n	800e684 <WM__Paint+0x70>
 800e664:	b127      	cbz	r7, 800e670 <WM__Paint+0x5c>
 800e666:	f005 0501 	and.w	r5, r5, #1
 800e66a:	f085 0501 	eor.w	r5, r5, #1
 800e66e:	e000      	b.n	800e672 <WM__Paint+0x5e>
 800e670:	2501      	movs	r5, #1
 800e672:	9500      	str	r5, [sp, #0]
 800e674:	2300      	movs	r3, #0
 800e676:	aa03      	add	r2, sp, #12
 800e678:	4911      	ldr	r1, [pc, #68]	; (800e6c0 <WM__Paint+0xac>)
 800e67a:	4630      	mov	r0, r6
 800e67c:	f006 fa1e 	bl	8014abc <GUI_MEMDEV_Draw>
 800e680:	2400      	movs	r4, #0
 800e682:	e003      	b.n	800e68c <WM__Paint+0x78>
 800e684:	9803      	ldr	r0, [sp, #12]
 800e686:	f7ff f953 	bl	800d930 <WM__PaintWinAndOverlays>
 800e68a:	2401      	movs	r4, #1
 800e68c:	9803      	ldr	r0, [sp, #12]
 800e68e:	f7f9 fe3b 	bl	8008308 <GUI_ALLOC_LockH>
 800e692:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e694:	9005      	str	r0, [sp, #20]
 800e696:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800e69a:	f023 0320 	bic.w	r3, r3, #32
 800e69e:	0492      	lsls	r2, r2, #18
 800e6a0:	bf48      	it	mi
 800e6a2:	f043 0304 	orrmi.w	r3, r3, #4
 800e6a6:	6283      	str	r3, [r0, #40]	; 0x28
 800e6a8:	a805      	add	r0, sp, #20
 800e6aa:	f7f9 fe3b 	bl	8008324 <GUI_ALLOC_UnlockH>
 800e6ae:	4a05      	ldr	r2, [pc, #20]	; (800e6c4 <WM__Paint+0xb0>)
 800e6b0:	8813      	ldrh	r3, [r2, #0]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	8013      	strh	r3, [r2, #0]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	b008      	add	sp, #32
 800e6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6be:	bf00      	nop
 800e6c0:	0800d9a9 	.word	0x0800d9a9
 800e6c4:	20027bec 	.word	0x20027bec

0800e6c8 <_Exec1Draw>:
 800e6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6cc:	4b1f      	ldr	r3, [pc, #124]	; (800e74c <_Exec1Draw+0x84>)
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 800e6d4:	b09f      	sub	sp, #124	; 0x7c
 800e6d6:	461f      	mov	r7, r3
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d033      	beq.n	800e744 <_Exec1Draw+0x7c>
 800e6dc:	4b1c      	ldr	r3, [pc, #112]	; (800e750 <_Exec1Draw+0x88>)
 800e6de:	8818      	ldrh	r0, [r3, #0]
 800e6e0:	461e      	mov	r6, r3
 800e6e2:	b378      	cbz	r0, 800e744 <_Exec1Draw+0x7c>
 800e6e4:	f7fb fb3a 	bl	8009d5c <GUI_Lock>
 800e6e8:	4b1a      	ldr	r3, [pc, #104]	; (800e754 <_Exec1Draw+0x8c>)
 800e6ea:	689c      	ldr	r4, [r3, #8]
 800e6ec:	461d      	mov	r5, r3
 800e6ee:	b90c      	cbnz	r4, 800e6f4 <_Exec1Draw+0x2c>
 800e6f0:	4b19      	ldr	r3, [pc, #100]	; (800e758 <_Exec1Draw+0x90>)
 800e6f2:	681c      	ldr	r4, [r3, #0]
 800e6f4:	a801      	add	r0, sp, #4
 800e6f6:	f7fa f955 	bl	80089a4 <GUI_SaveContext_W>
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 800e700:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800e702:	b924      	cbnz	r4, 800e70e <_Exec1Draw+0x46>
 800e704:	2400      	movs	r4, #0
 800e706:	e00d      	b.n	800e724 <_Exec1Draw+0x5c>
 800e708:	f1b9 0f00 	cmp.w	r9, #0
 800e70c:	d10a      	bne.n	800e724 <_Exec1Draw+0x5c>
 800e70e:	4620      	mov	r0, r4
 800e710:	f7ff ff80 	bl	800e614 <WM__Paint>
 800e714:	4681      	mov	r9, r0
 800e716:	4620      	mov	r0, r4
 800e718:	f7f9 fdec 	bl	80082f4 <GUI_ALLOC_h2p>
 800e71c:	6944      	ldr	r4, [r0, #20]
 800e71e:	2c00      	cmp	r4, #0
 800e720:	d1f2      	bne.n	800e708 <_Exec1Draw+0x40>
 800e722:	e7ef      	b.n	800e704 <_Exec1Draw+0x3c>
 800e724:	4640      	mov	r0, r8
 800e726:	60ac      	str	r4, [r5, #8]
 800e728:	f7fa f968 	bl	80089fc <GUI_SetColor>
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7fa f95a 	bl	80089e6 <GUI_SetBkColor>
 800e732:	a801      	add	r0, sp, #4
 800e734:	f7fa f940 	bl	80089b8 <GUI_RestoreContext>
 800e738:	f7fb fb06 	bl	8009d48 <GUI_Unlock>
 800e73c:	8830      	ldrh	r0, [r6, #0]
 800e73e:	3000      	adds	r0, #0
 800e740:	bf18      	it	ne
 800e742:	2001      	movne	r0, #1
 800e744:	b01f      	add	sp, #124	; 0x7c
 800e746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e74a:	bf00      	nop
 800e74c:	20000014 	.word	0x20000014
 800e750:	20027bec 	.word	0x20027bec
 800e754:	20000a8c 	.word	0x20000a8c
 800e758:	20027bf0 	.word	0x20027bf0

0800e75c <WM_Exec>:
 800e75c:	b570      	push	{r4, r5, r6, lr}
 800e75e:	f7fb fafd 	bl	8009d5c <GUI_Lock>
 800e762:	4b1b      	ldr	r3, [pc, #108]	; (800e7d0 <WM_Exec+0x74>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	b103      	cbz	r3, 800e76a <WM_Exec+0xe>
 800e768:	4798      	blx	r3
 800e76a:	2500      	movs	r5, #0
 800e76c:	f7ff fd70 	bl	800e250 <_Exec1Input>
 800e770:	b108      	cbz	r0, 800e776 <WM_Exec+0x1a>
 800e772:	2501      	movs	r5, #1
 800e774:	e7fa      	b.n	800e76c <WM_Exec+0x10>
 800e776:	4b17      	ldr	r3, [pc, #92]	; (800e7d4 <WM_Exec+0x78>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e77e:	b144      	cbz	r4, 800e792 <WM_Exec+0x36>
 800e780:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <WM_Exec+0x7c>)
 800e782:	881c      	ldrh	r4, [r3, #0]
 800e784:	b12c      	cbz	r4, 800e792 <WM_Exec+0x36>
 800e786:	4b15      	ldr	r3, [pc, #84]	; (800e7dc <WM_Exec+0x80>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	b1c3      	cbz	r3, 800e7be <WM_Exec+0x62>
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4798      	blx	r3
 800e790:	2401      	movs	r4, #1
 800e792:	f7fb fad9 	bl	8009d48 <GUI_Unlock>
 800e796:	f7ff ff97 	bl	800e6c8 <_Exec1Draw>
 800e79a:	4606      	mov	r6, r0
 800e79c:	b108      	cbz	r0, 800e7a2 <WM_Exec+0x46>
 800e79e:	2501      	movs	r5, #1
 800e7a0:	e7f9      	b.n	800e796 <WM_Exec+0x3a>
 800e7a2:	f7fb fadb 	bl	8009d5c <GUI_Lock>
 800e7a6:	b174      	cbz	r4, 800e7c6 <WM_Exec+0x6a>
 800e7a8:	4b0c      	ldr	r3, [pc, #48]	; (800e7dc <WM_Exec+0x80>)
 800e7aa:	6818      	ldr	r0, [r3, #0]
 800e7ac:	b120      	cbz	r0, 800e7b8 <WM_Exec+0x5c>
 800e7ae:	6843      	ldr	r3, [r0, #4]
 800e7b0:	4798      	blx	r3
 800e7b2:	4b0b      	ldr	r3, [pc, #44]	; (800e7e0 <WM_Exec+0x84>)
 800e7b4:	601e      	str	r6, [r3, #0]
 800e7b6:	e006      	b.n	800e7c6 <WM_Exec+0x6a>
 800e7b8:	f005 ffaa 	bl	8014710 <GUI__ManageCache>
 800e7bc:	e003      	b.n	800e7c6 <WM_Exec+0x6a>
 800e7be:	2001      	movs	r0, #1
 800e7c0:	f005 ffa6 	bl	8014710 <GUI__ManageCache>
 800e7c4:	e7e4      	b.n	800e790 <WM_Exec+0x34>
 800e7c6:	f7fb fabf 	bl	8009d48 <GUI_Unlock>
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	bd70      	pop	{r4, r5, r6, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20027be0 	.word	0x20027be0
 800e7d4:	20000014 	.word	0x20000014
 800e7d8:	20027bec 	.word	0x20027bec
 800e7dc:	20027c14 	.word	0x20027c14
 800e7e0:	20027bfc 	.word	0x20027bfc

0800e7e4 <WM_Activate>:
 800e7e4:	4b02      	ldr	r3, [pc, #8]	; (800e7f0 <WM_Activate+0xc>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800e7ee:	4770      	bx	lr
 800e7f0:	20000014 	.word	0x20000014

0800e7f4 <WM_Deactivate>:
 800e7f4:	b508      	push	{r3, lr}
 800e7f6:	4b06      	ldr	r3, [pc, #24]	; (800e810 <WM_Deactivate+0x1c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800e800:	f7fb faac 	bl	8009d5c <GUI_Lock>
 800e804:	f7fc fa1a 	bl	800ac3c <LCD_SetClipRectMax>
 800e808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e80c:	f7fb ba9c 	b.w	8009d48 <GUI_Unlock>
 800e810:	20000014 	.word	0x20000014

0800e814 <WM_DefaultProc>:
 800e814:	b510      	push	{r4, lr}
 800e816:	4604      	mov	r4, r0
 800e818:	6840      	ldr	r0, [r0, #4]
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	2b17      	cmp	r3, #23
 800e81e:	d010      	beq.n	800e842 <WM_DefaultProc+0x2e>
 800e820:	dc07      	bgt.n	800e832 <WM_DefaultProc+0x1e>
 800e822:	2b0e      	cmp	r3, #14
 800e824:	d00f      	beq.n	800e846 <WM_DefaultProc+0x32>
 800e826:	2b14      	cmp	r3, #20
 800e828:	d115      	bne.n	800e856 <WM_DefaultProc+0x42>
 800e82a:	68e1      	ldr	r1, [r4, #12]
 800e82c:	f000 fdd4 	bl	800f3d8 <WM__GetClientRectEx>
 800e830:	e011      	b.n	800e856 <WM_DefaultProc+0x42>
 800e832:	2b22      	cmp	r3, #34	; 0x22
 800e834:	d00c      	beq.n	800e850 <WM_DefaultProc+0x3c>
 800e836:	2b28      	cmp	r3, #40	; 0x28
 800e838:	d10d      	bne.n	800e856 <WM_DefaultProc+0x42>
 800e83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e83e:	f7ff bb8f 	b.w	800df60 <WM_InvalidateWindow>
 800e842:	60e0      	str	r0, [r4, #12]
 800e844:	bd10      	pop	{r4, pc}
 800e846:	4621      	mov	r1, r4
 800e848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e84c:	f000 bb03 	b.w	800ee56 <WM_SendToParent>
 800e850:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e854:	e000      	b.n	800e858 <WM_DefaultProc+0x44>
 800e856:	2300      	movs	r3, #0
 800e858:	60e3      	str	r3, [r4, #12]
 800e85a:	bd10      	pop	{r4, pc}

0800e85c <_cbBackWin>:
 800e85c:	6803      	ldr	r3, [r0, #0]
 800e85e:	2b0e      	cmp	r3, #14
 800e860:	b510      	push	{r4, lr}
 800e862:	4604      	mov	r4, r0
 800e864:	d002      	beq.n	800e86c <_cbBackWin+0x10>
 800e866:	2b0f      	cmp	r3, #15
 800e868:	d009      	beq.n	800e87e <_cbBackWin+0x22>
 800e86a:	e020      	b.n	800e8ae <_cbBackWin+0x52>
 800e86c:	68c3      	ldr	r3, [r0, #12]
 800e86e:	685a      	ldr	r2, [r3, #4]
 800e870:	2a01      	cmp	r2, #1
 800e872:	d121      	bne.n	800e8b8 <_cbBackWin+0x5c>
 800e874:	6818      	ldr	r0, [r3, #0]
 800e876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e87a:	f7fb b9e7 	b.w	8009c4c <GUI_StoreKey>
 800e87e:	4a0f      	ldr	r2, [pc, #60]	; (800e8bc <_cbBackWin+0x60>)
 800e880:	6843      	ldr	r3, [r0, #4]
 800e882:	6811      	ldr	r1, [r2, #0]
 800e884:	428b      	cmp	r3, r1
 800e886:	d006      	beq.n	800e896 <_cbBackWin+0x3a>
 800e888:	6852      	ldr	r2, [r2, #4]
 800e88a:	4293      	cmp	r3, r2
 800e88c:	bf0c      	ite	eq
 800e88e:	2301      	moveq	r3, #1
 800e890:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800e894:	e000      	b.n	800e898 <_cbBackWin+0x3c>
 800e896:	2300      	movs	r3, #0
 800e898:	4a09      	ldr	r2, [pc, #36]	; (800e8c0 <_cbBackWin+0x64>)
 800e89a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e89e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e8a2:	4298      	cmp	r0, r3
 800e8a4:	d003      	beq.n	800e8ae <_cbBackWin+0x52>
 800e8a6:	f7fa f89e 	bl	80089e6 <GUI_SetBkColor>
 800e8aa:	f7fa f9ff 	bl	8008cac <GUI_Clear>
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8b4:	f7ff bfae 	b.w	800e814 <WM_DefaultProc>
 800e8b8:	bd10      	pop	{r4, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20027bd4 	.word	0x20027bd4
 800e8c0:	20027c08 	.word	0x20027c08

0800e8c4 <WM_Init>:
 800e8c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e8c8:	4d2a      	ldr	r5, [pc, #168]	; (800e974 <WM_Init+0xb0>)
 800e8ca:	7828      	ldrb	r0, [r5, #0]
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d14d      	bne.n	800e96c <WM_Init+0xa8>
 800e8d0:	4b29      	ldr	r3, [pc, #164]	; (800e978 <WM_Init+0xb4>)
 800e8d2:	4e2a      	ldr	r6, [pc, #168]	; (800e97c <WM_Init+0xb8>)
 800e8d4:	6018      	str	r0, [r3, #0]
 800e8d6:	4b2a      	ldr	r3, [pc, #168]	; (800e980 <WM_Init+0xbc>)
 800e8d8:	4f2a      	ldr	r7, [pc, #168]	; (800e984 <WM_Init+0xc0>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9b0 <WM_Init+0xec>
 800e8e0:	6458      	str	r0, [r3, #68]	; 0x44
 800e8e2:	4b29      	ldr	r3, [pc, #164]	; (800e988 <WM_Init+0xc4>)
 800e8e4:	60a8      	str	r0, [r5, #8]
 800e8e6:	8018      	strh	r0, [r3, #0]
 800e8e8:	4b28      	ldr	r3, [pc, #160]	; (800e98c <WM_Init+0xc8>)
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	8018      	strh	r0, [r3, #0]
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f7fa fadc 	bl	8008eac <GUI_DEVICE__GetpDriver>
 800e8f4:	b1a8      	cbz	r0, 800e922 <WM_Init+0x5e>
 800e8f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8fa:	2302      	movs	r3, #2
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e902:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800e906:	461a      	mov	r2, r3
 800e908:	9103      	str	r1, [sp, #12]
 800e90a:	9602      	str	r6, [sp, #8]
 800e90c:	4608      	mov	r0, r1
 800e90e:	f7ff fb59 	bl	800dfc4 <WM_CreateWindowAsChild>
 800e912:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e916:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800e91a:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 800e91e:	f7ff fb1f 	bl	800df60 <WM_InvalidateWindow>
 800e922:	3401      	adds	r4, #1
 800e924:	2c02      	cmp	r4, #2
 800e926:	d1e2      	bne.n	800e8ee <WM_Init+0x2a>
 800e928:	4819      	ldr	r0, [pc, #100]	; (800e990 <WM_Init+0xcc>)
 800e92a:	f000 fd4d 	bl	800f3c8 <WM__AddCriticalHandle>
 800e92e:	4819      	ldr	r0, [pc, #100]	; (800e994 <WM_Init+0xd0>)
 800e930:	f000 fd4a 	bl	800f3c8 <WM__AddCriticalHandle>
 800e934:	4818      	ldr	r0, [pc, #96]	; (800e998 <WM_Init+0xd4>)
 800e936:	f000 fd47 	bl	800f3c8 <WM__AddCriticalHandle>
 800e93a:	4818      	ldr	r0, [pc, #96]	; (800e99c <WM_Init+0xd8>)
 800e93c:	f000 fd44 	bl	800f3c8 <WM__AddCriticalHandle>
 800e940:	4817      	ldr	r0, [pc, #92]	; (800e9a0 <WM_Init+0xdc>)
 800e942:	f000 fd41 	bl	800f3c8 <WM__AddCriticalHandle>
 800e946:	4817      	ldr	r0, [pc, #92]	; (800e9a4 <WM_Init+0xe0>)
 800e948:	f000 fd3e 	bl	800f3c8 <WM__AddCriticalHandle>
 800e94c:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <WM_Init+0xc0>)
 800e94e:	6818      	ldr	r0, [r3, #0]
 800e950:	f7ff fb14 	bl	800df7c <WM_SelectWindow>
 800e954:	f7ff ff46 	bl	800e7e4 <WM_Activate>
 800e958:	2301      	movs	r3, #1
 800e95a:	702b      	strb	r3, [r5, #0]
 800e95c:	4812      	ldr	r0, [pc, #72]	; (800e9a8 <WM_Init+0xe4>)
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <WM_Init+0xe8>)
 800e960:	626b      	str	r3, [r5, #36]	; 0x24
 800e962:	b004      	add	sp, #16
 800e964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e968:	f7fa ba7a 	b.w	8008e60 <GUI__RegisterExit>
 800e96c:	b004      	add	sp, #16
 800e96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e972:	bf00      	nop
 800e974:	20000a8c 	.word	0x20000a8c
 800e978:	20027bf0 	.word	0x20027bf0
 800e97c:	0800e85d 	.word	0x0800e85d
 800e980:	20000014 	.word	0x20000014
 800e984:	20027bd4 	.word	0x20027bd4
 800e988:	20027bec 	.word	0x20027bec
 800e98c:	20027bcc 	.word	0x20027bcc
 800e990:	20027c48 	.word	0x20027c48
 800e994:	20027c38 	.word	0x20027c38
 800e998:	20027c28 	.word	0x20027c28
 800e99c:	20027c50 	.word	0x20027c50
 800e9a0:	20027c40 	.word	0x20027c40
 800e9a4:	20027c30 	.word	0x20027c30
 800e9a8:	20000ab0 	.word	0x20000ab0
 800e9ac:	0800d589 	.word	0x0800d589
 800e9b0:	20027c08 	.word	0x20027c08

0800e9b4 <WM_GetBkColor>:
 800e9b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9b6:	b138      	cbz	r0, 800e9c8 <WM_GetBkColor+0x14>
 800e9b8:	a904      	add	r1, sp, #16
 800e9ba:	2322      	movs	r3, #34	; 0x22
 800e9bc:	f841 3d10 	str.w	r3, [r1, #-16]!
 800e9c0:	f7ff f965 	bl	800dc8e <WM_SendMessage>
 800e9c4:	9803      	ldr	r0, [sp, #12]
 800e9c6:	e001      	b.n	800e9cc <WM_GetBkColor+0x18>
 800e9c8:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 800e9cc:	b005      	add	sp, #20
 800e9ce:	f85d fb04 	ldr.w	pc, [sp], #4

0800e9d2 <WM_GetClientRectEx>:
 800e9d2:	b538      	push	{r3, r4, r5, lr}
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	f7fb f9c0 	bl	8009d5c <GUI_Lock>
 800e9dc:	4629      	mov	r1, r5
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f000 fcfa 	bl	800f3d8 <WM__GetClientRectEx>
 800e9e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9e8:	f7fb b9ae 	b.w	8009d48 <GUI_Unlock>

0800e9ec <WM_GetClientRect>:
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	f7fb f9b4 	bl	8009d5c <GUI_Lock>
 800e9f4:	4b06      	ldr	r3, [pc, #24]	; (800ea10 <WM_GetClientRect+0x24>)
 800e9f6:	6818      	ldr	r0, [r3, #0]
 800e9f8:	b910      	cbnz	r0, 800ea00 <WM_GetClientRect+0x14>
 800e9fa:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <WM_GetClientRect+0x28>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ea00:	4621      	mov	r1, r4
 800ea02:	f7ff ffe6 	bl	800e9d2 <WM_GetClientRectEx>
 800ea06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0a:	f7fb b99d 	b.w	8009d48 <GUI_Unlock>
 800ea0e:	bf00      	nop
 800ea10:	20027bd0 	.word	0x20027bd0
 800ea14:	20000014 	.word	0x20000014

0800ea18 <WM_GetClientWindow>:
 800ea18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	a904      	add	r1, sp, #16
 800ea1e:	9303      	str	r3, [sp, #12]
 800ea20:	2317      	movs	r3, #23
 800ea22:	f841 3d10 	str.w	r3, [r1, #-16]!
 800ea26:	f7ff f932 	bl	800dc8e <WM_SendMessage>
 800ea2a:	9803      	ldr	r0, [sp, #12]
 800ea2c:	b005      	add	sp, #20
 800ea2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ea34 <WM_GetDesktopWindow>:
 800ea34:	4b03      	ldr	r3, [pc, #12]	; (800ea44 <WM_GetDesktopWindow+0x10>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	7c5a      	ldrb	r2, [r3, #17]
 800ea3a:	4b03      	ldr	r3, [pc, #12]	; (800ea48 <WM_GetDesktopWindow+0x14>)
 800ea3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	20000014 	.word	0x20000014
 800ea48:	20027bd4 	.word	0x20027bd4

0800ea4c <WM_GetFirstChild>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	4604      	mov	r4, r0
 800ea50:	b138      	cbz	r0, 800ea62 <WM_GetFirstChild+0x16>
 800ea52:	f7fb f983 	bl	8009d5c <GUI_Lock>
 800ea56:	4620      	mov	r0, r4
 800ea58:	f7f9 fc4c 	bl	80082f4 <GUI_ALLOC_h2p>
 800ea5c:	69c4      	ldr	r4, [r0, #28]
 800ea5e:	f7fb f973 	bl	8009d48 <GUI_Unlock>
 800ea62:	4620      	mov	r0, r4
 800ea64:	bd10      	pop	{r4, pc}

0800ea66 <WM_GetId>:
 800ea66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea68:	4604      	mov	r4, r0
 800ea6a:	2210      	movs	r2, #16
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	4668      	mov	r0, sp
 800ea70:	f009 fc1f 	bl	80182b2 <memset>
 800ea74:	2315      	movs	r3, #21
 800ea76:	4620      	mov	r0, r4
 800ea78:	4669      	mov	r1, sp
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	f7ff f907 	bl	800dc8e <WM_SendMessage>
 800ea80:	9803      	ldr	r0, [sp, #12]
 800ea82:	b004      	add	sp, #16
 800ea84:	bd10      	pop	{r4, pc}

0800ea86 <_GetDialogItem>:
 800ea86:	b570      	push	{r4, r5, r6, lr}
 800ea88:	4606      	mov	r6, r0
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	f7f9 fc32 	bl	80082f4 <GUI_ALLOC_h2p>
 800ea90:	69c4      	ldr	r4, [r0, #28]
 800ea92:	b14c      	cbz	r4, 800eaa8 <_GetDialogItem+0x22>
 800ea94:	4620      	mov	r0, r4
 800ea96:	f7ff ffe6 	bl	800ea66 <WM_GetId>
 800ea9a:	42a8      	cmp	r0, r5
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	d014      	beq.n	800eaca <_GetDialogItem+0x44>
 800eaa0:	f7f9 fc28 	bl	80082f4 <GUI_ALLOC_h2p>
 800eaa4:	6a04      	ldr	r4, [r0, #32]
 800eaa6:	e7f4      	b.n	800ea92 <_GetDialogItem+0xc>
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7f9 fc23 	bl	80082f4 <GUI_ALLOC_h2p>
 800eaae:	69c4      	ldr	r4, [r0, #28]
 800eab0:	b14c      	cbz	r4, 800eac6 <_GetDialogItem+0x40>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4620      	mov	r0, r4
 800eab6:	f7ff ffe6 	bl	800ea86 <_GetDialogItem>
 800eaba:	b930      	cbnz	r0, 800eaca <_GetDialogItem+0x44>
 800eabc:	4620      	mov	r0, r4
 800eabe:	f7f9 fc19 	bl	80082f4 <GUI_ALLOC_h2p>
 800eac2:	6a04      	ldr	r4, [r0, #32]
 800eac4:	e7f4      	b.n	800eab0 <_GetDialogItem+0x2a>
 800eac6:	4620      	mov	r0, r4
 800eac8:	bd70      	pop	{r4, r5, r6, pc}
 800eaca:	bd70      	pop	{r4, r5, r6, pc}

0800eacc <WM_GetDialogItem>:
 800eacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eace:	460d      	mov	r5, r1
 800ead0:	4604      	mov	r4, r0
 800ead2:	b1f0      	cbz	r0, 800eb12 <WM_GetDialogItem+0x46>
 800ead4:	f7fb f942 	bl	8009d5c <GUI_Lock>
 800ead8:	4620      	mov	r0, r4
 800eada:	f7f9 fc15 	bl	8008308 <GUI_ALLOC_LockH>
 800eade:	ab02      	add	r3, sp, #8
 800eae0:	69c4      	ldr	r4, [r0, #28]
 800eae2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f9 fc1c 	bl	8008324 <GUI_ALLOC_UnlockH>
 800eaec:	b17c      	cbz	r4, 800eb0e <WM_GetDialogItem+0x42>
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f7ff ffb9 	bl	800ea66 <WM_GetId>
 800eaf4:	4285      	cmp	r5, r0
 800eaf6:	d00a      	beq.n	800eb0e <WM_GetDialogItem+0x42>
 800eaf8:	4629      	mov	r1, r5
 800eafa:	4620      	mov	r0, r4
 800eafc:	f7ff ffc3 	bl	800ea86 <_GetDialogItem>
 800eb00:	b920      	cbnz	r0, 800eb0c <WM_GetDialogItem+0x40>
 800eb02:	4620      	mov	r0, r4
 800eb04:	f7f9 fbf6 	bl	80082f4 <GUI_ALLOC_h2p>
 800eb08:	6a04      	ldr	r4, [r0, #32]
 800eb0a:	e7ef      	b.n	800eaec <WM_GetDialogItem+0x20>
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	f7fb f91b 	bl	8009d48 <GUI_Unlock>
 800eb12:	4620      	mov	r0, r4
 800eb14:	b003      	add	sp, #12
 800eb16:	bd30      	pop	{r4, r5, pc}

0800eb18 <WM_GetNextSibling>:
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	f7fb f91e 	bl	8009d5c <GUI_Lock>
 800eb20:	b11c      	cbz	r4, 800eb2a <WM_GetNextSibling+0x12>
 800eb22:	4620      	mov	r0, r4
 800eb24:	f7f9 fbe6 	bl	80082f4 <GUI_ALLOC_h2p>
 800eb28:	6a04      	ldr	r4, [r0, #32]
 800eb2a:	f7fb f90d 	bl	8009d48 <GUI_Unlock>
 800eb2e:	4620      	mov	r0, r4
 800eb30:	bd10      	pop	{r4, pc}

0800eb32 <WM_GetWindowOrgX>:
 800eb32:	b510      	push	{r4, lr}
 800eb34:	4604      	mov	r4, r0
 800eb36:	b140      	cbz	r0, 800eb4a <WM_GetWindowOrgX+0x18>
 800eb38:	f7fb f910 	bl	8009d5c <GUI_Lock>
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7f9 fbd9 	bl	80082f4 <GUI_ALLOC_h2p>
 800eb42:	f9b0 4000 	ldrsh.w	r4, [r0]
 800eb46:	f7fb f8ff 	bl	8009d48 <GUI_Unlock>
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	bd10      	pop	{r4, pc}

0800eb4e <WM_GetWindowOrgY>:
 800eb4e:	b510      	push	{r4, lr}
 800eb50:	4604      	mov	r4, r0
 800eb52:	b140      	cbz	r0, 800eb66 <WM_GetWindowOrgY+0x18>
 800eb54:	f7fb f902 	bl	8009d5c <GUI_Lock>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f7f9 fbcb 	bl	80082f4 <GUI_ALLOC_h2p>
 800eb5e:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800eb62:	f7fb f8f1 	bl	8009d48 <GUI_Unlock>
 800eb66:	4620      	mov	r0, r4
 800eb68:	bd10      	pop	{r4, pc}

0800eb6a <WM_GetParent>:
 800eb6a:	b510      	push	{r4, lr}
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	b138      	cbz	r0, 800eb80 <WM_GetParent+0x16>
 800eb70:	f7fb f8f4 	bl	8009d5c <GUI_Lock>
 800eb74:	4620      	mov	r0, r4
 800eb76:	f7f9 fbbd 	bl	80082f4 <GUI_ALLOC_h2p>
 800eb7a:	6984      	ldr	r4, [r0, #24]
 800eb7c:	f7fb f8e4 	bl	8009d48 <GUI_Unlock>
 800eb80:	4620      	mov	r0, r4
 800eb82:	bd10      	pop	{r4, pc}

0800eb84 <WM_BringToBottom>:
 800eb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb88:	4604      	mov	r4, r0
 800eb8a:	b087      	sub	sp, #28
 800eb8c:	f7fb f8e6 	bl	8009d5c <GUI_Lock>
 800eb90:	2c00      	cmp	r4, #0
 800eb92:	d03a      	beq.n	800ec0a <WM_BringToBottom+0x86>
 800eb94:	4620      	mov	r0, r4
 800eb96:	f7f9 fbb7 	bl	8008308 <GUI_ALLOC_LockH>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	9001      	str	r0, [sp, #4]
 800eb9e:	c803      	ldmia	r0, {r0, r1}
 800eba0:	ad04      	add	r5, sp, #16
 800eba2:	e885 0003 	stmia.w	r5, {r0, r1}
 800eba6:	a801      	add	r0, sp, #4
 800eba8:	6a1e      	ldr	r6, [r3, #32]
 800ebaa:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800ebae:	f7f9 fbb9 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f000 fb39 	bl	800f22a <WM__GetPrevSibling>
 800ebb8:	4607      	mov	r7, r0
 800ebba:	b330      	cbz	r0, 800ec0a <WM_BringToBottom+0x86>
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f7ff ffd4 	bl	800eb6a <WM_GetParent>
 800ebc2:	f019 0f02 	tst.w	r9, #2
 800ebc6:	4680      	mov	r8, r0
 800ebc8:	d004      	beq.n	800ebd4 <WM_BringToBottom+0x50>
 800ebca:	4601      	mov	r1, r0
 800ebcc:	4632      	mov	r2, r6
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f7ff f96d 	bl	800deae <WM__InvalidateRectEx>
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7f9 fb97 	bl	8008308 <GUI_ALLOC_LockH>
 800ebda:	9001      	str	r0, [sp, #4]
 800ebdc:	4640      	mov	r0, r8
 800ebde:	f7f9 fb93 	bl	8008308 <GUI_ALLOC_LockH>
 800ebe2:	9003      	str	r0, [sp, #12]
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	f7f9 fb8f 	bl	8008308 <GUI_ALLOC_LockH>
 800ebea:	9b03      	ldr	r3, [sp, #12]
 800ebec:	9a01      	ldr	r2, [sp, #4]
 800ebee:	69d9      	ldr	r1, [r3, #28]
 800ebf0:	6206      	str	r6, [r0, #32]
 800ebf2:	9002      	str	r0, [sp, #8]
 800ebf4:	6211      	str	r1, [r2, #32]
 800ebf6:	a801      	add	r0, sp, #4
 800ebf8:	61dc      	str	r4, [r3, #28]
 800ebfa:	f7f9 fb93 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ebfe:	a803      	add	r0, sp, #12
 800ec00:	f7f9 fb90 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ec04:	a802      	add	r0, sp, #8
 800ec06:	f7f9 fb8d 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ec0a:	f7fb f89d 	bl	8009d48 <GUI_Unlock>
 800ec0e:	b007      	add	sp, #28
 800ec10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ec14 <WM_GetScrollbarH>:
 800ec14:	b510      	push	{r4, lr}
 800ec16:	4604      	mov	r4, r0
 800ec18:	b140      	cbz	r0, 800ec2c <WM_GetScrollbarH+0x18>
 800ec1a:	f7fb f89f 	bl	8009d5c <GUI_Lock>
 800ec1e:	4620      	mov	r0, r4
 800ec20:	21ff      	movs	r1, #255	; 0xff
 800ec22:	f7ff ff30 	bl	800ea86 <_GetDialogItem>
 800ec26:	4604      	mov	r4, r0
 800ec28:	f7fb f88e 	bl	8009d48 <GUI_Unlock>
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	bd10      	pop	{r4, pc}

0800ec30 <WM_GetScrollbarV>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	b140      	cbz	r0, 800ec48 <WM_GetScrollbarV+0x18>
 800ec36:	f7fb f891 	bl	8009d5c <GUI_Lock>
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	21fe      	movs	r1, #254	; 0xfe
 800ec3e:	f7ff ff22 	bl	800ea86 <_GetDialogItem>
 800ec42:	4604      	mov	r4, r0
 800ec44:	f7fb f880 	bl	8009d48 <GUI_Unlock>
 800ec48:	4620      	mov	r0, r4
 800ec4a:	bd10      	pop	{r4, pc}

0800ec4c <WM_GetWindowRect>:
 800ec4c:	b510      	push	{r4, lr}
 800ec4e:	4604      	mov	r4, r0
 800ec50:	f7fb f884 	bl	8009d5c <GUI_Lock>
 800ec54:	b15c      	cbz	r4, 800ec6e <WM_GetWindowRect+0x22>
 800ec56:	4b08      	ldr	r3, [pc, #32]	; (800ec78 <WM_GetWindowRect+0x2c>)
 800ec58:	6818      	ldr	r0, [r3, #0]
 800ec5a:	b910      	cbnz	r0, 800ec62 <WM_GetWindowRect+0x16>
 800ec5c:	4b07      	ldr	r3, [pc, #28]	; (800ec7c <WM_GetWindowRect+0x30>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ec62:	f7f9 fb47 	bl	80082f4 <GUI_ALLOC_h2p>
 800ec66:	4603      	mov	r3, r0
 800ec68:	cb03      	ldmia	r3!, {r0, r1}
 800ec6a:	6020      	str	r0, [r4, #0]
 800ec6c:	6061      	str	r1, [r4, #4]
 800ec6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec72:	f7fb b869 	b.w	8009d48 <GUI_Unlock>
 800ec76:	bf00      	nop
 800ec78:	20027bd0 	.word	0x20027bd0
 800ec7c:	20000014 	.word	0x20000014

0800ec80 <WM_GetWindowRectEx>:
 800ec80:	b538      	push	{r3, r4, r5, lr}
 800ec82:	460c      	mov	r4, r1
 800ec84:	4605      	mov	r5, r0
 800ec86:	b168      	cbz	r0, 800eca4 <WM_GetWindowRectEx+0x24>
 800ec88:	b161      	cbz	r1, 800eca4 <WM_GetWindowRectEx+0x24>
 800ec8a:	f7fb f867 	bl	8009d5c <GUI_Lock>
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f7f9 fb30 	bl	80082f4 <GUI_ALLOC_h2p>
 800ec94:	4603      	mov	r3, r0
 800ec96:	cb03      	ldmia	r3!, {r0, r1}
 800ec98:	6020      	str	r0, [r4, #0]
 800ec9a:	6061      	str	r1, [r4, #4]
 800ec9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eca0:	f7fb b852 	b.w	8009d48 <GUI_Unlock>
 800eca4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800eca8 <WM_HasFocus>:
 800eca8:	4b04      	ldr	r3, [pc, #16]	; (800ecbc <WM_HasFocus+0x14>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	4b04      	ldr	r3, [pc, #16]	; (800ecc0 <WM_HasFocus+0x18>)
 800ecae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb2:	1a1b      	subs	r3, r3, r0
 800ecb4:	4258      	negs	r0, r3
 800ecb6:	4158      	adcs	r0, r3
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	20027bf4 	.word	0x20027bf4
 800ecc0:	20027be4 	.word	0x20027be4

0800ecc4 <WM_InvalidateArea>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	f7fb f848 	bl	8009d5c <GUI_Lock>
 800eccc:	4b07      	ldr	r3, [pc, #28]	; (800ecec <WM_InvalidateArea+0x28>)
 800ecce:	681c      	ldr	r4, [r3, #0]
 800ecd0:	b144      	cbz	r4, 800ece4 <WM_InvalidateArea+0x20>
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f7ff f865 	bl	800dda4 <WM__Invalidate1Abs>
 800ecda:	4620      	mov	r0, r4
 800ecdc:	f7f9 fb0a 	bl	80082f4 <GUI_ALLOC_h2p>
 800ece0:	6944      	ldr	r4, [r0, #20]
 800ece2:	e7f5      	b.n	800ecd0 <WM_InvalidateArea+0xc>
 800ece4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ece8:	f7fb b82e 	b.w	8009d48 <GUI_Unlock>
 800ecec:	20027bf0 	.word	0x20027bf0

0800ecf0 <WM_OnKey>:
 800ecf0:	b530      	push	{r4, r5, lr}
 800ecf2:	b087      	sub	sp, #28
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	f7fb f830 	bl	8009d5c <GUI_Lock>
 800ecfc:	4b0b      	ldr	r3, [pc, #44]	; (800ed2c <WM_OnKey+0x3c>)
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	4b0b      	ldr	r3, [pc, #44]	; (800ed30 <WM_OnKey+0x40>)
 800ed02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed06:	b150      	cbz	r0, 800ed1e <WM_OnKey+0x2e>
 800ed08:	230e      	movs	r3, #14
 800ed0a:	a902      	add	r1, sp, #8
 800ed0c:	9401      	str	r4, [sp, #4]
 800ed0e:	9500      	str	r5, [sp, #0]
 800ed10:	9302      	str	r3, [sp, #8]
 800ed12:	f8cd d014 	str.w	sp, [sp, #20]
 800ed16:	2401      	movs	r4, #1
 800ed18:	f000 faae 	bl	800f278 <WM__SendMessage>
 800ed1c:	e000      	b.n	800ed20 <WM_OnKey+0x30>
 800ed1e:	4604      	mov	r4, r0
 800ed20:	f7fb f812 	bl	8009d48 <GUI_Unlock>
 800ed24:	4620      	mov	r0, r4
 800ed26:	b007      	add	sp, #28
 800ed28:	bd30      	pop	{r4, r5, pc}
 800ed2a:	bf00      	nop
 800ed2c:	20027bf4 	.word	0x20027bf4
 800ed30:	20027be4 	.word	0x20027be4

0800ed34 <WM_ResizeWindow>:
 800ed34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed38:	ea51 0302 	orrs.w	r3, r1, r2
 800ed3c:	b08a      	sub	sp, #40	; 0x28
 800ed3e:	4606      	mov	r6, r0
 800ed40:	4688      	mov	r8, r1
 800ed42:	4617      	mov	r7, r2
 800ed44:	d077      	beq.n	800ee36 <WM_ResizeWindow+0x102>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d075      	beq.n	800ee36 <WM_ResizeWindow+0x102>
 800ed4a:	f7fb f807 	bl	8009d5c <GUI_Lock>
 800ed4e:	4630      	mov	r0, r6
 800ed50:	f7f9 fada 	bl	8008308 <GUI_ALLOC_LockH>
 800ed54:	4603      	mov	r3, r0
 800ed56:	9003      	str	r0, [sp, #12]
 800ed58:	c803      	ldmia	r0, {r0, r1}
 800ed5a:	ac04      	add	r4, sp, #16
 800ed5c:	ad06      	add	r5, sp, #24
 800ed5e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ed62:	e885 0003 	stmia.w	r5, {r0, r1}
 800ed66:	f1b8 0f00 	cmp.w	r8, #0
 800ed6a:	d010      	beq.n	800ed8e <WM_ResizeWindow+0x5a>
 800ed6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed6e:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800ed72:	2a80      	cmp	r2, #128	; 0x80
 800ed74:	bf0b      	itete	eq
 800ed76:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
 800ed7a:	f8bd 201c 	ldrhne.w	r2, [sp, #28]
 800ed7e:	ebc8 0802 	rsbeq	r8, r8, r2
 800ed82:	4490      	addne	r8, r2
 800ed84:	bf0c      	ite	eq
 800ed86:	f8ad 8018 	strheq.w	r8, [sp, #24]
 800ed8a:	f8ad 801c 	strhne.w	r8, [sp, #28]
 800ed8e:	b187      	cbz	r7, 800edb2 <WM_ResizeWindow+0x7e>
 800ed90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed92:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800ed96:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ed9a:	bf0b      	itete	eq
 800ed9c:	f8bd 201a 	ldrheq.w	r2, [sp, #26]
 800eda0:	f8bd 201e 	ldrhne.w	r2, [sp, #30]
 800eda4:	1bd7      	subeq	r7, r2, r7
 800eda6:	18bf      	addne	r7, r7, r2
 800eda8:	bf0c      	ite	eq
 800edaa:	f8ad 701a 	strheq.w	r7, [sp, #26]
 800edae:	f8ad 701e 	strhne.w	r7, [sp, #30]
 800edb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edb4:	03da      	lsls	r2, r3, #15
 800edb6:	d502      	bpl.n	800edbe <WM_ResizeWindow+0x8a>
 800edb8:	4630      	mov	r0, r6
 800edba:	f7fe ff2f 	bl	800dc1c <WM__InvalidateDrawAndDescs>
 800edbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	e883 0003 	stmia.w	r3, {r0, r1}
 800edc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edca:	079b      	lsls	r3, r3, #30
 800edcc:	d50a      	bpl.n	800ede4 <WM_ResizeWindow+0xb0>
 800edce:	462a      	mov	r2, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	a808      	add	r0, sp, #32
 800edd4:	f7f9 fd44 	bl	8008860 <GUI_MergeRect>
 800edd8:	9b03      	ldr	r3, [sp, #12]
 800edda:	a808      	add	r0, sp, #32
 800eddc:	6a1a      	ldr	r2, [r3, #32]
 800edde:	6999      	ldr	r1, [r3, #24]
 800ede0:	f7ff f865 	bl	800deae <WM__InvalidateRectEx>
 800ede4:	f9bd e016 	ldrsh.w	lr, [sp, #22]
 800ede8:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 800edec:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800edf0:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 800edf4:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 800edf8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800edfc:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800ee00:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800ee04:	ebce 0000 	rsb	r0, lr, r0
 800ee08:	1a61      	subs	r1, r4, r1
 800ee0a:	ac0a      	add	r4, sp, #40	; 0x28
 800ee0c:	1afb      	subs	r3, r7, r3
 800ee0e:	1aaa      	subs	r2, r5, r2
 800ee10:	9000      	str	r0, [sp, #0]
 800ee12:	9803      	ldr	r0, [sp, #12]
 800ee14:	f000 fa62 	bl	800f2dc <WM__UpdateChildPositions>
 800ee18:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800ee1c:	f101 0008 	add.w	r0, r1, #8
 800ee20:	f7fb fbae 	bl	800a580 <GUI__IntersectRect>
 800ee24:	2105      	movs	r1, #5
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7fe ff40 	bl	800dcac <WM__SendMsgNoData>
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	f7f9 fa79 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ee32:	f7fa ff89 	bl	8009d48 <GUI_Unlock>
 800ee36:	b00a      	add	sp, #40	; 0x28
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee3c <WM_SendMessageNoPara>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	460d      	mov	r5, r1
 800ee42:	f7fa ff8b 	bl	8009d5c <GUI_Lock>
 800ee46:	4629      	mov	r1, r5
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f000 fa33 	bl	800f2b4 <WM__SendMessageNoPara>
 800ee4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee52:	f7fa bf79 	b.w	8009d48 <GUI_Unlock>

0800ee56 <WM_SendToParent>:
 800ee56:	b538      	push	{r3, r4, r5, lr}
 800ee58:	4605      	mov	r5, r0
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	b169      	cbz	r1, 800ee7a <WM_SendToParent+0x24>
 800ee5e:	f7fa ff7d 	bl	8009d5c <GUI_Lock>
 800ee62:	4628      	mov	r0, r5
 800ee64:	f7ff fe81 	bl	800eb6a <WM_GetParent>
 800ee68:	b118      	cbz	r0, 800ee72 <WM_SendToParent+0x1c>
 800ee6a:	60a5      	str	r5, [r4, #8]
 800ee6c:	4621      	mov	r1, r4
 800ee6e:	f000 fa03 	bl	800f278 <WM__SendMessage>
 800ee72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee76:	f7fa bf67 	b.w	8009d48 <GUI_Unlock>
 800ee7a:	bd38      	pop	{r3, r4, r5, pc}

0800ee7c <WM_NotifyParent>:
 800ee7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee7e:	2326      	movs	r3, #38	; 0x26
 800ee80:	9103      	str	r1, [sp, #12]
 800ee82:	4669      	mov	r1, sp
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	f7ff ffe6 	bl	800ee56 <WM_SendToParent>
 800ee8a:	b005      	add	sp, #20
 800ee8c:	f85d fb04 	ldr.w	pc, [sp], #4

0800ee90 <WM_SetCallback>:
 800ee90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee92:	460e      	mov	r6, r1
 800ee94:	4604      	mov	r4, r0
 800ee96:	b190      	cbz	r0, 800eebe <WM_SetCallback+0x2e>
 800ee98:	f7fa ff60 	bl	8009d5c <GUI_Lock>
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f7f9 fa33 	bl	8008308 <GUI_ALLOC_LockH>
 800eea2:	ab02      	add	r3, sp, #8
 800eea4:	6905      	ldr	r5, [r0, #16]
 800eea6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800eeaa:	6106      	str	r6, [r0, #16]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f9 fa39 	bl	8008324 <GUI_ALLOC_UnlockH>
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f7ff f854 	bl	800df60 <WM_InvalidateWindow>
 800eeb8:	f7fa ff46 	bl	8009d48 <GUI_Unlock>
 800eebc:	e000      	b.n	800eec0 <WM_SetCallback+0x30>
 800eebe:	4605      	mov	r5, r0
 800eec0:	4628      	mov	r0, r5
 800eec2:	b002      	add	sp, #8
 800eec4:	bd70      	pop	{r4, r5, r6, pc}

0800eec6 <WM_SetSize>:
 800eec6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eeca:	460f      	mov	r7, r1
 800eecc:	4690      	mov	r8, r2
 800eece:	4606      	mov	r6, r0
 800eed0:	b308      	cbz	r0, 800ef16 <WM_SetSize+0x50>
 800eed2:	f7fa ff43 	bl	8009d5c <GUI_Lock>
 800eed6:	4630      	mov	r0, r6
 800eed8:	f7f9 fa16 	bl	8008308 <GUI_ALLOC_LockH>
 800eedc:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800eee0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800eee4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800eee8:	1b2c      	subs	r4, r5, r4
 800eeea:	3401      	adds	r4, #1
 800eeec:	f10d 0e08 	add.w	lr, sp, #8
 800eef0:	1b3d      	subs	r5, r7, r4
 800eef2:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800eef6:	f84e 0d04 	str.w	r0, [lr, #-4]!
 800eefa:	1ae3      	subs	r3, r4, r3
 800eefc:	3301      	adds	r3, #1
 800eefe:	ebc3 0408 	rsb	r4, r3, r8
 800ef02:	4670      	mov	r0, lr
 800ef04:	f7f9 fa0e 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ef08:	4622      	mov	r2, r4
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f7ff ff11 	bl	800ed34 <WM_ResizeWindow>
 800ef12:	f7fa ff19 	bl	8009d48 <GUI_Unlock>
 800ef16:	b002      	add	sp, #8
 800ef18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef1c <WM_SetUserClipRect>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	4605      	mov	r5, r0
 800ef20:	f7fa ff1c 	bl	8009d5c <GUI_Lock>
 800ef24:	4b04      	ldr	r3, [pc, #16]	; (800ef38 <WM_SetUserClipRect+0x1c>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800ef2a:	645d      	str	r5, [r3, #68]	; 0x44
 800ef2c:	f7fe fe42 	bl	800dbb4 <WM__ActivateClipRect>
 800ef30:	f7fa ff0a 	bl	8009d48 <GUI_Unlock>
 800ef34:	4620      	mov	r0, r4
 800ef36:	bd38      	pop	{r3, r4, r5, pc}
 800ef38:	20000014 	.word	0x20000014

0800ef3c <WM_SetWindowPos>:
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	4604      	mov	r4, r0
 800ef40:	460d      	mov	r5, r1
 800ef42:	4616      	mov	r6, r2
 800ef44:	4619      	mov	r1, r3
 800ef46:	9a04      	ldr	r2, [sp, #16]
 800ef48:	f7ff ffbd 	bl	800eec6 <WM_SetSize>
 800ef4c:	4632      	mov	r2, r6
 800ef4e:	4629      	mov	r1, r5
 800ef50:	4620      	mov	r0, r4
 800ef52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef56:	f000 b90f 	b.w	800f178 <WM_MoveTo>
	...

0800ef5c <WM_ValidateWindow>:
 800ef5c:	b513      	push	{r0, r1, r4, lr}
 800ef5e:	4604      	mov	r4, r0
 800ef60:	f7fa fefc 	bl	8009d5c <GUI_Lock>
 800ef64:	b184      	cbz	r4, 800ef88 <WM_ValidateWindow+0x2c>
 800ef66:	4620      	mov	r0, r4
 800ef68:	f7f9 f9ce 	bl	8008308 <GUI_ALLOC_LockH>
 800ef6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ef6e:	9001      	str	r0, [sp, #4]
 800ef70:	069a      	lsls	r2, r3, #26
 800ef72:	d506      	bpl.n	800ef82 <WM_ValidateWindow+0x26>
 800ef74:	4a06      	ldr	r2, [pc, #24]	; (800ef90 <WM_ValidateWindow+0x34>)
 800ef76:	f023 0320 	bic.w	r3, r3, #32
 800ef7a:	6283      	str	r3, [r0, #40]	; 0x28
 800ef7c:	8813      	ldrh	r3, [r2, #0]
 800ef7e:	3b01      	subs	r3, #1
 800ef80:	8013      	strh	r3, [r2, #0]
 800ef82:	a801      	add	r0, sp, #4
 800ef84:	f7f9 f9ce 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ef88:	f7fa fede 	bl	8009d48 <GUI_Unlock>
 800ef8c:	b002      	add	sp, #8
 800ef8e:	bd10      	pop	{r4, pc}
 800ef90:	20027bec 	.word	0x20027bec

0800ef94 <_MULTIBUF_End>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	4e08      	ldr	r6, [pc, #32]	; (800efb8 <_MULTIBUF_End+0x24>)
 800ef98:	4d08      	ldr	r5, [pc, #32]	; (800efbc <_MULTIBUF_End+0x28>)
 800ef9a:	2400      	movs	r4, #0
 800ef9c:	6832      	ldr	r2, [r6, #0]
 800ef9e:	682b      	ldr	r3, [r5, #0]
 800efa0:	b102      	cbz	r2, 800efa4 <_MULTIBUF_End+0x10>
 800efa2:	4013      	ands	r3, r2
 800efa4:	40e3      	lsrs	r3, r4
 800efa6:	07db      	lsls	r3, r3, #31
 800efa8:	d502      	bpl.n	800efb0 <_MULTIBUF_End+0x1c>
 800efaa:	4620      	mov	r0, r4
 800efac:	f7fa fdf0 	bl	8009b90 <GUI_MULTIBUF_EndEx>
 800efb0:	3401      	adds	r4, #1
 800efb2:	2c02      	cmp	r4, #2
 800efb4:	d1f2      	bne.n	800ef9c <_MULTIBUF_End+0x8>
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	20027b64 	.word	0x20027b64
 800efbc:	20027bfc 	.word	0x20027bfc

0800efc0 <_MULTIBUF_Begin>:
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	4e08      	ldr	r6, [pc, #32]	; (800efe4 <_MULTIBUF_Begin+0x24>)
 800efc4:	4d08      	ldr	r5, [pc, #32]	; (800efe8 <_MULTIBUF_Begin+0x28>)
 800efc6:	2400      	movs	r4, #0
 800efc8:	6832      	ldr	r2, [r6, #0]
 800efca:	682b      	ldr	r3, [r5, #0]
 800efcc:	b102      	cbz	r2, 800efd0 <_MULTIBUF_Begin+0x10>
 800efce:	4013      	ands	r3, r2
 800efd0:	40e3      	lsrs	r3, r4
 800efd2:	07db      	lsls	r3, r3, #31
 800efd4:	d502      	bpl.n	800efdc <_MULTIBUF_Begin+0x1c>
 800efd6:	4620      	mov	r0, r4
 800efd8:	f7fa fda6 	bl	8009b28 <GUI_MULTIBUF_BeginEx>
 800efdc:	3401      	adds	r4, #1
 800efde:	2c02      	cmp	r4, #2
 800efe0:	d1f2      	bne.n	800efc8 <_MULTIBUF_Begin+0x8>
 800efe2:	bd70      	pop	{r4, r5, r6, pc}
 800efe4:	20027b64 	.word	0x20027b64
 800efe8:	20027bfc 	.word	0x20027bfc

0800efec <WM_MULTIBUF_Enable>:
 800efec:	4a05      	ldr	r2, [pc, #20]	; (800f004 <WM_MULTIBUF_Enable+0x18>)
 800efee:	6813      	ldr	r3, [r2, #0]
 800eff0:	3300      	adds	r3, #0
 800eff2:	bf18      	it	ne
 800eff4:	2301      	movne	r3, #1
 800eff6:	b110      	cbz	r0, 800effe <WM_MULTIBUF_Enable+0x12>
 800eff8:	4903      	ldr	r1, [pc, #12]	; (800f008 <WM_MULTIBUF_Enable+0x1c>)
 800effa:	6011      	str	r1, [r2, #0]
 800effc:	e000      	b.n	800f000 <WM_MULTIBUF_Enable+0x14>
 800effe:	6010      	str	r0, [r2, #0]
 800f000:	4618      	mov	r0, r3
 800f002:	4770      	bx	lr
 800f004:	20027c14 	.word	0x20027c14
 800f008:	08019280 	.word	0x08019280

0800f00c <_MoveDescendents>:
 800f00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	4616      	mov	r6, r2
 800f012:	b088      	sub	sp, #32
 800f014:	2210      	movs	r2, #16
 800f016:	4604      	mov	r4, r0
 800f018:	460d      	mov	r5, r1
 800f01a:	eb0d 0002 	add.w	r0, sp, r2
 800f01e:	2100      	movs	r1, #0
 800f020:	f009 f947 	bl	80182b2 <memset>
 800f024:	2703      	movs	r7, #3
 800f026:	f10d 0808 	add.w	r8, sp, #8
 800f02a:	b32c      	cbz	r4, 800f078 <_MoveDescendents+0x6c>
 800f02c:	4620      	mov	r0, r4
 800f02e:	f7f9 f96b 	bl	8008308 <GUI_ALLOC_LockH>
 800f032:	4632      	mov	r2, r6
 800f034:	4629      	mov	r1, r5
 800f036:	9001      	str	r0, [sp, #4]
 800f038:	f7f9 fc3d 	bl	80088b6 <GUI_MoveRect>
 800f03c:	9801      	ldr	r0, [sp, #4]
 800f03e:	4632      	mov	r2, r6
 800f040:	4629      	mov	r1, r5
 800f042:	3008      	adds	r0, #8
 800f044:	f7f9 fc37 	bl	80088b6 <GUI_MoveRect>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 800f04e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800f052:	a801      	add	r0, sp, #4
 800f054:	f7f9 f966 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f058:	4632      	mov	r2, r6
 800f05a:	4629      	mov	r1, r5
 800f05c:	4650      	mov	r0, sl
 800f05e:	f7ff ffd5 	bl	800f00c <_MoveDescendents>
 800f062:	4620      	mov	r0, r4
 800f064:	a904      	add	r1, sp, #16
 800f066:	9704      	str	r7, [sp, #16]
 800f068:	f8cd 801c 	str.w	r8, [sp, #28]
 800f06c:	9502      	str	r5, [sp, #8]
 800f06e:	9603      	str	r6, [sp, #12]
 800f070:	464c      	mov	r4, r9
 800f072:	f000 f901 	bl	800f278 <WM__SendMessage>
 800f076:	e7d8      	b.n	800f02a <_MoveDescendents+0x1e>
 800f078:	b008      	add	sp, #32
 800f07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f07e <WM__MoveWindow>:
 800f07e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f082:	b08b      	sub	sp, #44	; 0x2c
 800f084:	4606      	mov	r6, r0
 800f086:	460d      	mov	r5, r1
 800f088:	4614      	mov	r4, r2
 800f08a:	2100      	movs	r1, #0
 800f08c:	2210      	movs	r2, #16
 800f08e:	a806      	add	r0, sp, #24
 800f090:	f009 f90f 	bl	80182b2 <memset>
 800f094:	2e00      	cmp	r6, #0
 800f096:	d043      	beq.n	800f120 <WM__MoveWindow+0xa2>
 800f098:	b90d      	cbnz	r5, 800f09e <WM__MoveWindow+0x20>
 800f09a:	2c00      	cmp	r4, #0
 800f09c:	d040      	beq.n	800f120 <WM__MoveWindow+0xa2>
 800f09e:	4630      	mov	r0, r6
 800f0a0:	f7f9 f932 	bl	8008308 <GUI_ALLOC_LockH>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	9001      	str	r0, [sp, #4]
 800f0a8:	c803      	ldmia	r0, {r0, r1}
 800f0aa:	f10d 0808 	add.w	r8, sp, #8
 800f0ae:	e888 0003 	stmia.w	r8, {r0, r1}
 800f0b2:	4622      	mov	r2, r4
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	f7f9 fbfd 	bl	80088b6 <GUI_MoveRect>
 800f0bc:	9801      	ldr	r0, [sp, #4]
 800f0be:	af0a      	add	r7, sp, #40	; 0x28
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	3008      	adds	r0, #8
 800f0c6:	f7f9 fbf6 	bl	80088b6 <GUI_MoveRect>
 800f0ca:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800f0ce:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	f7f9 f926 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f0d8:	4622      	mov	r2, r4
 800f0da:	4629      	mov	r1, r5
 800f0dc:	4648      	mov	r0, r9
 800f0de:	f7ff ff95 	bl	800f00c <_MoveDescendents>
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7f9 f910 	bl	8008308 <GUI_ALLOC_LockH>
 800f0e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f0ea:	9001      	str	r0, [sp, #4]
 800f0ec:	0792      	lsls	r2, r2, #30
 800f0ee:	d50a      	bpl.n	800f106 <WM__MoveWindow+0x88>
 800f0f0:	6981      	ldr	r1, [r0, #24]
 800f0f2:	b141      	cbz	r1, 800f106 <WM__MoveWindow+0x88>
 800f0f4:	6a02      	ldr	r2, [r0, #32]
 800f0f6:	f7fe fec5 	bl	800de84 <WM__InvalidateParent>
 800f0fa:	9b01      	ldr	r3, [sp, #4]
 800f0fc:	4640      	mov	r0, r8
 800f0fe:	6a1a      	ldr	r2, [r3, #32]
 800f100:	6999      	ldr	r1, [r3, #24]
 800f102:	f7fe febf 	bl	800de84 <WM__InvalidateParent>
 800f106:	4638      	mov	r0, r7
 800f108:	f7f9 f90c 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f10c:	2303      	movs	r3, #3
 800f10e:	9306      	str	r3, [sp, #24]
 800f110:	a906      	add	r1, sp, #24
 800f112:	ab04      	add	r3, sp, #16
 800f114:	4630      	mov	r0, r6
 800f116:	9309      	str	r3, [sp, #36]	; 0x24
 800f118:	9504      	str	r5, [sp, #16]
 800f11a:	9405      	str	r4, [sp, #20]
 800f11c:	f000 f8ac 	bl	800f278 <WM__SendMessage>
 800f120:	b00b      	add	sp, #44	; 0x2c
 800f122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f126 <WM__MoveTo>:
 800f126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f128:	460c      	mov	r4, r1
 800f12a:	4615      	mov	r5, r2
 800f12c:	4606      	mov	r6, r0
 800f12e:	b190      	cbz	r0, 800f156 <WM__MoveTo+0x30>
 800f130:	f7f9 f8ea 	bl	8008308 <GUI_ALLOC_LockH>
 800f134:	ab02      	add	r3, sp, #8
 800f136:	f9b0 1000 	ldrsh.w	r1, [r0]
 800f13a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f13e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f142:	1a64      	subs	r4, r4, r1
 800f144:	1aad      	subs	r5, r5, r2
 800f146:	4618      	mov	r0, r3
 800f148:	f7f9 f8ec 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f14c:	462a      	mov	r2, r5
 800f14e:	4621      	mov	r1, r4
 800f150:	4630      	mov	r0, r6
 800f152:	f7ff ff94 	bl	800f07e <WM__MoveWindow>
 800f156:	b002      	add	sp, #8
 800f158:	bd70      	pop	{r4, r5, r6, pc}

0800f15a <WM_MoveWindow>:
 800f15a:	b570      	push	{r4, r5, r6, lr}
 800f15c:	4604      	mov	r4, r0
 800f15e:	460d      	mov	r5, r1
 800f160:	4616      	mov	r6, r2
 800f162:	f7fa fdfb 	bl	8009d5c <GUI_Lock>
 800f166:	4632      	mov	r2, r6
 800f168:	4629      	mov	r1, r5
 800f16a:	4620      	mov	r0, r4
 800f16c:	f7ff ff87 	bl	800f07e <WM__MoveWindow>
 800f170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f174:	f7fa bde8 	b.w	8009d48 <GUI_Unlock>

0800f178 <WM_MoveTo>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	4604      	mov	r4, r0
 800f17c:	460d      	mov	r5, r1
 800f17e:	4616      	mov	r6, r2
 800f180:	f7fa fdec 	bl	8009d5c <GUI_Lock>
 800f184:	4632      	mov	r2, r6
 800f186:	4629      	mov	r1, r5
 800f188:	4620      	mov	r0, r4
 800f18a:	f7ff ffcc 	bl	800f126 <WM__MoveTo>
 800f18e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f192:	f7fa bdd9 	b.w	8009d48 <GUI_Unlock>

0800f196 <WM_DeleteTimer>:
 800f196:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f198:	4604      	mov	r4, r0
 800f19a:	b190      	cbz	r0, 800f1c2 <WM_DeleteTimer+0x2c>
 800f19c:	f7fa fdde 	bl	8009d5c <GUI_Lock>
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f7f9 f8b1 	bl	8008308 <GUI_ALLOC_LockH>
 800f1a6:	ad02      	add	r5, sp, #8
 800f1a8:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f1ac:	6800      	ldr	r0, [r0, #0]
 800f1ae:	f004 fce1 	bl	8013b74 <GUI_TIMER_Delete>
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	f7f9 f8b6 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7f9 f8e3 	bl	8008384 <GUI_ALLOC_Free>
 800f1be:	f7fa fdc3 	bl	8009d48 <GUI_Unlock>
 800f1c2:	b003      	add	sp, #12
 800f1c4:	bd30      	pop	{r4, r5, pc}

0800f1c6 <WM__DeleteAssocTimer>:
 800f1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1c8:	4605      	mov	r5, r0
 800f1ca:	f7fa fdc7 	bl	8009d5c <GUI_Lock>
 800f1ce:	a801      	add	r0, sp, #4
 800f1d0:	f004 fc9c 	bl	8013b0c <GUI_TIMER__GetFirstTimer>
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	b1dc      	cbz	r4, 800f210 <WM__DeleteAssocTimer+0x4a>
 800f1d8:	2101      	movs	r1, #1
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f004 fd02 	bl	8013be4 <GUI_TIMER_GetFlag>
 800f1e0:	9b01      	ldr	r3, [sp, #4]
 800f1e2:	b183      	cbz	r3, 800f206 <WM__DeleteAssocTimer+0x40>
 800f1e4:	b178      	cbz	r0, 800f206 <WM__DeleteAssocTimer+0x40>
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7f9 f884 	bl	80082f4 <GUI_ALLOC_h2p>
 800f1ec:	6843      	ldr	r3, [r0, #4]
 800f1ee:	42ab      	cmp	r3, r5
 800f1f0:	d109      	bne.n	800f206 <WM__DeleteAssocTimer+0x40>
 800f1f2:	a901      	add	r1, sp, #4
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	9e01      	ldr	r6, [sp, #4]
 800f1f8:	f004 fca0 	bl	8013b3c <GUI_TIMER__GetNextTimerLin>
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4630      	mov	r0, r6
 800f200:	f7ff ffc9 	bl	800f196 <WM_DeleteTimer>
 800f204:	e7e7      	b.n	800f1d6 <WM__DeleteAssocTimer+0x10>
 800f206:	a901      	add	r1, sp, #4
 800f208:	4620      	mov	r0, r4
 800f20a:	f004 fc97 	bl	8013b3c <GUI_TIMER__GetNextTimerLin>
 800f20e:	e7e1      	b.n	800f1d4 <WM__DeleteAssocTimer+0xe>
 800f210:	f7fa fd9a 	bl	8009d48 <GUI_Unlock>
 800f214:	b002      	add	sp, #8
 800f216:	bd70      	pop	{r4, r5, r6, pc}

0800f218 <WM__GetFirstSibling>:
 800f218:	b508      	push	{r3, lr}
 800f21a:	f7ff fca6 	bl	800eb6a <WM_GetParent>
 800f21e:	b118      	cbz	r0, 800f228 <WM__GetFirstSibling+0x10>
 800f220:	f7f9 f868 	bl	80082f4 <GUI_ALLOC_h2p>
 800f224:	69c0      	ldr	r0, [r0, #28]
 800f226:	bd08      	pop	{r3, pc}
 800f228:	bd08      	pop	{r3, pc}

0800f22a <WM__GetPrevSibling>:
 800f22a:	b538      	push	{r3, r4, r5, lr}
 800f22c:	4605      	mov	r5, r0
 800f22e:	f7ff fff3 	bl	800f218 <WM__GetFirstSibling>
 800f232:	4604      	mov	r4, r0
 800f234:	b154      	cbz	r4, 800f24c <WM__GetPrevSibling+0x22>
 800f236:	42ac      	cmp	r4, r5
 800f238:	d007      	beq.n	800f24a <WM__GetPrevSibling+0x20>
 800f23a:	4620      	mov	r0, r4
 800f23c:	f7f9 f85a 	bl	80082f4 <GUI_ALLOC_h2p>
 800f240:	6a03      	ldr	r3, [r0, #32]
 800f242:	429d      	cmp	r5, r3
 800f244:	d002      	beq.n	800f24c <WM__GetPrevSibling+0x22>
 800f246:	461c      	mov	r4, r3
 800f248:	e7f4      	b.n	800f234 <WM__GetPrevSibling+0xa>
 800f24a:	2400      	movs	r4, #0
 800f24c:	4620      	mov	r0, r4
 800f24e:	bd38      	pop	{r3, r4, r5, pc}

0800f250 <WM__IsEnabled>:
 800f250:	b508      	push	{r3, lr}
 800f252:	f7f9 f84f 	bl	80082f4 <GUI_ALLOC_h2p>
 800f256:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f258:	f080 0010 	eor.w	r0, r0, #16
 800f25c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800f260:	bd08      	pop	{r3, pc}

0800f262 <WM__Screen2Client>:
 800f262:	4603      	mov	r3, r0
 800f264:	4608      	mov	r0, r1
 800f266:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f26a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800f26e:	4252      	negs	r2, r2
 800f270:	4249      	negs	r1, r1
 800f272:	f7f9 bb20 	b.w	80088b6 <GUI_MoveRect>
	...

0800f278 <WM__SendMessage>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	4c0d      	ldr	r4, [pc, #52]	; (800f2b0 <WM__SendMessage+0x38>)
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	2b13      	cmp	r3, #19
 800f280:	4606      	mov	r6, r0
 800f282:	460d      	mov	r5, r1
 800f284:	dc12      	bgt.n	800f2ac <WM__SendMessage+0x34>
 800f286:	f7f9 f835 	bl	80082f4 <GUI_ALLOC_h2p>
 800f28a:	6902      	ldr	r2, [r0, #16]
 800f28c:	606e      	str	r6, [r5, #4]
 800f28e:	b142      	cbz	r2, 800f2a2 <WM__SendMessage+0x2a>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	4628      	mov	r0, r5
 800f294:	3301      	adds	r3, #1
 800f296:	6023      	str	r3, [r4, #0]
 800f298:	4790      	blx	r2
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	6023      	str	r3, [r4, #0]
 800f2a0:	bd70      	pop	{r4, r5, r6, pc}
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2a8:	f7ff bab4 	b.w	800e814 <WM_DefaultProc>
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20000abc 	.word	0x20000abc

0800f2b4 <WM__SendMessageNoPara>:
 800f2b4:	b530      	push	{r4, r5, lr}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	2210      	movs	r2, #16
 800f2bc:	460d      	mov	r5, r1
 800f2be:	4668      	mov	r0, sp
 800f2c0:	2100      	movs	r1, #0
 800f2c2:	f008 fff6 	bl	80182b2 <memset>
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f7f9 f814 	bl	80082f4 <GUI_ALLOC_h2p>
 800f2cc:	6903      	ldr	r3, [r0, #16]
 800f2ce:	b11b      	cbz	r3, 800f2d8 <WM__SendMessageNoPara+0x24>
 800f2d0:	9401      	str	r4, [sp, #4]
 800f2d2:	9500      	str	r5, [sp, #0]
 800f2d4:	4668      	mov	r0, sp
 800f2d6:	4798      	blx	r3
 800f2d8:	b005      	add	sp, #20
 800f2da:	bd30      	pop	{r4, r5, pc}

0800f2dc <WM__UpdateChildPositions>:
 800f2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e0:	b08b      	sub	sp, #44	; 0x2c
 800f2e2:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800f2e6:	9303      	str	r3, [sp, #12]
 800f2e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f2ec:	9101      	str	r1, [sp, #4]
 800f2ee:	9304      	str	r3, [sp, #16]
 800f2f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800f2f4:	9305      	str	r3, [sp, #20]
 800f2f6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800f2fa:	9202      	str	r2, [sp, #8]
 800f2fc:	9306      	str	r3, [sp, #24]
 800f2fe:	f1bb 0f00 	cmp.w	fp, #0
 800f302:	d05e      	beq.n	800f3c2 <WM__UpdateChildPositions+0xe6>
 800f304:	4658      	mov	r0, fp
 800f306:	f7f8 ffff 	bl	8008308 <GUI_ALLOC_LockH>
 800f30a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f30c:	9009      	str	r0, [sp, #36]	; 0x24
 800f30e:	f402 7120 	and.w	r1, r2, #640	; 0x280
 800f312:	2980      	cmp	r1, #128	; 0x80
 800f314:	f9b0 a000 	ldrsh.w	sl, [r0]
 800f318:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800f31c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 800f320:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 800f324:	d008      	beq.n	800f338 <WM__UpdateChildPositions+0x5c>
 800f326:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 800f32a:	d107      	bne.n	800f33c <WM__UpdateChildPositions+0x60>
 800f32c:	9901      	ldr	r1, [sp, #4]
 800f32e:	eb0a 0601 	add.w	r6, sl, r1
 800f332:	b236      	sxth	r6, r6
 800f334:	9903      	ldr	r1, [sp, #12]
 800f336:	e005      	b.n	800f344 <WM__UpdateChildPositions+0x68>
 800f338:	9904      	ldr	r1, [sp, #16]
 800f33a:	e000      	b.n	800f33e <WM__UpdateChildPositions+0x62>
 800f33c:	9905      	ldr	r1, [sp, #20]
 800f33e:	eb01 060a 	add.w	r6, r1, sl
 800f342:	b236      	sxth	r6, r6
 800f344:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800f348:	eb01 0508 	add.w	r5, r1, r8
 800f34c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f350:	b22d      	sxth	r5, r5
 800f352:	d007      	beq.n	800f364 <WM__UpdateChildPositions+0x88>
 800f354:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800f358:	d10a      	bne.n	800f370 <WM__UpdateChildPositions+0x94>
 800f35a:	9a02      	ldr	r2, [sp, #8]
 800f35c:	189f      	adds	r7, r3, r2
 800f35e:	b23f      	sxth	r7, r7
 800f360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f362:	e002      	b.n	800f36a <WM__UpdateChildPositions+0x8e>
 800f364:	9a06      	ldr	r2, [sp, #24]
 800f366:	18d7      	adds	r7, r2, r3
 800f368:	b23f      	sxth	r7, r7
 800f36a:	eb09 0402 	add.w	r4, r9, r2
 800f36e:	e005      	b.n	800f37c <WM__UpdateChildPositions+0xa0>
 800f370:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800f374:	18cf      	adds	r7, r1, r3
 800f376:	b23f      	sxth	r7, r7
 800f378:	eb01 0409 	add.w	r4, r1, r9
 800f37c:	ebb6 010a 	subs.w	r1, r6, sl
 800f380:	b224      	sxth	r4, r4
 800f382:	eba7 0203 	sub.w	r2, r7, r3
 800f386:	d100      	bne.n	800f38a <WM__UpdateChildPositions+0xae>
 800f388:	b122      	cbz	r2, 800f394 <WM__UpdateChildPositions+0xb8>
 800f38a:	4658      	mov	r0, fp
 800f38c:	9307      	str	r3, [sp, #28]
 800f38e:	f7ff fee4 	bl	800f15a <WM_MoveWindow>
 800f392:	9b07      	ldr	r3, [sp, #28]
 800f394:	1bad      	subs	r5, r5, r6
 800f396:	ebca 0808 	rsb	r8, sl, r8
 800f39a:	1be4      	subs	r4, r4, r7
 800f39c:	ebc3 0909 	rsb	r9, r3, r9
 800f3a0:	ebb5 0108 	subs.w	r1, r5, r8
 800f3a4:	ebc9 0204 	rsb	r2, r9, r4
 800f3a8:	d100      	bne.n	800f3ac <WM__UpdateChildPositions+0xd0>
 800f3aa:	b112      	cbz	r2, 800f3b2 <WM__UpdateChildPositions+0xd6>
 800f3ac:	4658      	mov	r0, fp
 800f3ae:	f7ff fcc1 	bl	800ed34 <WM_ResizeWindow>
 800f3b2:	a80a      	add	r0, sp, #40	; 0x28
 800f3b4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800f3b8:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800f3bc:	f7f8 ffb2 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f3c0:	e79d      	b.n	800f2fe <WM__UpdateChildPositions+0x22>
 800f3c2:	b00b      	add	sp, #44	; 0x2c
 800f3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3c8 <WM__AddCriticalHandle>:
 800f3c8:	4b02      	ldr	r3, [pc, #8]	; (800f3d4 <WM__AddCriticalHandle+0xc>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	6002      	str	r2, [r0, #0]
 800f3ce:	6018      	str	r0, [r3, #0]
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	20027c10 	.word	0x20027c10

0800f3d8 <WM__GetClientRectEx>:
 800f3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3da:	460d      	mov	r5, r1
 800f3dc:	b158      	cbz	r0, 800f3f6 <WM__GetClientRectEx+0x1e>
 800f3de:	b151      	cbz	r1, 800f3f6 <WM__GetClientRectEx+0x1e>
 800f3e0:	f7f8 ff92 	bl	8008308 <GUI_ALLOC_LockH>
 800f3e4:	ac02      	add	r4, sp, #8
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f3ec:	f7fe fc69 	bl	800dcc2 <WM__GetClientRectWin>
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f7f8 ff97 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f3f6:	b003      	add	sp, #12
 800f3f8:	bd30      	pop	{r4, r5, pc}

0800f3fa <_Create>:
 800f3fa:	4770      	bx	lr

0800f3fc <_Paint>:
 800f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	b088      	sub	sp, #32
 800f402:	4681      	mov	r9, r0
 800f404:	f7f8 ff80 	bl	8008308 <GUI_ALLOC_LockH>
 800f408:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
 800f40c:	9000      	str	r0, [sp, #0]
 800f40e:	f408 7680 	and.w	r6, r8, #256	; 0x100
 800f412:	b2b6      	uxth	r6, r6
 800f414:	1c35      	adds	r5, r6, #0
 800f416:	4648      	mov	r0, r9
 800f418:	bf18      	it	ne
 800f41a:	2501      	movne	r5, #1
 800f41c:	f7ff ff18 	bl	800f250 <WM__IsEnabled>
 800f420:	9b00      	ldr	r3, [sp, #0]
 800f422:	2800      	cmp	r0, #0
 800f424:	af02      	add	r7, sp, #8
 800f426:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f428:	bf14      	ite	ne
 800f42a:	46aa      	movne	sl, r5
 800f42c:	f04f 0a02 	moveq.w	sl, #2
 800f430:	f7f9 fb0e 	bl	8008a50 <GUI_SetFont>
 800f434:	4638      	mov	r0, r7
 800f436:	f7f9 f99e 	bl	8008776 <GUI_GetClientRect>
 800f43a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f43e:	ac04      	add	r4, sp, #16
 800f440:	e884 0003 	stmia.w	r4, {r0, r1}
 800f444:	9b00      	ldr	r3, [sp, #0]
 800f446:	b91e      	cbnz	r6, 800f450 <_Paint+0x54>
 800f448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	4798      	blx	r3
 800f44e:	e003      	b.n	800f458 <_Paint+0x5c>
 800f450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f452:	6952      	ldr	r2, [r2, #20]
 800f454:	b122      	cbz	r2, 800f460 <_Paint+0x64>
 800f456:	4790      	blx	r2
 800f458:	9b00      	ldr	r3, [sp, #0]
 800f45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	e00d      	b.n	800f47c <_Paint+0x80>
 800f460:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f462:	f7fb fca5 	bl	800adb0 <LCD_SetColor>
 800f466:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800f46a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f46e:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800f472:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 800f476:	f003 fa63 	bl	8012940 <GUI_DrawRect>
 800f47a:	2201      	movs	r2, #1
 800f47c:	4621      	mov	r1, r4
 800f47e:	4620      	mov	r0, r4
 800f480:	f7fb f8f5 	bl	800a66e <GUI__ReduceRect>
 800f484:	9b00      	ldr	r3, [sp, #0]
 800f486:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f48a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f48c:	f7fb fc8a 	bl	800ada4 <LCD_SetBkColor>
 800f490:	9b00      	ldr	r3, [sp, #0]
 800f492:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f496:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f498:	f7fb fc8a 	bl	800adb0 <LCD_SetColor>
 800f49c:	4620      	mov	r0, r4
 800f49e:	f7ff fd3d 	bl	800ef1c <WM_SetUserClipRect>
 800f4a2:	f7f9 fc03 	bl	8008cac <GUI_Clear>
 800f4a6:	f1ba 0f02 	cmp.w	sl, #2
 800f4aa:	9b00      	ldr	r3, [sp, #0]
 800f4ac:	d002      	beq.n	800f4b4 <_Paint+0xb8>
 800f4ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f4b0:	2a00      	cmp	r2, #0
 800f4b2:	e003      	b.n	800f4bc <_Paint+0xc0>
 800f4b4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800f4b6:	2a00      	cmp	r2, #0
 800f4b8:	bf18      	it	ne
 800f4ba:	2502      	movne	r5, #2
 800f4bc:	bf08      	it	eq
 800f4be:	2500      	moveq	r5, #0
 800f4c0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f4c4:	4668      	mov	r0, sp
 800f4c6:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 800f4c8:	f7f8 ff2c 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	4649      	mov	r1, r9
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f001 f96e 	bl	80107b4 <GUI_DRAW__Draw>
 800f4d8:	4648      	mov	r0, r9
 800f4da:	f7f8 ff15 	bl	8008308 <GUI_ALLOC_LockH>
 800f4de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f4e0:	9000      	str	r0, [sp, #0]
 800f4e2:	b31b      	cbz	r3, 800f52c <_Paint+0x130>
 800f4e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f4e8:	ad06      	add	r5, sp, #24
 800f4ea:	e885 0003 	stmia.w	r5, {r0, r1}
 800f4ee:	b126      	cbz	r6, 800f4fa <_Paint+0xfe>
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	4611      	mov	r1, r2
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f7f9 f9de 	bl	80088b6 <GUI_MoveRect>
 800f4fa:	9b00      	ldr	r3, [sp, #0]
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 800f502:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 800f506:	f7f9 f9d6 	bl	80088b6 <GUI_MoveRect>
 800f50a:	2002      	movs	r0, #2
 800f50c:	f7f9 faee 	bl	8008aec <GUI_SetTextMode>
 800f510:	9b00      	ldr	r3, [sp, #0]
 800f512:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800f514:	f7f8 fef8 	bl	8008308 <GUI_ALLOC_LockH>
 800f518:	9b00      	ldr	r3, [sp, #0]
 800f51a:	9001      	str	r0, [sp, #4]
 800f51c:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 800f520:	4629      	mov	r1, r5
 800f522:	f7f9 fee4 	bl	80092ee <GUI_DispStringInRect>
 800f526:	a801      	add	r0, sp, #4
 800f528:	f7f8 fefc 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f52c:	f018 0f01 	tst.w	r8, #1
 800f530:	d00c      	beq.n	800f54c <_Paint+0x150>
 800f532:	9b00      	ldr	r3, [sp, #0]
 800f534:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f536:	f7fb fc3b 	bl	800adb0 <LCD_SetColor>
 800f53a:	9b00      	ldr	r3, [sp, #0]
 800f53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f53e:	6819      	ldr	r1, [r3, #0]
 800f540:	2902      	cmp	r1, #2
 800f542:	bfb8      	it	lt
 800f544:	2102      	movlt	r1, #2
 800f546:	4638      	mov	r0, r7
 800f548:	f003 ff04 	bl	8013354 <GUI_DrawFocusRect>
 800f54c:	2000      	movs	r0, #0
 800f54e:	f7ff fce5 	bl	800ef1c <WM_SetUserClipRect>
 800f552:	4668      	mov	r0, sp
 800f554:	f7f8 fee6 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f558:	b008      	add	sp, #32
 800f55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800f560 <BUTTON_SetDefaultSkinClassic>:
 800f560:	4b01      	ldr	r3, [pc, #4]	; (800f568 <BUTTON_SetDefaultSkinClassic+0x8>)
 800f562:	4a02      	ldr	r2, [pc, #8]	; (800f56c <BUTTON_SetDefaultSkinClassic+0xc>)
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	4770      	bx	lr
 800f568:	20000488 	.word	0x20000488
 800f56c:	08019288 	.word	0x08019288

0800f570 <CALENDAR_SetDefaultSize>:
 800f570:	2801      	cmp	r0, #1
 800f572:	d006      	beq.n	800f582 <CALENDAR_SetDefaultSize+0x12>
 800f574:	d302      	bcc.n	800f57c <CALENDAR_SetDefaultSize+0xc>
 800f576:	2802      	cmp	r0, #2
 800f578:	d006      	beq.n	800f588 <CALENDAR_SetDefaultSize+0x18>
 800f57a:	4770      	bx	lr
 800f57c:	4b04      	ldr	r3, [pc, #16]	; (800f590 <CALENDAR_SetDefaultSize+0x20>)
 800f57e:	6399      	str	r1, [r3, #56]	; 0x38
 800f580:	4770      	bx	lr
 800f582:	4b03      	ldr	r3, [pc, #12]	; (800f590 <CALENDAR_SetDefaultSize+0x20>)
 800f584:	6319      	str	r1, [r3, #48]	; 0x30
 800f586:	4770      	bx	lr
 800f588:	4b01      	ldr	r3, [pc, #4]	; (800f590 <CALENDAR_SetDefaultSize+0x20>)
 800f58a:	6359      	str	r1, [r3, #52]	; 0x34
 800f58c:	4770      	bx	lr
 800f58e:	bf00      	nop
 800f590:	20000070 	.word	0x20000070

0800f594 <CHECKBOX_SetDefaultBkColor>:
 800f594:	4b01      	ldr	r3, [pc, #4]	; (800f59c <CHECKBOX_SetDefaultBkColor+0x8>)
 800f596:	60d8      	str	r0, [r3, #12]
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop
 800f59c:	2000051c 	.word	0x2000051c

0800f5a0 <_Create>:
 800f5a0:	4770      	bx	lr
	...

0800f5a4 <_GetButtonSize>:
 800f5a4:	b508      	push	{r3, lr}
 800f5a6:	f003 f881 	bl	80126ac <WIDGET_GetDefaultEffect>
 800f5aa:	4b03      	ldr	r3, [pc, #12]	; (800f5b8 <_GetButtonSize+0x14>)
 800f5ac:	6800      	ldr	r0, [r0, #0]
 800f5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800f5b6:	bd08      	pop	{r3, pc}
 800f5b8:	2000051c 	.word	0x2000051c

0800f5bc <_Paint>:
 800f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c0:	b088      	sub	sp, #32
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	9302      	str	r3, [sp, #8]
 800f5c8:	9303      	str	r3, [sp, #12]
 800f5ca:	f7f8 fe9d 	bl	8008308 <GUI_ALLOC_LockH>
 800f5ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800f5d0:	9000      	str	r0, [sp, #0]
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	681f      	ldr	r7, [r3, #0]
 800f5d6:	f7ff fe3b 	bl	800f250 <WM__IsEnabled>
 800f5da:	4606      	mov	r6, r0
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f006 f9ef 	bl	80159c0 <WM_GetHasTrans>
 800f5e2:	b960      	cbnz	r0, 800f5fe <_Paint+0x42>
 800f5e4:	9b00      	ldr	r3, [sp, #0]
 800f5e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800f5e8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f5ec:	4298      	cmp	r0, r3
 800f5ee:	d102      	bne.n	800f5f6 <_Paint+0x3a>
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	f002 fee1 	bl	80123b8 <WIDGET__GetBkColor>
 800f5f6:	f7fb fbd5 	bl	800ada4 <LCD_SetBkColor>
 800f5fa:	f7f9 fb57 	bl	8008cac <GUI_Clear>
 800f5fe:	9b00      	ldr	r3, [sp, #0]
 800f600:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f602:	007b      	lsls	r3, r7, #1
 800f604:	b299      	uxth	r1, r3
 800f606:	8802      	ldrh	r2, [r0, #0]
 800f608:	8843      	ldrh	r3, [r0, #2]
 800f60a:	3a01      	subs	r2, #1
 800f60c:	3b01      	subs	r3, #1
 800f60e:	440a      	add	r2, r1
 800f610:	440b      	add	r3, r1
 800f612:	a802      	add	r0, sp, #8
 800f614:	f8ad 200c 	strh.w	r2, [sp, #12]
 800f618:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f61c:	f7ff fc7e 	bl	800ef1c <WM_SetUserClipRect>
 800f620:	9b00      	ldr	r3, [sp, #0]
 800f622:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f626:	ac08      	add	r4, sp, #32
 800f628:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f62a:	f7fb fbbb 	bl	800ada4 <LCD_SetBkColor>
 800f62e:	f7f9 fb3d 	bl	8008cac <GUI_Clear>
 800f632:	f854 3d20 	ldr.w	r3, [r4, #-32]!
 800f636:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f63a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 800f63e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f642:	6d9e      	ldr	r6, [r3, #88]	; 0x58
 800f644:	b15e      	cbz	r6, 800f65e <_Paint+0xa2>
 800f646:	4620      	mov	r0, r4
 800f648:	f7f8 fe6c 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f64c:	463a      	mov	r2, r7
 800f64e:	4639      	mov	r1, r7
 800f650:	4630      	mov	r0, r6
 800f652:	f7f9 ff0b 	bl	800946c <GUI_DrawBitmap>
 800f656:	4628      	mov	r0, r5
 800f658:	f7f8 fe56 	bl	8008308 <GUI_ALLOC_LockH>
 800f65c:	9000      	str	r0, [sp, #0]
 800f65e:	a902      	add	r1, sp, #8
 800f660:	9800      	ldr	r0, [sp, #0]
 800f662:	f002 ffed 	bl	8012640 <WIDGET__EFFECT_DrawDownRect>
 800f666:	2000      	movs	r0, #0
 800f668:	f7ff fc58 	bl	800ef1c <WM_SetUserClipRect>
 800f66c:	9b00      	ldr	r3, [sp, #0]
 800f66e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 8082 	beq.w	800f77a <_Paint+0x1be>
 800f676:	f10d 0810 	add.w	r8, sp, #16
 800f67a:	4640      	mov	r0, r8
 800f67c:	f7ff f9b6 	bl	800e9ec <WM_GetClientRect>
 800f680:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f684:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f688:	4413      	add	r3, r2
 800f68a:	9a00      	ldr	r2, [sp, #0]
 800f68c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800f690:	3301      	adds	r3, #1
 800f692:	4413      	add	r3, r2
 800f694:	2002      	movs	r0, #2
 800f696:	f8ad 3010 	strh.w	r3, [sp, #16]
 800f69a:	f7f9 fa27 	bl	8008aec <GUI_SetTextMode>
 800f69e:	9b00      	ldr	r3, [sp, #0]
 800f6a0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800f6a2:	f7fb fb85 	bl	800adb0 <LCD_SetColor>
 800f6a6:	9b00      	ldr	r3, [sp, #0]
 800f6a8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f6aa:	f7f9 f9d1 	bl	8008a50 <GUI_SetFont>
 800f6ae:	9b00      	ldr	r3, [sp, #0]
 800f6b0:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f6b2:	f7f8 fe29 	bl	8008308 <GUI_ALLOC_LockH>
 800f6b6:	9b00      	ldr	r3, [sp, #0]
 800f6b8:	9001      	str	r0, [sp, #4]
 800f6ba:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 800f6be:	4641      	mov	r1, r8
 800f6c0:	f7f9 fe15 	bl	80092ee <GUI_DispStringInRect>
 800f6c4:	9b00      	ldr	r3, [sp, #0]
 800f6c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6c8:	07db      	lsls	r3, r3, #31
 800f6ca:	d553      	bpl.n	800f774 <_Paint+0x1b8>
 800f6cc:	9801      	ldr	r0, [sp, #4]
 800f6ce:	f7f9 fe12 	bl	80092f6 <GUI_GetStringDistX>
 800f6d2:	4605      	mov	r5, r0
 800f6d4:	f7f9 f894 	bl	8008800 <GUI_GetFontSizeY>
 800f6d8:	4607      	mov	r7, r0
 800f6da:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f6de:	ae06      	add	r6, sp, #24
 800f6e0:	e886 0003 	stmia.w	r6, {r0, r1}
 800f6e4:	9800      	ldr	r0, [sp, #0]
 800f6e6:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
 800f6ea:	f022 0303 	bic.w	r3, r2, #3
 800f6ee:	2b04      	cmp	r3, #4
 800f6f0:	d00b      	beq.n	800f70a <_Paint+0x14e>
 800f6f2:	2b0c      	cmp	r3, #12
 800f6f4:	d10e      	bne.n	800f714 <_Paint+0x158>
 800f6f6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800f6fa:	1bc9      	subs	r1, r1, r7
 800f6fc:	3101      	adds	r1, #1
 800f6fe:	2302      	movs	r3, #2
 800f700:	fb91 f1f3 	sdiv	r1, r1, r3
 800f704:	f8ad 101a 	strh.w	r1, [sp, #26]
 800f708:	e004      	b.n	800f714 <_Paint+0x158>
 800f70a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800f70e:	1bdb      	subs	r3, r3, r7
 800f710:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f714:	f022 020c 	bic.w	r2, r2, #12
 800f718:	2a01      	cmp	r2, #1
 800f71a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f71e:	d00c      	beq.n	800f73a <_Paint+0x17e>
 800f720:	2a02      	cmp	r2, #2
 800f722:	d113      	bne.n	800f74c <_Paint+0x190>
 800f724:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
 800f728:	f9bd e010 	ldrsh.w	lr, [sp, #16]
 800f72c:	ebce 0101 	rsb	r1, lr, r1
 800f730:	1b49      	subs	r1, r1, r5
 800f732:	fb91 f2f2 	sdiv	r2, r1, r2
 800f736:	4413      	add	r3, r2
 800f738:	e006      	b.n	800f748 <_Paint+0x18c>
 800f73a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f73e:	4413      	add	r3, r2
 800f740:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f744:	1a9b      	subs	r3, r3, r2
 800f746:	1b5b      	subs	r3, r3, r5
 800f748:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f74c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f750:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800f752:	3b01      	subs	r3, #1
 800f754:	441d      	add	r5, r3
 800f756:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800f75a:	f8ad 501c 	strh.w	r5, [sp, #28]
 800f75e:	3b01      	subs	r3, #1
 800f760:	441f      	add	r7, r3
 800f762:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f766:	f7fb fb23 	bl	800adb0 <LCD_SetColor>
 800f76a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f76e:	4630      	mov	r0, r6
 800f770:	f003 fdf0 	bl	8013354 <GUI_DrawFocusRect>
 800f774:	a801      	add	r0, sp, #4
 800f776:	f7f8 fdd5 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f77a:	4620      	mov	r0, r4
 800f77c:	f7f8 fdd2 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f780:	b008      	add	sp, #32
 800f782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f788 <CHECKBOX_SetDefaultSkinClassic>:
 800f788:	4b01      	ldr	r3, [pc, #4]	; (800f790 <CHECKBOX_SetDefaultSkinClassic+0x8>)
 800f78a:	4a02      	ldr	r2, [pc, #8]	; (800f794 <CHECKBOX_SetDefaultSkinClassic+0xc>)
 800f78c:	601a      	str	r2, [r3, #0]
 800f78e:	4770      	bx	lr
 800f790:	20000518 	.word	0x20000518
 800f794:	08019294 	.word	0x08019294

0800f798 <_AdjustControlls>:
 800f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79c:	b085      	sub	sp, #20
 800f79e:	4688      	mov	r8, r1
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	f7ff f939 	bl	800ea18 <WM_GetClientWindow>
 800f7a6:	a902      	add	r1, sp, #8
 800f7a8:	4606      	mov	r6, r0
 800f7aa:	f7ff f912 	bl	800e9d2 <WM_GetClientRectEx>
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f1b8 0f00 	cmp.w	r8, #0
 800f7b4:	d003      	beq.n	800f7be <_AdjustControlls+0x26>
 800f7b6:	f7ff f9ca 	bl	800eb4e <WM_GetWindowOrgY>
 800f7ba:	1cc5      	adds	r5, r0, #3
 800f7bc:	e006      	b.n	800f7cc <_AdjustControlls+0x34>
 800f7be:	f7ff f9c6 	bl	800eb4e <WM_GetWindowOrgY>
 800f7c2:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 800f7c6:	4428      	add	r0, r5
 800f7c8:	f1a0 0515 	sub.w	r5, r0, #21
 800f7cc:	2102      	movs	r1, #2
 800f7ce:	4638      	mov	r0, r7
 800f7d0:	f7ff f97c 	bl	800eacc <WM_GetDialogItem>
 800f7d4:	4681      	mov	r9, r0
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f7ff f9ab 	bl	800eb32 <WM_GetWindowOrgX>
 800f7dc:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 800f7e0:	4404      	add	r4, r0
 800f7e2:	4648      	mov	r0, r9
 800f7e4:	f006 f890 	bl	8015908 <WM_GetWindowSizeX>
 800f7e8:	1a20      	subs	r0, r4, r0
 800f7ea:	1f04      	subs	r4, r0, #4
 800f7ec:	462a      	mov	r2, r5
 800f7ee:	4621      	mov	r1, r4
 800f7f0:	4648      	mov	r0, r9
 800f7f2:	f7ff fcc1 	bl	800f178 <WM_MoveTo>
 800f7f6:	2101      	movs	r1, #1
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	f7ff f967 	bl	800eacc <WM_GetDialogItem>
 800f7fe:	4681      	mov	r9, r0
 800f800:	f006 f882 	bl	8015908 <WM_GetWindowSizeX>
 800f804:	3005      	adds	r0, #5
 800f806:	1a24      	subs	r4, r4, r0
 800f808:	462a      	mov	r2, r5
 800f80a:	4621      	mov	r1, r4
 800f80c:	4648      	mov	r0, r9
 800f80e:	f7ff fcb3 	bl	800f178 <WM_MoveTo>
 800f812:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800f816:	4638      	mov	r0, r7
 800f818:	f7ff f958 	bl	800eacc <WM_GetDialogItem>
 800f81c:	4681      	mov	r9, r0
 800f81e:	f006 f873 	bl	8015908 <WM_GetWindowSizeX>
 800f822:	3005      	adds	r0, #5
 800f824:	1a24      	subs	r4, r4, r0
 800f826:	462a      	mov	r2, r5
 800f828:	4621      	mov	r1, r4
 800f82a:	4648      	mov	r0, r9
 800f82c:	f7ff fca4 	bl	800f178 <WM_MoveTo>
 800f830:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800f834:	4638      	mov	r0, r7
 800f836:	f7ff f949 	bl	800eacc <WM_GetDialogItem>
 800f83a:	4681      	mov	r9, r0
 800f83c:	4630      	mov	r0, r6
 800f83e:	f7ff f978 	bl	800eb32 <WM_GetWindowOrgX>
 800f842:	4683      	mov	fp, r0
 800f844:	4648      	mov	r0, r9
 800f846:	f006 f87b 	bl	8015940 <WM_GetWindowSizeY>
 800f84a:	4682      	mov	sl, r0
 800f84c:	4630      	mov	r0, r6
 800f84e:	f7ff f970 	bl	800eb32 <WM_GetWindowOrgX>
 800f852:	ebcb 0304 	rsb	r3, fp, r4
 800f856:	462a      	mov	r2, r5
 800f858:	3b0a      	subs	r3, #10
 800f85a:	1d41      	adds	r1, r0, #5
 800f85c:	f8cd a000 	str.w	sl, [sp]
 800f860:	4648      	mov	r0, r9
 800f862:	f7ff fb6b 	bl	800ef3c <WM_SetWindowPos>
 800f866:	f088 0101 	eor.w	r1, r8, #1
 800f86a:	4648      	mov	r0, r9
 800f86c:	f000 f875 	bl	800f95a <DROPDOWN_SetUpMode>
 800f870:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f874:	4638      	mov	r0, r7
 800f876:	f7ff f929 	bl	800eacc <WM_GetDialogItem>
 800f87a:	4607      	mov	r7, r0
 800f87c:	4630      	mov	r0, r6
 800f87e:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800f882:	f9bd 900c 	ldrsh.w	r9, [sp, #12]
 800f886:	f7ff f954 	bl	800eb32 <WM_GetWindowOrgX>
 800f88a:	3c18      	subs	r4, #24
 800f88c:	4605      	mov	r5, r0
 800f88e:	4630      	mov	r0, r6
 800f890:	f1b8 0f00 	cmp.w	r8, #0
 800f894:	d003      	beq.n	800f89e <_AdjustControlls+0x106>
 800f896:	f7ff f95a 	bl	800eb4e <WM_GetWindowOrgY>
 800f89a:	3019      	adds	r0, #25
 800f89c:	e001      	b.n	800f8a2 <_AdjustControlls+0x10a>
 800f89e:	f7ff f956 	bl	800eb4e <WM_GetWindowOrgY>
 800f8a2:	464b      	mov	r3, r9
 800f8a4:	4602      	mov	r2, r0
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	9400      	str	r4, [sp, #0]
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	f7ff fb46 	bl	800ef3c <WM_SetWindowPos>
 800f8b0:	f001 fe5a 	bl	8011568 <SCROLLBAR_GetDefaultWidth>
 800f8b4:	4681      	mov	r9, r0
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	f001 fa29 	bl	8010d0e <LISTVIEW_GetNumColumns>
 800f8bc:	4606      	mov	r6, r0
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f001 fa11 	bl	8010ce6 <LISTVIEW_GetHeader>
 800f8c4:	2500      	movs	r5, #0
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	462c      	mov	r4, r5
 800f8ca:	42b4      	cmp	r4, r6
 800f8cc:	da06      	bge.n	800f8dc <_AdjustControlls+0x144>
 800f8ce:	4621      	mov	r1, r4
 800f8d0:	4640      	mov	r0, r8
 800f8d2:	f000 ffeb 	bl	80108ac <HEADER_GetItemWidth>
 800f8d6:	3401      	adds	r4, #1
 800f8d8:	4405      	add	r5, r0
 800f8da:	e7f6      	b.n	800f8ca <_AdjustControlls+0x132>
 800f8dc:	f04f 0a00 	mov.w	sl, #0
 800f8e0:	45b2      	cmp	sl, r6
 800f8e2:	da13      	bge.n	800f90c <_AdjustControlls+0x174>
 800f8e4:	4651      	mov	r1, sl
 800f8e6:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	f000 ffde 	bl	80108ac <HEADER_GetItemWidth>
 800f8f0:	ebc9 0404 	rsb	r4, r9, r4
 800f8f4:	1ba4      	subs	r4, r4, r6
 800f8f6:	fb00 f204 	mul.w	r2, r0, r4
 800f8fa:	4651      	mov	r1, sl
 800f8fc:	fb92 f2f5 	sdiv	r2, r2, r5
 800f900:	4638      	mov	r0, r7
 800f902:	f001 fa1a 	bl	8010d3a <LISTVIEW_SetColumnWidth>
 800f906:	f10a 0a01 	add.w	sl, sl, #1
 800f90a:	e7e9      	b.n	800f8e0 <_AdjustControlls+0x148>
 800f90c:	b005      	add	sp, #20
 800f90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f912 <_AdjustControllsBottom>:
 800f912:	2100      	movs	r1, #0
 800f914:	f7ff bf40 	b.w	800f798 <_AdjustControlls>

0800f918 <CHOOSEFILE_SetDelim>:
 800f918:	4b01      	ldr	r3, [pc, #4]	; (800f920 <CHOOSEFILE_SetDelim+0x8>)
 800f91a:	7218      	strb	r0, [r3, #8]
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	20000148 	.word	0x20000148

0800f924 <DIALOG_GetBkColor>:
 800f924:	4b01      	ldr	r3, [pc, #4]	; (800f92c <DIALOG_GetBkColor+0x8>)
 800f926:	6818      	ldr	r0, [r3, #0]
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	20000158 	.word	0x20000158

0800f930 <DROPDOWN__GetpItemLocked>:
 800f930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f932:	460c      	mov	r4, r1
 800f934:	f7f8 fce8 	bl	8008308 <GUI_ALLOC_LockH>
 800f938:	ad02      	add	r5, sp, #8
 800f93a:	4621      	mov	r1, r4
 800f93c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f940:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f942:	f000 ff11 	bl	8010768 <GUI_ARRAY_GethItem>
 800f946:	4604      	mov	r4, r0
 800f948:	4628      	mov	r0, r5
 800f94a:	f7f8 fceb 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f94e:	4620      	mov	r0, r4
 800f950:	b10c      	cbz	r4, 800f956 <DROPDOWN__GetpItemLocked+0x26>
 800f952:	f7f8 fcd9 	bl	8008308 <GUI_ALLOC_LockH>
 800f956:	b003      	add	sp, #12
 800f958:	bd30      	pop	{r4, r5, pc}

0800f95a <DROPDOWN_SetUpMode>:
 800f95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f95c:	460d      	mov	r5, r1
 800f95e:	4604      	mov	r4, r0
 800f960:	b1b0      	cbz	r0, 800f990 <DROPDOWN_SetUpMode+0x36>
 800f962:	f7fa f9fb 	bl	8009d5c <GUI_Lock>
 800f966:	4620      	mov	r0, r4
 800f968:	f7f8 fcce 	bl	8008308 <GUI_ALLOC_LockH>
 800f96c:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 800f970:	9001      	str	r0, [sp, #4]
 800f972:	f3c3 0440 	ubfx	r4, r3, #1, #1
 800f976:	b115      	cbz	r5, 800f97e <DROPDOWN_SetUpMode+0x24>
 800f978:	f043 0302 	orr.w	r3, r3, #2
 800f97c:	e001      	b.n	800f982 <DROPDOWN_SetUpMode+0x28>
 800f97e:	f023 0302 	bic.w	r3, r3, #2
 800f982:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 800f986:	a801      	add	r0, sp, #4
 800f988:	f7f8 fccc 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f98c:	f7fa f9dc 	bl	8009d48 <GUI_Unlock>
 800f990:	4620      	mov	r0, r4
 800f992:	b003      	add	sp, #12
 800f994:	bd30      	pop	{r4, r5, pc}

0800f996 <_Create>:
 800f996:	b530      	push	{r4, r5, lr}
 800f998:	b08b      	sub	sp, #44	; 0x2c
 800f99a:	4605      	mov	r5, r0
 800f99c:	f7f8 fcb4 	bl	8008308 <GUI_ALLOC_LockH>
 800f9a0:	ab0a      	add	r3, sp, #40	; 0x28
 800f9a2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800f9a6:	f843 0d28 	str.w	r0, [r3, #-40]!
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	6894      	ldr	r4, [r2, #8]
 800f9ae:	f7f8 fcb9 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f9b2:	a80a      	add	r0, sp, #40	; 0x28
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	9302      	str	r3, [sp, #8]
 800f9b8:	f840 5d24 	str.w	r5, [r0, #-36]!
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	4798      	blx	r3
 800f9c0:	b00b      	add	sp, #44	; 0x2c
 800f9c2:	bd30      	pop	{r4, r5, pc}

0800f9c4 <_Paint>:
 800f9c4:	b570      	push	{r4, r5, r6, lr}
 800f9c6:	b08e      	sub	sp, #56	; 0x38
 800f9c8:	4605      	mov	r5, r0
 800f9ca:	f7f8 fc9d 	bl	8008308 <GUI_ALLOC_LockH>
 800f9ce:	ab0e      	add	r3, sp, #56	; 0x38
 800f9d0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 800f9d2:	f843 0d34 	str.w	r0, [r3, #-52]!
 800f9d6:	f9b0 6034 	ldrsh.w	r6, [r0, #52]	; 0x34
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f8 fca2 	bl	8008324 <GUI_ALLOC_UnlockH>
 800f9e0:	a903      	add	r1, sp, #12
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	f7fe fff5 	bl	800e9d2 <WM_GetClientRectEx>
 800f9e8:	2305      	movs	r3, #5
 800f9ea:	9306      	str	r3, [sp, #24]
 800f9ec:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f9f0:	9309      	str	r3, [sp, #36]	; 0x24
 800f9f2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800f9f8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800f9fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800fa02:	930c      	str	r3, [sp, #48]	; 0x30
 800fa04:	9505      	str	r5, [sp, #20]
 800fa06:	a805      	add	r0, sp, #20
 800fa08:	47a0      	blx	r4
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f7ff ff8f 	bl	800f930 <DROPDOWN__GetpItemLocked>
 800fa12:	9002      	str	r0, [sp, #8]
 800fa14:	b138      	cbz	r0, 800fa26 <_Paint+0x62>
 800fa16:	2312      	movs	r3, #18
 800fa18:	900d      	str	r0, [sp, #52]	; 0x34
 800fa1a:	9306      	str	r3, [sp, #24]
 800fa1c:	a805      	add	r0, sp, #20
 800fa1e:	47a0      	blx	r4
 800fa20:	a802      	add	r0, sp, #8
 800fa22:	f7f8 fc7f 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fa26:	2302      	movs	r3, #2
 800fa28:	9306      	str	r3, [sp, #24]
 800fa2a:	a805      	add	r0, sp, #20
 800fa2c:	47a0      	blx	r4
 800fa2e:	b00e      	add	sp, #56	; 0x38
 800fa30:	bd70      	pop	{r4, r5, r6, pc}

0800fa32 <_Create>:
 800fa32:	4770      	bx	lr

0800fa34 <_Paint>:
 800fa34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa38:	b085      	sub	sp, #20
 800fa3a:	4681      	mov	r9, r0
 800fa3c:	f7f8 fc64 	bl	8008308 <GUI_ALLOC_LockH>
 800fa40:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fa42:	f9b0 6080 	ldrsh.w	r6, [r0, #128]	; 0x80
 800fa46:	9001      	str	r0, [sp, #4]
 800fa48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800fa4a:	681f      	ldr	r7, [r3, #0]
 800fa4c:	f7f9 f800 	bl	8008a50 <GUI_SetFont>
 800fa50:	9b01      	ldr	r3, [sp, #4]
 800fa52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa54:	a802      	add	r0, sp, #8
 800fa56:	f013 0f01 	tst.w	r3, #1
 800fa5a:	bf14      	ite	ne
 800fa5c:	f04f 0802 	movne.w	r8, #2
 800fa60:	f04f 0801 	moveq.w	r8, #1
 800fa64:	f7fe ffc2 	bl	800e9ec <WM_GetClientRect>
 800fa68:	a902      	add	r1, sp, #8
 800fa6a:	463a      	mov	r2, r7
 800fa6c:	4608      	mov	r0, r1
 800fa6e:	f7fa fdfe 	bl	800a66e <GUI__ReduceRect>
 800fa72:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fa76:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 800fa7a:	9801      	ldr	r0, [sp, #4]
 800fa7c:	1b1c      	subs	r4, r3, r4
 800fa7e:	3401      	adds	r4, #1
 800fa80:	f002 fdfa 	bl	8012678 <WIDGET__EFFECT_DrawDown>
 800fa84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fa88:	b2a4      	uxth	r4, r4
 800fa8a:	1b1b      	subs	r3, r3, r4
 800fa8c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fa90:	f108 0512 	add.w	r5, r8, #18
 800fa94:	9b01      	ldr	r3, [sp, #4]
 800fa96:	00ad      	lsls	r5, r5, #2
 800fa98:	442b      	add	r3, r5
 800fa9a:	b2b6      	uxth	r6, r6
 800fa9c:	6898      	ldr	r0, [r3, #8]
 800fa9e:	f7fb f987 	bl	800adb0 <LCD_SetColor>
 800faa2:	9b01      	ldr	r3, [sp, #4]
 800faa4:	441d      	add	r5, r3
 800faa6:	68a8      	ldr	r0, [r5, #8]
 800faa8:	f7fb f97c 	bl	800ada4 <LCD_SetBkColor>
 800faac:	a802      	add	r0, sp, #8
 800faae:	f003 fc47 	bl	8013340 <GUI_FillRectEx>
 800fab2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fab6:	4433      	add	r3, r6
 800fab8:	f8ad 3008 	strh.w	r3, [sp, #8]
 800fabc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fac0:	1b9e      	subs	r6, r3, r6
 800fac2:	9b01      	ldr	r3, [sp, #4]
 800fac4:	f8ad 600c 	strh.w	r6, [sp, #12]
 800fac8:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800facc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800face:	f7fb f96f 	bl	800adb0 <LCD_SetColor>
 800fad2:	9b01      	ldr	r3, [sp, #4]
 800fad4:	4648      	mov	r0, r9
 800fad6:	f9b3 1034 	ldrsh.w	r1, [r3, #52]	; 0x34
 800fada:	f7ff ff29 	bl	800f930 <DROPDOWN__GetpItemLocked>
 800fade:	9b01      	ldr	r3, [sp, #4]
 800fae0:	9000      	str	r0, [sp, #0]
 800fae2:	f9b3 2082 	ldrsh.w	r2, [r3, #130]	; 0x82
 800fae6:	a902      	add	r1, sp, #8
 800fae8:	f7f9 fc01 	bl	80092ee <GUI_DispStringInRect>
 800faec:	9b00      	ldr	r3, [sp, #0]
 800faee:	b113      	cbz	r3, 800faf6 <_Paint+0xc2>
 800faf0:	4668      	mov	r0, sp
 800faf2:	f7f8 fc17 	bl	8008324 <GUI_ALLOC_UnlockH>
 800faf6:	a802      	add	r0, sp, #8
 800faf8:	f7fe ff78 	bl	800e9ec <WM_GetClientRect>
 800fafc:	a902      	add	r1, sp, #8
 800fafe:	463a      	mov	r2, r7
 800fb00:	4608      	mov	r0, r1
 800fb02:	f7fa fdb4 	bl	800a66e <GUI__ReduceRect>
 800fb06:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	1b1c      	subs	r4, r3, r4
 800fb0e:	9b01      	ldr	r3, [sp, #4]
 800fb10:	f8ad 4008 	strh.w	r4, [sp, #8]
 800fb14:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fb16:	f7fb f94b 	bl	800adb0 <LCD_SetColor>
 800fb1a:	a802      	add	r0, sp, #8
 800fb1c:	f003 fc10 	bl	8013340 <GUI_FillRectEx>
 800fb20:	9b01      	ldr	r3, [sp, #4]
 800fb22:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fb24:	f7fb f944 	bl	800adb0 <LCD_SetColor>
 800fb28:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800fb2c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800fb30:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 800fb34:	441a      	add	r2, r3
 800fb36:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800fb3a:	1a5b      	subs	r3, r3, r1
 800fb3c:	2402      	movs	r4, #2
 800fb3e:	3b08      	subs	r3, #8
 800fb40:	fb92 f2f4 	sdiv	r2, r2, r4
 800fb44:	2600      	movs	r6, #0
 800fb46:	fb93 f4f4 	sdiv	r4, r3, r4
 800fb4a:	1d4f      	adds	r7, r1, #5
 800fb4c:	eb04 0802 	add.w	r8, r4, r2
 800fb50:	1b15      	subs	r5, r2, r4
 800fb52:	1ba3      	subs	r3, r4, r6
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	eb07 0006 	add.w	r0, r7, r6
 800fb5a:	db06      	blt.n	800fb6a <_Paint+0x136>
 800fb5c:	ebc6 0208 	rsb	r2, r6, r8
 800fb60:	19a9      	adds	r1, r5, r6
 800fb62:	f003 fb35 	bl	80131d0 <GUI_DrawHLine>
 800fb66:	3601      	adds	r6, #1
 800fb68:	e7f3      	b.n	800fb52 <_Paint+0x11e>
 800fb6a:	ac04      	add	r4, sp, #16
 800fb6c:	a902      	add	r1, sp, #8
 800fb6e:	f854 0d0c 	ldr.w	r0, [r4, #-12]!
 800fb72:	f002 fd84 	bl	801267e <WIDGET__EFFECT_DrawUpRect>
 800fb76:	4620      	mov	r0, r4
 800fb78:	f7f8 fbd4 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fb7c:	b005      	add	sp, #20
 800fb7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800fb84 <DROPDOWN_SetDefaultSkinClassic>:
 800fb84:	4b01      	ldr	r3, [pc, #4]	; (800fb8c <DROPDOWN_SetDefaultSkinClassic+0x8>)
 800fb86:	4a02      	ldr	r2, [pc, #8]	; (800fb90 <DROPDOWN_SetDefaultSkinClassic+0xc>)
 800fb88:	601a      	str	r2, [r3, #0]
 800fb8a:	4770      	bx	lr
 800fb8c:	20000194 	.word	0x20000194
 800fb90:	0801941c 	.word	0x0801941c

0800fb94 <DROPDOWN_DrawSkinFlex>:
 800fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb98:	4604      	mov	r4, r0
 800fb9a:	b088      	sub	sp, #32
 800fb9c:	6800      	ldr	r0, [r0, #0]
 800fb9e:	f7f8 fbb3 	bl	8008308 <GUI_ALLOC_LockH>
 800fba2:	ab08      	add	r3, sp, #32
 800fba4:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800fba8:	f843 0d10 	str.w	r0, [r3, #-16]!
 800fbac:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7f8 fbb8 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fbb4:	6820      	ldr	r0, [r4, #0]
 800fbb6:	f7ff fb4b 	bl	800f250 <WM__IsEnabled>
 800fbba:	b936      	cbnz	r6, 800fbca <DROPDOWN_DrawSkinFlex+0x36>
 800fbbc:	07ea      	lsls	r2, r5, #31
 800fbbe:	d406      	bmi.n	800fbce <DROPDOWN_DrawSkinFlex+0x3a>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	bf14      	ite	ne
 800fbc4:	2302      	movne	r3, #2
 800fbc6:	2303      	moveq	r3, #3
 800fbc8:	e002      	b.n	800fbd0 <DROPDOWN_DrawSkinFlex+0x3c>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	e000      	b.n	800fbd0 <DROPDOWN_DrawSkinFlex+0x3c>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	4a76      	ldr	r2, [pc, #472]	; (800fdac <DROPDOWN_DrawSkinFlex+0x218>)
 800fbd2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800fbd6:	6863      	ldr	r3, [r4, #4]
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	f000 80c4 	beq.w	800fd66 <DROPDOWN_DrawSkinFlex+0x1d2>
 800fbde:	dc06      	bgt.n	800fbee <DROPDOWN_DrawSkinFlex+0x5a>
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 80df 	bne.w	800fda4 <DROPDOWN_DrawSkinFlex+0x210>
 800fbe6:	6820      	ldr	r0, [r4, #0]
 800fbe8:	f005 fec6 	bl	8015978 <WM_SetHasTrans>
 800fbec:	e0da      	b.n	800fda4 <DROPDOWN_DrawSkinFlex+0x210>
 800fbee:	2b05      	cmp	r3, #5
 800fbf0:	d035      	beq.n	800fc5e <DROPDOWN_DrawSkinFlex+0xca>
 800fbf2:	2b12      	cmp	r3, #18
 800fbf4:	f040 80d6 	bne.w	800fda4 <DROPDOWN_DrawSkinFlex+0x210>
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	f7f8 fb85 	bl	8008308 <GUI_ALLOC_LockH>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	a808      	add	r0, sp, #32
 800fc02:	f9b3 8080 	ldrsh.w	r8, [r3, #128]	; 0x80
 800fc06:	f840 3d0c 	str.w	r3, [r0, #-12]!
 800fc0a:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800fc0c:	f9b3 6082 	ldrsh.w	r6, [r3, #130]	; 0x82
 800fc10:	f7f8 fb88 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fc14:	6921      	ldr	r1, [r4, #16]
 800fc16:	8ba2      	ldrh	r2, [r4, #28]
 800fc18:	fa1f f088 	uxth.w	r0, r8
 800fc1c:	4401      	add	r1, r0
 800fc1e:	3102      	adds	r1, #2
 800fc20:	f8ad 1018 	strh.w	r1, [sp, #24]
 800fc24:	8aa1      	ldrh	r1, [r4, #20]
 800fc26:	1c8b      	adds	r3, r1, #2
 800fc28:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fc2c:	69a3      	ldr	r3, [r4, #24]
 800fc2e:	440b      	add	r3, r1
 800fc30:	3b03      	subs	r3, #3
 800fc32:	1a1b      	subs	r3, r3, r0
 800fc34:	1a9b      	subs	r3, r3, r2
 800fc36:	2002      	movs	r0, #2
 800fc38:	3a02      	subs	r2, #2
 800fc3a:	f8ad 201e 	strh.w	r2, [sp, #30]
 800fc3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fc42:	f7f8 ff53 	bl	8008aec <GUI_SetTextMode>
 800fc46:	4638      	mov	r0, r7
 800fc48:	f7f8 ff02 	bl	8008a50 <GUI_SetFont>
 800fc4c:	6a28      	ldr	r0, [r5, #32]
 800fc4e:	f7f8 fed5 	bl	80089fc <GUI_SetColor>
 800fc52:	4632      	mov	r2, r6
 800fc54:	a906      	add	r1, sp, #24
 800fc56:	6a20      	ldr	r0, [r4, #32]
 800fc58:	f7f9 fb49 	bl	80092ee <GUI_DispStringInRect>
 800fc5c:	e0a2      	b.n	800fda4 <DROPDOWN_DrawSkinFlex+0x210>
 800fc5e:	68ab      	ldr	r3, [r5, #8]
 800fc60:	9303      	str	r3, [sp, #12]
 800fc62:	686b      	ldr	r3, [r5, #4]
 800fc64:	9302      	str	r3, [sp, #8]
 800fc66:	682b      	ldr	r3, [r5, #0]
 800fc68:	9301      	str	r3, [sp, #4]
 800fc6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	f104 0010 	add.w	r0, r4, #16
 800fc72:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800fc74:	f004 fa74 	bl	8014160 <GUI__DrawTwinArc4>
 800fc78:	2600      	movs	r6, #0
 800fc7a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800fc7e:	f7f8 febd 	bl	80089fc <GUI_SetColor>
 800fc82:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fc84:	69a2      	ldr	r2, [r4, #24]
 800fc86:	6921      	ldr	r1, [r4, #16]
 800fc88:	6960      	ldr	r0, [r4, #20]
 800fc8a:	1ad2      	subs	r2, r2, r3
 800fc8c:	4419      	add	r1, r3
 800fc8e:	4430      	add	r0, r6
 800fc90:	f003 fa9e 	bl	80131d0 <GUI_DrawHLine>
 800fc94:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fc96:	69a2      	ldr	r2, [r4, #24]
 800fc98:	6921      	ldr	r1, [r4, #16]
 800fc9a:	69e0      	ldr	r0, [r4, #28]
 800fc9c:	1ad2      	subs	r2, r2, r3
 800fc9e:	4419      	add	r1, r3
 800fca0:	1b80      	subs	r0, r0, r6
 800fca2:	f003 fa95 	bl	80131d0 <GUI_DrawHLine>
 800fca6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fca8:	69e2      	ldr	r2, [r4, #28]
 800fcaa:	6961      	ldr	r1, [r4, #20]
 800fcac:	6920      	ldr	r0, [r4, #16]
 800fcae:	1ad2      	subs	r2, r2, r3
 800fcb0:	4419      	add	r1, r3
 800fcb2:	4430      	add	r0, r6
 800fcb4:	f003 faf2 	bl	801329c <GUI_DrawVLine>
 800fcb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fcba:	69e2      	ldr	r2, [r4, #28]
 800fcbc:	6961      	ldr	r1, [r4, #20]
 800fcbe:	69a0      	ldr	r0, [r4, #24]
 800fcc0:	1ad2      	subs	r2, r2, r3
 800fcc2:	1b80      	subs	r0, r0, r6
 800fcc4:	4419      	add	r1, r3
 800fcc6:	3601      	adds	r6, #1
 800fcc8:	f003 fae8 	bl	801329c <GUI_DrawVLine>
 800fccc:	2e02      	cmp	r6, #2
 800fcce:	d1d4      	bne.n	800fc7a <DROPDOWN_DrawSkinFlex+0xe6>
 800fcd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fcd2:	2b02      	cmp	r3, #2
 800fcd4:	dd18      	ble.n	800fd08 <DROPDOWN_DrawSkinFlex+0x174>
 800fcd6:	68a8      	ldr	r0, [r5, #8]
 800fcd8:	f7f8 fe90 	bl	80089fc <GUI_SetColor>
 800fcdc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800fcde:	6920      	ldr	r0, [r4, #16]
 800fce0:	6966      	ldr	r6, [r4, #20]
 800fce2:	69e3      	ldr	r3, [r4, #28]
 800fce4:	1842      	adds	r2, r0, r1
 800fce6:	1a5b      	subs	r3, r3, r1
 800fce8:	3a01      	subs	r2, #1
 800fcea:	4431      	add	r1, r6
 800fcec:	3002      	adds	r0, #2
 800fcee:	f003 fafd 	bl	80132ec <GUI_FillRect>
 800fcf2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800fcf4:	69a2      	ldr	r2, [r4, #24]
 800fcf6:	69e3      	ldr	r3, [r4, #28]
 800fcf8:	6966      	ldr	r6, [r4, #20]
 800fcfa:	1a50      	subs	r0, r2, r1
 800fcfc:	1a5b      	subs	r3, r3, r1
 800fcfe:	3a02      	subs	r2, #2
 800fd00:	4431      	add	r1, r6
 800fd02:	3001      	adds	r0, #1
 800fd04:	f003 faf2 	bl	80132ec <GUI_FillRect>
 800fd08:	6961      	ldr	r1, [r4, #20]
 800fd0a:	69e3      	ldr	r3, [r4, #28]
 800fd0c:	692f      	ldr	r7, [r5, #16]
 800fd0e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fd10:	6926      	ldr	r6, [r4, #16]
 800fd12:	69a2      	ldr	r2, [r4, #24]
 800fd14:	9701      	str	r7, [sp, #4]
 800fd16:	68ef      	ldr	r7, [r5, #12]
 800fd18:	9700      	str	r7, [sp, #0]
 800fd1a:	440b      	add	r3, r1
 800fd1c:	1a12      	subs	r2, r2, r0
 800fd1e:	105b      	asrs	r3, r3, #1
 800fd20:	4430      	add	r0, r6
 800fd22:	3102      	adds	r1, #2
 800fd24:	f003 f9e0 	bl	80130e8 <GUI_DrawGradientV>
 800fd28:	f104 0114 	add.w	r1, r4, #20
 800fd2c:	c90e      	ldmia	r1, {r1, r2, r3}
 800fd2e:	69af      	ldr	r7, [r5, #24]
 800fd30:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800fd32:	6920      	ldr	r0, [r4, #16]
 800fd34:	9701      	str	r7, [sp, #4]
 800fd36:	4419      	add	r1, r3
 800fd38:	696f      	ldr	r7, [r5, #20]
 800fd3a:	9700      	str	r7, [sp, #0]
 800fd3c:	1049      	asrs	r1, r1, #1
 800fd3e:	1b92      	subs	r2, r2, r6
 800fd40:	3b02      	subs	r3, #2
 800fd42:	3101      	adds	r1, #1
 800fd44:	4430      	add	r0, r6
 800fd46:	f003 f9cf 	bl	80130e8 <GUI_DrawGradientV>
 800fd4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800fd4c:	f7f8 fe56 	bl	80089fc <GUI_SetColor>
 800fd50:	69e2      	ldr	r2, [r4, #28]
 800fd52:	6961      	ldr	r1, [r4, #20]
 800fd54:	69a3      	ldr	r3, [r4, #24]
 800fd56:	1a50      	subs	r0, r2, r1
 800fd58:	1a18      	subs	r0, r3, r0
 800fd5a:	3a04      	subs	r2, #4
 800fd5c:	3104      	adds	r1, #4
 800fd5e:	3001      	adds	r0, #1
 800fd60:	f003 fa9c 	bl	801329c <GUI_DrawVLine>
 800fd64:	e01e      	b.n	800fda4 <DROPDOWN_DrawSkinFlex+0x210>
 800fd66:	6962      	ldr	r2, [r4, #20]
 800fd68:	69e3      	ldr	r3, [r4, #28]
 800fd6a:	69e8      	ldr	r0, [r5, #28]
 800fd6c:	1a9b      	subs	r3, r3, r2
 800fd6e:	f1a3 0608 	sub.w	r6, r3, #8
 800fd72:	1076      	asrs	r6, r6, #1
 800fd74:	69a2      	ldr	r2, [r4, #24]
 800fd76:	1e74      	subs	r4, r6, #1
 800fd78:	1c5f      	adds	r7, r3, #1
 800fd7a:	1b1b      	subs	r3, r3, r4
 800fd7c:	eba2 0767 	sub.w	r7, r2, r7, asr #1
 800fd80:	105c      	asrs	r4, r3, #1
 800fd82:	f7f8 fe3b 	bl	80089fc <GUI_SetColor>
 800fd86:	eb07 0806 	add.w	r8, r7, r6
 800fd8a:	2500      	movs	r5, #0
 800fd8c:	1bbf      	subs	r7, r7, r6
 800fd8e:	1960      	adds	r0, r4, r5
 800fd90:	3501      	adds	r5, #1
 800fd92:	1b73      	subs	r3, r6, r5
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	db05      	blt.n	800fda4 <DROPDOWN_DrawSkinFlex+0x210>
 800fd98:	ebc5 0208 	rsb	r2, r5, r8
 800fd9c:	1979      	adds	r1, r7, r5
 800fd9e:	f003 fa17 	bl	80131d0 <GUI_DrawHLine>
 800fda2:	e7f4      	b.n	800fd8e <DROPDOWN_DrawSkinFlex+0x1fa>
 800fda4:	2000      	movs	r0, #0
 800fda6:	b008      	add	sp, #32
 800fda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdac:	08019428 	.word	0x08019428

0800fdb0 <FRAMEWIN__GetBorderSize>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	b08a      	sub	sp, #40	; 0x28
 800fdb4:	4606      	mov	r6, r0
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	f7f8 faa6 	bl	8008308 <GUI_ALLOC_LockH>
 800fdbc:	ab0a      	add	r3, sp, #40	; 0x28
 800fdbe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800fdc0:	f843 0d28 	str.w	r0, [r3, #-40]!
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	6895      	ldr	r5, [r2, #8]
 800fdc8:	f7f8 faac 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fdcc:	9601      	str	r6, [sp, #4]
 800fdce:	2c03      	cmp	r4, #3
 800fdd0:	d80b      	bhi.n	800fdea <FRAMEWIN__GetBorderSize+0x3a>
 800fdd2:	e8df f004 	tbb	[pc, r4]
 800fdd6:	0402      	.short	0x0402
 800fdd8:	0806      	.short	0x0806
 800fdda:	2318      	movs	r3, #24
 800fddc:	e004      	b.n	800fde8 <FRAMEWIN__GetBorderSize+0x38>
 800fdde:	2316      	movs	r3, #22
 800fde0:	e002      	b.n	800fde8 <FRAMEWIN__GetBorderSize+0x38>
 800fde2:	2315      	movs	r3, #21
 800fde4:	e000      	b.n	800fde8 <FRAMEWIN__GetBorderSize+0x38>
 800fde6:	2317      	movs	r3, #23
 800fde8:	9302      	str	r3, [sp, #8]
 800fdea:	686b      	ldr	r3, [r5, #4]
 800fdec:	a801      	add	r0, sp, #4
 800fdee:	4798      	blx	r3
 800fdf0:	b00a      	add	sp, #40	; 0x28
 800fdf2:	bd70      	pop	{r4, r5, r6, pc}

0800fdf4 <FRAMEWIN__CalcTitleHeight>:
 800fdf4:	b508      	push	{r3, lr}
 800fdf6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800fdf8:	f003 0320 	and.w	r3, r3, #32
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	4602      	mov	r2, r0
 800fe00:	b13b      	cbz	r3, 800fe12 <FRAMEWIN__CalcTitleHeight+0x1e>
 800fe02:	f9b0 0054 	ldrsh.w	r0, [r0, #84]	; 0x54
 800fe06:	b928      	cbnz	r0, 800fe14 <FRAMEWIN__CalcTitleHeight+0x20>
 800fe08:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800fe0a:	f7f8 fd25 	bl	8008858 <GUI_GetYSizeOfFont>
 800fe0e:	3002      	adds	r0, #2
 800fe10:	bd08      	pop	{r3, pc}
 800fe12:	4618      	mov	r0, r3
 800fe14:	bd08      	pop	{r3, pc}

0800fe16 <FRAMEWIN__GetTitleLimits>:
 800fe16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe1a:	4681      	mov	r9, r0
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	4616      	mov	r6, r2
 800fe20:	f7f8 fa72 	bl	8008308 <GUI_ALLOC_LockH>
 800fe24:	4603      	mov	r3, r0
 800fe26:	a802      	add	r0, sp, #8
 800fe28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe2a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fe2e:	6897      	ldr	r7, [r2, #8]
 800fe30:	f9b3 4000 	ldrsh.w	r4, [r3]
 800fe34:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
 800fe38:	f7f8 fa74 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	2100      	movs	r1, #0
 800fe40:	4648      	mov	r0, r9
 800fe42:	4798      	blx	r3
 800fe44:	4607      	mov	r7, r0
 800fe46:	4648      	mov	r0, r9
 800fe48:	f7fe fe00 	bl	800ea4c <WM_GetFirstChild>
 800fe4c:	4681      	mov	r9, r0
 800fe4e:	b320      	cbz	r0, 800fe9a <FRAMEWIN__GetTitleLimits+0x84>
 800fe50:	4648      	mov	r0, r9
 800fe52:	f7f8 fa59 	bl	8008308 <GUI_ALLOC_LockH>
 800fe56:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800fe5a:	9001      	str	r0, [sp, #4]
 800fe5c:	ebc8 0303 	rsb	r3, r8, r3
 800fe60:	429f      	cmp	r7, r3
 800fe62:	d113      	bne.n	800fe8c <FRAMEWIN__GetTitleLimits+0x76>
 800fe64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fe66:	061b      	lsls	r3, r3, #24
 800fe68:	d508      	bpl.n	800fe7c <FRAMEWIN__GetTitleLimits+0x66>
 800fe6a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800fe6e:	6832      	ldr	r2, [r6, #0]
 800fe70:	1b1b      	subs	r3, r3, r4
 800fe72:	4293      	cmp	r3, r2
 800fe74:	dc0a      	bgt.n	800fe8c <FRAMEWIN__GetTitleLimits+0x76>
 800fe76:	3b01      	subs	r3, #1
 800fe78:	6033      	str	r3, [r6, #0]
 800fe7a:	e007      	b.n	800fe8c <FRAMEWIN__GetTitleLimits+0x76>
 800fe7c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fe80:	682a      	ldr	r2, [r5, #0]
 800fe82:	1b1b      	subs	r3, r3, r4
 800fe84:	4293      	cmp	r3, r2
 800fe86:	bfa4      	itt	ge
 800fe88:	3301      	addge	r3, #1
 800fe8a:	602b      	strge	r3, [r5, #0]
 800fe8c:	a801      	add	r0, sp, #4
 800fe8e:	f7f8 fa49 	bl	8008324 <GUI_ALLOC_UnlockH>
 800fe92:	4648      	mov	r0, r9
 800fe94:	f7fe fe40 	bl	800eb18 <WM_GetNextSibling>
 800fe98:	e7d8      	b.n	800fe4c <FRAMEWIN__GetTitleLimits+0x36>
 800fe9a:	b003      	add	sp, #12
 800fe9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fea0 <FRAMEWIN__CalcPositions>:
 800fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea4:	b087      	sub	sp, #28
 800fea6:	4606      	mov	r6, r0
 800fea8:	4689      	mov	r9, r1
 800feaa:	f7f8 fa2d 	bl	8008308 <GUI_ALLOC_LockH>
 800feae:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800feb0:	9003      	str	r0, [sp, #12]
 800feb2:	6894      	ldr	r4, [r2, #8]
 800feb4:	2101      	movs	r1, #1
 800feb6:	6822      	ldr	r2, [r4, #0]
 800feb8:	4630      	mov	r0, r6
 800feba:	4790      	blx	r2
 800febc:	6822      	ldr	r2, [r4, #0]
 800febe:	2103      	movs	r1, #3
 800fec0:	4680      	mov	r8, r0
 800fec2:	4630      	mov	r0, r6
 800fec4:	4790      	blx	r2
 800fec6:	6822      	ldr	r2, [r4, #0]
 800fec8:	2102      	movs	r1, #2
 800feca:	4683      	mov	fp, r0
 800fecc:	4630      	mov	r0, r6
 800fece:	4790      	blx	r2
 800fed0:	6822      	ldr	r2, [r4, #0]
 800fed2:	2100      	movs	r1, #0
 800fed4:	4682      	mov	sl, r0
 800fed6:	4630      	mov	r0, r6
 800fed8:	4790      	blx	r2
 800feda:	9000      	str	r0, [sp, #0]
 800fedc:	9803      	ldr	r0, [sp, #12]
 800fede:	f005 fd05 	bl	80158ec <WM__GetWindowSizeX>
 800fee2:	4605      	mov	r5, r0
 800fee4:	9803      	ldr	r0, [sp, #12]
 800fee6:	f005 fd08 	bl	80158fa <WM__GetWindowSizeY>
 800feea:	4607      	mov	r7, r0
 800feec:	9803      	ldr	r0, [sp, #12]
 800feee:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 800fef0:	f004 0420 	and.w	r4, r4, #32
 800fef4:	b2a4      	uxth	r4, r4
 800fef6:	b10c      	cbz	r4, 800fefc <FRAMEWIN__CalcPositions+0x5c>
 800fef8:	f9b0 4058 	ldrsh.w	r4, [r0, #88]	; 0x58
 800fefc:	f7ff ff7a 	bl	800fdf4 <FRAMEWIN__CalcTitleHeight>
 800ff00:	9903      	ldr	r1, [sp, #12]
 800ff02:	4602      	mov	r2, r0
 800ff04:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 800ff06:	b118      	cbz	r0, 800ff10 <FRAMEWIN__CalcPositions+0x70>
 800ff08:	9201      	str	r2, [sp, #4]
 800ff0a:	f005 fd19 	bl	8015940 <WM_GetWindowSizeY>
 800ff0e:	9a01      	ldr	r2, [sp, #4]
 800ff10:	f8bd 1000 	ldrh.w	r1, [sp]
 800ff14:	f8a9 2000 	strh.w	r2, [r9]
 800ff18:	b292      	uxth	r2, r2
 800ff1a:	4414      	add	r4, r2
 800ff1c:	3d01      	subs	r5, #1
 800ff1e:	440c      	add	r4, r1
 800ff20:	f8a9 100e 	strh.w	r1, [r9, #14]
 800ff24:	ebcb 0b05 	rsb	fp, fp, r5
 800ff28:	3f01      	subs	r7, #1
 800ff2a:	3901      	subs	r1, #1
 800ff2c:	4411      	add	r1, r2
 800ff2e:	f8a9 0002 	strh.w	r0, [r9, #2]
 800ff32:	fa0f f888 	sxth.w	r8, r8
 800ff36:	fa0f fb8b 	sxth.w	fp, fp
 800ff3a:	4420      	add	r0, r4
 800ff3c:	ebca 0a07 	rsb	sl, sl, r7
 800ff40:	f8a9 0006 	strh.w	r0, [r9, #6]
 800ff44:	f8a9 1012 	strh.w	r1, [r9, #18]
 800ff48:	f8a9 8004 	strh.w	r8, [r9, #4]
 800ff4c:	f8a9 b008 	strh.w	fp, [r9, #8]
 800ff50:	f8a9 a00a 	strh.w	sl, [r9, #10]
 800ff54:	f8a9 800c 	strh.w	r8, [r9, #12]
 800ff58:	f8a9 b010 	strh.w	fp, [r9, #16]
 800ff5c:	a803      	add	r0, sp, #12
 800ff5e:	f7f8 f9e1 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ff62:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
 800ff66:	9204      	str	r2, [sp, #16]
 800ff68:	aa06      	add	r2, sp, #24
 800ff6a:	f9b9 1010 	ldrsh.w	r1, [r9, #16]
 800ff6e:	f842 1d04 	str.w	r1, [r2, #-4]!
 800ff72:	4630      	mov	r0, r6
 800ff74:	a904      	add	r1, sp, #16
 800ff76:	f7ff ff4e 	bl	800fe16 <FRAMEWIN__GetTitleLimits>
 800ff7a:	9a04      	ldr	r2, [sp, #16]
 800ff7c:	f8a9 200c 	strh.w	r2, [r9, #12]
 800ff80:	9a05      	ldr	r2, [sp, #20]
 800ff82:	f8a9 2010 	strh.w	r2, [r9, #16]
 800ff86:	b007      	add	sp, #28
 800ff88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff8c <FRAMEWIN_GetActive>:
 800ff8c:	b513      	push	{r0, r1, r4, lr}
 800ff8e:	4604      	mov	r4, r0
 800ff90:	b180      	cbz	r0, 800ffb4 <FRAMEWIN_GetActive+0x28>
 800ff92:	f7f9 fee3 	bl	8009d5c <GUI_Lock>
 800ff96:	4620      	mov	r0, r4
 800ff98:	f7f8 f9b6 	bl	8008308 <GUI_ALLOC_LockH>
 800ff9c:	ab02      	add	r3, sp, #8
 800ff9e:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 800ffa2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800ffac:	f7f8 f9ba 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ffb0:	f7f9 feca 	bl	8009d48 <GUI_Unlock>
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	b002      	add	sp, #8
 800ffb8:	bd10      	pop	{r4, pc}

0800ffba <FRAMEWIN_SetOwnerDraw>:
 800ffba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	460d      	mov	r5, r1
 800ffc0:	f7f9 fecc 	bl	8009d5c <GUI_Lock>
 800ffc4:	b164      	cbz	r4, 800ffe0 <FRAMEWIN_SetOwnerDraw+0x26>
 800ffc6:	4620      	mov	r0, r4
 800ffc8:	f7f8 f99e 	bl	8008308 <GUI_ALLOC_LockH>
 800ffcc:	ab02      	add	r3, sp, #8
 800ffce:	6605      	str	r5, [r0, #96]	; 0x60
 800ffd0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f8 f9a5 	bl	8008324 <GUI_ALLOC_UnlockH>
 800ffda:	4620      	mov	r0, r4
 800ffdc:	f7fd ffc0 	bl	800df60 <WM_InvalidateWindow>
 800ffe0:	f7f9 feb2 	bl	8009d48 <GUI_Unlock>
 800ffe4:	b003      	add	sp, #12
 800ffe6:	bd30      	pop	{r4, r5, pc}

0800ffe8 <FRAMEWIN_SetDefaultFont>:
 800ffe8:	4b01      	ldr	r3, [pc, #4]	; (800fff0 <FRAMEWIN_SetDefaultFont+0x8>)
 800ffea:	6018      	str	r0, [r3, #0]
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	20000254 	.word	0x20000254

0800fff4 <FRAMEWIN_SetDefaultClientColor>:
 800fff4:	4b01      	ldr	r3, [pc, #4]	; (800fffc <FRAMEWIN_SetDefaultClientColor+0x8>)
 800fff6:	6158      	str	r0, [r3, #20]
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	20000254 	.word	0x20000254

08010000 <FRAMEWIN_SetDefaultTitleHeight>:
 8010000:	4b01      	ldr	r3, [pc, #4]	; (8010008 <FRAMEWIN_SetDefaultTitleHeight+0x8>)
 8010002:	8418      	strh	r0, [r3, #32]
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	20000254 	.word	0x20000254

0801000c <FRAMEWIN_SetDefaultTextColor>:
 801000c:	2801      	cmp	r0, #1
 801000e:	bf9e      	ittt	ls
 8010010:	4b02      	ldrls	r3, [pc, #8]	; (801001c <FRAMEWIN_SetDefaultTextColor+0x10>)
 8010012:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 8010016:	60c1      	strls	r1, [r0, #12]
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	20000254 	.word	0x20000254

08010020 <_GetBorderSize>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	b08a      	sub	sp, #40	; 0x28
 8010024:	4606      	mov	r6, r0
 8010026:	460c      	mov	r4, r1
 8010028:	f7f8 f96e 	bl	8008308 <GUI_ALLOC_LockH>
 801002c:	ab0a      	add	r3, sp, #40	; 0x28
 801002e:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8010030:	f843 0d28 	str.w	r0, [r3, #-40]!
 8010034:	4618      	mov	r0, r3
 8010036:	f7f8 f975 	bl	8008324 <GUI_ALLOC_UnlockH>
 801003a:	9601      	str	r6, [sp, #4]
 801003c:	2c03      	cmp	r4, #3
 801003e:	d80b      	bhi.n	8010058 <_GetBorderSize+0x38>
 8010040:	e8df f004 	tbb	[pc, r4]
 8010044:	08060402 	.word	0x08060402
 8010048:	2318      	movs	r3, #24
 801004a:	e004      	b.n	8010056 <_GetBorderSize+0x36>
 801004c:	2316      	movs	r3, #22
 801004e:	e002      	b.n	8010056 <_GetBorderSize+0x36>
 8010050:	2315      	movs	r3, #21
 8010052:	e000      	b.n	8010056 <_GetBorderSize+0x36>
 8010054:	2317      	movs	r3, #23
 8010056:	9302      	str	r3, [sp, #8]
 8010058:	a801      	add	r0, sp, #4
 801005a:	47a8      	blx	r5
 801005c:	b00a      	add	sp, #40	; 0x28
 801005e:	bd70      	pop	{r4, r5, r6, pc}

08010060 <_Create>:
 8010060:	b530      	push	{r4, r5, lr}
 8010062:	b08b      	sub	sp, #44	; 0x2c
 8010064:	4605      	mov	r5, r0
 8010066:	f7f8 f94f 	bl	8008308 <GUI_ALLOC_LockH>
 801006a:	ab0a      	add	r3, sp, #40	; 0x28
 801006c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801006e:	f843 0d28 	str.w	r0, [r3, #-40]!
 8010072:	4618      	mov	r0, r3
 8010074:	6894      	ldr	r4, [r2, #8]
 8010076:	f7f8 f955 	bl	8008324 <GUI_ALLOC_UnlockH>
 801007a:	a80a      	add	r0, sp, #40	; 0x28
 801007c:	2300      	movs	r3, #0
 801007e:	9302      	str	r3, [sp, #8]
 8010080:	f840 5d24 	str.w	r5, [r0, #-36]!
 8010084:	6863      	ldr	r3, [r4, #4]
 8010086:	4798      	blx	r3
 8010088:	b00b      	add	sp, #44	; 0x2c
 801008a:	bd30      	pop	{r4, r5, pc}

0801008c <_Paint>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	b08f      	sub	sp, #60	; 0x3c
 8010092:	4604      	mov	r4, r0
 8010094:	f7f8 f938 	bl	8008308 <GUI_ALLOC_LockH>
 8010098:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801009a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 801009c:	689d      	ldr	r5, [r3, #8]
 801009e:	9201      	str	r2, [sp, #4]
 80100a0:	9004      	str	r0, [sp, #16]
 80100a2:	f8d0 8050 	ldr.w	r8, [r0, #80]	; 0x50
 80100a6:	f7ff fea5 	bl	800fdf4 <FRAMEWIN__CalcTitleHeight>
 80100aa:	4606      	mov	r6, r0
 80100ac:	a80e      	add	r0, sp, #56	; 0x38
 80100ae:	f850 3d28 	ldr.w	r3, [r0, #-40]!
 80100b2:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 80100b6:	9203      	str	r2, [sp, #12]
 80100b8:	f7f8 f934 	bl	8008324 <GUI_ALLOC_UnlockH>
 80100bc:	4620      	mov	r0, r4
 80100be:	f005 fc23 	bl	8015908 <WM_GetWindowSizeX>
 80100c2:	4682      	mov	sl, r0
 80100c4:	4620      	mov	r0, r4
 80100c6:	f005 fc3b 	bl	8015940 <WM_GetWindowSizeY>
 80100ca:	682b      	ldr	r3, [r5, #0]
 80100cc:	2101      	movs	r1, #1
 80100ce:	4683      	mov	fp, r0
 80100d0:	4620      	mov	r0, r4
 80100d2:	4798      	blx	r3
 80100d4:	682b      	ldr	r3, [r5, #0]
 80100d6:	9000      	str	r0, [sp, #0]
 80100d8:	2103      	movs	r1, #3
 80100da:	4620      	mov	r0, r4
 80100dc:	4798      	blx	r3
 80100de:	682b      	ldr	r3, [r5, #0]
 80100e0:	2100      	movs	r1, #0
 80100e2:	4607      	mov	r7, r0
 80100e4:	4620      	mov	r0, r4
 80100e6:	4798      	blx	r3
 80100e8:	682b      	ldr	r3, [r5, #0]
 80100ea:	4681      	mov	r9, r0
 80100ec:	2102      	movs	r1, #2
 80100ee:	4620      	mov	r0, r4
 80100f0:	4798      	blx	r3
 80100f2:	9002      	str	r0, [sp, #8]
 80100f4:	2000      	movs	r0, #0
 80100f6:	9405      	str	r4, [sp, #20]
 80100f8:	f7fe f9b8 	bl	800e46c <WM__InitIVRSearch>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d041      	beq.n	8010184 <_Paint+0xf8>
 8010100:	9a03      	ldr	r2, [sp, #12]
 8010102:	444e      	add	r6, r9
 8010104:	ebc7 050a 	rsb	r5, r7, sl
 8010108:	1997      	adds	r7, r2, r6
 801010a:	3d01      	subs	r5, #1
 801010c:	3f01      	subs	r7, #1
 801010e:	2300      	movs	r3, #0
 8010110:	930a      	str	r3, [sp, #40]	; 0x28
 8010112:	9309      	str	r3, [sp, #36]	; 0x24
 8010114:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010118:	930b      	str	r3, [sp, #44]	; 0x2c
 801011a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801011e:	930c      	str	r3, [sp, #48]	; 0x30
 8010120:	230b      	movs	r3, #11
 8010122:	9306      	str	r3, [sp, #24]
 8010124:	a805      	add	r0, sp, #20
 8010126:	47c0      	blx	r8
 8010128:	9b00      	ldr	r3, [sp, #0]
 801012a:	9309      	str	r3, [sp, #36]	; 0x24
 801012c:	9b02      	ldr	r3, [sp, #8]
 801012e:	960a      	str	r6, [sp, #40]	; 0x28
 8010130:	ebc3 030b 	rsb	r3, r3, fp
 8010134:	3b01      	subs	r3, #1
 8010136:	429f      	cmp	r7, r3
 8010138:	bfd4      	ite	le
 801013a:	970c      	strle	r7, [sp, #48]	; 0x30
 801013c:	930c      	strgt	r3, [sp, #48]	; 0x30
 801013e:	230e      	movs	r3, #14
 8010140:	9306      	str	r3, [sp, #24]
 8010142:	950b      	str	r5, [sp, #44]	; 0x2c
 8010144:	a805      	add	r0, sp, #20
 8010146:	47c0      	blx	r8
 8010148:	9b00      	ldr	r3, [sp, #0]
 801014a:	9309      	str	r3, [sp, #36]	; 0x24
 801014c:	1e73      	subs	r3, r6, #1
 801014e:	930c      	str	r3, [sp, #48]	; 0x30
 8010150:	2305      	movs	r3, #5
 8010152:	9306      	str	r3, [sp, #24]
 8010154:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8010158:	950b      	str	r5, [sp, #44]	; 0x2c
 801015a:	a805      	add	r0, sp, #20
 801015c:	47c0      	blx	r8
 801015e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010160:	a909      	add	r1, sp, #36	; 0x24
 8010162:	4620      	mov	r0, r4
 8010164:	f7ff fe57 	bl	800fe16 <FRAMEWIN__GetTitleLimits>
 8010168:	2002      	movs	r0, #2
 801016a:	f7f8 fcbf 	bl	8008aec <GUI_SetTextMode>
 801016e:	9801      	ldr	r0, [sp, #4]
 8010170:	f7f8 fc6e 	bl	8008a50 <GUI_SetFont>
 8010174:	2312      	movs	r3, #18
 8010176:	9306      	str	r3, [sp, #24]
 8010178:	a805      	add	r0, sp, #20
 801017a:	47c0      	blx	r8
 801017c:	f7fe f8b4 	bl	800e2e8 <WM__GetNextIVR>
 8010180:	2800      	cmp	r0, #0
 8010182:	d1c4      	bne.n	801010e <_Paint+0x82>
 8010184:	b00f      	add	sp, #60	; 0x3c
 8010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801018a <FRAMEWIN_OwnerDraw>:
 801018a:	b530      	push	{r4, r5, lr}
 801018c:	4604      	mov	r4, r0
 801018e:	b089      	sub	sp, #36	; 0x24
 8010190:	6800      	ldr	r0, [r0, #0]
 8010192:	f7f8 f8b9 	bl	8008308 <GUI_ALLOC_LockH>
 8010196:	6a25      	ldr	r5, [r4, #32]
 8010198:	9000      	str	r0, [sp, #0]
 801019a:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 801019e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80101a0:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 80101a4:	b108      	cbz	r0, 80101aa <FRAMEWIN_OwnerDraw+0x20>
 80101a6:	f7f8 f8af 	bl	8008308 <GUI_ALLOC_LockH>
 80101aa:	462a      	mov	r2, r5
 80101ac:	9001      	str	r0, [sp, #4]
 80101ae:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80101b2:	6851      	ldr	r1, [r2, #4]
 80101b4:	892a      	ldrh	r2, [r5, #8]
 80101b6:	ab06      	add	r3, sp, #24
 80101b8:	c303      	stmia	r3!, {r0, r1}
 80101ba:	88ab      	ldrh	r3, [r5, #4]
 80101bc:	3b01      	subs	r3, #1
 80101be:	f8ad 3008 	strh.w	r3, [sp, #8]
 80101c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101c6:	f8ad 300a 	strh.w	r3, [sp, #10]
 80101ca:	3301      	adds	r3, #1
 80101cc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80101d0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80101d4:	3201      	adds	r2, #1
 80101d6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80101da:	3b01      	subs	r3, #1
 80101dc:	8a6a      	ldrh	r2, [r5, #18]
 80101de:	f8ad 200e 	strh.w	r2, [sp, #14]
 80101e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80101e6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80101ea:	9b00      	ldr	r3, [sp, #0]
 80101ec:	3201      	adds	r2, #1
 80101ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80101f0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80101f4:	f7f8 fc2c 	bl	8008a50 <GUI_SetFont>
 80101f8:	9b00      	ldr	r3, [sp, #0]
 80101fa:	9801      	ldr	r0, [sp, #4]
 80101fc:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8010200:	a906      	add	r1, sp, #24
 8010202:	aa04      	add	r2, sp, #16
 8010204:	f7fa f955 	bl	800a4b2 <GUI__CalcTextRect>
 8010208:	9b00      	ldr	r3, [sp, #0]
 801020a:	f104 020c 	add.w	r2, r4, #12
 801020e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010212:	340e      	adds	r4, #14
 8010214:	6898      	ldr	r0, [r3, #8]
 8010216:	f7fa fdc5 	bl	800ada4 <LCD_SetBkColor>
 801021a:	9b00      	ldr	r3, [sp, #0]
 801021c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010220:	68a0      	ldr	r0, [r4, #8]
 8010222:	f7fa fdc5 	bl	800adb0 <LCD_SetColor>
 8010226:	ab04      	add	r3, sp, #16
 8010228:	aa06      	add	r2, sp, #24
 801022a:	a902      	add	r1, sp, #8
 801022c:	9801      	ldr	r0, [sp, #4]
 801022e:	f002 f8ed 	bl	801240c <WIDGET__FillStringInRect>
 8010232:	4668      	mov	r0, sp
 8010234:	f7f8 f876 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010238:	9b01      	ldr	r3, [sp, #4]
 801023a:	b113      	cbz	r3, 8010242 <FRAMEWIN_OwnerDraw+0xb8>
 801023c:	a801      	add	r0, sp, #4
 801023e:	f7f8 f871 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010242:	2000      	movs	r0, #0
 8010244:	b009      	add	sp, #36	; 0x24
 8010246:	bd30      	pop	{r4, r5, pc}

08010248 <_GetBorderSize>:
 8010248:	b513      	push	{r0, r1, r4, lr}
 801024a:	f7f8 f85d 	bl	8008308 <GUI_ALLOC_LockH>
 801024e:	ab02      	add	r3, sp, #8
 8010250:	f9b0 4056 	ldrsh.w	r4, [r0, #86]	; 0x56
 8010254:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010258:	4618      	mov	r0, r3
 801025a:	f7f8 f863 	bl	8008324 <GUI_ALLOC_UnlockH>
 801025e:	4620      	mov	r0, r4
 8010260:	b002      	add	sp, #8
 8010262:	bd10      	pop	{r4, pc}

08010264 <_Create>:
 8010264:	4901      	ldr	r1, [pc, #4]	; (801026c <_Create+0x8>)
 8010266:	f7ff bea8 	b.w	800ffba <FRAMEWIN_SetOwnerDraw>
 801026a:	bf00      	nop
 801026c:	0801018b 	.word	0x0801018b

08010270 <_Paint>:
 8010270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010274:	b093      	sub	sp, #76	; 0x4c
 8010276:	4604      	mov	r4, r0
 8010278:	f7f8 f846 	bl	8008308 <GUI_ALLOC_LockH>
 801027c:	9001      	str	r0, [sp, #4]
 801027e:	4620      	mov	r0, r4
 8010280:	f005 fb42 	bl	8015908 <WM_GetWindowSizeX>
 8010284:	4606      	mov	r6, r0
 8010286:	4620      	mov	r0, r4
 8010288:	f005 fb5a 	bl	8015940 <WM_GetWindowSizeY>
 801028c:	f10d 0910 	add.w	r9, sp, #16
 8010290:	9b01      	ldr	r3, [sp, #4]
 8010292:	4607      	mov	r7, r0
 8010294:	4649      	mov	r1, r9
 8010296:	4620      	mov	r0, r4
 8010298:	f9b3 5056 	ldrsh.w	r5, [r3, #86]	; 0x56
 801029c:	f7ff fe00 	bl	800fea0 <FRAMEWIN__CalcPositions>
 80102a0:	2301      	movs	r3, #1
 80102a2:	930a      	str	r3, [sp, #40]	; 0x28
 80102a4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80102a8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80102ac:	930d      	str	r3, [sp, #52]	; 0x34
 80102ae:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80102b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80102b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80102b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80102bc:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 80102c0:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
 80102c4:	9409      	str	r4, [sp, #36]	; 0x24
 80102c6:	3b01      	subs	r3, #1
 80102c8:	b21b      	sxth	r3, r3
 80102ca:	f8ad 300a 	strh.w	r3, [sp, #10]
 80102ce:	2000      	movs	r0, #0
 80102d0:	3301      	adds	r3, #1
 80102d2:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 80102d6:	f8ad 200e 	strh.w	r2, [sp, #14]
 80102da:	9210      	str	r2, [sp, #64]	; 0x40
 80102dc:	930e      	str	r3, [sp, #56]	; 0x38
 80102de:	f7fe f8c5 	bl	800e46c <WM__InitIVRSearch>
 80102e2:	b928      	cbnz	r0, 80102f0 <_Paint+0x80>
 80102e4:	a801      	add	r0, sp, #4
 80102e6:	f7f8 f81d 	bl	8008324 <GUI_ALLOC_UnlockH>
 80102ea:	b013      	add	sp, #76	; 0x4c
 80102ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f0:	44a8      	add	r8, r5
 80102f2:	a802      	add	r0, sp, #8
 80102f4:	f7fe fe12 	bl	800ef1c <WM_SetUserClipRect>
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80102fc:	b10b      	cbz	r3, 8010302 <_Paint+0x92>
 80102fe:	a809      	add	r0, sp, #36	; 0x24
 8010300:	4798      	blx	r3
 8010302:	2000      	movs	r0, #0
 8010304:	f7fe fe0a 	bl	800ef1c <WM_SetUserClipRect>
 8010308:	481c      	ldr	r0, [pc, #112]	; (801037c <_Paint+0x10c>)
 801030a:	f7fa fd51 	bl	800adb0 <LCD_SetColor>
 801030e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8010312:	2100      	movs	r1, #0
 8010314:	4608      	mov	r0, r1
 8010316:	1e6b      	subs	r3, r5, #1
 8010318:	464a      	mov	r2, r9
 801031a:	f002 ffe7 	bl	80132ec <GUI_FillRect>
 801031e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8010322:	1e7c      	subs	r4, r7, #1
 8010324:	2100      	movs	r1, #0
 8010326:	4608      	mov	r0, r1
 8010328:	4623      	mov	r3, r4
 801032a:	3a01      	subs	r2, #1
 801032c:	f002 ffde 	bl	80132ec <GUI_FillRect>
 8010330:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8010334:	4623      	mov	r3, r4
 8010336:	464a      	mov	r2, r9
 8010338:	2100      	movs	r1, #0
 801033a:	3001      	adds	r0, #1
 801033c:	f002 ffd6 	bl	80132ec <GUI_FillRect>
 8010340:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8010344:	4623      	mov	r3, r4
 8010346:	464a      	mov	r2, r9
 8010348:	3101      	adds	r1, #1
 801034a:	2000      	movs	r0, #0
 801034c:	f002 ffce 	bl	80132ec <GUI_FillRect>
 8010350:	9b01      	ldr	r3, [sp, #4]
 8010352:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010354:	0692      	lsls	r2, r2, #26
 8010356:	d508      	bpl.n	801036a <_Paint+0xfa>
 8010358:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 801035c:	4443      	add	r3, r8
 801035e:	3b01      	subs	r3, #1
 8010360:	464a      	mov	r2, r9
 8010362:	4641      	mov	r1, r8
 8010364:	2000      	movs	r0, #0
 8010366:	f002 ffc1 	bl	80132ec <GUI_FillRect>
 801036a:	2d01      	cmp	r5, #1
 801036c:	dd01      	ble.n	8010372 <_Paint+0x102>
 801036e:	f002 f9ed 	bl	801274c <WIDGET_EFFECT_3D_DrawUp>
 8010372:	f7fd ffb9 	bl	800e2e8 <WM__GetNextIVR>
 8010376:	2800      	cmp	r0, #0
 8010378:	d1bb      	bne.n	80102f2 <_Paint+0x82>
 801037a:	e7b3      	b.n	80102e4 <_Paint+0x74>
 801037c:	00aaaaaa 	.word	0x00aaaaaa

08010380 <FRAMEWIN_SetDefaultSkinClassic>:
 8010380:	4b01      	ldr	r3, [pc, #4]	; (8010388 <FRAMEWIN_SetDefaultSkinClassic+0x8>)
 8010382:	4a02      	ldr	r2, [pc, #8]	; (801038c <FRAMEWIN_SetDefaultSkinClassic+0xc>)
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	4770      	bx	lr
 8010388:	2000027c 	.word	0x2000027c
 801038c:	08019438 	.word	0x08019438

08010390 <FRAMEWIN_DrawSkinFlex>:
 8010390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010394:	4604      	mov	r4, r0
 8010396:	b090      	sub	sp, #64	; 0x40
 8010398:	6800      	ldr	r0, [r0, #0]
 801039a:	f7ff fdf7 	bl	800ff8c <FRAMEWIN_GetActive>
 801039e:	4ba5      	ldr	r3, [pc, #660]	; (8010634 <FRAMEWIN_DrawSkinFlex+0x2a4>)
 80103a0:	6866      	ldr	r6, [r4, #4]
 80103a2:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80103a6:	2800      	cmp	r0, #0
 80103a8:	bf18      	it	ne
 80103aa:	461d      	movne	r5, r3
 80103ac:	2e1c      	cmp	r6, #28
 80103ae:	f200 81a2 	bhi.w	80106f6 <FRAMEWIN_DrawSkinFlex+0x366>
 80103b2:	e8df f016 	tbh	[pc, r6, lsl #1]
 80103b6:	018d      	.short	0x018d
 80103b8:	01a001a0 	.word	0x01a001a0
 80103bc:	01a001a0 	.word	0x01a001a0
 80103c0:	01a00127 	.word	0x01a00127
 80103c4:	01a001a0 	.word	0x01a001a0
 80103c8:	01a001a0 	.word	0x01a001a0
 80103cc:	01a00027 	.word	0x01a00027
 80103d0:	017a01a0 	.word	0x017a01a0
 80103d4:	01a001a0 	.word	0x01a001a0
 80103d8:	014101a0 	.word	0x014101a0
 80103dc:	01a001a0 	.word	0x01a001a0
 80103e0:	001d0023 	.word	0x001d0023
 80103e4:	0021001f 	.word	0x0021001f
 80103e8:	01a001a0 	.word	0x01a001a0
 80103ec:	002501a0 	.word	0x002501a0
 80103f0:	69ee      	ldr	r6, [r5, #28]
 80103f2:	e185      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 80103f4:	6a2e      	ldr	r6, [r5, #32]
 80103f6:	e183      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 80103f8:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80103fa:	e181      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 80103fc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80103fe:	e17f      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 8010400:	696e      	ldr	r6, [r5, #20]
 8010402:	e17d      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 8010404:	231c      	movs	r3, #28
 8010406:	6820      	ldr	r0, [r4, #0]
 8010408:	9308      	str	r3, [sp, #32]
 801040a:	9007      	str	r0, [sp, #28]
 801040c:	f7f7 ff7c 	bl	8008308 <GUI_ALLOC_LockH>
 8010410:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010412:	9005      	str	r0, [sp, #20]
 8010414:	a807      	add	r0, sp, #28
 8010416:	4798      	blx	r3
 8010418:	4606      	mov	r6, r0
 801041a:	a805      	add	r0, sp, #20
 801041c:	f7f7 ff82 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010420:	2e01      	cmp	r6, #1
 8010422:	dd11      	ble.n	8010448 <FRAMEWIN_DrawSkinFlex+0xb8>
 8010424:	68ab      	ldr	r3, [r5, #8]
 8010426:	9302      	str	r3, [sp, #8]
 8010428:	686b      	ldr	r3, [r5, #4]
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	6962      	ldr	r2, [r4, #20]
 8010432:	69a1      	ldr	r1, [r4, #24]
 8010434:	6920      	ldr	r0, [r4, #16]
 8010436:	4633      	mov	r3, r6
 8010438:	f003 fdd8 	bl	8013fec <GUI__DrawTwinArc2>
 801043c:	6927      	ldr	r7, [r4, #16]
 801043e:	69a3      	ldr	r3, [r4, #24]
 8010440:	4437      	add	r7, r6
 8010442:	ebc6 0803 	rsb	r8, r6, r3
 8010446:	e02c      	b.n	80104a2 <FRAMEWIN_DrawSkinFlex+0x112>
 8010448:	6828      	ldr	r0, [r5, #0]
 801044a:	f7f8 fad7 	bl	80089fc <GUI_SetColor>
 801044e:	6921      	ldr	r1, [r4, #16]
 8010450:	69ea      	ldr	r2, [r5, #28]
 8010452:	6960      	ldr	r0, [r4, #20]
 8010454:	440a      	add	r2, r1
 8010456:	3a01      	subs	r2, #1
 8010458:	f002 feba 	bl	80131d0 <GUI_DrawHLine>
 801045c:	69a2      	ldr	r2, [r4, #24]
 801045e:	69e9      	ldr	r1, [r5, #28]
 8010460:	6960      	ldr	r0, [r4, #20]
 8010462:	1a51      	subs	r1, r2, r1
 8010464:	3101      	adds	r1, #1
 8010466:	f002 feb3 	bl	80131d0 <GUI_DrawHLine>
 801046a:	6967      	ldr	r7, [r4, #20]
 801046c:	6920      	ldr	r0, [r4, #16]
 801046e:	3701      	adds	r7, #1
 8010470:	4639      	mov	r1, r7
 8010472:	f002 fedb 	bl	801322c <GUI_DrawPixel>
 8010476:	4639      	mov	r1, r7
 8010478:	69a0      	ldr	r0, [r4, #24]
 801047a:	f002 fed7 	bl	801322c <GUI_DrawPixel>
 801047e:	6868      	ldr	r0, [r5, #4]
 8010480:	f7f8 fabc 	bl	80089fc <GUI_SetColor>
 8010484:	6920      	ldr	r0, [r4, #16]
 8010486:	4639      	mov	r1, r7
 8010488:	3001      	adds	r0, #1
 801048a:	f002 fecf 	bl	801322c <GUI_DrawPixel>
 801048e:	69a0      	ldr	r0, [r4, #24]
 8010490:	4639      	mov	r1, r7
 8010492:	3801      	subs	r0, #1
 8010494:	f002 feca 	bl	801322c <GUI_DrawPixel>
 8010498:	6927      	ldr	r7, [r4, #16]
 801049a:	69a3      	ldr	r3, [r4, #24]
 801049c:	3702      	adds	r7, #2
 801049e:	f1a3 0802 	sub.w	r8, r3, #2
 80104a2:	6828      	ldr	r0, [r5, #0]
 80104a4:	f7f8 faaa 	bl	80089fc <GUI_SetColor>
 80104a8:	4642      	mov	r2, r8
 80104aa:	4639      	mov	r1, r7
 80104ac:	6960      	ldr	r0, [r4, #20]
 80104ae:	f002 fe8f 	bl	80131d0 <GUI_DrawHLine>
 80104b2:	6868      	ldr	r0, [r5, #4]
 80104b4:	f7f8 faa2 	bl	80089fc <GUI_SetColor>
 80104b8:	6960      	ldr	r0, [r4, #20]
 80104ba:	4642      	mov	r2, r8
 80104bc:	4639      	mov	r1, r7
 80104be:	3001      	adds	r0, #1
 80104c0:	f002 fe86 	bl	80131d0 <GUI_DrawHLine>
 80104c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	dd0a      	ble.n	80104e0 <FRAMEWIN_DrawSkinFlex+0x150>
 80104ca:	68a8      	ldr	r0, [r5, #8]
 80104cc:	f7f8 fa96 	bl	80089fc <GUI_SetColor>
 80104d0:	6961      	ldr	r1, [r4, #20]
 80104d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104d4:	440b      	add	r3, r1
 80104d6:	3b01      	subs	r3, #1
 80104d8:	4642      	mov	r2, r8
 80104da:	3102      	adds	r1, #2
 80104dc:	4638      	mov	r0, r7
 80104de:	e01c      	b.n	801051a <FRAMEWIN_DrawSkinFlex+0x18a>
 80104e0:	6a2a      	ldr	r2, [r5, #32]
 80104e2:	4296      	cmp	r6, r2
 80104e4:	da1b      	bge.n	801051e <FRAMEWIN_DrawSkinFlex+0x18e>
 80104e6:	6967      	ldr	r7, [r4, #20]
 80104e8:	6923      	ldr	r3, [r4, #16]
 80104ea:	2e01      	cmp	r6, #1
 80104ec:	f107 0802 	add.w	r8, r7, #2
 80104f0:	f340 8103 	ble.w	80106fa <FRAMEWIN_DrawSkinFlex+0x36a>
 80104f4:	4437      	add	r7, r6
 80104f6:	18f0      	adds	r0, r6, r3
 80104f8:	441a      	add	r2, r3
 80104fa:	3a01      	subs	r2, #1
 80104fc:	463b      	mov	r3, r7
 80104fe:	4641      	mov	r1, r8
 8010500:	f002 fef4 	bl	80132ec <GUI_FillRect>
 8010504:	69a3      	ldr	r3, [r4, #24]
 8010506:	69e8      	ldr	r0, [r5, #28]
 8010508:	2e01      	cmp	r6, #1
 801050a:	eba3 0000 	sub.w	r0, r3, r0
 801050e:	bfcc      	ite	gt
 8010510:	1b9a      	subgt	r2, r3, r6
 8010512:	1e9a      	suble	r2, r3, #2
 8010514:	4641      	mov	r1, r8
 8010516:	463b      	mov	r3, r7
 8010518:	3001      	adds	r0, #1
 801051a:	f002 fee7 	bl	80132ec <GUI_FillRect>
 801051e:	6963      	ldr	r3, [r4, #20]
 8010520:	69e7      	ldr	r7, [r4, #28]
 8010522:	6828      	ldr	r0, [r5, #0]
 8010524:	2e01      	cmp	r6, #1
 8010526:	bfcc      	ite	gt
 8010528:	18f6      	addgt	r6, r6, r3
 801052a:	1c9e      	addle	r6, r3, #2
 801052c:	3f01      	subs	r7, #1
 801052e:	f7f8 fa65 	bl	80089fc <GUI_SetColor>
 8010532:	463a      	mov	r2, r7
 8010534:	4631      	mov	r1, r6
 8010536:	6920      	ldr	r0, [r4, #16]
 8010538:	f002 feb0 	bl	801329c <GUI_DrawVLine>
 801053c:	463a      	mov	r2, r7
 801053e:	4631      	mov	r1, r6
 8010540:	69a0      	ldr	r0, [r4, #24]
 8010542:	f002 feab 	bl	801329c <GUI_DrawVLine>
 8010546:	69e7      	ldr	r7, [r4, #28]
 8010548:	6868      	ldr	r0, [r5, #4]
 801054a:	f7f8 fa57 	bl	80089fc <GUI_SetColor>
 801054e:	6920      	ldr	r0, [r4, #16]
 8010550:	3f02      	subs	r7, #2
 8010552:	463a      	mov	r2, r7
 8010554:	4631      	mov	r1, r6
 8010556:	3001      	adds	r0, #1
 8010558:	f002 fea0 	bl	801329c <GUI_DrawVLine>
 801055c:	69a0      	ldr	r0, [r4, #24]
 801055e:	463a      	mov	r2, r7
 8010560:	4631      	mov	r1, r6
 8010562:	3801      	subs	r0, #1
 8010564:	f002 fe9a 	bl	801329c <GUI_DrawVLine>
 8010568:	69eb      	ldr	r3, [r5, #28]
 801056a:	2b02      	cmp	r3, #2
 801056c:	dc02      	bgt.n	8010574 <FRAMEWIN_DrawSkinFlex+0x1e4>
 801056e:	6a2b      	ldr	r3, [r5, #32]
 8010570:	2b02      	cmp	r3, #2
 8010572:	dd1f      	ble.n	80105b4 <FRAMEWIN_DrawSkinFlex+0x224>
 8010574:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8010576:	69e7      	ldr	r7, [r4, #28]
 8010578:	68a8      	ldr	r0, [r5, #8]
 801057a:	2b02      	cmp	r3, #2
 801057c:	bfcc      	ite	gt
 801057e:	1aff      	subgt	r7, r7, r3
 8010580:	3f02      	suble	r7, #2
 8010582:	f7f8 fa3b 	bl	80089fc <GUI_SetColor>
 8010586:	69ea      	ldr	r2, [r5, #28]
 8010588:	2a02      	cmp	r2, #2
 801058a:	dd07      	ble.n	801059c <FRAMEWIN_DrawSkinFlex+0x20c>
 801058c:	6920      	ldr	r0, [r4, #16]
 801058e:	4402      	add	r2, r0
 8010590:	463b      	mov	r3, r7
 8010592:	3a01      	subs	r2, #1
 8010594:	4631      	mov	r1, r6
 8010596:	3002      	adds	r0, #2
 8010598:	f002 fea8 	bl	80132ec <GUI_FillRect>
 801059c:	6a2b      	ldr	r3, [r5, #32]
 801059e:	2b02      	cmp	r3, #2
 80105a0:	dd08      	ble.n	80105b4 <FRAMEWIN_DrawSkinFlex+0x224>
 80105a2:	69a2      	ldr	r2, [r4, #24]
 80105a4:	69e8      	ldr	r0, [r5, #28]
 80105a6:	1a10      	subs	r0, r2, r0
 80105a8:	463b      	mov	r3, r7
 80105aa:	3a02      	subs	r2, #2
 80105ac:	4631      	mov	r1, r6
 80105ae:	3001      	adds	r0, #1
 80105b0:	f002 fe9c 	bl	80132ec <GUI_FillRect>
 80105b4:	6828      	ldr	r0, [r5, #0]
 80105b6:	f7f8 fa21 	bl	80089fc <GUI_SetColor>
 80105ba:	69a2      	ldr	r2, [r4, #24]
 80105bc:	6921      	ldr	r1, [r4, #16]
 80105be:	69e0      	ldr	r0, [r4, #28]
 80105c0:	f002 fe06 	bl	80131d0 <GUI_DrawHLine>
 80105c4:	6868      	ldr	r0, [r5, #4]
 80105c6:	f7f8 fa19 	bl	80089fc <GUI_SetColor>
 80105ca:	69a2      	ldr	r2, [r4, #24]
 80105cc:	6921      	ldr	r1, [r4, #16]
 80105ce:	69e0      	ldr	r0, [r4, #28]
 80105d0:	3a01      	subs	r2, #1
 80105d2:	3101      	adds	r1, #1
 80105d4:	3801      	subs	r0, #1
 80105d6:	f002 fdfb 	bl	80131d0 <GUI_DrawHLine>
 80105da:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80105dc:	2e02      	cmp	r6, #2
 80105de:	f340 808a 	ble.w	80106f6 <FRAMEWIN_DrawSkinFlex+0x366>
 80105e2:	69a2      	ldr	r2, [r4, #24]
 80105e4:	6927      	ldr	r7, [r4, #16]
 80105e6:	69e4      	ldr	r4, [r4, #28]
 80105e8:	68a8      	ldr	r0, [r5, #8]
 80105ea:	f1a2 0802 	sub.w	r8, r2, #2
 80105ee:	3702      	adds	r7, #2
 80105f0:	f7f8 fa04 	bl	80089fc <GUI_SetColor>
 80105f4:	1ba1      	subs	r1, r4, r6
 80105f6:	1ea3      	subs	r3, r4, #2
 80105f8:	4642      	mov	r2, r8
 80105fa:	3101      	adds	r1, #1
 80105fc:	4638      	mov	r0, r7
 80105fe:	f002 fe75 	bl	80132ec <GUI_FillRect>
 8010602:	e078      	b.n	80106f6 <FRAMEWIN_DrawSkinFlex+0x366>
 8010604:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8010608:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801060c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8010610:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8010614:	692c      	ldr	r4, [r5, #16]
 8010616:	9401      	str	r4, [sp, #4]
 8010618:	68ec      	ldr	r4, [r5, #12]
 801061a:	9400      	str	r4, [sp, #0]
 801061c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8010620:	f8ad 101e 	strh.w	r1, [sp, #30]
 8010624:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010628:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801062c:	f002 fd5c 	bl	80130e8 <GUI_DrawGradientV>
 8010630:	e061      	b.n	80106f6 <FRAMEWIN_DrawSkinFlex+0x366>
 8010632:	bf00      	nop
 8010634:	2000029c 	.word	0x2000029c
 8010638:	6963      	ldr	r3, [r4, #20]
 801063a:	8b29      	ldrh	r1, [r5, #24]
 801063c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010640:	69a3      	ldr	r3, [r4, #24]
 8010642:	6922      	ldr	r2, [r4, #16]
 8010644:	6820      	ldr	r0, [r4, #0]
 8010646:	1a5b      	subs	r3, r3, r1
 8010648:	440a      	add	r2, r1
 801064a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801064e:	69e3      	ldr	r3, [r4, #28]
 8010650:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010654:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010658:	f7f7 fe56 	bl	8008308 <GUI_ALLOC_LockH>
 801065c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801065e:	9005      	str	r0, [sp, #20]
 8010660:	b1fb      	cbz	r3, 80106a2 <FRAMEWIN_DrawSkinFlex+0x312>
 8010662:	2002      	movs	r0, #2
 8010664:	f7f8 fa42 	bl	8008aec <GUI_SetTextMode>
 8010668:	9a05      	ldr	r2, [sp, #20]
 801066a:	f8b2 307c 	ldrh.w	r3, [r2, #124]	; 0x7c
 801066e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010672:	330e      	adds	r3, #14
 8010674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010678:	6898      	ldr	r0, [r3, #8]
 801067a:	f7f8 f9bf 	bl	80089fc <GUI_SetColor>
 801067e:	9b05      	ldr	r3, [sp, #20]
 8010680:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010682:	f7f8 f9e5 	bl	8008a50 <GUI_SetFont>
 8010686:	9b05      	ldr	r3, [sp, #20]
 8010688:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801068a:	f7f7 fe3d 	bl	8008308 <GUI_ALLOC_LockH>
 801068e:	9b05      	ldr	r3, [sp, #20]
 8010690:	9006      	str	r0, [sp, #24]
 8010692:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8010696:	a907      	add	r1, sp, #28
 8010698:	f7f8 fe29 	bl	80092ee <GUI_DispStringInRect>
 801069c:	a806      	add	r0, sp, #24
 801069e:	f7f7 fe41 	bl	8008324 <GUI_ALLOC_UnlockH>
 80106a2:	a805      	add	r0, sp, #20
 80106a4:	f7f7 fe3e 	bl	8008324 <GUI_ALLOC_UnlockH>
 80106a8:	e025      	b.n	80106f6 <FRAMEWIN_DrawSkinFlex+0x366>
 80106aa:	6923      	ldr	r3, [r4, #16]
 80106ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 80106b0:	6963      	ldr	r3, [r4, #20]
 80106b2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80106b6:	69a3      	ldr	r3, [r4, #24]
 80106b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80106bc:	68a8      	ldr	r0, [r5, #8]
 80106be:	69e3      	ldr	r3, [r4, #28]
 80106c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80106c4:	f7f8 f99a 	bl	80089fc <GUI_SetColor>
 80106c8:	a807      	add	r0, sp, #28
 80106ca:	f002 fe39 	bl	8013340 <GUI_FillRectEx>
 80106ce:	e012      	b.n	80106f6 <FRAMEWIN_DrawSkinFlex+0x366>
 80106d0:	6820      	ldr	r0, [r4, #0]
 80106d2:	f7f7 fe19 	bl	8008308 <GUI_ALLOC_LockH>
 80106d6:	ab10      	add	r3, sp, #64	; 0x40
 80106d8:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 80106dc:	f843 0d2c 	str.w	r0, [r3, #-44]!
 80106e0:	f042 020c 	orr.w	r2, r2, #12
 80106e4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f7 fe1b 	bl	8008324 <GUI_ALLOC_UnlockH>
 80106ee:	6820      	ldr	r0, [r4, #0]
 80106f0:	f005 f942 	bl	8015978 <WM_SetHasTrans>
 80106f4:	e004      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 80106f6:	2600      	movs	r6, #0
 80106f8:	e002      	b.n	8010700 <FRAMEWIN_DrawSkinFlex+0x370>
 80106fa:	1c98      	adds	r0, r3, #2
 80106fc:	4647      	mov	r7, r8
 80106fe:	e6fb      	b.n	80104f8 <FRAMEWIN_DrawSkinFlex+0x168>
 8010700:	4630      	mov	r0, r6
 8010702:	b010      	add	sp, #64	; 0x40
 8010704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010708 <GUI_ARRAY__GethItem>:
 8010708:	8803      	ldrh	r3, [r0, #0]
 801070a:	428b      	cmp	r3, r1
 801070c:	b513      	push	{r0, r1, r4, lr}
 801070e:	460c      	mov	r4, r1
 8010710:	d90e      	bls.n	8010730 <GUI_ARRAY__GethItem+0x28>
 8010712:	6840      	ldr	r0, [r0, #4]
 8010714:	b150      	cbz	r0, 801072c <GUI_ARRAY__GethItem+0x24>
 8010716:	f7f7 fdf7 	bl	8008308 <GUI_ALLOC_LockH>
 801071a:	ab02      	add	r3, sp, #8
 801071c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8010720:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010724:	4618      	mov	r0, r3
 8010726:	f7f7 fdfd 	bl	8008324 <GUI_ALLOC_UnlockH>
 801072a:	e002      	b.n	8010732 <GUI_ARRAY__GethItem+0x2a>
 801072c:	4604      	mov	r4, r0
 801072e:	e000      	b.n	8010732 <GUI_ARRAY__GethItem+0x2a>
 8010730:	2400      	movs	r4, #0
 8010732:	4620      	mov	r0, r4
 8010734:	b002      	add	sp, #8
 8010736:	bd10      	pop	{r4, pc}

08010738 <GUI_ARRAY__GetpItemLocked>:
 8010738:	b508      	push	{r3, lr}
 801073a:	f7ff ffe5 	bl	8010708 <GUI_ARRAY__GethItem>
 801073e:	b118      	cbz	r0, 8010748 <GUI_ARRAY__GetpItemLocked+0x10>
 8010740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010744:	f7f7 bde0 	b.w	8008308 <GUI_ALLOC_LockH>
 8010748:	bd08      	pop	{r3, pc}

0801074a <GUI_ARRAY_GetNumItems>:
 801074a:	b513      	push	{r0, r1, r4, lr}
 801074c:	4604      	mov	r4, r0
 801074e:	b140      	cbz	r0, 8010762 <GUI_ARRAY_GetNumItems+0x18>
 8010750:	f7f7 fdda 	bl	8008308 <GUI_ALLOC_LockH>
 8010754:	ab02      	add	r3, sp, #8
 8010756:	8804      	ldrh	r4, [r0, #0]
 8010758:	f843 0d04 	str.w	r0, [r3, #-4]!
 801075c:	4618      	mov	r0, r3
 801075e:	f7f7 fde1 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010762:	4620      	mov	r0, r4
 8010764:	b002      	add	sp, #8
 8010766:	bd10      	pop	{r4, pc}

08010768 <GUI_ARRAY_GethItem>:
 8010768:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801076a:	460e      	mov	r6, r1
 801076c:	4604      	mov	r4, r0
 801076e:	b158      	cbz	r0, 8010788 <GUI_ARRAY_GethItem+0x20>
 8010770:	f7f7 fdca 	bl	8008308 <GUI_ALLOC_LockH>
 8010774:	ad02      	add	r5, sp, #8
 8010776:	4631      	mov	r1, r6
 8010778:	f845 0d04 	str.w	r0, [r5, #-4]!
 801077c:	f7ff ffc4 	bl	8010708 <GUI_ARRAY__GethItem>
 8010780:	4604      	mov	r4, r0
 8010782:	4628      	mov	r0, r5
 8010784:	f7f7 fdce 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010788:	4620      	mov	r0, r4
 801078a:	b002      	add	sp, #8
 801078c:	bd70      	pop	{r4, r5, r6, pc}

0801078e <GUI_ARRAY_GetpItemLocked>:
 801078e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010790:	460e      	mov	r6, r1
 8010792:	4604      	mov	r4, r0
 8010794:	b158      	cbz	r0, 80107ae <GUI_ARRAY_GetpItemLocked+0x20>
 8010796:	f7f7 fdb7 	bl	8008308 <GUI_ALLOC_LockH>
 801079a:	ad02      	add	r5, sp, #8
 801079c:	4631      	mov	r1, r6
 801079e:	f845 0d04 	str.w	r0, [r5, #-4]!
 80107a2:	f7ff ffc9 	bl	8010738 <GUI_ARRAY__GetpItemLocked>
 80107a6:	4604      	mov	r4, r0
 80107a8:	4628      	mov	r0, r5
 80107aa:	f7f7 fdbb 	bl	8008324 <GUI_ALLOC_UnlockH>
 80107ae:	4620      	mov	r0, r4
 80107b0:	b002      	add	sp, #8
 80107b2:	bd70      	pop	{r4, r5, r6, pc}

080107b4 <GUI_DRAW__Draw>:
 80107b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80107b8:	460e      	mov	r6, r1
 80107ba:	4617      	mov	r7, r2
 80107bc:	4698      	mov	r8, r3
 80107be:	4605      	mov	r5, r0
 80107c0:	b170      	cbz	r0, 80107e0 <GUI_DRAW__Draw+0x2c>
 80107c2:	f7f7 fda1 	bl	8008308 <GUI_ALLOC_LockH>
 80107c6:	4604      	mov	r4, r0
 80107c8:	a802      	add	r0, sp, #8
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	f840 4d04 	str.w	r4, [r0, #-4]!
 80107d0:	681c      	ldr	r4, [r3, #0]
 80107d2:	f7f7 fda7 	bl	8008324 <GUI_ALLOC_UnlockH>
 80107d6:	4643      	mov	r3, r8
 80107d8:	463a      	mov	r2, r7
 80107da:	4631      	mov	r1, r6
 80107dc:	4628      	mov	r0, r5
 80107de:	47a0      	blx	r4
 80107e0:	b002      	add	sp, #8
 80107e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107e6 <GUI_DRAW__GetXSize>:
 80107e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107e8:	4604      	mov	r4, r0
 80107ea:	b160      	cbz	r0, 8010806 <GUI_DRAW__GetXSize+0x20>
 80107ec:	f7f7 fd8c 	bl	8008308 <GUI_ALLOC_LockH>
 80107f0:	ab02      	add	r3, sp, #8
 80107f2:	6802      	ldr	r2, [r0, #0]
 80107f4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80107f8:	4618      	mov	r0, r3
 80107fa:	6855      	ldr	r5, [r2, #4]
 80107fc:	f7f7 fd92 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010800:	4620      	mov	r0, r4
 8010802:	47a8      	blx	r5
 8010804:	e7ff      	b.n	8010806 <GUI_DRAW__GetXSize+0x20>
 8010806:	b003      	add	sp, #12
 8010808:	bd30      	pop	{r4, r5, pc}

0801080a <GUI_DRAW__GetYSize>:
 801080a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801080c:	4604      	mov	r4, r0
 801080e:	b160      	cbz	r0, 801082a <GUI_DRAW__GetYSize+0x20>
 8010810:	f7f7 fd7a 	bl	8008308 <GUI_ALLOC_LockH>
 8010814:	ab02      	add	r3, sp, #8
 8010816:	6802      	ldr	r2, [r0, #0]
 8010818:	f843 0d04 	str.w	r0, [r3, #-4]!
 801081c:	4618      	mov	r0, r3
 801081e:	6895      	ldr	r5, [r2, #8]
 8010820:	f7f7 fd80 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010824:	4620      	mov	r0, r4
 8010826:	47a8      	blx	r5
 8010828:	e7ff      	b.n	801082a <GUI_DRAW__GetYSize+0x20>
 801082a:	b003      	add	sp, #12
 801082c:	bd30      	pop	{r4, r5, pc}

0801082e <HEADER_SetItemWidth>:
 801082e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010830:	460f      	mov	r7, r1
 8010832:	b087      	sub	sp, #28
 8010834:	4615      	mov	r5, r2
 8010836:	4604      	mov	r4, r0
 8010838:	b3b0      	cbz	r0, 80108a8 <HEADER_SetItemWidth+0x7a>
 801083a:	2a00      	cmp	r2, #0
 801083c:	db34      	blt.n	80108a8 <HEADER_SetItemWidth+0x7a>
 801083e:	f7f9 fa8d 	bl	8009d5c <GUI_Lock>
 8010842:	4620      	mov	r0, r4
 8010844:	f7f7 fd60 	bl	8008308 <GUI_ALLOC_LockH>
 8010848:	ab06      	add	r3, sp, #24
 801084a:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 801084c:	f843 0d18 	str.w	r0, [r3, #-24]!
 8010850:	4618      	mov	r0, r3
 8010852:	f7f7 fd67 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff ff77 	bl	801074a <GUI_ARRAY_GetNumItems>
 801085c:	4287      	cmp	r7, r0
 801085e:	d221      	bcs.n	80108a4 <HEADER_SetItemWidth+0x76>
 8010860:	4639      	mov	r1, r7
 8010862:	4630      	mov	r0, r6
 8010864:	f7ff ff93 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8010868:	4603      	mov	r3, r0
 801086a:	a806      	add	r0, sp, #24
 801086c:	f840 3d14 	str.w	r3, [r0, #-20]!
 8010870:	b1b3      	cbz	r3, 80108a0 <HEADER_SetItemWidth+0x72>
 8010872:	601d      	str	r5, [r3, #0]
 8010874:	f7f7 fd56 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010878:	4620      	mov	r0, r4
 801087a:	f7fe f976 	bl	800eb6a <WM_GetParent>
 801087e:	2325      	movs	r3, #37	; 0x25
 8010880:	9003      	str	r0, [sp, #12]
 8010882:	4620      	mov	r0, r4
 8010884:	9302      	str	r3, [sp, #8]
 8010886:	9404      	str	r4, [sp, #16]
 8010888:	f7fd fb6a 	bl	800df60 <WM_InvalidateWindow>
 801088c:	a902      	add	r1, sp, #8
 801088e:	9803      	ldr	r0, [sp, #12]
 8010890:	f7fe fcf2 	bl	800f278 <WM__SendMessage>
 8010894:	4620      	mov	r0, r4
 8010896:	f7fe f968 	bl	800eb6a <WM_GetParent>
 801089a:	f7fd fb61 	bl	800df60 <WM_InvalidateWindow>
 801089e:	e001      	b.n	80108a4 <HEADER_SetItemWidth+0x76>
 80108a0:	f7f7 fd40 	bl	8008324 <GUI_ALLOC_UnlockH>
 80108a4:	f7f9 fa50 	bl	8009d48 <GUI_Unlock>
 80108a8:	b007      	add	sp, #28
 80108aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108ac <HEADER_GetItemWidth>:
 80108ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108ae:	460d      	mov	r5, r1
 80108b0:	4604      	mov	r4, r0
 80108b2:	b1e8      	cbz	r0, 80108f0 <HEADER_GetItemWidth+0x44>
 80108b4:	f7f9 fa52 	bl	8009d5c <GUI_Lock>
 80108b8:	4620      	mov	r0, r4
 80108ba:	f7f7 fd25 	bl	8008308 <GUI_ALLOC_LockH>
 80108be:	9001      	str	r0, [sp, #4]
 80108c0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80108c2:	f7ff ff42 	bl	801074a <GUI_ARRAY_GetNumItems>
 80108c6:	4285      	cmp	r5, r0
 80108c8:	d20c      	bcs.n	80108e4 <HEADER_GetItemWidth+0x38>
 80108ca:	9b01      	ldr	r3, [sp, #4]
 80108cc:	4629      	mov	r1, r5
 80108ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80108d0:	f7ff ff5d 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 80108d4:	ab02      	add	r3, sp, #8
 80108d6:	6804      	ldr	r4, [r0, #0]
 80108d8:	f843 0d08 	str.w	r0, [r3, #-8]!
 80108dc:	4618      	mov	r0, r3
 80108de:	f7f7 fd21 	bl	8008324 <GUI_ALLOC_UnlockH>
 80108e2:	e000      	b.n	80108e6 <HEADER_GetItemWidth+0x3a>
 80108e4:	2400      	movs	r4, #0
 80108e6:	a801      	add	r0, sp, #4
 80108e8:	f7f7 fd1c 	bl	8008324 <GUI_ALLOC_UnlockH>
 80108ec:	f7f9 fa2c 	bl	8009d48 <GUI_Unlock>
 80108f0:	4620      	mov	r0, r4
 80108f2:	b003      	add	sp, #12
 80108f4:	bd30      	pop	{r4, r5, pc}
	...

080108f8 <HEADER_SetDefaultBkColor>:
 80108f8:	4b02      	ldr	r3, [pc, #8]	; (8010904 <HEADER_SetDefaultBkColor+0xc>)
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	6058      	str	r0, [r3, #4]
 80108fe:	4610      	mov	r0, r2
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	200002f4 	.word	0x200002f4

08010908 <HEADER_SetDefaultTextColor>:
 8010908:	4b02      	ldr	r3, [pc, #8]	; (8010914 <HEADER_SetDefaultTextColor+0xc>)
 801090a:	689a      	ldr	r2, [r3, #8]
 801090c:	6098      	str	r0, [r3, #8]
 801090e:	4610      	mov	r0, r2
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	200002f4 	.word	0x200002f4

08010918 <_Create>:
 8010918:	b530      	push	{r4, r5, lr}
 801091a:	b08b      	sub	sp, #44	; 0x2c
 801091c:	4605      	mov	r5, r0
 801091e:	f7f7 fcf3 	bl	8008308 <GUI_ALLOC_LockH>
 8010922:	ab0a      	add	r3, sp, #40	; 0x28
 8010924:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8010926:	f843 0d28 	str.w	r0, [r3, #-40]!
 801092a:	4618      	mov	r0, r3
 801092c:	6894      	ldr	r4, [r2, #8]
 801092e:	f7f7 fcf9 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010932:	a80a      	add	r0, sp, #40	; 0x28
 8010934:	2300      	movs	r3, #0
 8010936:	9302      	str	r3, [sp, #8]
 8010938:	f840 5d24 	str.w	r5, [r0, #-36]!
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	4798      	blx	r3
 8010940:	b00b      	add	sp, #44	; 0x2c
 8010942:	bd30      	pop	{r4, r5, pc}

08010944 <_Paint>:
 8010944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010948:	b095      	sub	sp, #84	; 0x54
 801094a:	4605      	mov	r5, r0
 801094c:	f7f7 fcdc 	bl	8008308 <GUI_ALLOC_LockH>
 8010950:	4604      	mov	r4, r0
 8010952:	a814      	add	r0, sp, #80	; 0x50
 8010954:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8010956:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010958:	f840 4d3c 	str.w	r4, [r0, #-60]!
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
 8010962:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8010964:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
 8010968:	f7f7 fcdc 	bl	8008324 <GUI_ALLOC_UnlockH>
 801096c:	4638      	mov	r0, r7
 801096e:	f7ff feec 	bl	801074a <GUI_ARRAY_GetNumItems>
 8010972:	a909      	add	r1, sp, #36	; 0x24
 8010974:	4681      	mov	r9, r0
 8010976:	4620      	mov	r0, r4
 8010978:	f001 fd04 	bl	8012384 <WIDGET__GetClientRect>
 801097c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8010980:	950b      	str	r5, [sp, #44]	; 0x2c
 8010982:	9310      	str	r3, [sp, #64]	; 0x40
 8010984:	f1c8 0500 	rsb	r5, r8, #0
 8010988:	f8ad 301e 	strh.w	r3, [sp, #30]
 801098c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8010990:	9312      	str	r3, [sp, #72]	; 0x48
 8010992:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010996:	9511      	str	r5, [sp, #68]	; 0x44
 8010998:	950f      	str	r5, [sp, #60]	; 0x3c
 801099a:	2400      	movs	r4, #0
 801099c:	f04f 0b05 	mov.w	fp, #5
 80109a0:	454c      	cmp	r4, r9
 80109a2:	da3c      	bge.n	8010a1e <_Paint+0xda>
 80109a4:	4621      	mov	r1, r4
 80109a6:	4638      	mov	r0, r7
 80109a8:	f7ff fef1 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 80109ac:	6882      	ldr	r2, [r0, #8]
 80109ae:	6803      	ldr	r3, [r0, #0]
 80109b0:	9006      	str	r0, [sp, #24]
 80109b2:	a806      	add	r0, sp, #24
 80109b4:	9202      	str	r2, [sp, #8]
 80109b6:	9303      	str	r3, [sp, #12]
 80109b8:	f7f7 fcb4 	bl	8008324 <GUI_ALLOC_UnlockH>
 80109bc:	9b01      	ldr	r3, [sp, #4]
 80109be:	429c      	cmp	r4, r3
 80109c0:	bfb4      	ite	lt
 80109c2:	4641      	movlt	r1, r8
 80109c4:	2100      	movge	r1, #0
 80109c6:	9b03      	ldr	r3, [sp, #12]
 80109c8:	440d      	add	r5, r1
 80109ca:	442b      	add	r3, r5
 80109cc:	3b01      	subs	r3, #1
 80109ce:	a807      	add	r0, sp, #28
 80109d0:	9311      	str	r3, [sp, #68]	; 0x44
 80109d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80109d6:	950f      	str	r5, [sp, #60]	; 0x3c
 80109d8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80109dc:	f7fe fa9e 	bl	800ef1c <WM_SetUserClipRect>
 80109e0:	940d      	str	r4, [sp, #52]	; 0x34
 80109e2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80109e6:	a80b      	add	r0, sp, #44	; 0x2c
 80109e8:	47b0      	blx	r6
 80109ea:	9a02      	ldr	r2, [sp, #8]
 80109ec:	b11a      	cbz	r2, 80109f6 <_Paint+0xb2>
 80109ee:	2306      	movs	r3, #6
 80109f0:	930c      	str	r3, [sp, #48]	; 0x30
 80109f2:	a80b      	add	r0, sp, #44	; 0x2c
 80109f4:	47b0      	blx	r6
 80109f6:	2312      	movs	r3, #18
 80109f8:	930c      	str	r3, [sp, #48]	; 0x30
 80109fa:	a80b      	add	r0, sp, #44	; 0x2c
 80109fc:	47b0      	blx	r6
 80109fe:	4554      	cmp	r4, sl
 8010a00:	d103      	bne.n	8010a0a <_Paint+0xc6>
 8010a02:	2302      	movs	r3, #2
 8010a04:	930c      	str	r3, [sp, #48]	; 0x30
 8010a06:	a80b      	add	r0, sp, #44	; 0x2c
 8010a08:	47b0      	blx	r6
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	f7fe fa86 	bl	800ef1c <WM_SetUserClipRect>
 8010a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010a14:	1a9b      	subs	r3, r3, r2
 8010a16:	3301      	adds	r3, #1
 8010a18:	441d      	add	r5, r3
 8010a1a:	3401      	adds	r4, #1
 8010a1c:	e7c0      	b.n	80109a0 <_Paint+0x5c>
 8010a1e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8010a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010a24:	429a      	cmp	r2, r3
 8010a26:	da0f      	bge.n	8010a48 <_Paint+0x104>
 8010a28:	a807      	add	r0, sp, #28
 8010a2a:	9311      	str	r3, [sp, #68]	; 0x44
 8010a2c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010a30:	950f      	str	r5, [sp, #60]	; 0x3c
 8010a32:	f8ad 501c 	strh.w	r5, [sp, #28]
 8010a36:	f7fe fa71 	bl	800ef1c <WM_SetUserClipRect>
 8010a3a:	230c      	movs	r3, #12
 8010a3c:	930c      	str	r3, [sp, #48]	; 0x30
 8010a3e:	a80b      	add	r0, sp, #44	; 0x2c
 8010a40:	47b0      	blx	r6
 8010a42:	2000      	movs	r0, #0
 8010a44:	f7fe fa6a 	bl	800ef1c <WM_SetUserClipRect>
 8010a48:	b015      	add	sp, #84	; 0x54
 8010a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010a50 <HEADER_DrawSkinFlex>:
 8010a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a54:	6843      	ldr	r3, [r0, #4]
 8010a56:	2b06      	cmp	r3, #6
 8010a58:	b086      	sub	sp, #24
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	d03e      	beq.n	8010adc <HEADER_DrawSkinFlex+0x8c>
 8010a5e:	dc37      	bgt.n	8010ad0 <HEADER_DrawSkinFlex+0x80>
 8010a60:	2b02      	cmp	r3, #2
 8010a62:	f000 80da 	beq.w	8010c1a <HEADER_DrawSkinFlex+0x1ca>
 8010a66:	2b05      	cmp	r3, #5
 8010a68:	f040 8134 	bne.w	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010a6c:	4e9b      	ldr	r6, [pc, #620]	; (8010cdc <HEADER_DrawSkinFlex+0x28c>)
 8010a6e:	6943      	ldr	r3, [r0, #20]
 8010a70:	69c5      	ldr	r5, [r0, #28]
 8010a72:	6830      	ldr	r0, [r6, #0]
 8010a74:	441d      	add	r5, r3
 8010a76:	f7f7 ffc1 	bl	80089fc <GUI_SetColor>
 8010a7a:	69e2      	ldr	r2, [r4, #28]
 8010a7c:	6961      	ldr	r1, [r4, #20]
 8010a7e:	69a0      	ldr	r0, [r4, #24]
 8010a80:	3a01      	subs	r2, #1
 8010a82:	f002 fc0b 	bl	801329c <GUI_DrawVLine>
 8010a86:	69a2      	ldr	r2, [r4, #24]
 8010a88:	6921      	ldr	r1, [r4, #16]
 8010a8a:	69e0      	ldr	r0, [r4, #28]
 8010a8c:	f002 fba0 	bl	80131d0 <GUI_DrawHLine>
 8010a90:	6870      	ldr	r0, [r6, #4]
 8010a92:	f7f7 ffb3 	bl	80089fc <GUI_SetColor>
 8010a96:	69e2      	ldr	r2, [r4, #28]
 8010a98:	6961      	ldr	r1, [r4, #20]
 8010a9a:	6920      	ldr	r0, [r4, #16]
 8010a9c:	3a01      	subs	r2, #1
 8010a9e:	f002 fbfd 	bl	801329c <GUI_DrawVLine>
 8010aa2:	68f3      	ldr	r3, [r6, #12]
 8010aa4:	69a2      	ldr	r2, [r4, #24]
 8010aa6:	6920      	ldr	r0, [r4, #16]
 8010aa8:	9301      	str	r3, [sp, #4]
 8010aaa:	68b3      	ldr	r3, [r6, #8]
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	106d      	asrs	r5, r5, #1
 8010ab0:	1e6b      	subs	r3, r5, #1
 8010ab2:	3a01      	subs	r2, #1
 8010ab4:	6961      	ldr	r1, [r4, #20]
 8010ab6:	3001      	adds	r0, #1
 8010ab8:	f002 fb16 	bl	80130e8 <GUI_DrawGradientV>
 8010abc:	6971      	ldr	r1, [r6, #20]
 8010abe:	69e3      	ldr	r3, [r4, #28]
 8010ac0:	69a2      	ldr	r2, [r4, #24]
 8010ac2:	6920      	ldr	r0, [r4, #16]
 8010ac4:	9101      	str	r1, [sp, #4]
 8010ac6:	6931      	ldr	r1, [r6, #16]
 8010ac8:	9100      	str	r1, [sp, #0]
 8010aca:	3b01      	subs	r3, #1
 8010acc:	3a01      	subs	r2, #1
 8010ace:	e0fd      	b.n	8010ccc <HEADER_DrawSkinFlex+0x27c>
 8010ad0:	2b0c      	cmp	r3, #12
 8010ad2:	f000 80d2 	beq.w	8010c7a <HEADER_DrawSkinFlex+0x22a>
 8010ad6:	2b12      	cmp	r3, #18
 8010ad8:	d04c      	beq.n	8010b74 <HEADER_DrawSkinFlex+0x124>
 8010ada:	e0fb      	b.n	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010adc:	6800      	ldr	r0, [r0, #0]
 8010ade:	f7f7 fc13 	bl	8008308 <GUI_ALLOC_LockH>
 8010ae2:	ab06      	add	r3, sp, #24
 8010ae4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8010ae6:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7f7 fc1a 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010af0:	68a1      	ldr	r1, [r4, #8]
 8010af2:	4628      	mov	r0, r5
 8010af4:	f7ff fe4b 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8010af8:	9004      	str	r0, [sp, #16]
 8010afa:	2800      	cmp	r0, #0
 8010afc:	f000 80ea 	beq.w	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010b00:	6886      	ldr	r6, [r0, #8]
 8010b02:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8010b06:	6807      	ldr	r7, [r0, #0]
 8010b08:	a804      	add	r0, sp, #16
 8010b0a:	f7f7 fc0b 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010b0e:	4630      	mov	r0, r6
 8010b10:	f7ff fe69 	bl	80107e6 <GUI_DRAW__GetXSize>
 8010b14:	4680      	mov	r8, r0
 8010b16:	4630      	mov	r0, r6
 8010b18:	f7ff fe77 	bl	801080a <GUI_DRAW__GetYSize>
 8010b1c:	f005 0303 	and.w	r3, r5, #3
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d006      	beq.n	8010b32 <HEADER_DrawSkinFlex+0xe2>
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d107      	bne.n	8010b38 <HEADER_DrawSkinFlex+0xe8>
 8010b28:	ebc8 0207 	rsb	r2, r8, r7
 8010b2c:	fb92 f2f3 	sdiv	r2, r2, r3
 8010b30:	e003      	b.n	8010b3a <HEADER_DrawSkinFlex+0xea>
 8010b32:	ebc8 0207 	rsb	r2, r8, r7
 8010b36:	e000      	b.n	8010b3a <HEADER_DrawSkinFlex+0xea>
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f005 050c 	and.w	r5, r5, #12
 8010b3e:	2d04      	cmp	r5, #4
 8010b40:	6963      	ldr	r3, [r4, #20]
 8010b42:	d009      	beq.n	8010b58 <HEADER_DrawSkinFlex+0x108>
 8010b44:	2d0c      	cmp	r5, #12
 8010b46:	d10c      	bne.n	8010b62 <HEADER_DrawSkinFlex+0x112>
 8010b48:	69e1      	ldr	r1, [r4, #28]
 8010b4a:	1ac9      	subs	r1, r1, r3
 8010b4c:	3101      	adds	r1, #1
 8010b4e:	1a08      	subs	r0, r1, r0
 8010b50:	2102      	movs	r1, #2
 8010b52:	fb90 f0f1 	sdiv	r0, r0, r1
 8010b56:	e005      	b.n	8010b64 <HEADER_DrawSkinFlex+0x114>
 8010b58:	69e5      	ldr	r5, [r4, #28]
 8010b5a:	1aed      	subs	r5, r5, r3
 8010b5c:	3501      	adds	r5, #1
 8010b5e:	1a28      	subs	r0, r5, r0
 8010b60:	e000      	b.n	8010b64 <HEADER_DrawSkinFlex+0x114>
 8010b62:	2000      	movs	r0, #0
 8010b64:	6921      	ldr	r1, [r4, #16]
 8010b66:	4403      	add	r3, r0
 8010b68:	440a      	add	r2, r1
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	6821      	ldr	r1, [r4, #0]
 8010b6e:	f7ff fe21 	bl	80107b4 <GUI_DRAW__Draw>
 8010b72:	e0af      	b.n	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010b74:	6800      	ldr	r0, [r0, #0]
 8010b76:	f7f7 fbc7 	bl	8008308 <GUI_ALLOC_LockH>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	a806      	add	r0, sp, #24
 8010b7e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010b80:	f840 3d10 	str.w	r3, [r0, #-16]!
 8010b84:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 8010b88:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8010b8a:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 8010b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b90:	f8d3 a000 	ldr.w	sl, [r3]
 8010b94:	f7f7 fbc6 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010b98:	68a1      	ldr	r1, [r4, #8]
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	f7ff fdf7 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8010ba0:	9003      	str	r0, [sp, #12]
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	f000 8096 	beq.w	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010ba8:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8010bac:	f100 050c 	add.w	r5, r0, #12
 8010bb0:	a803      	add	r0, sp, #12
 8010bb2:	f7f7 fbb7 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	f8ad 3010 	strh.w	r3, [sp, #16]
 8010bbc:	6963      	ldr	r3, [r4, #20]
 8010bbe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010bc2:	a904      	add	r1, sp, #16
 8010bc4:	69a3      	ldr	r3, [r4, #24]
 8010bc6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010bca:	4652      	mov	r2, sl
 8010bcc:	69e3      	ldr	r3, [r4, #28]
 8010bce:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010bd2:	4608      	mov	r0, r1
 8010bd4:	f7f9 fd4b 	bl	800a66e <GUI__ReduceRect>
 8010bd8:	68a3      	ldr	r3, [r4, #8]
 8010bda:	4599      	cmp	r9, r3
 8010bdc:	d10e      	bne.n	8010bfc <HEADER_DrawSkinFlex+0x1ac>
 8010bde:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010be2:	69e2      	ldr	r2, [r4, #28]
 8010be4:	1e59      	subs	r1, r3, #1
 8010be6:	6963      	ldr	r3, [r4, #20]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	1f1a      	subs	r2, r3, #4
 8010bec:	2303      	movs	r3, #3
 8010bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8010bf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010bfc:	4640      	mov	r0, r8
 8010bfe:	f7f7 fefd 	bl	80089fc <GUI_SetColor>
 8010c02:	2002      	movs	r0, #2
 8010c04:	f7f7 ff72 	bl	8008aec <GUI_SetTextMode>
 8010c08:	4638      	mov	r0, r7
 8010c0a:	f7f7 ff21 	bl	8008a50 <GUI_SetFont>
 8010c0e:	4632      	mov	r2, r6
 8010c10:	a904      	add	r1, sp, #16
 8010c12:	4628      	mov	r0, r5
 8010c14:	f7f8 fb6b 	bl	80092ee <GUI_DispStringInRect>
 8010c18:	e05c      	b.n	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010c1a:	6800      	ldr	r0, [r0, #0]
 8010c1c:	f7f7 fb74 	bl	8008308 <GUI_ALLOC_LockH>
 8010c20:	ab06      	add	r3, sp, #24
 8010c22:	f8d0 8064 	ldr.w	r8, [r0, #100]	; 0x64
 8010c26:	f843 0d08 	str.w	r0, [r3, #-8]!
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7f7 fb7a 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010c30:	6966      	ldr	r6, [r4, #20]
 8010c32:	69e3      	ldr	r3, [r4, #28]
 8010c34:	69a7      	ldr	r7, [r4, #24]
 8010c36:	1b9b      	subs	r3, r3, r6
 8010c38:	3b04      	subs	r3, #4
 8010c3a:	2503      	movs	r5, #3
 8010c3c:	fb93 f6f5 	sdiv	r6, r3, r5
 8010c40:	4b26      	ldr	r3, [pc, #152]	; (8010cdc <HEADER_DrawSkinFlex+0x28c>)
 8010c42:	6998      	ldr	r0, [r3, #24]
 8010c44:	1e75      	subs	r5, r6, #1
 8010c46:	f7f7 fed9 	bl	80089fc <GUI_SetColor>
 8010c4a:	3f04      	subs	r7, #4
 8010c4c:	69e3      	ldr	r3, [r4, #28]
 8010c4e:	6964      	ldr	r4, [r4, #20]
 8010c50:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010c54:	1b7f      	subs	r7, r7, r5
 8010c56:	f1c8 0801 	rsb	r8, r8, #1
 8010c5a:	106d      	asrs	r5, r5, #1
 8010c5c:	fb08 f505 	mul.w	r5, r8, r5
 8010c60:	1b1c      	subs	r4, r3, r4
 8010c62:	ebc5 0464 	rsb	r4, r5, r4, asr #1
 8010c66:	4635      	mov	r5, r6
 8010c68:	3d01      	subs	r5, #1
 8010c6a:	d433      	bmi.n	8010cd4 <HEADER_DrawSkinFlex+0x284>
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	19ea      	adds	r2, r5, r7
 8010c70:	1b79      	subs	r1, r7, r5
 8010c72:	f002 faad 	bl	80131d0 <GUI_DrawHLine>
 8010c76:	4444      	add	r4, r8
 8010c78:	e7f6      	b.n	8010c68 <HEADER_DrawSkinFlex+0x218>
 8010c7a:	4e18      	ldr	r6, [pc, #96]	; (8010cdc <HEADER_DrawSkinFlex+0x28c>)
 8010c7c:	6943      	ldr	r3, [r0, #20]
 8010c7e:	69c5      	ldr	r5, [r0, #28]
 8010c80:	6830      	ldr	r0, [r6, #0]
 8010c82:	441d      	add	r5, r3
 8010c84:	f7f7 feba 	bl	80089fc <GUI_SetColor>
 8010c88:	69a2      	ldr	r2, [r4, #24]
 8010c8a:	6921      	ldr	r1, [r4, #16]
 8010c8c:	69e0      	ldr	r0, [r4, #28]
 8010c8e:	f002 fa9f 	bl	80131d0 <GUI_DrawHLine>
 8010c92:	6870      	ldr	r0, [r6, #4]
 8010c94:	f7f7 feb2 	bl	80089fc <GUI_SetColor>
 8010c98:	69e2      	ldr	r2, [r4, #28]
 8010c9a:	6961      	ldr	r1, [r4, #20]
 8010c9c:	6920      	ldr	r0, [r4, #16]
 8010c9e:	3a01      	subs	r2, #1
 8010ca0:	f002 fafc 	bl	801329c <GUI_DrawVLine>
 8010ca4:	68f3      	ldr	r3, [r6, #12]
 8010ca6:	6920      	ldr	r0, [r4, #16]
 8010ca8:	9301      	str	r3, [sp, #4]
 8010caa:	68b3      	ldr	r3, [r6, #8]
 8010cac:	9300      	str	r3, [sp, #0]
 8010cae:	106d      	asrs	r5, r5, #1
 8010cb0:	1e6b      	subs	r3, r5, #1
 8010cb2:	69a2      	ldr	r2, [r4, #24]
 8010cb4:	6961      	ldr	r1, [r4, #20]
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	f002 fa16 	bl	80130e8 <GUI_DrawGradientV>
 8010cbc:	6972      	ldr	r2, [r6, #20]
 8010cbe:	69e3      	ldr	r3, [r4, #28]
 8010cc0:	6920      	ldr	r0, [r4, #16]
 8010cc2:	9201      	str	r2, [sp, #4]
 8010cc4:	6932      	ldr	r2, [r6, #16]
 8010cc6:	9200      	str	r2, [sp, #0]
 8010cc8:	69a2      	ldr	r2, [r4, #24]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	4629      	mov	r1, r5
 8010cce:	3001      	adds	r0, #1
 8010cd0:	f002 fa0a 	bl	80130e8 <GUI_DrawGradientV>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	b006      	add	sp, #24
 8010cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cdc:	20000320 	.word	0x20000320

08010ce0 <LISTVIEW__GetNumColumns>:
 8010ce0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8010ce2:	f7ff bd32 	b.w	801074a <GUI_ARRAY_GetNumItems>

08010ce6 <LISTVIEW_GetHeader>:
 8010ce6:	b513      	push	{r0, r1, r4, lr}
 8010ce8:	4604      	mov	r4, r0
 8010cea:	b168      	cbz	r0, 8010d08 <LISTVIEW_GetHeader+0x22>
 8010cec:	f7f9 f836 	bl	8009d5c <GUI_Lock>
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f7f7 fb09 	bl	8008308 <GUI_ALLOC_LockH>
 8010cf6:	ab02      	add	r3, sp, #8
 8010cf8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010cfa:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7f7 fb10 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010d04:	f7f9 f820 	bl	8009d48 <GUI_Unlock>
 8010d08:	4620      	mov	r0, r4
 8010d0a:	b002      	add	sp, #8
 8010d0c:	bd10      	pop	{r4, pc}

08010d0e <LISTVIEW_GetNumColumns>:
 8010d0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d10:	4604      	mov	r4, r0
 8010d12:	b178      	cbz	r0, 8010d34 <LISTVIEW_GetNumColumns+0x26>
 8010d14:	f7f9 f822 	bl	8009d5c <GUI_Lock>
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f7f7 faf5 	bl	8008308 <GUI_ALLOC_LockH>
 8010d1e:	ad02      	add	r5, sp, #8
 8010d20:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010d24:	f7ff ffdc 	bl	8010ce0 <LISTVIEW__GetNumColumns>
 8010d28:	4604      	mov	r4, r0
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f7f7 fafa 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010d30:	f7f9 f80a 	bl	8009d48 <GUI_Unlock>
 8010d34:	4620      	mov	r0, r4
 8010d36:	b003      	add	sp, #12
 8010d38:	bd30      	pop	{r4, r5, pc}

08010d3a <LISTVIEW_SetColumnWidth>:
 8010d3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d3c:	460d      	mov	r5, r1
 8010d3e:	4616      	mov	r6, r2
 8010d40:	4604      	mov	r4, r0
 8010d42:	b190      	cbz	r0, 8010d6a <LISTVIEW_SetColumnWidth+0x30>
 8010d44:	f7f9 f80a 	bl	8009d5c <GUI_Lock>
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7f7 fadd 	bl	8008308 <GUI_ALLOC_LockH>
 8010d4e:	ab02      	add	r3, sp, #8
 8010d50:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010d52:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7f7 fae4 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010d5c:	4632      	mov	r2, r6
 8010d5e:	4629      	mov	r1, r5
 8010d60:	4620      	mov	r0, r4
 8010d62:	f7ff fd64 	bl	801082e <HEADER_SetItemWidth>
 8010d66:	f7f8 ffef 	bl	8009d48 <GUI_Unlock>
 8010d6a:	b002      	add	sp, #8
 8010d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d70 <LISTVIEW_SetDefaultGridColor>:
 8010d70:	4b02      	ldr	r3, [pc, #8]	; (8010d7c <LISTVIEW_SetDefaultGridColor+0xc>)
 8010d72:	6a1a      	ldr	r2, [r3, #32]
 8010d74:	6218      	str	r0, [r3, #32]
 8010d76:	4610      	mov	r0, r2
 8010d78:	4770      	bx	lr
 8010d7a:	bf00      	nop
 8010d7c:	2000033c 	.word	0x2000033c

08010d80 <MULTIPAGE_SetDefaultBkColor>:
 8010d80:	2901      	cmp	r1, #1
 8010d82:	bf9e      	ittt	ls
 8010d84:	3102      	addls	r1, #2
 8010d86:	4b02      	ldrls	r3, [pc, #8]	; (8010d90 <MULTIPAGE_SetDefaultBkColor+0x10>)
 8010d88:	f843 0021 	strls.w	r0, [r3, r1, lsl #2]
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	2000059c 	.word	0x2000059c

08010d94 <MULTIPAGE_SetDefaultFont>:
 8010d94:	4b01      	ldr	r3, [pc, #4]	; (8010d9c <MULTIPAGE_SetDefaultFont+0x8>)
 8010d96:	6018      	str	r0, [r3, #0]
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	2000059c 	.word	0x2000059c

08010da0 <_Create>:
 8010da0:	b507      	push	{r0, r1, r2, lr}
 8010da2:	f7f7 fab1 	bl	8008308 <GUI_ALLOC_LockH>
 8010da6:	ab02      	add	r3, sp, #8
 8010da8:	4a05      	ldr	r2, [pc, #20]	; (8010dc0 <_Create+0x20>)
 8010daa:	f843 0d04 	str.w	r0, [r3, #-4]!
 8010dae:	6742      	str	r2, [r0, #116]	; 0x74
 8010db0:	4a04      	ldr	r2, [pc, #16]	; (8010dc4 <_Create+0x24>)
 8010db2:	6782      	str	r2, [r0, #120]	; 0x78
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7f7 fab5 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010dba:	b003      	add	sp, #12
 8010dbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dc0:	08010dc9 	.word	0x08010dc9
 8010dc4:	08010e95 	.word	0x08010e95

08010dc8 <_GetTouchedPage>:
 8010dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dcc:	b087      	sub	sp, #28
 8010dce:	4606      	mov	r6, r0
 8010dd0:	9200      	str	r2, [sp, #0]
 8010dd2:	9101      	str	r1, [sp, #4]
 8010dd4:	f7f7 fa98 	bl	8008308 <GUI_ALLOC_LockH>
 8010dd8:	9003      	str	r0, [sp, #12]
 8010dda:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010ddc:	f7ff fcb5 	bl	801074a <GUI_ARRAY_GetNumItems>
 8010de0:	4607      	mov	r7, r0
 8010de2:	a806      	add	r0, sp, #24
 8010de4:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8010de8:	8e5d      	ldrh	r5, [r3, #50]	; 0x32
 8010dea:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
 8010dee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010df0:	f7f7 fa98 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010df4:	a904      	add	r1, sp, #16
 8010df6:	4630      	mov	r0, r6
 8010df8:	f005 faeb 	bl	80163d2 <MULTIPAGE__GetTabBarRect>
 8010dfc:	072a      	lsls	r2, r5, #28
 8010dfe:	d40c      	bmi.n	8010e1a <_GetTouchedPage+0x52>
 8010e00:	07e3      	lsls	r3, r4, #31
 8010e02:	d510      	bpl.n	8010e26 <_GetTouchedPage+0x5e>
 8010e04:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8010e0e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010e12:	3301      	adds	r3, #1
 8010e14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010e18:	e005      	b.n	8010e26 <_GetTouchedPage+0x5e>
 8010e1a:	f10d 0216 	add.w	r2, sp, #22
 8010e1e:	f10d 0312 	add.w	r3, sp, #18
 8010e22:	4669      	mov	r1, sp
 8010e24:	e002      	b.n	8010e2c <_GetTouchedPage+0x64>
 8010e26:	aa05      	add	r2, sp, #20
 8010e28:	ab04      	add	r3, sp, #16
 8010e2a:	a901      	add	r1, sp, #4
 8010e2c:	f8d1 9000 	ldr.w	r9, [r1]
 8010e30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010e34:	4591      	cmp	r9, r2
 8010e36:	dd02      	ble.n	8010e3e <_GetTouchedPage+0x76>
 8010e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e3c:	e017      	b.n	8010e6e <_GetTouchedPage+0xa6>
 8010e3e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e42:	45a9      	cmp	r9, r5
 8010e44:	dbf8      	blt.n	8010e38 <_GetTouchedPage+0x70>
 8010e46:	2400      	movs	r4, #0
 8010e48:	42bc      	cmp	r4, r7
 8010e4a:	daf5      	bge.n	8010e38 <_GetTouchedPage+0x70>
 8010e4c:	4544      	cmp	r4, r8
 8010e4e:	db09      	blt.n	8010e64 <_GetTouchedPage+0x9c>
 8010e50:	4621      	mov	r1, r4
 8010e52:	4630      	mov	r0, r6
 8010e54:	f005 fa76 	bl	8016344 <MULTIPAGE__GetPageWidth>
 8010e58:	454d      	cmp	r5, r9
 8010e5a:	4428      	add	r0, r5
 8010e5c:	dc03      	bgt.n	8010e66 <_GetTouchedPage+0x9e>
 8010e5e:	4581      	cmp	r9, r0
 8010e60:	da01      	bge.n	8010e66 <_GetTouchedPage+0x9e>
 8010e62:	e003      	b.n	8010e6c <_GetTouchedPage+0xa4>
 8010e64:	4628      	mov	r0, r5
 8010e66:	3401      	adds	r4, #1
 8010e68:	4605      	mov	r5, r0
 8010e6a:	e7ed      	b.n	8010e48 <_GetTouchedPage+0x80>
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	b007      	add	sp, #28
 8010e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010e74 <MULTIPAGE__GetPagePos>:
 8010e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e76:	2400      	movs	r4, #0
 8010e78:	4607      	mov	r7, r0
 8010e7a:	460e      	mov	r6, r1
 8010e7c:	4625      	mov	r5, r4
 8010e7e:	42b5      	cmp	r5, r6
 8010e80:	d006      	beq.n	8010e90 <MULTIPAGE__GetPagePos+0x1c>
 8010e82:	4629      	mov	r1, r5
 8010e84:	4638      	mov	r0, r7
 8010e86:	f005 fa5d 	bl	8016344 <MULTIPAGE__GetPageWidth>
 8010e8a:	3501      	adds	r5, #1
 8010e8c:	4404      	add	r4, r0
 8010e8e:	e7f6      	b.n	8010e7e <MULTIPAGE__GetPagePos+0xa>
 8010e90:	4620      	mov	r0, r4
 8010e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e94 <_GetTabBarWidth>:
 8010e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e96:	4605      	mov	r5, r0
 8010e98:	f7f7 fa36 	bl	8008308 <GUI_ALLOC_LockH>
 8010e9c:	ac02      	add	r4, sp, #8
 8010e9e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010ea2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010ea4:	f7ff fc51 	bl	801074a <GUI_ARRAY_GetNumItems>
 8010ea8:	4606      	mov	r6, r0
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f7f7 fa3a 	bl	8008324 <GUI_ALLOC_UnlockH>
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f7ff ffde 	bl	8010e74 <MULTIPAGE__GetPagePos>
 8010eb8:	b002      	add	sp, #8
 8010eba:	bd70      	pop	{r4, r5, r6, pc}

08010ebc <_Paint>:
 8010ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec0:	b099      	sub	sp, #100	; 0x64
 8010ec2:	4682      	mov	sl, r0
 8010ec4:	f7f7 fa20 	bl	8008308 <GUI_ALLOC_LockH>
 8010ec8:	a914      	add	r1, sp, #80	; 0x50
 8010eca:	9011      	str	r0, [sp, #68]	; 0x44
 8010ecc:	4650      	mov	r0, sl
 8010ece:	f005 fa80 	bl	80163d2 <MULTIPAGE__GetTabBarRect>
 8010ed2:	a912      	add	r1, sp, #72	; 0x48
 8010ed4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010ed6:	f005 fa2a 	bl	801632e <MULTIPAGE__CalcBorderRect>
 8010eda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ede:	a812      	add	r0, sp, #72	; 0x48
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	4798      	blx	r3
 8010ee4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ee6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010ee8:	f7ff fc2f 	bl	801074a <GUI_ARRAY_GetNumItems>
 8010eec:	9008      	str	r0, [sp, #32]
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	f000 814b 	beq.w	801118a <_Paint+0x2ce>
 8010ef4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ef6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010ef8:	f404 7480 	and.w	r4, r4, #256	; 0x100
 8010efc:	b2a4      	uxth	r4, r4
 8010efe:	b124      	cbz	r4, 8010f0a <_Paint+0x4e>
 8010f00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010f02:	4650      	mov	r0, sl
 8010f04:	f7ff ffb6 	bl	8010e74 <MULTIPAGE__GetPagePos>
 8010f08:	4244      	negs	r4, r0
 8010f0a:	a814      	add	r0, sp, #80	; 0x50
 8010f0c:	f7fe f806 	bl	800ef1c <WM_SetUserClipRect>
 8010f10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8010f14:	f7f7 fd9c 	bl	8008a50 <GUI_SetFont>
 8010f18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010f1a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010f1e:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8010f22:	f8d2 b084 	ldr.w	fp, [r2, #132]	; 0x84
 8010f26:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8010f2a:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8010f2e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010f30:	9305      	str	r3, [sp, #20]
 8010f32:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8010f34:	f1bb 0f00 	cmp.w	fp, #0
 8010f38:	d101      	bne.n	8010f3e <_Paint+0x82>
 8010f3a:	f8d2 b088 	ldr.w	fp, [r2, #136]	; 0x88
 8010f3e:	2502      	movs	r5, #2
 8010f40:	fb93 f2f5 	sdiv	r2, r3, r5
 8010f44:	9209      	str	r2, [sp, #36]	; 0x24
 8010f46:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8010f4a:	920a      	str	r2, [sp, #40]	; 0x28
 8010f4c:	9a05      	ldr	r2, [sp, #20]
 8010f4e:	fb92 f2f5 	sdiv	r2, r2, r5
 8010f52:	b291      	uxth	r1, r2
 8010f54:	4252      	negs	r2, r2
 8010f56:	9207      	str	r2, [sp, #28]
 8010f58:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8010f5c:	9106      	str	r1, [sp, #24]
 8010f5e:	f04f 0800 	mov.w	r8, #0
 8010f62:	445b      	add	r3, fp
 8010f64:	920e      	str	r2, [sp, #56]	; 0x38
 8010f66:	fb93 f3f5 	sdiv	r3, r3, r5
 8010f6a:	46c1      	mov	r9, r8
 8010f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8010f6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010f70:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8010f72:	0719      	lsls	r1, r3, #28
 8010f74:	4444      	add	r4, r8
 8010f76:	d51c      	bpl.n	8010fb2 <_Paint+0xf6>
 8010f78:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8010f7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010f7c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010f7e:	f011 0f04 	tst.w	r1, #4
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	fb93 f3f5 	sdiv	r3, r3, r5
 8010f88:	4403      	add	r3, r0
 8010f8a:	bf04      	itt	eq
 8010f8c:	f8bd 0050 	ldrheq.w	r0, [sp, #80]	; 0x50
 8010f90:	181b      	addeq	r3, r3, r0
 8010f92:	f011 0f01 	tst.w	r1, #1
 8010f96:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8010f9a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8010f9c:	d016      	beq.n	8010fcc <_Paint+0x110>
 8010f9e:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8010fa2:	9906      	ldr	r1, [sp, #24]
 8010fa4:	4423      	add	r3, r4
 8010fa6:	4419      	add	r1, r3
 8010fa8:	6803      	ldr	r3, [r0, #0]
 8010faa:	fb93 f3f5 	sdiv	r3, r3, r5
 8010fae:	1acb      	subs	r3, r1, r3
 8010fb0:	e012      	b.n	8010fd8 <_Paint+0x11c>
 8010fb2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010fb6:	9906      	ldr	r1, [sp, #24]
 8010fb8:	4423      	add	r3, r4
 8010fba:	440b      	add	r3, r1
 8010fbc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
 8010fc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010fc2:	6819      	ldr	r1, [r3, #0]
 8010fc4:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
 8010fc8:	440b      	add	r3, r1
 8010fca:	e005      	b.n	8010fd8 <_Paint+0x11c>
 8010fcc:	9906      	ldr	r1, [sp, #24]
 8010fce:	6803      	ldr	r3, [r0, #0]
 8010fd0:	fb93 f3f5 	sdiv	r3, r3, r5
 8010fd4:	1acb      	subs	r3, r1, r3
 8010fd6:	4423      	add	r3, r4
 8010fd8:	4649      	mov	r1, r9
 8010fda:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8010fdc:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 8010fe0:	f7ff fbd5 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8010fe4:	4649      	mov	r1, r9
 8010fe6:	9010      	str	r0, [sp, #64]	; 0x40
 8010fe8:	4650      	mov	r0, sl
 8010fea:	f005 fa67 	bl	80164bc <MULTIPAGE_IsPageEnabled>
 8010fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ff0:	b908      	cbnz	r0, 8010ff6 <_Paint+0x13a>
 8010ff2:	695f      	ldr	r7, [r3, #20]
 8010ff4:	e004      	b.n	8011000 <_Paint+0x144>
 8010ff6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010ff8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010ffa:	454a      	cmp	r2, r9
 8010ffc:	d101      	bne.n	8011002 <_Paint+0x146>
 8010ffe:	68df      	ldr	r7, [r3, #12]
 8011000:	b907      	cbnz	r7, 8011004 <_Paint+0x148>
 8011002:	691f      	ldr	r7, [r3, #16]
 8011004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011006:	a810      	add	r0, sp, #64	; 0x40
 8011008:	f103 0218 	add.w	r2, r3, #24
 801100c:	791b      	ldrb	r3, [r3, #4]
 801100e:	9204      	str	r2, [sp, #16]
 8011010:	930b      	str	r3, [sp, #44]	; 0x2c
 8011012:	f7f7 f987 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011016:	4649      	mov	r1, r9
 8011018:	4650      	mov	r0, sl
 801101a:	f005 f993 	bl	8016344 <MULTIPAGE__GetPageWidth>
 801101e:	4680      	mov	r8, r0
 8011020:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011022:	2f00      	cmp	r7, #0
 8011024:	f000 809d 	beq.w	8011162 <_Paint+0x2a6>
 8011028:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 801102a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801102e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011030:	f006 0608 	and.w	r6, r6, #8
 8011034:	b2b6      	uxth	r6, r6
 8011036:	b186      	cbz	r6, 801105a <_Paint+0x19e>
 8011038:	3b1e      	subs	r3, #30
 801103a:	445b      	add	r3, fp
 801103c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8011040:	6813      	ldr	r3, [r2, #0]
 8011042:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 8011046:	fb93 f3f5 	sdiv	r3, r3, r5
 801104a:	1ad3      	subs	r3, r2, r3
 801104c:	4443      	add	r3, r8
 801104e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 8011052:	2301      	movs	r3, #1
 8011054:	4626      	mov	r6, r4
 8011056:	930d      	str	r3, [sp, #52]	; 0x34
 8011058:	e00e      	b.n	8011078 <_Paint+0x1bc>
 801105a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801105c:	940d      	str	r4, [sp, #52]	; 0x34
 801105e:	440b      	add	r3, r1
 8011060:	4443      	add	r3, r8
 8011062:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8011066:	6813      	ldr	r3, [r2, #0]
 8011068:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 801106c:	fb93 f3f5 	sdiv	r3, r3, r5
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	445b      	add	r3, fp
 8011074:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 8011078:	4638      	mov	r0, r7
 801107a:	f7ff fbb4 	bl	80107e6 <GUI_DRAW__GetXSize>
 801107e:	900f      	str	r0, [sp, #60]	; 0x3c
 8011080:	4638      	mov	r0, r7
 8011082:	f7ff fbc2 	bl	801080a <GUI_DRAW__GetYSize>
 8011086:	4602      	mov	r2, r0
 8011088:	9811      	ldr	r0, [sp, #68]	; 0x44
 801108a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801108c:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801108e:	f011 0f08 	tst.w	r1, #8
 8011092:	d019      	beq.n	80110c8 <_Paint+0x20c>
 8011094:	fb93 f1f5 	sdiv	r1, r3, r5
 8011098:	fb92 f2f5 	sdiv	r2, r2, r5
 801109c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801109e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 80110a2:	1a59      	subs	r1, r3, r1
 80110a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a6:	4471      	add	r1, lr
 80110a8:	4419      	add	r1, r3
 80110aa:	9b05      	ldr	r3, [sp, #20]
 80110ac:	4443      	add	r3, r8
 80110ae:	fb93 f3f5 	sdiv	r3, r3, r5
 80110b2:	1a9a      	subs	r2, r3, r2
 80110b4:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 80110b8:	441a      	add	r2, r3
 80110ba:	9b07      	ldr	r3, [sp, #28]
 80110bc:	441a      	add	r2, r3
 80110be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80110c0:	075b      	lsls	r3, r3, #29
 80110c2:	d518      	bpl.n	80110f6 <_Paint+0x23a>
 80110c4:	3901      	subs	r1, #1
 80110c6:	e016      	b.n	80110f6 <_Paint+0x23a>
 80110c8:	9905      	ldr	r1, [sp, #20]
 80110ca:	fb93 f3f5 	sdiv	r3, r3, r5
 80110ce:	eb01 0e08 	add.w	lr, r1, r8
 80110d2:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	; 0x50
 80110d6:	fb9e fef5 	sdiv	lr, lr, r5
 80110da:	ebc3 030e 	rsb	r3, r3, lr
 80110de:	4419      	add	r1, r3
 80110e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80110e2:	fb92 f2f5 	sdiv	r2, r2, r5
 80110e6:	1a9a      	subs	r2, r3, r2
 80110e8:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
 80110ec:	441a      	add	r2, r3
 80110ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80110f0:	075b      	lsls	r3, r3, #29
 80110f2:	bf48      	it	mi
 80110f4:	3201      	addmi	r2, #1
 80110f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110f8:	440b      	add	r3, r1
 80110fa:	930d      	str	r3, [sp, #52]	; 0x34
 80110fc:	18b3      	adds	r3, r6, r2
 80110fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011102:	e88d 0110 	stmia.w	sp, {r4, r8}
 8011106:	f003 0301 	and.w	r3, r3, #1
 801110a:	9302      	str	r3, [sp, #8]
 801110c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801110e:	464a      	mov	r2, r9
 8011110:	461e      	mov	r6, r3
 8011112:	2100      	movs	r1, #0
 8011114:	ab14      	add	r3, sp, #80	; 0x50
 8011116:	47b0      	blx	r6
 8011118:	990d      	ldr	r1, [sp, #52]	; 0x34
 801111a:	9a07      	ldr	r2, [sp, #28]
 801111c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801111e:	440a      	add	r2, r1
 8011120:	4638      	mov	r0, r7
 8011122:	4651      	mov	r1, sl
 8011124:	f7ff fb46 	bl	80107b4 <GUI_DRAW__Draw>
 8011128:	2002      	movs	r0, #2
 801112a:	f7f7 fcdf 	bl	8008aec <GUI_SetTextMode>
 801112e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011130:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8011132:	071b      	lsls	r3, r3, #28
 8011134:	d50f      	bpl.n	8011156 <_Paint+0x29a>
 8011136:	9804      	ldr	r0, [sp, #16]
 8011138:	f7ef f85a 	bl	80001f0 <strlen>
 801113c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011140:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
 8011144:	4b14      	ldr	r3, [pc, #80]	; (8011198 <_Paint+0x2dc>)
 8011146:	9300      	str	r3, [sp, #0]
 8011148:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 801114a:	4603      	mov	r3, r0
 801114c:	a916      	add	r1, sp, #88	; 0x58
 801114e:	9804      	ldr	r0, [sp, #16]
 8011150:	f7f8 f8f4 	bl	800933c <GUI_DispStringInRectEx>
 8011154:	e010      	b.n	8011178 <_Paint+0x2bc>
 8011156:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 8011158:	9804      	ldr	r0, [sp, #16]
 801115a:	a916      	add	r1, sp, #88	; 0x58
 801115c:	f7f8 f8c7 	bl	80092ee <GUI_DispStringInRect>
 8011160:	e00a      	b.n	8011178 <_Paint+0x2bc>
 8011162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011164:	9904      	ldr	r1, [sp, #16]
 8011166:	e88d 0110 	stmia.w	sp, {r4, r8}
 801116a:	f003 0301 	and.w	r3, r3, #1
 801116e:	9302      	str	r3, [sp, #8]
 8011170:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8011172:	ab14      	add	r3, sp, #80	; 0x50
 8011174:	464a      	mov	r2, r9
 8011176:	47b0      	blx	r6
 8011178:	9b08      	ldr	r3, [sp, #32]
 801117a:	f109 0901 	add.w	r9, r9, #1
 801117e:	454b      	cmp	r3, r9
 8011180:	f47f aef5 	bne.w	8010f6e <_Paint+0xb2>
 8011184:	2000      	movs	r0, #0
 8011186:	f7fd fec9 	bl	800ef1c <WM_SetUserClipRect>
 801118a:	a811      	add	r0, sp, #68	; 0x44
 801118c:	f7f7 f8ca 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011190:	b019      	add	sp, #100	; 0x64
 8011192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011196:	bf00      	nop
 8011198:	20000064 	.word	0x20000064

0801119c <MULTIPAGE_SetDefaultSkinClassic>:
 801119c:	4b01      	ldr	r3, [pc, #4]	; (80111a4 <MULTIPAGE_SetDefaultSkinClassic+0x8>)
 801119e:	4a02      	ldr	r2, [pc, #8]	; (80111a8 <MULTIPAGE_SetDefaultSkinClassic+0xc>)
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	4770      	bx	lr
 80111a4:	200005d0 	.word	0x200005d0
 80111a8:	08019444 	.word	0x08019444

080111ac <_Create>:
 80111ac:	4770      	bx	lr

080111ae <_Paint>:
 80111ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b2:	b08b      	sub	sp, #44	; 0x2c
 80111b4:	2300      	movs	r3, #0
 80111b6:	9308      	str	r3, [sp, #32]
 80111b8:	9309      	str	r3, [sp, #36]	; 0x24
 80111ba:	f7f7 f8a5 	bl	8008308 <GUI_ALLOC_LockH>
 80111be:	9000      	str	r0, [sp, #0]
 80111c0:	a806      	add	r0, sp, #24
 80111c2:	f7fd fc13 	bl	800e9ec <WM_GetClientRect>
 80111c6:	9b00      	ldr	r3, [sp, #0]
 80111c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ca:	ad04      	add	r5, sp, #16
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	a906      	add	r1, sp, #24
 80111d0:	4628      	mov	r0, r5
 80111d2:	f7f9 fa4c 	bl	800a66e <GUI__ReduceRect>
 80111d6:	9800      	ldr	r0, [sp, #0]
 80111d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80111da:	f005 fe93 	bl	8016f04 <PROGBAR__Value2Pos>
 80111de:	4606      	mov	r6, r0
 80111e0:	9800      	ldr	r0, [sp, #0]
 80111e2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80111e6:	f013 0f01 	tst.w	r3, #1
 80111ea:	ac02      	add	r4, sp, #8
 80111ec:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 80111f0:	d024      	beq.n	801123c <_Paint+0x8e>
 80111f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80111f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80111fa:	4620      	mov	r0, r4
 80111fc:	f8ad 600a 	strh.w	r6, [sp, #10]
 8011200:	f7fd fe8c 	bl	800ef1c <WM_SetUserClipRect>
 8011204:	9e00      	ldr	r6, [sp, #0]
 8011206:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8011208:	f7f9 fdcc 	bl	800ada4 <LCD_SetBkColor>
 801120c:	6db0      	ldr	r0, [r6, #88]	; 0x58
 801120e:	f7f9 fdcf 	bl	800adb0 <LCD_SetColor>
 8011212:	f7f7 fd4b 	bl	8008cac <GUI_Clear>
 8011216:	e895 0003 	ldmia.w	r5, {r0, r1}
 801121a:	e884 0003 	stmia.w	r4, {r0, r1}
 801121e:	4620      	mov	r0, r4
 8011220:	f8ad 700e 	strh.w	r7, [sp, #14]
 8011224:	f7fd fe7a 	bl	800ef1c <WM_SetUserClipRect>
 8011228:	9c00      	ldr	r4, [sp, #0]
 801122a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801122c:	f7f9 fdba 	bl	800ada4 <LCD_SetBkColor>
 8011230:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8011232:	f7f9 fdbd 	bl	800adb0 <LCD_SetColor>
 8011236:	f7f7 fd39 	bl	8008cac <GUI_Clear>
 801123a:	e057      	b.n	80112ec <_Paint+0x13e>
 801123c:	f005 fe1a 	bl	8016e74 <PROGBAR__GetTextLocked>
 8011240:	9001      	str	r0, [sp, #4]
 8011242:	b140      	cbz	r0, 8011256 <_Paint+0xa8>
 8011244:	9b00      	ldr	r3, [sp, #0]
 8011246:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011248:	f7f7 fc02 	bl	8008a50 <GUI_SetFont>
 801124c:	9a01      	ldr	r2, [sp, #4]
 801124e:	9800      	ldr	r0, [sp, #0]
 8011250:	a908      	add	r1, sp, #32
 8011252:	f005 fe12 	bl	8016e7a <PROGBAR__GetTextRect>
 8011256:	2002      	movs	r0, #2
 8011258:	f7f7 fc48 	bl	8008aec <GUI_SetTextMode>
 801125c:	4681      	mov	r9, r0
 801125e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011262:	e884 0003 	stmia.w	r4, {r0, r1}
 8011266:	4620      	mov	r0, r4
 8011268:	f8ad 700c 	strh.w	r7, [sp, #12]
 801126c:	f7fd fe56 	bl	800ef1c <WM_SetUserClipRect>
 8011270:	f8dd 8000 	ldr.w	r8, [sp]
 8011274:	9f01      	ldr	r7, [sp, #4]
 8011276:	f8d8 0050 	ldr.w	r0, [r8, #80]	; 0x50
 801127a:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801127e:	f9bd b022 	ldrsh.w	fp, [sp, #34]	; 0x22
 8011282:	f7f9 fd8f 	bl	800ada4 <LCD_SetBkColor>
 8011286:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 801128a:	f7f9 fd91 	bl	800adb0 <LCD_SetColor>
 801128e:	f7f7 fd0d 	bl	8008cac <GUI_Clear>
 8011292:	b137      	cbz	r7, 80112a2 <_Paint+0xf4>
 8011294:	4659      	mov	r1, fp
 8011296:	4650      	mov	r0, sl
 8011298:	f7f7 fb48 	bl	800892c <GUI_GotoXY>
 801129c:	4638      	mov	r0, r7
 801129e:	f7f7 feb5 	bl	800900c <GUI_DispString>
 80112a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80112a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80112aa:	4620      	mov	r0, r4
 80112ac:	f8ad 6008 	strh.w	r6, [sp, #8]
 80112b0:	f7fd fe34 	bl	800ef1c <WM_SetUserClipRect>
 80112b4:	9d00      	ldr	r5, [sp, #0]
 80112b6:	9c01      	ldr	r4, [sp, #4]
 80112b8:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80112ba:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80112be:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 80112c2:	f7f9 fd6f 	bl	800ada4 <LCD_SetBkColor>
 80112c6:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80112c8:	f7f9 fd72 	bl	800adb0 <LCD_SetColor>
 80112cc:	f7f7 fcee 	bl	8008cac <GUI_Clear>
 80112d0:	b134      	cbz	r4, 80112e0 <_Paint+0x132>
 80112d2:	4639      	mov	r1, r7
 80112d4:	4630      	mov	r0, r6
 80112d6:	f7f7 fb29 	bl	800892c <GUI_GotoXY>
 80112da:	4620      	mov	r0, r4
 80112dc:	f7f7 fe96 	bl	800900c <GUI_DispString>
 80112e0:	4648      	mov	r0, r9
 80112e2:	f7f7 fc03 	bl	8008aec <GUI_SetTextMode>
 80112e6:	a801      	add	r0, sp, #4
 80112e8:	f7f7 f81c 	bl	8008324 <GUI_ALLOC_UnlockH>
 80112ec:	ac0a      	add	r4, sp, #40	; 0x28
 80112ee:	2000      	movs	r0, #0
 80112f0:	f7fd fe14 	bl	800ef1c <WM_SetUserClipRect>
 80112f4:	f854 0d28 	ldr.w	r0, [r4, #-40]!
 80112f8:	a906      	add	r1, sp, #24
 80112fa:	f001 f9a1 	bl	8012640 <WIDGET__EFFECT_DrawDownRect>
 80112fe:	4620      	mov	r0, r4
 8011300:	f7f7 f810 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011304:	b00b      	add	sp, #44	; 0x2c
 8011306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801130c <PROGBAR_SetDefaultSkinClassic>:
 801130c:	4b01      	ldr	r3, [pc, #4]	; (8011314 <PROGBAR_SetDefaultSkinClassic+0x8>)
 801130e:	4a02      	ldr	r2, [pc, #8]	; (8011318 <PROGBAR_SetDefaultSkinClassic+0xc>)
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	4770      	bx	lr
 8011314:	2000063c 	.word	0x2000063c
 8011318:	08019450 	.word	0x08019450

0801131c <_Create>:
 801131c:	4770      	bx	lr

0801131e <_GetButtonSize>:
 801131e:	b513      	push	{r0, r1, r4, lr}
 8011320:	f7f6 fff2 	bl	8008308 <GUI_ALLOC_LockH>
 8011324:	ab02      	add	r3, sp, #8
 8011326:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8011328:	f843 0d04 	str.w	r0, [r3, #-4]!
 801132c:	4618      	mov	r0, r3
 801132e:	8854      	ldrh	r4, [r2, #2]
 8011330:	f7f6 fff8 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011334:	4620      	mov	r0, r4
 8011336:	b002      	add	sp, #8
 8011338:	bd10      	pop	{r4, pc}
	...

0801133c <_Paint>:
 801133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011340:	b08f      	sub	sp, #60	; 0x3c
 8011342:	2400      	movs	r4, #0
 8011344:	940a      	str	r4, [sp, #40]	; 0x28
 8011346:	940b      	str	r4, [sp, #44]	; 0x2c
 8011348:	4682      	mov	sl, r0
 801134a:	f7f6 ffdd 	bl	8008308 <GUI_ALLOC_LockH>
 801134e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8011350:	f9b0 2060 	ldrsh.w	r2, [r0, #96]	; 0x60
 8011354:	885f      	ldrh	r7, [r3, #2]
 8011356:	9200      	str	r2, [sp, #0]
 8011358:	a90a      	add	r1, sp, #40	; 0x28
 801135a:	9007      	str	r0, [sp, #28]
 801135c:	f001 f812 	bl	8012384 <WIDGET__GetClientRect>
 8011360:	9e07      	ldr	r6, [sp, #28]
 8011362:	4650      	mov	r0, sl
 8011364:	f8b6 8032 	ldrh.w	r8, [r6, #50]	; 0x32
 8011368:	f7fd ff72 	bl	800f250 <WM__IsEnabled>
 801136c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8011370:	9b07      	ldr	r3, [sp, #28]
 8011372:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8011374:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8011378:	8832      	ldrh	r2, [r6, #0]
 801137a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801137c:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 8011380:	3203      	adds	r2, #3
 8011382:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011386:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801138a:	3901      	subs	r1, #1
 801138c:	1d3d      	adds	r5, r7, #4
 801138e:	3703      	adds	r7, #3
 8011390:	fb12 7701 	smlabb	r7, r2, r1, r7
 8011394:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8011398:	f7f9 fd0a 	bl	800adb0 <LCD_SetColor>
 801139c:	9b07      	ldr	r3, [sp, #28]
 801139e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80113a0:	f7f7 fb56 	bl	8008a50 <GUI_SetFont>
 80113a4:	2002      	movs	r0, #2
 80113a6:	f7f7 fba1 	bl	8008aec <GUI_SetTextMode>
 80113aa:	9b07      	ldr	r3, [sp, #28]
 80113ac:	a908      	add	r1, sp, #32
 80113ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80113b0:	f7f7 fa0a 	bl	80087c8 <GUI_GetFontInfo>
 80113b4:	f001 fb2a 	bl	8012a0c <GUI_GetFontDistY>
 80113b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80113bc:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 80113c0:	f8b6 b000 	ldrh.w	fp, [r6]
 80113c4:	429d      	cmp	r5, r3
 80113c6:	bfa8      	it	ge
 80113c8:	2402      	movge	r4, #2
 80113ca:	eba2 0203 	sub.w	r2, r2, r3
 80113ce:	bfa8      	it	ge
 80113d0:	1aed      	subge	r5, r5, r3
 80113d2:	b2d2      	uxtb	r2, r2
 80113d4:	bfa8      	it	ge
 80113d6:	fb95 f4f4 	sdivge	r4, r5, r4
 80113da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80113de:	bfa8      	it	ge
 80113e0:	b224      	sxthge	r4, r4
 80113e2:	280d      	cmp	r0, #13
 80113e4:	bfb4      	ite	lt
 80113e6:	2702      	movlt	r7, #2
 80113e8:	2703      	movge	r7, #3
 80113ea:	9201      	str	r2, [sp, #4]
 80113ec:	4423      	add	r3, r4
 80113ee:	f10b 0206 	add.w	r2, fp, #6
 80113f2:	42bc      	cmp	r4, r7
 80113f4:	b212      	sxth	r2, r2
 80113f6:	b21b      	sxth	r3, r3
 80113f8:	4650      	mov	r0, sl
 80113fa:	bfb8      	it	lt
 80113fc:	b2e7      	uxtblt	r7, r4
 80113fe:	f008 0801 	and.w	r8, r8, #1
 8011402:	9202      	str	r2, [sp, #8]
 8011404:	9303      	str	r3, [sp, #12]
 8011406:	f004 fadb 	bl	80159c0 <WM_GetHasTrans>
 801140a:	b950      	cbnz	r0, 8011422 <_Paint+0xe6>
 801140c:	9b07      	ldr	r3, [sp, #28]
 801140e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011410:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8011414:	4298      	cmp	r0, r3
 8011416:	bf08      	it	eq
 8011418:	4841      	ldreq	r0, [pc, #260]	; (8011520 <_Paint+0x1e4>)
 801141a:	f7f9 fcc3 	bl	800ada4 <LCD_SetBkColor>
 801141e:	f7f7 fc45 	bl	8008cac <GUI_Clear>
 8011422:	b27f      	sxtb	r7, r7
 8011424:	427b      	negs	r3, r7
 8011426:	2500      	movs	r5, #0
 8011428:	9304      	str	r3, [sp, #16]
 801142a:	9b07      	ldr	r3, [sp, #28]
 801142c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011430:	4295      	cmp	r5, r2
 8011432:	da65      	bge.n	8011500 <_Paint+0x1c4>
 8011434:	f8b3 7062 	ldrh.w	r7, [r3, #98]	; 0x62
 8011438:	a807      	add	r0, sp, #28
 801143a:	436f      	muls	r7, r5
 801143c:	f7f6 ff72 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011440:	1cba      	adds	r2, r7, #2
 8011442:	2102      	movs	r1, #2
 8011444:	4630      	mov	r0, r6
 8011446:	f7f8 f811 	bl	800946c <GUI_DrawBitmap>
 801144a:	9b00      	ldr	r3, [sp, #0]
 801144c:	429d      	cmp	r5, r3
 801144e:	d112      	bne.n	8011476 <_Paint+0x13a>
 8011450:	8873      	ldrh	r3, [r6, #2]
 8011452:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8011456:	f8b9 1000 	ldrh.w	r1, [r9]
 801145a:	2002      	movs	r0, #2
 801145c:	1a9a      	subs	r2, r3, r2
 801145e:	8833      	ldrh	r3, [r6, #0]
 8011460:	fb92 f2f0 	sdiv	r2, r2, r0
 8011464:	4402      	add	r2, r0
 8011466:	1a59      	subs	r1, r3, r1
 8011468:	443a      	add	r2, r7
 801146a:	fb91 f1f0 	sdiv	r1, r1, r0
 801146e:	4401      	add	r1, r0
 8011470:	4648      	mov	r0, r9
 8011472:	f7f7 fffb 	bl	800946c <GUI_DrawBitmap>
 8011476:	4650      	mov	r0, sl
 8011478:	f7f6 ff46 	bl	8008308 <GUI_ALLOC_LockH>
 801147c:	4629      	mov	r1, r5
 801147e:	9007      	str	r0, [sp, #28]
 8011480:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8011482:	f7ff f984 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8011486:	9006      	str	r0, [sp, #24]
 8011488:	2800      	cmp	r0, #0
 801148a:	d037      	beq.n	80114fc <_Paint+0x1c0>
 801148c:	7803      	ldrb	r3, [r0, #0]
 801148e:	b393      	cbz	r3, 80114f6 <_Paint+0x1ba>
 8011490:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011494:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8011498:	2100      	movs	r1, #0
 801149a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801149e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 80114a2:	9105      	str	r1, [sp, #20]
 80114a4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80114a8:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 80114ac:	f7f7 ff23 	bl	80092f6 <GUI_GetStringDistX>
 80114b0:	f10b 0304 	add.w	r3, fp, #4
 80114b4:	4418      	add	r0, r3
 80114b6:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 80114ba:	463a      	mov	r2, r7
 80114bc:	9905      	ldr	r1, [sp, #20]
 80114be:	a80c      	add	r0, sp, #48	; 0x30
 80114c0:	f7f7 f9f9 	bl	80088b6 <GUI_MoveRect>
 80114c4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80114c8:	9b01      	ldr	r3, [sp, #4]
 80114ca:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80114ce:	9806      	ldr	r0, [sp, #24]
 80114d0:	1ad2      	subs	r2, r2, r3
 80114d2:	f7f7 fe2b 	bl	800912c <GUI_DispStringAt>
 80114d6:	f1b8 0f00 	cmp.w	r8, #0
 80114da:	d00c      	beq.n	80114f6 <_Paint+0x1ba>
 80114dc:	9b07      	ldr	r3, [sp, #28]
 80114de:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 80114e2:	4295      	cmp	r5, r2
 80114e4:	d002      	beq.n	80114ec <_Paint+0x1b0>
 80114e6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80114ea:	b123      	cbz	r3, 80114f6 <_Paint+0x1ba>
 80114ec:	9a04      	ldr	r2, [sp, #16]
 80114ee:	a90c      	add	r1, sp, #48	; 0x30
 80114f0:	a80a      	add	r0, sp, #40	; 0x28
 80114f2:	f7f9 f8bc 	bl	800a66e <GUI__ReduceRect>
 80114f6:	a806      	add	r0, sp, #24
 80114f8:	f7f6 ff14 	bl	8008324 <GUI_ALLOC_UnlockH>
 80114fc:	3501      	adds	r5, #1
 80114fe:	e794      	b.n	801142a <_Paint+0xee>
 8011500:	f1b8 0f00 	cmp.w	r8, #0
 8011504:	d006      	beq.n	8011514 <_Paint+0x1d8>
 8011506:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011508:	f7f9 fc52 	bl	800adb0 <LCD_SetColor>
 801150c:	2100      	movs	r1, #0
 801150e:	a80a      	add	r0, sp, #40	; 0x28
 8011510:	f001 ff20 	bl	8013354 <GUI_DrawFocusRect>
 8011514:	a807      	add	r0, sp, #28
 8011516:	f7f6 ff05 	bl	8008324 <GUI_ALLOC_UnlockH>
 801151a:	b00f      	add	sp, #60	; 0x3c
 801151c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011520:	00c0c0c0 	.word	0x00c0c0c0

08011524 <RADIO_SetDefaultSkinClassic>:
 8011524:	4b01      	ldr	r3, [pc, #4]	; (801152c <RADIO_SetDefaultSkinClassic+0x8>)
 8011526:	4a02      	ldr	r2, [pc, #8]	; (8011530 <RADIO_SetDefaultSkinClassic+0xc>)
 8011528:	601a      	str	r2, [r3, #0]
 801152a:	4770      	bx	lr
 801152c:	200006b0 	.word	0x200006b0
 8011530:	0801945c 	.word	0x0801945c

08011534 <SCROLLBAR__Rect2VRect>:
 8011534:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8011536:	071b      	lsls	r3, r3, #28
 8011538:	b510      	push	{r4, lr}
 801153a:	d514      	bpl.n	8011566 <SCROLLBAR__Rect2VRect+0x32>
 801153c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011540:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011544:	f9b1 0000 	ldrsh.w	r0, [r1]
 8011548:	884c      	ldrh	r4, [r1, #2]
 801154a:	800c      	strh	r4, [r1, #0]
 801154c:	1a9b      	subs	r3, r3, r2
 801154e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8011552:	88cc      	ldrh	r4, [r1, #6]
 8011554:	808c      	strh	r4, [r1, #4]
 8011556:	3301      	adds	r3, #1
 8011558:	b29b      	uxth	r3, r3
 801155a:	43c0      	mvns	r0, r0
 801155c:	43d2      	mvns	r2, r2
 801155e:	4418      	add	r0, r3
 8011560:	4413      	add	r3, r2
 8011562:	80c8      	strh	r0, [r1, #6]
 8011564:	804b      	strh	r3, [r1, #2]
 8011566:	bd10      	pop	{r4, pc}

08011568 <SCROLLBAR_GetDefaultWidth>:
 8011568:	4b01      	ldr	r3, [pc, #4]	; (8011570 <SCROLLBAR_GetDefaultWidth+0x8>)
 801156a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801156e:	4770      	bx	lr
 8011570:	20000374 	.word	0x20000374

08011574 <SCROLLBAR_SetDefaultWidth>:
 8011574:	4b02      	ldr	r3, [pc, #8]	; (8011580 <SCROLLBAR_SetDefaultWidth+0xc>)
 8011576:	f9b3 2000 	ldrsh.w	r2, [r3]
 801157a:	8018      	strh	r0, [r3, #0]
 801157c:	4610      	mov	r0, r2
 801157e:	4770      	bx	lr
 8011580:	20000374 	.word	0x20000374

08011584 <SCROLLBAR_SetDefaultColor>:
 8011584:	2902      	cmp	r1, #2
 8011586:	bf9d      	ittte	ls
 8011588:	4a03      	ldrls	r2, [pc, #12]	; (8011598 <SCROLLBAR_SetDefaultColor+0x14>)
 801158a:	f852 3021 	ldrls.w	r3, [r2, r1, lsl #2]
 801158e:	f842 0021 	strls.w	r0, [r2, r1, lsl #2]
 8011592:	2300      	movhi	r3, #0
 8011594:	4618      	mov	r0, r3
 8011596:	4770      	bx	lr
 8011598:	20000378 	.word	0x20000378

0801159c <_Create>:
 801159c:	b530      	push	{r4, r5, lr}
 801159e:	b08d      	sub	sp, #52	; 0x34
 80115a0:	4605      	mov	r5, r0
 80115a2:	f7f6 feb1 	bl	8008308 <GUI_ALLOC_LockH>
 80115a6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80115a8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80115aa:	9000      	str	r0, [sp, #0]
 80115ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <_Create+0x34>)
 80115b4:	6483      	str	r3, [r0, #72]	; 0x48
 80115b6:	4668      	mov	r0, sp
 80115b8:	f7f6 feb4 	bl	8008324 <GUI_ALLOC_UnlockH>
 80115bc:	2300      	movs	r3, #0
 80115be:	9304      	str	r3, [sp, #16]
 80115c0:	ab01      	add	r3, sp, #4
 80115c2:	9503      	str	r5, [sp, #12]
 80115c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80115c6:	a803      	add	r0, sp, #12
 80115c8:	47a0      	blx	r4
 80115ca:	b00d      	add	sp, #52	; 0x34
 80115cc:	bd30      	pop	{r4, r5, pc}
 80115ce:	bf00      	nop
 80115d0:	080115d5 	.word	0x080115d5

080115d4 <_CalcPositions>:
 80115d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d8:	b090      	sub	sp, #64	; 0x40
 80115da:	4604      	mov	r4, r0
 80115dc:	460d      	mov	r5, r1
 80115de:	f7f6 fe93 	bl	8008308 <GUI_ALLOC_LockH>
 80115e2:	4603      	mov	r3, r0
 80115e4:	9000      	str	r0, [sp, #0]
 80115e6:	c803      	ldmia	r0, {r0, r1}
 80115e8:	ae03      	add	r6, sp, #12
 80115ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80115ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80115f0:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80115f4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80115f8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80115fc:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8011600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011602:	9407      	str	r4, [sp, #28]
 8011604:	f002 0208 	and.w	r2, r2, #8
 8011608:	2a00      	cmp	r2, #0
 801160a:	bf0c      	ite	eq
 801160c:	4602      	moveq	r2, r0
 801160e:	460a      	movne	r2, r1
 8011610:	61aa      	str	r2, [r5, #24]
 8011612:	bf14      	ite	ne
 8011614:	2201      	movne	r2, #1
 8011616:	2200      	moveq	r2, #0
 8011618:	9201      	str	r2, [sp, #4]
 801161a:	2219      	movs	r2, #25
 801161c:	9208      	str	r2, [sp, #32]
 801161e:	aa01      	add	r2, sp, #4
 8011620:	900d      	str	r0, [sp, #52]	; 0x34
 8011622:	920f      	str	r2, [sp, #60]	; 0x3c
 8011624:	970b      	str	r7, [sp, #44]	; 0x2c
 8011626:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801162a:	910e      	str	r1, [sp, #56]	; 0x38
 801162c:	a807      	add	r0, sp, #28
 801162e:	4798      	blx	r3
 8011630:	9b00      	ldr	r3, [sp, #0]
 8011632:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011636:	2aff      	cmp	r2, #255	; 0xff
 8011638:	4604      	mov	r4, r0
 801163a:	d112      	bne.n	8011662 <_CalcPositions+0x8e>
 801163c:	6998      	ldr	r0, [r3, #24]
 801163e:	f7fd faf7 	bl	800ec30 <WM_GetScrollbarV>
 8011642:	b170      	cbz	r0, 8011662 <_CalcPositions+0x8e>
 8011644:	a905      	add	r1, sp, #20
 8011646:	f7fd fb1b 	bl	800ec80 <WM_GetWindowRectEx>
 801164a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801164e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011652:	429a      	cmp	r2, r3
 8011654:	bf02      	ittt	eq
 8011656:	f8bd 3014 	ldrheq.w	r3, [sp, #20]
 801165a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 801165e:	f8ad 3010 	strheq.w	r3, [sp, #16]
 8011662:	9b00      	ldr	r3, [sp, #0]
 8011664:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011668:	2afe      	cmp	r2, #254	; 0xfe
 801166a:	d112      	bne.n	8011692 <_CalcPositions+0xbe>
 801166c:	6998      	ldr	r0, [r3, #24]
 801166e:	f7fd fad1 	bl	800ec14 <WM_GetScrollbarH>
 8011672:	b170      	cbz	r0, 8011692 <_CalcPositions+0xbe>
 8011674:	a905      	add	r1, sp, #20
 8011676:	f7fd fb03 	bl	800ec80 <WM_GetWindowRectEx>
 801167a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801167e:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8011682:	429a      	cmp	r2, r3
 8011684:	bf02      	ittt	eq
 8011686:	f8bd 3016 	ldrheq.w	r3, [sp, #22]
 801168a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 801168e:	f8ad 3012 	strheq.w	r3, [sp, #18]
 8011692:	f1c8 0200 	rsb	r2, r8, #0
 8011696:	4279      	negs	r1, r7
 8011698:	4630      	mov	r0, r6
 801169a:	f7f7 f90c 	bl	80088b6 <GUI_MoveRect>
 801169e:	4631      	mov	r1, r6
 80116a0:	9800      	ldr	r0, [sp, #0]
 80116a2:	f7ff ff47 	bl	8011534 <SCROLLBAR__Rect2VRect>
 80116a6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80116aa:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
 80116ae:	9b00      	ldr	r3, [sp, #0]
 80116b0:	ebc2 0808 	rsb	r8, r2, r8
 80116b4:	f8d3 a04c 	ldr.w	sl, [r3, #76]	; 0x4c
 80116b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80116ba:	f108 0601 	add.w	r6, r8, #1
 80116be:	eba6 0644 	sub.w	r6, r6, r4, lsl #1
 80116c2:	4651      	mov	r1, sl
 80116c4:	4370      	muls	r0, r6
 80116c6:	f7f8 ff3c 	bl	800a542 <GUI__DivideRound32>
 80116ca:	4b17      	ldr	r3, [pc, #92]	; (8011728 <_CalcPositions+0x154>)
 80116cc:	f8c5 8014 	str.w	r8, [r5, #20]
 80116d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80116d4:	1c5a      	adds	r2, r3, #1
 80116d6:	4290      	cmp	r0, r2
 80116d8:	bfd8      	it	le
 80116da:	1c98      	addle	r0, r3, #2
 80116dc:	42b0      	cmp	r0, r6
 80116de:	bfa8      	it	ge
 80116e0:	4630      	movge	r0, r6
 80116e2:	ebc0 0906 	rsb	r9, r0, r6
 80116e6:	4426      	add	r6, r4
 80116e8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80116ec:	612e      	str	r6, [r5, #16]
 80116ee:	ae10      	add	r6, sp, #64	; 0x40
 80116f0:	602b      	str	r3, [r5, #0]
 80116f2:	1e63      	subs	r3, r4, #1
 80116f4:	606b      	str	r3, [r5, #4]
 80116f6:	f856 3d40 	ldr.w	r3, [r6, #-64]!
 80116fa:	4607      	mov	r7, r0
 80116fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80116fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011700:	ebc1 010a 	rsb	r1, r1, sl
 8011704:	fb00 f009 	mul.w	r0, r0, r9
 8011708:	f7f8 ff1b 	bl	800a542 <GUI__DivideRound32>
 801170c:	4420      	add	r0, r4
 801170e:	19c4      	adds	r4, r0, r7
 8011710:	3c01      	subs	r4, #1
 8011712:	60a8      	str	r0, [r5, #8]
 8011714:	60ec      	str	r4, [r5, #12]
 8011716:	f8c5 901c 	str.w	r9, [r5, #28]
 801171a:	622f      	str	r7, [r5, #32]
 801171c:	4630      	mov	r0, r6
 801171e:	f7f6 fe01 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011722:	b010      	add	sp, #64	; 0x40
 8011724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011728:	2000038c 	.word	0x2000038c

0801172c <_Paint>:
 801172c:	b570      	push	{r4, r5, r6, lr}
 801172e:	b098      	sub	sp, #96	; 0x60
 8011730:	4606      	mov	r6, r0
 8011732:	f7f6 fde9 	bl	8008308 <GUI_ALLOC_LockH>
 8011736:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8011738:	9305      	str	r3, [sp, #20]
 801173a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801173c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801173e:	9001      	str	r0, [sp, #4]
 8011740:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011744:	a906      	add	r1, sp, #24
 8011746:	4605      	mov	r5, r0
 8011748:	4630      	mov	r0, r6
 801174a:	9304      	str	r3, [sp, #16]
 801174c:	f7ff ff42 	bl	80115d4 <_CalcPositions>
 8011750:	a801      	add	r0, sp, #4
 8011752:	f7f6 fde7 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011756:	a902      	add	r1, sp, #8
 8011758:	4628      	mov	r0, r5
 801175a:	f000 fe13 	bl	8012384 <WIDGET__GetClientRect>
 801175e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011762:	9314      	str	r3, [sp, #80]	; 0x50
 8011764:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011768:	9316      	str	r3, [sp, #88]	; 0x58
 801176a:	ab04      	add	r3, sp, #16
 801176c:	9317      	str	r3, [sp, #92]	; 0x5c
 801176e:	2308      	movs	r3, #8
 8011770:	9310      	str	r3, [sp, #64]	; 0x40
 8011772:	9b06      	ldr	r3, [sp, #24]
 8011774:	9313      	str	r3, [sp, #76]	; 0x4c
 8011776:	9b07      	ldr	r3, [sp, #28]
 8011778:	9315      	str	r3, [sp, #84]	; 0x54
 801177a:	960f      	str	r6, [sp, #60]	; 0x3c
 801177c:	a80f      	add	r0, sp, #60	; 0x3c
 801177e:	47a0      	blx	r4
 8011780:	2310      	movs	r3, #16
 8011782:	9310      	str	r3, [sp, #64]	; 0x40
 8011784:	9b07      	ldr	r3, [sp, #28]
 8011786:	3301      	adds	r3, #1
 8011788:	9313      	str	r3, [sp, #76]	; 0x4c
 801178a:	9b08      	ldr	r3, [sp, #32]
 801178c:	3b01      	subs	r3, #1
 801178e:	9315      	str	r3, [sp, #84]	; 0x54
 8011790:	a80f      	add	r0, sp, #60	; 0x3c
 8011792:	47a0      	blx	r4
 8011794:	2311      	movs	r3, #17
 8011796:	9310      	str	r3, [sp, #64]	; 0x40
 8011798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801179a:	3301      	adds	r3, #1
 801179c:	9313      	str	r3, [sp, #76]	; 0x4c
 801179e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117a0:	3b01      	subs	r3, #1
 80117a2:	9315      	str	r3, [sp, #84]	; 0x54
 80117a4:	a80f      	add	r0, sp, #60	; 0x3c
 80117a6:	47a0      	blx	r4
 80117a8:	2313      	movs	r3, #19
 80117aa:	9310      	str	r3, [sp, #64]	; 0x40
 80117ac:	9b08      	ldr	r3, [sp, #32]
 80117ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80117b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b2:	9315      	str	r3, [sp, #84]	; 0x54
 80117b4:	a80f      	add	r0, sp, #60	; 0x3c
 80117b6:	47a0      	blx	r4
 80117b8:	2309      	movs	r3, #9
 80117ba:	9310      	str	r3, [sp, #64]	; 0x40
 80117bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117be:	9313      	str	r3, [sp, #76]	; 0x4c
 80117c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117c2:	9315      	str	r3, [sp, #84]	; 0x54
 80117c4:	a80f      	add	r0, sp, #60	; 0x3c
 80117c6:	47a0      	blx	r4
 80117c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d006      	beq.n	80117de <_Paint+0xb2>
 80117d0:	210c      	movs	r1, #12
 80117d2:	3301      	adds	r3, #1
 80117d4:	9110      	str	r1, [sp, #64]	; 0x40
 80117d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80117d8:	9215      	str	r2, [sp, #84]	; 0x54
 80117da:	a80f      	add	r0, sp, #60	; 0x3c
 80117dc:	47a0      	blx	r4
 80117de:	b018      	add	sp, #96	; 0x60
 80117e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080117e4 <_Create>:
 80117e4:	b507      	push	{r0, r1, r2, lr}
 80117e6:	f7f6 fd8f 	bl	8008308 <GUI_ALLOC_LockH>
 80117ea:	ab02      	add	r3, sp, #8
 80117ec:	4a04      	ldr	r2, [pc, #16]	; (8011800 <_Create+0x1c>)
 80117ee:	f843 0d04 	str.w	r0, [r3, #-4]!
 80117f2:	6482      	str	r2, [r0, #72]	; 0x48
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7f6 fd95 	bl	8008324 <GUI_ALLOC_UnlockH>
 80117fa:	b003      	add	sp, #12
 80117fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011800:	08011805 	.word	0x08011805

08011804 <_CalcPositions>:
 8011804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011808:	b086      	sub	sp, #24
 801180a:	460d      	mov	r5, r1
 801180c:	f7f6 fd7c 	bl	8008308 <GUI_ALLOC_LockH>
 8011810:	4603      	mov	r3, r0
 8011812:	9001      	str	r0, [sp, #4]
 8011814:	c803      	ldmia	r0, {r0, r1}
 8011816:	ac02      	add	r4, sp, #8
 8011818:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801181a:	e884 0003 	stmia.w	r4, {r0, r1}
 801181e:	0712      	lsls	r2, r2, #28
 8011820:	bf4c      	ite	mi
 8011822:	f9bd 200e 	ldrshmi.w	r2, [sp, #14]
 8011826:	f9bd 200c 	ldrshpl.w	r2, [sp, #12]
 801182a:	61aa      	str	r2, [r5, #24]
 801182c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011830:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
 8011834:	f9bd 700a 	ldrsh.w	r7, [sp, #10]
 8011838:	2aff      	cmp	r2, #255	; 0xff
 801183a:	d112      	bne.n	8011862 <_CalcPositions+0x5e>
 801183c:	6998      	ldr	r0, [r3, #24]
 801183e:	f7fd f9f7 	bl	800ec30 <WM_GetScrollbarV>
 8011842:	b170      	cbz	r0, 8011862 <_CalcPositions+0x5e>
 8011844:	a904      	add	r1, sp, #16
 8011846:	f7fd fa1b 	bl	800ec80 <WM_GetWindowRectEx>
 801184a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801184e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8011852:	429a      	cmp	r2, r3
 8011854:	bf02      	ittt	eq
 8011856:	f8bd 3010 	ldrheq.w	r3, [sp, #16]
 801185a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 801185e:	f8ad 300c 	strheq.w	r3, [sp, #12]
 8011862:	9b01      	ldr	r3, [sp, #4]
 8011864:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011868:	2afe      	cmp	r2, #254	; 0xfe
 801186a:	d112      	bne.n	8011892 <_CalcPositions+0x8e>
 801186c:	6998      	ldr	r0, [r3, #24]
 801186e:	f7fd f9d1 	bl	800ec14 <WM_GetScrollbarH>
 8011872:	b170      	cbz	r0, 8011892 <_CalcPositions+0x8e>
 8011874:	a904      	add	r1, sp, #16
 8011876:	f7fd fa03 	bl	800ec80 <WM_GetWindowRectEx>
 801187a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801187e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8011882:	429a      	cmp	r2, r3
 8011884:	bf02      	ittt	eq
 8011886:	f8bd 3012 	ldrheq.w	r3, [sp, #18]
 801188a:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 801188e:	f8ad 300e 	strheq.w	r3, [sp, #14]
 8011892:	427a      	negs	r2, r7
 8011894:	4271      	negs	r1, r6
 8011896:	4620      	mov	r0, r4
 8011898:	f7f7 f80d 	bl	80088b6 <GUI_MoveRect>
 801189c:	4621      	mov	r1, r4
 801189e:	9801      	ldr	r0, [sp, #4]
 80118a0:	f7ff fe48 	bl	8011534 <SCROLLBAR__Rect2VRect>
 80118a4:	9c01      	ldr	r4, [sp, #4]
 80118a6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80118aa:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80118ae:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 80118b2:	4620      	mov	r0, r4
 80118b4:	ebc3 0808 	rsb	r8, r3, r8
 80118b8:	f000 fd8c 	bl	80123d4 <WIDGET__GetXSize>
 80118bc:	4606      	mov	r6, r0
 80118be:	4620      	mov	r0, r4
 80118c0:	f000 fd96 	bl	80123f0 <WIDGET__GetYSize>
 80118c4:	0840      	lsrs	r0, r0, #1
 80118c6:	1d44      	adds	r4, r0, #5
 80118c8:	9b01      	ldr	r3, [sp, #4]
 80118ca:	3e05      	subs	r6, #5
 80118cc:	42b4      	cmp	r4, r6
 80118ce:	bf28      	it	cs
 80118d0:	4634      	movcs	r4, r6
 80118d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80118d4:	f108 0601 	add.w	r6, r8, #1
 80118d8:	eba6 0644 	sub.w	r6, r6, r4, lsl #1
 80118dc:	4651      	mov	r1, sl
 80118de:	4370      	muls	r0, r6
 80118e0:	f7f8 fe2f 	bl	800a542 <GUI__DivideRound32>
 80118e4:	4b16      	ldr	r3, [pc, #88]	; (8011940 <_CalcPositions+0x13c>)
 80118e6:	f8c5 8014 	str.w	r8, [r5, #20]
 80118ea:	f9b3 7000 	ldrsh.w	r7, [r3]
 80118ee:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80118f2:	602b      	str	r3, [r5, #0]
 80118f4:	42b8      	cmp	r0, r7
 80118f6:	bfb8      	it	lt
 80118f8:	4638      	movlt	r0, r7
 80118fa:	42b0      	cmp	r0, r6
 80118fc:	bfa8      	it	ge
 80118fe:	4630      	movge	r0, r6
 8011900:	ebc0 0906 	rsb	r9, r0, r6
 8011904:	4426      	add	r6, r4
 8011906:	612e      	str	r6, [r5, #16]
 8011908:	ae06      	add	r6, sp, #24
 801190a:	1e63      	subs	r3, r4, #1
 801190c:	606b      	str	r3, [r5, #4]
 801190e:	f856 3d14 	ldr.w	r3, [r6, #-20]!
 8011912:	4607      	mov	r7, r0
 8011914:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011916:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011918:	ebc1 010a 	rsb	r1, r1, sl
 801191c:	fb00 f009 	mul.w	r0, r0, r9
 8011920:	f7f8 fe0f 	bl	800a542 <GUI__DivideRound32>
 8011924:	4420      	add	r0, r4
 8011926:	19c4      	adds	r4, r0, r7
 8011928:	3c01      	subs	r4, #1
 801192a:	60a8      	str	r0, [r5, #8]
 801192c:	60ec      	str	r4, [r5, #12]
 801192e:	f8c5 901c 	str.w	r9, [r5, #28]
 8011932:	622f      	str	r7, [r5, #32]
 8011934:	4630      	mov	r0, r6
 8011936:	f7f6 fcf5 	bl	8008324 <GUI_ALLOC_UnlockH>
 801193a:	b006      	add	sp, #24
 801193c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011940:	2000038c 	.word	0x2000038c

08011944 <_Paint>:
 8011944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011946:	b091      	sub	sp, #68	; 0x44
 8011948:	4604      	mov	r4, r0
 801194a:	f7f6 fcdd 	bl	8008308 <GUI_ALLOC_LockH>
 801194e:	ad05      	add	r5, sp, #20
 8011950:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8011952:	9002      	str	r0, [sp, #8]
 8011954:	a907      	add	r1, sp, #28
 8011956:	4620      	mov	r0, r4
 8011958:	4798      	blx	r3
 801195a:	4629      	mov	r1, r5
 801195c:	9802      	ldr	r0, [sp, #8]
 801195e:	f000 fd11 	bl	8012384 <WIDGET__GetClientRect>
 8011962:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011966:	ac03      	add	r4, sp, #12
 8011968:	e884 0003 	stmia.w	r4, {r0, r1}
 801196c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8011970:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011974:	2603      	movs	r6, #3
 8011976:	1a9b      	subs	r3, r3, r2
 8011978:	fb93 f3f6 	sdiv	r3, r3, r6
 801197c:	1e5f      	subs	r7, r3, #1
 801197e:	3302      	adds	r3, #2
 8011980:	fb97 f6f6 	sdiv	r6, r7, r6
 8011984:	441e      	add	r6, r3
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801198a:	f7f9 fa11 	bl	800adb0 <LCD_SetColor>
 801198e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011992:	9b07      	ldr	r3, [sp, #28]
 8011994:	e884 0003 	stmia.w	r4, {r0, r1}
 8011998:	4621      	mov	r1, r4
 801199a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801199e:	9802      	ldr	r0, [sp, #8]
 80119a0:	9b08      	ldr	r3, [sp, #32]
 80119a2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80119a6:	f000 fe1e 	bl	80125e6 <WIDGET__FillRectEx>
 80119aa:	9b02      	ldr	r3, [sp, #8]
 80119ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80119ae:	f7f9 f9ff 	bl	800adb0 <LCD_SetColor>
 80119b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80119b6:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80119ba:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80119be:	9802      	ldr	r0, [sp, #8]
 80119c0:	1a9a      	subs	r2, r3, r2
 80119c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119c6:	1052      	asrs	r2, r2, #1
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	4431      	add	r1, r6
 80119cc:	463b      	mov	r3, r7
 80119ce:	f000 fe19 	bl	8012604 <WIDGET__DrawTriangle>
 80119d2:	4621      	mov	r1, r4
 80119d4:	9802      	ldr	r0, [sp, #8]
 80119d6:	f000 fe52 	bl	801267e <WIDGET__EFFECT_DrawUpRect>
 80119da:	9b02      	ldr	r3, [sp, #8]
 80119dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80119de:	f7f9 f9e7 	bl	800adb0 <LCD_SetColor>
 80119e2:	9b08      	ldr	r3, [sp, #32]
 80119e4:	9802      	ldr	r0, [sp, #8]
 80119e6:	3301      	adds	r3, #1
 80119e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80119ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119ee:	4621      	mov	r1, r4
 80119f0:	3b01      	subs	r3, #1
 80119f2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80119f6:	f000 fdf6 	bl	80125e6 <WIDGET__FillRectEx>
 80119fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80119fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a00:	3301      	adds	r3, #1
 8011a02:	e884 0003 	stmia.w	r4, {r0, r1}
 8011a06:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a0c:	9802      	ldr	r0, [sp, #8]
 8011a0e:	3b01      	subs	r3, #1
 8011a10:	4621      	mov	r1, r4
 8011a12:	f8ad 3010 	strh.w	r3, [sp, #16]
 8011a16:	f000 fde6 	bl	80125e6 <WIDGET__FillRectEx>
 8011a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a20:	e884 0003 	stmia.w	r4, {r0, r1}
 8011a24:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8011a2e:	9b02      	ldr	r3, [sp, #8]
 8011a30:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011a32:	f7f9 f9bd 	bl	800adb0 <LCD_SetColor>
 8011a36:	4621      	mov	r1, r4
 8011a38:	9802      	ldr	r0, [sp, #8]
 8011a3a:	f000 fdd4 	bl	80125e6 <WIDGET__FillRectEx>
 8011a3e:	4621      	mov	r1, r4
 8011a40:	9802      	ldr	r0, [sp, #8]
 8011a42:	f000 fe1c 	bl	801267e <WIDGET__EFFECT_DrawUpRect>
 8011a46:	9b02      	ldr	r3, [sp, #8]
 8011a48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011a4a:	f7f9 f9b1 	bl	800adb0 <LCD_SetColor>
 8011a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a50:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a54:	4621      	mov	r1, r4
 8011a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a58:	9802      	ldr	r0, [sp, #8]
 8011a5a:	f8ad 3010 	strh.w	r3, [sp, #16]
 8011a5e:	f000 fdc2 	bl	80125e6 <WIDGET__FillRectEx>
 8011a62:	9b02      	ldr	r3, [sp, #8]
 8011a64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011a66:	f7f9 f9a3 	bl	800adb0 <LCD_SetColor>
 8011a6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011a6e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8011a72:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8011a76:	9802      	ldr	r0, [sp, #8]
 8011a78:	1a9a      	subs	r2, r3, r2
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	1052      	asrs	r2, r2, #1
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	1b89      	subs	r1, r1, r6
 8011a82:	463b      	mov	r3, r7
 8011a84:	f000 fdbe 	bl	8012604 <WIDGET__DrawTriangle>
 8011a88:	4621      	mov	r1, r4
 8011a8a:	9802      	ldr	r0, [sp, #8]
 8011a8c:	f000 fdf7 	bl	801267e <WIDGET__EFFECT_DrawUpRect>
 8011a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d00c      	beq.n	8011ab2 <_Paint+0x16e>
 8011a98:	3301      	adds	r3, #1
 8011a9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011a9e:	9b02      	ldr	r3, [sp, #8]
 8011aa0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011aa4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011aa6:	f7f9 f983 	bl	800adb0 <LCD_SetColor>
 8011aaa:	4621      	mov	r1, r4
 8011aac:	9802      	ldr	r0, [sp, #8]
 8011aae:	f000 fd9a 	bl	80125e6 <WIDGET__FillRectEx>
 8011ab2:	a802      	add	r0, sp, #8
 8011ab4:	f7f6 fc36 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011ab8:	b011      	add	sp, #68	; 0x44
 8011aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011abc <SCROLLBAR_SetDefaultSkinClassic>:
 8011abc:	4b01      	ldr	r3, [pc, #4]	; (8011ac4 <SCROLLBAR_SetDefaultSkinClassic+0x8>)
 8011abe:	4a02      	ldr	r2, [pc, #8]	; (8011ac8 <SCROLLBAR_SetDefaultSkinClassic+0xc>)
 8011ac0:	601a      	str	r2, [r3, #0]
 8011ac2:	4770      	bx	lr
 8011ac4:	20000388 	.word	0x20000388
 8011ac8:	08019468 	.word	0x08019468

08011acc <_GetArrowPara>:
 8011acc:	b510      	push	{r4, lr}
 8011ace:	b121      	cbz	r1, 8011ada <_GetArrowPara+0xe>
 8011ad0:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011ad4:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011ad8:	e003      	b.n	8011ae2 <_GetArrowPara+0x16>
 8011ada:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011ade:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8011ae2:	1a09      	subs	r1, r1, r0
 8011ae4:	3101      	adds	r1, #1
 8011ae6:	1f08      	subs	r0, r1, #4
 8011ae8:	2403      	movs	r4, #3
 8011aea:	fb90 f0f4 	sdiv	r0, r0, r4
 8011aee:	6010      	str	r0, [r2, #0]
 8011af0:	1a08      	subs	r0, r1, r0
 8011af2:	eba1 0160 	sub.w	r1, r1, r0, asr #1
 8011af6:	3901      	subs	r1, #1
 8011af8:	6019      	str	r1, [r3, #0]
 8011afa:	bd10      	pop	{r4, pc}

08011afc <_DrawGraspH>:
 8011afc:	b570      	push	{r4, r5, r6, lr}
 8011afe:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011b02:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011b06:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8011b0a:	441c      	add	r4, r3
 8011b0c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011b10:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8011b12:	1b5e      	subs	r6, r3, r5
 8011b14:	3603      	adds	r6, #3
 8011b16:	10b6      	asrs	r6, r6, #2
 8011b18:	4435      	add	r5, r6
 8011b1a:	1064      	asrs	r4, r4, #1
 8011b1c:	1b9e      	subs	r6, r3, r6
 8011b1e:	f7f6 ff6d 	bl	80089fc <GUI_SetColor>
 8011b22:	4632      	mov	r2, r6
 8011b24:	4629      	mov	r1, r5
 8011b26:	4620      	mov	r0, r4
 8011b28:	f001 fbb8 	bl	801329c <GUI_DrawVLine>
 8011b2c:	4632      	mov	r2, r6
 8011b2e:	4629      	mov	r1, r5
 8011b30:	1ca0      	adds	r0, r4, #2
 8011b32:	f001 fbb3 	bl	801329c <GUI_DrawVLine>
 8011b36:	4632      	mov	r2, r6
 8011b38:	4629      	mov	r1, r5
 8011b3a:	1d20      	adds	r0, r4, #4
 8011b3c:	f001 fbae 	bl	801329c <GUI_DrawVLine>
 8011b40:	4632      	mov	r2, r6
 8011b42:	4629      	mov	r1, r5
 8011b44:	1ea0      	subs	r0, r4, #2
 8011b46:	f001 fba9 	bl	801329c <GUI_DrawVLine>
 8011b4a:	4632      	mov	r2, r6
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	1f20      	subs	r0, r4, #4
 8011b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b54:	f001 bba2 	b.w	801329c <GUI_DrawVLine>

08011b58 <_DrawGraspV>:
 8011b58:	b570      	push	{r4, r5, r6, lr}
 8011b5a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011b5e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8011b62:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011b66:	441c      	add	r4, r3
 8011b68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011b6c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8011b6e:	1b5e      	subs	r6, r3, r5
 8011b70:	3603      	adds	r6, #3
 8011b72:	10b6      	asrs	r6, r6, #2
 8011b74:	4435      	add	r5, r6
 8011b76:	1064      	asrs	r4, r4, #1
 8011b78:	1b9e      	subs	r6, r3, r6
 8011b7a:	f7f6 ff3f 	bl	80089fc <GUI_SetColor>
 8011b7e:	4632      	mov	r2, r6
 8011b80:	4629      	mov	r1, r5
 8011b82:	4620      	mov	r0, r4
 8011b84:	f001 fb24 	bl	80131d0 <GUI_DrawHLine>
 8011b88:	4632      	mov	r2, r6
 8011b8a:	4629      	mov	r1, r5
 8011b8c:	1ca0      	adds	r0, r4, #2
 8011b8e:	f001 fb1f 	bl	80131d0 <GUI_DrawHLine>
 8011b92:	4632      	mov	r2, r6
 8011b94:	4629      	mov	r1, r5
 8011b96:	1d20      	adds	r0, r4, #4
 8011b98:	f001 fb1a 	bl	80131d0 <GUI_DrawHLine>
 8011b9c:	4632      	mov	r2, r6
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	1ea0      	subs	r0, r4, #2
 8011ba2:	f001 fb15 	bl	80131d0 <GUI_DrawHLine>
 8011ba6:	4632      	mov	r2, r6
 8011ba8:	4629      	mov	r1, r5
 8011baa:	1f20      	subs	r0, r4, #4
 8011bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bb0:	f001 bb0e 	b.w	80131d0 <GUI_DrawHLine>

08011bb4 <_DrawFrame>:
 8011bb4:	b538      	push	{r3, r4, r5, lr}
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	6808      	ldr	r0, [r1, #0]
 8011bba:	460d      	mov	r5, r1
 8011bbc:	f7f6 ff1e 	bl	80089fc <GUI_SetColor>
 8011bc0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011bc4:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011bc8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8011bcc:	3a01      	subs	r2, #1
 8011bce:	3101      	adds	r1, #1
 8011bd0:	f001 fafe 	bl	80131d0 <GUI_DrawHLine>
 8011bd4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011bd8:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011bdc:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8011be0:	3a01      	subs	r2, #1
 8011be2:	3101      	adds	r1, #1
 8011be4:	f001 faf4 	bl	80131d0 <GUI_DrawHLine>
 8011be8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011bec:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011bf0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011bf4:	3a01      	subs	r2, #1
 8011bf6:	3101      	adds	r1, #1
 8011bf8:	f001 fb50 	bl	801329c <GUI_DrawVLine>
 8011bfc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011c00:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011c04:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011c08:	3a01      	subs	r2, #1
 8011c0a:	3101      	adds	r1, #1
 8011c0c:	f001 fb46 	bl	801329c <GUI_DrawVLine>
 8011c10:	6868      	ldr	r0, [r5, #4]
 8011c12:	f7f6 fef3 	bl	80089fc <GUI_SetColor>
 8011c16:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011c1a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011c1e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8011c22:	3a01      	subs	r2, #1
 8011c24:	3101      	adds	r1, #1
 8011c26:	3001      	adds	r0, #1
 8011c28:	f001 fad2 	bl	80131d0 <GUI_DrawHLine>
 8011c2c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011c30:	f9b4 1000 	ldrsh.w	r1, [r4]
 8011c34:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8011c38:	3a01      	subs	r2, #1
 8011c3a:	3101      	adds	r1, #1
 8011c3c:	3801      	subs	r0, #1
 8011c3e:	f001 fac7 	bl	80131d0 <GUI_DrawHLine>
 8011c42:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011c46:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011c4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011c4e:	3a02      	subs	r2, #2
 8011c50:	3102      	adds	r1, #2
 8011c52:	3001      	adds	r0, #1
 8011c54:	f001 fb22 	bl	801329c <GUI_DrawVLine>
 8011c58:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011c5c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011c60:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011c64:	3a02      	subs	r2, #2
 8011c66:	3102      	adds	r1, #2
 8011c68:	3801      	subs	r0, #1
 8011c6a:	f001 fb17 	bl	801329c <GUI_DrawVLine>
 8011c6e:	68a8      	ldr	r0, [r5, #8]
 8011c70:	f7f6 fec4 	bl	80089fc <GUI_SetColor>
 8011c74:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011c78:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011c7c:	f001 fad6 	bl	801322c <GUI_DrawPixel>
 8011c80:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011c84:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011c88:	f001 fad0 	bl	801322c <GUI_DrawPixel>
 8011c8c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011c90:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011c94:	f001 faca 	bl	801322c <GUI_DrawPixel>
 8011c98:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011c9c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ca4:	f001 bac2 	b.w	801322c <GUI_DrawPixel>

08011ca8 <_DrawBackgroundH>:
 8011ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011caa:	4604      	mov	r4, r0
 8011cac:	460d      	mov	r5, r1
 8011cae:	f7ff ff81 	bl	8011bb4 <_DrawFrame>
 8011cb2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011cb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011cba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011cbe:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011cc2:	692e      	ldr	r6, [r5, #16]
 8011cc4:	9601      	str	r6, [sp, #4]
 8011cc6:	440b      	add	r3, r1
 8011cc8:	68ee      	ldr	r6, [r5, #12]
 8011cca:	9600      	str	r6, [sp, #0]
 8011ccc:	105b      	asrs	r3, r3, #1
 8011cce:	3a02      	subs	r2, #2
 8011cd0:	3102      	adds	r1, #2
 8011cd2:	3002      	adds	r0, #2
 8011cd4:	f001 fa08 	bl	80130e8 <GUI_DrawGradientV>
 8011cd8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011cdc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011ce0:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011ce4:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011ce8:	69ac      	ldr	r4, [r5, #24]
 8011cea:	9401      	str	r4, [sp, #4]
 8011cec:	4419      	add	r1, r3
 8011cee:	696c      	ldr	r4, [r5, #20]
 8011cf0:	9400      	str	r4, [sp, #0]
 8011cf2:	1049      	asrs	r1, r1, #1
 8011cf4:	3b02      	subs	r3, #2
 8011cf6:	3a02      	subs	r2, #2
 8011cf8:	3101      	adds	r1, #1
 8011cfa:	3002      	adds	r0, #2
 8011cfc:	f001 f9f4 	bl	80130e8 <GUI_DrawGradientV>
 8011d00:	b002      	add	sp, #8
 8011d02:	bd70      	pop	{r4, r5, r6, pc}

08011d04 <_DrawBackgroundV>:
 8011d04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d06:	4604      	mov	r4, r0
 8011d08:	460d      	mov	r5, r1
 8011d0a:	f7ff ff53 	bl	8011bb4 <_DrawFrame>
 8011d0e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011d12:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011d16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011d1a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011d1e:	692e      	ldr	r6, [r5, #16]
 8011d20:	9601      	str	r6, [sp, #4]
 8011d22:	4402      	add	r2, r0
 8011d24:	68ee      	ldr	r6, [r5, #12]
 8011d26:	9600      	str	r6, [sp, #0]
 8011d28:	3b02      	subs	r3, #2
 8011d2a:	1052      	asrs	r2, r2, #1
 8011d2c:	3102      	adds	r1, #2
 8011d2e:	3002      	adds	r0, #2
 8011d30:	f001 fa14 	bl	801315c <GUI_DrawGradientH>
 8011d34:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011d38:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011d3c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011d40:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011d44:	69ac      	ldr	r4, [r5, #24]
 8011d46:	9401      	str	r4, [sp, #4]
 8011d48:	4410      	add	r0, r2
 8011d4a:	696c      	ldr	r4, [r5, #20]
 8011d4c:	9400      	str	r4, [sp, #0]
 8011d4e:	1040      	asrs	r0, r0, #1
 8011d50:	3b02      	subs	r3, #2
 8011d52:	3a02      	subs	r2, #2
 8011d54:	3102      	adds	r1, #2
 8011d56:	3001      	adds	r0, #1
 8011d58:	f001 fa00 	bl	801315c <GUI_DrawGradientH>
 8011d5c:	b002      	add	sp, #8
 8011d5e:	bd70      	pop	{r4, r5, r6, pc}

08011d60 <SCROLLBAR_DrawSkinFlex>:
 8011d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d64:	4604      	mov	r4, r0
 8011d66:	b08a      	sub	sp, #40	; 0x28
 8011d68:	6800      	ldr	r0, [r0, #0]
 8011d6a:	f7f6 facd 	bl	8008308 <GUI_ALLOC_LockH>
 8011d6e:	4680      	mov	r8, r0
 8011d70:	a80a      	add	r0, sp, #40	; 0x28
 8011d72:	ae06      	add	r6, sp, #24
 8011d74:	f840 8d1c 	str.w	r8, [r0, #-28]!
 8011d78:	f7f6 fad4 	bl	8008324 <GUI_ALLOC_UnlockH>
 8011d7c:	6923      	ldr	r3, [r4, #16]
 8011d7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011d82:	6963      	ldr	r3, [r4, #20]
 8011d84:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011d88:	69a3      	ldr	r3, [r4, #24]
 8011d8a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011d8e:	69e3      	ldr	r3, [r4, #28]
 8011d90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011d94:	6a25      	ldr	r5, [r4, #32]
 8011d96:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011d9a:	682b      	ldr	r3, [r5, #0]
 8011d9c:	f10d 0920 	add.w	r9, sp, #32
 8011da0:	e889 0003 	stmia.w	r9, {r0, r1}
 8011da4:	b14b      	cbz	r3, 8011dba <SCROLLBAR_DrawSkinFlex+0x5a>
 8011da6:	4632      	mov	r2, r6
 8011da8:	4631      	mov	r1, r6
 8011daa:	4640      	mov	r0, r8
 8011dac:	f000 fad6 	bl	801235c <WIDGET__RotateRect90>
 8011db0:	4f4d      	ldr	r7, [pc, #308]	; (8011ee8 <SCROLLBAR_DrawSkinFlex+0x188>)
 8011db2:	f8df a148 	ldr.w	sl, [pc, #328]	; 8011efc <SCROLLBAR_DrawSkinFlex+0x19c>
 8011db6:	4a4d      	ldr	r2, [pc, #308]	; (8011eec <SCROLLBAR_DrawSkinFlex+0x18c>)
 8011db8:	e003      	b.n	8011dc2 <SCROLLBAR_DrawSkinFlex+0x62>
 8011dba:	4f4d      	ldr	r7, [pc, #308]	; (8011ef0 <SCROLLBAR_DrawSkinFlex+0x190>)
 8011dbc:	f8df a140 	ldr.w	sl, [pc, #320]	; 8011f00 <SCROLLBAR_DrawSkinFlex+0x1a0>
 8011dc0:	4a4c      	ldr	r2, [pc, #304]	; (8011ef4 <SCROLLBAR_DrawSkinFlex+0x194>)
 8011dc2:	6863      	ldr	r3, [r4, #4]
 8011dc4:	3b08      	subs	r3, #8
 8011dc6:	2b11      	cmp	r3, #17
 8011dc8:	f200 808a 	bhi.w	8011ee0 <SCROLLBAR_DrawSkinFlex+0x180>
 8011dcc:	e8df f003 	tbb	[pc, r3]
 8011dd0:	88886413 	.word	0x88886413
 8011dd4:	88888837 	.word	0x88888837
 8011dd8:	46883737 	.word	0x46883737
 8011ddc:	88888888 	.word	0x88888888
 8011de0:	0988      	.short	0x0988
 8011de2:	682b      	ldr	r3, [r5, #0]
 8011de4:	b113      	cbz	r3, 8011dec <SCROLLBAR_DrawSkinFlex+0x8c>
 8011de6:	69a3      	ldr	r3, [r4, #24]
 8011de8:	6920      	ldr	r0, [r4, #16]
 8011dea:	e001      	b.n	8011df0 <SCROLLBAR_DrawSkinFlex+0x90>
 8011dec:	69e3      	ldr	r3, [r4, #28]
 8011dee:	6960      	ldr	r0, [r4, #20]
 8011df0:	1a18      	subs	r0, r3, r0
 8011df2:	3001      	adds	r0, #1
 8011df4:	e075      	b.n	8011ee2 <SCROLLBAR_DrawSkinFlex+0x182>
 8011df6:	4b40      	ldr	r3, [pc, #256]	; (8011ef8 <SCROLLBAR_DrawSkinFlex+0x198>)
 8011df8:	686c      	ldr	r4, [r5, #4]
 8011dfa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8011dfe:	2c02      	cmp	r4, #2
 8011e00:	bf0c      	ite	eq
 8011e02:	461c      	moveq	r4, r3
 8011e04:	460c      	movne	r4, r1
 8011e06:	4621      	mov	r1, r4
 8011e08:	4630      	mov	r0, r6
 8011e0a:	4790      	blx	r2
 8011e0c:	ab05      	add	r3, sp, #20
 8011e0e:	aa04      	add	r2, sp, #16
 8011e10:	6829      	ldr	r1, [r5, #0]
 8011e12:	4648      	mov	r0, r9
 8011e14:	f7ff fe5a 	bl	8011acc <_GetArrowPara>
 8011e18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011e1a:	f7f6 fdef 	bl	80089fc <GUI_SetColor>
 8011e1e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8011e22:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8011e26:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8011e2a:	9905      	ldr	r1, [sp, #20]
 8011e2c:	1a9a      	subs	r2, r3, r2
 8011e2e:	3201      	adds	r2, #1
 8011e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	1052      	asrs	r2, r2, #1
 8011e38:	9b04      	ldr	r3, [sp, #16]
 8011e3a:	4401      	add	r1, r0
 8011e3c:	e04d      	b.n	8011eda <SCROLLBAR_DrawSkinFlex+0x17a>
 8011e3e:	4c2e      	ldr	r4, [pc, #184]	; (8011ef8 <SCROLLBAR_DrawSkinFlex+0x198>)
 8011e40:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011e44:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011e46:	9501      	str	r5, [sp, #4]
 8011e48:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8011e4a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8011e4e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8011e52:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8011e56:	9400      	str	r4, [sp, #0]
 8011e58:	47d0      	blx	sl
 8011e5a:	e041      	b.n	8011ee0 <SCROLLBAR_DrawSkinFlex+0x180>
 8011e5c:	4b26      	ldr	r3, [pc, #152]	; (8011ef8 <SCROLLBAR_DrawSkinFlex+0x198>)
 8011e5e:	686c      	ldr	r4, [r5, #4]
 8011e60:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8011e64:	2c03      	cmp	r4, #3
 8011e66:	bf0c      	ite	eq
 8011e68:	461c      	moveq	r4, r3
 8011e6a:	460c      	movne	r4, r1
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	4630      	mov	r0, r6
 8011e70:	4790      	blx	r2
 8011e72:	682b      	ldr	r3, [r5, #0]
 8011e74:	b123      	cbz	r3, 8011e80 <SCROLLBAR_DrawSkinFlex+0x120>
 8011e76:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011e7a:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8011e7e:	e003      	b.n	8011e88 <SCROLLBAR_DrawSkinFlex+0x128>
 8011e80:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011e84:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	2b0e      	cmp	r3, #14
 8011e8e:	dd27      	ble.n	8011ee0 <SCROLLBAR_DrawSkinFlex+0x180>
 8011e90:	4621      	mov	r1, r4
 8011e92:	4630      	mov	r0, r6
 8011e94:	47b8      	blx	r7
 8011e96:	e023      	b.n	8011ee0 <SCROLLBAR_DrawSkinFlex+0x180>
 8011e98:	4b17      	ldr	r3, [pc, #92]	; (8011ef8 <SCROLLBAR_DrawSkinFlex+0x198>)
 8011e9a:	686c      	ldr	r4, [r5, #4]
 8011e9c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8011ea0:	2c01      	cmp	r4, #1
 8011ea2:	bf0c      	ite	eq
 8011ea4:	461c      	moveq	r4, r3
 8011ea6:	460c      	movne	r4, r1
 8011ea8:	4621      	mov	r1, r4
 8011eaa:	4630      	mov	r0, r6
 8011eac:	4790      	blx	r2
 8011eae:	ab05      	add	r3, sp, #20
 8011eb0:	aa04      	add	r2, sp, #16
 8011eb2:	6829      	ldr	r1, [r5, #0]
 8011eb4:	4648      	mov	r0, r9
 8011eb6:	f7ff fe09 	bl	8011acc <_GetArrowPara>
 8011eba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011ebc:	f7f6 fd9e 	bl	80089fc <GUI_SetColor>
 8011ec0:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8011ec4:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8011ec8:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8011ecc:	9905      	ldr	r1, [sp, #20]
 8011ece:	1a9a      	subs	r2, r3, r2
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	9b04      	ldr	r3, [sp, #16]
 8011ed6:	1052      	asrs	r2, r2, #1
 8011ed8:	1a41      	subs	r1, r0, r1
 8011eda:	4640      	mov	r0, r8
 8011edc:	f000 fb92 	bl	8012604 <WIDGET__DrawTriangle>
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	b00a      	add	sp, #40	; 0x28
 8011ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ee8:	08011b59 	.word	0x08011b59
 8011eec:	08011d05 	.word	0x08011d05
 8011ef0:	08011afd 	.word	0x08011afd
 8011ef4:	08011ca9 	.word	0x08011ca9
 8011ef8:	2000039c 	.word	0x2000039c
 8011efc:	0801315d 	.word	0x0801315d
 8011f00:	080130e9 	.word	0x080130e9

08011f04 <_Create>:
 8011f04:	4770      	bx	lr

08011f06 <_Paint>:
 8011f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0a:	b08a      	sub	sp, #40	; 0x28
 8011f0c:	4680      	mov	r8, r0
 8011f0e:	f7f6 f9fb 	bl	8008308 <GUI_ALLOC_LockH>
 8011f12:	f10d 0908 	add.w	r9, sp, #8
 8011f16:	a904      	add	r1, sp, #16
 8011f18:	9001      	str	r0, [sp, #4]
 8011f1a:	f000 fa33 	bl	8012384 <WIDGET__GetClientRect>
 8011f1e:	2201      	movs	r2, #1
 8011f20:	a904      	add	r1, sp, #16
 8011f22:	4648      	mov	r0, r9
 8011f24:	f7f8 fba3 	bl	800a66e <GUI__ReduceRect>
 8011f28:	9b01      	ldr	r3, [sp, #4]
 8011f2a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8011f2e:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 8011f32:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8011f36:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8011f38:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011f3a:	1a64      	subs	r4, r4, r1
 8011f3c:	3401      	adds	r4, #1
 8011f3e:	2602      	movs	r6, #2
 8011f40:	1aa4      	subs	r4, r4, r2
 8011f42:	fb92 f2f6 	sdiv	r2, r2, r6
 8011f46:	1856      	adds	r6, r2, r1
 8011f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011f4a:	1bd7      	subs	r7, r2, r7
 8011f4c:	2f01      	cmp	r7, #1
 8011f4e:	4640      	mov	r0, r8
 8011f50:	bfb8      	it	lt
 8011f52:	2701      	movlt	r7, #1
 8011f54:	f003 fd34 	bl	80159c0 <WM_GetHasTrans>
 8011f58:	b928      	cbnz	r0, 8011f66 <_Paint+0x60>
 8011f5a:	9b01      	ldr	r3, [sp, #4]
 8011f5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011f5e:	f7f8 ff21 	bl	800ada4 <LCD_SetBkColor>
 8011f62:	f7f6 fea3 	bl	8008cac <GUI_Clear>
 8011f66:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011f6a:	f10d 0818 	add.w	r8, sp, #24
 8011f6e:	e888 0003 	stmia.w	r8, {r0, r1}
 8011f72:	9801      	ldr	r0, [sp, #4]
 8011f74:	f8ad 6020 	strh.w	r6, [sp, #32]
 8011f78:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011f7a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8011f7c:	f9b0 e060 	ldrsh.w	lr, [r0, #96]	; 0x60
 8011f80:	fa1f fa86 	uxth.w	sl, r6
 8011f84:	f04f 0c02 	mov.w	ip, #2
 8011f88:	1a5a      	subs	r2, r3, r1
 8011f8a:	fb9e f1fc 	sdiv	r1, lr, ip
 8011f8e:	ebc1 010a 	rsb	r1, r1, sl
 8011f92:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011f96:	4362      	muls	r2, r4
 8011f98:	fbb2 f2f7 	udiv	r2, r2, r7
 8011f9c:	440a      	add	r2, r1
 8011f9e:	f04f 0905 	mov.w	r9, #5
 8011fa2:	b292      	uxth	r2, r2
 8011fa4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011fa8:	444b      	add	r3, r9
 8011faa:	4472      	add	r2, lr
 8011fac:	fb93 f3fc 	sdiv	r3, r3, ip
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011fb6:	44a2      	add	sl, r4
 8011fb8:	1e5a      	subs	r2, r3, #1
 8011fba:	a908      	add	r1, sp, #32
 8011fbc:	4463      	add	r3, ip
 8011fbe:	f8ad 901a 	strh.w	r9, [sp, #26]
 8011fc2:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
 8011fc6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
 8011fca:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011fce:	f000 fb37 	bl	8012640 <WIDGET__EFFECT_DrawDownRect>
 8011fd2:	2d00      	cmp	r5, #0
 8011fd4:	da04      	bge.n	8011fe0 <_Paint+0xda>
 8011fd6:	fb94 f9f9 	sdiv	r9, r4, r9
 8011fda:	1c7d      	adds	r5, r7, #1
 8011fdc:	454d      	cmp	r5, r9
 8011fde:	dc13      	bgt.n	8012008 <_Paint+0x102>
 8011fe0:	2d01      	cmp	r5, #1
 8011fe2:	dc12      	bgt.n	801200a <_Paint+0x104>
 8011fe4:	9b01      	ldr	r3, [sp, #4]
 8011fe6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011fe8:	f7f8 fee2 	bl	800adb0 <LCD_SetColor>
 8011fec:	4641      	mov	r1, r8
 8011fee:	9801      	ldr	r0, [sp, #4]
 8011ff0:	f000 faf9 	bl	80125e6 <WIDGET__FillRectEx>
 8011ff4:	4641      	mov	r1, r8
 8011ff6:	9801      	ldr	r0, [sp, #4]
 8011ff8:	f000 fb41 	bl	801267e <WIDGET__EFFECT_DrawUpRect>
 8011ffc:	9b01      	ldr	r3, [sp, #4]
 8011ffe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8012002:	07d1      	lsls	r1, r2, #31
 8012004:	d417      	bmi.n	8012036 <_Paint+0x130>
 8012006:	e021      	b.n	801204c <_Paint+0x146>
 8012008:	250b      	movs	r5, #11
 801200a:	9b01      	ldr	r3, [sp, #4]
 801200c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801200e:	f7f8 fecf 	bl	800adb0 <LCD_SetColor>
 8012012:	2700      	movs	r7, #0
 8012014:	46b9      	mov	r9, r7
 8012016:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801201a:	fb97 f1fa 	sdiv	r1, r7, sl
 801201e:	2303      	movs	r3, #3
 8012020:	2201      	movs	r2, #1
 8012022:	4431      	add	r1, r6
 8012024:	9801      	ldr	r0, [sp, #4]
 8012026:	f109 0901 	add.w	r9, r9, #1
 801202a:	f000 faba 	bl	80125a2 <WIDGET__DrawVLine>
 801202e:	45a9      	cmp	r9, r5
 8012030:	4427      	add	r7, r4
 8012032:	dbf2      	blt.n	801201a <_Paint+0x114>
 8012034:	e7d6      	b.n	8011fe4 <_Paint+0xde>
 8012036:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012038:	07d2      	lsls	r2, r2, #31
 801203a:	d507      	bpl.n	801204c <_Paint+0x146>
 801203c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801203e:	f7f8 feb7 	bl	800adb0 <LCD_SetColor>
 8012042:	2200      	movs	r2, #0
 8012044:	a904      	add	r1, sp, #16
 8012046:	9801      	ldr	r0, [sp, #4]
 8012048:	f000 fa9a 	bl	8012580 <WIDGET__DrawFocusRect>
 801204c:	a801      	add	r0, sp, #4
 801204e:	f7f6 f969 	bl	8008324 <GUI_ALLOC_UnlockH>
 8012052:	b00a      	add	sp, #40	; 0x28
 8012054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012058 <SLIDER_SetDefaultSkinClassic>:
 8012058:	4b01      	ldr	r3, [pc, #4]	; (8012060 <SLIDER_SetDefaultSkinClassic+0x8>)
 801205a:	4a02      	ldr	r2, [pc, #8]	; (8012064 <SLIDER_SetDefaultSkinClassic+0xc>)
 801205c:	601a      	str	r2, [r3, #0]
 801205e:	4770      	bx	lr
 8012060:	20000700 	.word	0x20000700
 8012064:	08019474 	.word	0x08019474

08012068 <SPINBOX_SetDefaultButtonSize>:
 8012068:	4b01      	ldr	r3, [pc, #4]	; (8012070 <SPINBOX_SetDefaultButtonSize+0x8>)
 801206a:	f8a3 0056 	strh.w	r0, [r3, #86]	; 0x56
 801206e:	4770      	bx	lr
 8012070:	2000076c 	.word	0x2000076c

08012074 <_Create>:
 8012074:	4770      	bx	lr

08012076 <_DrawSpinEffect>:
 8012076:	b570      	push	{r4, r5, r6, lr}
 8012078:	b09c      	sub	sp, #112	; 0x70
 801207a:	e88d 0006 	stmia.w	sp, {r1, r2}
 801207e:	461c      	mov	r4, r3
 8012080:	4606      	mov	r6, r0
 8012082:	f7f6 f941 	bl	8008308 <GUI_ALLOC_LockH>
 8012086:	2260      	movs	r2, #96	; 0x60
 8012088:	f100 0134 	add.w	r1, r0, #52	; 0x34
 801208c:	9003      	str	r0, [sp, #12]
 801208e:	a804      	add	r0, sp, #16
 8012090:	f006 f8ea 	bl	8018268 <memcpy>
 8012094:	a803      	add	r0, sp, #12
 8012096:	f7f6 f945 	bl	8008324 <GUI_ALLOC_UnlockH>
 801209a:	4630      	mov	r0, r6
 801209c:	466d      	mov	r5, sp
 801209e:	f7fd f8d7 	bl	800f250 <WM__IsEnabled>
 80120a2:	b108      	cbz	r0, 80120a8 <_DrawSpinEffect+0x32>
 80120a4:	3401      	adds	r4, #1
 80120a6:	e000      	b.n	80120aa <_DrawSpinEffect+0x34>
 80120a8:	4604      	mov	r4, r0
 80120aa:	ab1c      	add	r3, sp, #112	; 0x70
 80120ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80120b0:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 80120b4:	f7f6 fca2 	bl	80089fc <GUI_SetColor>
 80120b8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80120bc:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80120c0:	f9bd 0000 	ldrsh.w	r0, [sp]
 80120c4:	f001 f8ea 	bl	801329c <GUI_DrawVLine>
 80120c8:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80120cc:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80120d0:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80120d4:	f001 f8e2 	bl	801329c <GUI_DrawVLine>
 80120d8:	ab1c      	add	r3, sp, #112	; 0x70
 80120da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80120de:	f853 0c54 	ldr.w	r0, [r3, #-84]
 80120e2:	f7f6 fc8b 	bl	80089fc <GUI_SetColor>
 80120e6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80120ea:	f9bd 1000 	ldrsh.w	r1, [sp]
 80120ee:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 80120f2:	3a01      	subs	r2, #1
 80120f4:	3101      	adds	r1, #1
 80120f6:	f001 f86b 	bl	80131d0 <GUI_DrawHLine>
 80120fa:	ab1c      	add	r3, sp, #112	; 0x70
 80120fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012100:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8012104:	f7f6 fc7a 	bl	80089fc <GUI_SetColor>
 8012108:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801210c:	f9bd 1000 	ldrsh.w	r1, [sp]
 8012110:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8012114:	3a01      	subs	r2, #1
 8012116:	3101      	adds	r1, #1
 8012118:	f001 f85a 	bl	80131d0 <GUI_DrawHLine>
 801211c:	2201      	movs	r2, #1
 801211e:	4629      	mov	r1, r5
 8012120:	4628      	mov	r0, r5
 8012122:	f7f8 faa4 	bl	800a66e <GUI__ReduceRect>
 8012126:	ab1c      	add	r3, sp, #112	; 0x70
 8012128:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801212c:	f854 0c60 	ldr.w	r0, [r4, #-96]
 8012130:	f7f6 fc64 	bl	80089fc <GUI_SetColor>
 8012134:	4628      	mov	r0, r5
 8012136:	f001 f903 	bl	8013340 <GUI_FillRectEx>
 801213a:	b01c      	add	sp, #112	; 0x70
 801213c:	bd70      	pop	{r4, r5, r6, pc}

0801213e <_DrawTriangle>:
 801213e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012142:	4606      	mov	r6, r0
 8012144:	4688      	mov	r8, r1
 8012146:	4615      	mov	r5, r2
 8012148:	461c      	mov	r4, r3
 801214a:	f7fd f881 	bl	800f250 <WM__IsEnabled>
 801214e:	b108      	cbz	r0, 8012154 <_DrawTriangle+0x16>
 8012150:	3401      	adds	r4, #1
 8012152:	e000      	b.n	8012156 <_DrawTriangle+0x18>
 8012154:	4604      	mov	r4, r0
 8012156:	4630      	mov	r0, r6
 8012158:	f7f6 f8d6 	bl	8008308 <GUI_ALLOC_LockH>
 801215c:	9001      	str	r0, [sp, #4]
 801215e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8012162:	f04f 0a02 	mov.w	sl, #2
 8012166:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8012168:	f7f6 fc48 	bl	80089fc <GUI_SetColor>
 801216c:	4630      	mov	r0, r6
 801216e:	f003 fbe7 	bl	8015940 <WM_GetWindowSizeY>
 8012172:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8012176:	f9b8 6006 	ldrsh.w	r6, [r8, #6]
 801217a:	1af6      	subs	r6, r6, r3
 801217c:	9b01      	ldr	r3, [sp, #4]
 801217e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012182:	2b02      	cmp	r3, #2
 8012184:	bf0c      	ite	eq
 8012186:	2404      	moveq	r4, #4
 8012188:	2406      	movne	r4, #6
 801218a:	fb90 f4f4 	sdiv	r4, r0, r4
 801218e:	3c01      	subs	r4, #1
 8012190:	4681      	mov	r9, r0
 8012192:	1e77      	subs	r7, r6, #1
 8012194:	f104 0b01 	add.w	fp, r4, #1
 8012198:	a801      	add	r0, sp, #4
 801219a:	ebcb 0707 	rsb	r7, fp, r7
 801219e:	fb97 f7fa 	sdiv	r7, r7, sl
 80121a2:	f7f6 f8bf 	bl	8008324 <GUI_ALLOC_UnlockH>
 80121a6:	b935      	cbnz	r5, 80121b6 <_DrawTriangle+0x78>
 80121a8:	f9b8 5006 	ldrsh.w	r5, [r8, #6]
 80121ac:	1bed      	subs	r5, r5, r7
 80121ae:	3d01      	subs	r5, #1
 80121b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80121b4:	e00f      	b.n	80121d6 <_DrawTriangle+0x98>
 80121b6:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 80121ba:	f019 0f01 	tst.w	r9, #1
 80121be:	443b      	add	r3, r7
 80121c0:	f103 0501 	add.w	r5, r3, #1
 80121c4:	d006      	beq.n	80121d4 <_DrawTriangle+0x96>
 80121c6:	ebcb 0606 	rsb	r6, fp, r6
 80121ca:	fb96 f6fa 	sdiv	r6, r6, sl
 80121ce:	42b7      	cmp	r7, r6
 80121d0:	bfb8      	it	lt
 80121d2:	1c9d      	addlt	r5, r3, #2
 80121d4:	2701      	movs	r7, #1
 80121d6:	f9b8 3000 	ldrsh.w	r3, [r8]
 80121da:	f9b8 6004 	ldrsh.w	r6, [r8, #4]
 80121de:	2202      	movs	r2, #2
 80121e0:	1af6      	subs	r6, r6, r3
 80121e2:	fb96 f6f2 	sdiv	r6, r6, r2
 80121e6:	441e      	add	r6, r3
 80121e8:	2c00      	cmp	r4, #0
 80121ea:	db07      	blt.n	80121fc <_DrawTriangle+0xbe>
 80121ec:	19a2      	adds	r2, r4, r6
 80121ee:	1b31      	subs	r1, r6, r4
 80121f0:	4628      	mov	r0, r5
 80121f2:	f000 ffed 	bl	80131d0 <GUI_DrawHLine>
 80121f6:	443d      	add	r5, r7
 80121f8:	3c01      	subs	r4, #1
 80121fa:	e7f5      	b.n	80121e8 <_DrawTriangle+0xaa>
 80121fc:	b003      	add	sp, #12
 80121fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012202 <_Paint>:
 8012202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012204:	b09d      	sub	sp, #116	; 0x74
 8012206:	4605      	mov	r5, r0
 8012208:	f7f6 f87e 	bl	8008308 <GUI_ALLOC_LockH>
 801220c:	2260      	movs	r2, #96	; 0x60
 801220e:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8012212:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8012214:	9001      	str	r0, [sp, #4]
 8012216:	f890 60a3 	ldrb.w	r6, [r0, #163]	; 0xa3
 801221a:	a804      	add	r0, sp, #16
 801221c:	f006 f824 	bl	8018268 <memcpy>
 8012220:	ac02      	add	r4, sp, #8
 8012222:	a801      	add	r0, sp, #4
 8012224:	f7f6 f87e 	bl	8008324 <GUI_ALLOC_UnlockH>
 8012228:	4620      	mov	r0, r4
 801222a:	f7fc fd0f 	bl	800ec4c <WM_GetWindowRect>
 801222e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012232:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 8012236:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801223a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 801223e:	1a5b      	subs	r3, r3, r1
 8012240:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012244:	2300      	movs	r3, #0
 8012246:	f8ad 3008 	strh.w	r3, [sp, #8]
 801224a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801224e:	693b      	ldr	r3, [r7, #16]
 8012250:	1a12      	subs	r2, r2, r0
 8012252:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012256:	b10b      	cbz	r3, 801225c <_Paint+0x5a>
 8012258:	4620      	mov	r0, r4
 801225a:	4798      	blx	r3
 801225c:	4628      	mov	r0, r5
 801225e:	f7fc fff7 	bl	800f250 <WM__IsEnabled>
 8012262:	ab1c      	add	r3, sp, #112	; 0x70
 8012264:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012268:	f006 0701 	and.w	r7, r6, #1
 801226c:	f850 1c24 	ldr.w	r1, [r0, #-36]
 8012270:	4628      	mov	r0, r5
 8012272:	f005 fc3f 	bl	8017af4 <SPINBOX__DrawBk>
 8012276:	4621      	mov	r1, r4
 8012278:	4628      	mov	r0, r5
 801227a:	2200      	movs	r2, #0
 801227c:	f005 fca0 	bl	8017bc0 <SPINBOX__GetButtonRect>
 8012280:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012284:	463b      	mov	r3, r7
 8012286:	4628      	mov	r0, r5
 8012288:	f7ff fef5 	bl	8012076 <_DrawSpinEffect>
 801228c:	463b      	mov	r3, r7
 801228e:	4621      	mov	r1, r4
 8012290:	4628      	mov	r0, r5
 8012292:	2200      	movs	r2, #0
 8012294:	f7ff ff53 	bl	801213e <_DrawTriangle>
 8012298:	f3c6 0640 	ubfx	r6, r6, #1, #1
 801229c:	4621      	mov	r1, r4
 801229e:	4628      	mov	r0, r5
 80122a0:	2201      	movs	r2, #1
 80122a2:	f005 fc8d 	bl	8017bc0 <SPINBOX__GetButtonRect>
 80122a6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80122aa:	4633      	mov	r3, r6
 80122ac:	4628      	mov	r0, r5
 80122ae:	f7ff fee2 	bl	8012076 <_DrawSpinEffect>
 80122b2:	4633      	mov	r3, r6
 80122b4:	2201      	movs	r2, #1
 80122b6:	4621      	mov	r1, r4
 80122b8:	4628      	mov	r0, r5
 80122ba:	f7ff ff40 	bl	801213e <_DrawTriangle>
 80122be:	b01d      	add	sp, #116	; 0x74
 80122c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080122c4 <SPINBOX_SetDefaultSkinClassic>:
 80122c4:	4b01      	ldr	r3, [pc, #4]	; (80122cc <SPINBOX_SetDefaultSkinClassic+0x8>)
 80122c6:	4a02      	ldr	r2, [pc, #8]	; (80122d0 <SPINBOX_SetDefaultSkinClassic+0xc>)
 80122c8:	601a      	str	r2, [r3, #0]
 80122ca:	4770      	bx	lr
 80122cc:	20000768 	.word	0x20000768
 80122d0:	08019480 	.word	0x08019480

080122d4 <TREEVIEW_SetDefaultBkColor>:
 80122d4:	2802      	cmp	r0, #2
 80122d6:	bf9e      	ittt	ls
 80122d8:	4b02      	ldrls	r3, [pc, #8]	; (80122e4 <TREEVIEW_SetDefaultBkColor+0x10>)
 80122da:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 80122de:	6041      	strls	r1, [r0, #4]
 80122e0:	4770      	bx	lr
 80122e2:	bf00      	nop
 80122e4:	20000878 	.word	0x20000878

080122e8 <TREEVIEW_SetDefaultTextColor>:
 80122e8:	2802      	cmp	r0, #2
 80122ea:	bf9e      	ittt	ls
 80122ec:	3004      	addls	r0, #4
 80122ee:	4b02      	ldrls	r3, [pc, #8]	; (80122f8 <TREEVIEW_SetDefaultTextColor+0x10>)
 80122f0:	f843 1020 	strls.w	r1, [r3, r0, lsl #2]
 80122f4:	4770      	bx	lr
 80122f6:	bf00      	nop
 80122f8:	20000878 	.word	0x20000878

080122fc <_EffectRequiresRedraw>:
 80122fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122fe:	460d      	mov	r5, r1
 8012300:	f100 0108 	add.w	r1, r0, #8
 8012304:	4603      	mov	r3, r0
 8012306:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8012308:	c903      	ldmia	r1, {r0, r1}
 801230a:	6814      	ldr	r4, [r2, #0]
 801230c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012310:	4618      	mov	r0, r3
 8012312:	4669      	mov	r1, sp
 8012314:	f7fc ffa5 	bl	800f262 <WM__Screen2Client>
 8012318:	f9b5 3000 	ldrsh.w	r3, [r5]
 801231c:	f9bd 2000 	ldrsh.w	r2, [sp]
 8012320:	4423      	add	r3, r4
 8012322:	4293      	cmp	r3, r2
 8012324:	dc17      	bgt.n	8012356 <_EffectRequiresRedraw+0x5a>
 8012326:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801232a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801232e:	1b1b      	subs	r3, r3, r4
 8012330:	4293      	cmp	r3, r2
 8012332:	db10      	blt.n	8012356 <_EffectRequiresRedraw+0x5a>
 8012334:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012338:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801233c:	4423      	add	r3, r4
 801233e:	4293      	cmp	r3, r2
 8012340:	dc09      	bgt.n	8012356 <_EffectRequiresRedraw+0x5a>
 8012342:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8012346:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801234a:	1b00      	subs	r0, r0, r4
 801234c:	4298      	cmp	r0, r3
 801234e:	bfac      	ite	ge
 8012350:	2000      	movge	r0, #0
 8012352:	2001      	movlt	r0, #1
 8012354:	e000      	b.n	8012358 <_EffectRequiresRedraw+0x5c>
 8012356:	2001      	movs	r0, #1
 8012358:	b003      	add	sp, #12
 801235a:	bd30      	pop	{r4, r5, pc}

0801235c <WIDGET__RotateRect90>:
 801235c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012360:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012364:	b530      	push	{r4, r5, lr}
 8012366:	1a1b      	subs	r3, r3, r0
 8012368:	f9b2 5000 	ldrsh.w	r5, [r2]
 801236c:	88d0      	ldrh	r0, [r2, #6]
 801236e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8012372:	8852      	ldrh	r2, [r2, #2]
 8012374:	804d      	strh	r5, [r1, #2]
 8012376:	b29b      	uxth	r3, r3
 8012378:	1a18      	subs	r0, r3, r0
 801237a:	1a9b      	subs	r3, r3, r2
 801237c:	8008      	strh	r0, [r1, #0]
 801237e:	808b      	strh	r3, [r1, #4]
 8012380:	80cc      	strh	r4, [r1, #6]
 8012382:	bd30      	pop	{r4, r5, pc}

08012384 <WIDGET__GetClientRect>:
 8012384:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012386:	071b      	lsls	r3, r3, #28
 8012388:	b513      	push	{r0, r1, r4, lr}
 801238a:	460c      	mov	r4, r1
 801238c:	d50f      	bpl.n	80123ae <WIDGET__GetClientRect+0x2a>
 801238e:	4668      	mov	r0, sp
 8012390:	f7fc fb2c 	bl	800e9ec <WM_GetClientRect>
 8012394:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012398:	8023      	strh	r3, [r4, #0]
 801239a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801239e:	80a3      	strh	r3, [r4, #4]
 80123a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80123a4:	8063      	strh	r3, [r4, #2]
 80123a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80123aa:	80e3      	strh	r3, [r4, #6]
 80123ac:	e002      	b.n	80123b4 <WIDGET__GetClientRect+0x30>
 80123ae:	4608      	mov	r0, r1
 80123b0:	f7fc fb1c 	bl	800e9ec <WM_GetClientRect>
 80123b4:	b002      	add	sp, #8
 80123b6:	bd10      	pop	{r4, pc}

080123b8 <WIDGET__GetBkColor>:
 80123b8:	b508      	push	{r3, lr}
 80123ba:	f7fc fbd6 	bl	800eb6a <WM_GetParent>
 80123be:	f7fc faf9 	bl	800e9b4 <WM_GetBkColor>
 80123c2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80123c6:	4298      	cmp	r0, r3
 80123c8:	d103      	bne.n	80123d2 <WIDGET__GetBkColor+0x1a>
 80123ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80123ce:	f7fd baa9 	b.w	800f924 <DIALOG_GetBkColor>
 80123d2:	bd08      	pop	{r3, pc}

080123d4 <WIDGET__GetXSize>:
 80123d4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80123d6:	071b      	lsls	r3, r3, #28
 80123d8:	bf4b      	itete	mi
 80123da:	f9b0 3006 	ldrshmi.w	r3, [r0, #6]
 80123de:	f9b0 3004 	ldrshpl.w	r3, [r0, #4]
 80123e2:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
 80123e6:	f9b0 0000 	ldrshpl.w	r0, [r0]
 80123ea:	1a18      	subs	r0, r3, r0
 80123ec:	3001      	adds	r0, #1
 80123ee:	4770      	bx	lr

080123f0 <WIDGET__GetYSize>:
 80123f0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80123f2:	071b      	lsls	r3, r3, #28
 80123f4:	bf4b      	itete	mi
 80123f6:	f9b0 3004 	ldrshmi.w	r3, [r0, #4]
 80123fa:	f9b0 3006 	ldrshpl.w	r3, [r0, #6]
 80123fe:	f9b0 0000 	ldrshmi.w	r0, [r0]
 8012402:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
 8012406:	1a18      	subs	r0, r3, r0
 8012408:	3001      	adds	r0, #1
 801240a:	4770      	bx	lr

0801240c <WIDGET__FillStringInRect>:
 801240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801240e:	461e      	mov	r6, r3
 8012410:	4b40      	ldr	r3, [pc, #256]	; (8012514 <WIDGET__FillStringInRect+0x108>)
 8012412:	4617      	mov	r7, r2
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	f8d2 e014 	ldr.w	lr, [r2, #20]
 801241a:	b085      	sub	sp, #20
 801241c:	4605      	mov	r5, r0
 801241e:	460c      	mov	r4, r1
 8012420:	f1be 0f00 	cmp.w	lr, #0
 8012424:	d101      	bne.n	801242a <WIDGET__FillStringInRect+0x1e>
 8012426:	bb1d      	cbnz	r5, 8012470 <WIDGET__FillStringInRect+0x64>
 8012428:	e06f      	b.n	801250a <WIDGET__FillStringInRect+0xfe>
 801242a:	6808      	ldr	r0, [r1, #0]
 801242c:	6849      	ldr	r1, [r1, #4]
 801242e:	f8b2 c04c 	ldrh.w	ip, [r2, #76]	; 0x4c
 8012432:	466b      	mov	r3, sp
 8012434:	c303      	stmia	r3!, {r0, r1}
 8012436:	f8bd 3000 	ldrh.w	r3, [sp]
 801243a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 801243e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8012442:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012446:	4463      	add	r3, ip
 8012448:	f8ad 3000 	strh.w	r3, [sp]
 801244c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012450:	4401      	add	r1, r0
 8012452:	4403      	add	r3, r0
 8012454:	f8ad 1002 	strh.w	r1, [sp, #2]
 8012458:	4462      	add	r2, ip
 801245a:	4669      	mov	r1, sp
 801245c:	4670      	mov	r0, lr
 801245e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012462:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012466:	f7f6 fa7f 	bl	8008968 <GUI_RectsIntersect>
 801246a:	2800      	cmp	r0, #0
 801246c:	d050      	beq.n	8012510 <WIDGET__FillStringInRect+0x104>
 801246e:	e7da      	b.n	8012426 <WIDGET__FillStringInRect+0x1a>
 8012470:	782b      	ldrb	r3, [r5, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d049      	beq.n	801250a <WIDGET__FillStringInRect+0xfe>
 8012476:	f7f6 f982 	bl	800877e <GUI_GetBkColor>
 801247a:	0e00      	lsrs	r0, r0, #24
 801247c:	d003      	beq.n	8012486 <WIDGET__FillStringInRect+0x7a>
 801247e:	2002      	movs	r0, #2
 8012480:	f7f6 fb34 	bl	8008aec <GUI_SetTextMode>
 8012484:	e032      	b.n	80124ec <WIDGET__FillStringInRect+0xe0>
 8012486:	f7f6 fb31 	bl	8008aec <GUI_SetTextMode>
 801248a:	4632      	mov	r2, r6
 801248c:	4639      	mov	r1, r7
 801248e:	a802      	add	r0, sp, #8
 8012490:	f7f8 f893 	bl	800a5ba <GUI__IntersectRects>
 8012494:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8012498:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801249c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80124a0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80124a4:	3b01      	subs	r3, #1
 80124a6:	f7f6 fbc1 	bl	8008c2c <GUI_ClearRect>
 80124aa:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80124ae:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80124b2:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80124b6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80124ba:	3a01      	subs	r2, #1
 80124bc:	f7f6 fbb6 	bl	8008c2c <GUI_ClearRect>
 80124c0:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80124c4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80124c8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80124cc:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80124d0:	3001      	adds	r0, #1
 80124d2:	f7f6 fbab 	bl	8008c2c <GUI_ClearRect>
 80124d6:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80124da:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80124de:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80124e2:	f9b4 0000 	ldrsh.w	r0, [r4]
 80124e6:	3101      	adds	r1, #1
 80124e8:	f7f6 fba0 	bl	8008c2c <GUI_ClearRect>
 80124ec:	4638      	mov	r0, r7
 80124ee:	f7fc fd15 	bl	800ef1c <WM_SetUserClipRect>
 80124f2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80124f6:	f9b6 1000 	ldrsh.w	r1, [r6]
 80124fa:	4604      	mov	r4, r0
 80124fc:	4628      	mov	r0, r5
 80124fe:	f7f6 fe15 	bl	800912c <GUI_DispStringAt>
 8012502:	4620      	mov	r0, r4
 8012504:	f7fc fd0a 	bl	800ef1c <WM_SetUserClipRect>
 8012508:	e002      	b.n	8012510 <WIDGET__FillStringInRect+0x104>
 801250a:	4620      	mov	r0, r4
 801250c:	f7f6 fbc4 	bl	8008c98 <GUI_ClearRectEx>
 8012510:	b005      	add	sp, #20
 8012512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012514:	20000014 	.word	0x20000014

08012518 <WIDGET_OrState>:
 8012518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801251a:	460c      	mov	r4, r1
 801251c:	4605      	mov	r5, r0
 801251e:	b198      	cbz	r0, 8012548 <WIDGET_OrState+0x30>
 8012520:	f7f7 fc1c 	bl	8009d5c <GUI_Lock>
 8012524:	4628      	mov	r0, r5
 8012526:	f7f5 feef 	bl	8008308 <GUI_ALLOC_LockH>
 801252a:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801252c:	9001      	str	r0, [sp, #4]
 801252e:	ea34 0301 	bics.w	r3, r4, r1
 8012532:	d004      	beq.n	801253e <WIDGET_OrState+0x26>
 8012534:	430c      	orrs	r4, r1
 8012536:	8644      	strh	r4, [r0, #50]	; 0x32
 8012538:	4628      	mov	r0, r5
 801253a:	f7fb fd11 	bl	800df60 <WM_InvalidateWindow>
 801253e:	a801      	add	r0, sp, #4
 8012540:	f7f5 fef0 	bl	8008324 <GUI_ALLOC_UnlockH>
 8012544:	f7f7 fc00 	bl	8009d48 <GUI_Unlock>
 8012548:	b003      	add	sp, #12
 801254a:	bd30      	pop	{r4, r5, pc}

0801254c <WIDGET_AndState>:
 801254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801254e:	460c      	mov	r4, r1
 8012550:	4605      	mov	r5, r0
 8012552:	b198      	cbz	r0, 801257c <WIDGET_AndState+0x30>
 8012554:	f7f7 fc02 	bl	8009d5c <GUI_Lock>
 8012558:	4628      	mov	r0, r5
 801255a:	f7f5 fed5 	bl	8008308 <GUI_ALLOC_LockH>
 801255e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012560:	9001      	str	r0, [sp, #4]
 8012562:	ea23 0104 	bic.w	r1, r3, r4
 8012566:	428b      	cmp	r3, r1
 8012568:	d003      	beq.n	8012572 <WIDGET_AndState+0x26>
 801256a:	8641      	strh	r1, [r0, #50]	; 0x32
 801256c:	4628      	mov	r0, r5
 801256e:	f7fb fcf7 	bl	800df60 <WM_InvalidateWindow>
 8012572:	a801      	add	r0, sp, #4
 8012574:	f7f5 fed6 	bl	8008324 <GUI_ALLOC_UnlockH>
 8012578:	f7f7 fbe6 	bl	8009d48 <GUI_Unlock>
 801257c:	b003      	add	sp, #12
 801257e:	bd30      	pop	{r4, r5, pc}

08012580 <WIDGET__DrawFocusRect>:
 8012580:	b513      	push	{r0, r1, r4, lr}
 8012582:	4614      	mov	r4, r2
 8012584:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8012586:	0712      	lsls	r2, r2, #28
 8012588:	460b      	mov	r3, r1
 801258a:	d504      	bpl.n	8012596 <WIDGET__DrawFocusRect+0x16>
 801258c:	460a      	mov	r2, r1
 801258e:	4669      	mov	r1, sp
 8012590:	f7ff fee4 	bl	801235c <WIDGET__RotateRect90>
 8012594:	466b      	mov	r3, sp
 8012596:	4621      	mov	r1, r4
 8012598:	4618      	mov	r0, r3
 801259a:	f000 fedb 	bl	8013354 <GUI_DrawFocusRect>
 801259e:	b002      	add	sp, #8
 80125a0:	bd10      	pop	{r4, pc}

080125a2 <WIDGET__DrawVLine>:
 80125a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125a4:	460c      	mov	r4, r1
 80125a6:	4611      	mov	r1, r2
 80125a8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80125aa:	0712      	lsls	r2, r2, #28
 80125ac:	d515      	bpl.n	80125da <WIDGET__DrawVLine+0x38>
 80125ae:	b224      	sxth	r4, r4
 80125b0:	f8ad 1002 	strh.w	r1, [sp, #2]
 80125b4:	466a      	mov	r2, sp
 80125b6:	a902      	add	r1, sp, #8
 80125b8:	f8ad 4000 	strh.w	r4, [sp]
 80125bc:	f8ad 4004 	strh.w	r4, [sp, #4]
 80125c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80125c4:	f7ff feca 	bl	801235c <WIDGET__RotateRect90>
 80125c8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80125cc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80125d0:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 80125d4:	f000 fdfc 	bl	80131d0 <GUI_DrawHLine>
 80125d8:	e003      	b.n	80125e2 <WIDGET__DrawVLine+0x40>
 80125da:	461a      	mov	r2, r3
 80125dc:	4620      	mov	r0, r4
 80125de:	f000 fe5d 	bl	801329c <GUI_DrawVLine>
 80125e2:	b004      	add	sp, #16
 80125e4:	bd10      	pop	{r4, pc}

080125e6 <WIDGET__FillRectEx>:
 80125e6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80125e8:	071b      	lsls	r3, r3, #28
 80125ea:	b507      	push	{r0, r1, r2, lr}
 80125ec:	460a      	mov	r2, r1
 80125ee:	d503      	bpl.n	80125f8 <WIDGET__FillRectEx+0x12>
 80125f0:	4669      	mov	r1, sp
 80125f2:	f7ff feb3 	bl	801235c <WIDGET__RotateRect90>
 80125f6:	466a      	mov	r2, sp
 80125f8:	4610      	mov	r0, r2
 80125fa:	f000 fea1 	bl	8013340 <GUI_FillRectEx>
 80125fe:	b003      	add	sp, #12
 8012600:	f85d fb04 	ldr.w	pc, [sp], #4

08012604 <WIDGET__DrawTriangle>:
 8012604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012606:	461c      	mov	r4, r3
 8012608:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801260a:	9f06      	ldr	r7, [sp, #24]
 801260c:	071b      	lsls	r3, r3, #28
 801260e:	460d      	mov	r5, r1
 8012610:	4616      	mov	r6, r2
 8012612:	d50a      	bpl.n	801262a <WIDGET__DrawTriangle+0x26>
 8012614:	2c00      	cmp	r4, #0
 8012616:	db07      	blt.n	8012628 <WIDGET__DrawTriangle+0x24>
 8012618:	19a2      	adds	r2, r4, r6
 801261a:	1b31      	subs	r1, r6, r4
 801261c:	4628      	mov	r0, r5
 801261e:	f000 fdd7 	bl	80131d0 <GUI_DrawHLine>
 8012622:	3c01      	subs	r4, #1
 8012624:	443d      	add	r5, r7
 8012626:	e7f5      	b.n	8012614 <WIDGET__DrawTriangle+0x10>
 8012628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801262a:	2c00      	cmp	r4, #0
 801262c:	db07      	blt.n	801263e <WIDGET__DrawTriangle+0x3a>
 801262e:	1932      	adds	r2, r6, r4
 8012630:	1b31      	subs	r1, r6, r4
 8012632:	4628      	mov	r0, r5
 8012634:	f000 fe32 	bl	801329c <GUI_DrawVLine>
 8012638:	3c01      	subs	r4, #1
 801263a:	443d      	add	r5, r7
 801263c:	e7f5      	b.n	801262a <WIDGET__DrawTriangle+0x26>
 801263e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012640 <WIDGET__EFFECT_DrawDownRect>:
 8012640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012642:	4605      	mov	r5, r0
 8012644:	460c      	mov	r4, r1
 8012646:	b919      	cbnz	r1, 8012650 <WIDGET__EFFECT_DrawDownRect+0x10>
 8012648:	4668      	mov	r0, sp
 801264a:	f7fc f9cf 	bl	800e9ec <WM_GetClientRect>
 801264e:	466c      	mov	r4, sp
 8012650:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8012652:	071b      	lsls	r3, r3, #28
 8012654:	d505      	bpl.n	8012662 <WIDGET__EFFECT_DrawDownRect+0x22>
 8012656:	4622      	mov	r2, r4
 8012658:	4669      	mov	r1, sp
 801265a:	4628      	mov	r0, r5
 801265c:	f7ff fe7e 	bl	801235c <WIDGET__RotateRect90>
 8012660:	466c      	mov	r4, sp
 8012662:	4621      	mov	r1, r4
 8012664:	4628      	mov	r0, r5
 8012666:	f7ff fe49 	bl	80122fc <_EffectRequiresRedraw>
 801266a:	b118      	cbz	r0, 8012674 <WIDGET__EFFECT_DrawDownRect+0x34>
 801266c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801266e:	4620      	mov	r0, r4
 8012670:	691b      	ldr	r3, [r3, #16]
 8012672:	4798      	blx	r3
 8012674:	b003      	add	sp, #12
 8012676:	bd30      	pop	{r4, r5, pc}

08012678 <WIDGET__EFFECT_DrawDown>:
 8012678:	2100      	movs	r1, #0
 801267a:	f7ff bfe1 	b.w	8012640 <WIDGET__EFFECT_DrawDownRect>

0801267e <WIDGET__EFFECT_DrawUpRect>:
 801267e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8012680:	071b      	lsls	r3, r3, #28
 8012682:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012684:	4605      	mov	r5, r0
 8012686:	460c      	mov	r4, r1
 8012688:	d504      	bpl.n	8012694 <WIDGET__EFFECT_DrawUpRect+0x16>
 801268a:	460a      	mov	r2, r1
 801268c:	4669      	mov	r1, sp
 801268e:	f7ff fe65 	bl	801235c <WIDGET__RotateRect90>
 8012692:	466c      	mov	r4, sp
 8012694:	4621      	mov	r1, r4
 8012696:	4628      	mov	r0, r5
 8012698:	f7ff fe30 	bl	80122fc <_EffectRequiresRedraw>
 801269c:	b118      	cbz	r0, 80126a6 <WIDGET__EFFECT_DrawUpRect+0x28>
 801269e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80126a0:	4620      	mov	r0, r4
 80126a2:	689b      	ldr	r3, [r3, #8]
 80126a4:	4798      	blx	r3
 80126a6:	b003      	add	sp, #12
 80126a8:	bd30      	pop	{r4, r5, pc}
	...

080126ac <WIDGET_GetDefaultEffect>:
 80126ac:	4b01      	ldr	r3, [pc, #4]	; (80126b4 <WIDGET_GetDefaultEffect+0x8>)
 80126ae:	6818      	ldr	r0, [r3, #0]
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop
 80126b4:	200003f4 	.word	0x200003f4

080126b8 <WIDGET_SetEffect>:
 80126b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126ba:	2300      	movs	r3, #0
 80126bc:	9302      	str	r3, [sp, #8]
 80126be:	9103      	str	r1, [sp, #12]
 80126c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80126c4:	4669      	mov	r1, sp
 80126c6:	9300      	str	r3, [sp, #0]
 80126c8:	f7fb fae1 	bl	800dc8e <WM_SendMessage>
 80126cc:	b005      	add	sp, #20
 80126ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080126d4 <_DrawUpRect>:
 80126d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126d8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8012748 <_DrawUpRect+0x74>
 80126dc:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80126e0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80126e4:	f9b0 6000 	ldrsh.w	r6, [r0]
 80126e8:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 80126ec:	f8d8 0000 	ldr.w	r0, [r8]
 80126f0:	f7f8 fb5e 	bl	800adb0 <LCD_SetColor>
 80126f4:	463b      	mov	r3, r7
 80126f6:	4622      	mov	r2, r4
 80126f8:	4629      	mov	r1, r5
 80126fa:	4630      	mov	r0, r6
 80126fc:	f000 f920 	bl	8012940 <GUI_DrawRect>
 8012700:	3501      	adds	r5, #1
 8012702:	3601      	adds	r6, #1
 8012704:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012708:	f7f8 fb52 	bl	800adb0 <LCD_SetColor>
 801270c:	f1a7 0902 	sub.w	r9, r7, #2
 8012710:	1ea2      	subs	r2, r4, #2
 8012712:	4631      	mov	r1, r6
 8012714:	4628      	mov	r0, r5
 8012716:	f000 fd5b 	bl	80131d0 <GUI_DrawHLine>
 801271a:	464a      	mov	r2, r9
 801271c:	4629      	mov	r1, r5
 801271e:	4630      	mov	r0, r6
 8012720:	f000 fdbc 	bl	801329c <GUI_DrawVLine>
 8012724:	3c01      	subs	r4, #1
 8012726:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801272a:	f7f8 fb41 	bl	800adb0 <LCD_SetColor>
 801272e:	4622      	mov	r2, r4
 8012730:	4631      	mov	r1, r6
 8012732:	1e78      	subs	r0, r7, #1
 8012734:	f000 fd4c 	bl	80131d0 <GUI_DrawHLine>
 8012738:	464a      	mov	r2, r9
 801273a:	4629      	mov	r1, r5
 801273c:	4620      	mov	r0, r4
 801273e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012742:	f000 bdab 	b.w	801329c <GUI_DrawVLine>
 8012746:	bf00      	nop
 8012748:	200003f8 	.word	0x200003f8

0801274c <WIDGET_EFFECT_3D_DrawUp>:
 801274c:	b507      	push	{r0, r1, r2, lr}
 801274e:	4668      	mov	r0, sp
 8012750:	f7fc f94c 	bl	800e9ec <WM_GetClientRect>
 8012754:	4668      	mov	r0, sp
 8012756:	f7ff ffbd 	bl	80126d4 <_DrawUpRect>
 801275a:	b003      	add	sp, #12
 801275c:	f85d fb04 	ldr.w	pc, [sp], #4

08012760 <_DrawDownRect>:
 8012760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012764:	4d26      	ldr	r5, [pc, #152]	; (8012800 <_DrawDownRect+0xa0>)
 8012766:	f9b0 6000 	ldrsh.w	r6, [r0]
 801276a:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801276e:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8012772:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012776:	6828      	ldr	r0, [r5, #0]
 8012778:	f7f8 fb1a 	bl	800adb0 <LCD_SetColor>
 801277c:	68a8      	ldr	r0, [r5, #8]
 801277e:	f7f8 fb17 	bl	800adb0 <LCD_SetColor>
 8012782:	f104 0a01 	add.w	sl, r4, #1
 8012786:	463a      	mov	r2, r7
 8012788:	4631      	mov	r1, r6
 801278a:	4620      	mov	r0, r4
 801278c:	f000 fd20 	bl	80131d0 <GUI_DrawHLine>
 8012790:	4642      	mov	r2, r8
 8012792:	4651      	mov	r1, sl
 8012794:	4630      	mov	r0, r6
 8012796:	f000 fd81 	bl	801329c <GUI_DrawVLine>
 801279a:	f106 0b01 	add.w	fp, r6, #1
 801279e:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 80127a2:	6828      	ldr	r0, [r5, #0]
 80127a4:	f7f8 fb04 	bl	800adb0 <LCD_SetColor>
 80127a8:	464a      	mov	r2, r9
 80127aa:	4659      	mov	r1, fp
 80127ac:	4650      	mov	r0, sl
 80127ae:	f000 fd0f 	bl	80131d0 <GUI_DrawHLine>
 80127b2:	1ca3      	adds	r3, r4, #2
 80127b4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80127b8:	4619      	mov	r1, r3
 80127ba:	4622      	mov	r2, r4
 80127bc:	4658      	mov	r0, fp
 80127be:	9301      	str	r3, [sp, #4]
 80127c0:	f000 fd6c 	bl	801329c <GUI_DrawVLine>
 80127c4:	6928      	ldr	r0, [r5, #16]
 80127c6:	f7f8 faf3 	bl	800adb0 <LCD_SetColor>
 80127ca:	463a      	mov	r2, r7
 80127cc:	4659      	mov	r1, fp
 80127ce:	4640      	mov	r0, r8
 80127d0:	f000 fcfe 	bl	80131d0 <GUI_DrawHLine>
 80127d4:	4642      	mov	r2, r8
 80127d6:	4651      	mov	r1, sl
 80127d8:	4638      	mov	r0, r7
 80127da:	f000 fd5f 	bl	801329c <GUI_DrawVLine>
 80127de:	68e8      	ldr	r0, [r5, #12]
 80127e0:	f7f8 fae6 	bl	800adb0 <LCD_SetColor>
 80127e4:	464a      	mov	r2, r9
 80127e6:	1cb1      	adds	r1, r6, #2
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 fcf1 	bl	80131d0 <GUI_DrawHLine>
 80127ee:	9b01      	ldr	r3, [sp, #4]
 80127f0:	4622      	mov	r2, r4
 80127f2:	4619      	mov	r1, r3
 80127f4:	4648      	mov	r0, r9
 80127f6:	b003      	add	sp, #12
 80127f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127fc:	f000 bd4e 	b.w	801329c <GUI_DrawVLine>
 8012800:	200003f8 	.word	0x200003f8

08012804 <_DrawDown>:
 8012804:	b507      	push	{r0, r1, r2, lr}
 8012806:	4668      	mov	r0, sp
 8012808:	f7fc f8f0 	bl	800e9ec <WM_GetClientRect>
 801280c:	4668      	mov	r0, sp
 801280e:	f7ff ffa7 	bl	8012760 <_DrawDownRect>
 8012812:	b003      	add	sp, #12
 8012814:	f85d fb04 	ldr.w	pc, [sp], #4

08012818 <_DrawDownRect>:
 8012818:	b510      	push	{r4, lr}
 801281a:	b09e      	sub	sp, #120	; 0x78
 801281c:	4604      	mov	r4, r0
 801281e:	a801      	add	r0, sp, #4
 8012820:	f7f6 f8c0 	bl	80089a4 <GUI_SaveContext_W>
 8012824:	4b09      	ldr	r3, [pc, #36]	; (801284c <_DrawDownRect+0x34>)
 8012826:	6818      	ldr	r0, [r3, #0]
 8012828:	f7f8 fac2 	bl	800adb0 <LCD_SetColor>
 801282c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012830:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012834:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012838:	f9b4 0000 	ldrsh.w	r0, [r4]
 801283c:	f000 f880 	bl	8012940 <GUI_DrawRect>
 8012840:	a801      	add	r0, sp, #4
 8012842:	f7f6 f8b9 	bl	80089b8 <GUI_RestoreContext>
 8012846:	b01e      	add	sp, #120	; 0x78
 8012848:	bd10      	pop	{r4, pc}
 801284a:	bf00      	nop
 801284c:	20000ac0 	.word	0x20000ac0

08012850 <_DrawUpRect>:
 8012850:	f7ff bfe2 	b.w	8012818 <_DrawDownRect>

08012854 <_DrawDown>:
 8012854:	b507      	push	{r0, r1, r2, lr}
 8012856:	4668      	mov	r0, sp
 8012858:	f7fc f8c8 	bl	800e9ec <WM_GetClientRect>
 801285c:	4668      	mov	r0, sp
 801285e:	f7ff ffdb 	bl	8012818 <_DrawDownRect>
 8012862:	b003      	add	sp, #12
 8012864:	f85d fb04 	ldr.w	pc, [sp], #4

08012868 <_DrawUp>:
 8012868:	f7ff bff4 	b.w	8012854 <_DrawDown>

0801286c <WINDOW_SetDefaultBkColor>:
 801286c:	4b01      	ldr	r3, [pc, #4]	; (8012874 <WINDOW_SetDefaultBkColor+0x8>)
 801286e:	6018      	str	r0, [r3, #0]
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	2000040c 	.word	0x2000040c

08012878 <_GetIndexMask_0>:
 8012878:	b508      	push	{r3, lr}
 801287a:	f7f8 fd4b 	bl	800b314 <LCD_GetNumColors>
 801287e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8012882:	d010      	beq.n	80128a6 <_GetIndexMask_0+0x2e>
 8012884:	287f      	cmp	r0, #127	; 0x7f
 8012886:	d810      	bhi.n	80128aa <_GetIndexMask_0+0x32>
 8012888:	283f      	cmp	r0, #63	; 0x3f
 801288a:	d810      	bhi.n	80128ae <_GetIndexMask_0+0x36>
 801288c:	281f      	cmp	r0, #31
 801288e:	d810      	bhi.n	80128b2 <_GetIndexMask_0+0x3a>
 8012890:	280f      	cmp	r0, #15
 8012892:	d810      	bhi.n	80128b6 <_GetIndexMask_0+0x3e>
 8012894:	2807      	cmp	r0, #7
 8012896:	d810      	bhi.n	80128ba <_GetIndexMask_0+0x42>
 8012898:	2803      	cmp	r0, #3
 801289a:	d810      	bhi.n	80128be <_GetIndexMask_0+0x46>
 801289c:	2801      	cmp	r0, #1
 801289e:	bf94      	ite	ls
 80128a0:	2000      	movls	r0, #0
 80128a2:	2001      	movhi	r0, #1
 80128a4:	e00c      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128a6:	2008      	movs	r0, #8
 80128a8:	e00a      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128aa:	2007      	movs	r0, #7
 80128ac:	e008      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128ae:	2006      	movs	r0, #6
 80128b0:	e006      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128b2:	2005      	movs	r0, #5
 80128b4:	e004      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128b6:	2004      	movs	r0, #4
 80128b8:	e002      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128ba:	2003      	movs	r0, #3
 80128bc:	e000      	b.n	80128c0 <_GetIndexMask_0+0x48>
 80128be:	2002      	movs	r0, #2
 80128c0:	2301      	movs	r3, #1
 80128c2:	fa03 f000 	lsl.w	r0, r3, r0
 80128c6:	3801      	subs	r0, #1
 80128c8:	bd08      	pop	{r3, pc}

080128ca <_Index2Color_0>:
 80128ca:	b538      	push	{r3, r4, r5, lr}
 80128cc:	4604      	mov	r4, r0
 80128ce:	f7f8 fd21 	bl	800b314 <LCD_GetNumColors>
 80128d2:	4605      	mov	r5, r0
 80128d4:	f7f8 fd3c 	bl	800b350 <LCD_GetPalette>
 80128d8:	42a5      	cmp	r5, r4
 80128da:	d903      	bls.n	80128e4 <_Index2Color_0+0x1a>
 80128dc:	b118      	cbz	r0, 80128e6 <_Index2Color_0+0x1c>
 80128de:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
 80128e4:	2000      	movs	r0, #0
 80128e6:	bd38      	pop	{r3, r4, r5, pc}

080128e8 <_Color2Index_0>:
 80128e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128ec:	4681      	mov	r9, r0
 80128ee:	f7f8 fd11 	bl	800b314 <LCD_GetNumColors>
 80128f2:	4607      	mov	r7, r0
 80128f4:	f7f8 fd2c 	bl	800b350 <LCD_GetPalette>
 80128f8:	4606      	mov	r6, r0
 80128fa:	b1e0      	cbz	r0, 8012936 <_Color2Index_0+0x4e>
 80128fc:	2000      	movs	r0, #0
 80128fe:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 8012902:	454b      	cmp	r3, r9
 8012904:	d017      	beq.n	8012936 <_Color2Index_0+0x4e>
 8012906:	3001      	adds	r0, #1
 8012908:	4287      	cmp	r7, r0
 801290a:	dcf8      	bgt.n	80128fe <_Color2Index_0+0x16>
 801290c:	2400      	movs	r4, #0
 801290e:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8012912:	4625      	mov	r5, r4
 8012914:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 8012918:	4648      	mov	r0, r9
 801291a:	f7f5 ff07 	bl	800872c <GUI_CalcColorDist>
 801291e:	4580      	cmp	r8, r0
 8012920:	bf88      	it	hi
 8012922:	462c      	movhi	r4, r5
 8012924:	f105 0501 	add.w	r5, r5, #1
 8012928:	bf88      	it	hi
 801292a:	4680      	movhi	r8, r0
 801292c:	42af      	cmp	r7, r5
 801292e:	dcf1      	bgt.n	8012914 <_Color2Index_0+0x2c>
 8012930:	4620      	mov	r0, r4
 8012932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801293a <LCD_Index2Color_8888>:
 801293a:	4770      	bx	lr

0801293c <LCD_Index2Color_888>:
 801293c:	4770      	bx	lr
	...

08012940 <GUI_DrawRect>:
 8012940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012944:	4606      	mov	r6, r0
 8012946:	461f      	mov	r7, r3
 8012948:	4688      	mov	r8, r1
 801294a:	4691      	mov	r9, r2
 801294c:	f7f7 fa06 	bl	8009d5c <GUI_Lock>
 8012950:	4b1e      	ldr	r3, [pc, #120]	; (80129cc <GUI_DrawRect+0x8c>)
 8012952:	681c      	ldr	r4, [r3, #0]
 8012954:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8012956:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012958:	7e24      	ldrb	r4, [r4, #24]
 801295a:	3c01      	subs	r4, #1
 801295c:	b2a4      	uxth	r4, r4
 801295e:	442e      	add	r6, r5
 8012960:	1b33      	subs	r3, r6, r4
 8012962:	444d      	add	r5, r9
 8012964:	4480      	add	r8, r0
 8012966:	4407      	add	r7, r0
 8012968:	f8ad 3000 	strh.w	r3, [sp]
 801296c:	1963      	adds	r3, r4, r5
 801296e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8012972:	4668      	mov	r0, sp
 8012974:	ebc4 0308 	rsb	r3, r4, r8
 8012978:	443c      	add	r4, r7
 801297a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801297e:	f8ad 4006 	strh.w	r4, [sp, #6]
 8012982:	f7fb fd73 	bl	800e46c <WM__InitIVRSearch>
 8012986:	b920      	cbnz	r0, 8012992 <GUI_DrawRect+0x52>
 8012988:	f7f7 f9de 	bl	8009d48 <GUI_Unlock>
 801298c:	b003      	add	sp, #12
 801298e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012992:	f108 0401 	add.w	r4, r8, #1
 8012996:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 801299a:	462a      	mov	r2, r5
 801299c:	4641      	mov	r1, r8
 801299e:	4630      	mov	r0, r6
 80129a0:	f7f7 fed0 	bl	800a744 <LCD_DrawHLine>
 80129a4:	462a      	mov	r2, r5
 80129a6:	4639      	mov	r1, r7
 80129a8:	4630      	mov	r0, r6
 80129aa:	f7f7 fecb 	bl	800a744 <LCD_DrawHLine>
 80129ae:	464a      	mov	r2, r9
 80129b0:	4621      	mov	r1, r4
 80129b2:	4630      	mov	r0, r6
 80129b4:	f7f7 feee 	bl	800a794 <LCD_DrawVLine>
 80129b8:	464a      	mov	r2, r9
 80129ba:	4621      	mov	r1, r4
 80129bc:	4628      	mov	r0, r5
 80129be:	f7f7 fee9 	bl	800a794 <LCD_DrawVLine>
 80129c2:	f7fb fc91 	bl	800e2e8 <WM__GetNextIVR>
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d1e7      	bne.n	801299a <GUI_DrawRect+0x5a>
 80129ca:	e7dd      	b.n	8012988 <GUI_DrawRect+0x48>
 80129cc:	20000014 	.word	0x20000014

080129d0 <GUI_GetYAdjust>:
 80129d0:	b510      	push	{r4, lr}
 80129d2:	f7f7 f9c3 	bl	8009d5c <GUI_Lock>
 80129d6:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <GUI_GetYAdjust+0x38>)
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 80129dc:	f003 030c 	and.w	r3, r3, #12
 80129e0:	2b08      	cmp	r3, #8
 80129e2:	d007      	beq.n	80129f4 <GUI_GetYAdjust+0x24>
 80129e4:	2b0c      	cmp	r3, #12
 80129e6:	d005      	beq.n	80129f4 <GUI_GetYAdjust+0x24>
 80129e8:	2b04      	cmp	r3, #4
 80129ea:	d107      	bne.n	80129fc <GUI_GetYAdjust+0x2c>
 80129ec:	69d3      	ldr	r3, [r2, #28]
 80129ee:	7e1c      	ldrb	r4, [r3, #24]
 80129f0:	3c01      	subs	r4, #1
 80129f2:	e004      	b.n	80129fe <GUI_GetYAdjust+0x2e>
 80129f4:	69d3      	ldr	r3, [r2, #28]
 80129f6:	7e1c      	ldrb	r4, [r3, #24]
 80129f8:	0864      	lsrs	r4, r4, #1
 80129fa:	e000      	b.n	80129fe <GUI_GetYAdjust+0x2e>
 80129fc:	2400      	movs	r4, #0
 80129fe:	f7f7 f9a3 	bl	8009d48 <GUI_Unlock>
 8012a02:	4620      	mov	r0, r4
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	bf00      	nop
 8012a08:	20000014 	.word	0x20000014

08012a0c <GUI_GetFontDistY>:
 8012a0c:	b510      	push	{r4, lr}
 8012a0e:	f7f7 f9a5 	bl	8009d5c <GUI_Lock>
 8012a12:	4b04      	ldr	r3, [pc, #16]	; (8012a24 <GUI_GetFontDistY+0x18>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	69db      	ldr	r3, [r3, #28]
 8012a18:	7e5c      	ldrb	r4, [r3, #25]
 8012a1a:	f7f7 f995 	bl	8009d48 <GUI_Unlock>
 8012a1e:	4620      	mov	r0, r4
 8012a20:	bd10      	pop	{r4, pc}
 8012a22:	bf00      	nop
 8012a24:	20000014 	.word	0x20000014

08012a28 <GUI_GetCharDistX>:
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	f7f7 f996 	bl	8009d5c <GUI_Lock>
 8012a30:	4b05      	ldr	r3, [pc, #20]	; (8012a48 <GUI_GetCharDistX+0x20>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	69db      	ldr	r3, [r3, #28]
 8012a36:	2100      	movs	r1, #0
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	4798      	blx	r3
 8012a3e:	4604      	mov	r4, r0
 8012a40:	f7f7 f982 	bl	8009d48 <GUI_Unlock>
 8012a44:	4620      	mov	r0, r4
 8012a46:	bd10      	pop	{r4, pc}
 8012a48:	20000014 	.word	0x20000014

08012a4c <GUI_GetCharDistXEx>:
 8012a4c:	b538      	push	{r3, r4, r5, lr}
 8012a4e:	4604      	mov	r4, r0
 8012a50:	460d      	mov	r5, r1
 8012a52:	f7f7 f983 	bl	8009d5c <GUI_Lock>
 8012a56:	4b06      	ldr	r3, [pc, #24]	; (8012a70 <GUI_GetCharDistXEx+0x24>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	69db      	ldr	r3, [r3, #28]
 8012a5c:	4629      	mov	r1, r5
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	4620      	mov	r0, r4
 8012a62:	4798      	blx	r3
 8012a64:	4604      	mov	r4, r0
 8012a66:	f7f7 f96f 	bl	8009d48 <GUI_Unlock>
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	bd38      	pop	{r3, r4, r5, pc}
 8012a6e:	bf00      	nop
 8012a70:	20000014 	.word	0x20000014

08012a74 <_Log2VisBuffered>:
 8012a74:	4770      	bx	lr
	...

08012a78 <_DispLine>:
 8012a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a7a:	ab02      	add	r3, sp, #8
 8012a7c:	4615      	mov	r5, r2
 8012a7e:	f843 1d08 	str.w	r1, [r3, #-8]!
 8012a82:	4a20      	ldr	r2, [pc, #128]	; (8012b04 <_DispLine+0x8c>)
 8012a84:	9001      	str	r0, [sp, #4]
 8012a86:	4619      	mov	r1, r3
 8012a88:	6812      	ldr	r2, [r2, #0]
 8012a8a:	4c1f      	ldr	r4, [pc, #124]	; (8012b08 <_DispLine+0x90>)
 8012a8c:	4790      	blx	r2
 8012a8e:	6823      	ldr	r3, [r4, #0]
 8012a90:	9001      	str	r0, [sp, #4]
 8012a92:	6958      	ldr	r0, [r3, #20]
 8012a94:	b940      	cbnz	r0, 8012aa8 <_DispLine+0x30>
 8012a96:	2001      	movs	r0, #1
 8012a98:	f001 fe3a 	bl	8014710 <GUI__ManageCache>
 8012a9c:	6822      	ldr	r2, [r4, #0]
 8012a9e:	69d3      	ldr	r3, [r2, #28]
 8012aa0:	695b      	ldr	r3, [r3, #20]
 8012aa2:	b93b      	cbnz	r3, 8012ab4 <_DispLine+0x3c>
 8012aa4:	4d19      	ldr	r5, [pc, #100]	; (8012b0c <_DispLine+0x94>)
 8012aa6:	e022      	b.n	8012aee <_DispLine+0x76>
 8012aa8:	4629      	mov	r1, r5
 8012aaa:	f7f5 ff5d 	bl	8008968 <GUI_RectsIntersect>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d1f1      	bne.n	8012a96 <_DispLine+0x1e>
 8012ab2:	e024      	b.n	8012afe <_DispLine+0x86>
 8012ab4:	4c16      	ldr	r4, [pc, #88]	; (8012b10 <_DispLine+0x98>)
 8012ab6:	689b      	ldr	r3, [r3, #8]
 8012ab8:	6821      	ldr	r1, [r4, #0]
 8012aba:	b141      	cbz	r1, 8012ace <_DispLine+0x56>
 8012abc:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 8012ac0:	9801      	ldr	r0, [sp, #4]
 8012ac2:	9900      	ldr	r1, [sp, #0]
 8012ac4:	4798      	blx	r3
 8012ac6:	6823      	ldr	r3, [r4, #0]
 8012ac8:	4628      	mov	r0, r5
 8012aca:	4798      	blx	r3
 8012acc:	e014      	b.n	8012af8 <_DispLine+0x80>
 8012ace:	9900      	ldr	r1, [sp, #0]
 8012ad0:	9801      	ldr	r0, [sp, #4]
 8012ad2:	4798      	blx	r3
 8012ad4:	e010      	b.n	8012af8 <_DispLine+0x80>
 8012ad6:	a801      	add	r0, sp, #4
 8012ad8:	f7f7 fa10 	bl	8009efc <GUI_UC__GetCharCodeInc>
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	69db      	ldr	r3, [r3, #28]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	4606      	mov	r6, r0
 8012ae4:	4798      	blx	r3
 8012ae6:	682b      	ldr	r3, [r5, #0]
 8012ae8:	b10b      	cbz	r3, 8012aee <_DispLine+0x76>
 8012aea:	4630      	mov	r0, r6
 8012aec:	4798      	blx	r3
 8012aee:	9b00      	ldr	r3, [sp, #0]
 8012af0:	3b01      	subs	r3, #1
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	9300      	str	r3, [sp, #0]
 8012af6:	daee      	bge.n	8012ad6 <_DispLine+0x5e>
 8012af8:	2000      	movs	r0, #0
 8012afa:	f001 fe09 	bl	8014710 <GUI__ManageCache>
 8012afe:	b002      	add	sp, #8
 8012b00:	bd70      	pop	{r4, r5, r6, pc}
 8012b02:	bf00      	nop
 8012b04:	20000410 	.word	0x20000410
 8012b08:	20000014 	.word	0x20000014
 8012b0c:	20027b8c 	.word	0x20027b8c
 8012b10:	20027b80 	.word	0x20027b80

08012b14 <GUI__GetLineNumChars>:
 8012b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b16:	460d      	mov	r5, r1
 8012b18:	9001      	str	r0, [sp, #4]
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	b188      	cbz	r0, 8012b42 <GUI__GetLineNumChars+0x2e>
 8012b1e:	4b0a      	ldr	r3, [pc, #40]	; (8012b48 <GUI__GetLineNumChars+0x34>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	69db      	ldr	r3, [r3, #28]
 8012b24:	695c      	ldr	r4, [r3, #20]
 8012b26:	b154      	cbz	r4, 8012b3e <GUI__GetLineNumChars+0x2a>
 8012b28:	6864      	ldr	r4, [r4, #4]
 8012b2a:	b144      	cbz	r4, 8012b3e <GUI__GetLineNumChars+0x2a>
 8012b2c:	47a0      	blx	r4
 8012b2e:	e009      	b.n	8012b44 <GUI__GetLineNumChars+0x30>
 8012b30:	a801      	add	r0, sp, #4
 8012b32:	f7f7 f9e3 	bl	8009efc <GUI_UC__GetCharCodeInc>
 8012b36:	b120      	cbz	r0, 8012b42 <GUI__GetLineNumChars+0x2e>
 8012b38:	280a      	cmp	r0, #10
 8012b3a:	d002      	beq.n	8012b42 <GUI__GetLineNumChars+0x2e>
 8012b3c:	3401      	adds	r4, #1
 8012b3e:	42ac      	cmp	r4, r5
 8012b40:	dbf6      	blt.n	8012b30 <GUI__GetLineNumChars+0x1c>
 8012b42:	4620      	mov	r0, r4
 8012b44:	b003      	add	sp, #12
 8012b46:	bd30      	pop	{r4, r5, pc}
 8012b48:	20000014 	.word	0x20000014

08012b4c <GUI__GetOverlap>:
 8012b4c:	b513      	push	{r0, r1, r4, lr}
 8012b4e:	a902      	add	r1, sp, #8
 8012b50:	2400      	movs	r4, #0
 8012b52:	f841 4d04 	str.w	r4, [r1, #-4]!
 8012b56:	f7ff ff79 	bl	8012a4c <GUI_GetCharDistXEx>
 8012b5a:	9b01      	ldr	r3, [sp, #4]
 8012b5c:	4298      	cmp	r0, r3
 8012b5e:	bfb4      	ite	lt
 8012b60:	1a18      	sublt	r0, r3, r0
 8012b62:	4620      	movge	r0, r4
 8012b64:	b002      	add	sp, #8
 8012b66:	bd10      	pop	{r4, pc}

08012b68 <GUI__GetLineDistX>:
 8012b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b6a:	ab02      	add	r3, sp, #8
 8012b6c:	4a14      	ldr	r2, [pc, #80]	; (8012bc0 <GUI__GetLineDistX+0x58>)
 8012b6e:	f843 1d08 	str.w	r1, [r3, #-8]!
 8012b72:	9001      	str	r0, [sp, #4]
 8012b74:	6812      	ldr	r2, [r2, #0]
 8012b76:	4619      	mov	r1, r3
 8012b78:	4790      	blx	r2
 8012b7a:	9001      	str	r0, [sp, #4]
 8012b7c:	b1e8      	cbz	r0, 8012bba <GUI__GetLineDistX+0x52>
 8012b7e:	4b11      	ldr	r3, [pc, #68]	; (8012bc4 <GUI__GetLineDistX+0x5c>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	69db      	ldr	r3, [r3, #28]
 8012b84:	695c      	ldr	r4, [r3, #20]
 8012b86:	b10c      	cbz	r4, 8012b8c <GUI__GetLineDistX+0x24>
 8012b88:	6824      	ldr	r4, [r4, #0]
 8012b8a:	b90c      	cbnz	r4, 8012b90 <GUI__GetLineDistX+0x28>
 8012b8c:	4625      	mov	r5, r4
 8012b8e:	e002      	b.n	8012b96 <GUI__GetLineDistX+0x2e>
 8012b90:	9900      	ldr	r1, [sp, #0]
 8012b92:	47a0      	blx	r4
 8012b94:	e011      	b.n	8012bba <GUI__GetLineDistX+0x52>
 8012b96:	9b00      	ldr	r3, [sp, #0]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	9300      	str	r3, [sp, #0]
 8012b9e:	db07      	blt.n	8012bb0 <GUI__GetLineDistX+0x48>
 8012ba0:	a801      	add	r0, sp, #4
 8012ba2:	f7f7 f9ab 	bl	8009efc <GUI_UC__GetCharCodeInc>
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	f7ff ff3e 	bl	8012a28 <GUI_GetCharDistX>
 8012bac:	4405      	add	r5, r0
 8012bae:	e7f2      	b.n	8012b96 <GUI__GetLineDistX+0x2e>
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f7ff ffcb 	bl	8012b4c <GUI__GetOverlap>
 8012bb6:	4428      	add	r0, r5
 8012bb8:	e7ff      	b.n	8012bba <GUI__GetLineDistX+0x52>
 8012bba:	b003      	add	sp, #12
 8012bbc:	bd30      	pop	{r4, r5, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20000410 	.word	0x20000410
 8012bc4:	20000014 	.word	0x20000014

08012bc8 <GUI__DispLine>:
 8012bc8:	4b27      	ldr	r3, [pc, #156]	; (8012c68 <GUI__DispLine+0xa0>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bce:	4605      	mov	r5, r0
 8012bd0:	460e      	mov	r6, r1
 8012bd2:	b163      	cbz	r3, 8012bee <GUI__DispLine+0x26>
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	f7fb fc49 	bl	800e46c <WM__InitIVRSearch>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d041      	beq.n	8012c62 <GUI__DispLine+0x9a>
 8012bde:	466a      	mov	r2, sp
 8012be0:	4631      	mov	r1, r6
 8012be2:	4628      	mov	r0, r5
 8012be4:	f7ff ff48 	bl	8012a78 <_DispLine>
 8012be8:	f7fb fb7e 	bl	800e2e8 <WM__GetNextIVR>
 8012bec:	e7f5      	b.n	8012bda <GUI__DispLine+0x12>
 8012bee:	6810      	ldr	r0, [r2, #0]
 8012bf0:	6851      	ldr	r1, [r2, #4]
 8012bf2:	4c1e      	ldr	r4, [pc, #120]	; (8012c6c <GUI__DispLine+0xa4>)
 8012bf4:	466b      	mov	r3, sp
 8012bf6:	c303      	stmia	r3!, {r0, r1}
 8012bf8:	6822      	ldr	r2, [r4, #0]
 8012bfa:	f8bd 3000 	ldrh.w	r3, [sp]
 8012bfe:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 8012c02:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8012c06:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8012c0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8012c0e:	443b      	add	r3, r7
 8012c10:	f8ad 3000 	strh.w	r3, [sp]
 8012c14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012c18:	4401      	add	r1, r0
 8012c1a:	4403      	add	r3, r0
 8012c1c:	443a      	add	r2, r7
 8012c1e:	4668      	mov	r0, sp
 8012c20:	f8ad 1002 	strh.w	r1, [sp, #2]
 8012c24:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012c28:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012c2c:	f7fb fc1e 	bl	800e46c <WM__InitIVRSearch>
 8012c30:	6823      	ldr	r3, [r4, #0]
 8012c32:	b940      	cbnz	r0, 8012c46 <GUI__DispLine+0x7e>
 8012c34:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012c36:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8012c38:	1a52      	subs	r2, r2, r1
 8012c3a:	845a      	strh	r2, [r3, #34]	; 0x22
 8012c3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012c3e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8012c40:	1a52      	subs	r2, r2, r1
 8012c42:	849a      	strh	r2, [r3, #36]	; 0x24
 8012c44:	e00d      	b.n	8012c62 <GUI__DispLine+0x9a>
 8012c46:	f8bd 2000 	ldrh.w	r2, [sp]
 8012c4a:	845a      	strh	r2, [r3, #34]	; 0x22
 8012c4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c50:	849a      	strh	r2, [r3, #36]	; 0x24
 8012c52:	4631      	mov	r1, r6
 8012c54:	466a      	mov	r2, sp
 8012c56:	4628      	mov	r0, r5
 8012c58:	f7ff ff0e 	bl	8012a78 <_DispLine>
 8012c5c:	f7fb fb44 	bl	800e2e8 <WM__GetNextIVR>
 8012c60:	e7e6      	b.n	8012c30 <GUI__DispLine+0x68>
 8012c62:	b003      	add	sp, #12
 8012c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c66:	bf00      	nop
 8012c68:	20027b6c 	.word	0x20027b6c
 8012c6c:	20000014 	.word	0x20000014

08012c70 <GUIMONO_DispChar>:
 8012c70:	4b4d      	ldr	r3, [pc, #308]	; (8012da8 <GUIMONO_DispChar+0x138>)
 8012c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c76:	681a      	ldr	r2, [r3, #0]
 8012c78:	69d1      	ldr	r1, [r2, #28]
 8012c7a:	69cc      	ldr	r4, [r1, #28]
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	4283      	cmp	r3, r0
 8012c80:	b08b      	sub	sp, #44	; 0x2c
 8012c82:	d808      	bhi.n	8012c96 <GUIMONO_DispChar+0x26>
 8012c84:	89e5      	ldrh	r5, [r4, #14]
 8012c86:	4285      	cmp	r5, r0
 8012c88:	d305      	bcc.n	8012c96 <GUIMONO_DispChar+0x26>
 8012c8a:	6825      	ldr	r5, [r4, #0]
 8012c8c:	9506      	str	r5, [sp, #24]
 8012c8e:	1ac3      	subs	r3, r0, r3
 8012c90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012c94:	e013      	b.n	8012cbe <GUIMONO_DispChar+0x4e>
 8012c96:	68a3      	ldr	r3, [r4, #8]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d07c      	beq.n	8012d96 <GUIMONO_DispChar+0x126>
 8012c9c:	881d      	ldrh	r5, [r3, #0]
 8012c9e:	42a8      	cmp	r0, r5
 8012ca0:	d379      	bcc.n	8012d96 <GUIMONO_DispChar+0x126>
 8012ca2:	885e      	ldrh	r6, [r3, #2]
 8012ca4:	4286      	cmp	r6, r0
 8012ca6:	d376      	bcc.n	8012d96 <GUIMONO_DispChar+0x126>
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	6866      	ldr	r6, [r4, #4]
 8012cac:	9606      	str	r6, [sp, #24]
 8012cae:	1b40      	subs	r0, r0, r5
 8012cb0:	b280      	uxth	r0, r0
 8012cb2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8012cb6:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8012cba:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8012cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8012cc0:	1c58      	adds	r0, r3, #1
 8012cc2:	d068      	beq.n	8012d96 <GUIMONO_DispChar+0x126>
 8012cc4:	f891 b018 	ldrb.w	fp, [r1, #24]
 8012cc8:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8012ccc:	7ca1      	ldrb	r1, [r4, #18]
 8012cce:	4d36      	ldr	r5, [pc, #216]	; (8012da8 <GUIMONO_DispChar+0x138>)
 8012cd0:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8012cd4:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8012cd8:	f894 a010 	ldrb.w	sl, [r4, #16]
 8012cdc:	fb1b f301 	smulbb	r3, fp, r1
 8012ce0:	4648      	mov	r0, r9
 8012ce2:	9307      	str	r3, [sp, #28]
 8012ce4:	f7f7 fcf8 	bl	800a6d8 <LCD_SetDrawMode>
 8012ce8:	6829      	ldr	r1, [r5, #0]
 8012cea:	9b07      	ldr	r3, [sp, #28]
 8012cec:	69ca      	ldr	r2, [r1, #28]
 8012cee:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8012cf0:	9105      	str	r1, [sp, #20]
 8012cf2:	9008      	str	r0, [sp, #32]
 8012cf4:	9906      	ldr	r1, [sp, #24]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cfa:	fb00 1003 	mla	r0, r0, r3, r1
 8012cfe:	9004      	str	r0, [sp, #16]
 8012d00:	7ca3      	ldrb	r3, [r4, #18]
 8012d02:	9303      	str	r3, [sp, #12]
 8012d04:	2301      	movs	r3, #1
 8012d06:	9302      	str	r3, [sp, #8]
 8012d08:	7ed3      	ldrb	r3, [r2, #27]
 8012d0a:	9301      	str	r3, [sp, #4]
 8012d0c:	7e93      	ldrb	r3, [r2, #26]
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	4652      	mov	r2, sl
 8012d12:	465b      	mov	r3, fp
 8012d14:	4641      	mov	r1, r8
 8012d16:	4638      	mov	r0, r7
 8012d18:	f7f7 fe7e 	bl	800aa18 <LCD_DrawBitmap>
 8012d1c:	1c73      	adds	r3, r6, #1
 8012d1e:	d01a      	beq.n	8012d56 <GUIMONO_DispChar+0xe6>
 8012d20:	f049 0002 	orr.w	r0, r9, #2
 8012d24:	f7f7 fcd8 	bl	800a6d8 <LCD_SetDrawMode>
 8012d28:	682a      	ldr	r2, [r5, #0]
 8012d2a:	9906      	ldr	r1, [sp, #24]
 8012d2c:	69d3      	ldr	r3, [r2, #28]
 8012d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012d30:	9205      	str	r2, [sp, #20]
 8012d32:	9a07      	ldr	r2, [sp, #28]
 8012d34:	fb02 1606 	mla	r6, r2, r6, r1
 8012d38:	9604      	str	r6, [sp, #16]
 8012d3a:	7ca2      	ldrb	r2, [r4, #18]
 8012d3c:	9203      	str	r2, [sp, #12]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	9202      	str	r2, [sp, #8]
 8012d42:	7eda      	ldrb	r2, [r3, #27]
 8012d44:	9201      	str	r2, [sp, #4]
 8012d46:	7e9b      	ldrb	r3, [r3, #26]
 8012d48:	9300      	str	r3, [sp, #0]
 8012d4a:	4652      	mov	r2, sl
 8012d4c:	465b      	mov	r3, fp
 8012d4e:	4641      	mov	r1, r8
 8012d50:	4638      	mov	r0, r7
 8012d52:	f7f7 fe61 	bl	800aa18 <LCD_DrawBitmap>
 8012d56:	682b      	ldr	r3, [r5, #0]
 8012d58:	69db      	ldr	r3, [r3, #28]
 8012d5a:	7e5a      	ldrb	r2, [r3, #25]
 8012d5c:	7e1b      	ldrb	r3, [r3, #24]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d915      	bls.n	8012d8e <GUIMONO_DispChar+0x11e>
 8012d62:	f1b9 0f02 	cmp.w	r9, #2
 8012d66:	d012      	beq.n	8012d8e <GUIMONO_DispChar+0x11e>
 8012d68:	f089 0004 	eor.w	r0, r9, #4
 8012d6c:	f7f7 fcb4 	bl	800a6d8 <LCD_SetDrawMode>
 8012d70:	4b0d      	ldr	r3, [pc, #52]	; (8012da8 <GUIMONO_DispChar+0x138>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	69db      	ldr	r3, [r3, #28]
 8012d76:	7e18      	ldrb	r0, [r3, #24]
 8012d78:	7ed9      	ldrb	r1, [r3, #27]
 8012d7a:	7e9a      	ldrb	r2, [r3, #26]
 8012d7c:	7e5b      	ldrb	r3, [r3, #25]
 8012d7e:	fb00 8101 	mla	r1, r0, r1, r8
 8012d82:	4443      	add	r3, r8
 8012d84:	fb0a 7202 	mla	r2, sl, r2, r7
 8012d88:	4638      	mov	r0, r7
 8012d8a:	f7f7 fd2d 	bl	800a7e8 <LCD_FillRect>
 8012d8e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8012d92:	f7f7 fca1 	bl	800a6d8 <LCD_SetDrawMode>
 8012d96:	4b04      	ldr	r3, [pc, #16]	; (8012da8 <GUIMONO_DispChar+0x138>)
 8012d98:	7c61      	ldrb	r1, [r4, #17]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 8012d9e:	440b      	add	r3, r1
 8012da0:	8453      	strh	r3, [r2, #34]	; 0x22
 8012da2:	b00b      	add	sp, #44	; 0x2c
 8012da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da8:	20000014 	.word	0x20000014

08012dac <GUIMONO_GetCharDistX>:
 8012dac:	4b04      	ldr	r3, [pc, #16]	; (8012dc0 <GUIMONO_GetCharDistX+0x14>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	69db      	ldr	r3, [r3, #28]
 8012db2:	69db      	ldr	r3, [r3, #28]
 8012db4:	b109      	cbz	r1, 8012dba <GUIMONO_GetCharDistX+0xe>
 8012db6:	7c1a      	ldrb	r2, [r3, #16]
 8012db8:	600a      	str	r2, [r1, #0]
 8012dba:	7c58      	ldrb	r0, [r3, #17]
 8012dbc:	4770      	bx	lr
 8012dbe:	bf00      	nop
 8012dc0:	20000014 	.word	0x20000014

08012dc4 <GUIMONO_GetFontInfo>:
 8012dc4:	2302      	movs	r3, #2
 8012dc6:	800b      	strh	r3, [r1, #0]
 8012dc8:	4770      	bx	lr

08012dca <GUIMONO_IsInFont>:
 8012dca:	69c3      	ldr	r3, [r0, #28]
 8012dcc:	899a      	ldrh	r2, [r3, #12]
 8012dce:	428a      	cmp	r2, r1
 8012dd0:	d802      	bhi.n	8012dd8 <GUIMONO_IsInFont+0xe>
 8012dd2:	89da      	ldrh	r2, [r3, #14]
 8012dd4:	428a      	cmp	r2, r1
 8012dd6:	d20f      	bcs.n	8012df8 <GUIMONO_IsInFont+0x2e>
 8012dd8:	6898      	ldr	r0, [r3, #8]
 8012dda:	b180      	cbz	r0, 8012dfe <GUIMONO_IsInFont+0x34>
 8012ddc:	8803      	ldrh	r3, [r0, #0]
 8012dde:	4299      	cmp	r1, r3
 8012de0:	d30c      	bcc.n	8012dfc <GUIMONO_IsInFont+0x32>
 8012de2:	8842      	ldrh	r2, [r0, #2]
 8012de4:	428a      	cmp	r2, r1
 8012de6:	d309      	bcc.n	8012dfc <GUIMONO_IsInFont+0x32>
 8012de8:	1ac9      	subs	r1, r1, r3
 8012dea:	6843      	ldr	r3, [r0, #4]
 8012dec:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8012df0:	43c0      	mvns	r0, r0
 8012df2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8012df6:	4770      	bx	lr
 8012df8:	2001      	movs	r0, #1
 8012dfa:	4770      	bx	lr
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	4770      	bx	lr

08012e00 <GUIPROP__FindChar>:
 8012e00:	b138      	cbz	r0, 8012e12 <GUIPROP__FindChar+0x12>
 8012e02:	8803      	ldrh	r3, [r0, #0]
 8012e04:	428b      	cmp	r3, r1
 8012e06:	d802      	bhi.n	8012e0e <GUIPROP__FindChar+0xe>
 8012e08:	8843      	ldrh	r3, [r0, #2]
 8012e0a:	428b      	cmp	r3, r1
 8012e0c:	d201      	bcs.n	8012e12 <GUIPROP__FindChar+0x12>
 8012e0e:	6880      	ldr	r0, [r0, #8]
 8012e10:	e7f6      	b.n	8012e00 <GUIPROP__FindChar>
 8012e12:	4770      	bx	lr

08012e14 <GUIPROP_DispChar>:
 8012e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e18:	4c38      	ldr	r4, [pc, #224]	; (8012efc <GUIPROP_DispChar+0xe8>)
 8012e1a:	6823      	ldr	r3, [r4, #0]
 8012e1c:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 8012e20:	69db      	ldr	r3, [r3, #28]
 8012e22:	b089      	sub	sp, #36	; 0x24
 8012e24:	4606      	mov	r6, r0
 8012e26:	4601      	mov	r1, r0
 8012e28:	69d8      	ldr	r0, [r3, #28]
 8012e2a:	f7ff ffe9 	bl	8012e00 <GUIPROP__FindChar>
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d060      	beq.n	8012ef4 <GUIPROP_DispChar+0xe0>
 8012e32:	8805      	ldrh	r5, [r0, #0]
 8012e34:	6847      	ldr	r7, [r0, #4]
 8012e36:	1b75      	subs	r5, r6, r5
 8012e38:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8012e3c:	4640      	mov	r0, r8
 8012e3e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8012e42:	f7f7 fc49 	bl	800a6d8 <LCD_SetDrawMode>
 8012e46:	f8d4 c000 	ldr.w	ip, [r4]
 8012e4a:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8012e4e:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8012e52:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8012e56:	f89e b018 	ldrb.w	fp, [lr, #24]
 8012e5a:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 8012e5e:	4681      	mov	r9, r0
 8012e60:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 8012e64:	9305      	str	r3, [sp, #20]
 8012e66:	6873      	ldr	r3, [r6, #4]
 8012e68:	9304      	str	r3, [sp, #16]
 8012e6a:	f04f 0c01 	mov.w	ip, #1
 8012e6e:	f8cd a00c 	str.w	sl, [sp, #12]
 8012e72:	f8cd c008 	str.w	ip, [sp, #8]
 8012e76:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8012e7a:	f8cd c004 	str.w	ip, [sp, #4]
 8012e7e:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8012e82:	f8cd e000 	str.w	lr, [sp]
 8012e86:	465b      	mov	r3, fp
 8012e88:	f7f7 fdc6 	bl	800aa18 <LCD_DrawBitmap>
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	69db      	ldr	r3, [r3, #28]
 8012e90:	7e59      	ldrb	r1, [r3, #25]
 8012e92:	f893 a018 	ldrb.w	sl, [r3, #24]
 8012e96:	9107      	str	r1, [sp, #28]
 8012e98:	4551      	cmp	r1, sl
 8012e9a:	d920      	bls.n	8012ede <GUIPROP_DispChar+0xca>
 8012e9c:	f1b8 0f02 	cmp.w	r8, #2
 8012ea0:	d01d      	beq.n	8012ede <GUIPROP_DispChar+0xca>
 8012ea2:	f893 b01b 	ldrb.w	fp, [r3, #27]
 8012ea6:	f7f5 fc76 	bl	8008796 <GUI_GetColor>
 8012eaa:	4680      	mov	r8, r0
 8012eac:	f7f5 fc67 	bl	800877e <GUI_GetBkColor>
 8012eb0:	f7f5 fda4 	bl	80089fc <GUI_SetColor>
 8012eb4:	6823      	ldr	r3, [r4, #0]
 8012eb6:	9907      	ldr	r1, [sp, #28]
 8012eb8:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 8012ebc:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 8012ec0:	69db      	ldr	r3, [r3, #28]
 8012ec2:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 8012ec6:	7eda      	ldrb	r2, [r3, #27]
 8012ec8:	fb0b e301 	mla	r3, fp, r1, lr
 8012ecc:	fb05 0202 	mla	r2, r5, r2, r0
 8012ed0:	fb0b e10a 	mla	r1, fp, sl, lr
 8012ed4:	f7f7 fc88 	bl	800a7e8 <LCD_FillRect>
 8012ed8:	4640      	mov	r0, r8
 8012eda:	f7f5 fd8f 	bl	80089fc <GUI_SetColor>
 8012ede:	4648      	mov	r0, r9
 8012ee0:	f7f7 fbfa 	bl	800a6d8 <LCD_SetDrawMode>
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	7871      	ldrb	r1, [r6, #1]
 8012ee8:	69da      	ldr	r2, [r3, #28]
 8012eea:	7e90      	ldrb	r0, [r2, #26]
 8012eec:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8012eee:	fb00 2201 	mla	r2, r0, r1, r2
 8012ef2:	845a      	strh	r2, [r3, #34]	; 0x22
 8012ef4:	b009      	add	sp, #36	; 0x24
 8012ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efa:	bf00      	nop
 8012efc:	20000014 	.word	0x20000014

08012f00 <GUIPROP_GetCharDistX>:
 8012f00:	b538      	push	{r3, r4, r5, lr}
 8012f02:	4b0d      	ldr	r3, [pc, #52]	; (8012f38 <GUIPROP_GetCharDistX+0x38>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	69dd      	ldr	r5, [r3, #28]
 8012f08:	4602      	mov	r2, r0
 8012f0a:	460c      	mov	r4, r1
 8012f0c:	4601      	mov	r1, r0
 8012f0e:	69e8      	ldr	r0, [r5, #28]
 8012f10:	f7ff ff76 	bl	8012e00 <GUIPROP__FindChar>
 8012f14:	b170      	cbz	r0, 8012f34 <GUIPROP_GetCharDistX+0x34>
 8012f16:	8803      	ldrh	r3, [r0, #0]
 8012f18:	1ad2      	subs	r2, r2, r3
 8012f1a:	6843      	ldr	r3, [r0, #4]
 8012f1c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8012f20:	7848      	ldrb	r0, [r1, #1]
 8012f22:	7ea9      	ldrb	r1, [r5, #26]
 8012f24:	fb10 f001 	smulbb	r0, r0, r1
 8012f28:	b124      	cbz	r4, 8012f34 <GUIPROP_GetCharDistX+0x34>
 8012f2a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8012f2e:	fb11 f303 	smulbb	r3, r1, r3
 8012f32:	6023      	str	r3, [r4, #0]
 8012f34:	bd38      	pop	{r3, r4, r5, pc}
 8012f36:	bf00      	nop
 8012f38:	20000014 	.word	0x20000014

08012f3c <GUIPROP_GetFontInfo>:
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	800b      	strh	r3, [r1, #0]
 8012f40:	4770      	bx	lr

08012f42 <GUIPROP_IsInFont>:
 8012f42:	b508      	push	{r3, lr}
 8012f44:	69c0      	ldr	r0, [r0, #28]
 8012f46:	f7ff ff5b 	bl	8012e00 <GUIPROP__FindChar>
 8012f4a:	3000      	adds	r0, #0
 8012f4c:	bf18      	it	ne
 8012f4e:	2001      	movne	r0, #1
 8012f50:	bd08      	pop	{r3, pc}

08012f52 <_DrawGradient>:
 8012f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f56:	b08d      	sub	sp, #52	; 0x34
 8012f58:	461c      	mov	r4, r3
 8012f5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012f5c:	9301      	str	r3, [sp, #4]
 8012f5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012f64:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8012f68:	9300      	str	r3, [sp, #0]
 8012f6a:	4605      	mov	r5, r0
 8012f6c:	4689      	mov	r9, r1
 8012f6e:	4616      	mov	r6, r2
 8012f70:	f7f5 fc11 	bl	8008796 <GUI_GetColor>
 8012f74:	45d8      	cmp	r8, fp
 8012f76:	9006      	str	r0, [sp, #24]
 8012f78:	d10d      	bne.n	8012f96 <_DrawGradient+0x44>
 8012f7a:	4640      	mov	r0, r8
 8012f7c:	f7f7 ff18 	bl	800adb0 <LCD_SetColor>
 8012f80:	9b00      	ldr	r3, [sp, #0]
 8012f82:	b11b      	cbz	r3, 8012f8c <_DrawGradient+0x3a>
 8012f84:	4623      	mov	r3, r4
 8012f86:	4632      	mov	r2, r6
 8012f88:	4649      	mov	r1, r9
 8012f8a:	e090      	b.n	80130ae <_DrawGradient+0x15c>
 8012f8c:	4633      	mov	r3, r6
 8012f8e:	4622      	mov	r2, r4
 8012f90:	4629      	mov	r1, r5
 8012f92:	4648      	mov	r0, r9
 8012f94:	e08c      	b.n	80130b0 <_DrawGradient+0x15e>
 8012f96:	ebb4 0709 	subs.w	r7, r4, r9
 8012f9a:	f000 80a1 	beq.w	80130e0 <_DrawGradient+0x18e>
 8012f9e:	fa5f f288 	uxtb.w	r2, r8
 8012fa2:	fa5f f38b 	uxtb.w	r3, fp
 8012fa6:	1a9b      	subs	r3, r3, r2
 8012fa8:	9308      	str	r3, [sp, #32]
 8012faa:	2302      	movs	r3, #2
 8012fac:	fb97 f3f3 	sdiv	r3, r7, r3
 8012fb0:	fb02 3207 	mla	r2, r2, r7, r3
 8012fb4:	9202      	str	r2, [sp, #8]
 8012fb6:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8012fba:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8012fbe:	1a89      	subs	r1, r1, r2
 8012fc0:	fb02 3207 	mla	r2, r2, r7, r3
 8012fc4:	9109      	str	r1, [sp, #36]	; 0x24
 8012fc6:	9203      	str	r2, [sp, #12]
 8012fc8:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8012fcc:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8012fd0:	1a89      	subs	r1, r1, r2
 8012fd2:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8012fd6:	fb02 3207 	mla	r2, r2, r7, r3
 8012fda:	9204      	str	r2, [sp, #16]
 8012fdc:	fb08 3307 	mla	r3, r8, r7, r3
 8012fe0:	ebc8 621b 	rsb	r2, r8, fp, lsr #24
 8012fe4:	9806      	ldr	r0, [sp, #24]
 8012fe6:	910a      	str	r1, [sp, #40]	; 0x28
 8012fe8:	920b      	str	r2, [sp, #44]	; 0x2c
 8012fea:	9305      	str	r3, [sp, #20]
 8012fec:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8012ff0:	f04f 0a01 	mov.w	sl, #1
 8012ff4:	f108 0b01 	add.w	fp, r8, #1
 8012ff8:	455c      	cmp	r4, fp
 8012ffa:	db4c      	blt.n	8013096 <_DrawGradient+0x144>
 8012ffc:	9b02      	ldr	r3, [sp, #8]
 8012ffe:	9a08      	ldr	r2, [sp, #32]
 8013000:	fb93 f1f7 	sdiv	r1, r3, r7
 8013004:	4413      	add	r3, r2
 8013006:	9302      	str	r3, [sp, #8]
 8013008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801300a:	9b03      	ldr	r3, [sp, #12]
 801300c:	fb93 fef7 	sdiv	lr, r3, r7
 8013010:	4413      	add	r3, r2
 8013012:	9303      	str	r3, [sp, #12]
 8013014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013016:	9b04      	ldr	r3, [sp, #16]
 8013018:	fb93 fcf7 	sdiv	ip, r3, r7
 801301c:	4413      	add	r3, r2
 801301e:	9304      	str	r3, [sp, #16]
 8013020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013022:	9b05      	ldr	r3, [sp, #20]
 8013024:	fb93 f3f7 	sdiv	r3, r3, r7
 8013028:	9307      	str	r3, [sp, #28]
 801302a:	9b05      	ldr	r3, [sp, #20]
 801302c:	4413      	add	r3, r2
 801302e:	9305      	str	r3, [sp, #20]
 8013030:	9b07      	ldr	r3, [sp, #28]
 8013032:	061a      	lsls	r2, r3, #24
 8013034:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8013038:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 801303c:	ea42 0301 	orr.w	r3, r2, r1
 8013040:	45d9      	cmp	r9, fp
 8013042:	9307      	str	r3, [sp, #28]
 8013044:	da24      	bge.n	8013090 <_DrawGradient+0x13e>
 8013046:	4298      	cmp	r0, r3
 8013048:	d102      	bne.n	8013050 <_DrawGradient+0xfe>
 801304a:	f10a 0a01 	add.w	sl, sl, #1
 801304e:	e01f      	b.n	8013090 <_DrawGradient+0x13e>
 8013050:	f7f7 feae 	bl	800adb0 <LCD_SetColor>
 8013054:	f1ba 0f01 	cmp.w	sl, #1
 8013058:	d010      	beq.n	801307c <_DrawGradient+0x12a>
 801305a:	9b00      	ldr	r3, [sp, #0]
 801305c:	ebca 000b 	rsb	r0, sl, fp
 8013060:	b123      	cbz	r3, 801306c <_DrawGradient+0x11a>
 8013062:	4601      	mov	r1, r0
 8013064:	4643      	mov	r3, r8
 8013066:	4632      	mov	r2, r6
 8013068:	4628      	mov	r0, r5
 801306a:	e002      	b.n	8013072 <_DrawGradient+0x120>
 801306c:	4633      	mov	r3, r6
 801306e:	4642      	mov	r2, r8
 8013070:	4629      	mov	r1, r5
 8013072:	f7f7 fbb9 	bl	800a7e8 <LCD_FillRect>
 8013076:	f04f 0a01 	mov.w	sl, #1
 801307a:	e009      	b.n	8013090 <_DrawGradient+0x13e>
 801307c:	9b00      	ldr	r3, [sp, #0]
 801307e:	4632      	mov	r2, r6
 8013080:	b113      	cbz	r3, 8013088 <_DrawGradient+0x136>
 8013082:	4641      	mov	r1, r8
 8013084:	4628      	mov	r0, r5
 8013086:	e001      	b.n	801308c <_DrawGradient+0x13a>
 8013088:	4629      	mov	r1, r5
 801308a:	4640      	mov	r0, r8
 801308c:	9b01      	ldr	r3, [sp, #4]
 801308e:	4798      	blx	r3
 8013090:	46d8      	mov	r8, fp
 8013092:	9807      	ldr	r0, [sp, #28]
 8013094:	e7ae      	b.n	8012ff4 <_DrawGradient+0xa2>
 8013096:	f7f7 fe8b 	bl	800adb0 <LCD_SetColor>
 801309a:	f1ba 0f01 	cmp.w	sl, #1
 801309e:	d00f      	beq.n	80130c0 <_DrawGradient+0x16e>
 80130a0:	9b00      	ldr	r3, [sp, #0]
 80130a2:	ebca 0004 	rsb	r0, sl, r4
 80130a6:	b133      	cbz	r3, 80130b6 <_DrawGradient+0x164>
 80130a8:	4623      	mov	r3, r4
 80130aa:	4632      	mov	r2, r6
 80130ac:	1c41      	adds	r1, r0, #1
 80130ae:	4628      	mov	r0, r5
 80130b0:	f7f7 fb9a 	bl	800a7e8 <LCD_FillRect>
 80130b4:	e00e      	b.n	80130d4 <_DrawGradient+0x182>
 80130b6:	4633      	mov	r3, r6
 80130b8:	4622      	mov	r2, r4
 80130ba:	4629      	mov	r1, r5
 80130bc:	3001      	adds	r0, #1
 80130be:	e7f7      	b.n	80130b0 <_DrawGradient+0x15e>
 80130c0:	9b00      	ldr	r3, [sp, #0]
 80130c2:	4632      	mov	r2, r6
 80130c4:	b113      	cbz	r3, 80130cc <_DrawGradient+0x17a>
 80130c6:	4621      	mov	r1, r4
 80130c8:	4628      	mov	r0, r5
 80130ca:	e001      	b.n	80130d0 <_DrawGradient+0x17e>
 80130cc:	4629      	mov	r1, r5
 80130ce:	4620      	mov	r0, r4
 80130d0:	9b01      	ldr	r3, [sp, #4]
 80130d2:	4798      	blx	r3
 80130d4:	9806      	ldr	r0, [sp, #24]
 80130d6:	b00d      	add	sp, #52	; 0x34
 80130d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	f7f7 be68 	b.w	800adb0 <LCD_SetColor>
 80130e0:	b00d      	add	sp, #52	; 0x34
 80130e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080130e8 <GUI_DrawGradientV>:
 80130e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130ec:	b087      	sub	sp, #28
 80130ee:	4604      	mov	r4, r0
 80130f0:	4690      	mov	r8, r2
 80130f2:	4699      	mov	r9, r3
 80130f4:	460d      	mov	r5, r1
 80130f6:	f7f6 fe31 	bl	8009d5c <GUI_Lock>
 80130fa:	4b16      	ldr	r3, [pc, #88]	; (8013154 <GUI_DrawGradientV+0x6c>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013102:	4414      	add	r4, r2
 8013104:	441d      	add	r5, r3
 8013106:	4490      	add	r8, r2
 8013108:	4499      	add	r9, r3
 801310a:	a804      	add	r0, sp, #16
 801310c:	f8ad 4010 	strh.w	r4, [sp, #16]
 8013110:	f8ad 8014 	strh.w	r8, [sp, #20]
 8013114:	f8ad 5012 	strh.w	r5, [sp, #18]
 8013118:	f8ad 9016 	strh.w	r9, [sp, #22]
 801311c:	f7fb f9a6 	bl	800e46c <WM__InitIVRSearch>
 8013120:	b920      	cbnz	r0, 801312c <GUI_DrawGradientV+0x44>
 8013122:	f7f6 fe11 	bl	8009d48 <GUI_Unlock>
 8013126:	b007      	add	sp, #28
 8013128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801312c:	4e0a      	ldr	r6, [pc, #40]	; (8013158 <GUI_DrawGradientV+0x70>)
 801312e:	2701      	movs	r7, #1
 8013130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013132:	9301      	str	r3, [sp, #4]
 8013134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	4642      	mov	r2, r8
 801313a:	464b      	mov	r3, r9
 801313c:	4629      	mov	r1, r5
 801313e:	4620      	mov	r0, r4
 8013140:	9703      	str	r7, [sp, #12]
 8013142:	9602      	str	r6, [sp, #8]
 8013144:	f7ff ff05 	bl	8012f52 <_DrawGradient>
 8013148:	f7fb f8ce 	bl	800e2e8 <WM__GetNextIVR>
 801314c:	2800      	cmp	r0, #0
 801314e:	d1ef      	bne.n	8013130 <GUI_DrawGradientV+0x48>
 8013150:	e7e7      	b.n	8013122 <GUI_DrawGradientV+0x3a>
 8013152:	bf00      	nop
 8013154:	20000014 	.word	0x20000014
 8013158:	0800a745 	.word	0x0800a745

0801315c <GUI_DrawGradientH>:
 801315c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013160:	b087      	sub	sp, #28
 8013162:	4605      	mov	r5, r0
 8013164:	4691      	mov	r9, r2
 8013166:	4698      	mov	r8, r3
 8013168:	460c      	mov	r4, r1
 801316a:	f7f6 fdf7 	bl	8009d5c <GUI_Lock>
 801316e:	4b16      	ldr	r3, [pc, #88]	; (80131c8 <GUI_DrawGradientH+0x6c>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013176:	4415      	add	r5, r2
 8013178:	441c      	add	r4, r3
 801317a:	4491      	add	r9, r2
 801317c:	4498      	add	r8, r3
 801317e:	a804      	add	r0, sp, #16
 8013180:	f8ad 5010 	strh.w	r5, [sp, #16]
 8013184:	f8ad 9014 	strh.w	r9, [sp, #20]
 8013188:	f8ad 4012 	strh.w	r4, [sp, #18]
 801318c:	f8ad 8016 	strh.w	r8, [sp, #22]
 8013190:	f7fb f96c 	bl	800e46c <WM__InitIVRSearch>
 8013194:	b920      	cbnz	r0, 80131a0 <GUI_DrawGradientH+0x44>
 8013196:	f7f6 fdd7 	bl	8009d48 <GUI_Unlock>
 801319a:	b007      	add	sp, #28
 801319c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a0:	4e0a      	ldr	r6, [pc, #40]	; (80131cc <GUI_DrawGradientH+0x70>)
 80131a2:	2700      	movs	r7, #0
 80131a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131a6:	9301      	str	r3, [sp, #4]
 80131a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131aa:	9300      	str	r3, [sp, #0]
 80131ac:	4642      	mov	r2, r8
 80131ae:	464b      	mov	r3, r9
 80131b0:	4629      	mov	r1, r5
 80131b2:	4620      	mov	r0, r4
 80131b4:	9703      	str	r7, [sp, #12]
 80131b6:	9602      	str	r6, [sp, #8]
 80131b8:	f7ff fecb 	bl	8012f52 <_DrawGradient>
 80131bc:	f7fb f894 	bl	800e2e8 <WM__GetNextIVR>
 80131c0:	2800      	cmp	r0, #0
 80131c2:	d1ef      	bne.n	80131a4 <GUI_DrawGradientH+0x48>
 80131c4:	e7e7      	b.n	8013196 <GUI_DrawGradientH+0x3a>
 80131c6:	bf00      	nop
 80131c8:	20000014 	.word	0x20000014
 80131cc:	0800a795 	.word	0x0800a795

080131d0 <GUI_DrawHLine>:
 80131d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80131d4:	4f14      	ldr	r7, [pc, #80]	; (8013228 <GUI_DrawHLine+0x58>)
 80131d6:	4680      	mov	r8, r0
 80131d8:	4616      	mov	r6, r2
 80131da:	460c      	mov	r4, r1
 80131dc:	f7f6 fdbe 	bl	8009d5c <GUI_Lock>
 80131e0:	683d      	ldr	r5, [r7, #0]
 80131e2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80131e4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80131e6:	eb08 0502 	add.w	r5, r8, r2
 80131ea:	441c      	add	r4, r3
 80131ec:	441e      	add	r6, r3
 80131ee:	4668      	mov	r0, sp
 80131f0:	b22b      	sxth	r3, r5
 80131f2:	f8ad 4000 	strh.w	r4, [sp]
 80131f6:	f8ad 6004 	strh.w	r6, [sp, #4]
 80131fa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80131fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013202:	f7fb f933 	bl	800e46c <WM__InitIVRSearch>
 8013206:	b920      	cbnz	r0, 8013212 <GUI_DrawHLine+0x42>
 8013208:	f7f6 fd9e 	bl	8009d48 <GUI_Unlock>
 801320c:	b002      	add	sp, #8
 801320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013216:	4632      	mov	r2, r6
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4629      	mov	r1, r5
 801321c:	4620      	mov	r0, r4
 801321e:	4798      	blx	r3
 8013220:	f7fb f862 	bl	800e2e8 <WM__GetNextIVR>
 8013224:	e7ef      	b.n	8013206 <GUI_DrawHLine+0x36>
 8013226:	bf00      	nop
 8013228:	20000014 	.word	0x20000014

0801322c <GUI_DrawPixel>:
 801322c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801322e:	4e12      	ldr	r6, [pc, #72]	; (8013278 <GUI_DrawPixel+0x4c>)
 8013230:	4604      	mov	r4, r0
 8013232:	460d      	mov	r5, r1
 8013234:	f7f6 fd92 	bl	8009d5c <GUI_Lock>
 8013238:	6833      	ldr	r3, [r6, #0]
 801323a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801323c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801323e:	4414      	add	r4, r2
 8013240:	441d      	add	r5, r3
 8013242:	b223      	sxth	r3, r4
 8013244:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013248:	f8ad 3000 	strh.w	r3, [sp]
 801324c:	4668      	mov	r0, sp
 801324e:	b22b      	sxth	r3, r5
 8013250:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013254:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013258:	f7fb f908 	bl	800e46c <WM__InitIVRSearch>
 801325c:	b918      	cbnz	r0, 8013266 <GUI_DrawPixel+0x3a>
 801325e:	f7f6 fd73 	bl	8009d48 <GUI_Unlock>
 8013262:	b002      	add	sp, #8
 8013264:	bd70      	pop	{r4, r5, r6, pc}
 8013266:	6833      	ldr	r3, [r6, #0]
 8013268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801326a:	4629      	mov	r1, r5
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	4620      	mov	r0, r4
 8013270:	4798      	blx	r3
 8013272:	f7fb f839 	bl	800e2e8 <WM__GetNextIVR>
 8013276:	e7f1      	b.n	801325c <GUI_DrawPixel+0x30>
 8013278:	20000014 	.word	0x20000014

0801327c <GL_DrawPoint>:
 801327c:	4b06      	ldr	r3, [pc, #24]	; (8013298 <GL_DrawPoint+0x1c>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	7e1a      	ldrb	r2, [r3, #24]
 8013282:	2a01      	cmp	r2, #1
 8013284:	d102      	bne.n	801328c <GL_DrawPoint+0x10>
 8013286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	4718      	bx	r3
 801328c:	3a01      	subs	r2, #1
 801328e:	2302      	movs	r3, #2
 8013290:	fb92 f2f3 	sdiv	r2, r2, r3
 8013294:	f004 bf1c 	b.w	80180d0 <GL_FillCircle>
 8013298:	20000014 	.word	0x20000014

0801329c <GUI_DrawVLine>:
 801329c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801329e:	4604      	mov	r4, r0
 80132a0:	4616      	mov	r6, r2
 80132a2:	460d      	mov	r5, r1
 80132a4:	f7f6 fd5a 	bl	8009d5c <GUI_Lock>
 80132a8:	4b0f      	ldr	r3, [pc, #60]	; (80132e8 <GUI_DrawVLine+0x4c>)
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80132ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80132b0:	441c      	add	r4, r3
 80132b2:	b223      	sxth	r3, r4
 80132b4:	4415      	add	r5, r2
 80132b6:	4416      	add	r6, r2
 80132b8:	4668      	mov	r0, sp
 80132ba:	f8ad 3000 	strh.w	r3, [sp]
 80132be:	f8ad 3004 	strh.w	r3, [sp, #4]
 80132c2:	f8ad 5002 	strh.w	r5, [sp, #2]
 80132c6:	f8ad 6006 	strh.w	r6, [sp, #6]
 80132ca:	f7fb f8cf 	bl	800e46c <WM__InitIVRSearch>
 80132ce:	b918      	cbnz	r0, 80132d8 <GUI_DrawVLine+0x3c>
 80132d0:	f7f6 fd3a 	bl	8009d48 <GUI_Unlock>
 80132d4:	b002      	add	sp, #8
 80132d6:	bd70      	pop	{r4, r5, r6, pc}
 80132d8:	4632      	mov	r2, r6
 80132da:	4629      	mov	r1, r5
 80132dc:	4620      	mov	r0, r4
 80132de:	f7f7 fa59 	bl	800a794 <LCD_DrawVLine>
 80132e2:	f7fb f801 	bl	800e2e8 <WM__GetNextIVR>
 80132e6:	e7f2      	b.n	80132ce <GUI_DrawVLine+0x32>
 80132e8:	20000014 	.word	0x20000014

080132ec <GUI_FillRect>:
 80132ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80132ee:	4604      	mov	r4, r0
 80132f0:	4616      	mov	r6, r2
 80132f2:	461f      	mov	r7, r3
 80132f4:	460d      	mov	r5, r1
 80132f6:	f7f6 fd31 	bl	8009d5c <GUI_Lock>
 80132fa:	4b10      	ldr	r3, [pc, #64]	; (801333c <GUI_FillRect+0x50>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013302:	4414      	add	r4, r2
 8013304:	441d      	add	r5, r3
 8013306:	4416      	add	r6, r2
 8013308:	441f      	add	r7, r3
 801330a:	4668      	mov	r0, sp
 801330c:	f8ad 4000 	strh.w	r4, [sp]
 8013310:	f8ad 6004 	strh.w	r6, [sp, #4]
 8013314:	f8ad 5002 	strh.w	r5, [sp, #2]
 8013318:	f8ad 7006 	strh.w	r7, [sp, #6]
 801331c:	f7fb f8a6 	bl	800e46c <WM__InitIVRSearch>
 8013320:	b918      	cbnz	r0, 801332a <GUI_FillRect+0x3e>
 8013322:	f7f6 fd11 	bl	8009d48 <GUI_Unlock>
 8013326:	b003      	add	sp, #12
 8013328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801332a:	463b      	mov	r3, r7
 801332c:	4632      	mov	r2, r6
 801332e:	4629      	mov	r1, r5
 8013330:	4620      	mov	r0, r4
 8013332:	f7f7 fa59 	bl	800a7e8 <LCD_FillRect>
 8013336:	f7fa ffd7 	bl	800e2e8 <WM__GetNextIVR>
 801333a:	e7f1      	b.n	8013320 <GUI_FillRect+0x34>
 801333c:	20000014 	.word	0x20000014

08013340 <GUI_FillRectEx>:
 8013340:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013344:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8013348:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801334c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8013350:	f7ff bfcc 	b.w	80132ec <GUI_FillRect>

08013354 <GUI_DrawFocusRect>:
 8013354:	b513      	push	{r0, r1, r4, lr}
 8013356:	460a      	mov	r2, r1
 8013358:	4601      	mov	r1, r0
 801335a:	4668      	mov	r0, sp
 801335c:	f7f7 f987 	bl	800a66e <GUI__ReduceRect>
 8013360:	f7f6 fcfc 	bl	8009d5c <GUI_Lock>
 8013364:	4b23      	ldr	r3, [pc, #140]	; (80133f4 <GUI_DrawFocusRect+0xa0>)
 8013366:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013370:	f8b2 404c 	ldrh.w	r4, [r2, #76]	; 0x4c
 8013374:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8013378:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801337c:	4423      	add	r3, r4
 801337e:	f8ad 3000 	strh.w	r3, [sp]
 8013382:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013386:	4401      	add	r1, r0
 8013388:	4403      	add	r3, r0
 801338a:	4422      	add	r2, r4
 801338c:	4668      	mov	r0, sp
 801338e:	f8ad 1002 	strh.w	r1, [sp, #2]
 8013392:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013396:	f8ad 3006 	strh.w	r3, [sp, #6]
 801339a:	f7fb f867 	bl	800e46c <WM__InitIVRSearch>
 801339e:	b918      	cbnz	r0, 80133a8 <GUI_DrawFocusRect+0x54>
 80133a0:	f7f6 fcd2 	bl	8009d48 <GUI_Unlock>
 80133a4:	b002      	add	sp, #8
 80133a6:	bd10      	pop	{r4, pc}
 80133a8:	f9bd 4000 	ldrsh.w	r4, [sp]
 80133ac:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80133b0:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80133b4:	429c      	cmp	r4, r3
 80133b6:	dc09      	bgt.n	80133cc <GUI_DrawFocusRect+0x78>
 80133b8:	4620      	mov	r0, r4
 80133ba:	f7f7 f993 	bl	800a6e4 <LCD_DrawPixel>
 80133be:	4620      	mov	r0, r4
 80133c0:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 80133c4:	f7f7 f98e 	bl	800a6e4 <LCD_DrawPixel>
 80133c8:	3402      	adds	r4, #2
 80133ca:	e7ef      	b.n	80133ac <GUI_DrawFocusRect+0x58>
 80133cc:	460c      	mov	r4, r1
 80133ce:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80133d2:	429c      	cmp	r4, r3
 80133d4:	dc0b      	bgt.n	80133ee <GUI_DrawFocusRect+0x9a>
 80133d6:	4621      	mov	r1, r4
 80133d8:	f9bd 0000 	ldrsh.w	r0, [sp]
 80133dc:	f7f7 f982 	bl	800a6e4 <LCD_DrawPixel>
 80133e0:	4621      	mov	r1, r4
 80133e2:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 80133e6:	f7f7 f97d 	bl	800a6e4 <LCD_DrawPixel>
 80133ea:	3402      	adds	r4, #2
 80133ec:	e7ef      	b.n	80133ce <GUI_DrawFocusRect+0x7a>
 80133ee:	f7fa ff7b 	bl	800e2e8 <WM__GetNextIVR>
 80133f2:	e7d4      	b.n	801339e <GUI_DrawFocusRect+0x4a>
 80133f4:	20000014 	.word	0x20000014

080133f8 <_SetLineColor>:
 80133f8:	4b20      	ldr	r3, [pc, #128]	; (801347c <_SetLineColor+0x84>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	7e9b      	ldrb	r3, [r3, #26]
 80133fe:	3b01      	subs	r3, #1
 8013400:	2b03      	cmp	r3, #3
 8013402:	d837      	bhi.n	8013474 <_SetLineColor+0x7c>
 8013404:	e8df f003 	tbb	[pc, r3]
 8013408:	261c0e02 	.word	0x261c0e02
 801340c:	4b1c      	ldr	r3, [pc, #112]	; (8013480 <_SetLineColor+0x88>)
 801340e:	3006      	adds	r0, #6
 8013410:	4003      	ands	r3, r0
 8013412:	2b00      	cmp	r3, #0
 8013414:	bfbe      	ittt	lt
 8013416:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 801341a:	f063 030f 	ornlt	r3, r3, #15
 801341e:	3301      	addlt	r3, #1
 8013420:	2b0b      	cmp	r3, #11
 8013422:	e009      	b.n	8013438 <_SetLineColor+0x40>
 8013424:	4b17      	ldr	r3, [pc, #92]	; (8013484 <_SetLineColor+0x8c>)
 8013426:	4003      	ands	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	bfbe      	ittt	lt
 801342c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8013430:	f063 0303 	ornlt	r3, r3, #3
 8013434:	3301      	addlt	r3, #1
 8013436:	2b01      	cmp	r3, #1
 8013438:	bfcc      	ite	gt
 801343a:	2000      	movgt	r0, #0
 801343c:	2001      	movle	r0, #1
 801343e:	4770      	bx	lr
 8013440:	2314      	movs	r3, #20
 8013442:	fb90 f2f3 	sdiv	r2, r0, r3
 8013446:	fb03 0012 	mls	r0, r3, r2, r0
 801344a:	280b      	cmp	r0, #11
 801344c:	dd14      	ble.n	8013478 <_SetLineColor+0x80>
 801344e:	3810      	subs	r0, #16
 8013450:	2801      	cmp	r0, #1
 8013452:	e00b      	b.n	801346c <_SetLineColor+0x74>
 8013454:	2318      	movs	r3, #24
 8013456:	fb90 f2f3 	sdiv	r2, r0, r3
 801345a:	fb03 0012 	mls	r0, r3, r2, r0
 801345e:	280b      	cmp	r0, #11
 8013460:	dd0a      	ble.n	8013478 <_SetLineColor+0x80>
 8013462:	f020 0004 	bic.w	r0, r0, #4
 8013466:	f1a0 0310 	sub.w	r3, r0, #16
 801346a:	2b01      	cmp	r3, #1
 801346c:	bf8c      	ite	hi
 801346e:	2000      	movhi	r0, #0
 8013470:	2001      	movls	r0, #1
 8013472:	4770      	bx	lr
 8013474:	2000      	movs	r0, #0
 8013476:	4770      	bx	lr
 8013478:	2001      	movs	r0, #1
 801347a:	4770      	bx	lr
 801347c:	20000014 	.word	0x20000014
 8013480:	8000000f 	.word	0x8000000f
 8013484:	80000003 	.word	0x80000003

08013488 <GUI_sin>:
 8013488:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801348c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8013490:	bfc6      	itte	gt
 8013492:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 8013496:	2101      	movgt	r1, #1
 8013498:	2100      	movle	r1, #0
 801349a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801349e:	bfc8      	it	gt
 80134a0:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 80134a4:	1182      	asrs	r2, r0, #6
 80134a6:	b510      	push	{r4, lr}
 80134a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80134ac:	4c0c      	ldr	r4, [pc, #48]	; (80134e0 <GUI_sin+0x58>)
 80134ae:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80134b2:	b280      	uxth	r0, r0
 80134b4:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 80134b8:	2840      	cmp	r0, #64	; 0x40
 80134ba:	fb00 f303 	mul.w	r3, r0, r3
 80134be:	d008      	beq.n	80134d2 <GUI_sin+0x4a>
 80134c0:	2a10      	cmp	r2, #16
 80134c2:	bf1f      	itttt	ne
 80134c4:	3201      	addne	r2, #1
 80134c6:	f1c0 0040 	rsbne	r0, r0, #64	; 0x40
 80134ca:	f834 2012 	ldrhne.w	r2, [r4, r2, lsl #1]
 80134ce:	fb00 3302 	mlane	r3, r0, r2, r3
 80134d2:	f103 0020 	add.w	r0, r3, #32
 80134d6:	0980      	lsrs	r0, r0, #6
 80134d8:	b101      	cbz	r1, 80134dc <GUI_sin+0x54>
 80134da:	4240      	negs	r0, r0
 80134dc:	bd10      	pop	{r4, pc}
 80134de:	bf00      	nop
 80134e0:	0801a960 	.word	0x0801a960

080134e4 <GUI_cos>:
 80134e4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80134e8:	f7ff bfce 	b.w	8013488 <GUI_sin>

080134ec <GL_DrawLine1Ex>:
 80134ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f0:	1a14      	subs	r4, r2, r0
 80134f2:	1a5d      	subs	r5, r3, r1
 80134f4:	ea54 0705 	orrs.w	r7, r4, r5
 80134f8:	4606      	mov	r6, r0
 80134fa:	4688      	mov	r8, r1
 80134fc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8013500:	d104      	bne.n	801350c <GL_DrawLine1Ex+0x20>
 8013502:	b003      	add	sp, #12
 8013504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013508:	f7ff beb8 	b.w	801327c <GL_DrawPoint>
 801350c:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8013510:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 8013514:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
 8013518:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 801351c:	4288      	cmp	r0, r1
 801351e:	dd0a      	ble.n	8013536 <GL_DrawLine1Ex+0x4a>
 8013520:	4621      	mov	r1, r4
 8013522:	462c      	mov	r4, r5
 8013524:	460d      	mov	r5, r1
 8013526:	4611      	mov	r1, r2
 8013528:	461a      	mov	r2, r3
 801352a:	460b      	mov	r3, r1
 801352c:	4631      	mov	r1, r6
 801352e:	2701      	movs	r7, #1
 8013530:	4646      	mov	r6, r8
 8013532:	4688      	mov	r8, r1
 8013534:	e000      	b.n	8013538 <GL_DrawLine1Ex+0x4c>
 8013536:	2700      	movs	r7, #0
 8013538:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 801353c:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8013540:	42a1      	cmp	r1, r4
 8013542:	bf1f      	itttt	ne
 8013544:	4698      	movne	r8, r3
 8013546:	426d      	negne	r5, r5
 8013548:	4633      	movne	r3, r6
 801354a:	4264      	negne	r4, r4
 801354c:	bf17      	itett	ne
 801354e:	4616      	movne	r6, r2
 8013550:	2301      	moveq	r3, #1
 8013552:	461a      	movne	r2, r3
 8013554:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8013558:	2d00      	cmp	r5, #0
 801355a:	f8d9 b000 	ldr.w	fp, [r9]
 801355e:	f8df a134 	ldr.w	sl, [pc, #308]	; 8013694 <GL_DrawLine1Ex+0x1a8>
 8013562:	d138      	bne.n	80135d6 <GL_DrawLine1Ex+0xea>
 8013564:	f8da 3000 	ldr.w	r3, [sl]
 8013568:	b1c7      	cbz	r7, 801359c <GL_DrawLine1Ex+0xb0>
 801356a:	7e9b      	ldrb	r3, [r3, #26]
 801356c:	b98b      	cbnz	r3, 8013592 <GL_DrawLine1Ex+0xa6>
 801356e:	4631      	mov	r1, r6
 8013570:	4640      	mov	r0, r8
 8013572:	b003      	add	sp, #12
 8013574:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013578:	f7f7 b90c 	b.w	800a794 <LCD_DrawVLine>
 801357c:	f7ff ff3c 	bl	80133f8 <_SetLineColor>
 8013580:	b930      	cbnz	r0, 8013590 <GL_DrawLine1Ex+0xa4>
 8013582:	f8da 3000 	ldr.w	r3, [sl]
 8013586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013588:	1971      	adds	r1, r6, r5
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	4640      	mov	r0, r8
 801358e:	4798      	blx	r3
 8013590:	3501      	adds	r5, #1
 8013592:	42a5      	cmp	r5, r4
 8013594:	eb05 000b 	add.w	r0, r5, fp
 8013598:	ddf0      	ble.n	801357c <GL_DrawLine1Ex+0x90>
 801359a:	e018      	b.n	80135ce <GL_DrawLine1Ex+0xe2>
 801359c:	7e99      	ldrb	r1, [r3, #26]
 801359e:	b991      	cbnz	r1, 80135c6 <GL_DrawLine1Ex+0xda>
 80135a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4641      	mov	r1, r8
 80135a6:	4630      	mov	r0, r6
 80135a8:	b003      	add	sp, #12
 80135aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ae:	4718      	bx	r3
 80135b0:	f7ff ff22 	bl	80133f8 <_SetLineColor>
 80135b4:	b930      	cbnz	r0, 80135c4 <GL_DrawLine1Ex+0xd8>
 80135b6:	f8da 3000 	ldr.w	r3, [sl]
 80135ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80135bc:	4641      	mov	r1, r8
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	19f0      	adds	r0, r6, r7
 80135c2:	4798      	blx	r3
 80135c4:	3701      	adds	r7, #1
 80135c6:	42a7      	cmp	r7, r4
 80135c8:	eb0b 0007 	add.w	r0, fp, r7
 80135cc:	ddf0      	ble.n	80135b0 <GL_DrawLine1Ex+0xc4>
 80135ce:	3801      	subs	r0, #1
 80135d0:	f8c9 0000 	str.w	r0, [r9]
 80135d4:	e05a      	b.n	801368c <GL_DrawLine1Ex+0x1a0>
 80135d6:	f8da 1000 	ldr.w	r1, [sl]
 80135da:	7e89      	ldrb	r1, [r1, #26]
 80135dc:	f04f 0202 	mov.w	r2, #2
 80135e0:	fb94 f2f2 	sdiv	r2, r4, r2
 80135e4:	bfb8      	it	lt
 80135e6:	4252      	neglt	r2, r2
 80135e8:	b9b1      	cbnz	r1, 8013618 <GL_DrawLine1Ex+0x12c>
 80135ea:	4691      	mov	r9, r2
 80135ec:	46b3      	mov	fp, r6
 80135ee:	ebc6 030b 	rsb	r3, r6, fp
 80135f2:	429c      	cmp	r4, r3
 80135f4:	db4a      	blt.n	801368c <GL_DrawLine1Ex+0x1a0>
 80135f6:	fb99 f0f4 	sdiv	r0, r9, r4
 80135fa:	f8da 3000 	ldr.w	r3, [sl]
 80135fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013600:	4440      	add	r0, r8
 8013602:	685b      	ldr	r3, [r3, #4]
 8013604:	b917      	cbnz	r7, 801360c <GL_DrawLine1Ex+0x120>
 8013606:	4601      	mov	r1, r0
 8013608:	4658      	mov	r0, fp
 801360a:	e000      	b.n	801360e <GL_DrawLine1Ex+0x122>
 801360c:	4659      	mov	r1, fp
 801360e:	4798      	blx	r3
 8013610:	f10b 0b01 	add.w	fp, fp, #1
 8013614:	44a9      	add	r9, r5
 8013616:	e7ea      	b.n	80135ee <GL_DrawLine1Ex+0x102>
 8013618:	1c59      	adds	r1, r3, #1
 801361a:	bf04      	itt	eq
 801361c:	eb04 010b 	addeq.w	r1, r4, fp
 8013620:	f8c9 1000 	streq.w	r1, [r9]
 8013624:	9200      	str	r2, [sp, #0]
 8013626:	46b3      	mov	fp, r6
 8013628:	ebc6 020b 	rsb	r2, r6, fp
 801362c:	4294      	cmp	r4, r2
 801362e:	f8d9 0000 	ldr.w	r0, [r9]
 8013632:	db21      	blt.n	8013678 <GL_DrawLine1Ex+0x18c>
 8013634:	4418      	add	r0, r3
 8013636:	f8c9 0000 	str.w	r0, [r9]
 801363a:	9301      	str	r3, [sp, #4]
 801363c:	f7ff fedc 	bl	80133f8 <_SetLineColor>
 8013640:	9b01      	ldr	r3, [sp, #4]
 8013642:	b998      	cbnz	r0, 801366c <GL_DrawLine1Ex+0x180>
 8013644:	9a00      	ldr	r2, [sp, #0]
 8013646:	fb92 f0f4 	sdiv	r0, r2, r4
 801364a:	4440      	add	r0, r8
 801364c:	b937      	cbnz	r7, 801365c <GL_DrawLine1Ex+0x170>
 801364e:	f8da 2000 	ldr.w	r2, [sl]
 8013652:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8013654:	4601      	mov	r1, r0
 8013656:	6852      	ldr	r2, [r2, #4]
 8013658:	4658      	mov	r0, fp
 801365a:	e005      	b.n	8013668 <GL_DrawLine1Ex+0x17c>
 801365c:	f8da 2000 	ldr.w	r2, [sl]
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8013664:	6852      	ldr	r2, [r2, #4]
 8013666:	4659      	mov	r1, fp
 8013668:	4790      	blx	r2
 801366a:	9b01      	ldr	r3, [sp, #4]
 801366c:	9a00      	ldr	r2, [sp, #0]
 801366e:	442a      	add	r2, r5
 8013670:	f10b 0b01 	add.w	fp, fp, #1
 8013674:	9200      	str	r2, [sp, #0]
 8013676:	e7d7      	b.n	8013628 <GL_DrawLine1Ex+0x13c>
 8013678:	1c5a      	adds	r2, r3, #1
 801367a:	bf04      	itt	eq
 801367c:	1824      	addeq	r4, r4, r0
 801367e:	f8c9 4000 	streq.w	r4, [r9]
 8013682:	f8d9 2000 	ldr.w	r2, [r9]
 8013686:	1ad3      	subs	r3, r2, r3
 8013688:	f8c9 3000 	str.w	r3, [r9]
 801368c:	b003      	add	sp, #12
 801368e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013692:	bf00      	nop
 8013694:	20000014 	.word	0x20000014

08013698 <GL_DrawLineEx>:
 8013698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8013844 <GL_DrawLineEx+0x1ac>
 80136a0:	f8d9 4000 	ldr.w	r4, [r9]
 80136a4:	7e24      	ldrb	r4, [r4, #24]
 80136a6:	2c01      	cmp	r4, #1
 80136a8:	b087      	sub	sp, #28
 80136aa:	4607      	mov	r7, r0
 80136ac:	4688      	mov	r8, r1
 80136ae:	4615      	mov	r5, r2
 80136b0:	461e      	mov	r6, r3
 80136b2:	d104      	bne.n	80136be <GL_DrawLineEx+0x26>
 80136b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80136b6:	9400      	str	r4, [sp, #0]
 80136b8:	f7ff ff18 	bl	80134ec <GL_DrawLine1Ex>
 80136bc:	e0bd      	b.n	801383a <GL_DrawLineEx+0x1a2>
 80136be:	1a82      	subs	r2, r0, r2
 80136c0:	1acb      	subs	r3, r1, r3
 80136c2:	ea52 0103 	orrs.w	r1, r2, r3
 80136c6:	f000 80b8 	beq.w	801383a <GL_DrawLineEx+0x1a2>
 80136ca:	2a00      	cmp	r2, #0
 80136cc:	bfb6      	itet	lt
 80136ce:	2101      	movlt	r1, #1
 80136d0:	2100      	movge	r1, #0
 80136d2:	4252      	neglt	r2, r2
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	bfbc      	itt	lt
 80136d8:	425b      	neglt	r3, r3
 80136da:	f041 0102 	orrlt.w	r1, r1, #2
 80136de:	429a      	cmp	r2, r3
 80136e0:	bfbe      	ittt	lt
 80136e2:	4610      	movlt	r0, r2
 80136e4:	461a      	movlt	r2, r3
 80136e6:	4603      	movlt	r3, r0
 80136e8:	ea4f 0062 	mov.w	r0, r2, asr #1
 80136ec:	eb00 2383 	add.w	r3, r0, r3, lsl #10
 80136f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80136f4:	4a52      	ldr	r2, [pc, #328]	; (8013840 <GL_DrawLineEx+0x1a8>)
 80136f6:	ea4f 1ea3 	mov.w	lr, r3, asr #6
 80136fa:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80136fe:	f1c3 0c10 	rsb	ip, r3, #16
 8013702:	eb02 004e 	add.w	r0, r2, lr, lsl #1
 8013706:	bfb8      	it	lt
 8013708:	f041 0104 	orrlt.w	r1, r1, #4
 801370c:	f1bc 0f10 	cmp.w	ip, #16
 8013710:	bf18      	it	ne
 8013712:	eb02 024e 	addne.w	r2, r2, lr, lsl #1
 8013716:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 801371a:	bf18      	it	ne
 801371c:	f9b2 2024 	ldrshne.w	r2, [r2, #36]	; 0x24
 8013720:	fb0c f000 	mul.w	r0, ip, r0
 8013724:	bf18      	it	ne
 8013726:	fb03 0002 	mlane	r0, r3, r2, r0
 801372a:	3008      	adds	r0, #8
 801372c:	2310      	movs	r3, #16
 801372e:	fb90 f0f3 	sdiv	r0, r0, r3
 8013732:	074b      	lsls	r3, r1, #29
 8013734:	bf48      	it	mi
 8013736:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 801373a:	07ca      	lsls	r2, r1, #31
 801373c:	bf48      	it	mi
 801373e:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 8013742:	078b      	lsls	r3, r1, #30
 8013744:	bf48      	it	mi
 8013746:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 801374a:	f500 6b80 	add.w	fp, r0, #1024	; 0x400
 801374e:	4658      	mov	r0, fp
 8013750:	f7ff fec8 	bl	80134e4 <GUI_cos>
 8013754:	3c01      	subs	r4, #1
 8013756:	fb00 fa04 	mul.w	sl, r0, r4
 801375a:	4658      	mov	r0, fp
 801375c:	f7ff fe94 	bl	8013488 <GUI_sin>
 8013760:	f1ba 0f00 	cmp.w	sl, #0
 8013764:	bfb8      	it	lt
 8013766:	f5ca 7300 	rsblt	r3, sl, #512	; 0x200
 801376a:	fb00 f004 	mul.w	r0, r0, r4
 801376e:	bfb5      	itete	lt
 8013770:	129b      	asrlt	r3, r3, #10
 8013772:	f50a 7300 	addge.w	r3, sl, #512	; 0x200
 8013776:	425b      	neglt	r3, r3
 8013778:	129b      	asrge	r3, r3, #10
 801377a:	2800      	cmp	r0, #0
 801377c:	bfbb      	ittet	lt
 801377e:	f5c0 7000 	rsblt	r0, r0, #512	; 0x200
 8013782:	1280      	asrlt	r0, r0, #10
 8013784:	f500 7000 	addge.w	r0, r0, #512	; 0x200
 8013788:	4240      	neglt	r0, r0
 801378a:	bfa8      	it	ge
 801378c:	1280      	asrge	r0, r0, #10
 801378e:	2b00      	cmp	r3, #0
 8013790:	bfcb      	itete	gt
 8013792:	1c59      	addgt	r1, r3, #1
 8013794:	2202      	movle	r2, #2
 8013796:	1049      	asrgt	r1, r1, #1
 8013798:	fb93 f1f2 	sdivle	r1, r3, r2
 801379c:	bfce      	itee	gt
 801379e:	105b      	asrgt	r3, r3, #1
 80137a0:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 80137a4:	fb93 f3f2 	sdivle	r3, r3, r2
 80137a8:	2800      	cmp	r0, #0
 80137aa:	bfc8      	it	gt
 80137ac:	1c42      	addgt	r2, r0, #1
 80137ae:	fa1f fe87 	uxth.w	lr, r7
 80137b2:	b289      	uxth	r1, r1
 80137b4:	bfd5      	itete	le
 80137b6:	2402      	movle	r4, #2
 80137b8:	1052      	asrgt	r2, r2, #1
 80137ba:	fb90 f2f4 	sdivle	r2, r0, r4
 80137be:	1040      	asrgt	r0, r0, #1
 80137c0:	bfdc      	itt	le
 80137c2:	f100 30ff 	addle.w	r0, r0, #4294967295	; 0xffffffff
 80137c6:	fb90 f0f4 	sdivle	r0, r0, r4
 80137ca:	eb0e 0401 	add.w	r4, lr, r1
 80137ce:	f8ad 4008 	strh.w	r4, [sp, #8]
 80137d2:	b292      	uxth	r2, r2
 80137d4:	fa1f f488 	uxth.w	r4, r8
 80137d8:	b280      	uxth	r0, r0
 80137da:	eb04 0c02 	add.w	ip, r4, r2
 80137de:	1a24      	subs	r4, r4, r0
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	f8ad 400e 	strh.w	r4, [sp, #14]
 80137e6:	b2ac      	uxth	r4, r5
 80137e8:	ebc3 0e0e 	rsb	lr, r3, lr
 80137ec:	1ae3      	subs	r3, r4, r3
 80137ee:	f8ad 3010 	strh.w	r3, [sp, #16]
 80137f2:	b2b3      	uxth	r3, r6
 80137f4:	1a18      	subs	r0, r3, r0
 80137f6:	441a      	add	r2, r3
 80137f8:	4421      	add	r1, r4
 80137fa:	2300      	movs	r3, #0
 80137fc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013800:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013804:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013808:	2104      	movs	r1, #4
 801380a:	461a      	mov	r2, r3
 801380c:	a802      	add	r0, sp, #8
 801380e:	f8ad c00a 	strh.w	ip, [sp, #10]
 8013812:	f8ad e00c 	strh.w	lr, [sp, #12]
 8013816:	f000 f869 	bl	80138ec <GL_FillPolygon>
 801381a:	f8d9 3000 	ldr.w	r3, [r9]
 801381e:	7e5b      	ldrb	r3, [r3, #25]
 8013820:	b91b      	cbnz	r3, 801382a <GL_DrawLineEx+0x192>
 8013822:	4641      	mov	r1, r8
 8013824:	4638      	mov	r0, r7
 8013826:	f7ff fd29 	bl	801327c <GL_DrawPoint>
 801382a:	f8d9 3000 	ldr.w	r3, [r9]
 801382e:	7e5b      	ldrb	r3, [r3, #25]
 8013830:	b91b      	cbnz	r3, 801383a <GL_DrawLineEx+0x1a2>
 8013832:	4631      	mov	r1, r6
 8013834:	4628      	mov	r0, r5
 8013836:	f7ff fd21 	bl	801327c <GL_DrawPoint>
 801383a:	b007      	add	sp, #28
 801383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013840:	0801a960 	.word	0x0801a960
 8013844:	20000014 	.word	0x20000014

08013848 <GL_DrawLine>:
 8013848:	b530      	push	{r4, r5, lr}
 801384a:	b085      	sub	sp, #20
 801384c:	ac04      	add	r4, sp, #16
 801384e:	2500      	movs	r5, #0
 8013850:	f844 5d04 	str.w	r5, [r4, #-4]!
 8013854:	9400      	str	r4, [sp, #0]
 8013856:	f7ff ff1f 	bl	8013698 <GL_DrawLineEx>
 801385a:	b005      	add	sp, #20
 801385c:	bd30      	pop	{r4, r5, pc}
	...

08013860 <GUI_DrawLine>:
 8013860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013864:	4680      	mov	r8, r0
 8013866:	461e      	mov	r6, r3
 8013868:	460c      	mov	r4, r1
 801386a:	4615      	mov	r5, r2
 801386c:	f7f6 fa76 	bl	8009d5c <GUI_Lock>
 8013870:	4b0d      	ldr	r3, [pc, #52]	; (80138a8 <GUI_DrawLine+0x48>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2000      	movs	r0, #0
 8013876:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8013878:	f8d3 9050 	ldr.w	r9, [r3, #80]	; 0x50
 801387c:	f7fa fdf6 	bl	800e46c <WM__InitIVRSearch>
 8013880:	b918      	cbnz	r0, 801388a <GUI_DrawLine+0x2a>
 8013882:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013886:	f7f6 ba5f 	b.w	8009d48 <GUI_Unlock>
 801388a:	444e      	add	r6, r9
 801388c:	443d      	add	r5, r7
 801388e:	444c      	add	r4, r9
 8013890:	4633      	mov	r3, r6
 8013892:	462a      	mov	r2, r5
 8013894:	4621      	mov	r1, r4
 8013896:	eb07 0008 	add.w	r0, r7, r8
 801389a:	f7ff ffd5 	bl	8013848 <GL_DrawLine>
 801389e:	f7fa fd23 	bl	800e2e8 <WM__GetNextIVR>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d1f4      	bne.n	8013890 <GUI_DrawLine+0x30>
 80138a6:	e7ec      	b.n	8013882 <GUI_DrawLine+0x22>
 80138a8:	20000014 	.word	0x20000014

080138ac <_Add>:
 80138ac:	490e      	ldr	r1, [pc, #56]	; (80138e8 <_Add+0x3c>)
 80138ae:	680b      	ldr	r3, [r1, #0]
 80138b0:	2b0b      	cmp	r3, #11
 80138b2:	b570      	push	{r4, r5, r6, lr}
 80138b4:	dc17      	bgt.n	80138e6 <_Add+0x3a>
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	dc01      	bgt.n	80138be <_Add+0x12>
 80138ba:	2200      	movs	r2, #0
 80138bc:	e00e      	b.n	80138dc <_Add+0x30>
 80138be:	1d0c      	adds	r4, r1, #4
 80138c0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80138c4:	461a      	mov	r2, r3
 80138c6:	f934 5d02 	ldrsh.w	r5, [r4, #-2]!
 80138ca:	4285      	cmp	r5, r0
 80138cc:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80138d0:	db04      	blt.n	80138dc <_Add+0x30>
 80138d2:	8065      	strh	r5, [r4, #2]
 80138d4:	4632      	mov	r2, r6
 80138d6:	2e00      	cmp	r6, #0
 80138d8:	d1f5      	bne.n	80138c6 <_Add+0x1a>
 80138da:	e7ee      	b.n	80138ba <_Add+0xe>
 80138dc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80138e0:	3301      	adds	r3, #1
 80138e2:	8090      	strh	r0, [r2, #4]
 80138e4:	600b      	str	r3, [r1, #0]
 80138e6:	bd70      	pop	{r4, r5, r6, pc}
 80138e8:	20000ac4 	.word	0x20000ac4

080138ec <GL_FillPolygon>:
 80138ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138f0:	4f6f      	ldr	r7, [pc, #444]	; (8013ab0 <GL_FillPolygon+0x1c4>)
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	4605      	mov	r5, r0
 80138f6:	9101      	str	r1, [sp, #4]
 80138f8:	4690      	mov	r8, r2
 80138fa:	f643 74ff 	movw	r4, #16383	; 0x3fff
 80138fe:	2300      	movs	r3, #0
 8013900:	9a01      	ldr	r2, [sp, #4]
 8013902:	4293      	cmp	r3, r2
 8013904:	da0b      	bge.n	801391e <GL_FillPolygon+0x32>
 8013906:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 801390a:	3301      	adds	r3, #1
 801390c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013910:	4294      	cmp	r4, r2
 8013912:	bfa8      	it	ge
 8013914:	4614      	movge	r4, r2
 8013916:	4297      	cmp	r7, r2
 8013918:	bfb8      	it	lt
 801391a:	4617      	movlt	r7, r2
 801391c:	e7f0      	b.n	8013900 <GL_FillPolygon+0x14>
 801391e:	4e65      	ldr	r6, [pc, #404]	; (8013ab4 <GL_FillPolygon+0x1c8>)
 8013920:	6833      	ldr	r3, [r6, #0]
 8013922:	695b      	ldr	r3, [r3, #20]
 8013924:	b16b      	cbz	r3, 8013942 <GL_FillPolygon+0x56>
 8013926:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801392a:	9900      	ldr	r1, [sp, #0]
 801392c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013930:	1a52      	subs	r2, r2, r1
 8013932:	4297      	cmp	r7, r2
 8013934:	eba3 0301 	sub.w	r3, r3, r1
 8013938:	bfa8      	it	ge
 801393a:	4617      	movge	r7, r2
 801393c:	429c      	cmp	r4, r3
 801393e:	bfb8      	it	lt
 8013940:	461c      	movlt	r4, r3
 8013942:	9b00      	ldr	r3, [sp, #0]
 8013944:	441c      	add	r4, r3
 8013946:	9b00      	ldr	r3, [sp, #0]
 8013948:	ebc3 0904 	rsb	r9, r3, r4
 801394c:	454f      	cmp	r7, r9
 801394e:	f2c0 80ac 	blt.w	8013aaa <GL_FillPolygon+0x1be>
 8013952:	4a59      	ldr	r2, [pc, #356]	; (8013ab8 <GL_FillPolygon+0x1cc>)
 8013954:	2300      	movs	r3, #0
 8013956:	6013      	str	r3, [r2, #0]
 8013958:	469a      	mov	sl, r3
 801395a:	9b01      	ldr	r3, [sp, #4]
 801395c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8013960:	9b01      	ldr	r3, [sp, #4]
 8013962:	459a      	cmp	sl, r3
 8013964:	da5a      	bge.n	8013a1c <GL_FillPolygon+0x130>
 8013966:	45da      	cmp	sl, fp
 8013968:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 801396c:	bfb4      	ite	lt
 801396e:	f10a 0c01 	addlt.w	ip, sl, #1
 8013972:	f04f 0c00 	movge.w	ip, #0
 8013976:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801397a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801397e:	eb05 020c 	add.w	r2, r5, ip
 8013982:	454b      	cmp	r3, r9
 8013984:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8013988:	d136      	bne.n	80139f8 <GL_FillPolygon+0x10c>
 801398a:	4549      	cmp	r1, r9
 801398c:	d002      	beq.n	8013994 <GL_FillPolygon+0xa8>
 801398e:	4653      	mov	r3, sl
 8013990:	2000      	movs	r0, #0
 8013992:	e01a      	b.n	80139ca <GL_FillPolygon+0xde>
 8013994:	f935 e02a 	ldrsh.w	lr, [r5, sl, lsl #2]
 8013998:	f935 000c 	ldrsh.w	r0, [r5, ip]
 801399c:	6833      	ldr	r3, [r6, #0]
 801399e:	44c6      	add	lr, r8
 80139a0:	4440      	add	r0, r8
 80139a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80139a4:	4586      	cmp	lr, r0
 80139a6:	bfb8      	it	lt
 80139a8:	4602      	movlt	r2, r0
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	bfb9      	ittee	lt
 80139ae:	4621      	movlt	r1, r4
 80139b0:	4670      	movlt	r0, lr
 80139b2:	4672      	movge	r2, lr
 80139b4:	4621      	movge	r1, r4
 80139b6:	e01d      	b.n	80139f4 <GL_FillPolygon+0x108>
 80139b8:	b153      	cbz	r3, 80139d0 <GL_FillPolygon+0xe4>
 80139ba:	3b01      	subs	r3, #1
 80139bc:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80139c0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80139c4:	454a      	cmp	r2, r9
 80139c6:	d105      	bne.n	80139d4 <GL_FillPolygon+0xe8>
 80139c8:	3001      	adds	r0, #1
 80139ca:	4583      	cmp	fp, r0
 80139cc:	dcf4      	bgt.n	80139b8 <GL_FillPolygon+0xcc>
 80139ce:	e022      	b.n	8013a16 <GL_FillPolygon+0x12a>
 80139d0:	465b      	mov	r3, fp
 80139d2:	e7f3      	b.n	80139bc <GL_FillPolygon+0xd0>
 80139d4:	ebc9 0202 	rsb	r2, r9, r2
 80139d8:	ebc9 0101 	rsb	r1, r9, r1
 80139dc:	ea92 0f01 	teq	r2, r1
 80139e0:	f935 002a 	ldrsh.w	r0, [r5, sl, lsl #2]
 80139e4:	d450      	bmi.n	8013a88 <GL_FillPolygon+0x19c>
 80139e6:	6833      	ldr	r3, [r6, #0]
 80139e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80139ea:	eb00 0208 	add.w	r2, r0, r8
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	4621      	mov	r1, r4
 80139f2:	4610      	mov	r0, r2
 80139f4:	4798      	blx	r3
 80139f6:	e00e      	b.n	8013a16 <GL_FillPolygon+0x12a>
 80139f8:	4549      	cmp	r1, r9
 80139fa:	d00c      	beq.n	8013a16 <GL_FillPolygon+0x12a>
 80139fc:	db02      	blt.n	8013a04 <GL_FillPolygon+0x118>
 80139fe:	454b      	cmp	r3, r9
 8013a00:	dd45      	ble.n	8013a8e <GL_FillPolygon+0x1a2>
 8013a02:	e002      	b.n	8013a0a <GL_FillPolygon+0x11e>
 8013a04:	454b      	cmp	r3, r9
 8013a06:	db06      	blt.n	8013a16 <GL_FillPolygon+0x12a>
 8013a08:	e001      	b.n	8013a0e <GL_FillPolygon+0x122>
 8013a0a:	4549      	cmp	r1, r9
 8013a0c:	dc03      	bgt.n	8013a16 <GL_FillPolygon+0x12a>
 8013a0e:	428b      	cmp	r3, r1
 8013a10:	dc43      	bgt.n	8013a9a <GL_FillPolygon+0x1ae>
 8013a12:	454b      	cmp	r3, r9
 8013a14:	dd20      	ble.n	8013a58 <GL_FillPolygon+0x16c>
 8013a16:	f10a 0a01 	add.w	sl, sl, #1
 8013a1a:	e7a1      	b.n	8013960 <GL_FillPolygon+0x74>
 8013a1c:	f04f 0900 	mov.w	r9, #0
 8013a20:	4648      	mov	r0, r9
 8013a22:	46ca      	mov	sl, r9
 8013a24:	4b24      	ldr	r3, [pc, #144]	; (8013ab8 <GL_FillPolygon+0x1cc>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	459a      	cmp	sl, r3
 8013a2a:	da13      	bge.n	8013a54 <GL_FillPolygon+0x168>
 8013a2c:	4b23      	ldr	r3, [pc, #140]	; (8013abc <GL_FillPolygon+0x1d0>)
 8013a2e:	f933 b01a 	ldrsh.w	fp, [r3, sl, lsl #1]
 8013a32:	f1b9 0f00 	cmp.w	r9, #0
 8013a36:	d007      	beq.n	8013a48 <GL_FillPolygon+0x15c>
 8013a38:	6833      	ldr	r3, [r6, #0]
 8013a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013a3c:	eb08 020b 	add.w	r2, r8, fp
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	4621      	mov	r1, r4
 8013a44:	4440      	add	r0, r8
 8013a46:	4798      	blx	r3
 8013a48:	f089 0901 	eor.w	r9, r9, #1
 8013a4c:	f10a 0a01 	add.w	sl, sl, #1
 8013a50:	4658      	mov	r0, fp
 8013a52:	e7e7      	b.n	8013a24 <GL_FillPolygon+0x138>
 8013a54:	3401      	adds	r4, #1
 8013a56:	e776      	b.n	8013946 <GL_FillPolygon+0x5a>
 8013a58:	4549      	cmp	r1, r9
 8013a5a:	dbdc      	blt.n	8013a16 <GL_FillPolygon+0x12a>
 8013a5c:	f935 e02a 	ldrsh.w	lr, [r5, sl, lsl #2]
 8013a60:	f935 200c 	ldrsh.w	r2, [r5, ip]
 8013a64:	ebc3 0009 	rsb	r0, r3, r9
 8013a68:	ebce 0202 	rsb	r2, lr, r2
 8013a6c:	4342      	muls	r2, r0
 8013a6e:	2a00      	cmp	r2, #0
 8013a70:	eba1 0303 	sub.w	r3, r1, r3
 8013a74:	bfdb      	ittet	le
 8013a76:	1058      	asrle	r0, r3, #1
 8013a78:	f100 30ff 	addle.w	r0, r0, #4294967295	; 0xffffffff
 8013a7c:	eb02 0263 	addgt.w	r2, r2, r3, asr #1
 8013a80:	1a12      	suble	r2, r2, r0
 8013a82:	fb92 f0f3 	sdiv	r0, r2, r3
 8013a86:	4470      	add	r0, lr
 8013a88:	f7ff ff10 	bl	80138ac <_Add>
 8013a8c:	e7c3      	b.n	8013a16 <GL_FillPolygon+0x12a>
 8013a8e:	428b      	cmp	r3, r1
 8013a90:	dde4      	ble.n	8013a5c <GL_FillPolygon+0x170>
 8013a92:	4549      	cmp	r1, r9
 8013a94:	dcbf      	bgt.n	8013a16 <GL_FillPolygon+0x12a>
 8013a96:	454b      	cmp	r3, r9
 8013a98:	dbbd      	blt.n	8013a16 <GL_FillPolygon+0x12a>
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f935 e00c 	ldrsh.w	lr, [r5, ip]
 8013aa0:	f935 202a 	ldrsh.w	r2, [r5, sl, lsl #2]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	4601      	mov	r1, r0
 8013aa8:	e7dc      	b.n	8013a64 <GL_FillPolygon+0x178>
 8013aaa:	b003      	add	sp, #12
 8013aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab0:	ffffc001 	.word	0xffffc001
 8013ab4:	20000014 	.word	0x20000014
 8013ab8:	20000ac4 	.word	0x20000ac4
 8013abc:	20000ac8 	.word	0x20000ac8

08013ac0 <_Unlink>:
 8013ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	b1e8      	cbz	r0, 8013b02 <_Unlink+0x42>
 8013ac6:	f7f4 fc1f 	bl	8008308 <GUI_ALLOC_LockH>
 8013aca:	4b0f      	ldr	r3, [pc, #60]	; (8013b08 <_Unlink+0x48>)
 8013acc:	9000      	str	r0, [sp, #0]
 8013ace:	685c      	ldr	r4, [r3, #4]
 8013ad0:	42a5      	cmp	r5, r4
 8013ad2:	d105      	bne.n	8013ae0 <_Unlink+0x20>
 8013ad4:	6842      	ldr	r2, [r0, #4]
 8013ad6:	605a      	str	r2, [r3, #4]
 8013ad8:	e010      	b.n	8013afc <_Unlink+0x3c>
 8013ada:	a801      	add	r0, sp, #4
 8013adc:	f7f4 fc22 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013ae0:	b164      	cbz	r4, 8013afc <_Unlink+0x3c>
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f7f4 fc10 	bl	8008308 <GUI_ALLOC_LockH>
 8013ae8:	6844      	ldr	r4, [r0, #4]
 8013aea:	9001      	str	r0, [sp, #4]
 8013aec:	42a5      	cmp	r5, r4
 8013aee:	d1f4      	bne.n	8013ada <_Unlink+0x1a>
 8013af0:	9b00      	ldr	r3, [sp, #0]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	6043      	str	r3, [r0, #4]
 8013af6:	a801      	add	r0, sp, #4
 8013af8:	f7f4 fc14 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013afc:	4668      	mov	r0, sp
 8013afe:	f7f4 fc11 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013b02:	b003      	add	sp, #12
 8013b04:	bd30      	pop	{r4, r5, pc}
 8013b06:	bf00      	nop
 8013b08:	20000ae0 	.word	0x20000ae0

08013b0c <GUI_TIMER__GetFirstTimer>:
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b10:	6003      	str	r3, [r0, #0]
 8013b12:	4b09      	ldr	r3, [pc, #36]	; (8013b38 <GUI_TIMER__GetFirstTimer+0x2c>)
 8013b14:	681c      	ldr	r4, [r3, #0]
 8013b16:	4605      	mov	r5, r0
 8013b18:	b154      	cbz	r4, 8013b30 <GUI_TIMER__GetFirstTimer+0x24>
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f7f4 fbf4 	bl	8008308 <GUI_ALLOC_LockH>
 8013b20:	ab02      	add	r3, sp, #8
 8013b22:	6902      	ldr	r2, [r0, #16]
 8013b24:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013b28:	602a      	str	r2, [r5, #0]
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7f4 fbfa 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013b30:	4620      	mov	r0, r4
 8013b32:	b003      	add	sp, #12
 8013b34:	bd30      	pop	{r4, r5, pc}
 8013b36:	bf00      	nop
 8013b38:	20000ae0 	.word	0x20000ae0

08013b3c <GUI_TIMER__GetNextTimerLin>:
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b40:	600b      	str	r3, [r1, #0]
 8013b42:	460e      	mov	r6, r1
 8013b44:	4604      	mov	r4, r0
 8013b46:	b190      	cbz	r0, 8013b6e <GUI_TIMER__GetNextTimerLin+0x32>
 8013b48:	f7f4 fbde 	bl	8008308 <GUI_ALLOC_LockH>
 8013b4c:	ad02      	add	r5, sp, #8
 8013b4e:	6884      	ldr	r4, [r0, #8]
 8013b50:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013b54:	b144      	cbz	r4, 8013b68 <GUI_TIMER__GetNextTimerLin+0x2c>
 8013b56:	4628      	mov	r0, r5
 8013b58:	f7f4 fbe4 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	f7f4 fbd3 	bl	8008308 <GUI_ALLOC_LockH>
 8013b62:	6903      	ldr	r3, [r0, #16]
 8013b64:	9001      	str	r0, [sp, #4]
 8013b66:	6033      	str	r3, [r6, #0]
 8013b68:	4628      	mov	r0, r5
 8013b6a:	f7f4 fbdb 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013b6e:	4620      	mov	r0, r4
 8013b70:	b002      	add	sp, #8
 8013b72:	bd70      	pop	{r4, r5, r6, pc}

08013b74 <GUI_TIMER_Delete>:
 8013b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b76:	4604      	mov	r4, r0
 8013b78:	b378      	cbz	r0, 8013bda <GUI_TIMER_Delete+0x66>
 8013b7a:	4e19      	ldr	r6, [pc, #100]	; (8013be0 <GUI_TIMER_Delete+0x6c>)
 8013b7c:	f7f6 f8ee 	bl	8009d5c <GUI_Lock>
 8013b80:	6835      	ldr	r5, [r6, #0]
 8013b82:	42ac      	cmp	r4, r5
 8013b84:	d10c      	bne.n	8013ba0 <GUI_TIMER_Delete+0x2c>
 8013b86:	4620      	mov	r0, r4
 8013b88:	f7f4 fbbe 	bl	8008308 <GUI_ALLOC_LockH>
 8013b8c:	ab02      	add	r3, sp, #8
 8013b8e:	6882      	ldr	r2, [r0, #8]
 8013b90:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013b94:	6032      	str	r2, [r6, #0]
 8013b96:	4618      	mov	r0, r3
 8013b98:	e015      	b.n	8013bc6 <GUI_TIMER_Delete+0x52>
 8013b9a:	4668      	mov	r0, sp
 8013b9c:	f7f4 fbc2 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013ba0:	b19d      	cbz	r5, 8013bca <GUI_TIMER_Delete+0x56>
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f7f4 fbb0 	bl	8008308 <GUI_ALLOC_LockH>
 8013ba8:	6885      	ldr	r5, [r0, #8]
 8013baa:	9000      	str	r0, [sp, #0]
 8013bac:	42ac      	cmp	r4, r5
 8013bae:	d1f4      	bne.n	8013b9a <GUI_TIMER_Delete+0x26>
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f7f4 fba9 	bl	8008308 <GUI_ALLOC_LockH>
 8013bb6:	9b00      	ldr	r3, [sp, #0]
 8013bb8:	6882      	ldr	r2, [r0, #8]
 8013bba:	9001      	str	r0, [sp, #4]
 8013bbc:	609a      	str	r2, [r3, #8]
 8013bbe:	a801      	add	r0, sp, #4
 8013bc0:	f7f4 fbb0 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013bc4:	4668      	mov	r0, sp
 8013bc6:	f7f4 fbad 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013bca:	4620      	mov	r0, r4
 8013bcc:	f7ff ff78 	bl	8013ac0 <_Unlink>
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f7f4 fbd7 	bl	8008384 <GUI_ALLOC_Free>
 8013bd6:	f7f6 f8b7 	bl	8009d48 <GUI_Unlock>
 8013bda:	b002      	add	sp, #8
 8013bdc:	bd70      	pop	{r4, r5, r6, pc}
 8013bde:	bf00      	nop
 8013be0:	20000ae0 	.word	0x20000ae0

08013be4 <GUI_TIMER_GetFlag>:
 8013be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013be6:	460d      	mov	r5, r1
 8013be8:	4604      	mov	r4, r0
 8013bea:	b190      	cbz	r0, 8013c12 <GUI_TIMER_GetFlag+0x2e>
 8013bec:	f7f6 f8b6 	bl	8009d5c <GUI_Lock>
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f7f4 fb89 	bl	8008308 <GUI_ALLOC_LockH>
 8013bf6:	ab02      	add	r3, sp, #8
 8013bf8:	8982      	ldrh	r2, [r0, #12]
 8013bfa:	f843 0d04 	str.w	r0, [r3, #-4]!
 8013bfe:	422a      	tst	r2, r5
 8013c00:	4618      	mov	r0, r3
 8013c02:	bf14      	ite	ne
 8013c04:	2401      	movne	r4, #1
 8013c06:	2400      	moveq	r4, #0
 8013c08:	f7f4 fb8c 	bl	8008324 <GUI_ALLOC_UnlockH>
 8013c0c:	f7f6 f89c 	bl	8009d48 <GUI_Unlock>
 8013c10:	e000      	b.n	8013c14 <GUI_TIMER_GetFlag+0x30>
 8013c12:	2401      	movs	r4, #1
 8013c14:	4620      	mov	r0, r4
 8013c16:	b003      	add	sp, #12
 8013c18:	bd30      	pop	{r4, r5, pc}

08013c1a <GUI__CompactPixelIndices>:
 8013c1a:	2a08      	cmp	r2, #8
 8013c1c:	b510      	push	{r4, lr}
 8013c1e:	dd0e      	ble.n	8013c3e <GUI__CompactPixelIndices+0x24>
 8013c20:	2a10      	cmp	r2, #16
 8013c22:	dc0a      	bgt.n	8013c3a <GUI__CompactPixelIndices+0x20>
 8013c24:	4603      	mov	r3, r0
 8013c26:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013c2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c2e:	f823 2b02 	strh.w	r2, [r3], #2
 8013c32:	428b      	cmp	r3, r1
 8013c34:	d1f9      	bne.n	8013c2a <GUI__CompactPixelIndices+0x10>
 8013c36:	2001      	movs	r0, #1
 8013c38:	bd10      	pop	{r4, pc}
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	bd10      	pop	{r4, pc}
 8013c3e:	2a02      	cmp	r2, #2
 8013c40:	d128      	bne.n	8013c94 <GUI__CompactPixelIndices+0x7a>
 8013c42:	4604      	mov	r4, r0
 8013c44:	6803      	ldr	r3, [r0, #0]
 8013c46:	2901      	cmp	r1, #1
 8013c48:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8013c4c:	b2db      	uxtb	r3, r3
 8013c4e:	d01e      	beq.n	8013c8e <GUI__CompactPixelIndices+0x74>
 8013c50:	6842      	ldr	r2, [r0, #4]
 8013c52:	0112      	lsls	r2, r2, #4
 8013c54:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8013c58:	2902      	cmp	r1, #2
 8013c5a:	ea43 0302 	orr.w	r3, r3, r2
 8013c5e:	d101      	bne.n	8013c64 <GUI__CompactPixelIndices+0x4a>
 8013c60:	3008      	adds	r0, #8
 8013c62:	e015      	b.n	8013c90 <GUI__CompactPixelIndices+0x76>
 8013c64:	6882      	ldr	r2, [r0, #8]
 8013c66:	0092      	lsls	r2, r2, #2
 8013c68:	f002 020c 	and.w	r2, r2, #12
 8013c6c:	2903      	cmp	r1, #3
 8013c6e:	ea43 0302 	orr.w	r3, r3, r2
 8013c72:	d101      	bne.n	8013c78 <GUI__CompactPixelIndices+0x5e>
 8013c74:	300c      	adds	r0, #12
 8013c76:	e00b      	b.n	8013c90 <GUI__CompactPixelIndices+0x76>
 8013c78:	68c2      	ldr	r2, [r0, #12]
 8013c7a:	f002 0203 	and.w	r2, r2, #3
 8013c7e:	4313      	orrs	r3, r2
 8013c80:	3904      	subs	r1, #4
 8013c82:	3010      	adds	r0, #16
 8013c84:	f804 3b01 	strb.w	r3, [r4], #1
 8013c88:	2900      	cmp	r1, #0
 8013c8a:	d1db      	bne.n	8013c44 <GUI__CompactPixelIndices+0x2a>
 8013c8c:	e7d3      	b.n	8013c36 <GUI__CompactPixelIndices+0x1c>
 8013c8e:	3004      	adds	r0, #4
 8013c90:	2100      	movs	r1, #0
 8013c92:	e7f7      	b.n	8013c84 <GUI__CompactPixelIndices+0x6a>
 8013c94:	2a04      	cmp	r2, #4
 8013c96:	d115      	bne.n	8013cc4 <GUI__CompactPixelIndices+0xaa>
 8013c98:	4604      	mov	r4, r0
 8013c9a:	2901      	cmp	r1, #1
 8013c9c:	6803      	ldr	r3, [r0, #0]
 8013c9e:	bf18      	it	ne
 8013ca0:	6842      	ldrne	r2, [r0, #4]
 8013ca2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	bf1b      	ittet	ne
 8013caa:	f002 020f 	andne.w	r2, r2, #15
 8013cae:	4313      	orrne	r3, r2
 8013cb0:	2100      	moveq	r1, #0
 8013cb2:	3902      	subne	r1, #2
 8013cb4:	bf0c      	ite	eq
 8013cb6:	3004      	addeq	r0, #4
 8013cb8:	3008      	addne	r0, #8
 8013cba:	f804 3b01 	strb.w	r3, [r4], #1
 8013cbe:	2900      	cmp	r1, #0
 8013cc0:	d1eb      	bne.n	8013c9a <GUI__CompactPixelIndices+0x80>
 8013cc2:	e7b8      	b.n	8013c36 <GUI__CompactPixelIndices+0x1c>
 8013cc4:	2a01      	cmp	r2, #1
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	d14e      	bne.n	8013d68 <GUI__CompactPixelIndices+0x14e>
 8013cca:	681a      	ldr	r2, [r3, #0]
 8013ccc:	2901      	cmp	r1, #1
 8013cce:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 8013cd2:	b2d2      	uxtb	r2, r2
 8013cd4:	d045      	beq.n	8013d62 <GUI__CompactPixelIndices+0x148>
 8013cd6:	685c      	ldr	r4, [r3, #4]
 8013cd8:	01a4      	lsls	r4, r4, #6
 8013cda:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8013cde:	2902      	cmp	r1, #2
 8013ce0:	ea42 0204 	orr.w	r2, r2, r4
 8013ce4:	d101      	bne.n	8013cea <GUI__CompactPixelIndices+0xd0>
 8013ce6:	3308      	adds	r3, #8
 8013ce8:	e03c      	b.n	8013d64 <GUI__CompactPixelIndices+0x14a>
 8013cea:	689c      	ldr	r4, [r3, #8]
 8013cec:	0164      	lsls	r4, r4, #5
 8013cee:	f004 0420 	and.w	r4, r4, #32
 8013cf2:	2903      	cmp	r1, #3
 8013cf4:	ea42 0204 	orr.w	r2, r2, r4
 8013cf8:	d101      	bne.n	8013cfe <GUI__CompactPixelIndices+0xe4>
 8013cfa:	330c      	adds	r3, #12
 8013cfc:	e032      	b.n	8013d64 <GUI__CompactPixelIndices+0x14a>
 8013cfe:	68dc      	ldr	r4, [r3, #12]
 8013d00:	0124      	lsls	r4, r4, #4
 8013d02:	f004 0410 	and.w	r4, r4, #16
 8013d06:	2904      	cmp	r1, #4
 8013d08:	ea42 0204 	orr.w	r2, r2, r4
 8013d0c:	d101      	bne.n	8013d12 <GUI__CompactPixelIndices+0xf8>
 8013d0e:	3310      	adds	r3, #16
 8013d10:	e028      	b.n	8013d64 <GUI__CompactPixelIndices+0x14a>
 8013d12:	691c      	ldr	r4, [r3, #16]
 8013d14:	00e4      	lsls	r4, r4, #3
 8013d16:	f004 0408 	and.w	r4, r4, #8
 8013d1a:	2905      	cmp	r1, #5
 8013d1c:	ea42 0204 	orr.w	r2, r2, r4
 8013d20:	d101      	bne.n	8013d26 <GUI__CompactPixelIndices+0x10c>
 8013d22:	3314      	adds	r3, #20
 8013d24:	e01e      	b.n	8013d64 <GUI__CompactPixelIndices+0x14a>
 8013d26:	695c      	ldr	r4, [r3, #20]
 8013d28:	00a4      	lsls	r4, r4, #2
 8013d2a:	f004 0404 	and.w	r4, r4, #4
 8013d2e:	2906      	cmp	r1, #6
 8013d30:	ea42 0204 	orr.w	r2, r2, r4
 8013d34:	d101      	bne.n	8013d3a <GUI__CompactPixelIndices+0x120>
 8013d36:	3318      	adds	r3, #24
 8013d38:	e014      	b.n	8013d64 <GUI__CompactPixelIndices+0x14a>
 8013d3a:	699c      	ldr	r4, [r3, #24]
 8013d3c:	0064      	lsls	r4, r4, #1
 8013d3e:	3907      	subs	r1, #7
 8013d40:	f004 0402 	and.w	r4, r4, #2
 8013d44:	ea42 0204 	orr.w	r2, r2, r4
 8013d48:	bf1b      	ittet	ne
 8013d4a:	69dc      	ldrne	r4, [r3, #28]
 8013d4c:	f004 0401 	andne.w	r4, r4, #1
 8013d50:	331c      	addeq	r3, #28
 8013d52:	4322      	orrne	r2, r4
 8013d54:	bf18      	it	ne
 8013d56:	3320      	addne	r3, #32
 8013d58:	f800 2b01 	strb.w	r2, [r0], #1
 8013d5c:	2900      	cmp	r1, #0
 8013d5e:	d1b4      	bne.n	8013cca <GUI__CompactPixelIndices+0xb0>
 8013d60:	e769      	b.n	8013c36 <GUI__CompactPixelIndices+0x1c>
 8013d62:	3304      	adds	r3, #4
 8013d64:	2100      	movs	r1, #0
 8013d66:	e7f7      	b.n	8013d58 <GUI__CompactPixelIndices+0x13e>
 8013d68:	4401      	add	r1, r0
 8013d6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d6e:	f803 2b01 	strb.w	r2, [r3], #1
 8013d72:	4299      	cmp	r1, r3
 8013d74:	d1f9      	bne.n	8013d6a <GUI__CompactPixelIndices+0x150>
 8013d76:	e75e      	b.n	8013c36 <GUI__CompactPixelIndices+0x1c>

08013d78 <GUI__ConvertColor2Index>:
 8013d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d7c:	9f08      	ldr	r7, [sp, #32]
 8013d7e:	f8d3 8000 	ldr.w	r8, [r3]
 8013d82:	2f00      	cmp	r7, #0
 8013d84:	bf08      	it	eq
 8013d86:	4607      	moveq	r7, r0
 8013d88:	2a08      	cmp	r2, #8
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	460d      	mov	r5, r1
 8013d8e:	dd05      	ble.n	8013d9c <GUI__ConvertColor2Index+0x24>
 8013d90:	2a10      	cmp	r2, #16
 8013d92:	f340 80ad 	ble.w	8013ef0 <GUI__ConvertColor2Index+0x178>
 8013d96:	2000      	movs	r0, #0
 8013d98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d9c:	3a01      	subs	r2, #1
 8013d9e:	2a07      	cmp	r2, #7
 8013da0:	f200 809d 	bhi.w	8013ede <GUI__ConvertColor2Index+0x166>
 8013da4:	e8df f002 	tbb	[pc, r2]
 8013da8:	7f9b5b11 	.word	0x7f9b5b11
 8013dac:	899b9b9b 	.word	0x899b9b9b
 8013db0:	69e0      	ldr	r0, [r4, #28]
 8013db2:	47c0      	blx	r8
 8013db4:	f104 0920 	add.w	r9, r4, #32
 8013db8:	4330      	orrs	r0, r6
 8013dba:	b2c6      	uxtb	r6, r0
 8013dbc:	3d08      	subs	r5, #8
 8013dbe:	464c      	mov	r4, r9
 8013dc0:	f807 6b01 	strb.w	r6, [r7], #1
 8013dc4:	2d00      	cmp	r5, #0
 8013dc6:	f000 808a 	beq.w	8013ede <GUI__ConvertColor2Index+0x166>
 8013dca:	6820      	ldr	r0, [r4, #0]
 8013dcc:	47c0      	blx	r8
 8013dce:	2d01      	cmp	r5, #1
 8013dd0:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8013dd4:	b2c6      	uxtb	r6, r0
 8013dd6:	f000 8085 	beq.w	8013ee4 <GUI__ConvertColor2Index+0x16c>
 8013dda:	6860      	ldr	r0, [r4, #4]
 8013ddc:	47c0      	blx	r8
 8013dde:	2d02      	cmp	r5, #2
 8013de0:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 8013de4:	b2c6      	uxtb	r6, r0
 8013de6:	d101      	bne.n	8013dec <GUI__ConvertColor2Index+0x74>
 8013de8:	3408      	adds	r4, #8
 8013dea:	e07c      	b.n	8013ee6 <GUI__ConvertColor2Index+0x16e>
 8013dec:	68a0      	ldr	r0, [r4, #8]
 8013dee:	47c0      	blx	r8
 8013df0:	2d03      	cmp	r5, #3
 8013df2:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 8013df6:	b2c6      	uxtb	r6, r0
 8013df8:	d101      	bne.n	8013dfe <GUI__ConvertColor2Index+0x86>
 8013dfa:	340c      	adds	r4, #12
 8013dfc:	e073      	b.n	8013ee6 <GUI__ConvertColor2Index+0x16e>
 8013dfe:	68e0      	ldr	r0, [r4, #12]
 8013e00:	47c0      	blx	r8
 8013e02:	2d04      	cmp	r5, #4
 8013e04:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8013e08:	b2c6      	uxtb	r6, r0
 8013e0a:	d101      	bne.n	8013e10 <GUI__ConvertColor2Index+0x98>
 8013e0c:	3410      	adds	r4, #16
 8013e0e:	e06a      	b.n	8013ee6 <GUI__ConvertColor2Index+0x16e>
 8013e10:	6920      	ldr	r0, [r4, #16]
 8013e12:	47c0      	blx	r8
 8013e14:	2d05      	cmp	r5, #5
 8013e16:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 8013e1a:	b2c6      	uxtb	r6, r0
 8013e1c:	d101      	bne.n	8013e22 <GUI__ConvertColor2Index+0xaa>
 8013e1e:	3414      	adds	r4, #20
 8013e20:	e061      	b.n	8013ee6 <GUI__ConvertColor2Index+0x16e>
 8013e22:	6960      	ldr	r0, [r4, #20]
 8013e24:	47c0      	blx	r8
 8013e26:	2d06      	cmp	r5, #6
 8013e28:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8013e2c:	b2c6      	uxtb	r6, r0
 8013e2e:	d101      	bne.n	8013e34 <GUI__ConvertColor2Index+0xbc>
 8013e30:	3418      	adds	r4, #24
 8013e32:	e058      	b.n	8013ee6 <GUI__ConvertColor2Index+0x16e>
 8013e34:	69a0      	ldr	r0, [r4, #24]
 8013e36:	47c0      	blx	r8
 8013e38:	2d07      	cmp	r5, #7
 8013e3a:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 8013e3e:	b2c6      	uxtb	r6, r0
 8013e40:	d1b6      	bne.n	8013db0 <GUI__ConvertColor2Index+0x38>
 8013e42:	341c      	adds	r4, #28
 8013e44:	e04f      	b.n	8013ee6 <GUI__ConvertColor2Index+0x16e>
 8013e46:	68e0      	ldr	r0, [r4, #12]
 8013e48:	47c0      	blx	r8
 8013e4a:	f104 0910 	add.w	r9, r4, #16
 8013e4e:	4330      	orrs	r0, r6
 8013e50:	b2c6      	uxtb	r6, r0
 8013e52:	3d04      	subs	r5, #4
 8013e54:	464c      	mov	r4, r9
 8013e56:	f807 6b01 	strb.w	r6, [r7], #1
 8013e5a:	2d00      	cmp	r5, #0
 8013e5c:	d03f      	beq.n	8013ede <GUI__ConvertColor2Index+0x166>
 8013e5e:	6820      	ldr	r0, [r4, #0]
 8013e60:	47c0      	blx	r8
 8013e62:	2d01      	cmp	r5, #1
 8013e64:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8013e68:	b2c6      	uxtb	r6, r0
 8013e6a:	d03e      	beq.n	8013eea <GUI__ConvertColor2Index+0x172>
 8013e6c:	6860      	ldr	r0, [r4, #4]
 8013e6e:	47c0      	blx	r8
 8013e70:	2d02      	cmp	r5, #2
 8013e72:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 8013e76:	b2c6      	uxtb	r6, r0
 8013e78:	d101      	bne.n	8013e7e <GUI__ConvertColor2Index+0x106>
 8013e7a:	3408      	adds	r4, #8
 8013e7c:	e036      	b.n	8013eec <GUI__ConvertColor2Index+0x174>
 8013e7e:	68a0      	ldr	r0, [r4, #8]
 8013e80:	47c0      	blx	r8
 8013e82:	2d03      	cmp	r5, #3
 8013e84:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 8013e88:	b2c6      	uxtb	r6, r0
 8013e8a:	d1dc      	bne.n	8013e46 <GUI__ConvertColor2Index+0xce>
 8013e8c:	340c      	adds	r4, #12
 8013e8e:	e02d      	b.n	8013eec <GUI__ConvertColor2Index+0x174>
 8013e90:	6860      	ldr	r0, [r4, #4]
 8013e92:	47c0      	blx	r8
 8013e94:	f104 0908 	add.w	r9, r4, #8
 8013e98:	4330      	orrs	r0, r6
 8013e9a:	b2c6      	uxtb	r6, r0
 8013e9c:	3d02      	subs	r5, #2
 8013e9e:	464c      	mov	r4, r9
 8013ea0:	f807 6b01 	strb.w	r6, [r7], #1
 8013ea4:	b1dd      	cbz	r5, 8013ede <GUI__ConvertColor2Index+0x166>
 8013ea6:	6820      	ldr	r0, [r4, #0]
 8013ea8:	47c0      	blx	r8
 8013eaa:	2d01      	cmp	r5, #1
 8013eac:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013eb0:	b2c6      	uxtb	r6, r0
 8013eb2:	d1ed      	bne.n	8013e90 <GUI__ConvertColor2Index+0x118>
 8013eb4:	3404      	adds	r4, #4
 8013eb6:	2500      	movs	r5, #0
 8013eb8:	e7f2      	b.n	8013ea0 <GUI__ConvertColor2Index+0x128>
 8013eba:	691e      	ldr	r6, [r3, #16]
 8013ebc:	b12e      	cbz	r6, 8013eca <GUI__ConvertColor2Index+0x152>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	462a      	mov	r2, r5
 8013ec2:	4639      	mov	r1, r7
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	47b0      	blx	r6
 8013ec8:	e009      	b.n	8013ede <GUI__ConvertColor2Index+0x166>
 8013eca:	1e7e      	subs	r6, r7, #1
 8013ecc:	f854 0b04 	ldr.w	r0, [r4], #4
 8013ed0:	47c0      	blx	r8
 8013ed2:	f806 0f01 	strb.w	r0, [r6, #1]!
 8013ed6:	43f3      	mvns	r3, r6
 8013ed8:	442b      	add	r3, r5
 8013eda:	42df      	cmn	r7, r3
 8013edc:	d1f6      	bne.n	8013ecc <GUI__ConvertColor2Index+0x154>
 8013ede:	2001      	movs	r0, #1
 8013ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ee4:	3404      	adds	r4, #4
 8013ee6:	2500      	movs	r5, #0
 8013ee8:	e76a      	b.n	8013dc0 <GUI__ConvertColor2Index+0x48>
 8013eea:	3404      	adds	r4, #4
 8013eec:	2500      	movs	r5, #0
 8013eee:	e7b2      	b.n	8013e56 <GUI__ConvertColor2Index+0xde>
 8013ef0:	691e      	ldr	r6, [r3, #16]
 8013ef2:	b11e      	cbz	r6, 8013efc <GUI__ConvertColor2Index+0x184>
 8013ef4:	2302      	movs	r3, #2
 8013ef6:	462a      	mov	r2, r5
 8013ef8:	4639      	mov	r1, r7
 8013efa:	e7e4      	b.n	8013ec6 <GUI__ConvertColor2Index+0x14e>
 8013efc:	3f02      	subs	r7, #2
 8013efe:	f854 0b04 	ldr.w	r0, [r4], #4
 8013f02:	47c0      	blx	r8
 8013f04:	3d01      	subs	r5, #1
 8013f06:	f827 0f02 	strh.w	r0, [r7, #2]!
 8013f0a:	d1f8      	bne.n	8013efe <GUI__ConvertColor2Index+0x186>
 8013f0c:	e7e7      	b.n	8013ede <GUI__ConvertColor2Index+0x166>

08013f0e <GUI__CompactPixelIndicesEx>:
 8013f0e:	b513      	push	{r0, r1, r4, lr}
 8013f10:	2400      	movs	r4, #0
 8013f12:	9400      	str	r4, [sp, #0]
 8013f14:	f7ff ff30 	bl	8013d78 <GUI__ConvertColor2Index>
 8013f18:	b002      	add	sp, #8
 8013f1a:	bd10      	pop	{r4, pc}

08013f1c <_GetTwinArcPara>:
 8013f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f20:	fb01 f901 	mul.w	r9, r1, r1
 8013f24:	1e45      	subs	r5, r0, #1
 8013f26:	4604      	mov	r4, r0
 8013f28:	4340      	muls	r0, r0
 8013f2a:	ebc9 0000 	rsb	r0, r9, r0
 8013f2e:	460e      	mov	r6, r1
 8013f30:	4692      	mov	sl, r2
 8013f32:	4698      	mov	r8, r3
 8013f34:	9f08      	ldr	r7, [sp, #32]
 8013f36:	f7f6 fba8 	bl	800a68a <GUI__sqrt32>
 8013f3a:	42ae      	cmp	r6, r5
 8013f3c:	f8ca 0000 	str.w	r0, [sl]
 8013f40:	da10      	bge.n	8013f64 <_GetTwinArcPara+0x48>
 8013f42:	fb05 f005 	mul.w	r0, r5, r5
 8013f46:	ebc9 0000 	rsb	r0, r9, r0
 8013f4a:	f7f6 fb9e 	bl	800a68a <GUI__sqrt32>
 8013f4e:	3c02      	subs	r4, #2
 8013f50:	42a6      	cmp	r6, r4
 8013f52:	f8c8 0000 	str.w	r0, [r8]
 8013f56:	da03      	bge.n	8013f60 <_GetTwinArcPara+0x44>
 8013f58:	3801      	subs	r0, #1
 8013f5a:	6038      	str	r0, [r7, #0]
 8013f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f60:	2300      	movs	r3, #0
 8013f62:	e002      	b.n	8013f6a <_GetTwinArcPara+0x4e>
 8013f64:	2300      	movs	r3, #0
 8013f66:	f8c8 3000 	str.w	r3, [r8]
 8013f6a:	603b      	str	r3, [r7, #0]
 8013f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013f70 <_GetTrippleArcPara>:
 8013f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f74:	fb01 fb01 	mul.w	fp, r1, r1
 8013f78:	1e47      	subs	r7, r0, #1
 8013f7a:	4604      	mov	r4, r0
 8013f7c:	4340      	muls	r0, r0
 8013f7e:	ebcb 0000 	rsb	r0, fp, r0
 8013f82:	460d      	mov	r5, r1
 8013f84:	4616      	mov	r6, r2
 8013f86:	469a      	mov	sl, r3
 8013f88:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8013f8c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8013f90:	f7f6 fb7b 	bl	800a68a <GUI__sqrt32>
 8013f94:	42bd      	cmp	r5, r7
 8013f96:	6030      	str	r0, [r6, #0]
 8013f98:	da1e      	bge.n	8013fd8 <_GetTrippleArcPara+0x68>
 8013f9a:	fb07 f007 	mul.w	r0, r7, r7
 8013f9e:	ebcb 0000 	rsb	r0, fp, r0
 8013fa2:	f7f6 fb72 	bl	800a68a <GUI__sqrt32>
 8013fa6:	1ea6      	subs	r6, r4, #2
 8013fa8:	42b5      	cmp	r5, r6
 8013faa:	f8ca 0000 	str.w	r0, [sl]
 8013fae:	da11      	bge.n	8013fd4 <_GetTrippleArcPara+0x64>
 8013fb0:	fb06 f006 	mul.w	r0, r6, r6
 8013fb4:	ebcb 0000 	rsb	r0, fp, r0
 8013fb8:	f7f6 fb67 	bl	800a68a <GUI__sqrt32>
 8013fbc:	3c03      	subs	r4, #3
 8013fbe:	42a5      	cmp	r5, r4
 8013fc0:	f8c9 0000 	str.w	r0, [r9]
 8013fc4:	da04      	bge.n	8013fd0 <_GetTrippleArcPara+0x60>
 8013fc6:	3801      	subs	r0, #1
 8013fc8:	f8c8 0000 	str.w	r0, [r8]
 8013fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	e006      	b.n	8013fe2 <_GetTrippleArcPara+0x72>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	e002      	b.n	8013fde <_GetTrippleArcPara+0x6e>
 8013fd8:	2300      	movs	r3, #0
 8013fda:	f8ca 3000 	str.w	r3, [sl]
 8013fde:	f8c9 3000 	str.w	r3, [r9]
 8013fe2:	f8c8 3000 	str.w	r3, [r8]
 8013fe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013fec <GUI__DrawTwinArc2>:
 8013fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ff0:	b08d      	sub	sp, #52	; 0x34
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	461c      	mov	r4, r3
 8013ff6:	460f      	mov	r7, r1
 8013ff8:	4616      	mov	r6, r2
 8013ffa:	f7f5 feaf 	bl	8009d5c <GUI_Lock>
 8013ffe:	4b57      	ldr	r3, [pc, #348]	; (801415c <GUI__DrawTwinArc2+0x170>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014006:	441e      	add	r6, r3
 8014008:	1e63      	subs	r3, r4, #1
 801400a:	4405      	add	r5, r0
 801400c:	4407      	add	r7, r0
 801400e:	9302      	str	r3, [sp, #8]
 8014010:	a80a      	add	r0, sp, #40	; 0x28
 8014012:	18f3      	adds	r3, r6, r3
 8014014:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8014018:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
 801401c:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 8014020:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014024:	f7fa fa22 	bl	800e46c <WM__InitIVRSearch>
 8014028:	b920      	cbnz	r0, 8014034 <GUI__DrawTwinArc2+0x48>
 801402a:	f7f5 fe8d 	bl	8009d48 <GUI_Unlock>
 801402e:	b00d      	add	sp, #52	; 0x34
 8014030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014034:	4425      	add	r5, r4
 8014036:	1e6b      	subs	r3, r5, #1
 8014038:	9304      	str	r3, [sp, #16]
 801403a:	2c00      	cmp	r4, #0
 801403c:	dc04      	bgt.n	8014048 <GUI__DrawTwinArc2+0x5c>
 801403e:	f7fa f953 	bl	800e2e8 <WM__GetNextIVR>
 8014042:	2800      	cmp	r0, #0
 8014044:	d1f9      	bne.n	801403a <GUI__DrawTwinArc2+0x4e>
 8014046:	e7f0      	b.n	801402a <GUI__DrawTwinArc2+0x3e>
 8014048:	9816      	ldr	r0, [sp, #88]	; 0x58
 801404a:	f7f4 fcd7 	bl	80089fc <GUI_SetColor>
 801404e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014052:	46b1      	mov	r9, r6
 8014054:	f109 0901 	add.w	r9, r9, #1
 8014058:	f1b8 0f00 	cmp.w	r8, #0
 801405c:	d021      	beq.n	80140a2 <GUI__DrawTwinArc2+0xb6>
 801405e:	ab09      	add	r3, sp, #36	; 0x24
 8014060:	4641      	mov	r1, r8
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	aa07      	add	r2, sp, #28
 8014066:	ab08      	add	r3, sp, #32
 8014068:	4620      	mov	r0, r4
 801406a:	f7ff ff57 	bl	8013f1c <_GetTwinArcPara>
 801406e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8014072:	9807      	ldr	r0, [sp, #28]
 8014074:	ebc4 0a07 	rsb	sl, r4, r7
 8014078:	ebcb 0205 	rsb	r2, fp, r5
 801407c:	eb00 030a 	add.w	r3, r0, sl
 8014080:	3a01      	subs	r2, #1
 8014082:	4649      	mov	r1, r9
 8014084:	1a28      	subs	r0, r5, r0
 8014086:	9303      	str	r3, [sp, #12]
 8014088:	f7f6 fb5c 	bl	800a744 <LCD_DrawHLine>
 801408c:	9b03      	ldr	r3, [sp, #12]
 801408e:	eb0b 000a 	add.w	r0, fp, sl
 8014092:	461a      	mov	r2, r3
 8014094:	4649      	mov	r1, r9
 8014096:	3001      	adds	r0, #1
 8014098:	f7f6 fb54 	bl	800a744 <LCD_DrawHLine>
 801409c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80140a0:	e7d8      	b.n	8014054 <GUI__DrawTwinArc2+0x68>
 80140a2:	2c01      	cmp	r4, #1
 80140a4:	d0cb      	beq.n	801403e <GUI__DrawTwinArc2+0x52>
 80140a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80140a8:	f7f4 fca8 	bl	80089fc <GUI_SetColor>
 80140ac:	19a3      	adds	r3, r4, r6
 80140ae:	f1a4 0802 	sub.w	r8, r4, #2
 80140b2:	9303      	str	r3, [sp, #12]
 80140b4:	f1b8 0f00 	cmp.w	r8, #0
 80140b8:	d024      	beq.n	8014104 <GUI__DrawTwinArc2+0x118>
 80140ba:	9b03      	ldr	r3, [sp, #12]
 80140bc:	ebc8 0a03 	rsb	sl, r8, r3
 80140c0:	ab09      	add	r3, sp, #36	; 0x24
 80140c2:	4641      	mov	r1, r8
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	aa07      	add	r2, sp, #28
 80140c8:	ab08      	add	r3, sp, #32
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7ff ff26 	bl	8013f1c <_GetTwinArcPara>
 80140d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80140d4:	9808      	ldr	r0, [sp, #32]
 80140d6:	ebc4 0907 	rsb	r9, r4, r7
 80140da:	ebcb 0205 	rsb	r2, fp, r5
 80140de:	eb00 0309 	add.w	r3, r0, r9
 80140e2:	3a01      	subs	r2, #1
 80140e4:	4651      	mov	r1, sl
 80140e6:	1a28      	subs	r0, r5, r0
 80140e8:	9305      	str	r3, [sp, #20]
 80140ea:	f7f6 fb2b 	bl	800a744 <LCD_DrawHLine>
 80140ee:	9b05      	ldr	r3, [sp, #20]
 80140f0:	eb0b 0009 	add.w	r0, fp, r9
 80140f4:	461a      	mov	r2, r3
 80140f6:	4651      	mov	r1, sl
 80140f8:	3001      	adds	r0, #1
 80140fa:	f7f6 fb23 	bl	800a744 <LCD_DrawHLine>
 80140fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014102:	e7d7      	b.n	80140b4 <GUI__DrawTwinArc2+0xc8>
 8014104:	2c02      	cmp	r4, #2
 8014106:	d09a      	beq.n	801403e <GUI__DrawTwinArc2+0x52>
 8014108:	9818      	ldr	r0, [sp, #96]	; 0x60
 801410a:	f7f4 fc77 	bl	80089fc <GUI_SetColor>
 801410e:	f1a4 0803 	sub.w	r8, r4, #3
 8014112:	eb04 0b06 	add.w	fp, r4, r6
 8014116:	f1b8 0f00 	cmp.w	r8, #0
 801411a:	d090      	beq.n	801403e <GUI__DrawTwinArc2+0x52>
 801411c:	ab09      	add	r3, sp, #36	; 0x24
 801411e:	4641      	mov	r1, r8
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	aa07      	add	r2, sp, #28
 8014124:	ab08      	add	r3, sp, #32
 8014126:	4620      	mov	r0, r4
 8014128:	f7ff fef8 	bl	8013f1c <_GetTwinArcPara>
 801412c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801412e:	9a04      	ldr	r2, [sp, #16]
 8014130:	ebc8 0a0b 	rsb	sl, r8, fp
 8014134:	ebc4 0907 	rsb	r9, r4, r7
 8014138:	eb00 0309 	add.w	r3, r0, r9
 801413c:	4651      	mov	r1, sl
 801413e:	1a28      	subs	r0, r5, r0
 8014140:	9303      	str	r3, [sp, #12]
 8014142:	f7f6 faff 	bl	800a744 <LCD_DrawHLine>
 8014146:	9b03      	ldr	r3, [sp, #12]
 8014148:	4651      	mov	r1, sl
 801414a:	461a      	mov	r2, r3
 801414c:	f109 0001 	add.w	r0, r9, #1
 8014150:	f7f6 faf8 	bl	800a744 <LCD_DrawHLine>
 8014154:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014158:	e7dd      	b.n	8014116 <GUI__DrawTwinArc2+0x12a>
 801415a:	bf00      	nop
 801415c:	20000014 	.word	0x20000014

08014160 <GUI__DrawTwinArc4>:
 8014160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014164:	b091      	sub	sp, #68	; 0x44
 8014166:	4605      	mov	r5, r0
 8014168:	461f      	mov	r7, r3
 801416a:	4689      	mov	r9, r1
 801416c:	4690      	mov	r8, r2
 801416e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8014170:	f7f5 fdf4 	bl	8009d5c <GUI_Lock>
 8014174:	4b71      	ldr	r3, [pc, #452]	; (801433c <GUI__DrawTwinArc4+0x1dc>)
 8014176:	6818      	ldr	r0, [r3, #0]
 8014178:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 801417a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801417c:	eb00 0309 	add.w	r3, r0, r9
 8014180:	9303      	str	r3, [sp, #12]
 8014182:	eb06 0308 	add.w	r3, r6, r8
 8014186:	9304      	str	r3, [sp, #16]
 8014188:	19c3      	adds	r3, r0, r7
 801418a:	9305      	str	r3, [sp, #20]
 801418c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014190:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8014194:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014198:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 801419c:	4435      	add	r5, r6
 801419e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80141a2:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
 80141a6:	a80e      	add	r0, sp, #56	; 0x38
 80141a8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80141ac:	f7fa f95e 	bl	800e46c <WM__InitIVRSearch>
 80141b0:	b920      	cbnz	r0, 80141bc <GUI__DrawTwinArc4+0x5c>
 80141b2:	f7f5 fdc9 	bl	8009d48 <GUI_Unlock>
 80141b6:	b011      	add	sp, #68	; 0x44
 80141b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141bc:	4425      	add	r5, r4
 80141be:	1e6b      	subs	r3, r5, #1
 80141c0:	9306      	str	r3, [sp, #24]
 80141c2:	2c00      	cmp	r4, #0
 80141c4:	dc04      	bgt.n	80141d0 <GUI__DrawTwinArc4+0x70>
 80141c6:	f7fa f88f 	bl	800e2e8 <WM__GetNextIVR>
 80141ca:	2800      	cmp	r0, #0
 80141cc:	d1f9      	bne.n	80141c2 <GUI__DrawTwinArc4+0x62>
 80141ce:	e7f0      	b.n	80141b2 <GUI__DrawTwinArc4+0x52>
 80141d0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80141d2:	f7f4 fc13 	bl	80089fc <GUI_SetColor>
 80141d6:	9b05      	ldr	r3, [sp, #20]
 80141d8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80141dc:	1b1b      	subs	r3, r3, r4
 80141de:	1e67      	subs	r7, r4, #1
 80141e0:	9307      	str	r3, [sp, #28]
 80141e2:	f109 0901 	add.w	r9, r9, #1
 80141e6:	b37f      	cbz	r7, 8014248 <GUI__DrawTwinArc4+0xe8>
 80141e8:	9b07      	ldr	r3, [sp, #28]
 80141ea:	eb03 0b07 	add.w	fp, r3, r7
 80141ee:	ab0d      	add	r3, sp, #52	; 0x34
 80141f0:	4639      	mov	r1, r7
 80141f2:	9300      	str	r3, [sp, #0]
 80141f4:	aa0b      	add	r2, sp, #44	; 0x2c
 80141f6:	ab0c      	add	r3, sp, #48	; 0x30
 80141f8:	4620      	mov	r0, r4
 80141fa:	f7ff fe8f 	bl	8013f1c <_GetTwinArcPara>
 80141fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014200:	9a04      	ldr	r2, [sp, #16]
 8014202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014204:	1b12      	subs	r2, r2, r4
 8014206:	ebc6 0a05 	rsb	sl, r6, r5
 801420a:	1a6b      	subs	r3, r5, r1
 801420c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014210:	4416      	add	r6, r2
 8014212:	eb01 0802 	add.w	r8, r1, r2
 8014216:	4618      	mov	r0, r3
 8014218:	3601      	adds	r6, #1
 801421a:	4652      	mov	r2, sl
 801421c:	4649      	mov	r1, r9
 801421e:	9308      	str	r3, [sp, #32]
 8014220:	f7f6 fa90 	bl	800a744 <LCD_DrawHLine>
 8014224:	4642      	mov	r2, r8
 8014226:	4649      	mov	r1, r9
 8014228:	4630      	mov	r0, r6
 801422a:	f7f6 fa8b 	bl	800a744 <LCD_DrawHLine>
 801422e:	9b08      	ldr	r3, [sp, #32]
 8014230:	4652      	mov	r2, sl
 8014232:	4618      	mov	r0, r3
 8014234:	4659      	mov	r1, fp
 8014236:	f7f6 fa85 	bl	800a744 <LCD_DrawHLine>
 801423a:	4642      	mov	r2, r8
 801423c:	4659      	mov	r1, fp
 801423e:	4630      	mov	r0, r6
 8014240:	f7f6 fa80 	bl	800a744 <LCD_DrawHLine>
 8014244:	3f01      	subs	r7, #1
 8014246:	e7cc      	b.n	80141e2 <GUI__DrawTwinArc4+0x82>
 8014248:	2c01      	cmp	r4, #1
 801424a:	d0bc      	beq.n	80141c6 <GUI__DrawTwinArc4+0x66>
 801424c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801424e:	f7f4 fbd5 	bl	80089fc <GUI_SetColor>
 8014252:	9b03      	ldr	r3, [sp, #12]
 8014254:	18e3      	adds	r3, r4, r3
 8014256:	9307      	str	r3, [sp, #28]
 8014258:	9b05      	ldr	r3, [sp, #20]
 801425a:	1b1b      	subs	r3, r3, r4
 801425c:	1ea7      	subs	r7, r4, #2
 801425e:	9308      	str	r3, [sp, #32]
 8014260:	b397      	cbz	r7, 80142c8 <GUI__DrawTwinArc4+0x168>
 8014262:	9b07      	ldr	r3, [sp, #28]
 8014264:	ebc7 0b03 	rsb	fp, r7, r3
 8014268:	9b08      	ldr	r3, [sp, #32]
 801426a:	eb03 0a07 	add.w	sl, r3, r7
 801426e:	ab0d      	add	r3, sp, #52	; 0x34
 8014270:	4639      	mov	r1, r7
 8014272:	9300      	str	r3, [sp, #0]
 8014274:	aa0b      	add	r2, sp, #44	; 0x2c
 8014276:	ab0c      	add	r3, sp, #48	; 0x30
 8014278:	4620      	mov	r0, r4
 801427a:	f7ff fe4f 	bl	8013f1c <_GetTwinArcPara>
 801427e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8014280:	9a04      	ldr	r2, [sp, #16]
 8014282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014284:	1b12      	subs	r2, r2, r4
 8014286:	ebc6 0905 	rsb	r9, r6, r5
 801428a:	1a6b      	subs	r3, r5, r1
 801428c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014290:	4416      	add	r6, r2
 8014292:	eb01 0802 	add.w	r8, r1, r2
 8014296:	4618      	mov	r0, r3
 8014298:	3601      	adds	r6, #1
 801429a:	464a      	mov	r2, r9
 801429c:	4659      	mov	r1, fp
 801429e:	9309      	str	r3, [sp, #36]	; 0x24
 80142a0:	f7f6 fa50 	bl	800a744 <LCD_DrawHLine>
 80142a4:	4642      	mov	r2, r8
 80142a6:	4659      	mov	r1, fp
 80142a8:	4630      	mov	r0, r6
 80142aa:	f7f6 fa4b 	bl	800a744 <LCD_DrawHLine>
 80142ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142b0:	464a      	mov	r2, r9
 80142b2:	4618      	mov	r0, r3
 80142b4:	4651      	mov	r1, sl
 80142b6:	f7f6 fa45 	bl	800a744 <LCD_DrawHLine>
 80142ba:	4642      	mov	r2, r8
 80142bc:	4651      	mov	r1, sl
 80142be:	4630      	mov	r0, r6
 80142c0:	f7f6 fa40 	bl	800a744 <LCD_DrawHLine>
 80142c4:	3f01      	subs	r7, #1
 80142c6:	e7cb      	b.n	8014260 <GUI__DrawTwinArc4+0x100>
 80142c8:	2c02      	cmp	r4, #2
 80142ca:	f43f af7c 	beq.w	80141c6 <GUI__DrawTwinArc4+0x66>
 80142ce:	981d      	ldr	r0, [sp, #116]	; 0x74
 80142d0:	f7f4 fb94 	bl	80089fc <GUI_SetColor>
 80142d4:	9b03      	ldr	r3, [sp, #12]
 80142d6:	1ee6      	subs	r6, r4, #3
 80142d8:	eb04 0b03 	add.w	fp, r4, r3
 80142dc:	2e00      	cmp	r6, #0
 80142de:	f43f af72 	beq.w	80141c6 <GUI__DrawTwinArc4+0x66>
 80142e2:	9b05      	ldr	r3, [sp, #20]
 80142e4:	ebc4 0903 	rsb	r9, r4, r3
 80142e8:	ab0d      	add	r3, sp, #52	; 0x34
 80142ea:	4631      	mov	r1, r6
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80142f0:	ab0c      	add	r3, sp, #48	; 0x30
 80142f2:	4620      	mov	r0, r4
 80142f4:	f7ff fe12 	bl	8013f1c <_GetTwinArcPara>
 80142f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80142fa:	9904      	ldr	r1, [sp, #16]
 80142fc:	1aab      	subs	r3, r5, r2
 80142fe:	ebc6 0a0b 	rsb	sl, r6, fp
 8014302:	1b0f      	subs	r7, r1, r4
 8014304:	eb02 0807 	add.w	r8, r2, r7
 8014308:	4618      	mov	r0, r3
 801430a:	3701      	adds	r7, #1
 801430c:	9a06      	ldr	r2, [sp, #24]
 801430e:	9307      	str	r3, [sp, #28]
 8014310:	4651      	mov	r1, sl
 8014312:	f7f6 fa17 	bl	800a744 <LCD_DrawHLine>
 8014316:	4642      	mov	r2, r8
 8014318:	4651      	mov	r1, sl
 801431a:	4638      	mov	r0, r7
 801431c:	f7f6 fa12 	bl	800a744 <LCD_DrawHLine>
 8014320:	9b07      	ldr	r3, [sp, #28]
 8014322:	9a06      	ldr	r2, [sp, #24]
 8014324:	44b1      	add	r9, r6
 8014326:	4618      	mov	r0, r3
 8014328:	4649      	mov	r1, r9
 801432a:	f7f6 fa0b 	bl	800a744 <LCD_DrawHLine>
 801432e:	4642      	mov	r2, r8
 8014330:	4649      	mov	r1, r9
 8014332:	4638      	mov	r0, r7
 8014334:	f7f6 fa06 	bl	800a744 <LCD_DrawHLine>
 8014338:	3e01      	subs	r6, #1
 801433a:	e7cf      	b.n	80142dc <GUI__DrawTwinArc4+0x17c>
 801433c:	20000014 	.word	0x20000014

08014340 <GUI__FillTrippleArc>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	b095      	sub	sp, #84	; 0x54
 8014346:	4606      	mov	r6, r0
 8014348:	460c      	mov	r4, r1
 801434a:	9203      	str	r2, [sp, #12]
 801434c:	930a      	str	r3, [sp, #40]	; 0x28
 801434e:	f7f5 fd05 	bl	8009d5c <GUI_Lock>
 8014352:	4bb7      	ldr	r3, [pc, #732]	; (8014630 <GUI__FillTrippleArc+0x2f0>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801435a:	18e3      	adds	r3, r4, r3
 801435c:	9302      	str	r3, [sp, #8]
 801435e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014362:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 8014366:	9b03      	ldr	r3, [sp, #12]
 8014368:	3b01      	subs	r3, #1
 801436a:	4416      	add	r6, r2
 801436c:	b29b      	uxth	r3, r3
 801436e:	199a      	adds	r2, r3, r6
 8014370:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8014374:	9a02      	ldr	r2, [sp, #8]
 8014376:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
 801437a:	4413      	add	r3, r2
 801437c:	a812      	add	r0, sp, #72	; 0x48
 801437e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8014382:	f7fa f873 	bl	800e46c <WM__InitIVRSearch>
 8014386:	b920      	cbnz	r0, 8014392 <GUI__FillTrippleArc+0x52>
 8014388:	f7f5 fcde 	bl	8009d48 <GUI_Unlock>
 801438c:	b015      	add	sp, #84	; 0x54
 801438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014392:	9b03      	ldr	r3, [sp, #12]
 8014394:	105d      	asrs	r5, r3, #1
 8014396:	1c6b      	adds	r3, r5, #1
 8014398:	9307      	str	r3, [sp, #28]
 801439a:	1e6b      	subs	r3, r5, #1
 801439c:	9308      	str	r3, [sp, #32]
 801439e:	1eab      	subs	r3, r5, #2
 80143a0:	9309      	str	r3, [sp, #36]	; 0x24
 80143a2:	1e73      	subs	r3, r6, #1
 80143a4:	9305      	str	r3, [sp, #20]
 80143a6:	9b03      	ldr	r3, [sp, #12]
 80143a8:	18f3      	adds	r3, r6, r3
 80143aa:	1cac      	adds	r4, r5, #2
 80143ac:	9306      	str	r3, [sp, #24]
 80143ae:	9b03      	ldr	r3, [sp, #12]
 80143b0:	07db      	lsls	r3, r3, #31
 80143b2:	f100 8136 	bmi.w	8014622 <GUI__FillTrippleArc+0x2e2>
 80143b6:	2c00      	cmp	r4, #0
 80143b8:	f340 8133 	ble.w	8014622 <GUI__FillTrippleArc+0x2e2>
 80143bc:	9b02      	ldr	r3, [sp, #8]
 80143be:	9a03      	ldr	r2, [sp, #12]
 80143c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80143c2:	3b01      	subs	r3, #1
 80143c4:	4413      	add	r3, r2
 80143c6:	9304      	str	r3, [sp, #16]
 80143c8:	f7f4 fb18 	bl	80089fc <GUI_SetColor>
 80143cc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80143d0:	9b02      	ldr	r3, [sp, #8]
 80143d2:	9a04      	ldr	r2, [sp, #16]
 80143d4:	444b      	add	r3, r9
 80143d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80143d8:	43eb      	mvns	r3, r5
 80143da:	4413      	add	r3, r2
 80143dc:	930c      	str	r3, [sp, #48]	; 0x30
 80143de:	f1b9 0f01 	cmp.w	r9, #1
 80143e2:	dd42      	ble.n	801446a <GUI__FillTrippleArc+0x12a>
 80143e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143e6:	ebc9 0b03 	rsb	fp, r9, r3
 80143ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143ec:	eb03 0a09 	add.w	sl, r3, r9
 80143f0:	ab11      	add	r3, sp, #68	; 0x44
 80143f2:	9301      	str	r3, [sp, #4]
 80143f4:	ab10      	add	r3, sp, #64	; 0x40
 80143f6:	9300      	str	r3, [sp, #0]
 80143f8:	aa0e      	add	r2, sp, #56	; 0x38
 80143fa:	ab0f      	add	r3, sp, #60	; 0x3c
 80143fc:	4649      	mov	r1, r9
 80143fe:	4620      	mov	r0, r4
 8014400:	f7ff fdb6 	bl	8013f70 <_GetTrippleArcPara>
 8014404:	9b05      	ldr	r3, [sp, #20]
 8014406:	9a06      	ldr	r2, [sp, #24]
 8014408:	990e      	ldr	r1, [sp, #56]	; 0x38
 801440a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801440c:	191e      	adds	r6, r3, r4
 801440e:	1b12      	subs	r2, r2, r4
 8014410:	1a73      	subs	r3, r6, r1
 8014412:	1bf6      	subs	r6, r6, r7
 8014414:	4417      	add	r7, r2
 8014416:	3e01      	subs	r6, #1
 8014418:	3701      	adds	r7, #1
 801441a:	42be      	cmp	r6, r7
 801441c:	eb01 0802 	add.w	r8, r1, r2
 8014420:	dd0a      	ble.n	8014438 <GUI__FillTrippleArc+0xf8>
 8014422:	4618      	mov	r0, r3
 8014424:	4642      	mov	r2, r8
 8014426:	4659      	mov	r1, fp
 8014428:	930d      	str	r3, [sp, #52]	; 0x34
 801442a:	f7f6 f98b 	bl	800a744 <LCD_DrawHLine>
 801442e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014430:	4642      	mov	r2, r8
 8014432:	4651      	mov	r1, sl
 8014434:	4618      	mov	r0, r3
 8014436:	e013      	b.n	8014460 <GUI__FillTrippleArc+0x120>
 8014438:	4618      	mov	r0, r3
 801443a:	4632      	mov	r2, r6
 801443c:	4659      	mov	r1, fp
 801443e:	930d      	str	r3, [sp, #52]	; 0x34
 8014440:	f7f6 f980 	bl	800a744 <LCD_DrawHLine>
 8014444:	4642      	mov	r2, r8
 8014446:	4659      	mov	r1, fp
 8014448:	4638      	mov	r0, r7
 801444a:	f7f6 f97b 	bl	800a744 <LCD_DrawHLine>
 801444e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014450:	4632      	mov	r2, r6
 8014452:	4651      	mov	r1, sl
 8014454:	4618      	mov	r0, r3
 8014456:	f7f6 f975 	bl	800a744 <LCD_DrawHLine>
 801445a:	4642      	mov	r2, r8
 801445c:	4651      	mov	r1, sl
 801445e:	4638      	mov	r0, r7
 8014460:	f7f6 f970 	bl	800a744 <LCD_DrawHLine>
 8014464:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8014468:	e7b9      	b.n	80143de <GUI__FillTrippleArc+0x9e>
 801446a:	2c01      	cmp	r4, #1
 801446c:	f000 80d9 	beq.w	8014622 <GUI__FillTrippleArc+0x2e2>
 8014470:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014472:	f7f4 fac3 	bl	80089fc <GUI_SetColor>
 8014476:	9b07      	ldr	r3, [sp, #28]
 8014478:	9a02      	ldr	r2, [sp, #8]
 801447a:	eb03 0802 	add.w	r8, r3, r2
 801447e:	9a04      	ldr	r2, [sp, #16]
 8014480:	43eb      	mvns	r3, r5
 8014482:	4413      	add	r3, r2
 8014484:	ebc5 0808 	rsb	r8, r5, r8
 8014488:	46aa      	mov	sl, r5
 801448a:	930b      	str	r3, [sp, #44]	; 0x2c
 801448c:	f1ba 0f01 	cmp.w	sl, #1
 8014490:	dd41      	ble.n	8014516 <GUI__FillTrippleArc+0x1d6>
 8014492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014494:	eb03 0b0a 	add.w	fp, r3, sl
 8014498:	ab11      	add	r3, sp, #68	; 0x44
 801449a:	9301      	str	r3, [sp, #4]
 801449c:	ab10      	add	r3, sp, #64	; 0x40
 801449e:	9300      	str	r3, [sp, #0]
 80144a0:	aa0e      	add	r2, sp, #56	; 0x38
 80144a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80144a4:	4651      	mov	r1, sl
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7ff fd62 	bl	8013f70 <_GetTrippleArcPara>
 80144ac:	9b05      	ldr	r3, [sp, #20]
 80144ae:	9a06      	ldr	r2, [sp, #24]
 80144b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80144b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80144b4:	191e      	adds	r6, r3, r4
 80144b6:	1b12      	subs	r2, r2, r4
 80144b8:	1a73      	subs	r3, r6, r1
 80144ba:	1bf6      	subs	r6, r6, r7
 80144bc:	4417      	add	r7, r2
 80144be:	3e01      	subs	r6, #1
 80144c0:	3701      	adds	r7, #1
 80144c2:	42be      	cmp	r6, r7
 80144c4:	eb01 0902 	add.w	r9, r1, r2
 80144c8:	dd0a      	ble.n	80144e0 <GUI__FillTrippleArc+0x1a0>
 80144ca:	4618      	mov	r0, r3
 80144cc:	464a      	mov	r2, r9
 80144ce:	4641      	mov	r1, r8
 80144d0:	930c      	str	r3, [sp, #48]	; 0x30
 80144d2:	f7f6 f937 	bl	800a744 <LCD_DrawHLine>
 80144d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144d8:	464a      	mov	r2, r9
 80144da:	4659      	mov	r1, fp
 80144dc:	4618      	mov	r0, r3
 80144de:	e013      	b.n	8014508 <GUI__FillTrippleArc+0x1c8>
 80144e0:	4618      	mov	r0, r3
 80144e2:	4632      	mov	r2, r6
 80144e4:	4641      	mov	r1, r8
 80144e6:	930c      	str	r3, [sp, #48]	; 0x30
 80144e8:	f7f6 f92c 	bl	800a744 <LCD_DrawHLine>
 80144ec:	464a      	mov	r2, r9
 80144ee:	4641      	mov	r1, r8
 80144f0:	4638      	mov	r0, r7
 80144f2:	f7f6 f927 	bl	800a744 <LCD_DrawHLine>
 80144f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144f8:	4632      	mov	r2, r6
 80144fa:	4659      	mov	r1, fp
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f6 f921 	bl	800a744 <LCD_DrawHLine>
 8014502:	464a      	mov	r2, r9
 8014504:	4659      	mov	r1, fp
 8014506:	4638      	mov	r0, r7
 8014508:	f7f6 f91c 	bl	800a744 <LCD_DrawHLine>
 801450c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014510:	f108 0801 	add.w	r8, r8, #1
 8014514:	e7ba      	b.n	801448c <GUI__FillTrippleArc+0x14c>
 8014516:	2c02      	cmp	r4, #2
 8014518:	f000 8083 	beq.w	8014622 <GUI__FillTrippleArc+0x2e2>
 801451c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801451e:	f7f4 fa6d 	bl	80089fc <GUI_SetColor>
 8014522:	9b02      	ldr	r3, [sp, #8]
 8014524:	9a04      	ldr	r2, [sp, #16]
 8014526:	f8dd a020 	ldr.w	sl, [sp, #32]
 801452a:	eb04 0803 	add.w	r8, r4, r3
 801452e:	43eb      	mvns	r3, r5
 8014530:	4413      	add	r3, r2
 8014532:	ebc5 0808 	rsb	r8, r5, r8
 8014536:	930b      	str	r3, [sp, #44]	; 0x2c
 8014538:	f1ba 0f01 	cmp.w	sl, #1
 801453c:	dd41      	ble.n	80145c2 <GUI__FillTrippleArc+0x282>
 801453e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014540:	eb03 0b0a 	add.w	fp, r3, sl
 8014544:	ab11      	add	r3, sp, #68	; 0x44
 8014546:	9301      	str	r3, [sp, #4]
 8014548:	ab10      	add	r3, sp, #64	; 0x40
 801454a:	9300      	str	r3, [sp, #0]
 801454c:	aa0e      	add	r2, sp, #56	; 0x38
 801454e:	ab0f      	add	r3, sp, #60	; 0x3c
 8014550:	4651      	mov	r1, sl
 8014552:	4620      	mov	r0, r4
 8014554:	f7ff fd0c 	bl	8013f70 <_GetTrippleArcPara>
 8014558:	9b05      	ldr	r3, [sp, #20]
 801455a:	9a06      	ldr	r2, [sp, #24]
 801455c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801455e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014560:	191e      	adds	r6, r3, r4
 8014562:	1b12      	subs	r2, r2, r4
 8014564:	1a73      	subs	r3, r6, r1
 8014566:	1bf6      	subs	r6, r6, r7
 8014568:	4417      	add	r7, r2
 801456a:	3e01      	subs	r6, #1
 801456c:	3701      	adds	r7, #1
 801456e:	42be      	cmp	r6, r7
 8014570:	eb01 0902 	add.w	r9, r1, r2
 8014574:	dd0a      	ble.n	801458c <GUI__FillTrippleArc+0x24c>
 8014576:	4618      	mov	r0, r3
 8014578:	464a      	mov	r2, r9
 801457a:	4641      	mov	r1, r8
 801457c:	930c      	str	r3, [sp, #48]	; 0x30
 801457e:	f7f6 f8e1 	bl	800a744 <LCD_DrawHLine>
 8014582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014584:	464a      	mov	r2, r9
 8014586:	4659      	mov	r1, fp
 8014588:	4618      	mov	r0, r3
 801458a:	e013      	b.n	80145b4 <GUI__FillTrippleArc+0x274>
 801458c:	4618      	mov	r0, r3
 801458e:	4632      	mov	r2, r6
 8014590:	4641      	mov	r1, r8
 8014592:	930c      	str	r3, [sp, #48]	; 0x30
 8014594:	f7f6 f8d6 	bl	800a744 <LCD_DrawHLine>
 8014598:	464a      	mov	r2, r9
 801459a:	4641      	mov	r1, r8
 801459c:	4638      	mov	r0, r7
 801459e:	f7f6 f8d1 	bl	800a744 <LCD_DrawHLine>
 80145a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145a4:	4632      	mov	r2, r6
 80145a6:	4659      	mov	r1, fp
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7f6 f8cb 	bl	800a744 <LCD_DrawHLine>
 80145ae:	464a      	mov	r2, r9
 80145b0:	4659      	mov	r1, fp
 80145b2:	4638      	mov	r0, r7
 80145b4:	f7f6 f8c6 	bl	800a744 <LCD_DrawHLine>
 80145b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80145bc:	f108 0801 	add.w	r8, r8, #1
 80145c0:	e7ba      	b.n	8014538 <GUI__FillTrippleArc+0x1f8>
 80145c2:	2c03      	cmp	r4, #3
 80145c4:	d02d      	beq.n	8014622 <GUI__FillTrippleArc+0x2e2>
 80145c6:	9820      	ldr	r0, [sp, #128]	; 0x80
 80145c8:	f7f4 fa18 	bl	80089fc <GUI_SetColor>
 80145cc:	9b02      	ldr	r3, [sp, #8]
 80145ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80145d0:	f103 0803 	add.w	r8, r3, #3
 80145d4:	9b04      	ldr	r3, [sp, #16]
 80145d6:	ea6f 0905 	mvn.w	r9, r5
 80145da:	4499      	add	r9, r3
 80145dc:	b30e      	cbz	r6, 8014622 <GUI__FillTrippleArc+0x2e2>
 80145de:	ab11      	add	r3, sp, #68	; 0x44
 80145e0:	9301      	str	r3, [sp, #4]
 80145e2:	ab10      	add	r3, sp, #64	; 0x40
 80145e4:	4631      	mov	r1, r6
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	aa0e      	add	r2, sp, #56	; 0x38
 80145ea:	ab0f      	add	r3, sp, #60	; 0x3c
 80145ec:	4620      	mov	r0, r4
 80145ee:	f7ff fcbf 	bl	8013f70 <_GetTrippleArcPara>
 80145f2:	9a05      	ldr	r2, [sp, #20]
 80145f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145f6:	eb02 0a04 	add.w	sl, r2, r4
 80145fa:	9a06      	ldr	r2, [sp, #24]
 80145fc:	1b17      	subs	r7, r2, r4
 80145fe:	ebc3 0a0a 	rsb	sl, r3, sl
 8014602:	441f      	add	r7, r3
 8014604:	4641      	mov	r1, r8
 8014606:	463a      	mov	r2, r7
 8014608:	4650      	mov	r0, sl
 801460a:	f7f6 f89b 	bl	800a744 <LCD_DrawHLine>
 801460e:	eb09 0106 	add.w	r1, r9, r6
 8014612:	463a      	mov	r2, r7
 8014614:	4650      	mov	r0, sl
 8014616:	f7f6 f895 	bl	800a744 <LCD_DrawHLine>
 801461a:	3e01      	subs	r6, #1
 801461c:	f108 0801 	add.w	r8, r8, #1
 8014620:	e7dc      	b.n	80145dc <GUI__FillTrippleArc+0x29c>
 8014622:	f7f9 fe61 	bl	800e2e8 <WM__GetNextIVR>
 8014626:	2800      	cmp	r0, #0
 8014628:	f47f aec1 	bne.w	80143ae <GUI__FillTrippleArc+0x6e>
 801462c:	e6ac      	b.n	8014388 <GUI__FillTrippleArc+0x48>
 801462e:	bf00      	nop
 8014630:	20000014 	.word	0x20000014

08014634 <GUI__ManageCacheEx>:
 8014634:	2801      	cmp	r0, #1
 8014636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014638:	4606      	mov	r6, r0
 801463a:	460c      	mov	r4, r1
 801463c:	dc62      	bgt.n	8014704 <GUI__ManageCacheEx+0xd0>
 801463e:	4d33      	ldr	r5, [pc, #204]	; (801470c <GUI__ManageCacheEx+0xd8>)
 8014640:	686b      	ldr	r3, [r5, #4]
 8014642:	b103      	cbz	r3, 8014646 <GUI__ManageCacheEx+0x12>
 8014644:	4798      	blx	r3
 8014646:	2c01      	cmp	r4, #1
 8014648:	d004      	beq.n	8014654 <GUI__ManageCacheEx+0x20>
 801464a:	2c02      	cmp	r4, #2
 801464c:	d020      	beq.n	8014690 <GUI__ManageCacheEx+0x5c>
 801464e:	2c00      	cmp	r4, #0
 8014650:	d158      	bne.n	8014704 <GUI__ManageCacheEx+0xd0>
 8014652:	e033      	b.n	80146bc <GUI__ManageCacheEx+0x88>
 8014654:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8014658:	68af      	ldr	r7, [r5, #8]
 801465a:	b9af      	cbnz	r7, 8014688 <GUI__ManageCacheEx+0x54>
 801465c:	4630      	mov	r0, r6
 801465e:	f7f4 fc25 	bl	8008eac <GUI_DEVICE__GetpDriver>
 8014662:	9001      	str	r0, [sp, #4]
 8014664:	2800      	cmp	r0, #0
 8014666:	d04d      	beq.n	8014704 <GUI__ManageCacheEx+0xd0>
 8014668:	68c3      	ldr	r3, [r0, #12]
 801466a:	210d      	movs	r1, #13
 801466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801466e:	a801      	add	r0, sp, #4
 8014670:	4798      	blx	r3
 8014672:	4603      	mov	r3, r0
 8014674:	2800      	cmp	r0, #0
 8014676:	d045      	beq.n	8014704 <GUI__ManageCacheEx+0xd0>
 8014678:	4621      	mov	r1, r4
 801467a:	9801      	ldr	r0, [sp, #4]
 801467c:	4798      	blx	r3
 801467e:	68ab      	ldr	r3, [r5, #8]
 8014680:	3301      	adds	r3, #1
 8014682:	60ab      	str	r3, [r5, #8]
 8014684:	4638      	mov	r0, r7
 8014686:	e03e      	b.n	8014706 <GUI__ManageCacheEx+0xd2>
 8014688:	1c78      	adds	r0, r7, #1
 801468a:	60a8      	str	r0, [r5, #8]
 801468c:	4620      	mov	r0, r4
 801468e:	e03a      	b.n	8014706 <GUI__ManageCacheEx+0xd2>
 8014690:	4630      	mov	r0, r6
 8014692:	f7f4 fc0b 	bl	8008eac <GUI_DEVICE__GetpDriver>
 8014696:	9001      	str	r0, [sp, #4]
 8014698:	2800      	cmp	r0, #0
 801469a:	d033      	beq.n	8014704 <GUI__ManageCacheEx+0xd0>
 801469c:	68c3      	ldr	r3, [r0, #12]
 801469e:	210d      	movs	r1, #13
 80146a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146a2:	a801      	add	r0, sp, #4
 80146a4:	4798      	blx	r3
 80146a6:	4604      	mov	r4, r0
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d02b      	beq.n	8014704 <GUI__ManageCacheEx+0xd0>
 80146ac:	682b      	ldr	r3, [r5, #0]
 80146ae:	b103      	cbz	r3, 80146b2 <GUI__ManageCacheEx+0x7e>
 80146b0:	4798      	blx	r3
 80146b2:	2102      	movs	r1, #2
 80146b4:	9801      	ldr	r0, [sp, #4]
 80146b6:	47a0      	blx	r4
 80146b8:	2000      	movs	r0, #0
 80146ba:	e024      	b.n	8014706 <GUI__ManageCacheEx+0xd2>
 80146bc:	00b4      	lsls	r4, r6, #2
 80146be:	192b      	adds	r3, r5, r4
 80146c0:	689b      	ldr	r3, [r3, #8]
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d001      	beq.n	80146ca <GUI__ManageCacheEx+0x96>
 80146c6:	2001      	movs	r0, #1
 80146c8:	e015      	b.n	80146f6 <GUI__ManageCacheEx+0xc2>
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7f4 fbee 	bl	8008eac <GUI_DEVICE__GetpDriver>
 80146d0:	9001      	str	r0, [sp, #4]
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d0f7      	beq.n	80146c6 <GUI__ManageCacheEx+0x92>
 80146d6:	68c3      	ldr	r3, [r0, #12]
 80146d8:	210d      	movs	r1, #13
 80146da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146dc:	a801      	add	r0, sp, #4
 80146de:	4798      	blx	r3
 80146e0:	4606      	mov	r6, r0
 80146e2:	2800      	cmp	r0, #0
 80146e4:	d0ef      	beq.n	80146c6 <GUI__ManageCacheEx+0x92>
 80146e6:	4b09      	ldr	r3, [pc, #36]	; (801470c <GUI__ManageCacheEx+0xd8>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	b103      	cbz	r3, 80146ee <GUI__ManageCacheEx+0xba>
 80146ec:	4798      	blx	r3
 80146ee:	2100      	movs	r1, #0
 80146f0:	9801      	ldr	r0, [sp, #4]
 80146f2:	47b0      	blx	r6
 80146f4:	2000      	movs	r0, #0
 80146f6:	4425      	add	r5, r4
 80146f8:	68ab      	ldr	r3, [r5, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	bf18      	it	ne
 80146fe:	3b01      	subne	r3, #1
 8014700:	60ab      	str	r3, [r5, #8]
 8014702:	e000      	b.n	8014706 <GUI__ManageCacheEx+0xd2>
 8014704:	2001      	movs	r0, #1
 8014706:	b003      	add	sp, #12
 8014708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801470a:	bf00      	nop
 801470c:	20000af4 	.word	0x20000af4

08014710 <GUI__ManageCache>:
 8014710:	4b02      	ldr	r3, [pc, #8]	; (801471c <GUI__ManageCache+0xc>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	4601      	mov	r1, r0
 8014716:	7c58      	ldrb	r0, [r3, #17]
 8014718:	f7ff bf8c 	b.w	8014634 <GUI__ManageCacheEx>
 801471c:	20000014 	.word	0x20000014

08014720 <LCD_SetClipRectEx>:
 8014720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014722:	4c09      	ldr	r4, [pc, #36]	; (8014748 <LCD_SetClipRectEx+0x28>)
 8014724:	6823      	ldr	r3, [r4, #0]
 8014726:	7c5a      	ldrb	r2, [r3, #17]
 8014728:	4b08      	ldr	r3, [pc, #32]	; (801474c <LCD_SetClipRectEx+0x2c>)
 801472a:	4605      	mov	r5, r0
 801472c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014730:	68c3      	ldr	r3, [r0, #12]
 8014732:	4669      	mov	r1, sp
 8014734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014736:	4798      	blx	r3
 8014738:	6820      	ldr	r0, [r4, #0]
 801473a:	466a      	mov	r2, sp
 801473c:	4629      	mov	r1, r5
 801473e:	3008      	adds	r0, #8
 8014740:	f7f5 ff3b 	bl	800a5ba <GUI__IntersectRects>
 8014744:	b003      	add	sp, #12
 8014746:	bd30      	pop	{r4, r5, pc}
 8014748:	20000014 	.word	0x20000014
 801474c:	20027bb0 	.word	0x20027bb0

08014750 <GUI_MEMDEV__WriteToActiveAt>:
 8014750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014754:	460f      	mov	r7, r1
 8014756:	4690      	mov	r8, r2
 8014758:	4606      	mov	r6, r0
 801475a:	f7f3 fdd5 	bl	8008308 <GUI_ALLOC_LockH>
 801475e:	6803      	ldr	r3, [r0, #0]
 8014760:	ac02      	add	r4, sp, #8
 8014762:	68db      	ldr	r3, [r3, #12]
 8014764:	f844 0d04 	str.w	r0, [r4, #-4]!
 8014768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801476a:	2116      	movs	r1, #22
 801476c:	2000      	movs	r0, #0
 801476e:	4798      	blx	r3
 8014770:	4605      	mov	r5, r0
 8014772:	4620      	mov	r0, r4
 8014774:	f7f3 fdd6 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014778:	b11d      	cbz	r5, 8014782 <GUI_MEMDEV__WriteToActiveAt+0x32>
 801477a:	4642      	mov	r2, r8
 801477c:	4639      	mov	r1, r7
 801477e:	4630      	mov	r0, r6
 8014780:	47a8      	blx	r5
 8014782:	b002      	add	sp, #8
 8014784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014788 <GUI_MEMDEV__CreateFixed>:
 8014788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801478c:	4d46      	ldr	r5, [pc, #280]	; (80148a8 <GUI_MEMDEV__CreateFixed+0x120>)
 801478e:	b087      	sub	sp, #28
 8014790:	461c      	mov	r4, r3
 8014792:	682b      	ldr	r3, [r5, #0]
 8014794:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014796:	7c5b      	ldrb	r3, [r3, #17]
 8014798:	4681      	mov	r9, r0
 801479a:	468a      	mov	sl, r1
 801479c:	4690      	mov	r8, r2
 801479e:	9912      	ldr	r1, [sp, #72]	; 0x48
 80147a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80147a2:	2200      	movs	r2, #0
 80147a4:	f7f4 fb94 	bl	8008ed0 <GUI_DEVICE_Create>
 80147a8:	9503      	str	r5, [sp, #12]
 80147aa:	4606      	mov	r6, r0
 80147ac:	b380      	cbz	r0, 8014810 <GUI_MEMDEV__CreateFixed+0x88>
 80147ae:	6903      	ldr	r3, [r0, #16]
 80147b0:	689b      	ldr	r3, [r3, #8]
 80147b2:	4798      	blx	r3
 80147b4:	f7f6 fe3f 	bl	800b436 <LCD__GetBPPDevice>
 80147b8:	fb00 f508 	mul.w	r5, r0, r8
 80147bc:	9002      	str	r0, [sp, #8]
 80147be:	f7f3 feeb 	bl	8008598 <GUI_ALLOC_RequestSize>
 80147c2:	f017 0701 	ands.w	r7, r7, #1
 80147c6:	bf08      	it	eq
 80147c8:	2304      	moveq	r3, #4
 80147ca:	f105 0507 	add.w	r5, r5, #7
 80147ce:	bf04      	itt	eq
 80147d0:	fb90 f0f3 	sdiveq	r0, r0, r3
 80147d4:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 80147d8:	2c00      	cmp	r4, #0
 80147da:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 80147de:	dc44      	bgt.n	801486a <GUI_MEMDEV__CreateFixed+0xe2>
 80147e0:	b11d      	cbz	r5, 80147ea <GUI_MEMDEV__CreateFixed+0x62>
 80147e2:	3818      	subs	r0, #24
 80147e4:	fbb0 f0f5 	udiv	r0, r0, r5
 80147e8:	e000      	b.n	80147ec <GUI_MEMDEV__CreateFixed+0x64>
 80147ea:	4628      	mov	r0, r5
 80147ec:	4264      	negs	r4, r4
 80147ee:	4284      	cmp	r4, r0
 80147f0:	bfa8      	it	ge
 80147f2:	4604      	movge	r4, r0
 80147f4:	b977      	cbnz	r7, 8014814 <GUI_MEMDEV__CreateFixed+0x8c>
 80147f6:	9700      	str	r7, [sp, #0]
 80147f8:	4623      	mov	r3, r4
 80147fa:	4642      	mov	r2, r8
 80147fc:	4651      	mov	r1, sl
 80147fe:	4648      	mov	r0, r9
 8014800:	f000 fc22 	bl	8015048 <GUI_USAGE_BM_Create>
 8014804:	2c00      	cmp	r4, #0
 8014806:	4683      	mov	fp, r0
 8014808:	dc39      	bgt.n	801487e <GUI_MEMDEV__CreateFixed+0xf6>
 801480a:	4630      	mov	r0, r6
 801480c:	f7f4 fb5e 	bl	8008ecc <GUI_DEVICE_Delete>
 8014810:	2000      	movs	r0, #0
 8014812:	e046      	b.n	80148a2 <GUI_MEMDEV__CreateFixed+0x11a>
 8014814:	2c00      	cmp	r4, #0
 8014816:	ddf8      	ble.n	801480a <GUI_MEMDEV__CreateFixed+0x82>
 8014818:	fb05 f004 	mul.w	r0, r5, r4
 801481c:	3018      	adds	r0, #24
 801481e:	f7f3 ff4f 	bl	80086c0 <GUI_ALLOC_AllocNoInit>
 8014822:	4607      	mov	r7, r0
 8014824:	2800      	cmp	r0, #0
 8014826:	d0f0      	beq.n	801480a <GUI_MEMDEV__CreateFixed+0x82>
 8014828:	f04f 0b00 	mov.w	fp, #0
 801482c:	4638      	mov	r0, r7
 801482e:	f7f3 fd6b 	bl	8008308 <GUI_ALLOC_LockH>
 8014832:	4603      	mov	r3, r0
 8014834:	a806      	add	r0, sp, #24
 8014836:	9a02      	ldr	r2, [sp, #8]
 8014838:	f840 3d04 	str.w	r3, [r0, #-4]!
 801483c:	f8a3 9004 	strh.w	r9, [r3, #4]
 8014840:	601e      	str	r6, [r3, #0]
 8014842:	f8a3 a006 	strh.w	sl, [r3, #6]
 8014846:	f8a3 8008 	strh.w	r8, [r3, #8]
 801484a:	815c      	strh	r4, [r3, #10]
 801484c:	60dd      	str	r5, [r3, #12]
 801484e:	611a      	str	r2, [r3, #16]
 8014850:	f8c3 b014 	str.w	fp, [r3, #20]
 8014854:	f7f3 fd66 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801485a:	6133      	str	r3, [r6, #16]
 801485c:	9b03      	ldr	r3, [sp, #12]
 801485e:	60b7      	str	r7, [r6, #8]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	7c5b      	ldrb	r3, [r3, #17]
 8014864:	61b3      	str	r3, [r6, #24]
 8014866:	4638      	mov	r0, r7
 8014868:	e01b      	b.n	80148a2 <GUI_MEMDEV__CreateFixed+0x11a>
 801486a:	2f00      	cmp	r7, #0
 801486c:	d1d4      	bne.n	8014818 <GUI_MEMDEV__CreateFixed+0x90>
 801486e:	9700      	str	r7, [sp, #0]
 8014870:	4623      	mov	r3, r4
 8014872:	4642      	mov	r2, r8
 8014874:	4651      	mov	r1, sl
 8014876:	4648      	mov	r0, r9
 8014878:	f000 fbe6 	bl	8015048 <GUI_USAGE_BM_Create>
 801487c:	4683      	mov	fp, r0
 801487e:	fb05 f004 	mul.w	r0, r5, r4
 8014882:	3018      	adds	r0, #24
 8014884:	f7f3 ff2a 	bl	80086dc <GUI_ALLOC_AllocZero>
 8014888:	4607      	mov	r7, r0
 801488a:	2800      	cmp	r0, #0
 801488c:	d1ce      	bne.n	801482c <GUI_MEMDEV__CreateFixed+0xa4>
 801488e:	4630      	mov	r0, r6
 8014890:	f7f4 fb1c 	bl	8008ecc <GUI_DEVICE_Delete>
 8014894:	f1bb 0f00 	cmp.w	fp, #0
 8014898:	d0ba      	beq.n	8014810 <GUI_MEMDEV__CreateFixed+0x88>
 801489a:	4658      	mov	r0, fp
 801489c:	f7f3 fd72 	bl	8008384 <GUI_ALLOC_Free>
 80148a0:	e7e1      	b.n	8014866 <GUI_MEMDEV__CreateFixed+0xde>
 80148a2:	b007      	add	sp, #28
 80148a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148a8:	20000014 	.word	0x20000014

080148ac <GUI_MEMDEV_GetBitsPerPixel>:
 80148ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148ae:	4604      	mov	r4, r0
 80148b0:	b198      	cbz	r0, 80148da <GUI_MEMDEV_GetBitsPerPixel+0x2e>
 80148b2:	f7f5 fa53 	bl	8009d5c <GUI_Lock>
 80148b6:	4620      	mov	r0, r4
 80148b8:	f7f3 fd26 	bl	8008308 <GUI_ALLOC_LockH>
 80148bc:	6803      	ldr	r3, [r0, #0]
 80148be:	ad02      	add	r5, sp, #8
 80148c0:	691b      	ldr	r3, [r3, #16]
 80148c2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	4798      	blx	r3
 80148ca:	f7f6 fdb4 	bl	800b436 <LCD__GetBPPDevice>
 80148ce:	4604      	mov	r4, r0
 80148d0:	4628      	mov	r0, r5
 80148d2:	f7f3 fd27 	bl	8008324 <GUI_ALLOC_UnlockH>
 80148d6:	f7f5 fa37 	bl	8009d48 <GUI_Unlock>
 80148da:	4620      	mov	r0, r4
 80148dc:	b003      	add	sp, #12
 80148de:	bd30      	pop	{r4, r5, pc}

080148e0 <GUI_MEMDEV_Delete>:
 80148e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80148e2:	4604      	mov	r4, r0
 80148e4:	b1f0      	cbz	r0, 8014924 <GUI_MEMDEV_Delete+0x44>
 80148e6:	f7f5 fa39 	bl	8009d5c <GUI_Lock>
 80148ea:	4b0f      	ldr	r3, [pc, #60]	; (8014928 <GUI_MEMDEV_Delete+0x48>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80148f0:	429c      	cmp	r4, r3
 80148f2:	d101      	bne.n	80148f8 <GUI_MEMDEV_Delete+0x18>
 80148f4:	f7f4 f86a 	bl	80089cc <GUI_SelectLCD>
 80148f8:	4620      	mov	r0, r4
 80148fa:	f7f3 fd05 	bl	8008308 <GUI_ALLOC_LockH>
 80148fe:	9001      	str	r0, [sp, #4]
 8014900:	6940      	ldr	r0, [r0, #20]
 8014902:	b108      	cbz	r0, 8014908 <GUI_MEMDEV_Delete+0x28>
 8014904:	f7f8 fd52 	bl	800d3ac <GUI_USAGE_DecUseCnt>
 8014908:	ad02      	add	r5, sp, #8
 801490a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801490e:	6818      	ldr	r0, [r3, #0]
 8014910:	f7f4 fadc 	bl	8008ecc <GUI_DEVICE_Delete>
 8014914:	4628      	mov	r0, r5
 8014916:	f7f3 fd05 	bl	8008324 <GUI_ALLOC_UnlockH>
 801491a:	4620      	mov	r0, r4
 801491c:	f7f3 fd32 	bl	8008384 <GUI_ALLOC_Free>
 8014920:	f7f5 fa12 	bl	8009d48 <GUI_Unlock>
 8014924:	b003      	add	sp, #12
 8014926:	bd30      	pop	{r4, r5, pc}
 8014928:	20000014 	.word	0x20000014

0801492c <GUI_MEMDEV_CreateEx>:
 801492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014930:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014932:	4607      	mov	r7, r0
 8014934:	469a      	mov	sl, r3
 8014936:	4688      	mov	r8, r1
 8014938:	4691      	mov	r9, r2
 801493a:	f7f5 fa0f 	bl	8009d5c <GUI_Lock>
 801493e:	4b19      	ldr	r3, [pc, #100]	; (80149a4 <GUI_MEMDEV_CreateEx+0x78>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	7c58      	ldrb	r0, [r3, #17]
 8014944:	4b18      	ldr	r3, [pc, #96]	; (80149a8 <GUI_MEMDEV_CreateEx+0x7c>)
 8014946:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801494a:	68e3      	ldr	r3, [r4, #12]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b04      	cmp	r3, #4
 8014950:	d006      	beq.n	8014960 <GUI_MEMDEV_CreateEx+0x34>
 8014952:	6824      	ldr	r4, [r4, #0]
 8014954:	2c00      	cmp	r4, #0
 8014956:	d1f8      	bne.n	801494a <GUI_MEMDEV_CreateEx+0x1e>
 8014958:	f7f4 faa8 	bl	8008eac <GUI_DEVICE__GetpDriver>
 801495c:	4604      	mov	r4, r0
 801495e:	b1e8      	cbz	r0, 801499c <GUI_MEMDEV_CreateEx+0x70>
 8014960:	68e3      	ldr	r3, [r4, #12]
 8014962:	2101      	movs	r1, #1
 8014964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014966:	4620      	mov	r0, r4
 8014968:	4798      	blx	r3
 801496a:	4606      	mov	r6, r0
 801496c:	b198      	cbz	r0, 8014996 <GUI_MEMDEV_CreateEx+0x6a>
 801496e:	6924      	ldr	r4, [r4, #16]
 8014970:	68a3      	ldr	r3, [r4, #8]
 8014972:	4798      	blx	r3
 8014974:	3001      	adds	r0, #1
 8014976:	bf08      	it	eq
 8014978:	4c0c      	ldreq	r4, [pc, #48]	; (80149ac <GUI_MEMDEV_CreateEx+0x80>)
 801497a:	9402      	str	r4, [sp, #8]
 801497c:	bf08      	it	eq
 801497e:	f045 0501 	orreq.w	r5, r5, #1
 8014982:	e88d 0060 	stmia.w	sp, {r5, r6}
 8014986:	4653      	mov	r3, sl
 8014988:	464a      	mov	r2, r9
 801498a:	4641      	mov	r1, r8
 801498c:	4638      	mov	r0, r7
 801498e:	f7ff fefb 	bl	8014788 <GUI_MEMDEV__CreateFixed>
 8014992:	4604      	mov	r4, r0
 8014994:	e000      	b.n	8014998 <GUI_MEMDEV_CreateEx+0x6c>
 8014996:	4604      	mov	r4, r0
 8014998:	f7f5 f9d6 	bl	8009d48 <GUI_Unlock>
 801499c:	4620      	mov	r0, r4
 801499e:	b004      	add	sp, #16
 80149a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149a4:	20000014 	.word	0x20000014
 80149a8:	20027bb0 	.word	0x20027bb0
 80149ac:	0801be60 	.word	0x0801be60

080149b0 <GUI_MEMDEV_Select>:
 80149b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149b2:	4606      	mov	r6, r0
 80149b4:	f7f5 f9d2 	bl	8009d5c <GUI_Lock>
 80149b8:	4b11      	ldr	r3, [pc, #68]	; (8014a00 <GUI_MEMDEV_Select+0x50>)
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	461c      	mov	r4, r3
 80149be:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80149c0:	b916      	cbnz	r6, 80149c8 <GUI_MEMDEV_Select+0x18>
 80149c2:	f7f4 f803 	bl	80089cc <GUI_SelectLCD>
 80149c6:	e016      	b.n	80149f6 <GUI_MEMDEV_Select+0x46>
 80149c8:	b10f      	cbz	r7, 80149ce <GUI_MEMDEV_Select+0x1e>
 80149ca:	f7f3 ffff 	bl	80089cc <GUI_SelectLCD>
 80149ce:	f7f9 ff11 	bl	800e7f4 <WM_Deactivate>
 80149d2:	4630      	mov	r0, r6
 80149d4:	f7f3 fc98 	bl	8008308 <GUI_ALLOC_LockH>
 80149d8:	ad02      	add	r5, sp, #8
 80149da:	6823      	ldr	r3, [r4, #0]
 80149dc:	f845 0d04 	str.w	r0, [r5, #-4]!
 80149e0:	661e      	str	r6, [r3, #96]	; 0x60
 80149e2:	6800      	ldr	r0, [r0, #0]
 80149e4:	f7f4 fab2 	bl	8008f4c <GUI_DEVICE_Link>
 80149e8:	4628      	mov	r0, r5
 80149ea:	f7f3 fc9b 	bl	8008324 <GUI_ALLOC_UnlockH>
 80149ee:	f7f7 f9a5 	bl	800bd3c <LCD_UpdateColorIndices>
 80149f2:	f7f6 f923 	bl	800ac3c <LCD_SetClipRectMax>
 80149f6:	f7f5 f9a7 	bl	8009d48 <GUI_Unlock>
 80149fa:	4638      	mov	r0, r7
 80149fc:	b003      	add	sp, #12
 80149fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a00:	20000014 	.word	0x20000014

08014a04 <GUI_MEMDEV_CopyToLCDAt>:
 8014a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a08:	460c      	mov	r4, r1
 8014a0a:	b085      	sub	sp, #20
 8014a0c:	4615      	mov	r5, r2
 8014a0e:	4606      	mov	r6, r0
 8014a10:	2800      	cmp	r0, #0
 8014a12:	d045      	beq.n	8014aa0 <GUI_MEMDEV_CopyToLCDAt+0x9c>
 8014a14:	f7f5 f9a2 	bl	8009d5c <GUI_Lock>
 8014a18:	2000      	movs	r0, #0
 8014a1a:	f7f4 f80d 	bl	8008a38 <GUI_SetDrawMode>
 8014a1e:	4b22      	ldr	r3, [pc, #136]	; (8014aa8 <GUI_MEMDEV_CopyToLCDAt+0xa4>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4607      	mov	r7, r0
 8014a24:	4630      	mov	r0, r6
 8014a26:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8014a2a:	f7f3 fc6d 	bl	8008308 <GUI_ALLOC_LockH>
 8014a2e:	6803      	ldr	r3, [r0, #0]
 8014a30:	9001      	str	r0, [sp, #4]
 8014a32:	6998      	ldr	r0, [r3, #24]
 8014a34:	f7f5 f944 	bl	8009cc0 <GUI_SelectLayer>
 8014a38:	9a01      	ldr	r2, [sp, #4]
 8014a3a:	4b1c      	ldr	r3, [pc, #112]	; (8014aac <GUI_MEMDEV_CopyToLCDAt+0xa8>)
 8014a3c:	429c      	cmp	r4, r3
 8014a3e:	8913      	ldrh	r3, [r2, #8]
 8014a40:	bf04      	itt	eq
 8014a42:	f9b2 4004 	ldrsheq.w	r4, [r2, #4]
 8014a46:	f9b2 5006 	ldrsheq.w	r5, [r2, #6]
 8014a4a:	f8ad 4008 	strh.w	r4, [sp, #8]
 8014a4e:	3b01      	subs	r3, #1
 8014a50:	4423      	add	r3, r4
 8014a52:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014a56:	8953      	ldrh	r3, [r2, #10]
 8014a58:	f8ad 500a 	strh.w	r5, [sp, #10]
 8014a5c:	3b01      	subs	r3, #1
 8014a5e:	442b      	add	r3, r5
 8014a60:	4681      	mov	r9, r0
 8014a62:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014a66:	f7f9 febd 	bl	800e7e4 <WM_Activate>
 8014a6a:	a801      	add	r0, sp, #4
 8014a6c:	f7f3 fc5a 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014a70:	a802      	add	r0, sp, #8
 8014a72:	f7f9 fcfb 	bl	800e46c <WM__InitIVRSearch>
 8014a76:	b958      	cbnz	r0, 8014a90 <GUI_MEMDEV_CopyToLCDAt+0x8c>
 8014a78:	4648      	mov	r0, r9
 8014a7a:	f7f5 f921 	bl	8009cc0 <GUI_SelectLayer>
 8014a7e:	4640      	mov	r0, r8
 8014a80:	f7ff ff96 	bl	80149b0 <GUI_MEMDEV_Select>
 8014a84:	4638      	mov	r0, r7
 8014a86:	f7f3 ffd7 	bl	8008a38 <GUI_SetDrawMode>
 8014a8a:	f7f5 f95d 	bl	8009d48 <GUI_Unlock>
 8014a8e:	e007      	b.n	8014aa0 <GUI_MEMDEV_CopyToLCDAt+0x9c>
 8014a90:	462a      	mov	r2, r5
 8014a92:	4621      	mov	r1, r4
 8014a94:	4630      	mov	r0, r6
 8014a96:	f000 fb83 	bl	80151a0 <GUI_MEMDEV__WriteToActiveOpaque>
 8014a9a:	f7f9 fc25 	bl	800e2e8 <WM__GetNextIVR>
 8014a9e:	e7ea      	b.n	8014a76 <GUI_MEMDEV_CopyToLCDAt+0x72>
 8014aa0:	b005      	add	sp, #20
 8014aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014aa6:	bf00      	nop
 8014aa8:	20000014 	.word	0x20000014
 8014aac:	fffff001 	.word	0xfffff001

08014ab0 <GUI_MEMDEV_CopyToLCD>:
 8014ab0:	4a01      	ldr	r2, [pc, #4]	; (8014ab8 <GUI_MEMDEV_CopyToLCD+0x8>)
 8014ab2:	4611      	mov	r1, r2
 8014ab4:	f7ff bfa6 	b.w	8014a04 <GUI_MEMDEV_CopyToLCDAt>
 8014ab8:	fffff001 	.word	0xfffff001

08014abc <GUI_MEMDEV_Draw>:
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	b087      	sub	sp, #28
 8014ac2:	4606      	mov	r6, r0
 8014ac4:	9203      	str	r2, [sp, #12]
 8014ac6:	4698      	mov	r8, r3
 8014ac8:	9102      	str	r1, [sp, #8]
 8014aca:	f7f5 f947 	bl	8009d5c <GUI_Lock>
 8014ace:	4b54      	ldr	r3, [pc, #336]	; (8014c20 <GUI_MEMDEV_Draw+0x164>)
 8014ad0:	681a      	ldr	r2, [r3, #0]
 8014ad2:	7c54      	ldrb	r4, [r2, #17]
 8014ad4:	4a53      	ldr	r2, [pc, #332]	; (8014c24 <GUI_MEMDEV_Draw+0x168>)
 8014ad6:	5712      	ldrsb	r2, [r2, r4]
 8014ad8:	2a01      	cmp	r2, #1
 8014ada:	4620      	mov	r0, r4
 8014adc:	469b      	mov	fp, r3
 8014ade:	dd06      	ble.n	8014aee <GUI_MEMDEV_Draw+0x32>
 8014ae0:	f7f6 fbec 	bl	800b2bc <LCD_GetXSizeEx>
 8014ae4:	4681      	mov	r9, r0
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f7f6 fbeb 	bl	800b2c2 <LCD_GetYSizeEx>
 8014aec:	e005      	b.n	8014afa <GUI_MEMDEV_Draw+0x3e>
 8014aee:	f7f6 fbeb 	bl	800b2c8 <LCD_GetVXSizeEx>
 8014af2:	4681      	mov	r9, r0
 8014af4:	4620      	mov	r0, r4
 8014af6:	f7f6 fbea 	bl	800b2ce <LCD_GetVYSizeEx>
 8014afa:	4604      	mov	r4, r0
 8014afc:	b336      	cbz	r6, 8014b4c <GUI_MEMDEV_Draw+0x90>
 8014afe:	a905      	add	r1, sp, #20
 8014b00:	a804      	add	r0, sp, #16
 8014b02:	f7f3 fe87 	bl	8008814 <GUI_GetOrg>
 8014b06:	9a04      	ldr	r2, [sp, #16]
 8014b08:	9b05      	ldr	r3, [sp, #20]
 8014b0a:	f9b6 7000 	ldrsh.w	r7, [r6]
 8014b0e:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 8014b12:	4491      	add	r9, r2
 8014b14:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014b18:	441c      	add	r4, r3
 8014b1a:	f9b6 9004 	ldrsh.w	r9, [r6, #4]
 8014b1e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8014b22:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8014b26:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8014b2a:	3c01      	subs	r4, #1
 8014b2c:	454a      	cmp	r2, r9
 8014b2e:	bfd4      	ite	le
 8014b30:	ebc7 0902 	rsble	r9, r7, r2
 8014b34:	ebc7 0909 	rsbgt	r9, r7, r9
 8014b38:	429c      	cmp	r4, r3
 8014b3a:	bfd4      	ite	le
 8014b3c:	ebc5 0404 	rsble	r4, r5, r4
 8014b40:	ebc5 0403 	rsbgt	r4, r5, r3
 8014b44:	f109 0901 	add.w	r9, r9, #1
 8014b48:	3401      	adds	r4, #1
 8014b4a:	e001      	b.n	8014b50 <GUI_MEMDEV_Draw+0x94>
 8014b4c:	4635      	mov	r5, r6
 8014b4e:	4637      	mov	r7, r6
 8014b50:	f1b8 0f00 	cmp.w	r8, #0
 8014b54:	d101      	bne.n	8014b5a <GUI_MEMDEV_Draw+0x9e>
 8014b56:	f1c4 0800 	rsb	r8, r4, #0
 8014b5a:	f1b9 0f00 	cmp.w	r9, #0
 8014b5e:	dd01      	ble.n	8014b64 <GUI_MEMDEV_Draw+0xa8>
 8014b60:	2c00      	cmp	r4, #0
 8014b62:	dc03      	bgt.n	8014b6c <GUI_MEMDEV_Draw+0xb0>
 8014b64:	f7f5 f8f0 	bl	8009d48 <GUI_Unlock>
 8014b68:	2000      	movs	r0, #0
 8014b6a:	e055      	b.n	8014c18 <GUI_MEMDEV_Draw+0x15c>
 8014b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b6e:	9300      	str	r3, [sp, #0]
 8014b70:	464a      	mov	r2, r9
 8014b72:	4643      	mov	r3, r8
 8014b74:	4629      	mov	r1, r5
 8014b76:	4638      	mov	r0, r7
 8014b78:	f7ff fed8 	bl	801492c <GUI_MEMDEV_CreateEx>
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	b930      	cbnz	r0, 8014b8e <GUI_MEMDEV_Draw+0xd2>
 8014b80:	9803      	ldr	r0, [sp, #12]
 8014b82:	9b02      	ldr	r3, [sp, #8]
 8014b84:	4798      	blx	r3
 8014b86:	f7f5 f8df 	bl	8009d48 <GUI_Unlock>
 8014b8a:	2001      	movs	r0, #1
 8014b8c:	e044      	b.n	8014c18 <GUI_MEMDEV_Draw+0x15c>
 8014b8e:	f000 f889 	bl	8014ca4 <GUI_MEMDEV_GetYSize>
 8014b92:	4284      	cmp	r4, r0
 8014b94:	4680      	mov	r8, r0
 8014b96:	d006      	beq.n	8014ba6 <GUI_MEMDEV_Draw+0xea>
 8014b98:	f8db 3000 	ldr.w	r3, [fp]
 8014b9c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8014b9e:	b110      	cbz	r0, 8014ba6 <GUI_MEMDEV_Draw+0xea>
 8014ba0:	2132      	movs	r1, #50	; 0x32
 8014ba2:	f7fa fb87 	bl	800f2b4 <WM__SendMessageNoPara>
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	f7ff ff02 	bl	80149b0 <GUI_MEMDEV_Select>
 8014bac:	46a2      	mov	sl, r4
 8014bae:	f04f 0900 	mov.w	r9, #0
 8014bb2:	45d0      	cmp	r8, sl
 8014bb4:	dd03      	ble.n	8014bbe <GUI_MEMDEV_Draw+0x102>
 8014bb6:	4651      	mov	r1, sl
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f000 f88f 	bl	8014cdc <GUI_MEMDEV_ReduceYSize>
 8014bbe:	f1b9 0f00 	cmp.w	r9, #0
 8014bc2:	d008      	beq.n	8014bd6 <GUI_MEMDEV_Draw+0x11a>
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	eb05 0209 	add.w	r2, r5, r9
 8014bca:	4639      	mov	r1, r7
 8014bcc:	f000 f8a2 	bl	8014d14 <GUI_MEMDEV_SetOrg>
 8014bd0:	4630      	mov	r0, r6
 8014bd2:	f000 f82b 	bl	8014c2c <GUI_MEMDEV_Clear>
 8014bd6:	9b02      	ldr	r3, [sp, #8]
 8014bd8:	9803      	ldr	r0, [sp, #12]
 8014bda:	4798      	blx	r3
 8014bdc:	4b12      	ldr	r3, [pc, #72]	; (8014c28 <GUI_MEMDEV_Draw+0x16c>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	b10b      	cbz	r3, 8014be6 <GUI_MEMDEV_Draw+0x12a>
 8014be2:	2000      	movs	r0, #0
 8014be4:	4798      	blx	r3
 8014be6:	4630      	mov	r0, r6
 8014be8:	44c1      	add	r9, r8
 8014bea:	f7ff ff61 	bl	8014ab0 <GUI_MEMDEV_CopyToLCD>
 8014bee:	454c      	cmp	r4, r9
 8014bf0:	ebc8 0a0a 	rsb	sl, r8, sl
 8014bf4:	dcdd      	bgt.n	8014bb2 <GUI_MEMDEV_Draw+0xf6>
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f7ff fe72 	bl	80148e0 <GUI_MEMDEV_Delete>
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	f7ff fed7 	bl	80149b0 <GUI_MEMDEV_Select>
 8014c02:	4544      	cmp	r4, r8
 8014c04:	d0ae      	beq.n	8014b64 <GUI_MEMDEV_Draw+0xa8>
 8014c06:	f8db 3000 	ldr.w	r3, [fp]
 8014c0a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	d0a9      	beq.n	8014b64 <GUI_MEMDEV_Draw+0xa8>
 8014c10:	2133      	movs	r1, #51	; 0x33
 8014c12:	f7fa fb4f 	bl	800f2b4 <WM__SendMessageNoPara>
 8014c16:	e7a5      	b.n	8014b64 <GUI_MEMDEV_Draw+0xa8>
 8014c18:	b007      	add	sp, #28
 8014c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1e:	bf00      	nop
 8014c20:	20000014 	.word	0x20000014
 8014c24:	20027b60 	.word	0x20027b60
 8014c28:	20000b0c 	.word	0x20000b0c

08014c2c <GUI_MEMDEV_Clear>:
 8014c2c:	b513      	push	{r0, r1, r4, lr}
 8014c2e:	4604      	mov	r4, r0
 8014c30:	b918      	cbnz	r0, 8014c3a <GUI_MEMDEV_Clear+0xe>
 8014c32:	4b10      	ldr	r3, [pc, #64]	; (8014c74 <GUI_MEMDEV_Clear+0x48>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8014c38:	b1d4      	cbz	r4, 8014c70 <GUI_MEMDEV_Clear+0x44>
 8014c3a:	f7f5 f88f 	bl	8009d5c <GUI_Lock>
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f7f3 fb62 	bl	8008308 <GUI_ALLOC_LockH>
 8014c44:	ab02      	add	r3, sp, #8
 8014c46:	6944      	ldr	r4, [r0, #20]
 8014c48:	f843 0d08 	str.w	r0, [r3, #-8]!
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7f3 fb69 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014c52:	b15c      	cbz	r4, 8014c6c <GUI_MEMDEV_Clear+0x40>
 8014c54:	4620      	mov	r0, r4
 8014c56:	f7f3 fb57 	bl	8008308 <GUI_ALLOC_LockH>
 8014c5a:	ac02      	add	r4, sp, #8
 8014c5c:	6883      	ldr	r3, [r0, #8]
 8014c5e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8014c62:	689b      	ldr	r3, [r3, #8]
 8014c64:	4798      	blx	r3
 8014c66:	4620      	mov	r0, r4
 8014c68:	f7f3 fb5c 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014c6c:	f7f5 f86c 	bl	8009d48 <GUI_Unlock>
 8014c70:	b002      	add	sp, #8
 8014c72:	bd10      	pop	{r4, pc}
 8014c74:	20000014 	.word	0x20000014

08014c78 <GUI_MEMDEV_GetDataPtr>:
 8014c78:	b513      	push	{r0, r1, r4, lr}
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	b170      	cbz	r0, 8014c9c <GUI_MEMDEV_GetDataPtr+0x24>
 8014c7e:	f7f5 f86d 	bl	8009d5c <GUI_Lock>
 8014c82:	4620      	mov	r0, r4
 8014c84:	f7f3 fb40 	bl	8008308 <GUI_ALLOC_LockH>
 8014c88:	ab02      	add	r3, sp, #8
 8014c8a:	f100 0418 	add.w	r4, r0, #24
 8014c8e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7f3 fb46 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014c98:	f7f5 f856 	bl	8009d48 <GUI_Unlock>
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	b002      	add	sp, #8
 8014ca0:	bd10      	pop	{r4, pc}
	...

08014ca4 <GUI_MEMDEV_GetYSize>:
 8014ca4:	b513      	push	{r0, r1, r4, lr}
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	f7f5 f858 	bl	8009d5c <GUI_Lock>
 8014cac:	b91c      	cbnz	r4, 8014cb6 <GUI_MEMDEV_GetYSize+0x12>
 8014cae:	4b0a      	ldr	r3, [pc, #40]	; (8014cd8 <GUI_MEMDEV_GetYSize+0x34>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8014cb4:	b154      	cbz	r4, 8014ccc <GUI_MEMDEV_GetYSize+0x28>
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f7f3 fb26 	bl	8008308 <GUI_ALLOC_LockH>
 8014cbc:	ab02      	add	r3, sp, #8
 8014cbe:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8014cc2:	f843 0d04 	str.w	r0, [r3, #-4]!
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7f3 fb2c 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014ccc:	f7f5 f83c 	bl	8009d48 <GUI_Unlock>
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	b002      	add	sp, #8
 8014cd4:	bd10      	pop	{r4, pc}
 8014cd6:	bf00      	nop
 8014cd8:	20000014 	.word	0x20000014

08014cdc <GUI_MEMDEV_ReduceYSize>:
 8014cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014cde:	460d      	mov	r5, r1
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	b918      	cbnz	r0, 8014cec <GUI_MEMDEV_ReduceYSize+0x10>
 8014ce4:	4b0a      	ldr	r3, [pc, #40]	; (8014d10 <GUI_MEMDEV_ReduceYSize+0x34>)
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8014cea:	b17c      	cbz	r4, 8014d0c <GUI_MEMDEV_ReduceYSize+0x30>
 8014cec:	f7f5 f836 	bl	8009d5c <GUI_Lock>
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f7f3 fb09 	bl	8008308 <GUI_ALLOC_LockH>
 8014cf6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014cfa:	9001      	str	r0, [sp, #4]
 8014cfc:	42ab      	cmp	r3, r5
 8014cfe:	bfc8      	it	gt
 8014d00:	8145      	strhgt	r5, [r0, #10]
 8014d02:	a801      	add	r0, sp, #4
 8014d04:	f7f3 fb0e 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014d08:	f7f5 f81e 	bl	8009d48 <GUI_Unlock>
 8014d0c:	b003      	add	sp, #12
 8014d0e:	bd30      	pop	{r4, r5, pc}
 8014d10:	20000014 	.word	0x20000014

08014d14 <GUI_MEMDEV_SetOrg>:
 8014d14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d16:	460d      	mov	r5, r1
 8014d18:	4614      	mov	r4, r2
 8014d1a:	4606      	mov	r6, r0
 8014d1c:	b918      	cbnz	r0, 8014d26 <GUI_MEMDEV_SetOrg+0x12>
 8014d1e:	4b15      	ldr	r3, [pc, #84]	; (8014d74 <GUI_MEMDEV_SetOrg+0x60>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8014d24:	b326      	cbz	r6, 8014d70 <GUI_MEMDEV_SetOrg+0x5c>
 8014d26:	f7f5 f819 	bl	8009d5c <GUI_Lock>
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	f7f3 faec 	bl	8008308 <GUI_ALLOC_LockH>
 8014d30:	b224      	sxth	r4, r4
 8014d32:	b22d      	sxth	r5, r5
 8014d34:	80c4      	strh	r4, [r0, #6]
 8014d36:	8085      	strh	r5, [r0, #4]
 8014d38:	9000      	str	r0, [sp, #0]
 8014d3a:	f7f5 ff7f 	bl	800ac3c <LCD_SetClipRectMax>
 8014d3e:	9b00      	ldr	r3, [sp, #0]
 8014d40:	6958      	ldr	r0, [r3, #20]
 8014d42:	b180      	cbz	r0, 8014d66 <GUI_MEMDEV_SetOrg+0x52>
 8014d44:	f7f3 fae0 	bl	8008308 <GUI_ALLOC_LockH>
 8014d48:	9b00      	ldr	r3, [sp, #0]
 8014d4a:	9001      	str	r0, [sp, #4]
 8014d4c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8014d50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8014d54:	8082      	strh	r2, [r0, #4]
 8014d56:	80c3      	strh	r3, [r0, #6]
 8014d58:	b112      	cbz	r2, 8014d60 <GUI_MEMDEV_SetOrg+0x4c>
 8014d5a:	b10b      	cbz	r3, 8014d60 <GUI_MEMDEV_SetOrg+0x4c>
 8014d5c:	8005      	strh	r5, [r0, #0]
 8014d5e:	8044      	strh	r4, [r0, #2]
 8014d60:	a801      	add	r0, sp, #4
 8014d62:	f7f3 fadf 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014d66:	4668      	mov	r0, sp
 8014d68:	f7f3 fadc 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014d6c:	f7f4 ffec 	bl	8009d48 <GUI_Unlock>
 8014d70:	b002      	add	sp, #8
 8014d72:	bd70      	pop	{r4, r5, r6, pc}
 8014d74:	20000014 	.word	0x20000014

08014d78 <_CreateStaticDevice>:
 8014d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7c:	b087      	sub	sp, #28
 8014d7e:	4607      	mov	r7, r0
 8014d80:	f7f3 fac2 	bl	8008308 <GUI_ALLOC_LockH>
 8014d84:	f10d 0818 	add.w	r8, sp, #24
 8014d88:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014d8c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8014d90:	f848 0d04 	str.w	r0, [r8, #-4]!
 8014d94:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8014d98:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8014d9c:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8014da0:	ebc9 0606 	rsb	r6, r9, r6
 8014da4:	4640      	mov	r0, r8
 8014da6:	3601      	adds	r6, #1
 8014da8:	f7f3 fabc 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014dac:	ebc5 040b 	rsb	r4, r5, fp
 8014db0:	2e00      	cmp	r6, #0
 8014db2:	f104 0401 	add.w	r4, r4, #1
 8014db6:	dd4c      	ble.n	8014e52 <_CreateStaticDevice+0xda>
 8014db8:	2c00      	cmp	r4, #0
 8014dba:	dd4a      	ble.n	8014e52 <_CreateStaticDevice+0xda>
 8014dbc:	f1ba 0f00 	cmp.w	sl, #0
 8014dc0:	d049      	beq.n	8014e56 <_CreateStaticDevice+0xde>
 8014dc2:	4650      	mov	r0, sl
 8014dc4:	f7f3 faa0 	bl	8008308 <GUI_ALLOC_LockH>
 8014dc8:	ab06      	add	r3, sp, #24
 8014dca:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8014dce:	f843 0d08 	str.w	r0, [r3, #-8]!
 8014dd2:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f3 faa4 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014ddc:	454e      	cmp	r6, r9
 8014dde:	d101      	bne.n	8014de4 <_CreateStaticDevice+0x6c>
 8014de0:	42ac      	cmp	r4, r5
 8014de2:	d031      	beq.n	8014e48 <_CreateStaticDevice+0xd0>
 8014de4:	462a      	mov	r2, r5
 8014de6:	4649      	mov	r1, r9
 8014de8:	4650      	mov	r0, sl
 8014dea:	f7ff ff93 	bl	8014d14 <GUI_MEMDEV_SetOrg>
 8014dee:	e02b      	b.n	8014e48 <_CreateStaticDevice+0xd0>
 8014df0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014df6:	6283      	str	r3, [r0, #40]	; 0x28
 8014df8:	4640      	mov	r0, r8
 8014dfa:	f7f3 fa93 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014dfe:	4628      	mov	r0, r5
 8014e00:	f7ff fdd6 	bl	80149b0 <GUI_MEMDEV_Select>
 8014e04:	4680      	mov	r8, r0
 8014e06:	4650      	mov	r0, sl
 8014e08:	f003 f9c2 	bl	8018190 <GUI__AlphaPreserveTrans>
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	f7ff ff33 	bl	8014c78 <GUI_MEMDEV_GetDataPtr>
 8014e12:	4b2c      	ldr	r3, [pc, #176]	; (8014ec4 <_CreateStaticDevice+0x14c>)
 8014e14:	492c      	ldr	r1, [pc, #176]	; (8014ec8 <_CreateStaticDevice+0x150>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	7809      	ldrb	r1, [r1, #0]
 8014e1a:	4d2c      	ldr	r5, [pc, #176]	; (8014ecc <_CreateStaticDevice+0x154>)
 8014e1c:	fb04 f206 	mul.w	r2, r4, r6
 8014e20:	0092      	lsls	r2, r2, #2
 8014e22:	4c2b      	ldr	r4, [pc, #172]	; (8014ed0 <_CreateStaticDevice+0x158>)
 8014e24:	4798      	blx	r3
 8014e26:	4638      	mov	r0, r7
 8014e28:	6826      	ldr	r6, [r4, #0]
 8014e2a:	602f      	str	r7, [r5, #0]
 8014e2c:	f7f9 fe81 	bl	800eb32 <WM_GetWindowOrgX>
 8014e30:	6020      	str	r0, [r4, #0]
 8014e32:	4638      	mov	r0, r7
 8014e34:	f7f9 fba4 	bl	800e580 <WM__Paint1>
 8014e38:	2000      	movs	r0, #0
 8014e3a:	6026      	str	r6, [r4, #0]
 8014e3c:	6028      	str	r0, [r5, #0]
 8014e3e:	f003 f9a7 	bl	8018190 <GUI__AlphaPreserveTrans>
 8014e42:	4640      	mov	r0, r8
 8014e44:	f7ff fdb4 	bl	80149b0 <GUI_MEMDEV_Select>
 8014e48:	4638      	mov	r0, r7
 8014e4a:	f7f3 fa53 	bl	80082f4 <GUI_ALLOC_h2p>
 8014e4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014e50:	e035      	b.n	8014ebe <_CreateStaticDevice+0x146>
 8014e52:	2000      	movs	r0, #0
 8014e54:	e033      	b.n	8014ebe <_CreateStaticDevice+0x146>
 8014e56:	f7f9 fded 	bl	800ea34 <WM_GetDesktopWindow>
 8014e5a:	4287      	cmp	r7, r0
 8014e5c:	d112      	bne.n	8014e84 <_CreateStaticDevice+0x10c>
 8014e5e:	f7f6 fa49 	bl	800b2f4 <LCD_GetXSize>
 8014e62:	4682      	mov	sl, r0
 8014e64:	f7f6 fa4e 	bl	800b304 <LCD_GetYSize>
 8014e68:	4556      	cmp	r6, sl
 8014e6a:	dc02      	bgt.n	8014e72 <_CreateStaticDevice+0xfa>
 8014e6c:	4284      	cmp	r4, r0
 8014e6e:	dd09      	ble.n	8014e84 <_CreateStaticDevice+0x10c>
 8014e70:	e000      	b.n	8014e74 <_CreateStaticDevice+0xfc>
 8014e72:	4656      	mov	r6, sl
 8014e74:	4284      	cmp	r4, r0
 8014e76:	bfa8      	it	ge
 8014e78:	4604      	movge	r4, r0
 8014e7a:	4622      	mov	r2, r4
 8014e7c:	4631      	mov	r1, r6
 8014e7e:	4638      	mov	r0, r7
 8014e80:	f7fa f821 	bl	800eec6 <WM_SetSize>
 8014e84:	4b13      	ldr	r3, [pc, #76]	; (8014ed4 <_CreateStaticDevice+0x15c>)
 8014e86:	9302      	str	r3, [sp, #8]
 8014e88:	f04f 0a01 	mov.w	sl, #1
 8014e8c:	4b12      	ldr	r3, [pc, #72]	; (8014ed8 <_CreateStaticDevice+0x160>)
 8014e8e:	9301      	str	r3, [sp, #4]
 8014e90:	4629      	mov	r1, r5
 8014e92:	4623      	mov	r3, r4
 8014e94:	4632      	mov	r2, r6
 8014e96:	f8cd a000 	str.w	sl, [sp]
 8014e9a:	4648      	mov	r0, r9
 8014e9c:	f7ff fc74 	bl	8014788 <GUI_MEMDEV__CreateFixed>
 8014ea0:	4605      	mov	r5, r0
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	f7f3 fa30 	bl	8008308 <GUI_ALLOC_LockH>
 8014ea8:	9005      	str	r0, [sp, #20]
 8014eaa:	6245      	str	r5, [r0, #36]	; 0x24
 8014eac:	2d00      	cmp	r5, #0
 8014eae:	d19f      	bne.n	8014df0 <_CreateStaticDevice+0x78>
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	f7f3 fa37 	bl	8008324 <GUI_ALLOC_UnlockH>
 8014eb6:	4638      	mov	r0, r7
 8014eb8:	f7f9 fb62 	bl	800e580 <WM__Paint1>
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	b007      	add	sp, #28
 8014ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec4:	20000040 	.word	0x20000040
 8014ec8:	20000450 	.word	0x20000450
 8014ecc:	20027c20 	.word	0x20027c20
 8014ed0:	20027b70 	.word	0x20027b70
 8014ed4:	0801be60 	.word	0x0801be60
 8014ed8:	0801920c 	.word	0x0801920c

08014edc <GUI_MEMDEV_Paint1Static>:
 8014edc:	b538      	push	{r3, r4, r5, lr}
 8014ede:	4605      	mov	r5, r0
 8014ee0:	2405      	movs	r4, #5
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	f7ff ff48 	bl	8014d78 <_CreateStaticDevice>
 8014ee8:	b910      	cbnz	r0, 8014ef0 <GUI_MEMDEV_Paint1Static+0x14>
 8014eea:	3c01      	subs	r4, #1
 8014eec:	d1f9      	bne.n	8014ee2 <GUI_MEMDEV_Paint1Static+0x6>
 8014eee:	bd38      	pop	{r3, r4, r5, pc}
 8014ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ef4:	f000 b90e 	b.w	8015114 <GUI_MEMDEV_Write>

08014ef8 <GUI_USAGE_BM_AddPixel>:
 8014ef8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014efc:	1ac9      	subs	r1, r1, r3
 8014efe:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014f02:	1ad2      	subs	r2, r2, r3
 8014f04:	6903      	ldr	r3, [r0, #16]
 8014f06:	435a      	muls	r2, r3
 8014f08:	3214      	adds	r2, #20
 8014f0a:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 8014f0e:	2380      	movs	r3, #128	; 0x80
 8014f10:	f001 0107 	and.w	r1, r1, #7
 8014f14:	fa43 f101 	asr.w	r1, r3, r1
 8014f18:	5c83      	ldrb	r3, [r0, r2]
 8014f1a:	4319      	orrs	r1, r3
 8014f1c:	5481      	strb	r1, [r0, r2]
 8014f1e:	4770      	bx	lr

08014f20 <GUI_USAGE_BM_GetNextDirty>:
 8014f20:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014f24:	4293      	cmp	r3, r2
 8014f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f28:	dd44      	ble.n	8014fb4 <GUI_USAGE_BM_GetNextDirty+0x94>
 8014f2a:	680c      	ldr	r4, [r1, #0]
 8014f2c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8014f30:	42b4      	cmp	r4, r6
 8014f32:	da3f      	bge.n	8014fb4 <GUI_USAGE_BM_GetNextDirty+0x94>
 8014f34:	6907      	ldr	r7, [r0, #16]
 8014f36:	10e3      	asrs	r3, r4, #3
 8014f38:	461d      	mov	r5, r3
 8014f3a:	fb07 3202 	mla	r2, r7, r2, r3
 8014f3e:	1e73      	subs	r3, r6, #1
 8014f40:	ebc5 03e3 	rsb	r3, r5, r3, asr #3
 8014f44:	f102 0515 	add.w	r5, r2, #21
 8014f48:	3214      	adds	r2, #20
 8014f4a:	4405      	add	r5, r0
 8014f4c:	5c82      	ldrb	r2, [r0, r2]
 8014f4e:	f004 0007 	and.w	r0, r4, #7
 8014f52:	4082      	lsls	r2, r0
 8014f54:	b2d2      	uxtb	r2, r2
 8014f56:	b93a      	cbnz	r2, 8014f68 <GUI_USAGE_BM_GetNextDirty+0x48>
 8014f58:	b373      	cbz	r3, 8014fb8 <GUI_USAGE_BM_GetNextDirty+0x98>
 8014f5a:	3408      	adds	r4, #8
 8014f5c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8014f60:	3b01      	subs	r3, #1
 8014f62:	f024 0407 	bic.w	r4, r4, #7
 8014f66:	e7f6      	b.n	8014f56 <GUI_USAGE_BM_GetNextDirty+0x36>
 8014f68:	0617      	lsls	r7, r2, #24
 8014f6a:	d403      	bmi.n	8014f74 <GUI_USAGE_BM_GetNextDirty+0x54>
 8014f6c:	0052      	lsls	r2, r2, #1
 8014f6e:	b2d2      	uxtb	r2, r2
 8014f70:	3401      	adds	r4, #1
 8014f72:	e7f9      	b.n	8014f68 <GUI_USAGE_BM_GetNextDirty+0x48>
 8014f74:	2aff      	cmp	r2, #255	; 0xff
 8014f76:	d006      	beq.n	8014f86 <GUI_USAGE_BM_GetNextDirty+0x66>
 8014f78:	4620      	mov	r0, r4
 8014f7a:	0656      	lsls	r6, r2, #25
 8014f7c:	d504      	bpl.n	8014f88 <GUI_USAGE_BM_GetNextDirty+0x68>
 8014f7e:	0052      	lsls	r2, r2, #1
 8014f80:	b2d2      	uxtb	r2, r2
 8014f82:	3001      	adds	r0, #1
 8014f84:	e7f9      	b.n	8014f7a <GUI_USAGE_BM_GetNextDirty+0x5a>
 8014f86:	1de0      	adds	r0, r4, #7
 8014f88:	f000 0207 	and.w	r2, r0, #7
 8014f8c:	2a07      	cmp	r2, #7
 8014f8e:	d10d      	bne.n	8014fac <GUI_USAGE_BM_GetNextDirty+0x8c>
 8014f90:	3b01      	subs	r3, #1
 8014f92:	d40b      	bmi.n	8014fac <GUI_USAGE_BM_GetNextDirty+0x8c>
 8014f94:	f815 2b01 	ldrb.w	r2, [r5], #1
 8014f98:	2aff      	cmp	r2, #255	; 0xff
 8014f9a:	d101      	bne.n	8014fa0 <GUI_USAGE_BM_GetNextDirty+0x80>
 8014f9c:	3008      	adds	r0, #8
 8014f9e:	e7f7      	b.n	8014f90 <GUI_USAGE_BM_GetNextDirty+0x70>
 8014fa0:	0613      	lsls	r3, r2, #24
 8014fa2:	d503      	bpl.n	8014fac <GUI_USAGE_BM_GetNextDirty+0x8c>
 8014fa4:	0052      	lsls	r2, r2, #1
 8014fa6:	b2d2      	uxtb	r2, r2
 8014fa8:	3001      	adds	r0, #1
 8014faa:	e7f9      	b.n	8014fa0 <GUI_USAGE_BM_GetNextDirty+0x80>
 8014fac:	1b00      	subs	r0, r0, r4
 8014fae:	600c      	str	r4, [r1, #0]
 8014fb0:	3001      	adds	r0, #1
 8014fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014fbc <_GUI_USAGE_BM_Delete>:
 8014fbc:	f7f3 b9e2 	b.w	8008384 <GUI_ALLOC_Free>

08014fc0 <GUI_USAGE_BM_Clear>:
 8014fc0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014fc4:	6902      	ldr	r2, [r0, #16]
 8014fc6:	2100      	movs	r1, #0
 8014fc8:	435a      	muls	r2, r3
 8014fca:	3014      	adds	r0, #20
 8014fcc:	f003 b971 	b.w	80182b2 <memset>

08014fd0 <GUI_USAGE_BM_AddHLine>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014fd6:	1b09      	subs	r1, r1, r4
 8014fd8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014fdc:	42a1      	cmp	r1, r4
 8014fde:	da32      	bge.n	8015046 <GUI_USAGE_BM_AddHLine+0x76>
 8014fe0:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 8014fe4:	440b      	add	r3, r1
 8014fe6:	1b52      	subs	r2, r2, r5
 8014fe8:	6905      	ldr	r5, [r0, #16]
 8014fea:	10ce      	asrs	r6, r1, #3
 8014fec:	3b01      	subs	r3, #1
 8014fee:	fb05 6502 	mla	r5, r5, r2, r6
 8014ff2:	43df      	mvns	r7, r3
 8014ff4:	3514      	adds	r5, #20
 8014ff6:	f001 0407 	and.w	r4, r1, #7
 8014ffa:	f007 0707 	and.w	r7, r7, #7
 8014ffe:	21ff      	movs	r1, #255	; 0xff
 8015000:	fa41 f404 	asr.w	r4, r1, r4
 8015004:	fa01 f707 	lsl.w	r7, r1, r7
 8015008:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 801500c:	eb00 0205 	add.w	r2, r0, r5
 8015010:	b2e4      	uxtb	r4, r4
 8015012:	b2ff      	uxtb	r7, r7
 8015014:	f810 e005 	ldrb.w	lr, [r0, r5]
 8015018:	d104      	bne.n	8015024 <GUI_USAGE_BM_AddHLine+0x54>
 801501a:	403c      	ands	r4, r7
 801501c:	ea4e 0404 	orr.w	r4, lr, r4
 8015020:	5544      	strb	r4, [r0, r5]
 8015022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015024:	ea44 040e 	orr.w	r4, r4, lr
 8015028:	5544      	strb	r4, [r0, r5]
 801502a:	1e75      	subs	r5, r6, #1
 801502c:	2d00      	cmp	r5, #0
 801502e:	f102 0301 	add.w	r3, r2, #1
 8015032:	dd05      	ble.n	8015040 <GUI_USAGE_BM_AddHLine+0x70>
 8015034:	4618      	mov	r0, r3
 8015036:	462a      	mov	r2, r5
 8015038:	f003 f93b 	bl	80182b2 <memset>
 801503c:	4603      	mov	r3, r0
 801503e:	442b      	add	r3, r5
 8015040:	781c      	ldrb	r4, [r3, #0]
 8015042:	433c      	orrs	r4, r7
 8015044:	701c      	strb	r4, [r3, #0]
 8015046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015048 <GUI_USAGE_BM_Create>:
 8015048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801504c:	f102 040f 	add.w	r4, r2, #15
 8015050:	1124      	asrs	r4, r4, #4
 8015052:	0064      	lsls	r4, r4, #1
 8015054:	4681      	mov	r9, r0
 8015056:	fb03 f004 	mul.w	r0, r3, r4
 801505a:	3014      	adds	r0, #20
 801505c:	4688      	mov	r8, r1
 801505e:	4617      	mov	r7, r2
 8015060:	461e      	mov	r6, r3
 8015062:	f7f3 fb3b 	bl	80086dc <GUI_ALLOC_AllocZero>
 8015066:	4605      	mov	r5, r0
 8015068:	b1b8      	cbz	r0, 801509a <GUI_USAGE_BM_Create+0x52>
 801506a:	f7f4 fe77 	bl	8009d5c <GUI_Lock>
 801506e:	4628      	mov	r0, r5
 8015070:	f7f3 f94a 	bl	8008308 <GUI_ALLOC_LockH>
 8015074:	4603      	mov	r3, r0
 8015076:	4a0b      	ldr	r2, [pc, #44]	; (80150a4 <GUI_USAGE_BM_Create+0x5c>)
 8015078:	609a      	str	r2, [r3, #8]
 801507a:	a802      	add	r0, sp, #8
 801507c:	2201      	movs	r2, #1
 801507e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8015082:	809f      	strh	r7, [r3, #4]
 8015084:	f8a3 9000 	strh.w	r9, [r3]
 8015088:	f8a3 8002 	strh.w	r8, [r3, #2]
 801508c:	80de      	strh	r6, [r3, #6]
 801508e:	819a      	strh	r2, [r3, #12]
 8015090:	611c      	str	r4, [r3, #16]
 8015092:	f7f3 f947 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015096:	f7f4 fe57 	bl	8009d48 <GUI_Unlock>
 801509a:	4628      	mov	r0, r5
 801509c:	b003      	add	sp, #12
 801509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150a2:	bf00      	nop
 80150a4:	0801bb34 	.word	0x0801bb34

080150a8 <GUI_MEMDEV_WriteAt>:
 80150a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80150aa:	460c      	mov	r4, r1
 80150ac:	4615      	mov	r5, r2
 80150ae:	4606      	mov	r6, r0
 80150b0:	b360      	cbz	r0, 801510c <GUI_MEMDEV_WriteAt+0x64>
 80150b2:	f7f4 fe53 	bl	8009d5c <GUI_Lock>
 80150b6:	4630      	mov	r0, r6
 80150b8:	f7f3 f926 	bl	8008308 <GUI_ALLOC_LockH>
 80150bc:	4b14      	ldr	r3, [pc, #80]	; (8015110 <GUI_MEMDEV_WriteAt+0x68>)
 80150be:	9001      	str	r0, [sp, #4]
 80150c0:	429c      	cmp	r4, r3
 80150c2:	8903      	ldrh	r3, [r0, #8]
 80150c4:	bf04      	itt	eq
 80150c6:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 80150ca:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 80150ce:	f8ad 4008 	strh.w	r4, [sp, #8]
 80150d2:	3b01      	subs	r3, #1
 80150d4:	4423      	add	r3, r4
 80150d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80150da:	8943      	ldrh	r3, [r0, #10]
 80150dc:	f8ad 500a 	strh.w	r5, [sp, #10]
 80150e0:	3b01      	subs	r3, #1
 80150e2:	442b      	add	r3, r5
 80150e4:	a801      	add	r0, sp, #4
 80150e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80150ea:	f7f3 f91b 	bl	8008324 <GUI_ALLOC_UnlockH>
 80150ee:	a802      	add	r0, sp, #8
 80150f0:	f7f9 f9bc 	bl	800e46c <WM__InitIVRSearch>
 80150f4:	b910      	cbnz	r0, 80150fc <GUI_MEMDEV_WriteAt+0x54>
 80150f6:	f7f4 fe27 	bl	8009d48 <GUI_Unlock>
 80150fa:	e007      	b.n	801510c <GUI_MEMDEV_WriteAt+0x64>
 80150fc:	462a      	mov	r2, r5
 80150fe:	4621      	mov	r1, r4
 8015100:	4630      	mov	r0, r6
 8015102:	f7ff fb25 	bl	8014750 <GUI_MEMDEV__WriteToActiveAt>
 8015106:	f7f9 f8ef 	bl	800e2e8 <WM__GetNextIVR>
 801510a:	e7f3      	b.n	80150f4 <GUI_MEMDEV_WriteAt+0x4c>
 801510c:	b004      	add	sp, #16
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	fffff001 	.word	0xfffff001

08015114 <GUI_MEMDEV_Write>:
 8015114:	4a01      	ldr	r2, [pc, #4]	; (801511c <GUI_MEMDEV_Write+0x8>)
 8015116:	4611      	mov	r1, r2
 8015118:	f7ff bfc6 	b.w	80150a8 <GUI_MEMDEV_WriteAt>
 801511c:	fffff001 	.word	0xfffff001

08015120 <_Convert16>:
 8015120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015128:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801512c:	4681      	mov	r9, r0
 801512e:	460d      	mov	r5, r1
 8015130:	4616      	mov	r6, r2
 8015132:	461f      	mov	r7, r3
 8015134:	4614      	mov	r4, r2
 8015136:	4688      	mov	r8, r1
 8015138:	f839 0b02 	ldrh.w	r0, [r9], #2
 801513c:	47d8      	blx	fp
 801513e:	47d0      	blx	sl
 8015140:	3c01      	subs	r4, #1
 8015142:	f848 0b04 	str.w	r0, [r8], #4
 8015146:	d1f7      	bne.n	8015138 <_Convert16+0x18>
 8015148:	2f1f      	cmp	r7, #31
 801514a:	d806      	bhi.n	801515a <_Convert16+0x3a>
 801514c:	463a      	mov	r2, r7
 801514e:	4631      	mov	r1, r6
 8015150:	4628      	mov	r0, r5
 8015152:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015156:	f7fe bd60 	b.w	8013c1a <GUI__CompactPixelIndices>
 801515a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801515e <_Convert8>:
 801515e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015162:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015166:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801516a:	4680      	mov	r8, r0
 801516c:	460d      	mov	r5, r1
 801516e:	4616      	mov	r6, r2
 8015170:	461f      	mov	r7, r3
 8015172:	4689      	mov	r9, r1
 8015174:	4604      	mov	r4, r0
 8015176:	f814 0b01 	ldrb.w	r0, [r4], #1
 801517a:	47d8      	blx	fp
 801517c:	47d0      	blx	sl
 801517e:	1b33      	subs	r3, r6, r4
 8015180:	eb18 0f03 	cmn.w	r8, r3
 8015184:	f849 0b04 	str.w	r0, [r9], #4
 8015188:	d1f5      	bne.n	8015176 <_Convert8+0x18>
 801518a:	2f1f      	cmp	r7, #31
 801518c:	d806      	bhi.n	801519c <_Convert8+0x3e>
 801518e:	463a      	mov	r2, r7
 8015190:	4631      	mov	r1, r6
 8015192:	4628      	mov	r0, r5
 8015194:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015198:	f7fe bd3f 	b.w	8013c1a <GUI__CompactPixelIndices>
 801519c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080151a0 <GUI_MEMDEV__WriteToActiveOpaque>:
 80151a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151a4:	b09b      	sub	sp, #108	; 0x6c
 80151a6:	4605      	mov	r5, r0
 80151a8:	9108      	str	r1, [sp, #32]
 80151aa:	9209      	str	r2, [sp, #36]	; 0x24
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f000 8399 	beq.w	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80151b2:	f7f3 f8a9 	bl	8008308 <GUI_ALLOC_LockH>
 80151b6:	ab1a      	add	r3, sp, #104	; 0x68
 80151b8:	6944      	ldr	r4, [r0, #20]
 80151ba:	f843 0d1c 	str.w	r0, [r3, #-28]!
 80151be:	4618      	mov	r0, r3
 80151c0:	f7f3 f8b0 	bl	8008324 <GUI_ALLOC_UnlockH>
 80151c4:	4628      	mov	r0, r5
 80151c6:	f7ff fb71 	bl	80148ac <GUI_MEMDEV_GetBitsPerPixel>
 80151ca:	2808      	cmp	r0, #8
 80151cc:	4607      	mov	r7, r0
 80151ce:	4ea5      	ldr	r6, [pc, #660]	; (8015464 <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 80151d0:	dd02      	ble.n	80151d8 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 80151d2:	2c00      	cmp	r4, #0
 80151d4:	f000 81c9 	beq.w	801556a <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 80151d8:	2301      	movs	r3, #1
 80151da:	2700      	movs	r7, #0
 80151dc:	4628      	mov	r0, r5
 80151de:	9319      	str	r3, [sp, #100]	; 0x64
 80151e0:	930d      	str	r3, [sp, #52]	; 0x34
 80151e2:	9718      	str	r7, [sp, #96]	; 0x60
 80151e4:	f7f3 f890 	bl	8008308 <GUI_ALLOC_LockH>
 80151e8:	6802      	ldr	r2, [r0, #0]
 80151ea:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80151ee:	6912      	ldr	r2, [r2, #16]
 80151f0:	930e      	str	r3, [sp, #56]	; 0x38
 80151f2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80151f6:	6853      	ldr	r3, [r2, #4]
 80151f8:	6832      	ldr	r2, [r6, #0]
 80151fa:	f849 0d14 	str.w	r0, [r9, #-20]!
 80151fe:	6904      	ldr	r4, [r0, #16]
 8015200:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8015204:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8015208:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 801520c:	7c50      	ldrb	r0, [r2, #17]
 801520e:	930c      	str	r3, [sp, #48]	; 0x30
 8015210:	f7f6 f888 	bl	800b324 <GUI_GetBitsPerPixelEx>
 8015214:	6832      	ldr	r2, [r6, #0]
 8015216:	900b      	str	r0, [sp, #44]	; 0x2c
 8015218:	7c50      	ldrb	r0, [r2, #17]
 801521a:	f7f6 f8a1 	bl	800b360 <GUI_GetpfIndex2ColorEx>
 801521e:	900a      	str	r0, [sp, #40]	; 0x28
 8015220:	4648      	mov	r0, r9
 8015222:	f7f3 f87f 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015226:	2c08      	cmp	r4, #8
 8015228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801522a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801522c:	d904      	bls.n	8015238 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 801522e:	2c10      	cmp	r4, #16
 8015230:	bf8c      	ite	hi
 8015232:	2304      	movhi	r3, #4
 8015234:	2302      	movls	r3, #2
 8015236:	e005      	b.n	8015244 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8015238:	2c01      	cmp	r4, #1
 801523a:	d103      	bne.n	8015244 <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 801523c:	ab18      	add	r3, sp, #96	; 0x60
 801523e:	940d      	str	r4, [sp, #52]	; 0x34
 8015240:	930a      	str	r3, [sp, #40]	; 0x28
 8015242:	e001      	b.n	8015248 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 8015244:	930d      	str	r3, [sp, #52]	; 0x34
 8015246:	970a      	str	r7, [sp, #40]	; 0x28
 8015248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801524a:	4293      	cmp	r3, r2
 801524c:	f000 80df 	beq.w	801540e <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 8015250:	6833      	ldr	r3, [r6, #0]
 8015252:	7c58      	ldrb	r0, [r3, #17]
 8015254:	f7f6 f88c 	bl	800b370 <GUI_GetpfColor2IndexEx>
 8015258:	900f      	str	r0, [sp, #60]	; 0x3c
 801525a:	ea4f 008b 	mov.w	r0, fp, lsl #2
 801525e:	f7f3 fa2f 	bl	80086c0 <GUI_ALLOC_AllocNoInit>
 8015262:	9010      	str	r0, [sp, #64]	; 0x40
 8015264:	2800      	cmp	r0, #0
 8015266:	f000 833d 	beq.w	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801526a:	4628      	mov	r0, r5
 801526c:	f7ff fd04 	bl	8014c78 <GUI_MEMDEV_GetDataPtr>
 8015270:	4605      	mov	r5, r0
 8015272:	f1b8 0f00 	cmp.w	r8, #0
 8015276:	f000 80b9 	beq.w	80153ec <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 801527a:	4640      	mov	r0, r8
 801527c:	f7f3 f844 	bl	8008308 <GUI_ALLOC_LockH>
 8015280:	eb05 030a 	add.w	r3, r5, sl
 8015284:	9311      	str	r3, [sp, #68]	; 0x44
 8015286:	2300      	movs	r3, #0
 8015288:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801528c:	9016      	str	r0, [sp, #88]	; 0x58
 801528e:	9309      	str	r3, [sp, #36]	; 0x24
 8015290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015294:	ebca 0703 	rsb	r7, sl, r3
 8015298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801529a:	4293      	cmp	r3, r2
 801529c:	f340 80a2 	ble.w	80153e4 <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 80152a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80152a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152a4:	2300      	movs	r3, #0
 80152a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80152a8:	6883      	ldr	r3, [r0, #8]
 80152aa:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 80152ae:	695b      	ldr	r3, [r3, #20]
 80152b0:	4641      	mov	r1, r8
 80152b2:	4798      	blx	r3
 80152b4:	4583      	cmp	fp, r0
 80152b6:	4605      	mov	r5, r0
 80152b8:	d128      	bne.n	801530c <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 80152ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80152bc:	f7f3 f824 	bl	8008308 <GUI_ALLOC_LockH>
 80152c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152c2:	9301      	str	r3, [sp, #4]
 80152c4:	2c08      	cmp	r4, #8
 80152c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152c8:	9014      	str	r0, [sp, #80]	; 0x50
 80152ca:	4601      	mov	r1, r0
 80152cc:	9300      	str	r3, [sp, #0]
 80152ce:	465a      	mov	r2, fp
 80152d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152d2:	4638      	mov	r0, r7
 80152d4:	d902      	bls.n	80152dc <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 80152d6:	f7ff ff23 	bl	8015120 <_Convert16>
 80152da:	e001      	b.n	80152e0 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 80152dc:	f7ff ff3f 	bl	801515e <_Convert8>
 80152e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152e2:	9305      	str	r3, [sp, #20]
 80152e4:	ad1a      	add	r5, sp, #104	; 0x68
 80152e6:	9808      	ldr	r0, [sp, #32]
 80152e8:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 80152ec:	9304      	str	r3, [sp, #16]
 80152ee:	2300      	movs	r3, #0
 80152f0:	9303      	str	r3, [sp, #12]
 80152f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152f4:	9302      	str	r3, [sp, #8]
 80152f6:	2301      	movs	r3, #1
 80152f8:	9301      	str	r3, [sp, #4]
 80152fa:	9300      	str	r3, [sp, #0]
 80152fc:	465a      	mov	r2, fp
 80152fe:	4649      	mov	r1, r9
 8015300:	f7f5 fb8a 	bl	800aa18 <LCD_DrawBitmap>
 8015304:	4628      	mov	r0, r5
 8015306:	f7f3 f80d 	bl	8008324 <GUI_ALLOC_UnlockH>
 801530a:	e062      	b.n	80153d2 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 801530c:	2c01      	cmp	r4, #1
 801530e:	d002      	beq.n	8015316 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8015310:	f04f 0801 	mov.w	r8, #1
 8015314:	e057      	b.n	80153c6 <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 8015316:	2d00      	cmp	r5, #0
 8015318:	d05b      	beq.n	80153d2 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 801531a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801531c:	9e08      	ldr	r6, [sp, #32]
 801531e:	f8cd a00c 	str.w	sl, [sp, #12]
 8015322:	f000 0307 	and.w	r3, r0, #7
 8015326:	9306      	str	r3, [sp, #24]
 8015328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801532a:	9305      	str	r3, [sp, #20]
 801532c:	2308      	movs	r3, #8
 801532e:	fb90 f3f3 	sdiv	r3, r0, r3
 8015332:	443b      	add	r3, r7
 8015334:	9304      	str	r3, [sp, #16]
 8015336:	2301      	movs	r3, #1
 8015338:	462a      	mov	r2, r5
 801533a:	9302      	str	r3, [sp, #8]
 801533c:	9301      	str	r3, [sp, #4]
 801533e:	9300      	str	r3, [sp, #0]
 8015340:	4649      	mov	r1, r9
 8015342:	4430      	add	r0, r6
 8015344:	f7f5 fa7c 	bl	800a840 <LCD__DrawBitmap_1bpp>
 8015348:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801534a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801534c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801534e:	441d      	add	r5, r3
 8015350:	6883      	ldr	r3, [r0, #8]
 8015352:	9517      	str	r5, [sp, #92]	; 0x5c
 8015354:	695b      	ldr	r3, [r3, #20]
 8015356:	4641      	mov	r1, r8
 8015358:	4798      	blx	r3
 801535a:	4605      	mov	r5, r0
 801535c:	e7db      	b.n	8015316 <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 801535e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015360:	f7f2 ffd2 	bl	8008308 <GUI_ALLOC_LockH>
 8015364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015366:	9014      	str	r0, [sp, #80]	; 0x50
 8015368:	4601      	mov	r1, r0
 801536a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801536c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801536e:	9301      	str	r3, [sp, #4]
 8015370:	2c08      	cmp	r4, #8
 8015372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	462a      	mov	r2, r5
 8015378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801537a:	fb00 7006 	mla	r0, r0, r6, r7
 801537e:	d925      	bls.n	80153cc <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 8015380:	f7ff fece 	bl	8015120 <_Convert16>
 8015384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015386:	9305      	str	r3, [sp, #20]
 8015388:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801538a:	9304      	str	r3, [sp, #16]
 801538c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801538e:	9e08      	ldr	r6, [sp, #32]
 8015390:	f8cd 8004 	str.w	r8, [sp, #4]
 8015394:	2300      	movs	r3, #0
 8015396:	9303      	str	r3, [sp, #12]
 8015398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801539a:	9302      	str	r3, [sp, #8]
 801539c:	462a      	mov	r2, r5
 801539e:	2301      	movs	r3, #1
 80153a0:	4649      	mov	r1, r9
 80153a2:	4430      	add	r0, r6
 80153a4:	f8cd 8000 	str.w	r8, [sp]
 80153a8:	f7f5 fb36 	bl	800aa18 <LCD_DrawBitmap>
 80153ac:	a814      	add	r0, sp, #80	; 0x50
 80153ae:	f7f2 ffb9 	bl	8008324 <GUI_ALLOC_UnlockH>
 80153b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80153b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80153b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80153b8:	441d      	add	r5, r3
 80153ba:	6883      	ldr	r3, [r0, #8]
 80153bc:	9517      	str	r5, [sp, #92]	; 0x5c
 80153be:	695b      	ldr	r3, [r3, #20]
 80153c0:	a917      	add	r1, sp, #92	; 0x5c
 80153c2:	4798      	blx	r3
 80153c4:	4605      	mov	r5, r0
 80153c6:	2d00      	cmp	r5, #0
 80153c8:	d1c9      	bne.n	801535e <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 80153ca:	e002      	b.n	80153d2 <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80153cc:	f7ff fec7 	bl	801515e <_Convert8>
 80153d0:	e7d8      	b.n	8015384 <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 80153d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153d4:	3301      	adds	r3, #1
 80153d6:	9309      	str	r3, [sp, #36]	; 0x24
 80153d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153da:	4453      	add	r3, sl
 80153dc:	9311      	str	r3, [sp, #68]	; 0x44
 80153de:	f109 0901 	add.w	r9, r9, #1
 80153e2:	e755      	b.n	8015290 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 80153e4:	a816      	add	r0, sp, #88	; 0x58
 80153e6:	f7f2 ff9d 	bl	8008324 <GUI_ALLOC_UnlockH>
 80153ea:	e00e      	b.n	801540a <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 80153ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ee:	9305      	str	r3, [sp, #20]
 80153f0:	2301      	movs	r3, #1
 80153f2:	9004      	str	r0, [sp, #16]
 80153f4:	9301      	str	r3, [sp, #4]
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	f8cd a00c 	str.w	sl, [sp, #12]
 80153fc:	9402      	str	r4, [sp, #8]
 80153fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015402:	9808      	ldr	r0, [sp, #32]
 8015404:	465a      	mov	r2, fp
 8015406:	f7f5 fb07 	bl	800aa18 <LCD_DrawBitmap>
 801540a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801540c:	e268      	b.n	80158e0 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 801540e:	4628      	mov	r0, r5
 8015410:	f7ff fc32 	bl	8014c78 <GUI_MEMDEV_GetDataPtr>
 8015414:	4607      	mov	r7, r0
 8015416:	f1b8 0f00 	cmp.w	r8, #0
 801541a:	f000 809a 	beq.w	8015552 <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 801541e:	4640      	mov	r0, r8
 8015420:	f7f2 ff72 	bl	8008308 <GUI_ALLOC_LockH>
 8015424:	2500      	movs	r5, #0
 8015426:	9016      	str	r0, [sp, #88]	; 0x58
 8015428:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801542a:	42ab      	cmp	r3, r5
 801542c:	f340 808d 	ble.w	801554a <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 8015430:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015432:	2300      	movs	r3, #0
 8015434:	9317      	str	r3, [sp, #92]	; 0x5c
 8015436:	6883      	ldr	r3, [r0, #8]
 8015438:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 801543c:	695b      	ldr	r3, [r3, #20]
 801543e:	462a      	mov	r2, r5
 8015440:	4641      	mov	r1, r8
 8015442:	4798      	blx	r3
 8015444:	4583      	cmp	fp, r0
 8015446:	4606      	mov	r6, r0
 8015448:	d126      	bne.n	8015498 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 801544a:	462e      	mov	r6, r5
 801544c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801544e:	6883      	ldr	r3, [r0, #8]
 8015450:	f106 0901 	add.w	r9, r6, #1
 8015454:	695b      	ldr	r3, [r3, #20]
 8015456:	464a      	mov	r2, r9
 8015458:	4641      	mov	r1, r8
 801545a:	4798      	blx	r3
 801545c:	4583      	cmp	fp, r0
 801545e:	d103      	bne.n	8015468 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 8015460:	464e      	mov	r6, r9
 8015462:	e7f3      	b.n	801544c <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 8015464:	20000014 	.word	0x20000014
 8015468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801546a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801546c:	9305      	str	r3, [sp, #20]
 801546e:	ebc5 0806 	rsb	r8, r5, r6
 8015472:	2301      	movs	r3, #1
 8015474:	f108 0801 	add.w	r8, r8, #1
 8015478:	9704      	str	r7, [sp, #16]
 801547a:	9301      	str	r3, [sp, #4]
 801547c:	9300      	str	r3, [sp, #0]
 801547e:	4429      	add	r1, r5
 8015480:	f8cd a00c 	str.w	sl, [sp, #12]
 8015484:	9402      	str	r4, [sp, #8]
 8015486:	4643      	mov	r3, r8
 8015488:	465a      	mov	r2, fp
 801548a:	9808      	ldr	r0, [sp, #32]
 801548c:	f7f5 fac4 	bl	800aa18 <LCD_DrawBitmap>
 8015490:	fb0a 7708 	mla	r7, sl, r8, r7
 8015494:	4635      	mov	r5, r6
 8015496:	e056      	b.n	8015546 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8015498:	2c01      	cmp	r4, #1
 801549a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801549c:	d004      	beq.n	80154a8 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 801549e:	442b      	add	r3, r5
 80154a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80154a2:	f04f 0901 	mov.w	r9, #1
 80154a6:	e02b      	b.n	8015500 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 80154a8:	eb03 0905 	add.w	r9, r3, r5
 80154ac:	46a0      	mov	r8, r4
 80154ae:	b32e      	cbz	r6, 80154fc <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 80154b0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80154b4:	9808      	ldr	r0, [sp, #32]
 80154b6:	f8cd a00c 	str.w	sl, [sp, #12]
 80154ba:	f00e 0307 	and.w	r3, lr, #7
 80154be:	9306      	str	r3, [sp, #24]
 80154c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154c2:	9305      	str	r3, [sp, #20]
 80154c4:	2308      	movs	r3, #8
 80154c6:	fb9e f3f3 	sdiv	r3, lr, r3
 80154ca:	443b      	add	r3, r7
 80154cc:	4632      	mov	r2, r6
 80154ce:	4470      	add	r0, lr
 80154d0:	9304      	str	r3, [sp, #16]
 80154d2:	4649      	mov	r1, r9
 80154d4:	2301      	movs	r3, #1
 80154d6:	f8cd 8008 	str.w	r8, [sp, #8]
 80154da:	f8cd 8004 	str.w	r8, [sp, #4]
 80154de:	f8cd 8000 	str.w	r8, [sp]
 80154e2:	f7f5 f9ad 	bl	800a840 <LCD__DrawBitmap_1bpp>
 80154e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80154e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80154ea:	441e      	add	r6, r3
 80154ec:	6883      	ldr	r3, [r0, #8]
 80154ee:	9617      	str	r6, [sp, #92]	; 0x5c
 80154f0:	695b      	ldr	r3, [r3, #20]
 80154f2:	462a      	mov	r2, r5
 80154f4:	a917      	add	r1, sp, #92	; 0x5c
 80154f6:	4798      	blx	r3
 80154f8:	4606      	mov	r6, r0
 80154fa:	e7d8      	b.n	80154ae <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 80154fc:	4457      	add	r7, sl
 80154fe:	e022      	b.n	8015546 <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8015500:	2e00      	cmp	r6, #0
 8015502:	d0fb      	beq.n	80154fc <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 8015504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015506:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801550a:	9305      	str	r3, [sp, #20]
 801550c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801550e:	9808      	ldr	r0, [sp, #32]
 8015510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015512:	f8cd a00c 	str.w	sl, [sp, #12]
 8015516:	fb03 730e 	mla	r3, r3, lr, r7
 801551a:	4632      	mov	r2, r6
 801551c:	4470      	add	r0, lr
 801551e:	9304      	str	r3, [sp, #16]
 8015520:	9402      	str	r4, [sp, #8]
 8015522:	2301      	movs	r3, #1
 8015524:	f8cd 9004 	str.w	r9, [sp, #4]
 8015528:	f8cd 9000 	str.w	r9, [sp]
 801552c:	f7f5 fa74 	bl	800aa18 <LCD_DrawBitmap>
 8015530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015532:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015534:	441e      	add	r6, r3
 8015536:	6883      	ldr	r3, [r0, #8]
 8015538:	9617      	str	r6, [sp, #92]	; 0x5c
 801553a:	695b      	ldr	r3, [r3, #20]
 801553c:	462a      	mov	r2, r5
 801553e:	4641      	mov	r1, r8
 8015540:	4798      	blx	r3
 8015542:	4606      	mov	r6, r0
 8015544:	e7dc      	b.n	8015500 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8015546:	3501      	adds	r5, #1
 8015548:	e76e      	b.n	8015428 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 801554a:	a816      	add	r0, sp, #88	; 0x58
 801554c:	f7f2 feea 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015550:	e1c8      	b.n	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8015552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015554:	9305      	str	r3, [sp, #20]
 8015556:	2301      	movs	r3, #1
 8015558:	9301      	str	r3, [sp, #4]
 801555a:	9300      	str	r3, [sp, #0]
 801555c:	9004      	str	r0, [sp, #16]
 801555e:	f8cd a00c 	str.w	sl, [sp, #12]
 8015562:	9402      	str	r4, [sp, #8]
 8015564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015566:	465a      	mov	r2, fp
 8015568:	e03a      	b.n	80155e0 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 801556a:	4628      	mov	r0, r5
 801556c:	f7f2 fecc 	bl	8008308 <GUI_ALLOC_LockH>
 8015570:	4683      	mov	fp, r0
 8015572:	a81a      	add	r0, sp, #104	; 0x68
 8015574:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8015578:	f840 bd10 	str.w	fp, [r0, #-16]!
 801557c:	f8db 2000 	ldr.w	r2, [fp]
 8015580:	930b      	str	r3, [sp, #44]	; 0x2c
 8015582:	f8db 300c 	ldr.w	r3, [fp, #12]
 8015586:	f8d2 8010 	ldr.w	r8, [r2, #16]
 801558a:	930c      	str	r3, [sp, #48]	; 0x30
 801558c:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 8015590:	f7f2 fec8 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015594:	6832      	ldr	r2, [r6, #0]
 8015596:	f8d8 9004 	ldr.w	r9, [r8, #4]
 801559a:	7c50      	ldrb	r0, [r2, #17]
 801559c:	4aa1      	ldr	r2, [pc, #644]	; (8015824 <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 801559e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80155a2:	6916      	ldr	r6, [r2, #16]
 80155a4:	6833      	ldr	r3, [r6, #0]
 80155a6:	930a      	str	r3, [sp, #40]	; 0x28
 80155a8:	f7f5 febc 	bl	800b324 <GUI_GetBitsPerPixelEx>
 80155ac:	2808      	cmp	r0, #8
 80155ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155b0:	d906      	bls.n	80155c0 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 80155b2:	2810      	cmp	r0, #16
 80155b4:	bf8c      	ite	hi
 80155b6:	f04f 0a04 	movhi.w	sl, #4
 80155ba:	f04f 0a02 	movls.w	sl, #2
 80155be:	e001      	b.n	80155c4 <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 80155c0:	f04f 0a01 	mov.w	sl, #1
 80155c4:	45b0      	cmp	r8, r6
 80155c6:	d110      	bne.n	80155ea <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 80155c8:	9303      	str	r3, [sp, #12]
 80155ca:	2301      	movs	r3, #1
 80155cc:	2200      	movs	r2, #0
 80155ce:	f10b 0018 	add.w	r0, fp, #24
 80155d2:	9301      	str	r3, [sp, #4]
 80155d4:	9300      	str	r3, [sp, #0]
 80155d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155d8:	9205      	str	r2, [sp, #20]
 80155da:	9004      	str	r0, [sp, #16]
 80155dc:	9702      	str	r7, [sp, #8]
 80155de:	4622      	mov	r2, r4
 80155e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155e2:	9808      	ldr	r0, [sp, #32]
 80155e4:	f7f5 fa18 	bl	800aa18 <LCD_DrawBitmap>
 80155e8:	e17c      	b.n	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80155ea:	2f20      	cmp	r7, #32
 80155ec:	f040 80a2 	bne.w	8015734 <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 80155f0:	fb0a f004 	mul.w	r0, sl, r4
 80155f4:	f7f3 f864 	bl	80086c0 <GUI_ALLOC_AllocNoInit>
 80155f8:	900d      	str	r0, [sp, #52]	; 0x34
 80155fa:	2800      	cmp	r0, #0
 80155fc:	f000 8172 	beq.w	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8015600:	f7f2 fe82 	bl	8008308 <GUI_ALLOC_LockH>
 8015604:	9018      	str	r0, [sp, #96]	; 0x60
 8015606:	4628      	mov	r0, r5
 8015608:	f7f2 fe7e 	bl	8008308 <GUI_ALLOC_LockH>
 801560c:	9016      	str	r0, [sp, #88]	; 0x58
 801560e:	6933      	ldr	r3, [r6, #16]
 8015610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8015614:	f100 0518 	add.w	r5, r0, #24
 8015618:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801561c:	920c      	str	r2, [sp, #48]	; 0x30
 801561e:	b373      	cbz	r3, 801567e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8015620:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8015624:	f04f 0901 	mov.w	r9, #1
 8015628:	f1ba 0f02 	cmp.w	sl, #2
 801562c:	d005      	beq.n	801563a <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 801562e:	f1ba 0f04 	cmp.w	sl, #4
 8015632:	d002      	beq.n	801563a <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8015634:	f1ba 0f01 	cmp.w	sl, #1
 8015638:	d106      	bne.n	8015648 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 801563a:	4628      	mov	r0, r5
 801563c:	6937      	ldr	r7, [r6, #16]
 801563e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015640:	4653      	mov	r3, sl
 8015642:	4622      	mov	r2, r4
 8015644:	47b8      	blx	r7
 8015646:	445d      	add	r5, fp
 8015648:	2300      	movs	r3, #0
 801564a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801564c:	9305      	str	r3, [sp, #20]
 801564e:	9303      	str	r3, [sp, #12]
 8015650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015652:	9204      	str	r2, [sp, #16]
 8015654:	9302      	str	r3, [sp, #8]
 8015656:	4622      	mov	r2, r4
 8015658:	2301      	movs	r3, #1
 801565a:	f8cd 9004 	str.w	r9, [sp, #4]
 801565e:	f8cd 9000 	str.w	r9, [sp]
 8015662:	4641      	mov	r1, r8
 8015664:	9808      	ldr	r0, [sp, #32]
 8015666:	f7f5 f9d7 	bl	800aa18 <LCD_DrawBitmap>
 801566a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801566c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801566e:	f108 0701 	add.w	r7, r8, #1
 8015672:	4413      	add	r3, r2
 8015674:	429f      	cmp	r7, r3
 8015676:	f000 812c 	beq.w	80158d2 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801567a:	46b8      	mov	r8, r7
 801567c:	e7d4      	b.n	8015628 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 801567e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015680:	461e      	mov	r6, r3
 8015682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015684:	443b      	add	r3, r7
 8015686:	f04f 0901 	mov.w	r9, #1
 801568a:	9309      	str	r3, [sp, #36]	; 0x24
 801568c:	f1ba 0f02 	cmp.w	sl, #2
 8015690:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015694:	d016      	beq.n	80156c4 <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 8015696:	f1ba 0f04 	cmp.w	sl, #4
 801569a:	d024      	beq.n	80156e6 <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 801569c:	f1ba 0f01 	cmp.w	sl, #1
 80156a0:	d130      	bne.n	8015704 <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 80156a2:	4643      	mov	r3, r8
 80156a4:	462a      	mov	r2, r5
 80156a6:	f852 0b04 	ldr.w	r0, [r2], #4
 80156aa:	930e      	str	r3, [sp, #56]	; 0x38
 80156ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80156b0:	4798      	blx	r3
 80156b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80156b6:	f803 0b01 	strb.w	r0, [r3], #1
 80156ba:	1ae1      	subs	r1, r4, r3
 80156bc:	eb18 0f01 	cmn.w	r8, r1
 80156c0:	d1f1      	bne.n	80156a6 <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 80156c2:	e01e      	b.n	8015702 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 80156c4:	4643      	mov	r3, r8
 80156c6:	462a      	mov	r2, r5
 80156c8:	46a0      	mov	r8, r4
 80156ca:	f852 0b04 	ldr.w	r0, [r2], #4
 80156ce:	930e      	str	r3, [sp, #56]	; 0x38
 80156d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80156d4:	4798      	blx	r3
 80156d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80156da:	f823 0b02 	strh.w	r0, [r3], #2
 80156de:	f1b8 0801 	subs.w	r8, r8, #1
 80156e2:	d1f2      	bne.n	80156ca <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 80156e4:	e00d      	b.n	8015702 <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 80156e6:	462a      	mov	r2, r5
 80156e8:	4623      	mov	r3, r4
 80156ea:	f852 0b04 	ldr.w	r0, [r2], #4
 80156ee:	930e      	str	r3, [sp, #56]	; 0x38
 80156f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80156f4:	4798      	blx	r3
 80156f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156f8:	f848 0b04 	str.w	r0, [r8], #4
 80156fc:	3b01      	subs	r3, #1
 80156fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015700:	d1f3      	bne.n	80156ea <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 8015702:	445d      	add	r5, fp
 8015704:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015706:	9304      	str	r3, [sp, #16]
 8015708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801570a:	9302      	str	r3, [sp, #8]
 801570c:	9605      	str	r6, [sp, #20]
 801570e:	2301      	movs	r3, #1
 8015710:	9603      	str	r6, [sp, #12]
 8015712:	f8cd 9004 	str.w	r9, [sp, #4]
 8015716:	f8cd 9000 	str.w	r9, [sp]
 801571a:	4622      	mov	r2, r4
 801571c:	4639      	mov	r1, r7
 801571e:	9808      	ldr	r0, [sp, #32]
 8015720:	f7f5 f97a 	bl	800aa18 <LCD_DrawBitmap>
 8015724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015726:	f107 0801 	add.w	r8, r7, #1
 801572a:	4543      	cmp	r3, r8
 801572c:	f000 80d1 	beq.w	80158d2 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8015730:	4647      	mov	r7, r8
 8015732:	e7ab      	b.n	801568c <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 8015734:	2f10      	cmp	r7, #16
 8015736:	f040 80d5 	bne.w	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801573a:	fb04 f00a 	mul.w	r0, r4, sl
 801573e:	f7f2 ffbf 	bl	80086c0 <GUI_ALLOC_AllocNoInit>
 8015742:	900d      	str	r0, [sp, #52]	; 0x34
 8015744:	2800      	cmp	r0, #0
 8015746:	f000 80cd 	beq.w	80158e4 <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 801574a:	f7f2 fddd 	bl	8008308 <GUI_ALLOC_LockH>
 801574e:	9018      	str	r0, [sp, #96]	; 0x60
 8015750:	4628      	mov	r0, r5
 8015752:	f7f2 fdd9 	bl	8008308 <GUI_ALLOC_LockH>
 8015756:	9016      	str	r0, [sp, #88]	; 0x58
 8015758:	6933      	ldr	r3, [r6, #16]
 801575a:	f100 0718 	add.w	r7, r0, #24
 801575e:	b113      	cbz	r3, 8015766 <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8015760:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8015764:	b953      	cbnz	r3, 801577c <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 8015766:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801576a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801576c:	930c      	str	r3, [sp, #48]	; 0x30
 801576e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015770:	442b      	add	r3, r5
 8015772:	0066      	lsls	r6, r4, #1
 8015774:	f04f 0b00 	mov.w	fp, #0
 8015778:	9309      	str	r3, [sp, #36]	; 0x24
 801577a:	e083      	b.n	8015884 <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 801577c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8015780:	0080      	lsls	r0, r0, #2
 8015782:	f7f2 ff9d 	bl	80086c0 <GUI_ALLOC_AllocNoInit>
 8015786:	900c      	str	r0, [sp, #48]	; 0x30
 8015788:	b118      	cbz	r0, 8015792 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 801578a:	f7f2 fdbd 	bl	8008308 <GUI_ALLOC_LockH>
 801578e:	9017      	str	r0, [sp, #92]	; 0x5c
 8015790:	e001      	b.n	8015796 <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8015792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015794:	9317      	str	r3, [sp, #92]	; 0x5c
 8015796:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015798:	2b00      	cmp	r3, #0
 801579a:	f000 809a 	beq.w	80158d2 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 801579e:	0063      	lsls	r3, r4, #1
 80157a0:	930a      	str	r3, [sp, #40]	; 0x28
 80157a2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80157a6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80157aa:	930e      	str	r3, [sp, #56]	; 0x38
 80157ac:	f1ba 0f02 	cmp.w	sl, #2
 80157b0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80157b4:	d006      	beq.n	80157c4 <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 80157b6:	f1ba 0f04 	cmp.w	sl, #4
 80157ba:	d005      	beq.n	80157c8 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 80157bc:	f1ba 0f01 	cmp.w	sl, #1
 80157c0:	d111      	bne.n	80157e6 <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 80157c2:	e001      	b.n	80157c8 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 80157c4:	4653      	mov	r3, sl
 80157c6:	e000      	b.n	80157ca <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 80157c8:	2302      	movs	r3, #2
 80157ca:	4638      	mov	r0, r7
 80157cc:	4622      	mov	r2, r4
 80157ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80157d0:	f8d8 5014 	ldr.w	r5, [r8, #20]
 80157d4:	47a8      	blx	r5
 80157d6:	4653      	mov	r3, sl
 80157d8:	4622      	mov	r2, r4
 80157da:	4649      	mov	r1, r9
 80157dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80157de:	6935      	ldr	r5, [r6, #16]
 80157e0:	47a8      	blx	r5
 80157e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157e4:	441f      	add	r7, r3
 80157e6:	2300      	movs	r3, #0
 80157e8:	9305      	str	r3, [sp, #20]
 80157ea:	9303      	str	r3, [sp, #12]
 80157ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80157f0:	9302      	str	r3, [sp, #8]
 80157f2:	2301      	movs	r3, #1
 80157f4:	9204      	str	r2, [sp, #16]
 80157f6:	9301      	str	r3, [sp, #4]
 80157f8:	9300      	str	r3, [sp, #0]
 80157fa:	4622      	mov	r2, r4
 80157fc:	4659      	mov	r1, fp
 80157fe:	9808      	ldr	r0, [sp, #32]
 8015800:	f7f5 f90a 	bl	800aa18 <LCD_DrawBitmap>
 8015804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015808:	f10b 0901 	add.w	r9, fp, #1
 801580c:	4413      	add	r3, r2
 801580e:	4599      	cmp	r9, r3
 8015810:	d001      	beq.n	8015816 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 8015812:	46cb      	mov	fp, r9
 8015814:	e7ca      	b.n	80157ac <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 8015816:	a817      	add	r0, sp, #92	; 0x5c
 8015818:	f7f2 fd84 	bl	8008324 <GUI_ALLOC_UnlockH>
 801581c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801581e:	f7f2 fdb1 	bl	8008384 <GUI_ALLOC_Free>
 8015822:	e056      	b.n	80158d2 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8015824:	20027bb0 	.word	0x20027bb0
 8015828:	f1ba 0f04 	cmp.w	sl, #4
 801582c:	d041      	beq.n	80158b2 <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 801582e:	f1ba 0f01 	cmp.w	sl, #1
 8015832:	d111      	bne.n	8015858 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 8015834:	4643      	mov	r3, r8
 8015836:	463a      	mov	r2, r7
 8015838:	f832 0b02 	ldrh.w	r0, [r2], #2
 801583c:	920b      	str	r2, [sp, #44]	; 0x2c
 801583e:	930e      	str	r3, [sp, #56]	; 0x38
 8015840:	47c8      	blx	r9
 8015842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015844:	4798      	blx	r3
 8015846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801584a:	f803 0b01 	strb.w	r0, [r3], #1
 801584e:	1ae1      	subs	r1, r4, r3
 8015850:	eb18 0f01 	cmn.w	r8, r1
 8015854:	d1f0      	bne.n	8015838 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 8015856:	4437      	add	r7, r6
 8015858:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801585a:	9304      	str	r3, [sp, #16]
 801585c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801585e:	9302      	str	r3, [sp, #8]
 8015860:	2301      	movs	r3, #1
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	f8cd b014 	str.w	fp, [sp, #20]
 801586a:	f8cd b00c 	str.w	fp, [sp, #12]
 801586e:	4622      	mov	r2, r4
 8015870:	4629      	mov	r1, r5
 8015872:	9808      	ldr	r0, [sp, #32]
 8015874:	f7f5 f8d0 	bl	800aa18 <LCD_DrawBitmap>
 8015878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801587a:	f105 0801 	add.w	r8, r5, #1
 801587e:	4543      	cmp	r3, r8
 8015880:	d027      	beq.n	80158d2 <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8015882:	4645      	mov	r5, r8
 8015884:	f1ba 0f02 	cmp.w	sl, #2
 8015888:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801588c:	d1cc      	bne.n	8015828 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 801588e:	4643      	mov	r3, r8
 8015890:	463a      	mov	r2, r7
 8015892:	46a0      	mov	r8, r4
 8015894:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015898:	920b      	str	r2, [sp, #44]	; 0x2c
 801589a:	930e      	str	r3, [sp, #56]	; 0x38
 801589c:	47c8      	blx	r9
 801589e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158a0:	4798      	blx	r3
 80158a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158a6:	f823 0b02 	strh.w	r0, [r3], #2
 80158aa:	f1b8 0801 	subs.w	r8, r8, #1
 80158ae:	d1f1      	bne.n	8015894 <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 80158b0:	e7d1      	b.n	8015856 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 80158b2:	463a      	mov	r2, r7
 80158b4:	4623      	mov	r3, r4
 80158b6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80158ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80158bc:	930e      	str	r3, [sp, #56]	; 0x38
 80158be:	47c8      	blx	r9
 80158c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158c2:	4798      	blx	r3
 80158c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158c6:	f848 0b04 	str.w	r0, [r8], #4
 80158ca:	3b01      	subs	r3, #1
 80158cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158ce:	d1f2      	bne.n	80158b6 <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 80158d0:	e7c1      	b.n	8015856 <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 80158d2:	a816      	add	r0, sp, #88	; 0x58
 80158d4:	f7f2 fd26 	bl	8008324 <GUI_ALLOC_UnlockH>
 80158d8:	a818      	add	r0, sp, #96	; 0x60
 80158da:	f7f2 fd23 	bl	8008324 <GUI_ALLOC_UnlockH>
 80158de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80158e0:	f7f2 fd50 	bl	8008384 <GUI_ALLOC_Free>
 80158e4:	b01b      	add	sp, #108	; 0x6c
 80158e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158ea:	bf00      	nop

080158ec <WM__GetWindowSizeX>:
 80158ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80158f0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80158f4:	1a18      	subs	r0, r3, r0
 80158f6:	3001      	adds	r0, #1
 80158f8:	4770      	bx	lr

080158fa <WM__GetWindowSizeY>:
 80158fa:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80158fe:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8015902:	1a18      	subs	r0, r3, r0
 8015904:	3001      	adds	r0, #1
 8015906:	4770      	bx	lr

08015908 <WM_GetWindowSizeX>:
 8015908:	b513      	push	{r0, r1, r4, lr}
 801590a:	4604      	mov	r4, r0
 801590c:	f7f4 fa26 	bl	8009d5c <GUI_Lock>
 8015910:	b914      	cbnz	r4, 8015918 <WM_GetWindowSizeX+0x10>
 8015912:	f7f8 fce3 	bl	800e2dc <WM_GetActiveWindow>
 8015916:	4604      	mov	r4, r0
 8015918:	4620      	mov	r0, r4
 801591a:	f7f2 fcf5 	bl	8008308 <GUI_ALLOC_LockH>
 801591e:	aa02      	add	r2, sp, #8
 8015920:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015924:	f842 0d04 	str.w	r0, [r2, #-4]!
 8015928:	f9b0 4000 	ldrsh.w	r4, [r0]
 801592c:	4610      	mov	r0, r2
 801592e:	1b1c      	subs	r4, r3, r4
 8015930:	f7f2 fcf8 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015934:	f7f4 fa08 	bl	8009d48 <GUI_Unlock>
 8015938:	3401      	adds	r4, #1
 801593a:	4620      	mov	r0, r4
 801593c:	b002      	add	sp, #8
 801593e:	bd10      	pop	{r4, pc}

08015940 <WM_GetWindowSizeY>:
 8015940:	b513      	push	{r0, r1, r4, lr}
 8015942:	4604      	mov	r4, r0
 8015944:	f7f4 fa0a 	bl	8009d5c <GUI_Lock>
 8015948:	b914      	cbnz	r4, 8015950 <WM_GetWindowSizeY+0x10>
 801594a:	f7f8 fcc7 	bl	800e2dc <WM_GetActiveWindow>
 801594e:	4604      	mov	r4, r0
 8015950:	4620      	mov	r0, r4
 8015952:	f7f2 fcd9 	bl	8008308 <GUI_ALLOC_LockH>
 8015956:	aa02      	add	r2, sp, #8
 8015958:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801595c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8015960:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015964:	4610      	mov	r0, r2
 8015966:	1b1c      	subs	r4, r3, r4
 8015968:	f7f2 fcdc 	bl	8008324 <GUI_ALLOC_UnlockH>
 801596c:	f7f4 f9ec 	bl	8009d48 <GUI_Unlock>
 8015970:	3401      	adds	r4, #1
 8015972:	4620      	mov	r0, r4
 8015974:	b002      	add	sp, #8
 8015976:	bd10      	pop	{r4, pc}

08015978 <WM_SetHasTrans>:
 8015978:	b513      	push	{r0, r1, r4, lr}
 801597a:	4604      	mov	r4, r0
 801597c:	f7f4 f9ee 	bl	8009d5c <GUI_Lock>
 8015980:	b1c4      	cbz	r4, 80159b4 <WM_SetHasTrans+0x3c>
 8015982:	4620      	mov	r0, r4
 8015984:	f7f2 fcc0 	bl	8008308 <GUI_ALLOC_LockH>
 8015988:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801598a:	9001      	str	r0, [sp, #4]
 801598c:	07db      	lsls	r3, r3, #31
 801598e:	d40e      	bmi.n	80159ae <WM_SetHasTrans+0x36>
 8015990:	4620      	mov	r0, r4
 8015992:	f7f9 fae3 	bl	800ef5c <WM_ValidateWindow>
 8015996:	9a01      	ldr	r2, [sp, #4]
 8015998:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801599a:	f043 0301 	orr.w	r3, r3, #1
 801599e:	6293      	str	r3, [r2, #40]	; 0x28
 80159a0:	4a06      	ldr	r2, [pc, #24]	; (80159bc <WM_SetHasTrans+0x44>)
 80159a2:	6813      	ldr	r3, [r2, #0]
 80159a4:	4620      	mov	r0, r4
 80159a6:	3301      	adds	r3, #1
 80159a8:	6013      	str	r3, [r2, #0]
 80159aa:	f7f8 fad9 	bl	800df60 <WM_InvalidateWindow>
 80159ae:	a801      	add	r0, sp, #4
 80159b0:	f7f2 fcb8 	bl	8008324 <GUI_ALLOC_UnlockH>
 80159b4:	f7f4 f9c8 	bl	8009d48 <GUI_Unlock>
 80159b8:	b002      	add	sp, #8
 80159ba:	bd10      	pop	{r4, pc}
 80159bc:	20027c24 	.word	0x20027c24

080159c0 <WM_GetHasTrans>:
 80159c0:	b510      	push	{r4, lr}
 80159c2:	4604      	mov	r4, r0
 80159c4:	f7f4 f9ca 	bl	8009d5c <GUI_Lock>
 80159c8:	b12c      	cbz	r4, 80159d6 <WM_GetHasTrans+0x16>
 80159ca:	4620      	mov	r0, r4
 80159cc:	f7f2 fc92 	bl	80082f4 <GUI_ALLOC_h2p>
 80159d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80159d2:	f004 0401 	and.w	r4, r4, #1
 80159d6:	f7f4 f9b7 	bl	8009d48 <GUI_Unlock>
 80159da:	4620      	mov	r0, r4
 80159dc:	bd10      	pop	{r4, pc}

080159de <_OnButtonPressed>:
 80159de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80159e4:	4604      	mov	r4, r0
 80159e6:	f7fc fd97 	bl	8012518 <WIDGET_OrState>
 80159ea:	4620      	mov	r0, r4
 80159ec:	f7f2 fc8c 	bl	8008308 <GUI_ALLOC_LockH>
 80159f0:	ab02      	add	r3, sp, #8
 80159f2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80159f4:	f843 0d04 	str.w	r0, [r3, #-4]!
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7f2 fc93 	bl	8008324 <GUI_ALLOC_UnlockH>
 80159fe:	07ab      	lsls	r3, r5, #30
 8015a00:	d503      	bpl.n	8015a0a <_OnButtonPressed+0x2c>
 8015a02:	2101      	movs	r1, #1
 8015a04:	4620      	mov	r0, r4
 8015a06:	f7f9 fa39 	bl	800ee7c <WM_NotifyParent>
 8015a0a:	b003      	add	sp, #12
 8015a0c:	bd30      	pop	{r4, r5, pc}

08015a0e <_OnButtonReleased>:
 8015a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a10:	4604      	mov	r4, r0
 8015a12:	460d      	mov	r5, r1
 8015a14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015a18:	f7fc fd98 	bl	801254c <WIDGET_AndState>
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f7f2 fc73 	bl	8008308 <GUI_ALLOC_LockH>
 8015a22:	ab02      	add	r3, sp, #8
 8015a24:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8015a26:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015a2a:	f9b0 7030 	ldrsh.w	r7, [r0, #48]	; 0x30
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7f2 fc78 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015a34:	2d02      	cmp	r5, #2
 8015a36:	d102      	bne.n	8015a3e <_OnButtonReleased+0x30>
 8015a38:	b2b8      	uxth	r0, r7
 8015a3a:	f7f4 f907 	bl	8009c4c <GUI_StoreKey>
 8015a3e:	07b3      	lsls	r3, r6, #30
 8015a40:	d503      	bpl.n	8015a4a <_OnButtonReleased+0x3c>
 8015a42:	4629      	mov	r1, r5
 8015a44:	4620      	mov	r0, r4
 8015a46:	f7f9 fa19 	bl	800ee7c <WM_NotifyParent>
 8015a4a:	b003      	add	sp, #12
 8015a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a4e <_OnTouchDefault>:
 8015a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a50:	460e      	mov	r6, r1
 8015a52:	4605      	mov	r5, r0
 8015a54:	f7f2 fc58 	bl	8008308 <GUI_ALLOC_LockH>
 8015a58:	ab02      	add	r3, sp, #8
 8015a5a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8015a5c:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f2 fc5f 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015a66:	68f3      	ldr	r3, [r6, #12]
 8015a68:	b15b      	cbz	r3, 8015a82 <_OnTouchDefault+0x34>
 8015a6a:	7a1a      	ldrb	r2, [r3, #8]
 8015a6c:	f404 7380 	and.w	r3, r4, #256	; 0x100
 8015a70:	b122      	cbz	r2, 8015a7c <_OnTouchDefault+0x2e>
 8015a72:	b953      	cbnz	r3, 8015a8a <_OnTouchDefault+0x3c>
 8015a74:	4628      	mov	r0, r5
 8015a76:	f7ff ffb2 	bl	80159de <_OnButtonPressed>
 8015a7a:	e006      	b.n	8015a8a <_OnTouchDefault+0x3c>
 8015a7c:	b12b      	cbz	r3, 8015a8a <_OnTouchDefault+0x3c>
 8015a7e:	2102      	movs	r1, #2
 8015a80:	e000      	b.n	8015a84 <_OnTouchDefault+0x36>
 8015a82:	2103      	movs	r1, #3
 8015a84:	4628      	mov	r0, r5
 8015a86:	f7ff ffc2 	bl	8015a0e <_OnButtonReleased>
 8015a8a:	b002      	add	sp, #8
 8015a8c:	bd70      	pop	{r4, r5, r6, pc}

08015a8e <_Create>:
 8015a8e:	b530      	push	{r4, r5, lr}
 8015a90:	b08b      	sub	sp, #44	; 0x2c
 8015a92:	2100      	movs	r1, #0
 8015a94:	4604      	mov	r4, r0
 8015a96:	2224      	movs	r2, #36	; 0x24
 8015a98:	a801      	add	r0, sp, #4
 8015a9a:	f002 fc0a 	bl	80182b2 <memset>
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	f7f2 fc32 	bl	8008308 <GUI_ALLOC_LockH>
 8015aa4:	ab0a      	add	r3, sp, #40	; 0x28
 8015aa6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8015aa8:	f843 0d28 	str.w	r0, [r3, #-40]!
 8015aac:	6895      	ldr	r5, [r2, #8]
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7f2 fc38 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	9302      	str	r3, [sp, #8]
 8015ab8:	9401      	str	r4, [sp, #4]
 8015aba:	682b      	ldr	r3, [r5, #0]
 8015abc:	a801      	add	r0, sp, #4
 8015abe:	4798      	blx	r3
 8015ac0:	b00b      	add	sp, #44	; 0x2c
 8015ac2:	bd30      	pop	{r4, r5, pc}

08015ac4 <_Paint>:
 8015ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac8:	b08a      	sub	sp, #40	; 0x28
 8015aca:	4607      	mov	r7, r0
 8015acc:	f7f2 fc1c 	bl	8008308 <GUI_ALLOC_LockH>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	a80a      	add	r0, sp, #40	; 0x28
 8015ad4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8015ad6:	f840 3d28 	str.w	r3, [r0, #-40]!
 8015ada:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8015adc:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 8015ae0:	f7f2 fc20 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015ae4:	4638      	mov	r0, r7
 8015ae6:	f7ff ff0f 	bl	8015908 <WM_GetWindowSizeX>
 8015aea:	4606      	mov	r6, r0
 8015aec:	4638      	mov	r0, r7
 8015aee:	f7ff ff27 	bl	8015940 <WM_GetWindowSizeY>
 8015af2:	3e01      	subs	r6, #1
 8015af4:	2300      	movs	r3, #0
 8015af6:	3801      	subs	r0, #1
 8015af8:	f015 0510 	ands.w	r5, r5, #16
 8015afc:	9701      	str	r7, [sp, #4]
 8015afe:	9306      	str	r3, [sp, #24]
 8015b00:	9305      	str	r3, [sp, #20]
 8015b02:	9607      	str	r6, [sp, #28]
 8015b04:	9008      	str	r0, [sp, #32]
 8015b06:	d001      	beq.n	8015b0c <_Paint+0x48>
 8015b08:	2303      	movs	r3, #3
 8015b0a:	e009      	b.n	8015b20 <_Paint+0x5c>
 8015b0c:	f418 7f80 	tst.w	r8, #256	; 0x100
 8015b10:	d001      	beq.n	8015b16 <_Paint+0x52>
 8015b12:	9503      	str	r5, [sp, #12]
 8015b14:	e005      	b.n	8015b22 <_Paint+0x5e>
 8015b16:	f018 0f01 	tst.w	r8, #1
 8015b1a:	bf14      	ite	ne
 8015b1c:	2301      	movne	r3, #1
 8015b1e:	2302      	moveq	r3, #2
 8015b20:	9303      	str	r3, [sp, #12]
 8015b22:	2305      	movs	r3, #5
 8015b24:	9302      	str	r3, [sp, #8]
 8015b26:	a801      	add	r0, sp, #4
 8015b28:	47a0      	blx	r4
 8015b2a:	2306      	movs	r3, #6
 8015b2c:	9302      	str	r3, [sp, #8]
 8015b2e:	a801      	add	r0, sp, #4
 8015b30:	47a0      	blx	r4
 8015b32:	2312      	movs	r3, #18
 8015b34:	9302      	str	r3, [sp, #8]
 8015b36:	a801      	add	r0, sp, #4
 8015b38:	47a0      	blx	r4
 8015b3a:	230a      	movs	r3, #10
 8015b3c:	9302      	str	r3, [sp, #8]
 8015b3e:	a801      	add	r0, sp, #4
 8015b40:	47a0      	blx	r4
 8015b42:	b00a      	add	sp, #40	; 0x28
 8015b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b48 <BUTTON_DrawSkinFlex>:
 8015b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b4c:	4b8b      	ldr	r3, [pc, #556]	; (8015d7c <BUTTON_DrawSkinFlex+0x234>)
 8015b4e:	6882      	ldr	r2, [r0, #8]
 8015b50:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015b54:	6843      	ldr	r3, [r0, #4]
 8015b56:	2b05      	cmp	r3, #5
 8015b58:	b088      	sub	sp, #32
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	d00e      	beq.n	8015b7c <BUTTON_DrawSkinFlex+0x34>
 8015b5e:	dc06      	bgt.n	8015b6e <BUTTON_DrawSkinFlex+0x26>
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	f040 8107 	bne.w	8015d74 <BUTTON_DrawSkinFlex+0x22c>
 8015b66:	6800      	ldr	r0, [r0, #0]
 8015b68:	f7ff ff06 	bl	8015978 <WM_SetHasTrans>
 8015b6c:	e102      	b.n	8015d74 <BUTTON_DrawSkinFlex+0x22c>
 8015b6e:	2b06      	cmp	r3, #6
 8015b70:	f000 8089 	beq.w	8015c86 <BUTTON_DrawSkinFlex+0x13e>
 8015b74:	2b12      	cmp	r3, #18
 8015b76:	f000 80aa 	beq.w	8015cce <BUTTON_DrawSkinFlex+0x186>
 8015b7a:	e0fb      	b.n	8015d74 <BUTTON_DrawSkinFlex+0x22c>
 8015b7c:	69ee      	ldr	r6, [r5, #28]
 8015b7e:	2e00      	cmp	r6, #0
 8015b80:	d051      	beq.n	8015c26 <BUTTON_DrawSkinFlex+0xde>
 8015b82:	68ab      	ldr	r3, [r5, #8]
 8015b84:	9303      	str	r3, [sp, #12]
 8015b86:	686b      	ldr	r3, [r5, #4]
 8015b88:	9302      	str	r3, [sp, #8]
 8015b8a:	682b      	ldr	r3, [r5, #0]
 8015b8c:	9301      	str	r3, [sp, #4]
 8015b8e:	9600      	str	r6, [sp, #0]
 8015b90:	3010      	adds	r0, #16
 8015b92:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8015b94:	f7fe fae4 	bl	8014160 <GUI__DrawTwinArc4>
 8015b98:	2600      	movs	r6, #0
 8015b9a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8015b9e:	f7f2 ff2d 	bl	80089fc <GUI_SetColor>
 8015ba2:	69eb      	ldr	r3, [r5, #28]
 8015ba4:	69a2      	ldr	r2, [r4, #24]
 8015ba6:	6921      	ldr	r1, [r4, #16]
 8015ba8:	6960      	ldr	r0, [r4, #20]
 8015baa:	1ad2      	subs	r2, r2, r3
 8015bac:	4419      	add	r1, r3
 8015bae:	4430      	add	r0, r6
 8015bb0:	f7fd fb0e 	bl	80131d0 <GUI_DrawHLine>
 8015bb4:	69eb      	ldr	r3, [r5, #28]
 8015bb6:	69a2      	ldr	r2, [r4, #24]
 8015bb8:	6921      	ldr	r1, [r4, #16]
 8015bba:	69e0      	ldr	r0, [r4, #28]
 8015bbc:	1ad2      	subs	r2, r2, r3
 8015bbe:	4419      	add	r1, r3
 8015bc0:	1b80      	subs	r0, r0, r6
 8015bc2:	f7fd fb05 	bl	80131d0 <GUI_DrawHLine>
 8015bc6:	69eb      	ldr	r3, [r5, #28]
 8015bc8:	69e2      	ldr	r2, [r4, #28]
 8015bca:	6961      	ldr	r1, [r4, #20]
 8015bcc:	6920      	ldr	r0, [r4, #16]
 8015bce:	1ad2      	subs	r2, r2, r3
 8015bd0:	4419      	add	r1, r3
 8015bd2:	4430      	add	r0, r6
 8015bd4:	f7fd fb62 	bl	801329c <GUI_DrawVLine>
 8015bd8:	69eb      	ldr	r3, [r5, #28]
 8015bda:	69e2      	ldr	r2, [r4, #28]
 8015bdc:	6961      	ldr	r1, [r4, #20]
 8015bde:	69a0      	ldr	r0, [r4, #24]
 8015be0:	1ad2      	subs	r2, r2, r3
 8015be2:	1b80      	subs	r0, r0, r6
 8015be4:	4419      	add	r1, r3
 8015be6:	3601      	adds	r6, #1
 8015be8:	f7fd fb58 	bl	801329c <GUI_DrawVLine>
 8015bec:	2e02      	cmp	r6, #2
 8015bee:	d1d4      	bne.n	8015b9a <BUTTON_DrawSkinFlex+0x52>
 8015bf0:	68a8      	ldr	r0, [r5, #8]
 8015bf2:	f7f2 ff03 	bl	80089fc <GUI_SetColor>
 8015bf6:	69e9      	ldr	r1, [r5, #28]
 8015bf8:	6920      	ldr	r0, [r4, #16]
 8015bfa:	6966      	ldr	r6, [r4, #20]
 8015bfc:	69e3      	ldr	r3, [r4, #28]
 8015bfe:	1842      	adds	r2, r0, r1
 8015c00:	1a5b      	subs	r3, r3, r1
 8015c02:	3a01      	subs	r2, #1
 8015c04:	4431      	add	r1, r6
 8015c06:	3002      	adds	r0, #2
 8015c08:	f7fd fb70 	bl	80132ec <GUI_FillRect>
 8015c0c:	69e9      	ldr	r1, [r5, #28]
 8015c0e:	69a2      	ldr	r2, [r4, #24]
 8015c10:	6966      	ldr	r6, [r4, #20]
 8015c12:	69e3      	ldr	r3, [r4, #28]
 8015c14:	1a50      	subs	r0, r2, r1
 8015c16:	1a5b      	subs	r3, r3, r1
 8015c18:	3a02      	subs	r2, #2
 8015c1a:	4431      	add	r1, r6
 8015c1c:	3001      	adds	r0, #1
 8015c1e:	f7fd fb65 	bl	80132ec <GUI_FillRect>
 8015c22:	69ee      	ldr	r6, [r5, #28]
 8015c24:	e00f      	b.n	8015c46 <BUTTON_DrawSkinFlex+0xfe>
 8015c26:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8015c2a:	f7f2 fee7 	bl	80089fc <GUI_SetColor>
 8015c2e:	f104 0010 	add.w	r0, r4, #16
 8015c32:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8015c34:	1b9b      	subs	r3, r3, r6
 8015c36:	1b92      	subs	r2, r2, r6
 8015c38:	4431      	add	r1, r6
 8015c3a:	4430      	add	r0, r6
 8015c3c:	3601      	adds	r6, #1
 8015c3e:	f7fc fe7f 	bl	8012940 <GUI_DrawRect>
 8015c42:	2e02      	cmp	r6, #2
 8015c44:	d1ef      	bne.n	8015c26 <BUTTON_DrawSkinFlex+0xde>
 8015c46:	6961      	ldr	r1, [r4, #20]
 8015c48:	69e3      	ldr	r3, [r4, #28]
 8015c4a:	692f      	ldr	r7, [r5, #16]
 8015c4c:	69a2      	ldr	r2, [r4, #24]
 8015c4e:	6920      	ldr	r0, [r4, #16]
 8015c50:	9701      	str	r7, [sp, #4]
 8015c52:	68ef      	ldr	r7, [r5, #12]
 8015c54:	9700      	str	r7, [sp, #0]
 8015c56:	440b      	add	r3, r1
 8015c58:	1b92      	subs	r2, r2, r6
 8015c5a:	4430      	add	r0, r6
 8015c5c:	105b      	asrs	r3, r3, #1
 8015c5e:	3102      	adds	r1, #2
 8015c60:	f7fd fa42 	bl	80130e8 <GUI_DrawGradientV>
 8015c64:	f104 0114 	add.w	r1, r4, #20
 8015c68:	c90e      	ldmia	r1, {r1, r2, r3}
 8015c6a:	6920      	ldr	r0, [r4, #16]
 8015c6c:	69ac      	ldr	r4, [r5, #24]
 8015c6e:	9401      	str	r4, [sp, #4]
 8015c70:	4419      	add	r1, r3
 8015c72:	696c      	ldr	r4, [r5, #20]
 8015c74:	9400      	str	r4, [sp, #0]
 8015c76:	1049      	asrs	r1, r1, #1
 8015c78:	3b02      	subs	r3, #2
 8015c7a:	1b92      	subs	r2, r2, r6
 8015c7c:	3101      	adds	r1, #1
 8015c7e:	4430      	add	r0, r6
 8015c80:	f7fd fa32 	bl	80130e8 <GUI_DrawGradientV>
 8015c84:	e076      	b.n	8015d74 <BUTTON_DrawSkinFlex+0x22c>
 8015c86:	6800      	ldr	r0, [r0, #0]
 8015c88:	f7f2 fb3e 	bl	8008308 <GUI_ALLOC_LockH>
 8015c8c:	9004      	str	r0, [sp, #16]
 8015c8e:	6820      	ldr	r0, [r4, #0]
 8015c90:	f7f9 fade 	bl	800f250 <WM__IsEnabled>
 8015c94:	9b04      	ldr	r3, [sp, #16]
 8015c96:	b130      	cbz	r0, 8015ca6 <BUTTON_DrawSkinFlex+0x15e>
 8015c98:	68a2      	ldr	r2, [r4, #8]
 8015c9a:	b952      	cbnz	r2, 8015cb2 <BUTTON_DrawSkinFlex+0x16a>
 8015c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015c9e:	3200      	adds	r2, #0
 8015ca0:	bf18      	it	ne
 8015ca2:	2201      	movne	r2, #1
 8015ca4:	e006      	b.n	8015cb4 <BUTTON_DrawSkinFlex+0x16c>
 8015ca6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8015ca8:	2a00      	cmp	r2, #0
 8015caa:	bf0c      	ite	eq
 8015cac:	2200      	moveq	r2, #0
 8015cae:	2202      	movne	r2, #2
 8015cb0:	e000      	b.n	8015cb4 <BUTTON_DrawSkinFlex+0x16c>
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015cb8:	a804      	add	r0, sp, #16
 8015cba:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8015cbc:	f7f2 fb32 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	6821      	ldr	r1, [r4, #0]
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	f7fa fd74 	bl	80107b4 <GUI_DRAW__Draw>
 8015ccc:	e052      	b.n	8015d74 <BUTTON_DrawSkinFlex+0x22c>
 8015cce:	6800      	ldr	r0, [r0, #0]
 8015cd0:	f7f2 fb1a 	bl	8008308 <GUI_ALLOC_LockH>
 8015cd4:	ae08      	add	r6, sp, #32
 8015cd6:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 8015cda:	f846 0d10 	str.w	r0, [r6, #-16]!
 8015cde:	f1b8 0f00 	cmp.w	r8, #0
 8015ce2:	d044      	beq.n	8015d6e <BUTTON_DrawSkinFlex+0x226>
 8015ce4:	68a3      	ldr	r3, [r4, #8]
 8015ce6:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 8015cea:	b123      	cbz	r3, 8015cf6 <BUTTON_DrawSkinFlex+0x1ae>
 8015cec:	2b03      	cmp	r3, #3
 8015cee:	bf0c      	ite	eq
 8015cf0:	2302      	moveq	r3, #2
 8015cf2:	2300      	movne	r3, #0
 8015cf4:	e000      	b.n	8015cf8 <BUTTON_DrawSkinFlex+0x1b0>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015cfc:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015cfe:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8015d00:	f7f2 fea6 	bl	8008a50 <GUI_SetFont>
 8015d04:	4620      	mov	r0, r4
 8015d06:	f7f2 fe79 	bl	80089fc <GUI_SetColor>
 8015d0a:	a806      	add	r0, sp, #24
 8015d0c:	f7f2 fd33 	bl	8008776 <GUI_GetClientRect>
 8015d10:	8ba9      	ldrh	r1, [r5, #28]
 8015d12:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8015d16:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8015d1a:	1a5b      	subs	r3, r3, r1
 8015d1c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015d20:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8015d24:	3302      	adds	r3, #2
 8015d26:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015d2a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015d2e:	3b02      	subs	r3, #2
 8015d30:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015d34:	9b04      	ldr	r3, [sp, #16]
 8015d36:	440a      	add	r2, r1
 8015d38:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015d3c:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8015d40:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8015d44:	a806      	add	r0, sp, #24
 8015d46:	f7f2 fdb6 	bl	80088b6 <GUI_MoveRect>
 8015d4a:	4630      	mov	r0, r6
 8015d4c:	f7f2 faea 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015d50:	2002      	movs	r0, #2
 8015d52:	f7f2 fecb 	bl	8008aec <GUI_SetTextMode>
 8015d56:	4640      	mov	r0, r8
 8015d58:	f7f2 fad6 	bl	8008308 <GUI_ALLOC_LockH>
 8015d5c:	ac08      	add	r4, sp, #32
 8015d5e:	463a      	mov	r2, r7
 8015d60:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8015d64:	a906      	add	r1, sp, #24
 8015d66:	f7f3 fac2 	bl	80092ee <GUI_DispStringInRect>
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	e000      	b.n	8015d70 <BUTTON_DrawSkinFlex+0x228>
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f7f2 fad8 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015d74:	2000      	movs	r0, #0
 8015d76:	b008      	add	sp, #32
 8015d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d7c:	0801bb4c 	.word	0x0801bb4c

08015d80 <CHECKBOX__GetButtonSize>:
 8015d80:	b500      	push	{lr}
 8015d82:	b08b      	sub	sp, #44	; 0x2c
 8015d84:	2224      	movs	r2, #36	; 0x24
 8015d86:	2100      	movs	r1, #0
 8015d88:	a801      	add	r0, sp, #4
 8015d8a:	f002 fa92 	bl	80182b2 <memset>
 8015d8e:	2319      	movs	r3, #25
 8015d90:	9302      	str	r3, [sp, #8]
 8015d92:	4b04      	ldr	r3, [pc, #16]	; (8015da4 <CHECKBOX__GetButtonSize+0x24>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	a801      	add	r0, sp, #4
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	4798      	blx	r3
 8015d9e:	b00b      	add	sp, #44	; 0x2c
 8015da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015da4:	20000518 	.word	0x20000518

08015da8 <CHECKBOX_GetBkColor>:
 8015da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015daa:	4605      	mov	r5, r0
 8015dac:	b190      	cbz	r0, 8015dd4 <CHECKBOX_GetBkColor+0x2c>
 8015dae:	f7f3 ffd5 	bl	8009d5c <GUI_Lock>
 8015db2:	4628      	mov	r0, r5
 8015db4:	f7f2 faa8 	bl	8008308 <GUI_ALLOC_LockH>
 8015db8:	9001      	str	r0, [sp, #4]
 8015dba:	b120      	cbz	r0, 8015dc6 <CHECKBOX_GetBkColor+0x1e>
 8015dbc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f7f8 f8ce 	bl	800df60 <WM_InvalidateWindow>
 8015dc4:	e000      	b.n	8015dc8 <CHECKBOX_GetBkColor+0x20>
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	a801      	add	r0, sp, #4
 8015dca:	f7f2 faab 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015dce:	f7f3 ffbb 	bl	8009d48 <GUI_Unlock>
 8015dd2:	e000      	b.n	8015dd6 <CHECKBOX_GetBkColor+0x2e>
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	b003      	add	sp, #12
 8015dda:	bd30      	pop	{r4, r5, pc}

08015ddc <_Create>:
 8015ddc:	b530      	push	{r4, r5, lr}
 8015dde:	b08b      	sub	sp, #44	; 0x2c
 8015de0:	4605      	mov	r5, r0
 8015de2:	f7f2 fa91 	bl	8008308 <GUI_ALLOC_LockH>
 8015de6:	ab0a      	add	r3, sp, #40	; 0x28
 8015de8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015dea:	f843 0d28 	str.w	r0, [r3, #-40]!
 8015dee:	4618      	mov	r0, r3
 8015df0:	6894      	ldr	r4, [r2, #8]
 8015df2:	f7f2 fa97 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015df6:	a80a      	add	r0, sp, #40	; 0x28
 8015df8:	2300      	movs	r3, #0
 8015dfa:	9302      	str	r3, [sp, #8]
 8015dfc:	f840 5d24 	str.w	r5, [r0, #-36]!
 8015e00:	6863      	ldr	r3, [r4, #4]
 8015e02:	4798      	blx	r3
 8015e04:	b00b      	add	sp, #44	; 0x2c
 8015e06:	bd30      	pop	{r4, r5, pc}

08015e08 <_Paint>:
 8015e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e0c:	b08b      	sub	sp, #44	; 0x2c
 8015e0e:	4607      	mov	r7, r0
 8015e10:	f7f2 fa7a 	bl	8008308 <GUI_ALLOC_LockH>
 8015e14:	4603      	mov	r3, r0
 8015e16:	a80a      	add	r0, sp, #40	; 0x28
 8015e18:	f893 9075 	ldrb.w	r9, [r3, #117]	; 0x75
 8015e1c:	f840 3d28 	str.w	r3, [r0, #-40]!
 8015e20:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8015e22:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8015e24:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 8015e28:	f7f2 fa7c 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015e2c:	4638      	mov	r0, r7
 8015e2e:	f7ff fd6b 	bl	8015908 <WM_GetWindowSizeX>
 8015e32:	4606      	mov	r6, r0
 8015e34:	4638      	mov	r0, r7
 8015e36:	f7ff fd83 	bl	8015940 <WM_GetWindowSizeY>
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	3801      	subs	r0, #1
 8015e3e:	9306      	str	r3, [sp, #24]
 8015e40:	9305      	str	r3, [sp, #20]
 8015e42:	3e01      	subs	r6, #1
 8015e44:	2307      	movs	r3, #7
 8015e46:	9008      	str	r0, [sp, #32]
 8015e48:	9701      	str	r7, [sp, #4]
 8015e4a:	9607      	str	r6, [sp, #28]
 8015e4c:	9302      	str	r3, [sp, #8]
 8015e4e:	a801      	add	r0, sp, #4
 8015e50:	47a0      	blx	r4
 8015e52:	f1b9 0f00 	cmp.w	r9, #0
 8015e56:	d005      	beq.n	8015e64 <_Paint+0x5c>
 8015e58:	2306      	movs	r3, #6
 8015e5a:	9302      	str	r3, [sp, #8]
 8015e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015e60:	a801      	add	r0, sp, #4
 8015e62:	47a0      	blx	r4
 8015e64:	b165      	cbz	r5, 8015e80 <_Paint+0x78>
 8015e66:	2312      	movs	r3, #18
 8015e68:	4628      	mov	r0, r5
 8015e6a:	9302      	str	r3, [sp, #8]
 8015e6c:	f7f2 fa4c 	bl	8008308 <GUI_ALLOC_LockH>
 8015e70:	ae0a      	add	r6, sp, #40	; 0x28
 8015e72:	f846 0d04 	str.w	r0, [r6, #-4]!
 8015e76:	a801      	add	r0, sp, #4
 8015e78:	47a0      	blx	r4
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	f7f2 fa52 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015e80:	f018 0f01 	tst.w	r8, #1
 8015e84:	d00d      	beq.n	8015ea2 <_Paint+0x9a>
 8015e86:	b165      	cbz	r5, 8015ea2 <_Paint+0x9a>
 8015e88:	230a      	movs	r3, #10
 8015e8a:	4628      	mov	r0, r5
 8015e8c:	9302      	str	r3, [sp, #8]
 8015e8e:	f7f2 fa3b 	bl	8008308 <GUI_ALLOC_LockH>
 8015e92:	ad0a      	add	r5, sp, #40	; 0x28
 8015e94:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015e98:	a801      	add	r0, sp, #4
 8015e9a:	47a0      	blx	r4
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	f7f2 fa41 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015ea2:	b00b      	add	sp, #44	; 0x2c
 8015ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015ea8 <CHECKBOX_GetSkinFlexButtonSize>:
 8015ea8:	b513      	push	{r0, r1, r4, lr}
 8015eaa:	4604      	mov	r4, r0
 8015eac:	f7f3 ff56 	bl	8009d5c <GUI_Lock>
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	f7f2 fa29 	bl	8008308 <GUI_ALLOC_LockH>
 8015eb6:	ab02      	add	r3, sp, #8
 8015eb8:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8015eba:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7f2 fa30 	bl	8008324 <GUI_ALLOC_UnlockH>
 8015ec4:	f7f3 ff40 	bl	8009d48 <GUI_Unlock>
 8015ec8:	4620      	mov	r0, r4
 8015eca:	b002      	add	sp, #8
 8015ecc:	bd10      	pop	{r4, pc}
	...

08015ed0 <CHECKBOX_DrawSkinFlex>:
 8015ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed4:	4605      	mov	r5, r0
 8015ed6:	6800      	ldr	r0, [r0, #0]
 8015ed8:	b08d      	sub	sp, #52	; 0x34
 8015eda:	b128      	cbz	r0, 8015ee8 <CHECKBOX_DrawSkinFlex+0x18>
 8015edc:	f7f9 f9b8 	bl	800f250 <WM__IsEnabled>
 8015ee0:	fab0 f680 	clz	r6, r0
 8015ee4:	0976      	lsrs	r6, r6, #5
 8015ee6:	e000      	b.n	8015eea <CHECKBOX_DrawSkinFlex+0x1a>
 8015ee8:	4606      	mov	r6, r0
 8015eea:	686c      	ldr	r4, [r5, #4]
 8015eec:	4bbf      	ldr	r3, [pc, #764]	; (80161ec <CHECKBOX_DrawSkinFlex+0x31c>)
 8015eee:	2c07      	cmp	r4, #7
 8015ef0:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8015ef4:	d01e      	beq.n	8015f34 <CHECKBOX_DrawSkinFlex+0x64>
 8015ef6:	dc14      	bgt.n	8015f22 <CHECKBOX_DrawSkinFlex+0x52>
 8015ef8:	2c00      	cmp	r4, #0
 8015efa:	f000 8110 	beq.w	801611e <CHECKBOX_DrawSkinFlex+0x24e>
 8015efe:	2c06      	cmp	r4, #6
 8015f00:	f040 8121 	bne.w	8016146 <CHECKBOX_DrawSkinFlex+0x276>
 8015f04:	68ab      	ldr	r3, [r5, #8]
 8015f06:	6828      	ldr	r0, [r5, #0]
 8015f08:	9303      	str	r3, [sp, #12]
 8015f0a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 8015f0e:	f7ff ffcb 	bl	8015ea8 <CHECKBOX_GetSkinFlexButtonSize>
 8015f12:	4bb7      	ldr	r3, [pc, #732]	; (80161f0 <CHECKBOX_DrawSkinFlex+0x320>)
 8015f14:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8015f18:	2314      	movs	r3, #20
 8015f1a:	4682      	mov	sl, r0
 8015f1c:	fb03 f309 	mul.w	r3, r3, r9
 8015f20:	e03c      	b.n	8015f9c <CHECKBOX_DrawSkinFlex+0xcc>
 8015f22:	2c12      	cmp	r4, #18
 8015f24:	d069      	beq.n	8015ffa <CHECKBOX_DrawSkinFlex+0x12a>
 8015f26:	2c19      	cmp	r4, #25
 8015f28:	f000 80f7 	beq.w	801611a <CHECKBOX_DrawSkinFlex+0x24a>
 8015f2c:	2c0a      	cmp	r4, #10
 8015f2e:	f040 810a 	bne.w	8016146 <CHECKBOX_DrawSkinFlex+0x276>
 8015f32:	e08f      	b.n	8016054 <CHECKBOX_DrawSkinFlex+0x184>
 8015f34:	6828      	ldr	r0, [r5, #0]
 8015f36:	f7ff ffb7 	bl	8015ea8 <CHECKBOX_GetSkinFlexButtonSize>
 8015f3a:	4606      	mov	r6, r0
 8015f3c:	6828      	ldr	r0, [r5, #0]
 8015f3e:	f7ff fd3f 	bl	80159c0 <WM_GetHasTrans>
 8015f42:	b930      	cbnz	r0, 8015f52 <CHECKBOX_DrawSkinFlex+0x82>
 8015f44:	6828      	ldr	r0, [r5, #0]
 8015f46:	f7ff ff2f 	bl	8015da8 <CHECKBOX_GetBkColor>
 8015f4a:	f7f2 fd4c 	bl	80089e6 <GUI_SetBkColor>
 8015f4e:	f7f2 fead 	bl	8008cac <GUI_Clear>
 8015f52:	2400      	movs	r4, #0
 8015f54:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8015f58:	f7f2 fd50 	bl	80089fc <GUI_SetColor>
 8015f5c:	6928      	ldr	r0, [r5, #16]
 8015f5e:	6969      	ldr	r1, [r5, #20]
 8015f60:	1833      	adds	r3, r6, r0
 8015f62:	3b01      	subs	r3, #1
 8015f64:	1b1b      	subs	r3, r3, r4
 8015f66:	4421      	add	r1, r4
 8015f68:	4420      	add	r0, r4
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	3401      	adds	r4, #1
 8015f6e:	f7fc fce7 	bl	8012940 <GUI_DrawRect>
 8015f72:	2c03      	cmp	r4, #3
 8015f74:	d1ee      	bne.n	8015f54 <CHECKBOX_DrawSkinFlex+0x84>
 8015f76:	6928      	ldr	r0, [r5, #16]
 8015f78:	693a      	ldr	r2, [r7, #16]
 8015f7a:	6969      	ldr	r1, [r5, #20]
 8015f7c:	9201      	str	r2, [sp, #4]
 8015f7e:	1833      	adds	r3, r6, r0
 8015f80:	68fa      	ldr	r2, [r7, #12]
 8015f82:	9200      	str	r2, [sp, #0]
 8015f84:	3b04      	subs	r3, #4
 8015f86:	461a      	mov	r2, r3
 8015f88:	3103      	adds	r1, #3
 8015f8a:	3003      	adds	r0, #3
 8015f8c:	f7fd f8ac 	bl	80130e8 <GUI_DrawGradientV>
 8015f90:	e0d9      	b.n	8016146 <CHECKBOX_DrawSkinFlex+0x276>
 8015f92:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8015f96:	4592      	cmp	sl, r2
 8015f98:	d003      	beq.n	8015fa2 <CHECKBOX_DrawSkinFlex+0xd2>
 8015f9a:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
 8015f9c:	2c00      	cmp	r4, #0
 8015f9e:	d1f8      	bne.n	8015f92 <CHECKBOX_DrawSkinFlex+0xc2>
 8015fa0:	e0d3      	b.n	801614a <CHECKBOX_DrawSkinFlex+0x27a>
 8015fa2:	18e2      	adds	r2, r4, r3
 8015fa4:	6892      	ldr	r2, [r2, #8]
 8015fa6:	2a00      	cmp	r2, #0
 8015fa8:	d0f7      	beq.n	8015f9a <CHECKBOX_DrawSkinFlex+0xca>
 8015faa:	e01e      	b.n	8015fea <CHECKBOX_DrawSkinFlex+0x11a>
 8015fac:	230c      	movs	r3, #12
 8015fae:	fb03 4309 	mla	r3, r3, r9, r4
 8015fb2:	2202      	movs	r2, #2
 8015fb4:	629a      	str	r2, [r3, #40]	; 0x28
 8015fb6:	9a04      	ldr	r2, [sp, #16]
 8015fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8015fba:	2101      	movs	r1, #1
 8015fbc:	9a03      	ldr	r2, [sp, #12]
 8015fbe:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
 8015fc2:	2314      	movs	r3, #20
 8015fc4:	fb03 4202 	mla	r2, r3, r2, r4
 8015fc8:	fb03 4309 	mla	r3, r3, r9, r4
 8015fcc:	f822 1c0e 	strh.w	r1, [r2, #-14]
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	f822 8c10 	strh.w	r8, [r2, #-16]
 8015fd6:	b2bf      	uxth	r7, r7
 8015fd8:	6119      	str	r1, [r3, #16]
 8015fda:	9905      	ldr	r1, [sp, #20]
 8015fdc:	f8c3 b008 	str.w	fp, [r3, #8]
 8015fe0:	60d9      	str	r1, [r3, #12]
 8015fe2:	f822 7c14 	strh.w	r7, [r2, #-20]
 8015fe6:	f822 7c12 	strh.w	r7, [r2, #-18]
 8015fea:	2203      	movs	r2, #3
 8015fec:	2014      	movs	r0, #20
 8015fee:	4611      	mov	r1, r2
 8015ff0:	fb00 4009 	mla	r0, r0, r9, r4
 8015ff4:	f7f3 fa3a 	bl	800946c <GUI_DrawBitmap>
 8015ff8:	e0a5      	b.n	8016146 <CHECKBOX_DrawSkinFlex+0x276>
 8015ffa:	6828      	ldr	r0, [r5, #0]
 8015ffc:	f7f2 f984 	bl	8008308 <GUI_ALLOC_LockH>
 8016000:	4603      	mov	r3, r0
 8016002:	a80c      	add	r0, sp, #48	; 0x30
 8016004:	f9b3 6054 	ldrsh.w	r6, [r3, #84]	; 0x54
 8016008:	f840 3d0c 	str.w	r3, [r0, #-12]!
 801600c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801600e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8016012:	f893 9056 	ldrb.w	r9, [r3, #86]	; 0x56
 8016016:	f7f2 f985 	bl	8008324 <GUI_ALLOC_UnlockH>
 801601a:	6828      	ldr	r0, [r5, #0]
 801601c:	f7ff ff44 	bl	8015ea8 <CHECKBOX_GetSkinFlexButtonSize>
 8016020:	4604      	mov	r4, r0
 8016022:	a80a      	add	r0, sp, #40	; 0x28
 8016024:	f7f8 fce2 	bl	800e9ec <WM_GetClientRect>
 8016028:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801602c:	444b      	add	r3, r9
 801602e:	441c      	add	r4, r3
 8016030:	4640      	mov	r0, r8
 8016032:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 8016036:	6a2c      	ldr	r4, [r5, #32]
 8016038:	f7f2 fd0a 	bl	8008a50 <GUI_SetFont>
 801603c:	2002      	movs	r0, #2
 801603e:	f7f2 fd55 	bl	8008aec <GUI_SetTextMode>
 8016042:	4638      	mov	r0, r7
 8016044:	f7f2 fcda 	bl	80089fc <GUI_SetColor>
 8016048:	4632      	mov	r2, r6
 801604a:	a90a      	add	r1, sp, #40	; 0x28
 801604c:	4620      	mov	r0, r4
 801604e:	f7f3 f94e 	bl	80092ee <GUI_DispStringInRect>
 8016052:	e078      	b.n	8016146 <CHECKBOX_DrawSkinFlex+0x276>
 8016054:	6828      	ldr	r0, [r5, #0]
 8016056:	f7f2 f957 	bl	8008308 <GUI_ALLOC_LockH>
 801605a:	4603      	mov	r3, r0
 801605c:	a80c      	add	r0, sp, #48	; 0x30
 801605e:	f9b3 6054 	ldrsh.w	r6, [r3, #84]	; 0x54
 8016062:	f840 3d0c 	str.w	r3, [r0, #-12]!
 8016066:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8016068:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801606c:	f893 9056 	ldrb.w	r9, [r3, #86]	; 0x56
 8016070:	f7f2 f958 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016074:	6828      	ldr	r0, [r5, #0]
 8016076:	f7ff ff17 	bl	8015ea8 <CHECKBOX_GetSkinFlexButtonSize>
 801607a:	4607      	mov	r7, r0
 801607c:	a80a      	add	r0, sp, #40	; 0x28
 801607e:	f7f8 fcb5 	bl	800e9ec <WM_GetClientRect>
 8016082:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016086:	6a28      	ldr	r0, [r5, #32]
 8016088:	444b      	add	r3, r9
 801608a:	441f      	add	r7, r3
 801608c:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8016090:	f7f3 f931 	bl	80092f6 <GUI_GetStringDistX>
 8016094:	4605      	mov	r5, r0
 8016096:	4640      	mov	r0, r8
 8016098:	f7f2 fbde 	bl	8008858 <GUI_GetYSizeOfFont>
 801609c:	f026 0303 	bic.w	r3, r6, #3
 80160a0:	2b04      	cmp	r3, #4
 80160a2:	d00b      	beq.n	80160bc <CHECKBOX_DrawSkinFlex+0x1ec>
 80160a4:	2b0c      	cmp	r3, #12
 80160a6:	d10e      	bne.n	80160c6 <CHECKBOX_DrawSkinFlex+0x1f6>
 80160a8:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80160ac:	1a12      	subs	r2, r2, r0
 80160ae:	3201      	adds	r2, #1
 80160b0:	2302      	movs	r3, #2
 80160b2:	fb92 f2f3 	sdiv	r2, r2, r3
 80160b6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80160ba:	e004      	b.n	80160c6 <CHECKBOX_DrawSkinFlex+0x1f6>
 80160bc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80160c0:	1a1b      	subs	r3, r3, r0
 80160c2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80160c6:	f026 030c 	bic.w	r3, r6, #12
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d00b      	beq.n	80160e6 <CHECKBOX_DrawSkinFlex+0x216>
 80160ce:	2b02      	cmp	r3, #2
 80160d0:	d10e      	bne.n	80160f0 <CHECKBOX_DrawSkinFlex+0x220>
 80160d2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80160d6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80160da:	1a52      	subs	r2, r2, r1
 80160dc:	1b52      	subs	r2, r2, r5
 80160de:	fb92 f3f3 	sdiv	r3, r2, r3
 80160e2:	440b      	add	r3, r1
 80160e4:	e002      	b.n	80160ec <CHECKBOX_DrawSkinFlex+0x21c>
 80160e6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80160ea:	1b5b      	subs	r3, r3, r5
 80160ec:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80160f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80160f4:	3b01      	subs	r3, #1
 80160f6:	441d      	add	r5, r3
 80160f8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80160fc:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 8016100:	3b01      	subs	r3, #1
 8016102:	4418      	add	r0, r3
 8016104:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8016108:	4620      	mov	r0, r4
 801610a:	f7f2 fc77 	bl	80089fc <GUI_SetColor>
 801610e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016112:	a80a      	add	r0, sp, #40	; 0x28
 8016114:	f7fd f91e 	bl	8013354 <GUI_DrawFocusRect>
 8016118:	e015      	b.n	8016146 <CHECKBOX_DrawSkinFlex+0x276>
 801611a:	69bc      	ldr	r4, [r7, #24]
 801611c:	e0b9      	b.n	8016292 <CHECKBOX_DrawSkinFlex+0x3c2>
 801611e:	6828      	ldr	r0, [r5, #0]
 8016120:	f7ff fc2a 	bl	8015978 <WM_SetHasTrans>
 8016124:	6828      	ldr	r0, [r5, #0]
 8016126:	f7f2 f8ef 	bl	8008308 <GUI_ALLOC_LockH>
 801612a:	4602      	mov	r2, r0
 801612c:	a80c      	add	r0, sp, #48	; 0x30
 801612e:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8016132:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8016136:	f840 2d08 	str.w	r2, [r0, #-8]!
 801613a:	1a5b      	subs	r3, r3, r1
 801613c:	3301      	adds	r3, #1
 801613e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8016140:	f7f2 f8f0 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016144:	e0a5      	b.n	8016292 <CHECKBOX_DrawSkinFlex+0x3c2>
 8016146:	2400      	movs	r4, #0
 8016148:	e0a3      	b.n	8016292 <CHECKBOX_DrawSkinFlex+0x3c2>
 801614a:	2050      	movs	r0, #80	; 0x50
 801614c:	f7f2 f9b4 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 8016150:	4604      	mov	r4, r0
 8016152:	2800      	cmp	r0, #0
 8016154:	f000 809d 	beq.w	8016292 <CHECKBOX_DrawSkinFlex+0x3c2>
 8016158:	4b26      	ldr	r3, [pc, #152]	; (80161f4 <CHECKBOX_DrawSkinFlex+0x324>)
 801615a:	9306      	str	r3, [sp, #24]
 801615c:	681d      	ldr	r5, [r3, #0]
 801615e:	2250      	movs	r2, #80	; 0x50
 8016160:	2100      	movs	r1, #0
 8016162:	47a8      	blx	r5
 8016164:	697a      	ldr	r2, [r7, #20]
 8016166:	6462      	str	r2, [r4, #68]	; 0x44
 8016168:	4a21      	ldr	r2, [pc, #132]	; (80161f0 <CHECKBOX_DrawSkinFlex+0x320>)
 801616a:	f8a4 a048 	strh.w	sl, [r4, #72]	; 0x48
 801616e:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8016172:	64e1      	str	r1, [r4, #76]	; 0x4c
 8016174:	f1aa 0706 	sub.w	r7, sl, #6
 8016178:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
 801617c:	210c      	movs	r1, #12
 801617e:	2605      	movs	r6, #5
 8016180:	2504      	movs	r5, #4
 8016182:	fb97 f2f6 	sdiv	r2, r7, r6
 8016186:	fb97 f5f5 	sdiv	r5, r7, r5
 801618a:	2602      	movs	r6, #2
 801618c:	fb97 f6f6 	sdiv	r6, r7, r6
 8016190:	1b75      	subs	r5, r6, r5
 8016192:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8016196:	fb01 4109 	mla	r1, r1, r9, r4
 801619a:	4415      	add	r5, r2
 801619c:	1ab6      	subs	r6, r6, r2
 801619e:	f10a 0801 	add.w	r8, sl, #1
 80161a2:	2208      	movs	r2, #8
 80161a4:	fb98 f8f2 	sdiv	r8, r8, r2
 80161a8:	fb08 f207 	mul.w	r2, r8, r7
 80161ac:	9304      	str	r3, [sp, #16]
 80161ae:	4610      	mov	r0, r2
 80161b0:	f101 0328 	add.w	r3, r1, #40	; 0x28
 80161b4:	9305      	str	r3, [sp, #20]
 80161b6:	9202      	str	r2, [sp, #8]
 80161b8:	f7f2 f97e 	bl	80084b8 <GUI_ALLOC_GetFixedBlock>
 80161bc:	4683      	mov	fp, r0
 80161be:	2800      	cmp	r0, #0
 80161c0:	f43f af13 	beq.w	8015fea <CHECKBOX_DrawSkinFlex+0x11a>
 80161c4:	9b06      	ldr	r3, [sp, #24]
 80161c6:	9a02      	ldr	r2, [sp, #8]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	2100      	movs	r1, #0
 80161cc:	4798      	blx	r3
 80161ce:	fb08 fe05 	mul.w	lr, r8, r5
 80161d2:	2301      	movs	r3, #1
 80161d4:	429e      	cmp	r6, r3
 80161d6:	dc0f      	bgt.n	80161f8 <CHECKBOX_DrawSkinFlex+0x328>
 80161d8:	2e01      	cmp	r6, #1
 80161da:	f1aa 0307 	sub.w	r3, sl, #7
 80161de:	bfb8      	it	lt
 80161e0:	2601      	movlt	r6, #1
 80161e2:	fb08 fe05 	mul.w	lr, r8, r5
 80161e6:	9302      	str	r3, [sp, #8]
 80161e8:	e040      	b.n	801626c <CHECKBOX_DrawSkinFlex+0x39c>
 80161ea:	bf00      	nop
 80161ec:	0801bbc4 	.word	0x0801bbc4
 80161f0:	20000b10 	.word	0x20000b10
 80161f4:	20000040 	.word	0x20000040
 80161f8:	2180      	movs	r1, #128	; 0x80
 80161fa:	f003 0207 	and.w	r2, r3, #7
 80161fe:	fa41 f202 	asr.w	r2, r1, r2
 8016202:	b2d2      	uxtb	r2, r2
 8016204:	9206      	str	r2, [sp, #24]
 8016206:	2001      	movs	r0, #1
 8016208:	1cea      	adds	r2, r5, #3
 801620a:	9207      	str	r2, [sp, #28]
 801620c:	eb0e 01e3 	add.w	r1, lr, r3, asr #3
 8016210:	462a      	mov	r2, r5
 8016212:	9002      	str	r0, [sp, #8]
 8016214:	9807      	ldr	r0, [sp, #28]
 8016216:	4282      	cmp	r2, r0
 8016218:	d011      	beq.n	801623e <CHECKBOX_DrawSkinFlex+0x36e>
 801621a:	9802      	ldr	r0, [sp, #8]
 801621c:	b140      	cbz	r0, 8016230 <CHECKBOX_DrawSkinFlex+0x360>
 801621e:	4297      	cmp	r7, r2
 8016220:	bfc1      	itttt	gt
 8016222:	f81b c001 	ldrbgt.w	ip, [fp, r1]
 8016226:	9806      	ldrgt	r0, [sp, #24]
 8016228:	ea40 0c0c 	orrgt.w	ip, r0, ip
 801622c:	f80b c001 	strbgt.w	ip, [fp, r1]
 8016230:	9802      	ldr	r0, [sp, #8]
 8016232:	ea80 0009 	eor.w	r0, r0, r9
 8016236:	9002      	str	r0, [sp, #8]
 8016238:	3201      	adds	r2, #1
 801623a:	4441      	add	r1, r8
 801623c:	e7ea      	b.n	8016214 <CHECKBOX_DrawSkinFlex+0x344>
 801623e:	3301      	adds	r3, #1
 8016240:	3501      	adds	r5, #1
 8016242:	44c6      	add	lr, r8
 8016244:	e7c6      	b.n	80161d4 <CHECKBOX_DrawSkinFlex+0x304>
 8016246:	b138      	cbz	r0, 8016258 <CHECKBOX_DrawSkinFlex+0x388>
 8016248:	428f      	cmp	r7, r1
 801624a:	bfc2      	ittt	gt
 801624c:	f81b c003 	ldrbgt.w	ip, [fp, r3]
 8016250:	ea42 0c0c 	orrgt.w	ip, r2, ip
 8016254:	f80b c003 	strbgt.w	ip, [fp, r3]
 8016258:	ea80 0009 	eor.w	r0, r0, r9
 801625c:	3101      	adds	r1, #1
 801625e:	4443      	add	r3, r8
 8016260:	4551      	cmp	r1, sl
 8016262:	d1f0      	bne.n	8016246 <CHECKBOX_DrawSkinFlex+0x376>
 8016264:	3601      	adds	r6, #1
 8016266:	3d01      	subs	r5, #1
 8016268:	ebc8 0e0e 	rsb	lr, r8, lr
 801626c:	9b02      	ldr	r3, [sp, #8]
 801626e:	429e      	cmp	r6, r3
 8016270:	f6bf ae9c 	bge.w	8015fac <CHECKBOX_DrawSkinFlex+0xdc>
 8016274:	2380      	movs	r3, #128	; 0x80
 8016276:	f006 0207 	and.w	r2, r6, #7
 801627a:	fa43 f202 	asr.w	r2, r3, r2
 801627e:	b2d2      	uxtb	r2, r2
 8016280:	2308      	movs	r3, #8
 8016282:	f105 0a03 	add.w	sl, r5, #3
 8016286:	fb96 f3f3 	sdiv	r3, r6, r3
 801628a:	4629      	mov	r1, r5
 801628c:	4473      	add	r3, lr
 801628e:	2001      	movs	r0, #1
 8016290:	e7e6      	b.n	8016260 <CHECKBOX_DrawSkinFlex+0x390>
 8016292:	4620      	mov	r0, r4
 8016294:	b00d      	add	sp, #52	; 0x34
 8016296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801629a:	bf00      	nop

0801629c <_AdjustRect>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4605      	mov	r5, r0
 80162a0:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80162a2:	460c      	mov	r4, r1
 80162a4:	f7f2 fad8 	bl	8008858 <GUI_GetYSizeOfFont>
 80162a8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
 80162ac:	b90a      	cbnz	r2, 80162b2 <_AdjustRect+0x16>
 80162ae:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80162b2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80162b4:	4282      	cmp	r2, r0
 80162b6:	bfac      	ite	ge
 80162b8:	1898      	addge	r0, r3, r2
 80162ba:	1818      	addlt	r0, r3, r0
 80162bc:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80162be:	f013 0f08 	tst.w	r3, #8
 80162c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80162c4:	d009      	beq.n	80162da <_AdjustRect+0x3e>
 80162c6:	075a      	lsls	r2, r3, #29
 80162c8:	bf4b      	itete	mi
 80162ca:	8823      	ldrhmi	r3, [r4, #0]
 80162cc:	88a3      	ldrhpl	r3, [r4, #4]
 80162ce:	18c0      	addmi	r0, r0, r3
 80162d0:	1a18      	subpl	r0, r3, r0
 80162d2:	bf4c      	ite	mi
 80162d4:	8020      	strhmi	r0, [r4, #0]
 80162d6:	80a0      	strhpl	r0, [r4, #4]
 80162d8:	bd38      	pop	{r3, r4, r5, pc}
 80162da:	075b      	lsls	r3, r3, #29
 80162dc:	bf4b      	itete	mi
 80162de:	88e3      	ldrhmi	r3, [r4, #6]
 80162e0:	8863      	ldrhpl	r3, [r4, #2]
 80162e2:	1a18      	submi	r0, r3, r0
 80162e4:	18c0      	addpl	r0, r0, r3
 80162e6:	bf4c      	ite	mi
 80162e8:	80e0      	strhmi	r0, [r4, #6]
 80162ea:	8060      	strhpl	r0, [r4, #2]
 80162ec:	bd38      	pop	{r3, r4, r5, pc}

080162ee <_GetEnable>:
 80162ee:	b513      	push	{r0, r1, r4, lr}
 80162f0:	460c      	mov	r4, r1
 80162f2:	f7f2 f809 	bl	8008308 <GUI_ALLOC_LockH>
 80162f6:	9001      	str	r0, [sp, #4]
 80162f8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80162fa:	f7fa fa26 	bl	801074a <GUI_ARRAY_GetNumItems>
 80162fe:	42a0      	cmp	r0, r4
 8016300:	d90e      	bls.n	8016320 <_GetEnable+0x32>
 8016302:	9b01      	ldr	r3, [sp, #4]
 8016304:	4621      	mov	r1, r4
 8016306:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016308:	f7fa fa41 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 801630c:	ab02      	add	r3, sp, #8
 801630e:	7904      	ldrb	r4, [r0, #4]
 8016310:	f843 0d08 	str.w	r0, [r3, #-8]!
 8016314:	4618      	mov	r0, r3
 8016316:	f004 0401 	and.w	r4, r4, #1
 801631a:	f7f2 f803 	bl	8008324 <GUI_ALLOC_UnlockH>
 801631e:	e000      	b.n	8016322 <_GetEnable+0x34>
 8016320:	2400      	movs	r4, #0
 8016322:	a801      	add	r0, sp, #4
 8016324:	f7f1 fffe 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016328:	4620      	mov	r0, r4
 801632a:	b002      	add	sp, #8
 801632c:	bd10      	pop	{r4, pc}

0801632e <MULTIPAGE__CalcBorderRect>:
 801632e:	b538      	push	{r3, r4, r5, lr}
 8016330:	4604      	mov	r4, r0
 8016332:	460d      	mov	r5, r1
 8016334:	f7f7 fcc5 	bl	800dcc2 <WM__GetClientRectWin>
 8016338:	4629      	mov	r1, r5
 801633a:	4620      	mov	r0, r4
 801633c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016340:	f7ff bfac 	b.w	801629c <_AdjustRect>

08016344 <MULTIPAGE__GetPageWidth>:
 8016344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016346:	460c      	mov	r4, r1
 8016348:	f7f1 ffde 	bl	8008308 <GUI_ALLOC_LockH>
 801634c:	9001      	str	r0, [sp, #4]
 801634e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016350:	f7fa f9fb 	bl	801074a <GUI_ARRAY_GetNumItems>
 8016354:	9b01      	ldr	r3, [sp, #4]
 8016356:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016358:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 801635a:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 801635c:	2908      	cmp	r1, #8
 801635e:	bf18      	it	ne
 8016360:	4615      	movne	r5, r2
 8016362:	42a0      	cmp	r0, r4
 8016364:	d92e      	bls.n	80163c4 <MULTIPAGE__GetPageWidth+0x80>
 8016366:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8016368:	f7f2 fb72 	bl	8008a50 <GUI_SetFont>
 801636c:	9b01      	ldr	r3, [sp, #4]
 801636e:	4621      	mov	r1, r4
 8016370:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016372:	f7fa fa0c 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8016376:	6884      	ldr	r4, [r0, #8]
 8016378:	9000      	str	r0, [sp, #0]
 801637a:	b10c      	cbz	r4, 8016380 <MULTIPAGE__GetPageWidth+0x3c>
 801637c:	442c      	add	r4, r5
 801637e:	e01d      	b.n	80163bc <MULTIPAGE__GetPageWidth+0x78>
 8016380:	3018      	adds	r0, #24
 8016382:	f7f2 ffb8 	bl	80092f6 <GUI_GetStringDistX>
 8016386:	4627      	mov	r7, r4
 8016388:	182e      	adds	r6, r5, r0
 801638a:	9b00      	ldr	r3, [sp, #0]
 801638c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016390:	68d8      	ldr	r0, [r3, #12]
 8016392:	b160      	cbz	r0, 80163ae <MULTIPAGE__GetPageWidth+0x6a>
 8016394:	9b01      	ldr	r3, [sp, #4]
 8016396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016398:	071b      	lsls	r3, r3, #28
 801639a:	d502      	bpl.n	80163a2 <MULTIPAGE__GetPageWidth+0x5e>
 801639c:	f7fa fa35 	bl	801080a <GUI_DRAW__GetYSize>
 80163a0:	e001      	b.n	80163a6 <MULTIPAGE__GetPageWidth+0x62>
 80163a2:	f7fa fa20 	bl	80107e6 <GUI_DRAW__GetXSize>
 80163a6:	4428      	add	r0, r5
 80163a8:	4287      	cmp	r7, r0
 80163aa:	bfb8      	it	lt
 80163ac:	4607      	movlt	r7, r0
 80163ae:	3401      	adds	r4, #1
 80163b0:	2c03      	cmp	r4, #3
 80163b2:	d1ea      	bne.n	801638a <MULTIPAGE__GetPageWidth+0x46>
 80163b4:	42b7      	cmp	r7, r6
 80163b6:	463c      	mov	r4, r7
 80163b8:	bfb8      	it	lt
 80163ba:	4634      	movlt	r4, r6
 80163bc:	4668      	mov	r0, sp
 80163be:	f7f1 ffb1 	bl	8008324 <GUI_ALLOC_UnlockH>
 80163c2:	e000      	b.n	80163c6 <MULTIPAGE__GetPageWidth+0x82>
 80163c4:	2400      	movs	r4, #0
 80163c6:	a801      	add	r0, sp, #4
 80163c8:	f7f1 ffac 	bl	8008324 <GUI_ALLOC_UnlockH>
 80163cc:	4620      	mov	r0, r4
 80163ce:	b003      	add	sp, #12
 80163d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163d2 <MULTIPAGE__GetTabBarRect>:
 80163d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163d6:	b085      	sub	sp, #20
 80163d8:	460c      	mov	r4, r1
 80163da:	4607      	mov	r7, r0
 80163dc:	f7f1 ff94 	bl	8008308 <GUI_ALLOC_LockH>
 80163e0:	9001      	str	r0, [sp, #4]
 80163e2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80163e4:	f7f2 fa38 	bl	8008858 <GUI_GetYSizeOfFont>
 80163e8:	9b01      	ldr	r3, [sp, #4]
 80163ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80163ee:	b90a      	cbnz	r2, 80163f4 <MULTIPAGE__GetTabBarRect+0x22>
 80163f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80163f4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80163f6:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
 80163fa:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80163fc:	f8d3 8078 	ldr.w	r8, [r3, #120]	; 0x78
 8016400:	4282      	cmp	r2, r0
 8016402:	bfac      	ite	ge
 8016404:	188e      	addge	r6, r1, r2
 8016406:	180e      	addlt	r6, r1, r0
 8016408:	4618      	mov	r0, r3
 801640a:	a902      	add	r1, sp, #8
 801640c:	f7ff ff8f 	bl	801632e <MULTIPAGE__CalcBorderRect>
 8016410:	a801      	add	r0, sp, #4
 8016412:	f7f1 ff87 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016416:	f019 0f08 	tst.w	r9, #8
 801641a:	f005 0304 	and.w	r3, r5, #4
 801641e:	f409 7280 	and.w	r2, r9, #256	; 0x100
 8016422:	f005 0501 	and.w	r5, r5, #1
 8016426:	d01b      	beq.n	8016460 <MULTIPAGE__GetTabBarRect+0x8e>
 8016428:	b10b      	cbz	r3, 801642e <MULTIPAGE__GetTabBarRect+0x5c>
 801642a:	2300      	movs	r3, #0
 801642c:	e001      	b.n	8016432 <MULTIPAGE__GetTabBarRect+0x60>
 801642e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016432:	8023      	strh	r3, [r4, #0]
 8016434:	8820      	ldrh	r0, [r4, #0]
 8016436:	4406      	add	r6, r0
 8016438:	80a6      	strh	r6, [r4, #4]
 801643a:	b11a      	cbz	r2, 8016444 <MULTIPAGE__GetTabBarRect+0x72>
 801643c:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8016440:	3820      	subs	r0, #32
 8016442:	e001      	b.n	8016448 <MULTIPAGE__GetTabBarRect+0x76>
 8016444:	4638      	mov	r0, r7
 8016446:	47c0      	blx	r8
 8016448:	b13d      	cbz	r5, 801645a <MULTIPAGE__GetTabBarRect+0x88>
 801644a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801644e:	80e3      	strh	r3, [r4, #6]
 8016450:	1a18      	subs	r0, r3, r0
 8016452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016456:	8060      	strh	r0, [r4, #2]
 8016458:	e019      	b.n	801648e <MULTIPAGE__GetTabBarRect+0xbc>
 801645a:	8065      	strh	r5, [r4, #2]
 801645c:	80e0      	strh	r0, [r4, #6]
 801645e:	e016      	b.n	801648e <MULTIPAGE__GetTabBarRect+0xbc>
 8016460:	b10b      	cbz	r3, 8016466 <MULTIPAGE__GetTabBarRect+0x94>
 8016462:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016466:	8063      	strh	r3, [r4, #2]
 8016468:	8860      	ldrh	r0, [r4, #2]
 801646a:	4406      	add	r6, r0
 801646c:	80e6      	strh	r6, [r4, #6]
 801646e:	b11a      	cbz	r2, 8016478 <MULTIPAGE__GetTabBarRect+0xa6>
 8016470:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8016474:	3820      	subs	r0, #32
 8016476:	e001      	b.n	801647c <MULTIPAGE__GetTabBarRect+0xaa>
 8016478:	4638      	mov	r0, r7
 801647a:	47c0      	blx	r8
 801647c:	b12d      	cbz	r5, 801648a <MULTIPAGE__GetTabBarRect+0xb8>
 801647e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016482:	80a3      	strh	r3, [r4, #4]
 8016484:	1a18      	subs	r0, r3, r0
 8016486:	8020      	strh	r0, [r4, #0]
 8016488:	e001      	b.n	801648e <MULTIPAGE__GetTabBarRect+0xbc>
 801648a:	8025      	strh	r5, [r4, #0]
 801648c:	80a0      	strh	r0, [r4, #4]
 801648e:	b005      	add	sp, #20
 8016490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016494 <MULTIPAGE_GetFont>:
 8016494:	b513      	push	{r0, r1, r4, lr}
 8016496:	4604      	mov	r4, r0
 8016498:	b168      	cbz	r0, 80164b6 <MULTIPAGE_GetFont+0x22>
 801649a:	f7f3 fc5f 	bl	8009d5c <GUI_Lock>
 801649e:	4620      	mov	r0, r4
 80164a0:	f7f1 ff32 	bl	8008308 <GUI_ALLOC_LockH>
 80164a4:	ab02      	add	r3, sp, #8
 80164a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80164a8:	f843 0d04 	str.w	r0, [r3, #-4]!
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7f1 ff39 	bl	8008324 <GUI_ALLOC_UnlockH>
 80164b2:	f7f3 fc49 	bl	8009d48 <GUI_Unlock>
 80164b6:	4620      	mov	r0, r4
 80164b8:	b002      	add	sp, #8
 80164ba:	bd10      	pop	{r4, pc}

080164bc <MULTIPAGE_IsPageEnabled>:
 80164bc:	b538      	push	{r3, r4, r5, lr}
 80164be:	460d      	mov	r5, r1
 80164c0:	4604      	mov	r4, r0
 80164c2:	b140      	cbz	r0, 80164d6 <MULTIPAGE_IsPageEnabled+0x1a>
 80164c4:	f7f3 fc4a 	bl	8009d5c <GUI_Lock>
 80164c8:	4620      	mov	r0, r4
 80164ca:	4629      	mov	r1, r5
 80164cc:	f7ff ff0f 	bl	80162ee <_GetEnable>
 80164d0:	4604      	mov	r4, r0
 80164d2:	f7f3 fc39 	bl	8009d48 <GUI_Unlock>
 80164d6:	4620      	mov	r0, r4
 80164d8:	bd38      	pop	{r3, r4, r5, pc}

080164da <_IsBetween>:
 80164da:	4291      	cmp	r1, r2
 80164dc:	dd06      	ble.n	80164ec <_IsBetween+0x12>
 80164de:	4281      	cmp	r1, r0
 80164e0:	db0b      	blt.n	80164fa <_IsBetween+0x20>
 80164e2:	4282      	cmp	r2, r0
 80164e4:	bfcc      	ite	gt
 80164e6:	2000      	movgt	r0, #0
 80164e8:	2001      	movle	r0, #1
 80164ea:	4770      	bx	lr
 80164ec:	4281      	cmp	r1, r0
 80164ee:	dc04      	bgt.n	80164fa <_IsBetween+0x20>
 80164f0:	4282      	cmp	r2, r0
 80164f2:	bfb4      	ite	lt
 80164f4:	2000      	movlt	r0, #0
 80164f6:	2001      	movge	r0, #1
 80164f8:	4770      	bx	lr
 80164fa:	2000      	movs	r0, #0
 80164fc:	4770      	bx	lr

080164fe <_Create>:
 80164fe:	b530      	push	{r4, r5, lr}
 8016500:	b08b      	sub	sp, #44	; 0x2c
 8016502:	2100      	movs	r1, #0
 8016504:	4604      	mov	r4, r0
 8016506:	2224      	movs	r2, #36	; 0x24
 8016508:	a801      	add	r0, sp, #4
 801650a:	f001 fed2 	bl	80182b2 <memset>
 801650e:	4620      	mov	r0, r4
 8016510:	f7f1 fefa 	bl	8008308 <GUI_ALLOC_LockH>
 8016514:	ab0a      	add	r3, sp, #40	; 0x28
 8016516:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8016518:	f843 0d28 	str.w	r0, [r3, #-40]!
 801651c:	6895      	ldr	r5, [r2, #8]
 801651e:	4618      	mov	r0, r3
 8016520:	f7f1 ff00 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016524:	2300      	movs	r3, #0
 8016526:	9302      	str	r3, [sp, #8]
 8016528:	9401      	str	r4, [sp, #4]
 801652a:	682b      	ldr	r3, [r5, #0]
 801652c:	a801      	add	r0, sp, #4
 801652e:	4798      	blx	r3
 8016530:	b00b      	add	sp, #44	; 0x2c
 8016532:	bd30      	pop	{r4, r5, pc}

08016534 <MULTIPAGE_SKIN__GetPagePos>:
 8016534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016538:	4689      	mov	r9, r1
 801653a:	4607      	mov	r7, r0
 801653c:	f7f1 fee4 	bl	8008308 <GUI_ALLOC_LockH>
 8016540:	ae02      	add	r6, sp, #8
 8016542:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 8016546:	f846 0d04 	str.w	r0, [r6, #-4]!
 801654a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801654c:	f7fa f8fd 	bl	801074a <GUI_ARRAY_GetNumItems>
 8016550:	4680      	mov	r8, r0
 8016552:	4630      	mov	r0, r6
 8016554:	f7f1 fee6 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016558:	2500      	movs	r5, #0
 801655a:	454d      	cmp	r5, r9
 801655c:	d006      	beq.n	801656c <MULTIPAGE_SKIN__GetPagePos+0x38>
 801655e:	4629      	mov	r1, r5
 8016560:	4638      	mov	r0, r7
 8016562:	f7ff feef 	bl	8016344 <MULTIPAGE__GetPageWidth>
 8016566:	3501      	adds	r5, #1
 8016568:	4404      	add	r4, r0
 801656a:	e7f6      	b.n	801655a <MULTIPAGE_SKIN__GetPagePos+0x26>
 801656c:	45a8      	cmp	r8, r5
 801656e:	d109      	bne.n	8016584 <MULTIPAGE_SKIN__GetPagePos+0x50>
 8016570:	4638      	mov	r0, r7
 8016572:	f7f1 fec9 	bl	8008308 <GUI_ALLOC_LockH>
 8016576:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 801657a:	9001      	str	r0, [sp, #4]
 801657c:	4630      	mov	r0, r6
 801657e:	441c      	add	r4, r3
 8016580:	f7f1 fed0 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016584:	4620      	mov	r0, r4
 8016586:	b003      	add	sp, #12
 8016588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801658c <_Paint>:
 801658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016590:	b0a9      	sub	sp, #164	; 0xa4
 8016592:	9009      	str	r0, [sp, #36]	; 0x24
 8016594:	901f      	str	r0, [sp, #124]	; 0x7c
 8016596:	f7f1 feb7 	bl	8008308 <GUI_ALLOC_LockH>
 801659a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801659c:	9305      	str	r3, [sp, #20]
 801659e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80165a0:	930a      	str	r3, [sp, #40]	; 0x28
 80165a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80165a4:	9303      	str	r3, [sp, #12]
 80165a6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80165aa:	9301      	str	r3, [sp, #4]
 80165ac:	f8d0 8084 	ldr.w	r8, [r0, #132]	; 0x84
 80165b0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80165b2:	9308      	str	r3, [sp, #32]
 80165b4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80165b6:	9017      	str	r0, [sp, #92]	; 0x5c
 80165b8:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 80165ba:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80165bc:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80165be:	f890 9081 	ldrb.w	r9, [r0, #129]	; 0x81
 80165c2:	930c      	str	r3, [sp, #48]	; 0x30
 80165c4:	f1b8 0f00 	cmp.w	r8, #0
 80165c8:	d101      	bne.n	80165ce <_Paint+0x42>
 80165ca:	f8d0 8088 	ldr.w	r8, [r0, #136]	; 0x88
 80165ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80165d0:	ad28      	add	r5, sp, #160	; 0xa0
 80165d2:	f7f2 fa3d 	bl	8008a50 <GUI_SetFont>
 80165d6:	f855 0d44 	ldr.w	r0, [r5, #-68]!
 80165da:	a918      	add	r1, sp, #96	; 0x60
 80165dc:	f7ff fea7 	bl	801632e <MULTIPAGE__CalcBorderRect>
 80165e0:	4628      	mov	r0, r5
 80165e2:	f7f1 fe9f 	bl	8008324 <GUI_ALLOC_UnlockH>
 80165e6:	ab1a      	add	r3, sp, #104	; 0x68
 80165e8:	9327      	str	r3, [sp, #156]	; 0x9c
 80165ea:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80165ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80165f0:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 80165f4:	9324      	str	r3, [sp, #144]	; 0x90
 80165f6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80165fa:	9325      	str	r3, [sp, #148]	; 0x94
 80165fc:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 8016600:	9326      	str	r3, [sp, #152]	; 0x98
 8016602:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016606:	230b      	movs	r3, #11
 8016608:	9320      	str	r3, [sp, #128]	; 0x80
 801660a:	971b      	str	r7, [sp, #108]	; 0x6c
 801660c:	9b05      	ldr	r3, [sp, #20]
 801660e:	961c      	str	r6, [sp, #112]	; 0x70
 8016610:	f8ad 4074 	strh.w	r4, [sp, #116]	; 0x74
 8016614:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8016618:	a81f      	add	r0, sp, #124	; 0x7c
 801661a:	4798      	blx	r3
 801661c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801661e:	f7fa f894 	bl	801074a <GUI_ARRAY_GetNumItems>
 8016622:	900b      	str	r0, [sp, #44]	; 0x2c
 8016624:	2800      	cmp	r0, #0
 8016626:	f000 8220 	beq.w	8016a6a <_Paint+0x4de>
 801662a:	2100      	movs	r1, #0
 801662c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801662e:	f7fa f8ae 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8016632:	2100      	movs	r1, #0
 8016634:	9016      	str	r0, [sp, #88]	; 0x58
 8016636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016638:	f7ff fe84 	bl	8016344 <MULTIPAGE__GetPageWidth>
 801663c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801663e:	9002      	str	r0, [sp, #8]
 8016640:	791b      	ldrb	r3, [r3, #4]
 8016642:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8016646:	a816      	add	r0, sp, #88	; 0x58
 8016648:	f7f1 fe6c 	bl	8008324 <GUI_ALLOC_UnlockH>
 801664c:	a918      	add	r1, sp, #96	; 0x60
 801664e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016650:	f7ff febf 	bl	80163d2 <MULTIPAGE__GetTabBarRect>
 8016654:	f004 0408 	and.w	r4, r4, #8
 8016658:	a818      	add	r0, sp, #96	; 0x60
 801665a:	f7f8 fc5f 	bl	800ef1c <WM_SetUserClipRect>
 801665e:	b2a3      	uxth	r3, r4
 8016660:	9306      	str	r3, [sp, #24]
 8016662:	b1d3      	cbz	r3, 801669a <_Paint+0x10e>
 8016664:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 8016668:	9b01      	ldr	r3, [sp, #4]
 801666a:	910f      	str	r1, [sp, #60]	; 0x3c
 801666c:	18cc      	adds	r4, r1, r3
 801666e:	b2a4      	uxth	r4, r4
 8016670:	9b02      	ldr	r3, [sp, #8]
 8016672:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 8016676:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 801667a:	fa0f fb84 	sxth.w	fp, r4
 801667e:	4454      	add	r4, sl
 8016680:	441c      	add	r4, r3
 8016682:	f017 0f04 	tst.w	r7, #4
 8016686:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 801668a:	9310      	str	r3, [sp, #64]	; 0x40
 801668c:	b224      	sxth	r4, r4
 801668e:	d001      	beq.n	8016694 <_Paint+0x108>
 8016690:	9104      	str	r1, [sp, #16]
 8016692:	e01c      	b.n	80166ce <_Paint+0x142>
 8016694:	9504      	str	r5, [sp, #16]
 8016696:	460d      	mov	r5, r1
 8016698:	e01b      	b.n	80166d2 <_Paint+0x146>
 801669a:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 801669e:	9b01      	ldr	r3, [sp, #4]
 80166a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80166a2:	18cc      	adds	r4, r1, r3
 80166a4:	b2a4      	uxth	r4, r4
 80166a6:	9b02      	ldr	r3, [sp, #8]
 80166a8:	f9bd 5062 	ldrsh.w	r5, [sp, #98]	; 0x62
 80166ac:	f9bd 1066 	ldrsh.w	r1, [sp, #102]	; 0x66
 80166b0:	fa0f fb84 	sxth.w	fp, r4
 80166b4:	3c01      	subs	r4, #1
 80166b6:	441c      	add	r4, r3
 80166b8:	f017 0f04 	tst.w	r7, #4
 80166bc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80166c0:	9310      	str	r3, [sp, #64]	; 0x40
 80166c2:	b224      	sxth	r4, r4
 80166c4:	d001      	beq.n	80166ca <_Paint+0x13e>
 80166c6:	9104      	str	r1, [sp, #16]
 80166c8:	e003      	b.n	80166d2 <_Paint+0x146>
 80166ca:	9504      	str	r5, [sp, #16]
 80166cc:	460d      	mov	r5, r1
 80166ce:	f04f 0a01 	mov.w	sl, #1
 80166d2:	9b03      	ldr	r3, [sp, #12]
 80166d4:	b153      	cbz	r3, 80166ec <_Paint+0x160>
 80166d6:	4619      	mov	r1, r3
 80166d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166da:	f7ff ff2b 	bl	8016534 <MULTIPAGE_SKIN__GetPagePos>
 80166de:	b280      	uxth	r0, r0
 80166e0:	ebc0 030b 	rsb	r3, r0, fp
 80166e4:	1a24      	subs	r4, r4, r0
 80166e6:	fa0f fb83 	sxth.w	fp, r3
 80166ea:	b224      	sxth	r4, r4
 80166ec:	9b04      	ldr	r3, [sp, #16]
 80166ee:	fb0a 3909 	mla	r9, sl, r9, r3
 80166f2:	fa0f f389 	sxth.w	r3, r9
 80166f6:	2102      	movs	r1, #2
 80166f8:	9307      	str	r3, [sp, #28]
 80166fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8016700:	1958      	adds	r0, r3, r5
 8016702:	930c      	str	r3, [sp, #48]	; 0x30
 8016704:	fb98 f3f1 	sdiv	r3, r8, r1
 8016708:	930d      	str	r3, [sp, #52]	; 0x34
 801670a:	4403      	add	r3, r0
 801670c:	9311      	str	r3, [sp, #68]	; 0x44
 801670e:	ebca 0205 	rsb	r2, sl, r5
 8016712:	9b08      	ldr	r3, [sp, #32]
 8016714:	fb93 f3f1 	sdiv	r3, r3, r1
 8016718:	9308      	str	r3, [sp, #32]
 801671a:	425b      	negs	r3, r3
 801671c:	9312      	str	r3, [sp, #72]	; 0x48
 801671e:	b213      	sxth	r3, r2
 8016720:	f04f 0800 	mov.w	r8, #0
 8016724:	930e      	str	r3, [sp, #56]	; 0x38
 8016726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016728:	4598      	cmp	r8, r3
 801672a:	f280 819b 	bge.w	8016a64 <_Paint+0x4d8>
 801672e:	f1b8 0f00 	cmp.w	r8, #0
 8016732:	d017      	beq.n	8016764 <_Paint+0x1d8>
 8016734:	4641      	mov	r1, r8
 8016736:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016738:	f7fa f829 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 801673c:	4641      	mov	r1, r8
 801673e:	9016      	str	r0, [sp, #88]	; 0x58
 8016740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016742:	f7ff fdff 	bl	8016344 <MULTIPAGE__GetPageWidth>
 8016746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016748:	9002      	str	r0, [sp, #8]
 801674a:	791b      	ldrb	r3, [r3, #4]
 801674c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8016750:	b2a4      	uxth	r4, r4
 8016752:	a816      	add	r0, sp, #88	; 0x58
 8016754:	f7f1 fde6 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016758:	1c63      	adds	r3, r4, #1
 801675a:	fa0f fb83 	sxth.w	fp, r3
 801675e:	9b02      	ldr	r3, [sp, #8]
 8016760:	441c      	add	r4, r3
 8016762:	b224      	sxth	r4, r4
 8016764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016766:	42a3      	cmp	r3, r4
 8016768:	f300 8179 	bgt.w	8016a5e <_Paint+0x4d2>
 801676c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801676e:	455b      	cmp	r3, fp
 8016770:	f2c0 8175 	blt.w	8016a5e <_Paint+0x4d2>
 8016774:	45b0      	cmp	r8, r6
 8016776:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 801677a:	d119      	bne.n	80167b0 <_Paint+0x224>
 801677c:	f1b8 0f00 	cmp.w	r8, #0
 8016780:	d00a      	beq.n	8016798 <_Paint+0x20c>
 8016782:	9b03      	ldr	r3, [sp, #12]
 8016784:	4598      	cmp	r8, r3
 8016786:	d107      	bne.n	8016798 <_Paint+0x20c>
 8016788:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801678c:	eb00 030b 	add.w	r3, r0, fp
 8016790:	4404      	add	r4, r0
 8016792:	fa0f fb83 	sxth.w	fp, r3
 8016796:	b224      	sxth	r4, r4
 8016798:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801679c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80167a0:	ebc2 090b 	rsb	r9, r2, fp
 80167a4:	4422      	add	r2, r4
 80167a6:	fa0f f989 	sxth.w	r9, r9
 80167aa:	b212      	sxth	r2, r2
 80167ac:	4629      	mov	r1, r5
 80167ae:	e034      	b.n	801681a <_Paint+0x28e>
 80167b0:	1c72      	adds	r2, r6, #1
 80167b2:	4590      	cmp	r8, r2
 80167b4:	d121      	bne.n	80167fa <_Paint+0x26e>
 80167b6:	07f8      	lsls	r0, r7, #31
 80167b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80167ba:	d515      	bpl.n	80167e8 <_Paint+0x25c>
 80167bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167be:	1e5a      	subs	r2, r3, #1
 80167c0:	4590      	cmp	r8, r2
 80167c2:	bf04      	itt	eq
 80167c4:	9b01      	ldreq	r3, [sp, #4]
 80167c6:	1ae2      	subeq	r2, r4, r3
 80167c8:	9b03      	ldr	r3, [sp, #12]
 80167ca:	ebc3 0008 	rsb	r0, r3, r8
 80167ce:	bf0c      	ite	eq
 80167d0:	b212      	sxtheq	r2, r2
 80167d2:	4622      	movne	r2, r4
 80167d4:	2800      	cmp	r0, #0
 80167d6:	dd1d      	ble.n	8016814 <_Paint+0x288>
 80167d8:	9b01      	ldr	r3, [sp, #4]
 80167da:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80167de:	eb03 090b 	add.w	r9, r3, fp
 80167e2:	fa0f f989 	sxth.w	r9, r9
 80167e6:	e018      	b.n	801681a <_Paint+0x28e>
 80167e8:	9b01      	ldr	r3, [sp, #4]
 80167ea:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80167ee:	eb03 090b 	add.w	r9, r3, fp
 80167f2:	fa0f f989 	sxth.w	r9, r9
 80167f6:	4622      	mov	r2, r4
 80167f8:	e00f      	b.n	801681a <_Paint+0x28e>
 80167fa:	1e72      	subs	r2, r6, #1
 80167fc:	4590      	cmp	r8, r2
 80167fe:	d104      	bne.n	801680a <_Paint+0x27e>
 8016800:	9b01      	ldr	r3, [sp, #4]
 8016802:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016804:	1ae2      	subs	r2, r4, r3
 8016806:	b212      	sxth	r2, r2
 8016808:	e004      	b.n	8016814 <_Paint+0x288>
 801680a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801680c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016810:	4622      	mov	r2, r4
 8016812:	e001      	b.n	8016818 <_Paint+0x28c>
 8016814:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016818:	46d9      	mov	r9, fp
 801681a:	9b06      	ldr	r3, [sp, #24]
 801681c:	200f      	movs	r0, #15
 801681e:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
 8016822:	b33b      	cbz	r3, 8016874 <_Paint+0x2e8>
 8016824:	9226      	str	r2, [sp, #152]	; 0x98
 8016826:	1c72      	adds	r2, r6, #1
 8016828:	4891      	ldr	r0, [pc, #580]	; (8016a70 <_Paint+0x4e4>)
 801682a:	901a      	str	r0, [sp, #104]	; 0x68
 801682c:	4590      	cmp	r8, r2
 801682e:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8016832:	d104      	bne.n	801683e <_Paint+0x2b2>
 8016834:	9b03      	ldr	r3, [sp, #12]
 8016836:	4598      	cmp	r8, r3
 8016838:	d007      	beq.n	801684a <_Paint+0x2be>
 801683a:	220b      	movs	r2, #11
 801683c:	e003      	b.n	8016846 <_Paint+0x2ba>
 801683e:	1e72      	subs	r2, r6, #1
 8016840:	4590      	cmp	r8, r2
 8016842:	d102      	bne.n	801684a <_Paint+0x2be>
 8016844:	2207      	movs	r2, #7
 8016846:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 801684a:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
 801684e:	f017 0f04 	tst.w	r7, #4
 8016852:	bf17      	itett	ne
 8016854:	f022 0202 	bicne.w	r2, r2, #2
 8016858:	f022 0201 	biceq.w	r2, r2, #1
 801685c:	f88d 2076 	strbne.w	r2, [sp, #118]	; 0x76
 8016860:	f8cd a08c 	strne.w	sl, [sp, #140]	; 0x8c
 8016864:	bf11      	iteee	ne
 8016866:	9125      	strne	r1, [sp, #148]	; 0x94
 8016868:	f88d 2076 	strbeq.w	r2, [sp, #118]	; 0x76
 801686c:	9123      	streq	r1, [sp, #140]	; 0x8c
 801686e:	f8cd a094 	streq.w	sl, [sp, #148]	; 0x94
 8016872:	e026      	b.n	80168c2 <_Paint+0x336>
 8016874:	9225      	str	r2, [sp, #148]	; 0x94
 8016876:	1c72      	adds	r2, r6, #1
 8016878:	9b06      	ldr	r3, [sp, #24]
 801687a:	931a      	str	r3, [sp, #104]	; 0x68
 801687c:	4590      	cmp	r8, r2
 801687e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8016882:	d104      	bne.n	801688e <_Paint+0x302>
 8016884:	9b03      	ldr	r3, [sp, #12]
 8016886:	4598      	cmp	r8, r3
 8016888:	d007      	beq.n	801689a <_Paint+0x30e>
 801688a:	220e      	movs	r2, #14
 801688c:	e003      	b.n	8016896 <_Paint+0x30a>
 801688e:	1e72      	subs	r2, r6, #1
 8016890:	4590      	cmp	r8, r2
 8016892:	d102      	bne.n	801689a <_Paint+0x30e>
 8016894:	220d      	movs	r2, #13
 8016896:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 801689a:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
 801689e:	f017 0f04 	tst.w	r7, #4
 80168a2:	bf17      	itett	ne
 80168a4:	f022 0204 	bicne.w	r2, r2, #4
 80168a8:	f022 0208 	biceq.w	r2, r2, #8
 80168ac:	f88d 2076 	strbne.w	r2, [sp, #118]	; 0x76
 80168b0:	9124      	strne	r1, [sp, #144]	; 0x90
 80168b2:	bf11      	iteee	ne
 80168b4:	f8cd a098 	strne.w	sl, [sp, #152]	; 0x98
 80168b8:	f88d 2076 	strbeq.w	r2, [sp, #118]	; 0x76
 80168bc:	f8cd a090 	streq.w	sl, [sp, #144]	; 0x90
 80168c0:	9126      	streq	r1, [sp, #152]	; 0x98
 80168c2:	220b      	movs	r2, #11
 80168c4:	9b05      	ldr	r3, [sp, #20]
 80168c6:	9220      	str	r2, [sp, #128]	; 0x80
 80168c8:	a81f      	add	r0, sp, #124	; 0x7c
 80168ca:	4798      	blx	r3
 80168cc:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
 80168d0:	07d1      	lsls	r1, r2, #31
 80168d2:	bf42      	ittt	mi
 80168d4:	9923      	ldrmi	r1, [sp, #140]	; 0x8c
 80168d6:	3101      	addmi	r1, #1
 80168d8:	9123      	strmi	r1, [sp, #140]	; 0x8c
 80168da:	0793      	lsls	r3, r2, #30
 80168dc:	bf48      	it	mi
 80168de:	9925      	ldrmi	r1, [sp, #148]	; 0x94
 80168e0:	9b05      	ldr	r3, [sp, #20]
 80168e2:	bf44      	itt	mi
 80168e4:	f101 31ff 	addmi.w	r1, r1, #4294967295	; 0xffffffff
 80168e8:	9125      	strmi	r1, [sp, #148]	; 0x94
 80168ea:	0750      	lsls	r0, r2, #29
 80168ec:	bf42      	ittt	mi
 80168ee:	9924      	ldrmi	r1, [sp, #144]	; 0x90
 80168f0:	3101      	addmi	r1, #1
 80168f2:	9124      	strmi	r1, [sp, #144]	; 0x90
 80168f4:	0711      	lsls	r1, r2, #28
 80168f6:	bf42      	ittt	mi
 80168f8:	9a26      	ldrmi	r2, [sp, #152]	; 0x98
 80168fa:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 80168fe:	9226      	strmi	r2, [sp, #152]	; 0x98
 8016900:	2205      	movs	r2, #5
 8016902:	9220      	str	r2, [sp, #128]	; 0x80
 8016904:	a81f      	add	r0, sp, #124	; 0x7c
 8016906:	4798      	blx	r3
 8016908:	4641      	mov	r1, r8
 801690a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801690c:	f7f9 ff3f 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8016910:	4641      	mov	r1, r8
 8016912:	9016      	str	r0, [sp, #88]	; 0x58
 8016914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016916:	f7ff fdd1 	bl	80164bc <MULTIPAGE_IsPageEnabled>
 801691a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801691c:	b908      	cbnz	r0, 8016922 <_Paint+0x396>
 801691e:	6951      	ldr	r1, [r2, #20]
 8016920:	e002      	b.n	8016928 <_Paint+0x39c>
 8016922:	45b0      	cmp	r8, r6
 8016924:	d104      	bne.n	8016930 <_Paint+0x3a4>
 8016926:	68d1      	ldr	r1, [r2, #12]
 8016928:	b901      	cbnz	r1, 801692c <_Paint+0x3a0>
 801692a:	6911      	ldr	r1, [r2, #16]
 801692c:	9115      	str	r1, [sp, #84]	; 0x54
 801692e:	e001      	b.n	8016934 <_Paint+0x3a8>
 8016930:	6912      	ldr	r2, [r2, #16]
 8016932:	9215      	str	r2, [sp, #84]	; 0x54
 8016934:	a816      	add	r0, sp, #88	; 0x58
 8016936:	f7f1 fcf5 	bl	8008324 <GUI_ALLOC_UnlockH>
 801693a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801693c:	2800      	cmp	r0, #0
 801693e:	d05a      	beq.n	80169f6 <_Paint+0x46a>
 8016940:	f7f9 ff63 	bl	801080a <GUI_DRAW__GetYSize>
 8016944:	9013      	str	r0, [sp, #76]	; 0x4c
 8016946:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016948:	f7f9 ff4d 	bl	80107e6 <GUI_DRAW__GetXSize>
 801694c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801694e:	2a00      	cmp	r2, #0
 8016950:	d051      	beq.n	80169f6 <_Paint+0x46a>
 8016952:	2800      	cmp	r0, #0
 8016954:	d04f      	beq.n	80169f6 <_Paint+0x46a>
 8016956:	9b06      	ldr	r3, [sp, #24]
 8016958:	2102      	movs	r1, #2
 801695a:	b30b      	cbz	r3, 80169a0 <_Paint+0x414>
 801695c:	fb92 f2f1 	sdiv	r2, r2, r1
 8016960:	9b02      	ldr	r3, [sp, #8]
 8016962:	fb93 fef1 	sdiv	lr, r3, r1
 8016966:	44de      	add	lr, fp
 8016968:	ebc2 020e 	rsb	r2, r2, lr
 801696c:	f017 0f04 	tst.w	r7, #4
 8016970:	9224      	str	r2, [sp, #144]	; 0x90
 8016972:	9426      	str	r4, [sp, #152]	; 0x98
 8016974:	fb90 f2f1 	sdiv	r2, r0, r1
 8016978:	d008      	beq.n	801698c <_Paint+0x400>
 801697a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801697c:	9525      	str	r5, [sp, #148]	; 0x94
 801697e:	eb0a 0003 	add.w	r0, sl, r3
 8016982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016984:	4418      	add	r0, r3
 8016986:	1a82      	subs	r2, r0, r2
 8016988:	9223      	str	r2, [sp, #140]	; 0x8c
 801698a:	e02a      	b.n	80169e2 <_Paint+0x456>
 801698c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801698e:	f8cd a094 	str.w	sl, [sp, #148]	; 0x94
 8016992:	1a9a      	subs	r2, r3, r2
 8016994:	45b0      	cmp	r8, r6
 8016996:	9223      	str	r2, [sp, #140]	; 0x8c
 8016998:	d123      	bne.n	80169e2 <_Paint+0x456>
 801699a:	3202      	adds	r2, #2
 801699c:	9223      	str	r2, [sp, #140]	; 0x8c
 801699e:	e020      	b.n	80169e2 <_Paint+0x456>
 80169a0:	9b02      	ldr	r3, [sp, #8]
 80169a2:	fb93 fef1 	sdiv	lr, r3, r1
 80169a6:	44de      	add	lr, fp
 80169a8:	fb90 f0f1 	sdiv	r0, r0, r1
 80169ac:	f017 0f04 	tst.w	r7, #4
 80169b0:	ebc0 000e 	rsb	r0, r0, lr
 80169b4:	9023      	str	r0, [sp, #140]	; 0x8c
 80169b6:	9425      	str	r4, [sp, #148]	; 0x94
 80169b8:	fb92 f2f1 	sdiv	r2, r2, r1
 80169bc:	d009      	beq.n	80169d2 <_Paint+0x446>
 80169be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80169c0:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
 80169c4:	1a9a      	subs	r2, r3, r2
 80169c6:	45b0      	cmp	r8, r6
 80169c8:	9224      	str	r2, [sp, #144]	; 0x90
 80169ca:	d10a      	bne.n	80169e2 <_Paint+0x456>
 80169cc:	3202      	adds	r2, #2
 80169ce:	9224      	str	r2, [sp, #144]	; 0x90
 80169d0:	e007      	b.n	80169e2 <_Paint+0x456>
 80169d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169d4:	9526      	str	r5, [sp, #152]	; 0x98
 80169d6:	eb0a 0103 	add.w	r1, sl, r3
 80169da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169dc:	4419      	add	r1, r3
 80169de:	1a8a      	subs	r2, r1, r2
 80169e0:	9224      	str	r2, [sp, #144]	; 0x90
 80169e2:	aa15      	add	r2, sp, #84	; 0x54
 80169e4:	921e      	str	r2, [sp, #120]	; 0x78
 80169e6:	2206      	movs	r2, #6
 80169e8:	9220      	str	r2, [sp, #128]	; 0x80
 80169ea:	a81f      	add	r0, sp, #124	; 0x7c
 80169ec:	9b05      	ldr	r3, [sp, #20]
 80169ee:	4798      	blx	r3
 80169f0:	2200      	movs	r2, #0
 80169f2:	921e      	str	r2, [sp, #120]	; 0x78
 80169f4:	9215      	str	r2, [sp, #84]	; 0x54
 80169f6:	9b06      	ldr	r3, [sp, #24]
 80169f8:	b1b3      	cbz	r3, 8016a28 <_Paint+0x49c>
 80169fa:	9b08      	ldr	r3, [sp, #32]
 80169fc:	f1b8 0f00 	cmp.w	r8, #0
 8016a00:	d103      	bne.n	8016a0a <_Paint+0x47e>
 8016a02:	b116      	cbz	r6, 8016a0a <_Paint+0x47e>
 8016a04:	eb09 0203 	add.w	r2, r9, r3
 8016a08:	e001      	b.n	8016a0e <_Paint+0x482>
 8016a0a:	eb0b 0203 	add.w	r2, fp, r3
 8016a0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a10:	9224      	str	r2, [sp, #144]	; 0x90
 8016a12:	18e2      	adds	r2, r4, r3
 8016a14:	9226      	str	r2, [sp, #152]	; 0x98
 8016a16:	077a      	lsls	r2, r7, #29
 8016a18:	bf47      	ittee	mi
 8016a1a:	f8cd a08c 	strmi.w	sl, [sp, #140]	; 0x8c
 8016a1e:	9525      	strmi	r5, [sp, #148]	; 0x94
 8016a20:	9523      	strpl	r5, [sp, #140]	; 0x8c
 8016a22:	f8cd a094 	strpl.w	sl, [sp, #148]	; 0x94
 8016a26:	e015      	b.n	8016a54 <_Paint+0x4c8>
 8016a28:	9b08      	ldr	r3, [sp, #32]
 8016a2a:	f1b8 0f00 	cmp.w	r8, #0
 8016a2e:	d103      	bne.n	8016a38 <_Paint+0x4ac>
 8016a30:	b116      	cbz	r6, 8016a38 <_Paint+0x4ac>
 8016a32:	eb09 0203 	add.w	r2, r9, r3
 8016a36:	e001      	b.n	8016a3c <_Paint+0x4b0>
 8016a38:	eb0b 0203 	add.w	r2, fp, r3
 8016a3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016a3e:	9223      	str	r2, [sp, #140]	; 0x8c
 8016a40:	18e2      	adds	r2, r4, r3
 8016a42:	077b      	lsls	r3, r7, #29
 8016a44:	9225      	str	r2, [sp, #148]	; 0x94
 8016a46:	bf47      	ittee	mi
 8016a48:	9524      	strmi	r5, [sp, #144]	; 0x90
 8016a4a:	f8cd a098 	strmi.w	sl, [sp, #152]	; 0x98
 8016a4e:	f8cd a090 	strpl.w	sl, [sp, #144]	; 0x90
 8016a52:	9526      	strpl	r5, [sp, #152]	; 0x98
 8016a54:	2212      	movs	r2, #18
 8016a56:	9220      	str	r2, [sp, #128]	; 0x80
 8016a58:	a81f      	add	r0, sp, #124	; 0x7c
 8016a5a:	9b05      	ldr	r3, [sp, #20]
 8016a5c:	4798      	blx	r3
 8016a5e:	f108 0801 	add.w	r8, r8, #1
 8016a62:	e660      	b.n	8016726 <_Paint+0x19a>
 8016a64:	2000      	movs	r0, #0
 8016a66:	f7f8 fa59 	bl	800ef1c <WM_SetUserClipRect>
 8016a6a:	b029      	add	sp, #164	; 0xa4
 8016a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a70:	20000064 	.word	0x20000064

08016a74 <MULTIPAGE_SKIN__GetTabBarWidth>:
 8016a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a76:	4605      	mov	r5, r0
 8016a78:	f7f1 fc46 	bl	8008308 <GUI_ALLOC_LockH>
 8016a7c:	ac02      	add	r4, sp, #8
 8016a7e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8016a82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016a84:	f7f9 fe61 	bl	801074a <GUI_ARRAY_GetNumItems>
 8016a88:	4606      	mov	r6, r0
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	f7f1 fc4a 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016a90:	4631      	mov	r1, r6
 8016a92:	4628      	mov	r0, r5
 8016a94:	f7ff fd4e 	bl	8016534 <MULTIPAGE_SKIN__GetPagePos>
 8016a98:	3801      	subs	r0, #1
 8016a9a:	b002      	add	sp, #8
 8016a9c:	bd70      	pop	{r4, r5, r6, pc}

08016a9e <MULTIPAGE_SKIN__GetTouchedPage>:
 8016a9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa2:	b08d      	sub	sp, #52	; 0x34
 8016aa4:	460e      	mov	r6, r1
 8016aa6:	4615      	mov	r5, r2
 8016aa8:	9003      	str	r0, [sp, #12]
 8016aaa:	f7f1 fc2d 	bl	8008308 <GUI_ALLOC_LockH>
 8016aae:	9009      	str	r0, [sp, #36]	; 0x24
 8016ab0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016ab2:	f7f9 fe4a 	bl	801074a <GUI_ARRAY_GetNumItems>
 8016ab6:	9004      	str	r0, [sp, #16]
 8016ab8:	a80c      	add	r0, sp, #48	; 0x30
 8016aba:	b22d      	sxth	r5, r5
 8016abc:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8016ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ac2:	8e5f      	ldrh	r7, [r3, #50]	; 0x32
 8016ac4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016ac6:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
 8016aca:	f893 9080 	ldrb.w	r9, [r3, #128]	; 0x80
 8016ace:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8016ad2:	9202      	str	r2, [sp, #8]
 8016ad4:	9305      	str	r3, [sp, #20]
 8016ad6:	f7f1 fc25 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016ada:	a90a      	add	r1, sp, #40	; 0x28
 8016adc:	9803      	ldr	r0, [sp, #12]
 8016ade:	f7ff fc78 	bl	80163d2 <MULTIPAGE__GetTabBarRect>
 8016ae2:	f017 0f08 	tst.w	r7, #8
 8016ae6:	b236      	sxth	r6, r6
 8016ae8:	f004 0404 	and.w	r4, r4, #4
 8016aec:	d014      	beq.n	8016b18 <MULTIPAGE_SKIN__GetTouchedPage+0x7a>
 8016aee:	462f      	mov	r7, r5
 8016af0:	ad0c      	add	r5, sp, #48	; 0x30
 8016af2:	9601      	str	r6, [sp, #4]
 8016af4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8016af8:	f935 2d04 	ldrsh.w	r2, [r5, #-4]!
 8016afc:	b12c      	cbz	r4, 8016b0a <MULTIPAGE_SKIN__GetTouchedPage+0x6c>
 8016afe:	46aa      	mov	sl, r5
 8016b00:	4619      	mov	r1, r3
 8016b02:	ad0a      	add	r5, sp, #40	; 0x28
 8016b04:	f10d 042a 	add.w	r4, sp, #42	; 0x2a
 8016b08:	e01d      	b.n	8016b46 <MULTIPAGE_SKIN__GetTouchedPage+0xa8>
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8016b10:	461a      	mov	r2, r3
 8016b12:	f10d 042a 	add.w	r4, sp, #42	; 0x2a
 8016b16:	e00c      	b.n	8016b32 <MULTIPAGE_SKIN__GetTouchedPage+0x94>
 8016b18:	4637      	mov	r7, r6
 8016b1a:	9501      	str	r5, [sp, #4]
 8016b1c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016b20:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8016b24:	b144      	cbz	r4, 8016b38 <MULTIPAGE_SKIN__GetTouchedPage+0x9a>
 8016b26:	4619      	mov	r1, r3
 8016b28:	f10d 0a2a 	add.w	sl, sp, #42	; 0x2a
 8016b2c:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8016b30:	ac0a      	add	r4, sp, #40	; 0x28
 8016b32:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8016b36:	e008      	b.n	8016b4a <MULTIPAGE_SKIN__GetTouchedPage+0xac>
 8016b38:	4611      	mov	r1, r2
 8016b3a:	f10d 0a2e 	add.w	sl, sp, #46	; 0x2e
 8016b3e:	461a      	mov	r2, r3
 8016b40:	f10d 052a 	add.w	r5, sp, #42	; 0x2a
 8016b44:	ac0a      	add	r4, sp, #40	; 0x28
 8016b46:	f04f 0b01 	mov.w	fp, #1
 8016b4a:	9801      	ldr	r0, [sp, #4]
 8016b4c:	f7ff fcc5 	bl	80164da <_IsBetween>
 8016b50:	b910      	cbnz	r0, 8016b58 <MULTIPAGE_SKIN__GetTouchedPage+0xba>
 8016b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b56:	e052      	b.n	8016bfe <MULTIPAGE_SKIN__GetTouchedPage+0x160>
 8016b58:	f9b4 4000 	ldrsh.w	r4, [r4]
 8016b5c:	f1b8 0f00 	cmp.w	r8, #0
 8016b60:	d100      	bne.n	8016b64 <MULTIPAGE_SKIN__GetTouchedPage+0xc6>
 8016b62:	444c      	add	r4, r9
 8016b64:	4641      	mov	r1, r8
 8016b66:	9803      	ldr	r0, [sp, #12]
 8016b68:	f7ff fbec 	bl	8016344 <MULTIPAGE__GetPageWidth>
 8016b6c:	9b05      	ldr	r3, [sp, #20]
 8016b6e:	fb0b f303 	mul.w	r3, fp, r3
 8016b72:	9305      	str	r3, [sp, #20]
 8016b74:	9b02      	ldr	r3, [sp, #8]
 8016b76:	3301      	adds	r3, #1
 8016b78:	9306      	str	r3, [sp, #24]
 8016b7a:	9b02      	ldr	r3, [sp, #8]
 8016b7c:	4420      	add	r0, r4
 8016b7e:	3b01      	subs	r3, #1
 8016b80:	1e46      	subs	r6, r0, #1
 8016b82:	46c3      	mov	fp, r8
 8016b84:	9307      	str	r3, [sp, #28]
 8016b86:	9b04      	ldr	r3, [sp, #16]
 8016b88:	459b      	cmp	fp, r3
 8016b8a:	dae2      	bge.n	8016b52 <MULTIPAGE_SKIN__GetTouchedPage+0xb4>
 8016b8c:	45c3      	cmp	fp, r8
 8016b8e:	db32      	blt.n	8016bf6 <MULTIPAGE_SKIN__GetTouchedPage+0x158>
 8016b90:	9b02      	ldr	r3, [sp, #8]
 8016b92:	459b      	cmp	fp, r3
 8016b94:	d10a      	bne.n	8016bac <MULTIPAGE_SKIN__GetTouchedPage+0x10e>
 8016b96:	ebc9 0404 	rsb	r4, r9, r4
 8016b9a:	eb06 0109 	add.w	r1, r6, r9
 8016b9e:	f1bb 0f00 	cmp.w	fp, #0
 8016ba2:	d101      	bne.n	8016ba8 <MULTIPAGE_SKIN__GetTouchedPage+0x10a>
 8016ba4:	4622      	mov	r2, r4
 8016ba6:	e01b      	b.n	8016be0 <MULTIPAGE_SKIN__GetTouchedPage+0x142>
 8016ba8:	460a      	mov	r2, r1
 8016baa:	e018      	b.n	8016bde <MULTIPAGE_SKIN__GetTouchedPage+0x140>
 8016bac:	f9b5 1000 	ldrsh.w	r1, [r5]
 8016bb0:	9b05      	ldr	r3, [sp, #20]
 8016bb2:	f9ba 2000 	ldrsh.w	r2, [sl]
 8016bb6:	9801      	ldr	r0, [sp, #4]
 8016bb8:	4419      	add	r1, r3
 8016bba:	f7ff fc8e 	bl	80164da <_IsBetween>
 8016bbe:	b198      	cbz	r0, 8016be8 <MULTIPAGE_SKIN__GetTouchedPage+0x14a>
 8016bc0:	9b06      	ldr	r3, [sp, #24]
 8016bc2:	459b      	cmp	fp, r3
 8016bc4:	d105      	bne.n	8016bd2 <MULTIPAGE_SKIN__GetTouchedPage+0x134>
 8016bc6:	45c3      	cmp	fp, r8
 8016bc8:	dd03      	ble.n	8016bd2 <MULTIPAGE_SKIN__GetTouchedPage+0x134>
 8016bca:	4632      	mov	r2, r6
 8016bcc:	eb09 0104 	add.w	r1, r9, r4
 8016bd0:	e006      	b.n	8016be0 <MULTIPAGE_SKIN__GetTouchedPage+0x142>
 8016bd2:	9b07      	ldr	r3, [sp, #28]
 8016bd4:	459b      	cmp	fp, r3
 8016bd6:	bf0c      	ite	eq
 8016bd8:	ebc9 0206 	rsbeq	r2, r9, r6
 8016bdc:	4632      	movne	r2, r6
 8016bde:	4621      	mov	r1, r4
 8016be0:	4638      	mov	r0, r7
 8016be2:	f7ff fc7a 	bl	80164da <_IsBetween>
 8016be6:	b948      	cbnz	r0, 8016bfc <MULTIPAGE_SKIN__GetTouchedPage+0x15e>
 8016be8:	f10b 0101 	add.w	r1, fp, #1
 8016bec:	9803      	ldr	r0, [sp, #12]
 8016bee:	f7ff fba9 	bl	8016344 <MULTIPAGE__GetPageWidth>
 8016bf2:	1c74      	adds	r4, r6, #1
 8016bf4:	4406      	add	r6, r0
 8016bf6:	f10b 0b01 	add.w	fp, fp, #1
 8016bfa:	e7c4      	b.n	8016b86 <MULTIPAGE_SKIN__GetTouchedPage+0xe8>
 8016bfc:	4658      	mov	r0, fp
 8016bfe:	b00d      	add	sp, #52	; 0x34
 8016c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c04 <MULTIPAGE_DrawSkinFlex>:
 8016c04:	b570      	push	{r4, r5, r6, lr}
 8016c06:	6843      	ldr	r3, [r0, #4]
 8016c08:	b086      	sub	sp, #24
 8016c0a:	4604      	mov	r4, r0
 8016c0c:	b993      	cbnz	r3, 8016c34 <MULTIPAGE_DrawSkinFlex+0x30>
 8016c0e:	6800      	ldr	r0, [r0, #0]
 8016c10:	f7f1 fb7a 	bl	8008308 <GUI_ALLOC_LockH>
 8016c14:	4a94      	ldr	r2, [pc, #592]	; (8016e68 <MULTIPAGE_DrawSkinFlex+0x264>)
 8016c16:	4603      	mov	r3, r0
 8016c18:	69d2      	ldr	r2, [r2, #28]
 8016c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8016c1c:	a806      	add	r0, sp, #24
 8016c1e:	2202      	movs	r2, #2
 8016c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8016c24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8016c28:	4a90      	ldr	r2, [pc, #576]	; (8016e6c <MULTIPAGE_DrawSkinFlex+0x268>)
 8016c2a:	f840 3d0c 	str.w	r3, [r0, #-12]!
 8016c2e:	675a      	str	r2, [r3, #116]	; 0x74
 8016c30:	f7f1 fb78 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016c34:	6a26      	ldr	r6, [r4, #32]
 8016c36:	2e00      	cmp	r6, #0
 8016c38:	f000 8113 	beq.w	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016c3c:	68a2      	ldr	r2, [r4, #8]
 8016c3e:	68b1      	ldr	r1, [r6, #8]
 8016c40:	428a      	cmp	r2, r1
 8016c42:	d008      	beq.n	8016c56 <MULTIPAGE_DrawSkinFlex+0x52>
 8016c44:	7bf0      	ldrb	r0, [r6, #15]
 8016c46:	4b88      	ldr	r3, [pc, #544]	; (8016e68 <MULTIPAGE_DrawSkinFlex+0x264>)
 8016c48:	f010 0f01 	tst.w	r0, #1
 8016c4c:	f103 0538 	add.w	r5, r3, #56	; 0x38
 8016c50:	bf18      	it	ne
 8016c52:	461d      	movne	r5, r3
 8016c54:	e000      	b.n	8016c58 <MULTIPAGE_DrawSkinFlex+0x54>
 8016c56:	4d86      	ldr	r5, [pc, #536]	; (8016e70 <MULTIPAGE_DrawSkinFlex+0x26c>)
 8016c58:	6863      	ldr	r3, [r4, #4]
 8016c5a:	2b06      	cmp	r3, #6
 8016c5c:	f000 80c2 	beq.w	8016de4 <MULTIPAGE_DrawSkinFlex+0x1e0>
 8016c60:	dc02      	bgt.n	8016c68 <MULTIPAGE_DrawSkinFlex+0x64>
 8016c62:	2b05      	cmp	r3, #5
 8016c64:	d041      	beq.n	8016cea <MULTIPAGE_DrawSkinFlex+0xe6>
 8016c66:	e0fc      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016c68:	2b0b      	cmp	r3, #11
 8016c6a:	d003      	beq.n	8016c74 <MULTIPAGE_DrawSkinFlex+0x70>
 8016c6c:	2b12      	cmp	r3, #18
 8016c6e:	f000 80c3 	beq.w	8016df8 <MULTIPAGE_DrawSkinFlex+0x1f4>
 8016c72:	e0f6      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016c74:	3201      	adds	r2, #1
 8016c76:	d113      	bne.n	8016ca0 <MULTIPAGE_DrawSkinFlex+0x9c>
 8016c78:	4d7b      	ldr	r5, [pc, #492]	; (8016e68 <MULTIPAGE_DrawSkinFlex+0x264>)
 8016c7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016c7c:	f7f1 febe 	bl	80089fc <GUI_SetColor>
 8016c80:	f104 0010 	add.w	r0, r4, #16
 8016c84:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8016c86:	f7fb fe5b 	bl	8012940 <GUI_DrawRect>
 8016c8a:	69e8      	ldr	r0, [r5, #28]
 8016c8c:	f7f1 feb6 	bl	80089fc <GUI_SetColor>
 8016c90:	f104 0010 	add.w	r0, r4, #16
 8016c94:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8016c96:	3b01      	subs	r3, #1
 8016c98:	3a01      	subs	r2, #1
 8016c9a:	3101      	adds	r1, #1
 8016c9c:	3001      	adds	r0, #1
 8016c9e:	e02c      	b.n	8016cfa <MULTIPAGE_DrawSkinFlex+0xf6>
 8016ca0:	6968      	ldr	r0, [r5, #20]
 8016ca2:	f7f1 feab 	bl	80089fc <GUI_SetColor>
 8016ca6:	7bb3      	ldrb	r3, [r6, #14]
 8016ca8:	0718      	lsls	r0, r3, #28
 8016caa:	d504      	bpl.n	8016cb6 <MULTIPAGE_DrawSkinFlex+0xb2>
 8016cac:	69a2      	ldr	r2, [r4, #24]
 8016cae:	6921      	ldr	r1, [r4, #16]
 8016cb0:	69e0      	ldr	r0, [r4, #28]
 8016cb2:	f7fc fa8d 	bl	80131d0 <GUI_DrawHLine>
 8016cb6:	7bb3      	ldrb	r3, [r6, #14]
 8016cb8:	0759      	lsls	r1, r3, #29
 8016cba:	d504      	bpl.n	8016cc6 <MULTIPAGE_DrawSkinFlex+0xc2>
 8016cbc:	69a2      	ldr	r2, [r4, #24]
 8016cbe:	6921      	ldr	r1, [r4, #16]
 8016cc0:	6960      	ldr	r0, [r4, #20]
 8016cc2:	f7fc fa85 	bl	80131d0 <GUI_DrawHLine>
 8016cc6:	7bb3      	ldrb	r3, [r6, #14]
 8016cc8:	07da      	lsls	r2, r3, #31
 8016cca:	d504      	bpl.n	8016cd6 <MULTIPAGE_DrawSkinFlex+0xd2>
 8016ccc:	69e2      	ldr	r2, [r4, #28]
 8016cce:	6961      	ldr	r1, [r4, #20]
 8016cd0:	6920      	ldr	r0, [r4, #16]
 8016cd2:	f7fc fae3 	bl	801329c <GUI_DrawVLine>
 8016cd6:	7bb3      	ldrb	r3, [r6, #14]
 8016cd8:	079b      	lsls	r3, r3, #30
 8016cda:	f140 80c2 	bpl.w	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016cde:	69e2      	ldr	r2, [r4, #28]
 8016ce0:	6961      	ldr	r1, [r4, #20]
 8016ce2:	69a0      	ldr	r0, [r4, #24]
 8016ce4:	f7fc fada 	bl	801329c <GUI_DrawVLine>
 8016ce8:	e0bb      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016cea:	428a      	cmp	r2, r1
 8016cec:	d108      	bne.n	8016d00 <MULTIPAGE_DrawSkinFlex+0xfc>
 8016cee:	6828      	ldr	r0, [r5, #0]
 8016cf0:	f7f1 fe84 	bl	80089fc <GUI_SetColor>
 8016cf4:	f104 0010 	add.w	r0, r4, #16
 8016cf8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8016cfa:	f7fc faf7 	bl	80132ec <GUI_FillRect>
 8016cfe:	e0b0      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016d00:	89b3      	ldrh	r3, [r6, #12]
 8016d02:	f013 0f08 	tst.w	r3, #8
 8016d06:	6873      	ldr	r3, [r6, #4]
 8016d08:	d035      	beq.n	8016d76 <MULTIPAGE_DrawSkinFlex+0x172>
 8016d0a:	f013 0f04 	tst.w	r3, #4
 8016d0e:	69a2      	ldr	r2, [r4, #24]
 8016d10:	6923      	ldr	r3, [r4, #16]
 8016d12:	f04f 0602 	mov.w	r6, #2
 8016d16:	eba2 0003 	sub.w	r0, r2, r3
 8016d1a:	fb90 f0f6 	sdiv	r0, r0, r6
 8016d1e:	4418      	add	r0, r3
 8016d20:	d011      	beq.n	8016d46 <MULTIPAGE_DrawSkinFlex+0x142>
 8016d22:	692b      	ldr	r3, [r5, #16]
 8016d24:	9301      	str	r3, [sp, #4]
 8016d26:	68eb      	ldr	r3, [r5, #12]
 8016d28:	9300      	str	r3, [sp, #0]
 8016d2a:	69e3      	ldr	r3, [r4, #28]
 8016d2c:	6961      	ldr	r1, [r4, #20]
 8016d2e:	3001      	adds	r0, #1
 8016d30:	f7fc fa14 	bl	801315c <GUI_DrawGradientH>
 8016d34:	6920      	ldr	r0, [r4, #16]
 8016d36:	69a2      	ldr	r2, [r4, #24]
 8016d38:	68ab      	ldr	r3, [r5, #8]
 8016d3a:	9301      	str	r3, [sp, #4]
 8016d3c:	1a12      	subs	r2, r2, r0
 8016d3e:	686b      	ldr	r3, [r5, #4]
 8016d40:	fb92 f2f6 	sdiv	r2, r2, r6
 8016d44:	e010      	b.n	8016d68 <MULTIPAGE_DrawSkinFlex+0x164>
 8016d46:	686b      	ldr	r3, [r5, #4]
 8016d48:	9301      	str	r3, [sp, #4]
 8016d4a:	68ab      	ldr	r3, [r5, #8]
 8016d4c:	9300      	str	r3, [sp, #0]
 8016d4e:	69e3      	ldr	r3, [r4, #28]
 8016d50:	6961      	ldr	r1, [r4, #20]
 8016d52:	3001      	adds	r0, #1
 8016d54:	f7fc fa02 	bl	801315c <GUI_DrawGradientH>
 8016d58:	68eb      	ldr	r3, [r5, #12]
 8016d5a:	6920      	ldr	r0, [r4, #16]
 8016d5c:	69a2      	ldr	r2, [r4, #24]
 8016d5e:	9301      	str	r3, [sp, #4]
 8016d60:	692b      	ldr	r3, [r5, #16]
 8016d62:	1a12      	subs	r2, r2, r0
 8016d64:	fb92 f2f6 	sdiv	r2, r2, r6
 8016d68:	9300      	str	r3, [sp, #0]
 8016d6a:	69e3      	ldr	r3, [r4, #28]
 8016d6c:	6961      	ldr	r1, [r4, #20]
 8016d6e:	4402      	add	r2, r0
 8016d70:	f7fc f9f4 	bl	801315c <GUI_DrawGradientH>
 8016d74:	e075      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016d76:	f013 0f04 	tst.w	r3, #4
 8016d7a:	6961      	ldr	r1, [r4, #20]
 8016d7c:	69e3      	ldr	r3, [r4, #28]
 8016d7e:	f04f 0602 	mov.w	r6, #2
 8016d82:	eba3 0301 	sub.w	r3, r3, r1
 8016d86:	fb93 f3f6 	sdiv	r3, r3, r6
 8016d8a:	d012      	beq.n	8016db2 <MULTIPAGE_DrawSkinFlex+0x1ae>
 8016d8c:	68ea      	ldr	r2, [r5, #12]
 8016d8e:	9201      	str	r2, [sp, #4]
 8016d90:	692a      	ldr	r2, [r5, #16]
 8016d92:	9200      	str	r2, [sp, #0]
 8016d94:	440b      	add	r3, r1
 8016d96:	69a2      	ldr	r2, [r4, #24]
 8016d98:	6920      	ldr	r0, [r4, #16]
 8016d9a:	f7fc f9a5 	bl	80130e8 <GUI_DrawGradientV>
 8016d9e:	6962      	ldr	r2, [r4, #20]
 8016da0:	69e3      	ldr	r3, [r4, #28]
 8016da2:	1a99      	subs	r1, r3, r2
 8016da4:	fb91 f1f6 	sdiv	r1, r1, r6
 8016da8:	4411      	add	r1, r2
 8016daa:	686a      	ldr	r2, [r5, #4]
 8016dac:	9201      	str	r2, [sp, #4]
 8016dae:	68aa      	ldr	r2, [r5, #8]
 8016db0:	e011      	b.n	8016dd6 <MULTIPAGE_DrawSkinFlex+0x1d2>
 8016db2:	68aa      	ldr	r2, [r5, #8]
 8016db4:	9201      	str	r2, [sp, #4]
 8016db6:	686a      	ldr	r2, [r5, #4]
 8016db8:	9200      	str	r2, [sp, #0]
 8016dba:	440b      	add	r3, r1
 8016dbc:	69a2      	ldr	r2, [r4, #24]
 8016dbe:	6920      	ldr	r0, [r4, #16]
 8016dc0:	f7fc f992 	bl	80130e8 <GUI_DrawGradientV>
 8016dc4:	6962      	ldr	r2, [r4, #20]
 8016dc6:	69e3      	ldr	r3, [r4, #28]
 8016dc8:	1a99      	subs	r1, r3, r2
 8016dca:	fb91 f1f6 	sdiv	r1, r1, r6
 8016dce:	4411      	add	r1, r2
 8016dd0:	692a      	ldr	r2, [r5, #16]
 8016dd2:	9201      	str	r2, [sp, #4]
 8016dd4:	68ea      	ldr	r2, [r5, #12]
 8016dd6:	9200      	str	r2, [sp, #0]
 8016dd8:	69a2      	ldr	r2, [r4, #24]
 8016dda:	6920      	ldr	r0, [r4, #16]
 8016ddc:	3101      	adds	r1, #1
 8016dde:	f7fc f983 	bl	80130e8 <GUI_DrawGradientV>
 8016de2:	e03e      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016de4:	6930      	ldr	r0, [r6, #16]
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d03b      	beq.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016dea:	6963      	ldr	r3, [r4, #20]
 8016dec:	6922      	ldr	r2, [r4, #16]
 8016dee:	6821      	ldr	r1, [r4, #0]
 8016df0:	6800      	ldr	r0, [r0, #0]
 8016df2:	f7f9 fcdf 	bl	80107b4 <GUI_DRAW__Draw>
 8016df6:	e034      	b.n	8016e62 <MULTIPAGE_DrawSkinFlex+0x25e>
 8016df8:	6820      	ldr	r0, [r4, #0]
 8016dfa:	f7ff fb4b 	bl	8016494 <MULTIPAGE_GetFont>
 8016dfe:	f7f1 fe27 	bl	8008a50 <GUI_SetFont>
 8016e02:	69a8      	ldr	r0, [r5, #24]
 8016e04:	f7f1 fdfa 	bl	80089fc <GUI_SetColor>
 8016e08:	2002      	movs	r0, #2
 8016e0a:	f7f1 fe6f 	bl	8008aec <GUI_SetTextMode>
 8016e0e:	6820      	ldr	r0, [r4, #0]
 8016e10:	f7f1 fa7a 	bl	8008308 <GUI_ALLOC_LockH>
 8016e14:	68a1      	ldr	r1, [r4, #8]
 8016e16:	9003      	str	r0, [sp, #12]
 8016e18:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016e1a:	f7f9 fcb8 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 8016e1e:	6923      	ldr	r3, [r4, #16]
 8016e20:	f8ad 3010 	strh.w	r3, [sp, #16]
 8016e24:	6963      	ldr	r3, [r4, #20]
 8016e26:	f8ad 3012 	strh.w	r3, [sp, #18]
 8016e2a:	69a3      	ldr	r3, [r4, #24]
 8016e2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e30:	69e3      	ldr	r3, [r4, #28]
 8016e32:	9002      	str	r0, [sp, #8]
 8016e34:	f110 0418 	adds.w	r4, r0, #24
 8016e38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e3c:	d00b      	beq.n	8016e56 <MULTIPAGE_DrawSkinFlex+0x252>
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f7e9 f9d6 	bl	80001f0 <strlen>
 8016e44:	6833      	ldr	r3, [r6, #0]
 8016e46:	9a03      	ldr	r2, [sp, #12]
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	a904      	add	r1, sp, #16
 8016e50:	4620      	mov	r0, r4
 8016e52:	f7f2 fa73 	bl	800933c <GUI_DispStringInRectEx>
 8016e56:	a802      	add	r0, sp, #8
 8016e58:	f7f1 fa64 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016e5c:	a803      	add	r0, sp, #12
 8016e5e:	f7f1 fa61 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016e62:	2000      	movs	r0, #0
 8016e64:	b006      	add	sp, #24
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	200005e8 	.word	0x200005e8
 8016e6c:	08016a9f 	.word	0x08016a9f
 8016e70:	20000604 	.word	0x20000604

08016e74 <PROGBAR__GetTextLocked>:
 8016e74:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8016e76:	f7f1 ba47 	b.w	8008308 <GUI_ALLOC_LockH>

08016e7a <PROGBAR__GetTextRect>:
 8016e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e7e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016e82:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016e86:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
 8016e8a:	1b1c      	subs	r4, r3, r4
 8016e8c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016e90:	4680      	mov	r8, r0
 8016e92:	4610      	mov	r0, r2
 8016e94:	1bdf      	subs	r7, r3, r7
 8016e96:	460d      	mov	r5, r1
 8016e98:	f7f2 fa2d 	bl	80092f6 <GUI_GetStringDistX>
 8016e9c:	4606      	mov	r6, r0
 8016e9e:	f7f1 fcaf 	bl	8008800 <GUI_GetFontSizeY>
 8016ea2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8016ea6:	681a      	ldr	r2, [r3, #0]
 8016ea8:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
 8016eac:	f003 0303 	and.w	r3, r3, #3
 8016eb0:	2b01      	cmp	r3, #1
 8016eb2:	f104 0401 	add.w	r4, r4, #1
 8016eb6:	f107 0701 	add.w	r7, r7, #1
 8016eba:	d006      	beq.n	8016eca <PROGBAR__GetTextRect+0x50>
 8016ebc:	2b02      	cmp	r3, #2
 8016ebe:	d109      	bne.n	8016ed4 <PROGBAR__GetTextRect+0x5a>
 8016ec0:	1ba4      	subs	r4, r4, r6
 8016ec2:	fb94 f3f3 	sdiv	r3, r4, r3
 8016ec6:	802b      	strh	r3, [r5, #0]
 8016ec8:	e005      	b.n	8016ed6 <PROGBAR__GetTextRect+0x5c>
 8016eca:	43d2      	mvns	r2, r2
 8016ecc:	4414      	add	r4, r2
 8016ece:	1ba4      	subs	r4, r4, r6
 8016ed0:	802c      	strh	r4, [r5, #0]
 8016ed2:	e000      	b.n	8016ed6 <PROGBAR__GetTextRect+0x5c>
 8016ed4:	802a      	strh	r2, [r5, #0]
 8016ed6:	f8b8 203c 	ldrh.w	r2, [r8, #60]	; 0x3c
 8016eda:	882b      	ldrh	r3, [r5, #0]
 8016edc:	f8b8 103e 	ldrh.w	r1, [r8, #62]	; 0x3e
 8016ee0:	4413      	add	r3, r2
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	1a3f      	subs	r7, r7, r0
 8016ee6:	2202      	movs	r2, #2
 8016ee8:	fb97 f2f2 	sdiv	r2, r7, r2
 8016eec:	440a      	add	r2, r1
 8016eee:	b292      	uxth	r2, r2
 8016ef0:	802b      	strh	r3, [r5, #0]
 8016ef2:	3801      	subs	r0, #1
 8016ef4:	3b01      	subs	r3, #1
 8016ef6:	4433      	add	r3, r6
 8016ef8:	4410      	add	r0, r2
 8016efa:	806a      	strh	r2, [r5, #2]
 8016efc:	80ab      	strh	r3, [r5, #4]
 8016efe:	80e8      	strh	r0, [r5, #6]
 8016f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f04 <PROGBAR__Value2Pos>:
 8016f04:	b570      	push	{r4, r5, r6, lr}
 8016f06:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8016f0a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8016f0c:	f013 0601 	ands.w	r6, r3, #1
 8016f10:	460a      	mov	r2, r1
 8016f12:	bf15      	itete	ne
 8016f14:	f9b0 4006 	ldrshne.w	r4, [r0, #6]
 8016f18:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8016f1c:	f9b0 3002 	ldrshne.w	r3, [r0, #2]
 8016f20:	f9b0 3000 	ldrsheq.w	r3, [r0]
 8016f24:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016f26:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016f28:	6809      	ldr	r1, [r1, #0]
 8016f2a:	42aa      	cmp	r2, r5
 8016f2c:	eba4 0303 	sub.w	r3, r4, r3
 8016f30:	bfb8      	it	lt
 8016f32:	462a      	movlt	r2, r5
 8016f34:	3301      	adds	r3, #1
 8016f36:	4282      	cmp	r2, r0
 8016f38:	bfa8      	it	ge
 8016f3a:	4602      	movge	r2, r0
 8016f3c:	eba3 0441 	sub.w	r4, r3, r1, lsl #1
 8016f40:	b10e      	cbz	r6, 8016f46 <PROGBAR__Value2Pos+0x42>
 8016f42:	1a83      	subs	r3, r0, r2
 8016f44:	e000      	b.n	8016f48 <PROGBAR__Value2Pos+0x44>
 8016f46:	1b53      	subs	r3, r2, r5
 8016f48:	fb04 f203 	mul.w	r2, r4, r3
 8016f4c:	1b43      	subs	r3, r0, r5
 8016f4e:	fb92 f0f3 	sdiv	r0, r2, r3
 8016f52:	4408      	add	r0, r1
 8016f54:	bd70      	pop	{r4, r5, r6, pc}

08016f56 <_Create>:
 8016f56:	b530      	push	{r4, r5, lr}
 8016f58:	b08b      	sub	sp, #44	; 0x2c
 8016f5a:	4605      	mov	r5, r0
 8016f5c:	f7f1 f9d4 	bl	8008308 <GUI_ALLOC_LockH>
 8016f60:	ab0a      	add	r3, sp, #40	; 0x28
 8016f62:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8016f64:	f843 0d28 	str.w	r0, [r3, #-40]!
 8016f68:	4618      	mov	r0, r3
 8016f6a:	6894      	ldr	r4, [r2, #8]
 8016f6c:	f7f1 f9da 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016f70:	a80a      	add	r0, sp, #40	; 0x28
 8016f72:	2300      	movs	r3, #0
 8016f74:	9302      	str	r3, [sp, #8]
 8016f76:	f840 5d24 	str.w	r5, [r0, #-36]!
 8016f7a:	6823      	ldr	r3, [r4, #0]
 8016f7c:	4798      	blx	r3
 8016f7e:	b00b      	add	sp, #44	; 0x2c
 8016f80:	bd30      	pop	{r4, r5, pc}

08016f82 <_Paint>:
 8016f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f86:	b093      	sub	sp, #76	; 0x4c
 8016f88:	4605      	mov	r5, r0
 8016f8a:	f7f1 f9bd 	bl	8008308 <GUI_ALLOC_LockH>
 8016f8e:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
 8016f92:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8016f94:	6e06      	ldr	r6, [r0, #96]	; 0x60
 8016f96:	9000      	str	r0, [sp, #0]
 8016f98:	f002 0201 	and.w	r2, r2, #1
 8016f9c:	9206      	str	r2, [sp, #24]
 8016f9e:	f8d0 804c 	ldr.w	r8, [r0, #76]	; 0x4c
 8016fa2:	f7ff ffaf 	bl	8016f04 <PROGBAR__Value2Pos>
 8016fa6:	af02      	add	r7, sp, #8
 8016fa8:	4604      	mov	r4, r0
 8016faa:	4668      	mov	r0, sp
 8016fac:	f7f1 f9ba 	bl	8008324 <GUI_ALLOC_UnlockH>
 8016fb0:	ab06      	add	r3, sp, #24
 8016fb2:	4639      	mov	r1, r7
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	9311      	str	r3, [sp, #68]	; 0x44
 8016fb8:	f7f7 fd0b 	bl	800e9d2 <WM_GetClientRectEx>
 8016fbc:	230b      	movs	r3, #11
 8016fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8016fc0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8016fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8016fc6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016fca:	930e      	str	r3, [sp, #56]	; 0x38
 8016fcc:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fd2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016fd6:	9310      	str	r3, [sp, #64]	; 0x40
 8016fd8:	9509      	str	r5, [sp, #36]	; 0x24
 8016fda:	a809      	add	r0, sp, #36	; 0x24
 8016fdc:	47b0      	blx	r6
 8016fde:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016fe2:	f10d 0910 	add.w	r9, sp, #16
 8016fe6:	e889 0003 	stmia.w	r9, {r0, r1}
 8016fea:	2201      	movs	r2, #1
 8016fec:	4649      	mov	r1, r9
 8016fee:	4648      	mov	r0, r9
 8016ff0:	f7f3 fb3d 	bl	800a66e <GUI__ReduceRect>
 8016ff4:	4648      	mov	r0, r9
 8016ff6:	f7f7 ff91 	bl	800ef1c <WM_SetUserClipRect>
 8016ffa:	2305      	movs	r3, #5
 8016ffc:	9906      	ldr	r1, [sp, #24]
 8016ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8017000:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017004:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017008:	9509      	str	r5, [sp, #36]	; 0x24
 801700a:	930d      	str	r3, [sp, #52]	; 0x34
 801700c:	920e      	str	r2, [sp, #56]	; 0x38
 801700e:	b129      	cbz	r1, 801701c <_Paint+0x9a>
 8017010:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017014:	930f      	str	r3, [sp, #60]	; 0x3c
 8017016:	4422      	add	r2, r4
 8017018:	9210      	str	r2, [sp, #64]	; 0x40
 801701a:	e004      	b.n	8017026 <_Paint+0xa4>
 801701c:	4423      	add	r3, r4
 801701e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017020:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017024:	9310      	str	r3, [sp, #64]	; 0x40
 8017026:	2300      	movs	r3, #0
 8017028:	9307      	str	r3, [sp, #28]
 801702a:	a809      	add	r0, sp, #36	; 0x24
 801702c:	47b0      	blx	r6
 801702e:	9b06      	ldr	r3, [sp, #24]
 8017030:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8017034:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017038:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801703c:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8017040:	b12b      	cbz	r3, 801704e <_Paint+0xcc>
 8017042:	4414      	add	r4, r2
 8017044:	3401      	adds	r4, #1
 8017046:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801704a:	940e      	str	r4, [sp, #56]	; 0x38
 801704c:	e004      	b.n	8017058 <_Paint+0xd6>
 801704e:	eb0e 0304 	add.w	r3, lr, r4
 8017052:	3301      	adds	r3, #1
 8017054:	930d      	str	r3, [sp, #52]	; 0x34
 8017056:	920e      	str	r2, [sp, #56]	; 0x38
 8017058:	2301      	movs	r3, #1
 801705a:	9110      	str	r1, [sp, #64]	; 0x40
 801705c:	9307      	str	r3, [sp, #28]
 801705e:	900f      	str	r0, [sp, #60]	; 0x3c
 8017060:	a809      	add	r0, sp, #36	; 0x24
 8017062:	47b0      	blx	r6
 8017064:	4628      	mov	r0, r5
 8017066:	f7f1 f94f 	bl	8008308 <GUI_ALLOC_LockH>
 801706a:	9000      	str	r0, [sp, #0]
 801706c:	f7ff ff02 	bl	8016e74 <PROGBAR__GetTextLocked>
 8017070:	9001      	str	r0, [sp, #4]
 8017072:	b1f8      	cbz	r0, 80170b4 <_Paint+0x132>
 8017074:	4640      	mov	r0, r8
 8017076:	f7f1 fceb 	bl	8008a50 <GUI_SetFont>
 801707a:	9a01      	ldr	r2, [sp, #4]
 801707c:	9800      	ldr	r0, [sp, #0]
 801707e:	4639      	mov	r1, r7
 8017080:	f7ff fefb 	bl	8016e7a <PROGBAR__GetTextRect>
 8017084:	4668      	mov	r0, sp
 8017086:	f7f1 f94d 	bl	8008324 <GUI_ALLOC_UnlockH>
 801708a:	9b01      	ldr	r3, [sp, #4]
 801708c:	9308      	str	r3, [sp, #32]
 801708e:	2312      	movs	r3, #18
 8017090:	930a      	str	r3, [sp, #40]	; 0x28
 8017092:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017096:	930d      	str	r3, [sp, #52]	; 0x34
 8017098:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801709c:	930e      	str	r3, [sp, #56]	; 0x38
 801709e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80170a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80170a4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80170a8:	9509      	str	r5, [sp, #36]	; 0x24
 80170aa:	9310      	str	r3, [sp, #64]	; 0x40
 80170ac:	a809      	add	r0, sp, #36	; 0x24
 80170ae:	47b0      	blx	r6
 80170b0:	a801      	add	r0, sp, #4
 80170b2:	e000      	b.n	80170b6 <_Paint+0x134>
 80170b4:	4668      	mov	r0, sp
 80170b6:	f7f1 f935 	bl	8008324 <GUI_ALLOC_UnlockH>
 80170ba:	2000      	movs	r0, #0
 80170bc:	f7f7 ff2e 	bl	800ef1c <WM_SetUserClipRect>
 80170c0:	b013      	add	sp, #76	; 0x4c
 80170c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080170c8 <PROGBAR_DrawSkinFlex>:
 80170c8:	6843      	ldr	r3, [r0, #4]
 80170ca:	2b0b      	cmp	r3, #11
 80170cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80170d0:	4604      	mov	r4, r0
 80170d2:	6a07      	ldr	r7, [r0, #32]
 80170d4:	d006      	beq.n	80170e4 <PROGBAR_DrawSkinFlex+0x1c>
 80170d6:	2b12      	cmp	r3, #18
 80170d8:	f000 8097 	beq.w	801720a <PROGBAR_DrawSkinFlex+0x142>
 80170dc:	2b05      	cmp	r3, #5
 80170de:	f040 80a3 	bne.w	8017228 <PROGBAR_DrawSkinFlex+0x160>
 80170e2:	e01c      	b.n	801711e <PROGBAR_DrawSkinFlex+0x56>
 80170e4:	4b52      	ldr	r3, [pc, #328]	; (8017230 <PROGBAR_DrawSkinFlex+0x168>)
 80170e6:	6a18      	ldr	r0, [r3, #32]
 80170e8:	f7f1 fc88 	bl	80089fc <GUI_SetColor>
 80170ec:	69a2      	ldr	r2, [r4, #24]
 80170ee:	6921      	ldr	r1, [r4, #16]
 80170f0:	6960      	ldr	r0, [r4, #20]
 80170f2:	f7fc f86d 	bl	80131d0 <GUI_DrawHLine>
 80170f6:	69a2      	ldr	r2, [r4, #24]
 80170f8:	6921      	ldr	r1, [r4, #16]
 80170fa:	69e0      	ldr	r0, [r4, #28]
 80170fc:	f7fc f868 	bl	80131d0 <GUI_DrawHLine>
 8017100:	69e2      	ldr	r2, [r4, #28]
 8017102:	6961      	ldr	r1, [r4, #20]
 8017104:	6920      	ldr	r0, [r4, #16]
 8017106:	3a01      	subs	r2, #1
 8017108:	3101      	adds	r1, #1
 801710a:	f7fc f8c7 	bl	801329c <GUI_DrawVLine>
 801710e:	69e2      	ldr	r2, [r4, #28]
 8017110:	6961      	ldr	r1, [r4, #20]
 8017112:	69a0      	ldr	r0, [r4, #24]
 8017114:	3a01      	subs	r2, #1
 8017116:	3101      	adds	r1, #1
 8017118:	f7fc f8c0 	bl	801329c <GUI_DrawVLine>
 801711c:	e084      	b.n	8017228 <PROGBAR_DrawSkinFlex+0x160>
 801711e:	f8d7 e000 	ldr.w	lr, [r7]
 8017122:	69c6      	ldr	r6, [r0, #28]
 8017124:	4d42      	ldr	r5, [pc, #264]	; (8017230 <PROGBAR_DrawSkinFlex+0x168>)
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	3010      	adds	r0, #16
 801712a:	e890 0103 	ldmia.w	r0, {r0, r1, r8}
 801712e:	f1be 0f00 	cmp.w	lr, #0
 8017132:	d034      	beq.n	801719e <PROGBAR_DrawSkinFlex+0xd6>
 8017134:	ebc0 0808 	rsb	r8, r0, r8
 8017138:	f108 0801 	add.w	r8, r8, #1
 801713c:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017140:	b92b      	cbnz	r3, 801714e <PROGBAR_DrawSkinFlex+0x86>
 8017142:	692a      	ldr	r2, [r5, #16]
 8017144:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8017148:	f04f 0e01 	mov.w	lr, #1
 801714c:	e004      	b.n	8017158 <PROGBAR_DrawSkinFlex+0x90>
 801714e:	e895 1004 	ldmia.w	r5, {r2, ip}
 8017152:	2301      	movs	r3, #1
 8017154:	f04f 0e00 	mov.w	lr, #0
 8017158:	e88d 1004 	stmia.w	sp, {r2, ip}
 801715c:	1af3      	subs	r3, r6, r3
 801715e:	eb00 0208 	add.w	r2, r0, r8
 8017162:	4471      	add	r1, lr
 8017164:	3001      	adds	r0, #1
 8017166:	f7fb fff9 	bl	801315c <GUI_DrawGradientH>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	b91b      	cbnz	r3, 8017176 <PROGBAR_DrawSkinFlex+0xae>
 801716e:	69ae      	ldr	r6, [r5, #24]
 8017170:	69ed      	ldr	r5, [r5, #28]
 8017172:	2101      	movs	r1, #1
 8017174:	e003      	b.n	801717e <PROGBAR_DrawSkinFlex+0xb6>
 8017176:	68ae      	ldr	r6, [r5, #8]
 8017178:	68ed      	ldr	r5, [r5, #12]
 801717a:	2301      	movs	r3, #1
 801717c:	2100      	movs	r1, #0
 801717e:	6920      	ldr	r0, [r4, #16]
 8017180:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8017184:	69a2      	ldr	r2, [r4, #24]
 8017186:	6967      	ldr	r7, [r4, #20]
 8017188:	9501      	str	r5, [sp, #4]
 801718a:	4440      	add	r0, r8
 801718c:	9600      	str	r6, [sp, #0]
 801718e:	ebc3 030e 	rsb	r3, r3, lr
 8017192:	3a01      	subs	r2, #1
 8017194:	4439      	add	r1, r7
 8017196:	3001      	adds	r0, #1
 8017198:	f7fb ffe0 	bl	801315c <GUI_DrawGradientH>
 801719c:	e044      	b.n	8017228 <PROGBAR_DrawSkinFlex+0x160>
 801719e:	1a76      	subs	r6, r6, r1
 80171a0:	3601      	adds	r6, #1
 80171a2:	1076      	asrs	r6, r6, #1
 80171a4:	b93b      	cbnz	r3, 80171b6 <PROGBAR_DrawSkinFlex+0xee>
 80171a6:	f8d5 c000 	ldr.w	ip, [r5]
 80171aa:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80171ae:	461a      	mov	r2, r3
 80171b0:	f04f 0e01 	mov.w	lr, #1
 80171b4:	e004      	b.n	80171c0 <PROGBAR_DrawSkinFlex+0xf8>
 80171b6:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80171ba:	f8d5 9014 	ldr.w	r9, [r5, #20]
 80171be:	2201      	movs	r2, #1
 80171c0:	198b      	adds	r3, r1, r6
 80171c2:	ebc2 0208 	rsb	r2, r2, r8
 80171c6:	f8cd 9004 	str.w	r9, [sp, #4]
 80171ca:	f8cd c000 	str.w	ip, [sp]
 80171ce:	3101      	adds	r1, #1
 80171d0:	4470      	add	r0, lr
 80171d2:	f7fb ff89 	bl	80130e8 <GUI_DrawGradientV>
 80171d6:	687a      	ldr	r2, [r7, #4]
 80171d8:	b91a      	cbnz	r2, 80171e2 <PROGBAR_DrawSkinFlex+0x11a>
 80171da:	68af      	ldr	r7, [r5, #8]
 80171dc:	68ed      	ldr	r5, [r5, #12]
 80171de:	2001      	movs	r0, #1
 80171e0:	e003      	b.n	80171ea <PROGBAR_DrawSkinFlex+0x122>
 80171e2:	69af      	ldr	r7, [r5, #24]
 80171e4:	69ed      	ldr	r5, [r5, #28]
 80171e6:	2201      	movs	r2, #1
 80171e8:	2000      	movs	r0, #0
 80171ea:	6961      	ldr	r1, [r4, #20]
 80171ec:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80171f0:	69e3      	ldr	r3, [r4, #28]
 80171f2:	6924      	ldr	r4, [r4, #16]
 80171f4:	9501      	str	r5, [sp, #4]
 80171f6:	4431      	add	r1, r6
 80171f8:	9700      	str	r7, [sp, #0]
 80171fa:	3b01      	subs	r3, #1
 80171fc:	ebc2 020e 	rsb	r2, r2, lr
 8017200:	3101      	adds	r1, #1
 8017202:	4420      	add	r0, r4
 8017204:	f7fb ff70 	bl	80130e8 <GUI_DrawGradientV>
 8017208:	e00e      	b.n	8017228 <PROGBAR_DrawSkinFlex+0x160>
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	b963      	cbnz	r3, 8017228 <PROGBAR_DrawSkinFlex+0x160>
 801720e:	4b08      	ldr	r3, [pc, #32]	; (8017230 <PROGBAR_DrawSkinFlex+0x168>)
 8017210:	68bd      	ldr	r5, [r7, #8]
 8017212:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017214:	f7f1 fbf2 	bl	80089fc <GUI_SetColor>
 8017218:	2002      	movs	r0, #2
 801721a:	f7f1 fc67 	bl	8008aec <GUI_SetTextMode>
 801721e:	6962      	ldr	r2, [r4, #20]
 8017220:	6921      	ldr	r1, [r4, #16]
 8017222:	4628      	mov	r0, r5
 8017224:	f7f1 ff82 	bl	800912c <GUI_DispStringAt>
 8017228:	2000      	movs	r0, #0
 801722a:	b003      	add	sp, #12
 801722c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017230:	20000664 	.word	0x20000664

08017234 <RADIO__GetButtonSize>:
 8017234:	b530      	push	{r4, r5, lr}
 8017236:	b08b      	sub	sp, #44	; 0x2c
 8017238:	4605      	mov	r5, r0
 801723a:	f7f1 f865 	bl	8008308 <GUI_ALLOC_LockH>
 801723e:	ab0a      	add	r3, sp, #40	; 0x28
 8017240:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8017242:	f843 0d28 	str.w	r0, [r3, #-40]!
 8017246:	6894      	ldr	r4, [r2, #8]
 8017248:	4618      	mov	r0, r3
 801724a:	f7f1 f86b 	bl	8008324 <GUI_ALLOC_UnlockH>
 801724e:	2319      	movs	r3, #25
 8017250:	9302      	str	r3, [sp, #8]
 8017252:	9501      	str	r5, [sp, #4]
 8017254:	6863      	ldr	r3, [r4, #4]
 8017256:	a801      	add	r0, sp, #4
 8017258:	4798      	blx	r3
 801725a:	b00b      	add	sp, #44	; 0x2c
 801725c:	bd30      	pop	{r4, r5, pc}

0801725e <_Create>:
 801725e:	b530      	push	{r4, r5, lr}
 8017260:	b08b      	sub	sp, #44	; 0x2c
 8017262:	4605      	mov	r5, r0
 8017264:	f7f1 f850 	bl	8008308 <GUI_ALLOC_LockH>
 8017268:	ab0a      	add	r3, sp, #40	; 0x28
 801726a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 801726c:	f843 0d28 	str.w	r0, [r3, #-40]!
 8017270:	4618      	mov	r0, r3
 8017272:	6894      	ldr	r4, [r2, #8]
 8017274:	f7f1 f856 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017278:	a80a      	add	r0, sp, #40	; 0x28
 801727a:	2300      	movs	r3, #0
 801727c:	9302      	str	r3, [sp, #8]
 801727e:	f840 5d24 	str.w	r5, [r0, #-36]!
 8017282:	6863      	ldr	r3, [r4, #4]
 8017284:	4798      	blx	r3
 8017286:	b00b      	add	sp, #44	; 0x2c
 8017288:	bd30      	pop	{r4, r5, pc}

0801728a <_Paint>:
 801728a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728e:	b099      	sub	sp, #100	; 0x64
 8017290:	4605      	mov	r5, r0
 8017292:	f7f1 f839 	bl	8008308 <GUI_ALLOC_LockH>
 8017296:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8017298:	9009      	str	r0, [sp, #36]	; 0x24
 801729a:	689e      	ldr	r6, [r3, #8]
 801729c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 80172a0:	f8d0 8054 	ldr.w	r8, [r0, #84]	; 0x54
 80172a4:	9301      	str	r3, [sp, #4]
 80172a6:	f8b0 7062 	ldrh.w	r7, [r0, #98]	; 0x62
 80172aa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80172ac:	f8d0 9040 	ldr.w	r9, [r0, #64]	; 0x40
 80172b0:	9305      	str	r3, [sp, #20]
 80172b2:	4628      	mov	r0, r5
 80172b4:	f7ff ffbe 	bl	8017234 <RADIO__GetButtonSize>
 80172b8:	1d04      	adds	r4, r0, #4
 80172ba:	a818      	add	r0, sp, #96	; 0x60
 80172bc:	f850 3d3c 	ldr.w	r3, [r0, #-60]!
 80172c0:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 80172c4:	9206      	str	r2, [sp, #24]
 80172c6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80172ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80172cc:	9207      	str	r2, [sp, #28]
 80172ce:	f003 0301 	and.w	r3, r3, #1
 80172d2:	9302      	str	r3, [sp, #8]
 80172d4:	f7f1 f826 	bl	8008324 <GUI_ALLOC_UnlockH>
 80172d8:	a80d      	add	r0, sp, #52	; 0x34
 80172da:	f7f7 fb87 	bl	800e9ec <WM_GetClientRect>
 80172de:	6833      	ldr	r3, [r6, #0]
 80172e0:	4628      	mov	r0, r5
 80172e2:	4798      	blx	r3
 80172e4:	2307      	movs	r3, #7
 80172e6:	9310      	str	r3, [sp, #64]	; 0x40
 80172e8:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80172ec:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80172f0:	950f      	str	r5, [sp, #60]	; 0x3c
 80172f2:	3202      	adds	r2, #2
 80172f4:	3302      	adds	r3, #2
 80172f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80172f8:	9314      	str	r3, [sp, #80]	; 0x50
 80172fa:	4402      	add	r2, r0
 80172fc:	4403      	add	r3, r0
 80172fe:	3a01      	subs	r2, #1
 8017300:	3b01      	subs	r3, #1
 8017302:	4606      	mov	r6, r0
 8017304:	9215      	str	r2, [sp, #84]	; 0x54
 8017306:	9316      	str	r3, [sp, #88]	; 0x58
 8017308:	2500      	movs	r5, #0
 801730a:	9b01      	ldr	r3, [sp, #4]
 801730c:	429d      	cmp	r5, r3
 801730e:	da0a      	bge.n	8017326 <_Paint+0x9c>
 8017310:	9511      	str	r5, [sp, #68]	; 0x44
 8017312:	a80f      	add	r0, sp, #60	; 0x3c
 8017314:	47c0      	blx	r8
 8017316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017318:	443b      	add	r3, r7
 801731a:	9314      	str	r3, [sp, #80]	; 0x50
 801731c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801731e:	443b      	add	r3, r7
 8017320:	9316      	str	r3, [sp, #88]	; 0x58
 8017322:	3501      	adds	r5, #1
 8017324:	e7f1      	b.n	801730a <_Paint+0x80>
 8017326:	a90b      	add	r1, sp, #44	; 0x2c
 8017328:	4648      	mov	r0, r9
 801732a:	f7f1 fa4d 	bl	80087c8 <GUI_GetFontInfo>
 801732e:	4648      	mov	r0, r9
 8017330:	f7f1 fb8e 	bl	8008a50 <GUI_SetFont>
 8017334:	2002      	movs	r0, #2
 8017336:	f7f1 fbd9 	bl	8008aec <GUI_SetTextMode>
 801733a:	f7fb fb67 	bl	8012a0c <GUI_GetFontDistY>
 801733e:	2312      	movs	r3, #18
 8017340:	9310      	str	r3, [sp, #64]	; 0x40
 8017342:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017346:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 801734a:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
 801734e:	3306      	adds	r3, #6
 8017350:	4554      	cmp	r4, sl
 8017352:	441e      	add	r6, r3
 8017354:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8017358:	9613      	str	r6, [sp, #76]	; 0x4c
 801735a:	bfac      	ite	ge
 801735c:	ebca 0404 	rsbge	r4, sl, r4
 8017360:	2400      	movlt	r4, #0
 8017362:	ebca 0505 	rsb	r5, sl, r5
 8017366:	bfa8      	it	ge
 8017368:	2102      	movge	r1, #2
 801736a:	b2ed      	uxtb	r5, r5
 801736c:	bfa8      	it	ge
 801736e:	fb94 f4f1 	sdivge	r4, r4, r1
 8017372:	441c      	add	r4, r3
 8017374:	1b64      	subs	r4, r4, r5
 8017376:	280c      	cmp	r0, #12
 8017378:	9414      	str	r4, [sp, #80]	; 0x50
 801737a:	f04f 0400 	mov.w	r4, #0
 801737e:	bfd4      	ite	le
 8017380:	f04f 0b02 	movle.w	fp, #2
 8017384:	f04f 0b03 	movgt.w	fp, #3
 8017388:	4626      	mov	r6, r4
 801738a:	9403      	str	r4, [sp, #12]
 801738c:	9404      	str	r4, [sp, #16]
 801738e:	9400      	str	r4, [sp, #0]
 8017390:	46a1      	mov	r9, r4
 8017392:	9b01      	ldr	r3, [sp, #4]
 8017394:	4599      	cmp	r9, r3
 8017396:	da3f      	bge.n	8017418 <_Paint+0x18e>
 8017398:	4649      	mov	r1, r9
 801739a:	9805      	ldr	r0, [sp, #20]
 801739c:	f7f9 f9f7 	bl	801078e <GUI_ARRAY_GetpItemLocked>
 80173a0:	900a      	str	r0, [sp, #40]	; 0x28
 80173a2:	2800      	cmp	r0, #0
 80173a4:	d02f      	beq.n	8017406 <_Paint+0x17c>
 80173a6:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 80173aa:	f7f1 ffa4 	bl	80092f6 <GUI_GetStringDistX>
 80173ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80173b0:	4408      	add	r0, r1
 80173b2:	3802      	subs	r0, #2
 80173b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80173b6:	9015      	str	r0, [sp, #84]	; 0x54
 80173b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80173ba:	a80f      	add	r0, sp, #60	; 0x3c
 80173bc:	47c0      	blx	r8
 80173be:	a80a      	add	r0, sp, #40	; 0x28
 80173c0:	f7f0 ffb0 	bl	8008324 <GUI_ALLOC_UnlockH>
 80173c4:	9b02      	ldr	r3, [sp, #8]
 80173c6:	b1f3      	cbz	r3, 8017406 <_Paint+0x17c>
 80173c8:	9b06      	ldr	r3, [sp, #24]
 80173ca:	4599      	cmp	r9, r3
 80173cc:	d001      	beq.n	80173d2 <_Paint+0x148>
 80173ce:	9b07      	ldr	r3, [sp, #28]
 80173d0:	b1cb      	cbz	r3, 8017406 <_Paint+0x17c>
 80173d2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80173d4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80173d6:	1868      	adds	r0, r5, r1
 80173d8:	4558      	cmp	r0, fp
 80173da:	bfb4      	ite	lt
 80173dc:	b2cc      	uxtblt	r4, r1
 80173de:	465c      	movge	r4, fp
 80173e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80173e2:	fa1f fe84 	uxth.w	lr, r4
 80173e6:	ebce 0000 	rsb	r0, lr, r0
 80173ea:	eb01 040a 	add.w	r4, r1, sl
 80173ee:	b203      	sxth	r3, r0
 80173f0:	3c01      	subs	r4, #1
 80173f2:	9304      	str	r3, [sp, #16]
 80173f4:	442c      	add	r4, r5
 80173f6:	b20b      	sxth	r3, r1
 80173f8:	9303      	str	r3, [sp, #12]
 80173fa:	4476      	add	r6, lr
 80173fc:	4474      	add	r4, lr
 80173fe:	2301      	movs	r3, #1
 8017400:	b236      	sxth	r6, r6
 8017402:	b224      	sxth	r4, r4
 8017404:	9300      	str	r3, [sp, #0]
 8017406:	9914      	ldr	r1, [sp, #80]	; 0x50
 8017408:	4439      	add	r1, r7
 801740a:	9114      	str	r1, [sp, #80]	; 0x50
 801740c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801740e:	4439      	add	r1, r7
 8017410:	9116      	str	r1, [sp, #88]	; 0x58
 8017412:	f109 0901 	add.w	r9, r9, #1
 8017416:	e7bc      	b.n	8017392 <_Paint+0x108>
 8017418:	9b00      	ldr	r3, [sp, #0]
 801741a:	9a02      	ldr	r2, [sp, #8]
 801741c:	4213      	tst	r3, r2
 801741e:	d009      	beq.n	8017434 <_Paint+0x1aa>
 8017420:	230a      	movs	r3, #10
 8017422:	9310      	str	r3, [sp, #64]	; 0x40
 8017424:	9b04      	ldr	r3, [sp, #16]
 8017426:	9313      	str	r3, [sp, #76]	; 0x4c
 8017428:	9b03      	ldr	r3, [sp, #12]
 801742a:	9314      	str	r3, [sp, #80]	; 0x50
 801742c:	9615      	str	r6, [sp, #84]	; 0x54
 801742e:	9416      	str	r4, [sp, #88]	; 0x58
 8017430:	a80f      	add	r0, sp, #60	; 0x3c
 8017432:	47c0      	blx	r8
 8017434:	b019      	add	sp, #100	; 0x64
 8017436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801743c <RADIO_DrawSkinFlex>:
 801743c:	b530      	push	{r4, r5, lr}
 801743e:	4604      	mov	r4, r0
 8017440:	b089      	sub	sp, #36	; 0x24
 8017442:	6800      	ldr	r0, [r0, #0]
 8017444:	f7f0 ff60 	bl	8008308 <GUI_ALLOC_LockH>
 8017448:	ab08      	add	r3, sp, #32
 801744a:	f9b0 5060 	ldrsh.w	r5, [r0, #96]	; 0x60
 801744e:	f843 0d10 	str.w	r0, [r3, #-16]!
 8017452:	4618      	mov	r0, r3
 8017454:	f7f0 ff66 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017458:	4b29      	ldr	r3, [pc, #164]	; (8017500 <RADIO_DrawSkinFlex+0xc4>)
 801745a:	68a2      	ldr	r2, [r4, #8]
 801745c:	f103 0114 	add.w	r1, r3, #20
 8017460:	4295      	cmp	r5, r2
 8017462:	bf0c      	ite	eq
 8017464:	461a      	moveq	r2, r3
 8017466:	460a      	movne	r2, r1
 8017468:	6863      	ldr	r3, [r4, #4]
 801746a:	2b0a      	cmp	r3, #10
 801746c:	d028      	beq.n	80174c0 <RADIO_DrawSkinFlex+0x84>
 801746e:	dc0e      	bgt.n	801748e <RADIO_DrawSkinFlex+0x52>
 8017470:	2b07      	cmp	r3, #7
 8017472:	d142      	bne.n	80174fa <RADIO_DrawSkinFlex+0xbe>
 8017474:	68d3      	ldr	r3, [r2, #12]
 8017476:	9302      	str	r3, [sp, #8]
 8017478:	6893      	ldr	r3, [r2, #8]
 801747a:	9301      	str	r3, [sp, #4]
 801747c:	6853      	ldr	r3, [r2, #4]
 801747e:	9300      	str	r3, [sp, #0]
 8017480:	6813      	ldr	r3, [r2, #0]
 8017482:	6961      	ldr	r1, [r4, #20]
 8017484:	6912      	ldr	r2, [r2, #16]
 8017486:	6920      	ldr	r0, [r4, #16]
 8017488:	f7fc ff5a 	bl	8014340 <GUI__FillTrippleArc>
 801748c:	e035      	b.n	80174fa <RADIO_DrawSkinFlex+0xbe>
 801748e:	2b12      	cmp	r3, #18
 8017490:	d003      	beq.n	801749a <RADIO_DrawSkinFlex+0x5e>
 8017492:	2b19      	cmp	r3, #25
 8017494:	d131      	bne.n	80174fa <RADIO_DrawSkinFlex+0xbe>
 8017496:	6910      	ldr	r0, [r2, #16]
 8017498:	e030      	b.n	80174fc <RADIO_DrawSkinFlex+0xc0>
 801749a:	6820      	ldr	r0, [r4, #0]
 801749c:	f7f0 ff34 	bl	8008308 <GUI_ALLOC_LockH>
 80174a0:	ab08      	add	r3, sp, #32
 80174a2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80174a4:	f843 0d08 	str.w	r0, [r3, #-8]!
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f0 ff3b 	bl	8008324 <GUI_ALLOC_UnlockH>
 80174ae:	4628      	mov	r0, r5
 80174b0:	f7f3 fc7e 	bl	800adb0 <LCD_SetColor>
 80174b4:	6962      	ldr	r2, [r4, #20]
 80174b6:	6921      	ldr	r1, [r4, #16]
 80174b8:	6a20      	ldr	r0, [r4, #32]
 80174ba:	f7f1 fe37 	bl	800912c <GUI_DispStringAt>
 80174be:	e01c      	b.n	80174fa <RADIO_DrawSkinFlex+0xbe>
 80174c0:	6820      	ldr	r0, [r4, #0]
 80174c2:	f7f0 ff21 	bl	8008308 <GUI_ALLOC_LockH>
 80174c6:	ab08      	add	r3, sp, #32
 80174c8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80174ca:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7f0 ff28 	bl	8008324 <GUI_ALLOC_UnlockH>
 80174d4:	6923      	ldr	r3, [r4, #16]
 80174d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174da:	6963      	ldr	r3, [r4, #20]
 80174dc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174e0:	69a3      	ldr	r3, [r4, #24]
 80174e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80174e6:	4628      	mov	r0, r5
 80174e8:	69e3      	ldr	r3, [r4, #28]
 80174ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80174ee:	f7f3 fc5f 	bl	800adb0 <LCD_SetColor>
 80174f2:	2100      	movs	r1, #0
 80174f4:	a806      	add	r0, sp, #24
 80174f6:	f7fb ff2d 	bl	8013354 <GUI_DrawFocusRect>
 80174fa:	2000      	movs	r0, #0
 80174fc:	b009      	add	sp, #36	; 0x24
 80174fe:	bd30      	pop	{r4, r5, pc}
 8017500:	200006c0 	.word	0x200006c0

08017504 <SLIDER_GetFlag>:
 8017504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017506:	460d      	mov	r5, r1
 8017508:	4604      	mov	r4, r0
 801750a:	b158      	cbz	r0, 8017524 <SLIDER_GetFlag+0x20>
 801750c:	f7f0 fefc 	bl	8008308 <GUI_ALLOC_LockH>
 8017510:	aa02      	add	r2, sp, #8
 8017512:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8017516:	f842 0d04 	str.w	r0, [r2, #-4]!
 801751a:	4610      	mov	r0, r2
 801751c:	ea05 0403 	and.w	r4, r5, r3
 8017520:	f7f0 ff00 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017524:	4620      	mov	r0, r4
 8017526:	b003      	add	sp, #12
 8017528:	bd30      	pop	{r4, r5, pc}

0801752a <_Create>:
 801752a:	b530      	push	{r4, r5, lr}
 801752c:	b08b      	sub	sp, #44	; 0x2c
 801752e:	4605      	mov	r5, r0
 8017530:	f7f0 feea 	bl	8008308 <GUI_ALLOC_LockH>
 8017534:	ab0a      	add	r3, sp, #40	; 0x28
 8017536:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8017538:	f843 0d28 	str.w	r0, [r3, #-40]!
 801753c:	4618      	mov	r0, r3
 801753e:	f7f0 fef1 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017542:	2300      	movs	r3, #0
 8017544:	9302      	str	r3, [sp, #8]
 8017546:	9501      	str	r5, [sp, #4]
 8017548:	9309      	str	r3, [sp, #36]	; 0x24
 801754a:	a801      	add	r0, sp, #4
 801754c:	47a0      	blx	r4
 801754e:	b00b      	add	sp, #44	; 0x2c
 8017550:	bd30      	pop	{r4, r5, pc}

08017552 <_Paint>:
 8017552:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017556:	b097      	sub	sp, #92	; 0x5c
 8017558:	4606      	mov	r6, r0
 801755a:	f7f0 fed5 	bl	8008308 <GUI_ALLOC_LockH>
 801755e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8017560:	9309      	str	r3, [sp, #36]	; 0x24
 8017562:	f9b0 3060 	ldrsh.w	r3, [r0, #96]	; 0x60
 8017566:	9308      	str	r3, [sp, #32]
 8017568:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801756a:	6d84      	ldr	r4, [r0, #88]	; 0x58
 801756c:	6d47      	ldr	r7, [r0, #84]	; 0x54
 801756e:	9003      	str	r0, [sp, #12]
 8017570:	f3c3 2200 	ubfx	r2, r3, #8, #1
 8017574:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8017576:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
 801757a:	920b      	str	r2, [sp, #44]	; 0x2c
 801757c:	a803      	add	r0, sp, #12
 801757e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8017582:	f003 0301 	and.w	r3, r3, #1
 8017586:	920c      	str	r2, [sp, #48]	; 0x30
 8017588:	9301      	str	r3, [sp, #4]
 801758a:	f7f0 fecb 	bl	8008324 <GUI_ALLOC_UnlockH>
 801758e:	a904      	add	r1, sp, #16
 8017590:	4630      	mov	r0, r6
 8017592:	f7f7 fa1e 	bl	800e9d2 <WM_GetClientRectEx>
 8017596:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801759a:	f9bd c016 	ldrsh.w	ip, [sp, #22]
 801759e:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80175a2:	9a08      	ldr	r2, [sp, #32]
 80175a4:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 80175a8:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80175ac:	42bc      	cmp	r4, r7
 80175ae:	bf14      	ite	ne
 80175b0:	ebc4 0e07 	rsbne	lr, r4, r7
 80175b4:	f04f 0e01 	moveq.w	lr, #1
 80175b8:	f1ba 0f00 	cmp.w	sl, #0
 80175bc:	d002      	beq.n	80175c4 <_Paint+0x72>
 80175be:	ebc1 030c 	rsb	r3, r1, ip
 80175c2:	e001      	b.n	80175c8 <_Paint+0x76>
 80175c4:	ebc0 0309 	rsb	r3, r0, r9
 80175c8:	43d7      	mvns	r7, r2
 80175ca:	443b      	add	r3, r7
 80175cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80175ce:	930a      	str	r3, [sp, #40]	; 0x28
 80175d0:	2f00      	cmp	r7, #0
 80175d2:	da0a      	bge.n	80175ea <_Paint+0x98>
 80175d4:	f10e 0701 	add.w	r7, lr, #1
 80175d8:	f04f 0b05 	mov.w	fp, #5
 80175dc:	fb93 f3fb 	sdiv	r3, r3, fp
 80175e0:	429f      	cmp	r7, r3
 80175e2:	bfca      	itet	gt
 80175e4:	230b      	movgt	r3, #11
 80175e6:	9709      	strle	r7, [sp, #36]	; 0x24
 80175e8:	9309      	strgt	r3, [sp, #36]	; 0x24
 80175ea:	ebc4 0408 	rsb	r4, r4, r8
 80175ee:	f1ba 0f00 	cmp.w	sl, #0
 80175f2:	d008      	beq.n	8017606 <_Paint+0xb4>
 80175f4:	ebc1 030c 	rsb	r3, r1, ip
 80175f8:	3b01      	subs	r3, #1
 80175fa:	1a9b      	subs	r3, r3, r2
 80175fc:	435c      	muls	r4, r3
 80175fe:	fb94 fefe 	sdiv	lr, r4, lr
 8017602:	1c4c      	adds	r4, r1, #1
 8017604:	e00a      	b.n	801761c <_Paint+0xca>
 8017606:	ebc0 0809 	rsb	r8, r0, r9
 801760a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801760e:	ebc2 0808 	rsb	r8, r2, r8
 8017612:	fb04 f408 	mul.w	r4, r4, r8
 8017616:	fb94 fefe 	sdiv	lr, r4, lr
 801761a:	1c44      	adds	r4, r0, #1
 801761c:	4474      	add	r4, lr
 801761e:	ab08      	add	r3, sp, #32
 8017620:	3001      	adds	r0, #1
 8017622:	4422      	add	r2, r4
 8017624:	9315      	str	r3, [sp, #84]	; 0x54
 8017626:	230f      	movs	r3, #15
 8017628:	3101      	adds	r1, #1
 801762a:	930e      	str	r3, [sp, #56]	; 0x38
 801762c:	9011      	str	r0, [sp, #68]	; 0x44
 801762e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
 8017632:	f8ad 0018 	strh.w	r0, [sp, #24]
 8017636:	1e57      	subs	r7, r2, #1
 8017638:	a806      	add	r0, sp, #24
 801763a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801763e:	9314      	str	r3, [sp, #80]	; 0x50
 8017640:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017644:	9112      	str	r1, [sp, #72]	; 0x48
 8017646:	9213      	str	r2, [sp, #76]	; 0x4c
 8017648:	f8ad 101a 	strh.w	r1, [sp, #26]
 801764c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017650:	960d      	str	r6, [sp, #52]	; 0x34
 8017652:	f7f7 fc63 	bl	800ef1c <WM_SetUserClipRect>
 8017656:	a80d      	add	r0, sp, #52	; 0x34
 8017658:	47a8      	blx	r5
 801765a:	2000      	movs	r0, #0
 801765c:	f7f7 fc5e 	bl	800ef1c <WM_SetUserClipRect>
 8017660:	2313      	movs	r3, #19
 8017662:	930e      	str	r3, [sp, #56]	; 0x38
 8017664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017666:	b113      	cbz	r3, 801766e <_Paint+0x11c>
 8017668:	9412      	str	r4, [sp, #72]	; 0x48
 801766a:	9714      	str	r7, [sp, #80]	; 0x50
 801766c:	e001      	b.n	8017672 <_Paint+0x120>
 801766e:	9411      	str	r4, [sp, #68]	; 0x44
 8017670:	9713      	str	r7, [sp, #76]	; 0x4c
 8017672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017674:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801767a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801767e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017680:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017684:	a806      	add	r0, sp, #24
 8017686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017688:	f8ad 301e 	strh.w	r3, [sp, #30]
 801768c:	f7f7 fc46 	bl	800ef1c <WM_SetUserClipRect>
 8017690:	a80d      	add	r0, sp, #52	; 0x34
 8017692:	47a8      	blx	r5
 8017694:	2000      	movs	r0, #0
 8017696:	f7f7 fc41 	bl	800ef1c <WM_SetUserClipRect>
 801769a:	2314      	movs	r3, #20
 801769c:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80176a0:	930e      	str	r3, [sp, #56]	; 0x38
 80176a2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80176a6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80176aa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80176ae:	3001      	adds	r0, #1
 80176b0:	3b01      	subs	r3, #1
 80176b2:	3101      	adds	r1, #1
 80176b4:	3a01      	subs	r2, #1
 80176b6:	9011      	str	r0, [sp, #68]	; 0x44
 80176b8:	f8ad 0018 	strh.w	r0, [sp, #24]
 80176bc:	a806      	add	r0, sp, #24
 80176be:	9314      	str	r3, [sp, #80]	; 0x50
 80176c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80176c4:	9112      	str	r1, [sp, #72]	; 0x48
 80176c6:	9213      	str	r2, [sp, #76]	; 0x4c
 80176c8:	f8ad 101a 	strh.w	r1, [sp, #26]
 80176cc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80176d0:	f7f7 fc24 	bl	800ef1c <WM_SetUserClipRect>
 80176d4:	a80d      	add	r0, sp, #52	; 0x34
 80176d6:	47a8      	blx	r5
 80176d8:	2000      	movs	r0, #0
 80176da:	f7f7 fc1f 	bl	800ef1c <WM_SetUserClipRect>
 80176de:	9b01      	ldr	r3, [sp, #4]
 80176e0:	b1eb      	cbz	r3, 801771e <_Paint+0x1cc>
 80176e2:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80176e6:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80176ea:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80176ee:	9011      	str	r0, [sp, #68]	; 0x44
 80176f0:	230a      	movs	r3, #10
 80176f2:	930e      	str	r3, [sp, #56]	; 0x38
 80176f4:	f8ad 0018 	strh.w	r0, [sp, #24]
 80176f8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80176fc:	9112      	str	r1, [sp, #72]	; 0x48
 80176fe:	a806      	add	r0, sp, #24
 8017700:	9314      	str	r3, [sp, #80]	; 0x50
 8017702:	9213      	str	r2, [sp, #76]	; 0x4c
 8017704:	f8ad 101a 	strh.w	r1, [sp, #26]
 8017708:	f8ad 201c 	strh.w	r2, [sp, #28]
 801770c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017710:	f7f7 fc04 	bl	800ef1c <WM_SetUserClipRect>
 8017714:	a80d      	add	r0, sp, #52	; 0x34
 8017716:	47a8      	blx	r5
 8017718:	2000      	movs	r0, #0
 801771a:	f7f7 fbff 	bl	800ef1c <WM_SetUserClipRect>
 801771e:	b017      	add	sp, #92	; 0x5c
 8017720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017724 <SLIDER_DrawSkinFlex>:
 8017724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017728:	6a03      	ldr	r3, [r0, #32]
 801772a:	4604      	mov	r4, r0
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 81dc 	beq.w	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017732:	4abe      	ldr	r2, [pc, #760]	; (8017a2c <SLIDER_DrawSkinFlex+0x308>)
 8017734:	68dd      	ldr	r5, [r3, #12]
 8017736:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 801773a:	2d00      	cmp	r5, #0
 801773c:	bf14      	ite	ne
 801773e:	4615      	movne	r5, r2
 8017740:	460d      	moveq	r5, r1
 8017742:	6842      	ldr	r2, [r0, #4]
 8017744:	3a0a      	subs	r2, #10
 8017746:	2a0a      	cmp	r2, #10
 8017748:	f200 81cf 	bhi.w	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 801774c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8017750:	01cd01b5 	.word	0x01cd01b5
 8017754:	01cd01cd 	.word	0x01cd01cd
 8017758:	000b01cd 	.word	0x000b01cd
 801775c:	01cd01cd 	.word	0x01cd01cd
 8017760:	007c01cd 	.word	0x007c01cd
 8017764:	0170      	.short	0x0170
 8017766:	6919      	ldr	r1, [r3, #16]
 8017768:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801776a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801776c:	2900      	cmp	r1, #0
 801776e:	d033      	beq.n	80177d8 <SLIDER_DrawSkinFlex+0xb4>
 8017770:	6901      	ldr	r1, [r0, #16]
 8017772:	6986      	ldr	r6, [r0, #24]
 8017774:	6928      	ldr	r0, [r5, #16]
 8017776:	1a76      	subs	r6, r6, r1
 8017778:	1ab2      	subs	r2, r6, r2
 801777a:	1ad6      	subs	r6, r2, r3
 801777c:	2202      	movs	r2, #2
 801777e:	fb96 f2f2 	sdiv	r2, r6, r2
 8017782:	1856      	adds	r6, r2, r1
 8017784:	199f      	adds	r7, r3, r6
 8017786:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 801778a:	f7f1 f937 	bl	80089fc <GUI_SetColor>
 801778e:	4631      	mov	r1, r6
 8017790:	4642      	mov	r2, r8
 8017792:	6960      	ldr	r0, [r4, #20]
 8017794:	f7fb fd1c 	bl	80131d0 <GUI_DrawHLine>
 8017798:	6961      	ldr	r1, [r4, #20]
 801779a:	69e2      	ldr	r2, [r4, #28]
 801779c:	3101      	adds	r1, #1
 801779e:	4630      	mov	r0, r6
 80177a0:	f7fb fd7c 	bl	801329c <GUI_DrawVLine>
 80177a4:	3601      	adds	r6, #1
 80177a6:	6968      	ldr	r0, [r5, #20]
 80177a8:	3f02      	subs	r7, #2
 80177aa:	f7f1 f927 	bl	80089fc <GUI_SetColor>
 80177ae:	463a      	mov	r2, r7
 80177b0:	4631      	mov	r1, r6
 80177b2:	69e0      	ldr	r0, [r4, #28]
 80177b4:	f7fb fd0c 	bl	80131d0 <GUI_DrawHLine>
 80177b8:	6961      	ldr	r1, [r4, #20]
 80177ba:	69e2      	ldr	r2, [r4, #28]
 80177bc:	3101      	adds	r1, #1
 80177be:	4640      	mov	r0, r8
 80177c0:	f7fb fd6c 	bl	801329c <GUI_DrawVLine>
 80177c4:	69a8      	ldr	r0, [r5, #24]
 80177c6:	f7f1 f919 	bl	80089fc <GUI_SetColor>
 80177ca:	69e3      	ldr	r3, [r4, #28]
 80177cc:	6961      	ldr	r1, [r4, #20]
 80177ce:	3b01      	subs	r3, #1
 80177d0:	463a      	mov	r2, r7
 80177d2:	3101      	adds	r1, #1
 80177d4:	4630      	mov	r0, r6
 80177d6:	e034      	b.n	8017842 <SLIDER_DrawSkinFlex+0x11e>
 80177d8:	6940      	ldr	r0, [r0, #20]
 80177da:	69e1      	ldr	r1, [r4, #28]
 80177dc:	1a09      	subs	r1, r1, r0
 80177de:	1a89      	subs	r1, r1, r2
 80177e0:	4402      	add	r2, r0
 80177e2:	3201      	adds	r2, #1
 80177e4:	1ac9      	subs	r1, r1, r3
 80177e6:	2602      	movs	r6, #2
 80177e8:	fb91 f6f6 	sdiv	r6, r1, r6
 80177ec:	4416      	add	r6, r2
 80177ee:	199f      	adds	r7, r3, r6
 80177f0:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 80177f4:	6928      	ldr	r0, [r5, #16]
 80177f6:	f7f1 f901 	bl	80089fc <GUI_SetColor>
 80177fa:	4631      	mov	r1, r6
 80177fc:	4642      	mov	r2, r8
 80177fe:	6920      	ldr	r0, [r4, #16]
 8017800:	f7fb fd4c 	bl	801329c <GUI_DrawVLine>
 8017804:	6921      	ldr	r1, [r4, #16]
 8017806:	69a2      	ldr	r2, [r4, #24]
 8017808:	3101      	adds	r1, #1
 801780a:	4630      	mov	r0, r6
 801780c:	f7fb fce0 	bl	80131d0 <GUI_DrawHLine>
 8017810:	3601      	adds	r6, #1
 8017812:	6968      	ldr	r0, [r5, #20]
 8017814:	3f02      	subs	r7, #2
 8017816:	f7f1 f8f1 	bl	80089fc <GUI_SetColor>
 801781a:	463a      	mov	r2, r7
 801781c:	4631      	mov	r1, r6
 801781e:	69a0      	ldr	r0, [r4, #24]
 8017820:	f7fb fd3c 	bl	801329c <GUI_DrawVLine>
 8017824:	6921      	ldr	r1, [r4, #16]
 8017826:	69a2      	ldr	r2, [r4, #24]
 8017828:	3101      	adds	r1, #1
 801782a:	4640      	mov	r0, r8
 801782c:	f7fb fcd0 	bl	80131d0 <GUI_DrawHLine>
 8017830:	69a8      	ldr	r0, [r5, #24]
 8017832:	f7f1 f8e3 	bl	80089fc <GUI_SetColor>
 8017836:	69a2      	ldr	r2, [r4, #24]
 8017838:	6920      	ldr	r0, [r4, #16]
 801783a:	463b      	mov	r3, r7
 801783c:	3a01      	subs	r2, #1
 801783e:	4631      	mov	r1, r6
 8017840:	3001      	adds	r0, #1
 8017842:	f7fb fd53 	bl	80132ec <GUI_FillRect>
 8017846:	e150      	b.n	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017848:	681e      	ldr	r6, [r3, #0]
 801784a:	6919      	ldr	r1, [r3, #16]
 801784c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801784e:	3601      	adds	r6, #1
 8017850:	1076      	asrs	r6, r6, #1
 8017852:	2900      	cmp	r1, #0
 8017854:	d074      	beq.n	8017940 <SLIDER_DrawSkinFlex+0x21c>
 8017856:	6987      	ldr	r7, [r0, #24]
 8017858:	6828      	ldr	r0, [r5, #0]
 801785a:	1abf      	subs	r7, r7, r2
 801785c:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 8017860:	f7f1 f8cc 	bl	80089fc <GUI_SetColor>
 8017864:	6961      	ldr	r1, [r4, #20]
 8017866:	ebc6 0a08 	rsb	sl, r6, r8
 801786a:	f10a 0901 	add.w	r9, sl, #1
 801786e:	1873      	adds	r3, r6, r1
 8017870:	3b01      	subs	r3, #1
 8017872:	4642      	mov	r2, r8
 8017874:	4648      	mov	r0, r9
 8017876:	f7fb fff3 	bl	8013860 <GUI_DrawLine>
 801787a:	69e1      	ldr	r1, [r4, #28]
 801787c:	1b8b      	subs	r3, r1, r6
 801787e:	3301      	adds	r3, #1
 8017880:	4642      	mov	r2, r8
 8017882:	4648      	mov	r0, r9
 8017884:	f7fb ffec 	bl	8013860 <GUI_DrawLine>
 8017888:	4652      	mov	r2, sl
 801788a:	6921      	ldr	r1, [r4, #16]
 801788c:	6960      	ldr	r0, [r4, #20]
 801788e:	f7fb fc9f 	bl	80131d0 <GUI_DrawHLine>
 8017892:	4652      	mov	r2, sl
 8017894:	6921      	ldr	r1, [r4, #16]
 8017896:	69e0      	ldr	r0, [r4, #28]
 8017898:	f7fb fc9a 	bl	80131d0 <GUI_DrawHLine>
 801789c:	69e2      	ldr	r2, [r4, #28]
 801789e:	6961      	ldr	r1, [r4, #20]
 80178a0:	6920      	ldr	r0, [r4, #16]
 80178a2:	f7fb fcfb 	bl	801329c <GUI_DrawVLine>
 80178a6:	6868      	ldr	r0, [r5, #4]
 80178a8:	f7f1 f8a8 	bl	80089fc <GUI_SetColor>
 80178ac:	6961      	ldr	r1, [r4, #20]
 80178ae:	3f02      	subs	r7, #2
 80178b0:	1873      	adds	r3, r6, r1
 80178b2:	463a      	mov	r2, r7
 80178b4:	3b01      	subs	r3, #1
 80178b6:	3101      	adds	r1, #1
 80178b8:	4648      	mov	r0, r9
 80178ba:	f7fb ffd1 	bl	8013860 <GUI_DrawLine>
 80178be:	69e1      	ldr	r1, [r4, #28]
 80178c0:	1b8b      	subs	r3, r1, r6
 80178c2:	3301      	adds	r3, #1
 80178c4:	463a      	mov	r2, r7
 80178c6:	3901      	subs	r1, #1
 80178c8:	4648      	mov	r0, r9
 80178ca:	f7fb ffc9 	bl	8013860 <GUI_DrawLine>
 80178ce:	6921      	ldr	r1, [r4, #16]
 80178d0:	6960      	ldr	r0, [r4, #20]
 80178d2:	4652      	mov	r2, sl
 80178d4:	3101      	adds	r1, #1
 80178d6:	3001      	adds	r0, #1
 80178d8:	f7fb fc7a 	bl	80131d0 <GUI_DrawHLine>
 80178dc:	6921      	ldr	r1, [r4, #16]
 80178de:	69e0      	ldr	r0, [r4, #28]
 80178e0:	4652      	mov	r2, sl
 80178e2:	3101      	adds	r1, #1
 80178e4:	3801      	subs	r0, #1
 80178e6:	f7fb fc73 	bl	80131d0 <GUI_DrawHLine>
 80178ea:	69e2      	ldr	r2, [r4, #28]
 80178ec:	6961      	ldr	r1, [r4, #20]
 80178ee:	6920      	ldr	r0, [r4, #16]
 80178f0:	3a01      	subs	r2, #1
 80178f2:	3101      	adds	r1, #1
 80178f4:	3001      	adds	r0, #1
 80178f6:	f7fb fcd1 	bl	801329c <GUI_DrawVLine>
 80178fa:	68ea      	ldr	r2, [r5, #12]
 80178fc:	69e3      	ldr	r3, [r4, #28]
 80178fe:	6961      	ldr	r1, [r4, #20]
 8017900:	6920      	ldr	r0, [r4, #16]
 8017902:	9201      	str	r2, [sp, #4]
 8017904:	68aa      	ldr	r2, [r5, #8]
 8017906:	9200      	str	r2, [sp, #0]
 8017908:	3b02      	subs	r3, #2
 801790a:	464a      	mov	r2, r9
 801790c:	3102      	adds	r1, #2
 801790e:	3002      	adds	r0, #2
 8017910:	f7fb fc24 	bl	801315c <GUI_DrawGradientH>
 8017914:	68e8      	ldr	r0, [r5, #12]
 8017916:	f7f1 f871 	bl	80089fc <GUI_SetColor>
 801791a:	2502      	movs	r5, #2
 801791c:	1e77      	subs	r7, r6, #1
 801791e:	42bd      	cmp	r5, r7
 8017920:	f280 80e3 	bge.w	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017924:	69e2      	ldr	r2, [r4, #28]
 8017926:	6961      	ldr	r1, [r4, #20]
 8017928:	1b92      	subs	r2, r2, r6
 801792a:	4431      	add	r1, r6
 801792c:	442a      	add	r2, r5
 801792e:	1b49      	subs	r1, r1, r5
 8017930:	ebc5 0008 	rsb	r0, r5, r8
 8017934:	3a01      	subs	r2, #1
 8017936:	3101      	adds	r1, #1
 8017938:	f7fb fcb0 	bl	801329c <GUI_DrawVLine>
 801793c:	3501      	adds	r5, #1
 801793e:	e7ee      	b.n	801791e <SLIDER_DrawSkinFlex+0x1fa>
 8017940:	6947      	ldr	r7, [r0, #20]
 8017942:	6828      	ldr	r0, [r5, #0]
 8017944:	4417      	add	r7, r2
 8017946:	f107 0801 	add.w	r8, r7, #1
 801794a:	f7f1 f857 	bl	80089fc <GUI_SetColor>
 801794e:	6922      	ldr	r2, [r4, #16]
 8017950:	eb06 0a08 	add.w	sl, r6, r8
 8017954:	f10a 39ff 	add.w	r9, sl, #4294967295	; 0xffffffff
 8017958:	18b0      	adds	r0, r6, r2
 801795a:	464b      	mov	r3, r9
 801795c:	4641      	mov	r1, r8
 801795e:	3801      	subs	r0, #1
 8017960:	f7fb ff7e 	bl	8013860 <GUI_DrawLine>
 8017964:	69a2      	ldr	r2, [r4, #24]
 8017966:	1b90      	subs	r0, r2, r6
 8017968:	464b      	mov	r3, r9
 801796a:	4641      	mov	r1, r8
 801796c:	3001      	adds	r0, #1
 801796e:	f7fb ff77 	bl	8013860 <GUI_DrawLine>
 8017972:	69e2      	ldr	r2, [r4, #28]
 8017974:	6920      	ldr	r0, [r4, #16]
 8017976:	4651      	mov	r1, sl
 8017978:	f7fb fc90 	bl	801329c <GUI_DrawVLine>
 801797c:	69e2      	ldr	r2, [r4, #28]
 801797e:	69a0      	ldr	r0, [r4, #24]
 8017980:	4651      	mov	r1, sl
 8017982:	f7fb fc8b 	bl	801329c <GUI_DrawVLine>
 8017986:	69a2      	ldr	r2, [r4, #24]
 8017988:	6921      	ldr	r1, [r4, #16]
 801798a:	69e0      	ldr	r0, [r4, #28]
 801798c:	3a01      	subs	r2, #1
 801798e:	3101      	adds	r1, #1
 8017990:	f7fb fc1e 	bl	80131d0 <GUI_DrawHLine>
 8017994:	6868      	ldr	r0, [r5, #4]
 8017996:	f7f1 f831 	bl	80089fc <GUI_SetColor>
 801799a:	6922      	ldr	r2, [r4, #16]
 801799c:	3702      	adds	r7, #2
 801799e:	18b0      	adds	r0, r6, r2
 80179a0:	4639      	mov	r1, r7
 80179a2:	464b      	mov	r3, r9
 80179a4:	3201      	adds	r2, #1
 80179a6:	3801      	subs	r0, #1
 80179a8:	f7fb ff5a 	bl	8013860 <GUI_DrawLine>
 80179ac:	69a2      	ldr	r2, [r4, #24]
 80179ae:	1b90      	subs	r0, r2, r6
 80179b0:	464b      	mov	r3, r9
 80179b2:	4639      	mov	r1, r7
 80179b4:	3a01      	subs	r2, #1
 80179b6:	3001      	adds	r0, #1
 80179b8:	f7fb ff52 	bl	8013860 <GUI_DrawLine>
 80179bc:	69e2      	ldr	r2, [r4, #28]
 80179be:	6920      	ldr	r0, [r4, #16]
 80179c0:	3a01      	subs	r2, #1
 80179c2:	4651      	mov	r1, sl
 80179c4:	3001      	adds	r0, #1
 80179c6:	f7fb fc69 	bl	801329c <GUI_DrawVLine>
 80179ca:	69e2      	ldr	r2, [r4, #28]
 80179cc:	69a0      	ldr	r0, [r4, #24]
 80179ce:	3a01      	subs	r2, #1
 80179d0:	4651      	mov	r1, sl
 80179d2:	3801      	subs	r0, #1
 80179d4:	f7fb fc62 	bl	801329c <GUI_DrawVLine>
 80179d8:	69a2      	ldr	r2, [r4, #24]
 80179da:	6921      	ldr	r1, [r4, #16]
 80179dc:	69e0      	ldr	r0, [r4, #28]
 80179de:	3a02      	subs	r2, #2
 80179e0:	3102      	adds	r1, #2
 80179e2:	3801      	subs	r0, #1
 80179e4:	f7fb fbf4 	bl	80131d0 <GUI_DrawHLine>
 80179e8:	68e9      	ldr	r1, [r5, #12]
 80179ea:	69e3      	ldr	r3, [r4, #28]
 80179ec:	69a2      	ldr	r2, [r4, #24]
 80179ee:	6920      	ldr	r0, [r4, #16]
 80179f0:	9101      	str	r1, [sp, #4]
 80179f2:	68a9      	ldr	r1, [r5, #8]
 80179f4:	9100      	str	r1, [sp, #0]
 80179f6:	3b02      	subs	r3, #2
 80179f8:	3a02      	subs	r2, #2
 80179fa:	4649      	mov	r1, r9
 80179fc:	3002      	adds	r0, #2
 80179fe:	f7fb fb73 	bl	80130e8 <GUI_DrawGradientV>
 8017a02:	68a8      	ldr	r0, [r5, #8]
 8017a04:	f7f0 fffa 	bl	80089fc <GUI_SetColor>
 8017a08:	2502      	movs	r5, #2
 8017a0a:	1e77      	subs	r7, r6, #1
 8017a0c:	42bd      	cmp	r5, r7
 8017a0e:	da6c      	bge.n	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017a10:	69a2      	ldr	r2, [r4, #24]
 8017a12:	6921      	ldr	r1, [r4, #16]
 8017a14:	1b92      	subs	r2, r2, r6
 8017a16:	4431      	add	r1, r6
 8017a18:	442a      	add	r2, r5
 8017a1a:	1b49      	subs	r1, r1, r5
 8017a1c:	eb08 0005 	add.w	r0, r8, r5
 8017a20:	3a01      	subs	r2, #1
 8017a22:	3101      	adds	r1, #1
 8017a24:	f7fb fbd4 	bl	80131d0 <GUI_DrawHLine>
 8017a28:	3501      	adds	r5, #1
 8017a2a:	e7ef      	b.n	8017a0c <SLIDER_DrawSkinFlex+0x2e8>
 8017a2c:	20000710 	.word	0x20000710
 8017a30:	691f      	ldr	r7, [r3, #16]
 8017a32:	69e8      	ldr	r0, [r5, #28]
 8017a34:	b317      	cbz	r7, 8017a7c <SLIDER_DrawSkinFlex+0x358>
 8017a36:	f7f0 ffe1 	bl	80089fc <GUI_SetColor>
 8017a3a:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8017a3e:	f04f 0800 	mov.w	r8, #0
 8017a42:	f04f 0a02 	mov.w	sl, #2
 8017a46:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8017a4a:	45b8      	cmp	r8, r7
 8017a4c:	da4d      	bge.n	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017a4e:	6963      	ldr	r3, [r4, #20]
 8017a50:	69a2      	ldr	r2, [r4, #24]
 8017a52:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8017a54:	f8d9 0000 	ldr.w	r0, [r9]
 8017a58:	fb90 f0fa 	sdiv	r0, r0, sl
 8017a5c:	4418      	add	r0, r3
 8017a5e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017a62:	1a51      	subs	r1, r2, r1
 8017a64:	fb03 f608 	mul.w	r6, r3, r8
 8017a68:	3101      	adds	r1, #1
 8017a6a:	1e7b      	subs	r3, r7, #1
 8017a6c:	fb96 f3f3 	sdiv	r3, r6, r3
 8017a70:	4418      	add	r0, r3
 8017a72:	f7fb fbad 	bl	80131d0 <GUI_DrawHLine>
 8017a76:	f108 0801 	add.w	r8, r8, #1
 8017a7a:	e7e4      	b.n	8017a46 <SLIDER_DrawSkinFlex+0x322>
 8017a7c:	f7f0 ffbe 	bl	80089fc <GUI_SetColor>
 8017a80:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8017a84:	f04f 0902 	mov.w	r9, #2
 8017a88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017a8c:	429f      	cmp	r7, r3
 8017a8e:	da2c      	bge.n	8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017a90:	f8d8 0000 	ldr.w	r0, [r8]
 8017a94:	fb90 f6f9 	sdiv	r6, r0, r9
 8017a98:	6920      	ldr	r0, [r4, #16]
 8017a9a:	6961      	ldr	r1, [r4, #20]
 8017a9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8017a9e:	4430      	add	r0, r6
 8017aa0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8017aa4:	440a      	add	r2, r1
 8017aa6:	437e      	muls	r6, r7
 8017aa8:	3b01      	subs	r3, #1
 8017aaa:	3a01      	subs	r2, #1
 8017aac:	fb96 f3f3 	sdiv	r3, r6, r3
 8017ab0:	4418      	add	r0, r3
 8017ab2:	f7fb fbf3 	bl	801329c <GUI_DrawVLine>
 8017ab6:	3701      	adds	r7, #1
 8017ab8:	e7e6      	b.n	8017a88 <SLIDER_DrawSkinFlex+0x364>
 8017aba:	2101      	movs	r1, #1
 8017abc:	6800      	ldr	r0, [r0, #0]
 8017abe:	f7ff fd21 	bl	8017504 <SLIDER_GetFlag>
 8017ac2:	b190      	cbz	r0, 8017aea <SLIDER_DrawSkinFlex+0x3c6>
 8017ac4:	6a28      	ldr	r0, [r5, #32]
 8017ac6:	f7f0 ff99 	bl	80089fc <GUI_SetColor>
 8017aca:	6923      	ldr	r3, [r4, #16]
 8017acc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017ad0:	6963      	ldr	r3, [r4, #20]
 8017ad2:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017ad6:	69a3      	ldr	r3, [r4, #24]
 8017ad8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017adc:	2100      	movs	r1, #0
 8017ade:	69e3      	ldr	r3, [r4, #28]
 8017ae0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017ae4:	a802      	add	r0, sp, #8
 8017ae6:	f7fb fc35 	bl	8013354 <GUI_DrawFocusRect>
 8017aea:	2000      	movs	r0, #0
 8017aec:	b004      	add	sp, #16
 8017aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017af2:	bf00      	nop

08017af4 <SPINBOX__DrawBk>:
 8017af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017af8:	b089      	sub	sp, #36	; 0x24
 8017afa:	460f      	mov	r7, r1
 8017afc:	4680      	mov	r8, r0
 8017afe:	f7f0 fc03 	bl	8008308 <GUI_ALLOC_LockH>
 8017b02:	4602      	mov	r2, r0
 8017b04:	a808      	add	r0, sp, #32
 8017b06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8017b08:	f8d2 9098 	ldr.w	r9, [r2, #152]	; 0x98
 8017b0c:	f840 2d1c 	str.w	r2, [r0, #-28]!
 8017b10:	681d      	ldr	r5, [r3, #0]
 8017b12:	f892 608c 	ldrb.w	r6, [r2, #140]	; 0x8c
 8017b16:	f8b2 408a 	ldrh.w	r4, [r2, #138]	; 0x8a
 8017b1a:	f7f0 fc03 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017b1e:	a902      	add	r1, sp, #8
 8017b20:	4648      	mov	r0, r9
 8017b22:	f7f7 f8ad 	bl	800ec80 <WM_GetWindowRectEx>
 8017b26:	a906      	add	r1, sp, #24
 8017b28:	4640      	mov	r0, r8
 8017b2a:	f7f7 f8a9 	bl	800ec80 <WM_GetWindowRectEx>
 8017b2e:	4638      	mov	r0, r7
 8017b30:	f7f0 ff64 	bl	80089fc <GUI_SetColor>
 8017b34:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017b38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017b3c:	b229      	sxth	r1, r5
 8017b3e:	b2ad      	uxth	r5, r5
 8017b40:	442a      	add	r2, r5
 8017b42:	1ad2      	subs	r2, r2, r3
 8017b44:	b292      	uxth	r2, r2
 8017b46:	2e01      	cmp	r6, #1
 8017b48:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017b4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b50:	d007      	beq.n	8017b62 <SPINBOX__DrawBk+0x6e>
 8017b52:	2e02      	cmp	r6, #2
 8017b54:	d10c      	bne.n	8017b70 <SPINBOX__DrawBk+0x7c>
 8017b56:	1c63      	adds	r3, r4, #1
 8017b58:	b29c      	uxth	r4, r3
 8017b5a:	192b      	adds	r3, r5, r4
 8017b5c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017b60:	e003      	b.n	8017b6a <SPINBOX__DrawBk+0x76>
 8017b62:	1963      	adds	r3, r4, r5
 8017b64:	f8ad 3010 	strh.w	r3, [sp, #16]
 8017b68:	3401      	adds	r4, #1
 8017b6a:	4414      	add	r4, r2
 8017b6c:	f8ad 4014 	strh.w	r4, [sp, #20]
 8017b70:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017b74:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017b78:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017b7c:	3b01      	subs	r3, #1
 8017b7e:	1a9b      	subs	r3, r3, r2
 8017b80:	b21b      	sxth	r3, r3
 8017b82:	4299      	cmp	r1, r3
 8017b84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b88:	dc02      	bgt.n	8017b90 <SPINBOX__DrawBk+0x9c>
 8017b8a:	a804      	add	r0, sp, #16
 8017b8c:	f7fb fbd8 	bl	8013340 <GUI_FillRectEx>
 8017b90:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8017b94:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8017b98:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017b9c:	3101      	adds	r1, #1
 8017b9e:	1ac9      	subs	r1, r1, r3
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	1b5b      	subs	r3, r3, r5
 8017ba4:	b209      	sxth	r1, r1
 8017ba6:	b21b      	sxth	r3, r3
 8017ba8:	4299      	cmp	r1, r3
 8017baa:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017bae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bb2:	dc02      	bgt.n	8017bba <SPINBOX__DrawBk+0xc6>
 8017bb4:	a804      	add	r0, sp, #16
 8017bb6:	f7fb fbc3 	bl	8013340 <GUI_FillRectEx>
 8017bba:	b009      	add	sp, #36	; 0x24
 8017bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017bc0 <SPINBOX__GetButtonRect>:
 8017bc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bc4:	460c      	mov	r4, r1
 8017bc6:	4690      	mov	r8, r2
 8017bc8:	f7f0 fb9e 	bl	8008308 <GUI_ALLOC_LockH>
 8017bcc:	4601      	mov	r1, r0
 8017bce:	a802      	add	r0, sp, #8
 8017bd0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8017bd2:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 8017bd6:	681d      	ldr	r5, [r3, #0]
 8017bd8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017bdc:	f891 a08c 	ldrb.w	sl, [r1, #140]	; 0x8c
 8017be0:	884f      	ldrh	r7, [r1, #2]
 8017be2:	f840 1d04 	str.w	r1, [r0, #-4]!
 8017be6:	1af6      	subs	r6, r6, r3
 8017be8:	88cb      	ldrh	r3, [r1, #6]
 8017bea:	f8b1 908a 	ldrh.w	r9, [r1, #138]	; 0x8a
 8017bee:	1bdf      	subs	r7, r3, r7
 8017bf0:	f7f0 fb98 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017bf4:	f1ba 0f01 	cmp.w	sl, #1
 8017bf8:	b2bf      	uxth	r7, r7
 8017bfa:	d004      	beq.n	8017c06 <SPINBOX__GetButtonRect+0x46>
 8017bfc:	d328      	bcc.n	8017c50 <SPINBOX__GetButtonRect+0x90>
 8017bfe:	f1ba 0f02 	cmp.w	sl, #2
 8017c02:	d010      	beq.n	8017c26 <SPINBOX__GetButtonRect+0x66>
 8017c04:	e037      	b.n	8017c76 <SPINBOX__GetButtonRect+0xb6>
 8017c06:	b22a      	sxth	r2, r5
 8017c08:	b2ad      	uxth	r5, r5
 8017c0a:	eb09 0305 	add.w	r3, r9, r5
 8017c0e:	80a3      	strh	r3, [r4, #4]
 8017c10:	8022      	strh	r2, [r4, #0]
 8017c12:	087b      	lsrs	r3, r7, #1
 8017c14:	f1b8 0f00 	cmp.w	r8, #0
 8017c18:	d101      	bne.n	8017c1e <SPINBOX__GetButtonRect+0x5e>
 8017c1a:	8062      	strh	r2, [r4, #2]
 8017c1c:	e025      	b.n	8017c6a <SPINBOX__GetButtonRect+0xaa>
 8017c1e:	3301      	adds	r3, #1
 8017c20:	8063      	strh	r3, [r4, #2]
 8017c22:	1b7d      	subs	r5, r7, r5
 8017c24:	e026      	b.n	8017c74 <SPINBOX__GetButtonRect+0xb4>
 8017c26:	b2a9      	uxth	r1, r5
 8017c28:	b22b      	sxth	r3, r5
 8017c2a:	1a7d      	subs	r5, r7, r1
 8017c2c:	8063      	strh	r3, [r4, #2]
 8017c2e:	80e5      	strh	r5, [r4, #6]
 8017c30:	f1b8 0f00 	cmp.w	r8, #0
 8017c34:	d107      	bne.n	8017c46 <SPINBOX__GetButtonRect+0x86>
 8017c36:	b2b6      	uxth	r6, r6
 8017c38:	ebc9 0506 	rsb	r5, r9, r6
 8017c3c:	1a6d      	subs	r5, r5, r1
 8017c3e:	1a76      	subs	r6, r6, r1
 8017c40:	8025      	strh	r5, [r4, #0]
 8017c42:	80a6      	strh	r6, [r4, #4]
 8017c44:	e017      	b.n	8017c76 <SPINBOX__GetButtonRect+0xb6>
 8017c46:	eb09 0501 	add.w	r5, r9, r1
 8017c4a:	8023      	strh	r3, [r4, #0]
 8017c4c:	80a5      	strh	r5, [r4, #4]
 8017c4e:	e012      	b.n	8017c76 <SPINBOX__GetButtonRect+0xb6>
 8017c50:	b2b6      	uxth	r6, r6
 8017c52:	b2aa      	uxth	r2, r5
 8017c54:	ebc9 0306 	rsb	r3, r9, r6
 8017c58:	1a9b      	subs	r3, r3, r2
 8017c5a:	1ab6      	subs	r6, r6, r2
 8017c5c:	8023      	strh	r3, [r4, #0]
 8017c5e:	80a6      	strh	r6, [r4, #4]
 8017c60:	087b      	lsrs	r3, r7, #1
 8017c62:	f1b8 0f00 	cmp.w	r8, #0
 8017c66:	d102      	bne.n	8017c6e <SPINBOX__GetButtonRect+0xae>
 8017c68:	8065      	strh	r5, [r4, #2]
 8017c6a:	80e3      	strh	r3, [r4, #6]
 8017c6c:	e003      	b.n	8017c76 <SPINBOX__GetButtonRect+0xb6>
 8017c6e:	3301      	adds	r3, #1
 8017c70:	8063      	strh	r3, [r4, #2]
 8017c72:	1abd      	subs	r5, r7, r2
 8017c74:	80e5      	strh	r5, [r4, #6]
 8017c76:	b002      	add	sp, #8
 8017c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017c7c <SPINBOX__GetButtonRectEx>:
 8017c7c:	b513      	push	{r0, r1, r4, lr}
 8017c7e:	2300      	movs	r3, #0
 8017c80:	9300      	str	r3, [sp, #0]
 8017c82:	9301      	str	r3, [sp, #4]
 8017c84:	6a0b      	ldr	r3, [r1, #32]
 8017c86:	460c      	mov	r4, r1
 8017c88:	781a      	ldrb	r2, [r3, #0]
 8017c8a:	4669      	mov	r1, sp
 8017c8c:	f7ff ff98 	bl	8017bc0 <SPINBOX__GetButtonRect>
 8017c90:	f9bd 3000 	ldrsh.w	r3, [sp]
 8017c94:	6123      	str	r3, [r4, #16]
 8017c96:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8017c9a:	6163      	str	r3, [r4, #20]
 8017c9c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017ca0:	61a3      	str	r3, [r4, #24]
 8017ca2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8017ca6:	61e3      	str	r3, [r4, #28]
 8017ca8:	b002      	add	sp, #8
 8017caa:	bd10      	pop	{r4, pc}

08017cac <_Create>:
 8017cac:	b530      	push	{r4, r5, lr}
 8017cae:	b08b      	sub	sp, #44	; 0x2c
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	2224      	movs	r2, #36	; 0x24
 8017cb6:	a801      	add	r0, sp, #4
 8017cb8:	f000 fafb 	bl	80182b2 <memset>
 8017cbc:	4620      	mov	r0, r4
 8017cbe:	f7f0 fb23 	bl	8008308 <GUI_ALLOC_LockH>
 8017cc2:	ab0a      	add	r3, sp, #40	; 0x28
 8017cc4:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8017cc8:	f843 0d28 	str.w	r0, [r3, #-40]!
 8017ccc:	6895      	ldr	r5, [r2, #8]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7f0 fb28 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	9302      	str	r3, [sp, #8]
 8017cd8:	9401      	str	r4, [sp, #4]
 8017cda:	682b      	ldr	r3, [r5, #0]
 8017cdc:	a801      	add	r0, sp, #4
 8017cde:	4798      	blx	r3
 8017ce0:	b00b      	add	sp, #44	; 0x2c
 8017ce2:	bd30      	pop	{r4, r5, pc}

08017ce4 <_Paint>:
 8017ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ce8:	b08c      	sub	sp, #48	; 0x30
 8017cea:	4604      	mov	r4, r0
 8017cec:	f7f0 fb0c 	bl	8008308 <GUI_ALLOC_LockH>
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	a80c      	add	r0, sp, #48	; 0x30
 8017cf4:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8017cf8:	f840 3d28 	str.w	r3, [r0, #-40]!
 8017cfc:	f893 70a3 	ldrb.w	r7, [r3, #163]	; 0xa3
 8017d00:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 8017d04:	f893 908c 	ldrb.w	r9, [r3, #140]	; 0x8c
 8017d08:	f8b3 608a 	ldrh.w	r6, [r3, #138]	; 0x8a
 8017d0c:	f7f0 fb0a 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017d10:	4620      	mov	r0, r4
 8017d12:	9403      	str	r4, [sp, #12]
 8017d14:	f7f7 fa9c 	bl	800f250 <WM__IsEnabled>
 8017d18:	b908      	cbnz	r0, 8017d1e <_Paint+0x3a>
 8017d1a:	2303      	movs	r3, #3
 8017d1c:	e00d      	b.n	8017d3a <_Paint+0x56>
 8017d1e:	4620      	mov	r0, r4
 8017d20:	f7f6 ffc2 	bl	800eca8 <WM_HasFocus>
 8017d24:	4682      	mov	sl, r0
 8017d26:	4640      	mov	r0, r8
 8017d28:	f7f6 ffbe 	bl	800eca8 <WM_HasFocus>
 8017d2c:	f1ba 0f00 	cmp.w	sl, #0
 8017d30:	d100      	bne.n	8017d34 <_Paint+0x50>
 8017d32:	b108      	cbz	r0, 8017d38 <_Paint+0x54>
 8017d34:	2301      	movs	r3, #1
 8017d36:	e000      	b.n	8017d3a <_Paint+0x56>
 8017d38:	2302      	movs	r3, #2
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	9305      	str	r3, [sp, #20]
 8017d3e:	f7fd fde3 	bl	8015908 <WM_GetWindowSizeX>
 8017d42:	4680      	mov	r8, r0
 8017d44:	4620      	mov	r0, r4
 8017d46:	f7fd fdfb 	bl	8015940 <WM_GetWindowSizeY>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	9307      	str	r3, [sp, #28]
 8017d4e:	9308      	str	r3, [sp, #32]
 8017d50:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8017d54:	9309      	str	r3, [sp, #36]	; 0x24
 8017d56:	3801      	subs	r0, #1
 8017d58:	230b      	movs	r3, #11
 8017d5a:	900a      	str	r0, [sp, #40]	; 0x28
 8017d5c:	9304      	str	r3, [sp, #16]
 8017d5e:	a803      	add	r0, sp, #12
 8017d60:	47a8      	blx	r5
 8017d62:	f1b9 0f01 	cmp.w	r9, #1
 8017d66:	d00b      	beq.n	8017d80 <_Paint+0x9c>
 8017d68:	d306      	bcc.n	8017d78 <_Paint+0x94>
 8017d6a:	f1b9 0f02 	cmp.w	r9, #2
 8017d6e:	d10a      	bne.n	8017d86 <_Paint+0xa2>
 8017d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d72:	1b9b      	subs	r3, r3, r6
 8017d74:	9309      	str	r3, [sp, #36]	; 0x24
 8017d76:	e003      	b.n	8017d80 <_Paint+0x9c>
 8017d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d7a:	1b9e      	subs	r6, r3, r6
 8017d7c:	9609      	str	r6, [sp, #36]	; 0x24
 8017d7e:	e002      	b.n	8017d86 <_Paint+0xa2>
 8017d80:	9b07      	ldr	r3, [sp, #28]
 8017d82:	441e      	add	r6, r3
 8017d84:	9607      	str	r6, [sp, #28]
 8017d86:	2305      	movs	r3, #5
 8017d88:	9304      	str	r3, [sp, #16]
 8017d8a:	a803      	add	r0, sp, #12
 8017d8c:	47a8      	blx	r5
 8017d8e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017d92:	f1b8 0f03 	cmp.w	r8, #3
 8017d96:	d003      	beq.n	8017da0 <_Paint+0xbc>
 8017d98:	07fa      	lsls	r2, r7, #31
 8017d9a:	bf44      	itt	mi
 8017d9c:	2300      	movmi	r3, #0
 8017d9e:	9305      	strmi	r3, [sp, #20]
 8017da0:	ab0c      	add	r3, sp, #48	; 0x30
 8017da2:	2600      	movs	r6, #0
 8017da4:	f803 6d29 	strb.w	r6, [r3, #-41]!
 8017da8:	a903      	add	r1, sp, #12
 8017daa:	4620      	mov	r0, r4
 8017dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dae:	f7ff ff65 	bl	8017c7c <SPINBOX__GetButtonRectEx>
 8017db2:	2309      	movs	r3, #9
 8017db4:	9304      	str	r3, [sp, #16]
 8017db6:	a803      	add	r0, sp, #12
 8017db8:	47a8      	blx	r5
 8017dba:	2304      	movs	r3, #4
 8017dbc:	9304      	str	r3, [sp, #16]
 8017dbe:	a803      	add	r0, sp, #12
 8017dc0:	47a8      	blx	r5
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	f1b8 0f03 	cmp.w	r8, #3
 8017dc8:	f88d 3007 	strb.w	r3, [sp, #7]
 8017dcc:	d004      	beq.n	8017dd8 <_Paint+0xf4>
 8017dce:	07bb      	lsls	r3, r7, #30
 8017dd0:	bf56      	itet	pl
 8017dd2:	2302      	movpl	r3, #2
 8017dd4:	9605      	strmi	r6, [sp, #20]
 8017dd6:	9305      	strpl	r3, [sp, #20]
 8017dd8:	a903      	add	r1, sp, #12
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f7ff ff4e 	bl	8017c7c <SPINBOX__GetButtonRectEx>
 8017de0:	2308      	movs	r3, #8
 8017de2:	9304      	str	r3, [sp, #16]
 8017de4:	a803      	add	r0, sp, #12
 8017de6:	47a8      	blx	r5
 8017de8:	2303      	movs	r3, #3
 8017dea:	9304      	str	r3, [sp, #16]
 8017dec:	a803      	add	r0, sp, #12
 8017dee:	47a8      	blx	r5
 8017df0:	b00c      	add	sp, #48	; 0x30
 8017df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017df6 <SPINBOX__ApplyProps>:
 8017df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017df8:	460d      	mov	r5, r1
 8017dfa:	f7f0 fa85 	bl	8008308 <GUI_ALLOC_LockH>
 8017dfe:	ab02      	add	r3, sp, #8
 8017e00:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8017e04:	f843 0d04 	str.w	r0, [r3, #-4]!
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f7f0 fa8b 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017e0e:	68eb      	ldr	r3, [r5, #12]
 8017e10:	4620      	mov	r0, r4
 8017e12:	69da      	ldr	r2, [r3, #28]
 8017e14:	2100      	movs	r1, #0
 8017e16:	f000 f9cd 	bl	80181b4 <EDIT_SetBkColor>
 8017e1a:	68eb      	ldr	r3, [r5, #12]
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	6a1a      	ldr	r2, [r3, #32]
 8017e20:	2100      	movs	r1, #0
 8017e22:	f000 f9e2 	bl	80181ea <EDIT_SetTextColor>
 8017e26:	68ab      	ldr	r3, [r5, #8]
 8017e28:	4620      	mov	r0, r4
 8017e2a:	69da      	ldr	r2, [r3, #28]
 8017e2c:	2101      	movs	r1, #1
 8017e2e:	f000 f9c1 	bl	80181b4 <EDIT_SetBkColor>
 8017e32:	68ab      	ldr	r3, [r5, #8]
 8017e34:	2101      	movs	r1, #1
 8017e36:	6a1a      	ldr	r2, [r3, #32]
 8017e38:	4620      	mov	r0, r4
 8017e3a:	f000 f9d6 	bl	80181ea <EDIT_SetTextColor>
 8017e3e:	b003      	add	sp, #12
 8017e40:	bd30      	pop	{r4, r5, pc}
	...

08017e44 <_DrawButton>:
 8017e44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017e46:	6882      	ldr	r2, [r0, #8]
 8017e48:	4b2a      	ldr	r3, [pc, #168]	; (8017ef4 <_DrawButton+0xb0>)
 8017e4a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017e4e:	4604      	mov	r4, r0
 8017e50:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8017e52:	f7f0 fdd3 	bl	80089fc <GUI_SetColor>
 8017e56:	6820      	ldr	r0, [r4, #0]
 8017e58:	f7f0 fa56 	bl	8008308 <GUI_ALLOC_LockH>
 8017e5c:	6a23      	ldr	r3, [r4, #32]
 8017e5e:	9003      	str	r0, [sp, #12]
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	b11b      	cbz	r3, 8017e6c <_DrawButton+0x28>
 8017e64:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8017e68:	2b02      	cmp	r3, #2
 8017e6a:	d104      	bne.n	8017e76 <_DrawButton+0x32>
 8017e6c:	69a2      	ldr	r2, [r4, #24]
 8017e6e:	6921      	ldr	r1, [r4, #16]
 8017e70:	6960      	ldr	r0, [r4, #20]
 8017e72:	f7fb f9ad 	bl	80131d0 <GUI_DrawHLine>
 8017e76:	69a2      	ldr	r2, [r4, #24]
 8017e78:	6921      	ldr	r1, [r4, #16]
 8017e7a:	69e0      	ldr	r0, [r4, #28]
 8017e7c:	f7fb f9a8 	bl	80131d0 <GUI_DrawHLine>
 8017e80:	69e2      	ldr	r2, [r4, #28]
 8017e82:	6961      	ldr	r1, [r4, #20]
 8017e84:	6920      	ldr	r0, [r4, #16]
 8017e86:	f7fb fa09 	bl	801329c <GUI_DrawVLine>
 8017e8a:	6961      	ldr	r1, [r4, #20]
 8017e8c:	69e2      	ldr	r2, [r4, #28]
 8017e8e:	69a0      	ldr	r0, [r4, #24]
 8017e90:	f7fb fa04 	bl	801329c <GUI_DrawVLine>
 8017e94:	6961      	ldr	r1, [r4, #20]
 8017e96:	69e5      	ldr	r5, [r4, #28]
 8017e98:	2302      	movs	r3, #2
 8017e9a:	440d      	add	r5, r1
 8017e9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8017ea0:	6a23      	ldr	r3, [r4, #32]
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	2b01      	cmp	r3, #1
 8017ea6:	d106      	bne.n	8017eb6 <_DrawButton+0x72>
 8017ea8:	9b03      	ldr	r3, [sp, #12]
 8017eaa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8017eae:	2b02      	cmp	r3, #2
 8017eb0:	bf18      	it	ne
 8017eb2:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 8017eb6:	68f3      	ldr	r3, [r6, #12]
 8017eb8:	69a2      	ldr	r2, [r4, #24]
 8017eba:	6920      	ldr	r0, [r4, #16]
 8017ebc:	9301      	str	r3, [sp, #4]
 8017ebe:	68b3      	ldr	r3, [r6, #8]
 8017ec0:	9300      	str	r3, [sp, #0]
 8017ec2:	3a01      	subs	r2, #1
 8017ec4:	462b      	mov	r3, r5
 8017ec6:	3101      	adds	r1, #1
 8017ec8:	3001      	adds	r0, #1
 8017eca:	f7fb f90d 	bl	80130e8 <GUI_DrawGradientV>
 8017ece:	6971      	ldr	r1, [r6, #20]
 8017ed0:	69e3      	ldr	r3, [r4, #28]
 8017ed2:	69a2      	ldr	r2, [r4, #24]
 8017ed4:	6920      	ldr	r0, [r4, #16]
 8017ed6:	9101      	str	r1, [sp, #4]
 8017ed8:	6931      	ldr	r1, [r6, #16]
 8017eda:	9100      	str	r1, [sp, #0]
 8017edc:	3b01      	subs	r3, #1
 8017ede:	3a01      	subs	r2, #1
 8017ee0:	1c69      	adds	r1, r5, #1
 8017ee2:	3001      	adds	r0, #1
 8017ee4:	f7fb f900 	bl	80130e8 <GUI_DrawGradientV>
 8017ee8:	a803      	add	r0, sp, #12
 8017eea:	f7f0 fa1b 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017eee:	b004      	add	sp, #16
 8017ef0:	bd70      	pop	{r4, r5, r6, pc}
 8017ef2:	bf00      	nop
 8017ef4:	0801bc7c 	.word	0x0801bc7c

08017ef8 <_DrawArrow>:
 8017ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017efc:	4b2b      	ldr	r3, [pc, #172]	; (8017fac <_DrawArrow+0xb4>)
 8017efe:	6882      	ldr	r2, [r0, #8]
 8017f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f04:	4607      	mov	r7, r0
 8017f06:	6998      	ldr	r0, [r3, #24]
 8017f08:	f7f0 fd78 	bl	80089fc <GUI_SetColor>
 8017f0c:	6838      	ldr	r0, [r7, #0]
 8017f0e:	f7fd fd17 	bl	8015940 <WM_GetWindowSizeY>
 8017f12:	697b      	ldr	r3, [r7, #20]
 8017f14:	69fe      	ldr	r6, [r7, #28]
 8017f16:	4680      	mov	r8, r0
 8017f18:	6838      	ldr	r0, [r7, #0]
 8017f1a:	1af6      	subs	r6, r6, r3
 8017f1c:	f7f0 f9f4 	bl	8008308 <GUI_ALLOC_LockH>
 8017f20:	f890 908c 	ldrb.w	r9, [r0, #140]	; 0x8c
 8017f24:	9001      	str	r0, [sp, #4]
 8017f26:	f1b9 0f02 	cmp.w	r9, #2
 8017f2a:	a801      	add	r0, sp, #4
 8017f2c:	bf0c      	ite	eq
 8017f2e:	2405      	moveq	r4, #5
 8017f30:	2407      	movne	r4, #7
 8017f32:	f7f0 f9f7 	bl	8008324 <GUI_ALLOC_UnlockH>
 8017f36:	fb98 f4f4 	sdiv	r4, r8, r4
 8017f3a:	6a3a      	ldr	r2, [r7, #32]
 8017f3c:	7812      	ldrb	r2, [r2, #0]
 8017f3e:	1c60      	adds	r0, r4, #1
 8017f40:	1a33      	subs	r3, r6, r0
 8017f42:	2102      	movs	r1, #2
 8017f44:	fb93 f3f1 	sdiv	r3, r3, r1
 8017f48:	b92a      	cbnz	r2, 8017f56 <_DrawArrow+0x5e>
 8017f4a:	69fd      	ldr	r5, [r7, #28]
 8017f4c:	1aed      	subs	r5, r5, r3
 8017f4e:	3d01      	subs	r5, #1
 8017f50:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017f54:	e016      	b.n	8017f84 <_DrawArrow+0x8c>
 8017f56:	697d      	ldr	r5, [r7, #20]
 8017f58:	f018 0f01 	tst.w	r8, #1
 8017f5c:	441d      	add	r5, r3
 8017f5e:	d010      	beq.n	8017f82 <_DrawArrow+0x8a>
 8017f60:	f1b9 0f02 	cmp.w	r9, #2
 8017f64:	d00d      	beq.n	8017f82 <_DrawArrow+0x8a>
 8017f66:	3601      	adds	r6, #1
 8017f68:	2204      	movs	r2, #4
 8017f6a:	fb96 f2f2 	sdiv	r2, r6, r2
 8017f6e:	4294      	cmp	r4, r2
 8017f70:	bfb8      	it	lt
 8017f72:	4604      	movlt	r4, r0
 8017f74:	1c62      	adds	r2, r4, #1
 8017f76:	1ab6      	subs	r6, r6, r2
 8017f78:	fb96 f6f1 	sdiv	r6, r6, r1
 8017f7c:	42b3      	cmp	r3, r6
 8017f7e:	bfb8      	it	lt
 8017f80:	3501      	addlt	r5, #1
 8017f82:	2601      	movs	r6, #1
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	69bf      	ldr	r7, [r7, #24]
 8017f88:	2202      	movs	r2, #2
 8017f8a:	1aff      	subs	r7, r7, r3
 8017f8c:	fb97 f7f2 	sdiv	r7, r7, r2
 8017f90:	441f      	add	r7, r3
 8017f92:	2c00      	cmp	r4, #0
 8017f94:	db07      	blt.n	8017fa6 <_DrawArrow+0xae>
 8017f96:	19e2      	adds	r2, r4, r7
 8017f98:	1b39      	subs	r1, r7, r4
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	f7fb f918 	bl	80131d0 <GUI_DrawHLine>
 8017fa0:	4435      	add	r5, r6
 8017fa2:	3c01      	subs	r4, #1
 8017fa4:	e7f5      	b.n	8017f92 <_DrawArrow+0x9a>
 8017fa6:	b003      	add	sp, #12
 8017fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fac:	0801bc7c 	.word	0x0801bc7c

08017fb0 <SPINBOX_DrawSkinFlex>:
 8017fb0:	6843      	ldr	r3, [r0, #4]
 8017fb2:	2b05      	cmp	r3, #5
 8017fb4:	b570      	push	{r4, r5, r6, lr}
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	d061      	beq.n	801807e <SPINBOX_DrawSkinFlex+0xce>
 8017fba:	dc04      	bgt.n	8017fc6 <SPINBOX_DrawSkinFlex+0x16>
 8017fbc:	2b03      	cmp	r3, #3
 8017fbe:	d06a      	beq.n	8018096 <SPINBOX_DrawSkinFlex+0xe6>
 8017fc0:	dc69      	bgt.n	8018096 <SPINBOX_DrawSkinFlex+0xe6>
 8017fc2:	b153      	cbz	r3, 8017fda <SPINBOX_DrawSkinFlex+0x2a>
 8017fc4:	e069      	b.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 8017fc6:	2b09      	cmp	r3, #9
 8017fc8:	d062      	beq.n	8018090 <SPINBOX_DrawSkinFlex+0xe0>
 8017fca:	dc02      	bgt.n	8017fd2 <SPINBOX_DrawSkinFlex+0x22>
 8017fcc:	2b08      	cmp	r3, #8
 8017fce:	d05f      	beq.n	8018090 <SPINBOX_DrawSkinFlex+0xe0>
 8017fd0:	e063      	b.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 8017fd2:	2b0b      	cmp	r3, #11
 8017fd4:	d00d      	beq.n	8017ff2 <SPINBOX_DrawSkinFlex+0x42>
 8017fd6:	2b1d      	cmp	r3, #29
 8017fd8:	d15f      	bne.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 8017fda:	4931      	ldr	r1, [pc, #196]	; (80180a0 <SPINBOX_DrawSkinFlex+0xf0>)
 8017fdc:	6820      	ldr	r0, [r4, #0]
 8017fde:	f7ff ff0a 	bl	8017df6 <SPINBOX__ApplyProps>
 8017fe2:	6820      	ldr	r0, [r4, #0]
 8017fe4:	f7fd fcc8 	bl	8015978 <WM_SetHasTrans>
 8017fe8:	492e      	ldr	r1, [pc, #184]	; (80180a4 <SPINBOX_DrawSkinFlex+0xf4>)
 8017fea:	6820      	ldr	r0, [r4, #0]
 8017fec:	f7fa fb64 	bl	80126b8 <WIDGET_SetEffect>
 8017ff0:	e053      	b.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 8017ff2:	4e2b      	ldr	r6, [pc, #172]	; (80180a0 <SPINBOX_DrawSkinFlex+0xf0>)
 8017ff4:	2500      	movs	r5, #0
 8017ff6:	68a3      	ldr	r3, [r4, #8]
 8017ff8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017ffc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018000:	f7f0 fcfc 	bl	80089fc <GUI_SetColor>
 8018004:	b9bd      	cbnz	r5, 8018036 <SPINBOX_DrawSkinFlex+0x86>
 8018006:	6961      	ldr	r1, [r4, #20]
 8018008:	6920      	ldr	r0, [r4, #16]
 801800a:	3101      	adds	r1, #1
 801800c:	3001      	adds	r0, #1
 801800e:	f7fb f90d 	bl	801322c <GUI_DrawPixel>
 8018012:	69e1      	ldr	r1, [r4, #28]
 8018014:	6920      	ldr	r0, [r4, #16]
 8018016:	3901      	subs	r1, #1
 8018018:	3001      	adds	r0, #1
 801801a:	f7fb f907 	bl	801322c <GUI_DrawPixel>
 801801e:	6961      	ldr	r1, [r4, #20]
 8018020:	69a0      	ldr	r0, [r4, #24]
 8018022:	3101      	adds	r1, #1
 8018024:	3801      	subs	r0, #1
 8018026:	f7fb f901 	bl	801322c <GUI_DrawPixel>
 801802a:	69e1      	ldr	r1, [r4, #28]
 801802c:	69a0      	ldr	r0, [r4, #24]
 801802e:	3901      	subs	r1, #1
 8018030:	3801      	subs	r0, #1
 8018032:	f7fb f8fb 	bl	801322c <GUI_DrawPixel>
 8018036:	69a2      	ldr	r2, [r4, #24]
 8018038:	6921      	ldr	r1, [r4, #16]
 801803a:	6960      	ldr	r0, [r4, #20]
 801803c:	3a02      	subs	r2, #2
 801803e:	4428      	add	r0, r5
 8018040:	3102      	adds	r1, #2
 8018042:	f7fb f8c5 	bl	80131d0 <GUI_DrawHLine>
 8018046:	69a2      	ldr	r2, [r4, #24]
 8018048:	6921      	ldr	r1, [r4, #16]
 801804a:	69e0      	ldr	r0, [r4, #28]
 801804c:	3a02      	subs	r2, #2
 801804e:	1b40      	subs	r0, r0, r5
 8018050:	3102      	adds	r1, #2
 8018052:	f7fb f8bd 	bl	80131d0 <GUI_DrawHLine>
 8018056:	69e2      	ldr	r2, [r4, #28]
 8018058:	6961      	ldr	r1, [r4, #20]
 801805a:	6920      	ldr	r0, [r4, #16]
 801805c:	3a02      	subs	r2, #2
 801805e:	4428      	add	r0, r5
 8018060:	3102      	adds	r1, #2
 8018062:	f7fb f91b 	bl	801329c <GUI_DrawVLine>
 8018066:	69e2      	ldr	r2, [r4, #28]
 8018068:	6961      	ldr	r1, [r4, #20]
 801806a:	69a0      	ldr	r0, [r4, #24]
 801806c:	3a02      	subs	r2, #2
 801806e:	1b40      	subs	r0, r0, r5
 8018070:	3102      	adds	r1, #2
 8018072:	3501      	adds	r5, #1
 8018074:	f7fb f912 	bl	801329c <GUI_DrawVLine>
 8018078:	2d02      	cmp	r5, #2
 801807a:	d1bc      	bne.n	8017ff6 <SPINBOX_DrawSkinFlex+0x46>
 801807c:	e00d      	b.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 801807e:	6882      	ldr	r2, [r0, #8]
 8018080:	4b07      	ldr	r3, [pc, #28]	; (80180a0 <SPINBOX_DrawSkinFlex+0xf0>)
 8018082:	6800      	ldr	r0, [r0, #0]
 8018084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018088:	69d9      	ldr	r1, [r3, #28]
 801808a:	f7ff fd33 	bl	8017af4 <SPINBOX__DrawBk>
 801808e:	e004      	b.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 8018090:	f7ff fed8 	bl	8017e44 <_DrawButton>
 8018094:	e001      	b.n	801809a <SPINBOX_DrawSkinFlex+0xea>
 8018096:	f7ff ff2f 	bl	8017ef8 <_DrawArrow>
 801809a:	2000      	movs	r0, #0
 801809c:	bd70      	pop	{r4, r5, r6, pc}
 801809e:	bf00      	nop
 80180a0:	0801bc7c 	.word	0x0801bc7c
 80180a4:	0801948c 	.word	0x0801948c

080180a8 <_Color2Index_8888>:
 80180a8:	4770      	bx	lr

080180aa <_GetIndexMask_8888>:
 80180aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180ae:	4770      	bx	lr

080180b0 <_Color2IndexBulk>:
 80180b0:	b510      	push	{r4, lr}
 80180b2:	f850 4b04 	ldr.w	r4, [r0], #4
 80180b6:	600c      	str	r4, [r1, #0]
 80180b8:	3a01      	subs	r2, #1
 80180ba:	4419      	add	r1, r3
 80180bc:	d1f9      	bne.n	80180b2 <_Color2IndexBulk+0x2>
 80180be:	bd10      	pop	{r4, pc}

080180c0 <_Index2ColorBulk>:
 80180c0:	b510      	push	{r4, lr}
 80180c2:	6804      	ldr	r4, [r0, #0]
 80180c4:	f841 4b04 	str.w	r4, [r1], #4
 80180c8:	3a01      	subs	r2, #1
 80180ca:	4418      	add	r0, r3
 80180cc:	d1f9      	bne.n	80180c2 <_Index2ColorBulk+0x2>
 80180ce:	bd10      	pop	{r4, pc}

080180d0 <GL_FillCircle>:
 80180d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d4:	f240 26c3 	movw	r6, #707	; 0x2c3
 80180d8:	b085      	sub	sp, #20
 80180da:	4f2c      	ldr	r7, [pc, #176]	; (801818c <GL_FillCircle+0xbc>)
 80180dc:	4356      	muls	r6, r2
 80180de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80180e2:	fb96 f6f3 	sdiv	r6, r6, r3
 80180e6:	2302      	movs	r3, #2
 80180e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80180ec:	fb02 3302 	mla	r3, r2, r2, r3
 80180f0:	9301      	str	r3, [sp, #4]
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80180f6:	4614      	mov	r4, r2
 80180f8:	4680      	mov	r8, r0
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	4402      	add	r2, r0
 80180fe:	2501      	movs	r5, #1
 8018100:	1b00      	subs	r0, r0, r4
 8018102:	4689      	mov	r9, r1
 8018104:	4798      	blx	r3
 8018106:	eb08 0305 	add.w	r3, r8, r5
 801810a:	9302      	str	r3, [sp, #8]
 801810c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8018110:	3601      	adds	r6, #1
 8018112:	9303      	str	r3, [sp, #12]
 8018114:	42b5      	cmp	r5, r6
 8018116:	dc35      	bgt.n	8018184 <GL_FillCircle+0xb4>
 8018118:	fb04 f304 	mul.w	r3, r4, r4
 801811c:	9a01      	ldr	r2, [sp, #4]
 801811e:	fb05 3305 	mla	r3, r5, r5, r3
 8018122:	429a      	cmp	r2, r3
 8018124:	da18      	bge.n	8018158 <GL_FillCircle+0x88>
 8018126:	42b4      	cmp	r4, r6
 8018128:	dd15      	ble.n	8018156 <GL_FillCircle+0x86>
 801812a:	9b02      	ldr	r3, [sp, #8]
 801812c:	ebc5 0a03 	rsb	sl, r5, r3
 8018130:	9b03      	ldr	r3, [sp, #12]
 8018132:	eb03 0b05 	add.w	fp, r3, r5
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801813a:	465a      	mov	r2, fp
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	eb04 0109 	add.w	r1, r4, r9
 8018142:	4650      	mov	r0, sl
 8018144:	4798      	blx	r3
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801814a:	465a      	mov	r2, fp
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	ebc4 0109 	rsb	r1, r4, r9
 8018152:	4650      	mov	r0, sl
 8018154:	4798      	blx	r3
 8018156:	3c01      	subs	r4, #1
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801815c:	ebc4 0a08 	rsb	sl, r4, r8
 8018160:	eb04 0b08 	add.w	fp, r4, r8
 8018164:	eb09 0105 	add.w	r1, r9, r5
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	465a      	mov	r2, fp
 801816c:	4650      	mov	r0, sl
 801816e:	4798      	blx	r3
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018174:	ebc5 0109 	rsb	r1, r5, r9
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	465a      	mov	r2, fp
 801817c:	4650      	mov	r0, sl
 801817e:	4798      	blx	r3
 8018180:	3501      	adds	r5, #1
 8018182:	e7c7      	b.n	8018114 <GL_FillCircle+0x44>
 8018184:	b005      	add	sp, #20
 8018186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801818a:	bf00      	nop
 801818c:	20000014 	.word	0x20000014

08018190 <GUI__AlphaPreserveTrans>:
 8018190:	b510      	push	{r4, lr}
 8018192:	4b07      	ldr	r3, [pc, #28]	; (80181b0 <GUI__AlphaPreserveTrans+0x20>)
 8018194:	781c      	ldrb	r4, [r3, #0]
 8018196:	b120      	cbz	r0, 80181a2 <GUI__AlphaPreserveTrans+0x12>
 8018198:	2201      	movs	r2, #1
 801819a:	701a      	strb	r2, [r3, #0]
 801819c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80181a0:	e002      	b.n	80181a8 <GUI__AlphaPreserveTrans+0x18>
 80181a2:	7018      	strb	r0, [r3, #0]
 80181a4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80181a8:	f7f2 fed4 	bl	800af54 <LCD_AA_SetAndMask>
 80181ac:	4620      	mov	r0, r4
 80181ae:	bd10      	pop	{r4, pc}
 80181b0:	20027b98 	.word	0x20027b98

080181b4 <EDIT_SetBkColor>:
 80181b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80181b6:	460c      	mov	r4, r1
 80181b8:	4616      	mov	r6, r2
 80181ba:	4605      	mov	r5, r0
 80181bc:	b198      	cbz	r0, 80181e6 <EDIT_SetBkColor+0x32>
 80181be:	f7f1 fdcd 	bl	8009d5c <GUI_Lock>
 80181c2:	4628      	mov	r0, r5
 80181c4:	f7f0 f8a0 	bl	8008308 <GUI_ALLOC_LockH>
 80181c8:	9001      	str	r0, [sp, #4]
 80181ca:	b138      	cbz	r0, 80181dc <EDIT_SetBkColor+0x28>
 80181cc:	2c02      	cmp	r4, #2
 80181ce:	d805      	bhi.n	80181dc <EDIT_SetBkColor+0x28>
 80181d0:	341e      	adds	r4, #30
 80181d2:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
 80181d6:	4628      	mov	r0, r5
 80181d8:	f7f5 fec2 	bl	800df60 <WM_InvalidateWindow>
 80181dc:	a801      	add	r0, sp, #4
 80181de:	f7f0 f8a1 	bl	8008324 <GUI_ALLOC_UnlockH>
 80181e2:	f7f1 fdb1 	bl	8009d48 <GUI_Unlock>
 80181e6:	b002      	add	sp, #8
 80181e8:	bd70      	pop	{r4, r5, r6, pc}

080181ea <EDIT_SetTextColor>:
 80181ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80181ec:	460d      	mov	r5, r1
 80181ee:	4616      	mov	r6, r2
 80181f0:	4604      	mov	r4, r0
 80181f2:	b198      	cbz	r0, 801821c <EDIT_SetTextColor+0x32>
 80181f4:	f7f1 fdb2 	bl	8009d5c <GUI_Lock>
 80181f8:	4620      	mov	r0, r4
 80181fa:	f7f0 f885 	bl	8008308 <GUI_ALLOC_LockH>
 80181fe:	9001      	str	r0, [sp, #4]
 8018200:	b138      	cbz	r0, 8018212 <EDIT_SetTextColor+0x28>
 8018202:	2d02      	cmp	r5, #2
 8018204:	d805      	bhi.n	8018212 <EDIT_SetTextColor+0x28>
 8018206:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801820a:	66c6      	str	r6, [r0, #108]	; 0x6c
 801820c:	4620      	mov	r0, r4
 801820e:	f7f5 fea7 	bl	800df60 <WM_InvalidateWindow>
 8018212:	a801      	add	r0, sp, #4
 8018214:	f7f0 f886 	bl	8008324 <GUI_ALLOC_UnlockH>
 8018218:	f7f1 fd96 	bl	8009d48 <GUI_Unlock>
 801821c:	b002      	add	sp, #8
 801821e:	bd70      	pop	{r4, r5, r6, pc}

08018220 <__libc_init_array>:
 8018220:	b570      	push	{r4, r5, r6, lr}
 8018222:	4e0d      	ldr	r6, [pc, #52]	; (8018258 <__libc_init_array+0x38>)
 8018224:	4c0d      	ldr	r4, [pc, #52]	; (801825c <__libc_init_array+0x3c>)
 8018226:	1ba4      	subs	r4, r4, r6
 8018228:	10a4      	asrs	r4, r4, #2
 801822a:	2500      	movs	r5, #0
 801822c:	42a5      	cmp	r5, r4
 801822e:	d109      	bne.n	8018244 <__libc_init_array+0x24>
 8018230:	4e0b      	ldr	r6, [pc, #44]	; (8018260 <__libc_init_array+0x40>)
 8018232:	4c0c      	ldr	r4, [pc, #48]	; (8018264 <__libc_init_array+0x44>)
 8018234:	f000 f846 	bl	80182c4 <_init>
 8018238:	1ba4      	subs	r4, r4, r6
 801823a:	10a4      	asrs	r4, r4, #2
 801823c:	2500      	movs	r5, #0
 801823e:	42a5      	cmp	r5, r4
 8018240:	d105      	bne.n	801824e <__libc_init_array+0x2e>
 8018242:	bd70      	pop	{r4, r5, r6, pc}
 8018244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018248:	4798      	blx	r3
 801824a:	3501      	adds	r5, #1
 801824c:	e7ee      	b.n	801822c <__libc_init_array+0xc>
 801824e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018252:	4798      	blx	r3
 8018254:	3501      	adds	r5, #1
 8018256:	e7f2      	b.n	801823e <__libc_init_array+0x1e>
 8018258:	0802e650 	.word	0x0802e650
 801825c:	0802e650 	.word	0x0802e650
 8018260:	0802e650 	.word	0x0802e650
 8018264:	0802e654 	.word	0x0802e654

08018268 <memcpy>:
 8018268:	b510      	push	{r4, lr}
 801826a:	1e43      	subs	r3, r0, #1
 801826c:	440a      	add	r2, r1
 801826e:	4291      	cmp	r1, r2
 8018270:	d100      	bne.n	8018274 <memcpy+0xc>
 8018272:	bd10      	pop	{r4, pc}
 8018274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018278:	f803 4f01 	strb.w	r4, [r3, #1]!
 801827c:	e7f7      	b.n	801826e <memcpy+0x6>

0801827e <memmove>:
 801827e:	4288      	cmp	r0, r1
 8018280:	b510      	push	{r4, lr}
 8018282:	eb01 0302 	add.w	r3, r1, r2
 8018286:	d803      	bhi.n	8018290 <memmove+0x12>
 8018288:	1e42      	subs	r2, r0, #1
 801828a:	4299      	cmp	r1, r3
 801828c:	d10c      	bne.n	80182a8 <memmove+0x2a>
 801828e:	bd10      	pop	{r4, pc}
 8018290:	4298      	cmp	r0, r3
 8018292:	d2f9      	bcs.n	8018288 <memmove+0xa>
 8018294:	1881      	adds	r1, r0, r2
 8018296:	1ad2      	subs	r2, r2, r3
 8018298:	42d3      	cmn	r3, r2
 801829a:	d100      	bne.n	801829e <memmove+0x20>
 801829c:	bd10      	pop	{r4, pc}
 801829e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80182a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80182a6:	e7f7      	b.n	8018298 <memmove+0x1a>
 80182a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80182ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80182b0:	e7eb      	b.n	801828a <memmove+0xc>

080182b2 <memset>:
 80182b2:	4402      	add	r2, r0
 80182b4:	4603      	mov	r3, r0
 80182b6:	4293      	cmp	r3, r2
 80182b8:	d100      	bne.n	80182bc <memset+0xa>
 80182ba:	4770      	bx	lr
 80182bc:	f803 1b01 	strb.w	r1, [r3], #1
 80182c0:	e7f9      	b.n	80182b6 <memset+0x4>
	...

080182c4 <_init>:
 80182c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182c6:	bf00      	nop
 80182c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182ca:	bc08      	pop	{r3}
 80182cc:	469e      	mov	lr, r3
 80182ce:	4770      	bx	lr

080182d0 <_fini>:
 80182d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182d2:	bf00      	nop
 80182d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80182d6:	bc08      	pop	{r3}
 80182d8:	469e      	mov	lr, r3
 80182da:	4770      	bx	lr
