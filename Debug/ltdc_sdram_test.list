
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012824  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae4  080129d0  080129d0  000229d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080144b4  080144b4  000244b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080144bc  080144bc  000244bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080144c0  080144c0  000244c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  20000000  080144c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030050  2**0
                  CONTENTS
  8 .bss          00023124  20000050  20000050  00030050  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20023174  20023174  00030050  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031e3e  00000000  00000000  0003007e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000418f  00000000  00000000  00061ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001620  00000000  00000000  00066050  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001468  00000000  00000000  00067670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000aaae  00000000  00000000  00068ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008ade  00000000  00000000  00073586  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fe  00000000  00000000  0007c064  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d44  00000000  00000000  0007c164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000050 	.word	0x20000050
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080129b8 	.word	0x080129b8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000054 	.word	0x20000054
 80001e8:	080129b8 	.word	0x080129b8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	4a0b      	ldr	r2, [pc, #44]	; (800053c <HAL_Init+0x40>)
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 f961 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f808 	bl	8000540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000530:	f006 fcf6 	bl	8006f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40023c00 	.word	0x40023c00

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_InitTick+0x54>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x58>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f987 	bl	8000872 <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e00e      	b.n	800058c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d80a      	bhi.n	800058a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000574:	2200      	movs	r2, #0
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	f000 f941 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <HAL_InitTick+0x5c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000000c 	.word	0x2000000c
 8000598:	20000004 	.word	0x20000004
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20022d10 	.word	0x20022d10

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20022d10 	.word	0x20022d10

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff ffee 	bl	80005c8 <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_Delay+0x40>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffde 	bl	80005c8 <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f7      	bcc.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000004 	.word	0x20000004

08000624 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <NVIC_EnableIRQ+0x30>)
 8000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000698:	095b      	lsrs	r3, r3, #5
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	f002 021f 	and.w	r2, r2, #31
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100

080006bc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <NVIC_DisableIRQ+0x30>)
 80006c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006cc:	095b      	lsrs	r3, r3, #5
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	f002 021f 	and.w	r2, r2, #31
 80006d4:	2001      	movs	r0, #1
 80006d6:	fa00 f202 	lsl.w	r2, r0, r2
 80006da:	3320      	adds	r3, #32
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e100 	.word	0xe000e100

080006f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	da0b      	bge.n	800071c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <NVIC_SetPriority+0x4c>)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	3b04      	subs	r3, #4
 800070e:	683a      	ldr	r2, [r7, #0]
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071a:	e009      	b.n	8000730 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <NVIC_SetPriority+0x50>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	683a      	ldr	r2, [r7, #0]
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00
 8000740:	e000e100 	.word	0xe000e100

08000744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	; 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	2201      	movs	r2, #1
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	401a      	ands	r2, r3
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078a:	2101      	movs	r1, #1
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	1e59      	subs	r1, r3, #1
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff15 	bl	8000624 <NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff2a 	bl	800066c <NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff1d 	bl	8000688 <NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff29 	bl	80006bc <NVIC_DisableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff94 	bl	80007a8 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fe96 	bl	80005c8 <HAL_GetTick>
 800089c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e099      	b.n	80009dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2200      	movs	r2, #0
 80008ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2202      	movs	r2, #2
 80008b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	f022 0201 	bic.w	r2, r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008c8:	e00f      	b.n	80008ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008ca:	f7ff fe7d 	bl	80005c8 <HAL_GetTick>
 80008ce:	4602      	mov	r2, r0
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d908      	bls.n	80008ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2220      	movs	r2, #32
 80008dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2203      	movs	r2, #3
 80008e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e078      	b.n	80009dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1e8      	bne.n	80008ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <HAL_DMA_Init+0x158>)
 8000904:	4013      	ands	r3, r2
 8000906:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800092e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	4313      	orrs	r3, r2
 800093a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000940:	2b04      	cmp	r3, #4
 8000942:	d107      	bne.n	8000954 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4313      	orrs	r3, r2
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4313      	orrs	r3, r2
 8000952:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f023 0307 	bic.w	r3, r3, #7
 800096a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	4313      	orrs	r3, r2
 8000974:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	2b04      	cmp	r3, #4
 800097c:	d117      	bne.n	80009ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	4313      	orrs	r3, r2
 8000986:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098c:	2b00      	cmp	r3, #0
 800098e:	d00e      	beq.n	80009ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f9e9 	bl	8000d68 <DMA_CheckFifoParam>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2240      	movs	r2, #64	; 0x40
 80009a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009aa:	2301      	movs	r3, #1
 80009ac:	e016      	b.n	80009dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f9a0 	bl	8000cfc <DMA_CalcBaseAndBitshift>
 80009bc:	4603      	mov	r3, r0
 80009be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c4:	223f      	movs	r2, #63	; 0x3f
 80009c6:	409a      	lsls	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	f010803f 	.word	0xf010803f

080009e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f4:	4b92      	ldr	r3, [pc, #584]	; (8000c40 <HAL_DMA_IRQHandler+0x258>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a92      	ldr	r2, [pc, #584]	; (8000c44 <HAL_DMA_IRQHandler+0x25c>)
 80009fa:	fba2 2303 	umull	r2, r3, r2, r3
 80009fe:	0a9b      	lsrs	r3, r3, #10
 8000a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a12:	2208      	movs	r2, #8
 8000a14:	409a      	lsls	r2, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d013      	beq.n	8000a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	6812      	ldr	r2, [r2, #0]
 8000a34:	6812      	ldr	r2, [r2, #0]
 8000a36:	f022 0204 	bic.w	r2, r2, #4
 8000a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a40:	2208      	movs	r2, #8
 8000a42:	409a      	lsls	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4c:	f043 0201 	orr.w	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	409a      	lsls	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d012      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00b      	beq.n	8000a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a76:	2201      	movs	r2, #1
 8000a78:	409a      	lsls	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a82:	f043 0202 	orr.w	r2, r3, #2
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8e:	2204      	movs	r2, #4
 8000a90:	409a      	lsls	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d012      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00b      	beq.n	8000ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aac:	2204      	movs	r2, #4
 8000aae:	409a      	lsls	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d043      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0308 	and.w	r3, r3, #8
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03c      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d018      	beq.n	8000b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d108      	bne.n	8000b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d024      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	4798      	blx	r3
 8000b16:	e01f      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01b      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	4798      	blx	r3
 8000b28:	e016      	b.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d107      	bne.n	8000b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6812      	ldr	r2, [r2, #0]
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	f022 0208 	bic.w	r2, r2, #8
 8000b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 808e 	beq.w	8000c86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	f000 8086 	beq.w	8000c86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7e:	2220      	movs	r2, #32
 8000b80:	409a      	lsls	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d136      	bne.n	8000c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	6812      	ldr	r2, [r2, #0]
 8000b9a:	6812      	ldr	r2, [r2, #0]
 8000b9c:	f022 0216 	bic.w	r2, r2, #22
 8000ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6812      	ldr	r2, [r2, #0]
 8000baa:	6952      	ldr	r2, [r2, #20]
 8000bac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x1da>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	f022 0208 	bic.w	r2, r2, #8
 8000bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd6:	223f      	movs	r2, #63	; 0x3f
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d07d      	beq.n	8000cf2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	4798      	blx	r3
        }
        return;
 8000bfe:	e078      	b.n	8000cf2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d01c      	beq.n	8000c48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d108      	bne.n	8000c2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d030      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
 8000c2c:	e02b      	b.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d027      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	4798      	blx	r3
 8000c3e:	e022      	b.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10f      	bne.n	8000c76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	f022 0210 	bic.w	r2, r2, #16
 8000c64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d032      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d022      	beq.n	8000ce0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	6812      	ldr	r2, [r2, #0]
 8000caa:	6812      	ldr	r2, [r2, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d807      	bhi.n	8000cce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f2      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x2ca>
 8000ccc:	e000      	b.n	8000cd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	4798      	blx	r3
 8000cf0:	e000      	b.n	8000cf4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cf2:	bf00      	nop
    }
  }
}
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop

08000cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	3b10      	subs	r3, #16
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <DMA_CalcBaseAndBitshift+0x64>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <DMA_CalcBaseAndBitshift+0x68>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d909      	bls.n	8000d3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d32:	f023 0303 	bic.w	r3, r3, #3
 8000d36:	1d1a      	adds	r2, r3, #4
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8000d3c:	e007      	b.n	8000d4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d46:	f023 0303 	bic.w	r3, r3, #3
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	aaaaaaab 	.word	0xaaaaaaab
 8000d64:	08012a08 	.word	0x08012a08

08000d68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11f      	bne.n	8000dc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d855      	bhi.n	8000e34 <DMA_CheckFifoParam+0xcc>
 8000d88:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <DMA_CheckFifoParam+0x28>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000da1 	.word	0x08000da1
 8000d94:	08000db3 	.word	0x08000db3
 8000d98:	08000da1 	.word	0x08000da1
 8000d9c:	08000e35 	.word	0x08000e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d045      	beq.n	8000e38 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000db0:	e042      	b.n	8000e38 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dba:	d13f      	bne.n	8000e3c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dc0:	e03c      	b.n	8000e3c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dca:	d121      	bne.n	8000e10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d836      	bhi.n	8000e40 <DMA_CheckFifoParam+0xd8>
 8000dd2:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <DMA_CheckFifoParam+0x70>)
 8000dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000def 	.word	0x08000def
 8000de0:	08000de9 	.word	0x08000de9
 8000de4:	08000e01 	.word	0x08000e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
      break;
 8000dec:	e02f      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d024      	beq.n	8000e44 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dfe:	e021      	b.n	8000e44 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e08:	d11e      	bne.n	8000e48 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e0e:	e01b      	b.n	8000e48 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d902      	bls.n	8000e1c <DMA_CheckFifoParam+0xb4>
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d003      	beq.n	8000e22 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e1a:	e018      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e20:	e015      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00e      	beq.n	8000e4c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
      break;
 8000e32:	e00b      	b.n	8000e4c <DMA_CheckFifoParam+0xe4>
      break;
 8000e34:	bf00      	nop
 8000e36:	e00a      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e38:	bf00      	nop
 8000e3a:	e008      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e3c:	bf00      	nop
 8000e3e:	e006      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;   
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <DMA_CheckFifoParam+0xe6>
      break;
 8000e4c:	bf00      	nop
    }
  } 
  
  return status; 
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e03b      	b.n	8000ee6 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d106      	bne.n	8000e88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f006 f874 	bl	8006f70 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6852      	ldr	r2, [r2, #4]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000eb0:	f022 0107 	bic.w	r1, r2, #7
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6892      	ldr	r2, [r2, #8]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	68c9      	ldr	r1, [r1, #12]
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d026      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d021      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f28:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d026      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d021      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f80:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2220      	movs	r2, #32
 8000f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8e:	f043 0202 	orr.w	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d026      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d021      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2208      	movs	r2, #8
 8000fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe6:	f043 0204 	orr.w	r2, r3, #4
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d00e      	beq.n	8001040 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001030:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2204      	movs	r2, #4
 8001038:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f853 	bl	80010e6 <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d024      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01f      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6812      	ldr	r2, [r2, #0]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001062:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2202      	movs	r2, #2
 800106a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01f      	beq.n	80010de <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01a      	beq.n	80010de <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010b6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2210      	movs	r2, #16
 80010be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f80e 	bl	80010fa <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	3318      	adds	r3, #24
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_DMA2D_ConfigLayer+0x30>
 800113c:	2302      	movs	r3, #2
 800113e:	e070      	b.n	8001222 <HAL_DMA2D_ConfigLayer+0x112>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b0a      	cmp	r3, #10
 8001156:	d003      	beq.n	8001160 <HAL_DMA2D_ConfigLayer+0x50>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d10c      	bne.n	800117a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	431a      	orrs	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001174:	4313      	orrs	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	e00a      	b.n	8001190 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	041b      	lsls	r3, r3, #16
 8001184:	431a      	orrs	r2, r3
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	061b      	lsls	r3, r3, #24
 800118c:	4313      	orrs	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d11e      	bne.n	80011d4 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_DMA2D_ConfigLayer+0x120>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	68f9      	ldr	r1, [r7, #12]
 80011a6:	430b      	orrs	r3, r1
 80011a8:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d003      	beq.n	80011c4 <HAL_DMA2D_ConfigLayer+0xb4>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	d125      	bne.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	68d2      	ldr	r2, [r2, #12]
 80011cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
 80011d2:	e01d      	b.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69d9      	ldr	r1, [r3, #28]
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_DMA2D_ConfigLayer+0x120>)
 80011e0:	400b      	ands	r3, r1
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	430b      	orrs	r3, r1
 80011e6:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b0a      	cmp	r3, #10
 80011f8:	d003      	beq.n	8001202 <HAL_DMA2D_ConfigLayer+0xf2>
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d106      	bne.n	8001210 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	68d2      	ldr	r2, [r2, #12]
 800120a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800120e:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	00fcfff0 	.word	0x00fcfff0

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e177      	b.n	8001540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8166 	bne.w	800153a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x4a>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	69b9      	ldr	r1, [r7, #24]
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0203 	and.w	r2, r3, #3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d00b      	beq.n	800131a <HAL_GPIO_Init+0xe6>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	2b11      	cmp	r3, #17
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80c0 	beq.w	800153a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4a65      	ldr	r2, [pc, #404]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c0:	4b64      	ldr	r3, [pc, #400]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d6:	4a60      	ldr	r2, [pc, #384]	; (8001558 <HAL_GPIO_Init+0x324>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d031      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x334>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a53      	ldr	r2, [pc, #332]	; (800156c <HAL_GPIO_Init+0x338>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_GPIO_Init+0x33c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x22a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a51      	ldr	r2, [pc, #324]	; (8001574 <HAL_GPIO_Init+0x340>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x226>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a50      	ldr	r2, [pc, #320]	; (8001578 <HAL_GPIO_Init+0x344>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4f      	ldr	r2, [pc, #316]	; (800157c <HAL_GPIO_Init+0x348>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_GPIO_Init+0x34c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x21a>
 800144a:	2309      	movs	r3, #9
 800144c:	e012      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800144e:	230a      	movs	r3, #10
 8001450:	e010      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001452:	2308      	movs	r3, #8
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001456:	2307      	movs	r3, #7
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x324>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_GPIO_Init+0x350>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae84 	bls.w	8001250 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40022000 	.word	0x40022000
 8001580:	40022400 	.word	0x40022400
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e0da      	b.n	800175a <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f040 80ca 	bne.w	8001754 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2103      	movs	r1, #3
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	401a      	ands	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08d9      	lsrs	r1, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3108      	adds	r1, #8
 80015e2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	200f      	movs	r0, #15
 80015f0:	fa00 f303 	lsl.w	r3, r0, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4019      	ands	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	2103      	movs	r1, #3
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2101      	movs	r1, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2103      	movs	r1, #3
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3302      	adds	r3, #2
 8001648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	220f      	movs	r2, #15
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	4013      	ands	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_GPIO_DeInit+0x1ec>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d037      	beq.n	80016da <HAL_GPIO_DeInit+0x152>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a42      	ldr	r2, [pc, #264]	; (8001778 <HAL_GPIO_DeInit+0x1f0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d031      	beq.n	80016d6 <HAL_GPIO_DeInit+0x14e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a41      	ldr	r2, [pc, #260]	; (800177c <HAL_GPIO_DeInit+0x1f4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02b      	beq.n	80016d2 <HAL_GPIO_DeInit+0x14a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a40      	ldr	r2, [pc, #256]	; (8001780 <HAL_GPIO_DeInit+0x1f8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_DeInit+0x146>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <HAL_GPIO_DeInit+0x1fc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_DeInit+0x142>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a3e      	ldr	r2, [pc, #248]	; (8001788 <HAL_GPIO_DeInit+0x200>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_DeInit+0x13e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_GPIO_DeInit+0x204>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_DeInit+0x13a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <HAL_GPIO_DeInit+0x208>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_DeInit+0x136>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_GPIO_DeInit+0x20c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_DeInit+0x132>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a3a      	ldr	r2, [pc, #232]	; (8001798 <HAL_GPIO_DeInit+0x210>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_DeInit+0x12e>
 80016b2:	2309      	movs	r3, #9
 80016b4:	e012      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016b6:	230a      	movs	r3, #10
 80016b8:	e010      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00e      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_DeInit+0x154>
 80016da:	2300      	movs	r3, #0
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	fa03 f202 	lsl.w	r2, r3, r2
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d132      	bne.n	8001754 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	220f      	movs	r2, #15
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	491a      	ldr	r1, [pc, #104]	; (8001770 <HAL_GPIO_DeInit+0x1e8>)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	0892      	lsrs	r2, r2, #2
 800170a:	3202      	adds	r2, #2
 800170c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	43d2      	mvns	r2, r2
 8001714:	400a      	ands	r2, r1
 8001716:	3302      	adds	r3, #2
 8001718:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800171c:	491f      	ldr	r1, [pc, #124]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_GPIO_DeInit+0x214>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43db      	mvns	r3, r3
 8001726:	4013      	ands	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800172a:	491c      	ldr	r1, [pc, #112]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001738:	4918      	ldr	r1, [pc, #96]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43db      	mvns	r3, r3
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001746:	4915      	ldr	r1, [pc, #84]	; (800179c <HAL_GPIO_DeInit+0x214>)
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_GPIO_DeInit+0x214>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	43db      	mvns	r3, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	f67f af21 	bls.w	80015a4 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40013800 	.word	0x40013800
 8001774:	40020000 	.word	0x40020000
 8001778:	40020400 	.word	0x40020400
 800177c:	40020800 	.word	0x40020800
 8001780:	40020c00 	.word	0x40020c00
 8001784:	40021000 	.word	0x40021000
 8001788:	40021400 	.word	0x40021400
 800178c:	40021800 	.word	0x40021800
 8001790:	40021c00 	.word	0x40021c00
 8001794:	40022000 	.word	0x40022000
 8001798:	40022400 	.word	0x40022400
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0c8      	b.n	8001980 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f005 fbdc 	bl	8006fc0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2224      	movs	r2, #36	; 0x24
 800180c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001820:	f002 f97a 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 8001824:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_I2C_Init+0x1b4>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4952      	ldr	r1, [pc, #328]	; (800198c <HAL_I2C_Init+0x1b8>)
 8001844:	428b      	cmp	r3, r1
 8001846:	d802      	bhi.n	800184e <HAL_I2C_Init+0x7a>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	e009      	b.n	8001862 <HAL_I2C_Init+0x8e>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_I2C_Init+0x1bc>)
 800185a:	fba1 1303 	umull	r1, r3, r1, r3
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	3301      	adds	r3, #1
 8001862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_I2C_Init+0x1b8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d812      	bhi.n	8001898 <HAL_I2C_Init+0xc4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001882:	2b03      	cmp	r3, #3
 8001884:	d906      	bls.n	8001894 <HAL_I2C_Init+0xc0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	e045      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001894:	2304      	movs	r3, #4
 8001896:	e043      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_I2C_Init+0xec>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	e010      	b.n	80018e2 <HAL_I2C_Init+0x10e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009a      	lsls	r2, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Init+0x116>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e01a      	b.n	8001920 <HAL_I2C_Init+0x14c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10a      	bne.n	8001908 <HAL_I2C_Init+0x134>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001906:	e00b      	b.n	8001920 <HAL_I2C_Init+0x14c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009a      	lsls	r2, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001920:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	69d1      	ldr	r1, [r2, #28]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6a12      	ldr	r2, [r2, #32]
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6911      	ldr	r1, [r2, #16]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68d2      	ldr	r2, [r2, #12]
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6951      	ldr	r1, [r2, #20]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6992      	ldr	r2, [r2, #24]
 800194e:	430a      	orrs	r2, r1
 8001950:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	431bde83 	.word	0x431bde83
 800198c:	000186a0 	.word	0x000186a0
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	460b      	mov	r3, r1
 80019a2:	817b      	strh	r3, [r7, #10]
 80019a4:	4613      	mov	r3, r2
 80019a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019ac:	f7fe fe0c 	bl	80005c8 <HAL_GetTick>
 80019b0:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	f040 80ee 	bne.w	8001b9c <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2319      	movs	r3, #25
 80019c6:	2201      	movs	r2, #1
 80019c8:	4977      	ldr	r1, [pc, #476]	; (8001ba8 <HAL_I2C_Master_Transmit+0x214>)
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fc6c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0e1      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_Master_Transmit+0x54>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0da      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d007      	beq.n	8001a0e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2221      	movs	r2, #33	; 0x21
 8001a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	893a      	ldrh	r2, [r7, #8]
 8001a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_I2C_Master_Transmit+0x218>)
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	6a3a      	ldr	r2, [r7, #32]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fadc 	bl	8002014 <I2C_MasterRequestWrite>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00f      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d105      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e093      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e08d      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001a98:	e066      	b.n	8001b68 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fcc1 	bl	8002426 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00f      	beq.n	8001aca <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d109      	bne.n	8001ac6 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e069      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c58      	adds	r0, r3, #1
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	6248      	str	r0, [r1, #36]	; 0x24
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d119      	bne.n	8001b38 <HAL_I2C_Master_Transmit+0x1a4>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d015      	beq.n	8001b38 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	1c58      	adds	r0, r3, #1
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	6248      	str	r0, [r1, #36]	; 0x24
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fcaf 	bl	80024a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00f      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d109      	bne.n	8001b64 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e01c      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e01a      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d194      	bne.n	8001a9a <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000

08001bb0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	817b      	strh	r3, [r7, #10]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc8:	f7fe fcfe 	bl	80005c8 <HAL_GetTick>
 8001bcc:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	f040 8215 	bne.w	8002006 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2319      	movs	r3, #25
 8001be2:	2201      	movs	r2, #1
 8001be4:	4985      	ldr	r1, [pc, #532]	; (8001dfc <HAL_I2C_Master_Receive+0x24c>)
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fb5e 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e208      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2C_Master_Receive+0x54>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e201      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d007      	beq.n	8001c2a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2222      	movs	r2, #34	; 0x22
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2210      	movs	r2, #16
 8001c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	893a      	ldrh	r2, [r7, #8]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4a68      	ldr	r2, [pc, #416]	; (8001e00 <HAL_I2C_Master_Receive+0x250>)
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa50 	bl	8002118 <I2C_MasterRequestRead>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00f      	beq.n	8001c9e <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d105      	bne.n	8001c92 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1ba      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1b4      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d113      	bne.n	8001cce <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e188      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d11b      	bne.n	8001d0e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e168      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d11b      	bne.n	8001d4e <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	e148      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001d74:	e134      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f200 80eb 	bhi.w	8001f56 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d127      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fbc4 	bl	800251a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d101      	bne.n	8001da4 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e131      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e12f      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	1c59      	adds	r1, r3, #1
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	6251      	str	r1, [r2, #36]	; 0x24
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	6912      	ldr	r2, [r2, #16]
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dd6:	e103      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d14a      	bne.n	8001e76 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de6:	2200      	movs	r2, #0
 8001de8:	4906      	ldr	r1, [pc, #24]	; (8001e04 <HAL_I2C_Master_Receive+0x254>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fa5c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e106      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6251      	str	r1, [r2, #36]	; 0x24
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	6912      	ldr	r2, [r2, #16]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c59      	adds	r1, r3, #1
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	6251      	str	r1, [r2, #36]	; 0x24
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	6912      	ldr	r2, [r2, #16]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e74:	e0b4      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4964      	ldr	r1, [pc, #400]	; (8002010 <HAL_I2C_Master_Receive+0x460>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa11 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0bb      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	6251      	str	r1, [r2, #36]	; 0x24
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	6912      	ldr	r2, [r2, #16]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	494e      	ldr	r1, [pc, #312]	; (8002010 <HAL_I2C_Master_Receive+0x460>)
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f9e5 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e08f      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c59      	adds	r1, r3, #1
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6251      	str	r1, [r2, #36]	; 0x24
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	6912      	ldr	r2, [r2, #16]
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	1c59      	adds	r1, r3, #1
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6912      	ldr	r2, [r2, #16]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f54:	e044      	b.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fadd 	bl	800251a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e04a      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e048      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	6251      	str	r1, [r2, #36]	; 0x24
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6912      	ldr	r2, [r2, #16]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d116      	bne.n	8001fe0 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	6251      	str	r1, [r2, #36]	; 0x24
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	6912      	ldr	r2, [r2, #16]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f aec6 	bne.w	8001d76 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	00010004 	.word	0x00010004

08002014 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2b04      	cmp	r3, #4
 800202e:	d006      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d003      	beq.n	800203e <I2C_MasterRequestWrite+0x2a>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800203c:	d108      	bne.n	8002050 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e00b      	b.n	8002068 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	2b12      	cmp	r3, #18
 8002056:	d107      	bne.n	8002068 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f917 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e040      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800208c:	d107      	bne.n	800209e <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	897a      	ldrh	r2, [r7, #10]
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	e021      	b.n	80020e2 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	897a      	ldrh	r2, [r7, #10]
 80020a4:	11d2      	asrs	r2, r2, #7
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 0206 	and.w	r2, r2, #6
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f062 020f 	orn	r2, r2, #15
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4915      	ldr	r1, [pc, #84]	; (8002110 <I2C_MasterRequestWrite+0xfc>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f944 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d101      	bne.n	80020d4 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e018      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e016      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	897a      	ldrh	r2, [r7, #10]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	490b      	ldr	r1, [pc, #44]	; (8002114 <I2C_MasterRequestWrite+0x100>)
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f92e 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d101      	bne.n	8002100 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e002      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e000      	b.n	8002106 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00010008 	.word	0x00010008
 8002114:	00010002 	.word	0x00010002

08002118 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d006      	beq.n	8002152 <I2C_MasterRequestRead+0x3a>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d003      	beq.n	8002152 <I2C_MasterRequestRead+0x3a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002150:	d108      	bne.n	8002164 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e00b      	b.n	800217c <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	2b11      	cmp	r3, #17
 800216a:	d107      	bne.n	800217c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f88d 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e07f      	b.n	8002298 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a0:	d108      	bne.n	80021b4 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	897a      	ldrh	r2, [r7, #10]
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	e05f      	b.n	8002274 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	897a      	ldrh	r2, [r7, #10]
 80021ba:	11d2      	asrs	r2, r2, #7
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	f002 0206 	and.w	r2, r2, #6
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	f062 020f 	orn	r2, r2, #15
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4933      	ldr	r1, [pc, #204]	; (80022a0 <I2C_MasterRequestRead+0x188>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 f8b9 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d101      	bne.n	80021ea <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e056      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e054      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	897a      	ldrh	r2, [r7, #10]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <I2C_MasterRequestRead+0x18c>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8a3 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b04      	cmp	r3, #4
 8002210:	d101      	bne.n	8002216 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e040      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e03e      	b.n	8002298 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f82b 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e01d      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	897a      	ldrh	r2, [r7, #10]
 8002262:	11d2      	asrs	r2, r2, #7
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 0206 	and.w	r2, r2, #6
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	f062 020e 	orn	r2, r2, #14
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	490a      	ldr	r1, [pc, #40]	; (80022a4 <I2C_MasterRequestRead+0x18c>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f865 	bl	800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b04      	cmp	r3, #4
 800228c:	d101      	bne.n	8002292 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e002      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e000      	b.n	8002298 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010008 	.word	0x00010008
 80022a4:	00010002 	.word	0x00010002

080022a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022b8:	e01f      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c0:	d01b      	beq.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022c8:	f7fe f97e 	bl	80005c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d910      	bls.n	80022fa <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e023      	b.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10d      	bne.n	8002320 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	43da      	mvns	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4013      	ands	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	e00c      	b.n	800233a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	b29b      	uxth	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	429a      	cmp	r2, r3
 800233e:	d0bc      	beq.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002358:	e040      	b.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002368:	d11c      	bne.n	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002382:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2204      	movs	r2, #4
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e03c      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023aa:	d017      	beq.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80023b2:	f7fe f909 	bl	80005c8 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d90c      	bls.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e020      	b.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10c      	bne.n	8002400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4013      	ands	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e00b      	b.n	8002418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4013      	ands	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d19e      	bne.n	800235a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002432:	e029      	b.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f8ba 	bl	80025ae <I2C_IsAcknowledgeFailed>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e029      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244a:	d01d      	beq.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002452:	f7fe f8b9 	bl	80005c8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d912      	bls.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e007      	b.n	8002498 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b80      	cmp	r3, #128	; 0x80
 8002494:	d1ce      	bne.n	8002434 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024ac:	e029      	b.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f87d 	bl	80025ae <I2C_IsAcknowledgeFailed>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e029      	b.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c4:	d01d      	beq.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024cc:	f7fe f87c 	bl	80005c8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1ad2      	subs	r2, r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d912      	bls.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e007      	b.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b04      	cmp	r3, #4
 800250e:	d1ce      	bne.n	80024ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002526:	e036      	b.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b10      	cmp	r3, #16
 8002534:	d114      	bne.n	8002560 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0210 	mvn.w	r2, #16
 800253e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e022      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002566:	f7fe f82f 	bl	80005c8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad2      	subs	r2, r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d90f      	bls.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e007      	b.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d1c1      	bne.n	8002528 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c4:	d114      	bne.n	80025f0 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ce:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	d129      	bne.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6812      	ldr	r2, [r2, #0]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	f022 0210 	bic.w	r2, r2, #16
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b20      	cmp	r3, #32
 800268e:	d12a      	bne.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	4313      	orrs	r3, r2
 80026c0:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	89fa      	ldrh	r2, [r7, #14]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 80026e6:	2302      	movs	r3, #2
  }
}  
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	2300      	movs	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0bf      	b.n	800288e <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f004 fd1a 	bl	800715c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	6992      	ldr	r2, [r2, #24]
 800273a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800273e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	6991      	ldr	r1, [r2, #24]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6850      	ldr	r0, [r2, #4]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6892      	ldr	r2, [r2, #8]
 8002752:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002758:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6912      	ldr	r2, [r2, #16]
 800275e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002760:	430a      	orrs	r2, r1
 8002762:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6899      	ldr	r1, [r3, #8]
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 8002770:	400b      	ands	r3, r1
 8002772:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	6891      	ldr	r1, [r2, #8]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6990      	ldr	r0, [r2, #24]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4302      	orrs	r2, r0
 800278e:	430a      	orrs	r2, r1
 8002790:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 800279e:	400b      	ands	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68d1      	ldr	r1, [r2, #12]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6a10      	ldr	r0, [r2, #32]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4302      	orrs	r2, r0
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 80027cc:	400b      	ands	r3, r1
 80027ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	041b      	lsls	r3, r3, #16
 80027d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	6911      	ldr	r1, [r2, #16]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4302      	orrs	r2, r0
 80027ea:	430a      	orrs	r2, r1
 80027ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6959      	ldr	r1, [r3, #20]
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_LTDC_Init+0x1a4>)
 80027fa:	400b      	ands	r3, r1
 80027fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	6951      	ldr	r1, [r2, #20]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4302      	orrs	r2, r0
 8002818:	430a      	orrs	r2, r1
 800281a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800283a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800284a:	68b8      	ldr	r0, [r7, #8]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4302      	orrs	r2, r0
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002856:	4302      	orrs	r2, r0
 8002858:	430a      	orrs	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002866:	f042 0206 	orr.w	r2, r2, #6
 800286a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	6992      	ldr	r2, [r2, #24]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	f000f800 	.word	0xf000f800

0800289c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f004 fd6f 	bl	8007388 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d023      	beq.n	8002936 <HAL_LTDC_IRQHandler+0x6a>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01e      	beq.n	8002936 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002902:	f022 0204 	bic.w	r2, r2, #4
 8002906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2204      	movs	r2, #4
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2204      	movs	r2, #4
 8002924:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f86f 	bl	8002a14 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d023      	beq.n	8002988 <HAL_LTDC_IRQHandler+0xbc>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01e      	beq.n	8002988 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002954:	f022 0202 	bic.w	r2, r2, #2
 8002958:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002968:	f043 0202 	orr.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f846 	bl	8002a14 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01b      	beq.n	80029ca <HAL_LTDC_IRQHandler+0xfe>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f002 f9b1 	bl	8004d2c <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_LTDC_IRQHandler+0x140>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e8:	f022 0208 	bic.w	r2, r2, #8
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2208      	movs	r2, #8
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f80e 	bl	8002a28 <HAL_LTDC_ReloadEventCallback>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a3c:	b5b0      	push	{r4, r5, r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_LTDC_ConfigLayer+0x1a>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e02c      	b.n	8002ab0 <HAL_LTDC_ConfigLayer+0x74>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2134      	movs	r1, #52	; 0x34
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4614      	mov	r4, r2
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa63 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}

08002ab8 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_LTDC_ConfigColorKeying+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e031      	b.n	8002b36 <HAL_LTDC_ConfigColorKeying+0x7e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	01db      	lsls	r3, r3, #7
 8002aec:	4413      	add	r3, r2
 8002aee:	3384      	adds	r3, #132	; 0x84
 8002af0:	461a      	mov	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	440b      	add	r3, r1
 8002afe:	3384      	adds	r3, #132	; 0x84
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b06:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	01db      	lsls	r3, r3, #7
 8002b12:	4413      	add	r3, r2
 8002b14:	3384      	adds	r3, #132	; 0x84
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b089      	sub	sp, #36	; 0x24
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_LTDC_ConfigCLUT+0x28>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e059      	b.n	8002c1e <HAL_LTDC_ConfigCLUT+0xdc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2202      	movs	r2, #2
 8002b76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e041      	b.n	8002c04 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2134      	movs	r1, #52	; 0x34
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3348      	adds	r3, #72	; 0x48
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d114      	bne.n	8002bbe <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	061a      	lsls	r2, r3, #24
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	e010      	b.n	8002be0 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	061a      	lsls	r2, r3, #24
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3304      	adds	r3, #4
 8002be4:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	01db      	lsls	r3, r3, #7
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3384      	adds	r3, #132	; 0x84
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3b9      	bcc.n	8002b80 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_LTDC_EnableColorKeying+0x18>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e027      	b.n	8002c92 <HAL_LTDC_EnableColorKeying+0x68>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	01db      	lsls	r3, r3, #7
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3384      	adds	r3, #132	; 0x84
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	01db      	lsls	r3, r3, #7
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3384      	adds	r3, #132	; 0x84
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_LTDC_DisableColorKeying+0x18>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e027      	b.n	8002d06 <HAL_LTDC_DisableColorKeying+0x68>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3384      	adds	r3, #132	; 0x84
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	01db      	lsls	r3, r3, #7
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3384      	adds	r3, #132	; 0x84
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 0302 	bic.w	r3, r3, #2
 8002cea:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_LTDC_EnableCLUT+0x18>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e027      	b.n	8002d7a <HAL_LTDC_EnableCLUT+0x68>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	4413      	add	r3, r2
 8002d46:	3384      	adds	r3, #132	; 0x84
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	01db      	lsls	r3, r3, #7
 8002d54:	440b      	add	r3, r1
 8002d56:	3384      	adds	r3, #132	; 0x84
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_LTDC_SetWindowPosition+0x1c>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e033      	b.n	8002e0a <HAL_LTDC_SetWindowPosition+0x84>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2234      	movs	r2, #52	; 0x34
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	3338      	adds	r3, #56	; 0x38
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	441a      	add	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	441a      	add	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	6979      	ldr	r1, [r7, #20]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f8b6 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_LTDC_SetAlpha+0x1a>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e024      	b.n	8002e76 <HAL_LTDC_SetAlpha+0x64>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2234      	movs	r2, #52	; 0x34
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	3338      	adds	r3, #56	; 0x38
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f880 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2201      	movs	r2, #1
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_LTDC_SetAddress+0x1a>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e024      	b.n	8002ee2 <HAL_LTDC_SetAddress+0x64>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2234      	movs	r2, #52	; 0x34
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f84a 	bl	8002f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_LTDC_ProgramLineEvent+0x18>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e023      	b.n	8002f4c <HAL_LTDC_ProgramLineEvent+0x60>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40016800 	.word	0x40016800

08002f5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	; 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	4413      	add	r3, r2
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	01db      	lsls	r3, r3, #7
 8002f94:	4413      	add	r3, r2
 8002f96:	3384      	adds	r3, #132	; 0x84
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	01db      	lsls	r3, r3, #7
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3384      	adds	r3, #132	; 0x84
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fae:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	4413      	add	r3, r2
 8002fbc:	3384      	adds	r3, #132	; 0x84
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd0:	4413      	add	r3, r2
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe8:	4413      	add	r3, r2
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	01db      	lsls	r3, r3, #7
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3384      	adds	r3, #132	; 0x84
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	01db      	lsls	r3, r3, #7
 8003008:	440b      	add	r3, r1
 800300a:	3384      	adds	r3, #132	; 0x84
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003012:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	4413      	add	r3, r2
 8003020:	3384      	adds	r3, #132	; 0x84
 8003022:	4619      	mov	r1, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003032:	4413      	add	r3, r2
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	4413      	add	r3, r2
 8003048:	3384      	adds	r3, #132	; 0x84
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	440b      	add	r3, r1
 8003058:	3384      	adds	r3, #132	; 0x84
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f023 0307 	bic.w	r3, r3, #7
 8003060:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4413      	add	r3, r2
 800306e:	3384      	adds	r3, #132	; 0x84
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	4413      	add	r3, r2
 80030a0:	3384      	adds	r3, #132	; 0x84
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	01db      	lsls	r3, r3, #7
 80030ae:	4413      	add	r3, r2
 80030b0:	3384      	adds	r3, #132	; 0x84
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	4413      	add	r3, r2
 80030c4:	3384      	adds	r3, #132	; 0x84
 80030c6:	4619      	mov	r1, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ce:	461a      	mov	r2, r3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4413      	add	r3, r2
 80030ea:	3384      	adds	r3, #132	; 0x84
 80030ec:	461a      	mov	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	440b      	add	r3, r1
 80030fa:	3384      	adds	r3, #132	; 0x84
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003102:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4413      	add	r3, r2
 8003110:	3384      	adds	r3, #132	; 0x84
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	01db      	lsls	r3, r3, #7
 8003124:	4413      	add	r3, r2
 8003126:	3384      	adds	r3, #132	; 0x84
 8003128:	461a      	mov	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	440b      	add	r3, r1
 8003136:	3384      	adds	r3, #132	; 0x84
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	01db      	lsls	r3, r3, #7
 800314e:	4413      	add	r3, r2
 8003150:	3384      	adds	r3, #132	; 0x84
 8003152:	4619      	mov	r1, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	01db      	lsls	r3, r3, #7
 800316a:	4413      	add	r3, r2
 800316c:	3384      	adds	r3, #132	; 0x84
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	4413      	add	r3, r2
 800317c:	3384      	adds	r3, #132	; 0x84
 800317e:	461a      	mov	r2, r3
 8003180:	2300      	movs	r3, #0
 8003182:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	01db      	lsls	r3, r3, #7
 800318e:	4413      	add	r3, r2
 8003190:	3384      	adds	r3, #132	; 0x84
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 80031a2:	2304      	movs	r3, #4
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e01b      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 80031b0:	2303      	movs	r3, #3
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e014      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00b      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d007      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d003      	beq.n	80031d6 <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d102      	bne.n	80031dc <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e001      	b.n	80031e0 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	3384      	adds	r3, #132	; 0x84
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	440b      	add	r3, r1
 80031fc:	3384      	adds	r3, #132	; 0x84
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	01db      	lsls	r3, r3, #7
 8003210:	4413      	add	r3, r2
 8003212:	3384      	adds	r3, #132	; 0x84
 8003214:	4618      	mov	r0, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1acb      	subs	r3, r1, r3
 800322c:	69f9      	ldr	r1, [r7, #28]
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	3303      	adds	r3, #3
 8003234:	4313      	orrs	r3, r2
 8003236:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	01db      	lsls	r3, r3, #7
 8003242:	4413      	add	r3, r2
 8003244:	3384      	adds	r3, #132	; 0x84
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	01db      	lsls	r3, r3, #7
 8003252:	440b      	add	r3, r1
 8003254:	3384      	adds	r3, #132	; 0x84
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800325c:	f023 0307 	bic.w	r3, r3, #7
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	01db      	lsls	r3, r3, #7
 800326c:	4413      	add	r3, r2
 800326e:	3384      	adds	r3, #132	; 0x84
 8003270:	461a      	mov	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	01db      	lsls	r3, r3, #7
 8003282:	4413      	add	r3, r2
 8003284:	3384      	adds	r3, #132	; 0x84
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	01db      	lsls	r3, r3, #7
 8003292:	440b      	add	r3, r1
 8003294:	3384      	adds	r3, #132	; 0x84
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6013      	str	r3, [r2, #0]
}
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_PWREx_EnableOverDrive+0x90>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_PWREx_EnableOverDrive+0x94>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fd f976 	bl	80005c8 <HAL_GetTick>
 80032dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032de:	e009      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e0:	f7fd f972 	bl	80005c8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e01f      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d1ee      	bne.n	80032e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003308:	f7fd f95e 	bl	80005c8 <HAL_GetTick>
 800330c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800330e:	e009      	b.n	8003324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003310:	f7fd f95a 	bl	80005c8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331e:	d901      	bls.n	8003324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e007      	b.n	8003334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_PWREx_EnableOverDrive+0x98>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003330:	d1ee      	bne.n	8003310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	420e0040 	.word	0x420e0040
 8003344:	40007000 	.word	0x40007000
 8003348:	420e0044 	.word	0x420e0044

0800334c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e22d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d075      	beq.n	8003456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336a:	4ba3      	ldr	r3, [pc, #652]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00c      	beq.n	8003390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003376:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337e:	2b08      	cmp	r3, #8
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b9d      	ldr	r3, [pc, #628]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b99      	ldr	r3, [pc, #612]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d05b      	beq.n	8003454 <HAL_RCC_OscConfig+0x108>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d157      	bne.n	8003454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e208      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x74>
 80033b2:	4a91      	ldr	r2, [pc, #580]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	4b90      	ldr	r3, [pc, #576]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x98>
 80033ca:	4a8b      	ldr	r2, [pc, #556]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	4b8a      	ldr	r3, [pc, #552]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4a88      	ldr	r2, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	4b87      	ldr	r3, [pc, #540]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xb0>
 80033e4:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	4b84      	ldr	r3, [pc, #528]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4a81      	ldr	r2, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033f2:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fd f8e0 	bl	80005c8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340c:	f7fd f8dc 	bl	80005c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1cd      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xc0>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd f8cc 	bl	80005c8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd f8c8 	bl	80005c8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1b9      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0xe8>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e18d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4956      	ldr	r1, [pc, #344]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	4b55      	ldr	r3, [pc, #340]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_OscConfig+0x2b0>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c2:	f7fd f881 	bl	80005c8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fd f87d 	bl	80005c8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e16e      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b46      	ldr	r3, [pc, #280]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4943      	ldr	r1, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_OscConfig+0x2b0>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd f860 	bl	80005c8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350c:	f7fd f85c 	bl	80005c8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e14d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d030      	beq.n	8003598 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_RCC_OscConfig+0x2b4>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7fd f840 	bl	80005c8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd f83c 	bl	80005c8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e12d      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x200>
 800356a:	e015      	b.n	8003598 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356c:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_RCC_OscConfig+0x2b4>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7fd f829 	bl	80005c8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357a:	f7fd f825 	bl	80005c8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e116      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a0 	beq.w	80036e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_OscConfig+0x2b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fc ffeb 	bl	80005c8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e011      	b.n	800361a <HAL_RCC_OscConfig+0x2ce>
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	42470000 	.word	0x42470000
 8003600:	42470e80 	.word	0x42470e80
 8003604:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fc ffde 	bl	80005c8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e0cf      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <HAL_RCC_OscConfig+0x478>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d106      	bne.n	800363c <HAL_RCC_OscConfig+0x2f0>
 800362e:	4a66      	ldr	r2, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003630:	4b65      	ldr	r3, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	e01c      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x312>
 8003644:	4a60      	ldr	r2, [pc, #384]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003646:	4b60      	ldr	r3, [pc, #384]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4a5d      	ldr	r2, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003652:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x32a>
 800365e:	4a5a      	ldr	r2, [pc, #360]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003660:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4a57      	ldr	r2, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800366c:	4b56      	ldr	r3, [pc, #344]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fc ffa3 	bl	80005c8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fc ff9f 	bl	80005c8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e08e      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369c:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x33a>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fc ff8d 	bl	80005c8 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fc ff89 	bl	80005c8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e078      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4a3b      	ldr	r2, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d064      	beq.n	80037b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d05c      	beq.n	80037b4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d141      	bne.n	8003786 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003708:	f7fc ff5e 	bl	80005c8 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003710:	f7fc ff5a 	bl	80005c8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e04b      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372e:	4926      	ldr	r1, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	019b      	lsls	r3, r3, #6
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	3b01      	subs	r3, #1
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	061b      	lsls	r3, r3, #24
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fc ff33 	bl	80005c8 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fc ff2f 	bl	80005c8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e020      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x41a>
 8003784:	e018      	b.n	80037b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <HAL_RCC_OscConfig+0x480>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fc ff1c 	bl	80005c8 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fc ff18 	bl	80005c8 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e009      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCC_OscConfig+0x47c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x448>
 80037b2:	e001      	b.n	80037b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40007000 	.word	0x40007000
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470060 	.word	0x42470060

080037d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0ca      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 020f 	and.w	r2, r3, #15
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20c      	bcs.n	800380c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b64      	ldr	r3, [pc, #400]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b62      	ldr	r3, [pc, #392]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0b6      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	494f      	ldr	r1, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800384a:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d044      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	4b46      	ldr	r3, [pc, #280]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d119      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d003      	beq.n	800388e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388a:	2b03      	cmp	r3, #3
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	4b3e      	ldr	r3, [pc, #248]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e065      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ae:	4936      	ldr	r1, [pc, #216]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 0203 	bic.w	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c0:	f7fc fe82 	bl	80005c8 <HAL_GetTick>
 80038c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c6:	e00a      	b.n	80038de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c8:	f7fc fe7e 	bl	80005c8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04d      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d1eb      	bne.n	80038c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d90c      	bls.n	8003918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e030      	b.n	800397a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4918      	ldr	r1, [pc, #96]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4911      	ldr	r1, [pc, #68]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003956:	f000 f81d 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1b8>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	5cd3      	ldrb	r3, [r2, r3]
 800396a:	fa21 f303 	lsr.w	r3, r1, r3
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fc fde4 	bl	8000540 <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00
 8003988:	40023800 	.word	0x40023800
 800398c:	08012a10 	.word	0x08012a10
 8003990:	2000000c 	.word	0x2000000c

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800399c:	2200      	movs	r2, #0
 800399e:	60fa      	str	r2, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	617a      	str	r2, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80039a8:	2200      	movs	r2, #0
 80039aa:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ac:	4a51      	ldr	r2, [pc, #324]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039ae:	6892      	ldr	r2, [r2, #8]
 80039b0:	f002 020c 	and.w	r2, r2, #12
 80039b4:	2a04      	cmp	r2, #4
 80039b6:	d007      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039b8:	2a08      	cmp	r2, #8
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x3a>
 80039bc:	2a00      	cmp	r2, #0
 80039be:	f040 8090 	bne.w	8003ae2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c2:	4b4d      	ldr	r3, [pc, #308]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x164>)
 80039c4:	613b      	str	r3, [r7, #16]
       break;
 80039c6:	e08f      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	e08c      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ce:	4a49      	ldr	r2, [pc, #292]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039d6:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d8:	4a46      	ldr	r2, [pc, #280]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80039e0:	2a00      	cmp	r2, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e4:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	099b      	lsrs	r3, r3, #6
 80039ea:	f04f 0400 	mov.w	r4, #0
 80039ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	ea03 0301 	and.w	r3, r3, r1
 80039fa:	ea04 0402 	and.w	r4, r4, r2
 80039fe:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 8003a00:	fb02 f104 	mul.w	r1, r2, r4
 8003a04:	2200      	movs	r2, #0
 8003a06:	fb02 f203 	mul.w	r2, r2, r3
 8003a0a:	440a      	add	r2, r1
 8003a0c:	493b      	ldr	r1, [pc, #236]	; (8003afc <HAL_RCC_GetSysClockFreq+0x168>)
 8003a0e:	fba3 0101 	umull	r0, r1, r3, r1
 8003a12:	1853      	adds	r3, r2, r1
 8003a14:	4619      	mov	r1, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	f7fc fbe4 	bl	80001ec <__aeabi_uldivmod>
 8003a24:	4603      	mov	r3, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e04c      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2c:	4a31      	ldr	r2, [pc, #196]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a2e:	6852      	ldr	r2, [r2, #4]
 8003a30:	0992      	lsrs	r2, r2, #6
 8003a32:	4611      	mov	r1, r2
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003a3c:	f04f 0600 	mov.w	r6, #0
 8003a40:	ea05 0501 	and.w	r5, r5, r1
 8003a44:	ea06 0602 	and.w	r6, r6, r2
 8003a48:	4629      	mov	r1, r5
 8003a4a:	4632      	mov	r2, r6
 8003a4c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003a50:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003a54:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003a58:	4651      	mov	r1, sl
 8003a5a:	465a      	mov	r2, fp
 8003a5c:	46aa      	mov	sl, r5
 8003a5e:	46b3      	mov	fp, r6
 8003a60:	4655      	mov	r5, sl
 8003a62:	465e      	mov	r6, fp
 8003a64:	1b4d      	subs	r5, r1, r5
 8003a66:	eb62 0606 	sbc.w	r6, r2, r6
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	0194      	lsls	r4, r2, #6
 8003a70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a74:	018b      	lsls	r3, r1, #6
 8003a76:	1a5b      	subs	r3, r3, r1
 8003a78:	eb64 0402 	sbc.w	r4, r4, r2
 8003a7c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003a80:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003a84:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003a88:	4643      	mov	r3, r8
 8003a8a:	464c      	mov	r4, r9
 8003a8c:	4655      	mov	r5, sl
 8003a8e:	465e      	mov	r6, fp
 8003a90:	18ed      	adds	r5, r5, r3
 8003a92:	eb46 0604 	adc.w	r6, r6, r4
 8003a96:	462b      	mov	r3, r5
 8003a98:	4634      	mov	r4, r6
 8003a9a:	02a2      	lsls	r2, r4, #10
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa4:	607a      	str	r2, [r7, #4]
 8003aa6:	029b      	lsls	r3, r3, #10
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	f7fc fb96 	bl	80001ec <__aeabi_uldivmod>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	613b      	str	r3, [r7, #16]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ae4:	613b      	str	r3, [r7, #16]
      break;
 8003ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae8:	693b      	ldr	r3, [r7, #16]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	40023800 	.word	0x40023800
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	017d7840 	.word	0x017d7840

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000000c 	.word	0x2000000c

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	f7ff fff0 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4a03      	ldr	r2, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08012a20 	.word	0x08012a20

08003b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d061      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b68:	4ba3      	ldr	r3, [pc, #652]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b6e:	f7fc fd2b 	bl	80005c8 <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b76:	f7fc fd27 	bl	80005c8 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e177      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b88:	4b9c      	ldr	r3, [pc, #624]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba0:	4996      	ldr	r1, [pc, #600]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	019a      	lsls	r2, r3, #6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	071b      	lsls	r3, r3, #28
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01f      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	0f1b      	lsrs	r3, r3, #28
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bce:	498b      	ldr	r1, [pc, #556]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	019a      	lsls	r2, r3, #6
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003be8:	4984      	ldr	r1, [pc, #528]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bea:	4b84      	ldr	r3, [pc, #528]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f023 021f 	bic.w	r2, r3, #31
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c00:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c06:	f7fc fcdf 	bl	80005c8 <HAL_GetTick>
 8003c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c0e:	f7fc fcdb 	bl	80005c8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e12b      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d079      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c44:	4b6e      	ldr	r3, [pc, #440]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4a:	f7fc fcbd 	bl	80005c8 <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c52:	f7fc fcb9 	bl	80005c8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e109      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c64:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c70:	d0ef      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c7e:	4b5f      	ldr	r3, [pc, #380]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	0f1b      	lsrs	r3, r3, #28
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c8c:	495b      	ldr	r1, [pc, #364]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	071b      	lsls	r3, r3, #28
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ca6:	4955      	ldr	r1, [pc, #340]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ca8:	4b54      	ldr	r3, [pc, #336]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	0e1b      	lsrs	r3, r3, #24
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cda:	4948      	ldr	r1, [pc, #288]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	071b      	lsls	r3, r3, #28
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf4:	4941      	ldr	r1, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fc fc5a 	bl	80005c8 <HAL_GetTick>
 8003d14:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d18:	f7fc fc56 	bl	80005c8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0a6      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2a:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d36:	d1ef      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808d 	beq.w	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d62:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6e:	f7fc fc2b 	bl	80005c8 <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d76:	f7fc fc27 	bl	80005c8 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e077      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d88:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d039      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d032      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dc8:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fc fbf5 	bl	80005c8 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	e014      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fc fbf1 	bl	80005c8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d90b      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03f      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003df8:	42470068 	.word	0x42470068
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	42470070 	.word	0x42470070
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0e4      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e24:	d10d      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003e26:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003e42:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e44:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e4c:	6093      	str	r3, [r2, #8]
 8003e4e:	490c      	ldr	r1, [pc, #48]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e6c:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e74:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	424711e0 	.word	0x424711e0

08003e88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e025      	b.n	8003ee8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f003 fba9 	bl	8007608 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f000 fcea 	bl	80048a2 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	f000 fd55 	bl	8004988 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d101      	bne.n	8003f0c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e018      	b.n	8003f3e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fdb2 	bl	8004a86 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d104      	bne.n	8003f34 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003f32:	e003      	b.n	8003f3c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d101      	bne.n	8003f60 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e00e      	b.n	8003f7e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6839      	ldr	r1, [r7, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fdc5 	bl	8004afe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e055      	b.n	8004044 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f003 fa2c 	bl	8007410 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6851      	ldr	r1, [r2, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6892      	ldr	r2, [r2, #8]
 8003fdc:	4311      	orrs	r1, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68d2      	ldr	r2, [r2, #12]
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6912      	ldr	r2, [r2, #16]
 8003fe8:	4311      	orrs	r1, r2
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6952      	ldr	r2, [r2, #20]
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6992      	ldr	r2, [r2, #24]
 8003ff4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	69d2      	ldr	r2, [r2, #28]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a12      	ldr	r2, [r2, #32]
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6992      	ldr	r2, [r2, #24]
 8004016:	0c12      	lsrs	r2, r2, #16
 8004018:	f002 0104 	and.w	r1, r2, #4
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	69d2      	ldr	r2, [r2, #28]
 800402e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004032:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_SPI_Transmit+0x26>
 800406e:	2302      	movs	r3, #2
 8004070:	e123      	b.n	80042ba <HAL_SPI_Transmit+0x26e>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407a:	f7fc faa5 	bl	80005c8 <HAL_GetTick>
 800407e:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004090:	e10a      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_Transmit+0x52>
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a2:	e101      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d107      	bne.n	80040fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d007      	beq.n	800411a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d147      	bne.n	80041b4 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_SPI_Transmit+0xea>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d138      	bne.n	80041a8 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	8812      	ldrh	r2, [r2, #0]
 800413e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3302      	adds	r3, #2
 8004144:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004154:	e028      	b.n	80041a8 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d10f      	bne.n	8004184 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	8812      	ldrh	r2, [r2, #0]
 800416c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	3302      	adds	r3, #2
 8004172:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	86da      	strh	r2, [r3, #54]	; 0x36
 8004182:	e011      	b.n	80041a8 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_SPI_Transmit+0x156>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004190:	d00a      	beq.n	80041a8 <HAL_SPI_Transmit+0x15c>
 8004192:	f7fc fa19 	bl	80005c8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a6:	e07f      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d1      	bne.n	8004156 <HAL_SPI_Transmit+0x10a>
 80041b2:	e048      	b.n	8004246 <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <HAL_SPI_Transmit+0x17a>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d13a      	bne.n	800423c <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	7812      	ldrb	r2, [r2, #0]
 80041d0:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041e6:	e029      	b.n	800423c <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d110      	bne.n	8004218 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3301      	adds	r3, #1
 8004206:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	86da      	strh	r2, [r3, #54]	; 0x36
 8004216:	e011      	b.n	800423c <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_SPI_Transmit+0x1ea>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004224:	d00a      	beq.n	800423c <HAL_SPI_Transmit+0x1f0>
 8004226:	f7fc f9cf 	bl	80005c8 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	77fb      	strb	r3, [r7, #31]
          goto error;
 800423a:	e035      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d0      	bne.n	80041e8 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	2102      	movs	r1, #2
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f836 	bl	80042c2 <SPI_WaitFlagStateUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004260:	e022      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f894 	bl	8004394 <SPI_CheckFlag_BSY>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800427c:	e014      	b.n	80042a8 <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
 80042ce:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80042d0:	e04d      	b.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d8:	d049      	beq.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d007      	beq.n	80042f0 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80042e0:	f7fc f972 	bl	80005c8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad2      	subs	r2, r2, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d33e      	bcc.n	800436e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042fe:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004308:	d111      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0x6c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004312:	d004      	beq.n	800431e <SPI_WaitFlagStateUntilTimeout+0x5c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d107      	bne.n	800432e <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d110      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004346:	400b      	ands	r3, r1
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004358:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00e      	b.n	800438c <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d101      	bne.n	8004382 <SPI_WaitFlagStateUntilTimeout+0xc0>
 800437e:	2201      	movs	r2, #1
 8004380:	e000      	b.n	8004384 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004382:	2200      	movs	r2, #0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d1a3      	bne.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff89 	bl	80042c2 <SPI_WaitFlagStateUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e000      	b.n	80043c8 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e01d      	b.n	800441e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f003 f852 	bl	80074a0 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 f944 	bl	800469c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d122      	bne.n	8004482 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8f8 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ea 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8fb 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d122      	bne.n	80044d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d11b      	bne.n	80044d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f06f 0204 	mvn.w	r2, #4
 80044a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8ce 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 80044c2:	e005      	b.n	80044d0 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8c0 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8d1 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d122      	bne.n	800452a <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b08      	cmp	r3, #8
 80044f0:	d11b      	bne.n	800452a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f06f 0208 	mvn.w	r2, #8
 80044fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2204      	movs	r2, #4
 8004500:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8a4 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 8004516:	e005      	b.n	8004524 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f896 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8a7 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d122      	bne.n	800457e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b10      	cmp	r3, #16
 8004544:	d11b      	bne.n	800457e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f06f 0210 	mvn.w	r2, #16
 800454e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2208      	movs	r2, #8
 8004554:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f87a 	bl	800465e <HAL_TIM_IC_CaptureCallback>
 800456a:	e005      	b.n	8004578 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f86c 	bl	800464a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f87d 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10e      	bne.n	80045aa <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0201 	mvn.w	r2, #1
 80045a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f846 	bl	8004636 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d10e      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d107      	bne.n	80045d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f95c 	bl	800488e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d10e      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d107      	bne.n	8004602 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f842 	bl	8004686 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d10e      	bne.n	800462e <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d107      	bne.n	800462e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f06f 0220 	mvn.w	r2, #32
 8004626:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f926 	bl	800487a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a44      	ldr	r2, [pc, #272]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a41      	ldr	r2, [pc, #260]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <TIM_Base_SetConfig+0x130>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x44>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3e      	ldr	r2, [pc, #248]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d101      	bne.n	80046e4 <TIM_Base_SetConfig+0x48>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <TIM_Base_SetConfig+0x4a>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a31      	ldr	r2, [pc, #196]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d02b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d027      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2e      	ldr	r2, [pc, #184]	; (80047c8 <TIM_Base_SetConfig+0x12c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d023      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <TIM_Base_SetConfig+0x130>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01f      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <TIM_Base_SetConfig+0x134>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d017      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <TIM_Base_SetConfig+0x13c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <TIM_Base_SetConfig+0x140>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <TIM_Base_SetConfig+0x144>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a27      	ldr	r2, [pc, #156]	; (80047e4 <TIM_Base_SetConfig+0x148>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <TIM_Base_SetConfig+0x14c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a25      	ldr	r2, [pc, #148]	; (80047ec <TIM_Base_SetConfig+0x150>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <TIM_Base_SetConfig+0xc4>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <TIM_Base_SetConfig+0xc6>
 8004760:	2300      	movs	r3, #0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <TIM_Base_SetConfig+0x128>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x102>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a0e      	ldr	r2, [pc, #56]	; (80047d4 <TIM_Base_SetConfig+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d101      	bne.n	80047a2 <TIM_Base_SetConfig+0x106>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <TIM_Base_SetConfig+0x108>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800
 80047e4:	40001800 	.word	0x40001800
 80047e8:	40001c00 	.word	0x40001c00
 80047ec:	40002000 	.word	0x40002000

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004826:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	6851      	ldr	r1, [r2, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6892      	ldr	r2, [r2, #8]
 8004844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004848:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	6891      	ldr	r1, [r2, #8]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
} 
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d029      	beq.n	8004910 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048cc:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048d6:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80048dc:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80048e2:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80048e8:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80048ee:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80048f4:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80048fa:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004900:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e034      	b.n	800497a <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491c:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004926:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800492c:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004944:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800494e:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004954:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800495a:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004960:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8004966:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d02e      	beq.n	8004a00 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049ae:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049c8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049d2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049dc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049f0:	4313      	orrs	r3, r2
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e03b      	b.n	8004a78 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a10:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a36:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a46:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a50:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a5a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a64:	4313      	orrs	r3, r2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004aa2:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8004aac:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004abe:	f7fb fd83 	bl	80005c8 <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ac4:	e010      	b.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004acc:	d00c      	beq.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <FMC_SDRAM_SendCommand+0x5e>
 8004ad4:	f7fb fd78 	bl	80005c8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad2      	subs	r2, r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d901      	bls.n	8004ae8 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e006      	b.n	8004af6 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e8      	bne.n	8004ac6 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8004b28:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 8004b2c:	4803      	ldr	r0, [pc, #12]	; (8004b3c <GUI_X_Config+0x18>)
 8004b2e:	f009 ffe5 	bl	800eafc <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8004b32:	4803      	ldr	r0, [pc, #12]	; (8004b40 <GUI_X_Config+0x1c>)
 8004b34:	f009 fbd6 	bl	800e2e4 <GUI_SetDefaultFont>
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	2000006c 	.word	0x2000006c
 8004b40:	080136e0 	.word	0x080136e0

08004b44 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <GUI_X_GetTime+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20022d14 	.word	0x20022d14

08004b5c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <GUI_X_Delay+0x2c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 8004b6e:	bf00      	nop
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <GUI_X_Delay+0x2c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dcf9      	bgt.n	8004b70 <GUI_X_Delay+0x14>
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20022d14 	.word	0x20022d14

08004b8c <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <Color2IndexBulk_M8888IDMA2D>:
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems);
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex);
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens);

DEFINEDMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af02      	add	r7, sp, #8
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	70fb      	strb	r3, [r7, #3]
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	2300      	movs	r3, #0
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 f88d 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <Index2ColorBulk_M8888IDMA2D>:
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af02      	add	r7, sp, #8
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	70fb      	strb	r3, [r7, #3]
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f001 f85f 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <Color2IndexBulk_M888DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888)
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	70fb      	strb	r3, [r7, #3]
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f001 f865 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <Index2ColorBulk_M888DMA2D>:
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af02      	add	r7, sp, #8
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	70fb      	strb	r3, [r7, #3]
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f001 f837 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <Color2IndexBulk_M565DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b086      	sub	sp, #24
 8004c3e:	af02      	add	r7, sp, #8
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	70fb      	strb	r3, [r7, #3]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f001 f83d 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <Index2ColorBulk_M565DMA2D>:
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	70fb      	strb	r3, [r7, #3]
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	2302      	movs	r3, #2
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f001 f80f 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <Color2IndexBulk_M1555IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	70fb      	strb	r3, [r7, #3]
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f001 f815 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004caa:	bf00      	nop
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <Index2ColorBulk_M1555IDMA2D>:
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af02      	add	r7, sp, #8
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	70fb      	strb	r3, [r7, #3]
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 ffe7 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <Color2IndexBulk_M4444IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af02      	add	r7, sp, #8
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	70fb      	strb	r3, [r7, #3]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	2304      	movs	r3, #4
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 ffed 	bl	8005cd4 <DMA2D_Color2IndexBulk>
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <Index2ColorBulk_M4444IDMA2D>:
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af02      	add	r7, sp, #8
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	70fb      	strb	r3, [r7, #3]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	2304      	movs	r3, #4
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 ffbf 	bl	8005ca0 <DMA2D_Index2ColorBulk>
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t Addr;
  uint32_t layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e066      	b.n	8004e08 <HAL_LTDC_LineEventCallback+0xdc>
  {
    if (layer_prop[layer].pending_buffer >= 0)
 8004d3a:	4939      	ldr	r1, [pc, #228]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3304      	adds	r3, #4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	db58      	blt.n	8004e02 <HAL_LTDC_LineEventCallback+0xd6>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8004d50:	4933      	ldr	r1, [pc, #204]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	482f      	ldr	r0, [pc, #188]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4403      	add	r3, r0
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	4c2b      	ldr	r4, [pc, #172]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4423      	add	r3, r4
 8004d80:	3310      	adds	r3, #16
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fb03 f000 	mul.w	r0, r3, r0
 8004d88:	4c25      	ldr	r4, [pc, #148]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4423      	add	r3, r4
 8004d96:	3304      	adds	r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	fb03 f000 	mul.w	r0, r3, r0
 8004d9e:	4c20      	ldr	r4, [pc, #128]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4423      	add	r3, r4
 8004dac:	3314      	adds	r3, #20
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	fb03 f300 	mul.w	r3, r3, r0
 8004db4:	440b      	add	r3, r1
 8004db6:	60bb      	str	r3, [r7, #8]
      HAL_LTDC_SetAddress(hltdc, Addr, layer);
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fe f85e 	bl	8002e7e <HAL_LTDC_SetAddress>

	  __HAL_LTDC_RELOAD_CONFIG(hltdc);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4912      	ldr	r1, [pc, #72]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	3304      	adds	r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	f008 fb4e 	bl	800d488 <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8004dec:	490c      	ldr	r1, [pc, #48]	; (8004e20 <HAL_LTDC_LineEventCallback+0xf4>)
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e00:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d095      	beq.n	8004d3a <HAL_LTDC_LineEventCallback+0xe>
    }
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fe f86b 	bl	8002eec <HAL_LTDC_ProgramLineEvent>
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd90      	pop	{r4, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2001f8ac 	.word	0x2001f8ac

08004e24 <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
  uint32_t i;

  LCD_LL_Init();
 8004e2a:	f000 fa7f 	bl	800532c <LCD_LL_Init>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	4958      	ldr	r1, [pc, #352]	; (8004f94 <LCD_X_Config+0x170>)
 8004e34:	4858      	ldr	r0, [pc, #352]	; (8004f98 <LCD_X_Config+0x174>)
 8004e36:	f009 f9e5 	bl	800e204 <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f006 fa14 	bl	800b268 <LCD_GetSwapXYEx>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <LCD_X_Config+0x3c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004e46:	22f0      	movs	r2, #240	; 0xf0
 8004e48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f006 f95b 	bl	800b108 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004e52:	22f0      	movs	r2, #240	; 0xf0
 8004e54:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f006 f93d 	bl	800b0d8 <LCD_SetVSizeEx>
 8004e5e:	e00b      	b.n	8004e78 <LCD_X_Config+0x54>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8004e60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e64:	21f0      	movs	r1, #240	; 0xf0
 8004e66:	2000      	movs	r0, #0
 8004e68:	f006 f94e 	bl	800b108 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004e6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004e70:	21f0      	movs	r1, #240	; 0xf0
 8004e72:	2000      	movs	r0, #0
 8004e74:	f006 f930 	bl	800b0d8 <LCD_SetVSizeEx>
      LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
    }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 8004e78:	4b48      	ldr	r3, [pc, #288]	; (8004f9c <LCD_X_Config+0x178>)
 8004e7a:	4a49      	ldr	r2, [pc, #292]	; (8004fa0 <LCD_X_Config+0x17c>)
 8004e7c:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER;
#endif

   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	e07f      	b.n	8004f84 <LCD_X_Config+0x160>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 8004e84:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <LCD_X_Config+0x180>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e8c:	4843      	ldr	r0, [pc, #268]	; (8004f9c <LCD_X_Config+0x178>)
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4403      	add	r3, r0
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8004e9e:	493f      	ldr	r1, [pc, #252]	; (8004f9c <LCD_X_Config+0x178>)
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3304      	adds	r3, #4
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb2:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4939      	ldr	r1, [pc, #228]	; (8004f9c <LCD_X_Config+0x178>)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f006 f8f0 	bl	800b0ac <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f006 f9be 	bl	800b250 <LCD_GetBitsPerPixelEx>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	10d9      	asrs	r1, r3, #3
 8004ed8:	4830      	ldr	r0, [pc, #192]	; (8004f9c <LCD_X_Config+0x178>)
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4403      	add	r3, r0
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	; (8004fa8 <LCD_X_Config+0x184>)
 8004eee:	2121      	movs	r1, #33	; 0x21
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f006 f969 	bl	800b1c8 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <LCD_X_Config+0x188>)
 8004efa:	2123      	movs	r1, #35	; 0x23
 8004efc:	4618      	mov	r0, r3
 8004efe:	f006 f963 	bl	800b1c8 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    if (LCD_LL_GetPixelformat(i) <= LTDC_PIXEL_FORMAT_ARGB4444)
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa88 	bl	8005418 <LCD_LL_GetPixelformat>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d80b      	bhi.n	8004f26 <LCD_X_Config+0x102>
    {
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <LCD_X_Config+0x18c>)
 8004f12:	2119      	movs	r1, #25
 8004f14:	4618      	mov	r0, r3
 8004f16:	f006 f957 	bl	800b1c8 <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))BSP_LCD_DrawBitmap8bpp);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a25      	ldr	r2, [pc, #148]	; (8004fb4 <LCD_X_Config+0x190>)
 8004f1e:	2125      	movs	r1, #37	; 0x25
 8004f20:	4618      	mov	r0, r3
 8004f22:	f006 f951 	bl	800b1c8 <LCD_SetDevFunc>
    }

    /* Set up drawing routine for 16bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_RGB565) {
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa76 	bl	8005418 <LCD_LL_GetPixelformat>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d105      	bne.n	8004f3e <LCD_X_Config+0x11a>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))BSP_LCD_DrawBitmap16bpp);     /* Set up drawing routine for 16bpp bitmap using DMA2D. Makes only sense with RGB565 */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <LCD_X_Config+0x194>)
 8004f36:	2124      	movs	r1, #36	; 0x24
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f006 f945 	bl	800b1c8 <LCD_SetDevFunc>
    }

    /* Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination */
    GUICC_M1555I_SetCustColorConv(Color2IndexBulk_M1555IDMA2D, Index2ColorBulk_M1555IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB1555 */
 8004f3e:	491f      	ldr	r1, [pc, #124]	; (8004fbc <LCD_X_Config+0x198>)
 8004f40:	481f      	ldr	r0, [pc, #124]	; (8004fc0 <LCD_X_Config+0x19c>)
 8004f42:	f00a fb07 	bl	800f554 <GUICC_M1555I_SetCustColorConv>
    GUICC_M565_SetCustColorConv  (Color2IndexBulk_M565DMA2D,   Index2ColorBulk_M565DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB565 */
 8004f46:	491f      	ldr	r1, [pc, #124]	; (8004fc4 <LCD_X_Config+0x1a0>)
 8004f48:	481f      	ldr	r0, [pc, #124]	; (8004fc8 <LCD_X_Config+0x1a4>)
 8004f4a:	f00a f8ed 	bl	800f128 <GUICC_M565_SetCustColorConv>
    GUICC_M4444I_SetCustColorConv(Color2IndexBulk_M4444IDMA2D, Index2ColorBulk_M4444IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB4444 */
 8004f4e:	491f      	ldr	r1, [pc, #124]	; (8004fcc <LCD_X_Config+0x1a8>)
 8004f50:	481f      	ldr	r0, [pc, #124]	; (8004fd0 <LCD_X_Config+0x1ac>)
 8004f52:	f00a fa67 	bl	800f424 <GUICC_M4444I_SetCustColorConv>
    GUICC_M888_SetCustColorConv  (Color2IndexBulk_M888DMA2D,   Index2ColorBulk_M888DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB888 */
 8004f56:	491f      	ldr	r1, [pc, #124]	; (8004fd4 <LCD_X_Config+0x1b0>)
 8004f58:	481f      	ldr	r0, [pc, #124]	; (8004fd8 <LCD_X_Config+0x1b4>)
 8004f5a:	f00a f85b 	bl	800f014 <GUICC_M888_SetCustColorConv>
    GUICC_M8888I_SetCustColorConv(Color2IndexBulk_M8888IDMA2D, Index2ColorBulk_M8888IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB8888 */
 8004f5e:	491f      	ldr	r1, [pc, #124]	; (8004fdc <LCD_X_Config+0x1b8>)
 8004f60:	481f      	ldr	r0, [pc, #124]	; (8004fe0 <LCD_X_Config+0x1bc>)
 8004f62:	f00a f9b7 	bl	800f2d4 <GUICC_M8888I_SetCustColorConv>

    /* Set up custom alpha blending function using DMA2D */
    GUI_SetFuncAlphaBlending(DMA2D_AlphaBlending);                                                /* Set up custom alpha blending function using DMA2D */
 8004f66:	481f      	ldr	r0, [pc, #124]	; (8004fe4 <LCD_X_Config+0x1c0>)
 8004f68:	f007 f926 	bl	800c1b8 <GUI_SetFuncAlphaBlending>

    /* Set up custom function for translating a bitmap palette into index values.
    Required to load a bitmap palette into DMA2D CLUT in case of a 8bpp indexed bitmap */
    GUI_SetFuncGetpPalConvTable(_LCD_GetpPalConvTable);
 8004f6c:	481e      	ldr	r0, [pc, #120]	; (8004fe8 <LCD_X_Config+0x1c4>)
 8004f6e:	f009 f9b3 	bl	800e2d8 <GUI_SetFuncGetpPalConvTable>

    /* Set up a custom function for mixing up single colors using DMA2D */
    GUI_SetFuncMixColors(DMA2D_MixColors);
 8004f72:	481e      	ldr	r0, [pc, #120]	; (8004fec <LCD_X_Config+0x1c8>)
 8004f74:	f007 f926 	bl	800c1c4 <GUI_SetFuncMixColors>

    /* Set up a custom function for mixing up arrays of colors using DMA2D */
    GUI_SetFuncMixColorsBulk(LCD_MixColorsBulk);
 8004f78:	481d      	ldr	r0, [pc, #116]	; (8004ff0 <LCD_X_Config+0x1cc>)
 8004f7a:	f007 f929 	bl	800c1d0 <GUI_SetFuncMixColorsBulk>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3301      	adds	r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f43f af7c 	beq.w	8004e84 <LCD_X_Config+0x60>
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08014074 	.word	0x08014074
 8004f98:	08013de4 	.word	0x08013de4
 8004f9c:	2001f8ac 	.word	0x2001f8ac
 8004fa0:	d0200000 	.word	0xd0200000
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	08005609 	.word	0x08005609
 8004fac:	080056bd 	.word	0x080056bd
 8004fb0:	080057dd 	.word	0x080057dd
 8004fb4:	08005edd 	.word	0x08005edd
 8004fb8:	08005e0d 	.word	0x08005e0d
 8004fbc:	08004cb3 	.word	0x08004cb3
 8004fc0:	08004c8b 	.word	0x08004c8b
 8004fc4:	08004c63 	.word	0x08004c63
 8004fc8:	08004c3b 	.word	0x08004c3b
 8004fcc:	08004d03 	.word	0x08004d03
 8004fd0:	08004cdb 	.word	0x08004cdb
 8004fd4:	08004c13 	.word	0x08004c13
 8004fd8:	08004beb 	.word	0x08004beb
 8004fdc:	08004bc3 	.word	0x08004bc3
 8004fe0:	08004b9b 	.word	0x08004b9b
 8004fe4:	08005c55 	.word	0x08005c55
 8004fe8:	08005b49 	.word	0x08005b49
 8004fec:	08005a31 	.word	0x08005a31
 8004ff0:	08005d09 	.word	0x08005d09

08004ff4 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b08b      	sub	sp, #44	; 0x2c
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  int32_t r = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t addr;
  int32_t xPos, yPos;
  uint32_t Color;

  switch (Cmd)
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3b01      	subs	r3, #1
 8005008:	2b0d      	cmp	r3, #13
 800500a:	f200 8102 	bhi.w	8005212 <LCD_X_DisplayDriver+0x21e>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <LCD_X_DisplayDriver+0x20>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	0800504d 	.word	0x0800504d
 8005018:	08005213 	.word	0x08005213
 800501c:	08005055 	.word	0x08005055
 8005020:	080050bd 	.word	0x080050bd
 8005024:	080050cb 	.word	0x080050cb
 8005028:	080050dd 	.word	0x080050dd
 800502c:	0800516d 	.word	0x0800516d
 8005030:	08005157 	.word	0x08005157
 8005034:	080050ef 	.word	0x080050ef
 8005038:	080051bb 	.word	0x080051bb
 800503c:	08005213 	.word	0x08005213
 8005040:	080051cb 	.word	0x080051cb
 8005044:	080051e7 	.word	0x080051e7
 8005048:	080050a5 	.word	0x080050a5
  {
  case LCD_X_INITCONTROLLER:
    LCD_LL_LayerInit(LayerIndex);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8ed 	bl	800522c <LCD_LL_LayerInit>
    break;
 8005052:	e0e1      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETORG:
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8005054:	4973      	ldr	r1, [pc, #460]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6858      	ldr	r0, [r3, #4]
 8005068:	4c6e      	ldr	r4, [pc, #440]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4423      	add	r3, r4
 8005076:	330c      	adds	r3, #12
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	fb03 f000 	mul.w	r0, r3, r0
 800507e:	4c69      	ldr	r4, [pc, #420]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4423      	add	r3, r4
 800508c:	3314      	adds	r3, #20
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fb03 f300 	mul.w	r3, r3, r0
 8005094:	440b      	add	r3, r1
 8005096:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	6a39      	ldr	r1, [r7, #32]
 800509c:	4862      	ldr	r0, [pc, #392]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 800509e:	f7fd feee 	bl	8002e7e <HAL_LTDC_SetAddress>
    break;
 80050a2:	e0b9      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SHOWBUFFER:
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6819      	ldr	r1, [r3, #0]
 80050a8:	485e      	ldr	r0, [pc, #376]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4403      	add	r3, r0
 80050b6:	3304      	adds	r3, #4
 80050b8:	6019      	str	r1, [r3, #0]
    break;
 80050ba:	e0ad      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETLUTENTRY:
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4859      	ldr	r0, [pc, #356]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050c4:	f7fd fd3d 	bl	8002b42 <HAL_LTDC_ConfigCLUT>
    break;
 80050c8:	e0a6      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_ON:
    __HAL_LTDC_ENABLE(&hltdc);
 80050ca:	4b57      	ldr	r3, [pc, #348]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a56      	ldr	r2, [pc, #344]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	6992      	ldr	r2, [r2, #24]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	619a      	str	r2, [r3, #24]
    break;
 80050da:	e09d      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_OFF:
    __HAL_LTDC_DISABLE(&hltdc);
 80050dc:	4b52      	ldr	r3, [pc, #328]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a51      	ldr	r2, [pc, #324]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	6992      	ldr	r2, [r2, #24]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	619a      	str	r2, [r3, #24]
    break;
 80050ec:	e094      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d113      	bne.n	800511e <LCD_X_DisplayDriver+0x12a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 80050f6:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	01db      	lsls	r3, r3, #7
 8005100:	4413      	add	r3, r2
 8005102:	3384      	adds	r3, #132	; 0x84
 8005104:	461a      	mov	r2, r3
 8005106:	4b48      	ldr	r3, [pc, #288]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4619      	mov	r1, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	01db      	lsls	r3, r3, #7
 8005110:	440b      	add	r3, r1
 8005112:	3384      	adds	r3, #132	; 0x84
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e012      	b.n	8005144 <LCD_X_DisplayDriver+0x150>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 800511e:	4b42      	ldr	r3, [pc, #264]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	01db      	lsls	r3, r3, #7
 8005128:	4413      	add	r3, r2
 800512a:	3384      	adds	r3, #132	; 0x84
 800512c:	461a      	mov	r2, r3
 800512e:	4b3e      	ldr	r3, [pc, #248]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	01db      	lsls	r3, r3, #7
 8005138:	440b      	add	r3, r1
 800513a:	3384      	adds	r3, #132	; 0x84
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8005144:	4b38      	ldr	r3, [pc, #224]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a37      	ldr	r2, [pc, #220]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8005154:	e060      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETPOS:
    HAL_LTDC_SetWindowPosition(&hltdc,
                               ((LCD_X_SETPOS_INFO *)pData)->xPos,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,
 800515a:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8005160:	461a      	mov	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4830      	ldr	r0, [pc, #192]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 8005166:	f7fd fe0e 	bl	8002d86 <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 800516a:	e055      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, (int*)&xPos, (int*)&yPos);
 800516c:	f107 0214 	add.w	r2, r7, #20
 8005170:	f107 0318 	add.w	r3, r7, #24
 8005174:	4619      	mov	r1, r3
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f008 f838 	bl	800d1ec <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	4828      	ldr	r0, [pc, #160]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4403      	add	r3, r0
 800518e:	330c      	adds	r3, #12
 8005190:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6859      	ldr	r1, [r3, #4]
 8005196:	4823      	ldr	r0, [pc, #140]	; (8005224 <LCD_X_DisplayDriver+0x230>)
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4403      	add	r3, r0
 80051a4:	3310      	adds	r3, #16
 80051a6:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	4619      	mov	r1, r3
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	481d      	ldr	r0, [pc, #116]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051b4:	f7fd fde7 	bl	8002d86 <HAL_LTDC_SetWindowPosition>
    break;
 80051b8:	e02e      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4819      	ldr	r0, [pc, #100]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051c4:	f7fd fe25 	bl	8002e12 <HAL_LTDC_SetAlpha>
    break;
 80051c8:	e026      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <LCD_X_DisplayDriver+0x1e8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	4814      	ldr	r0, [pc, #80]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051d6:	f7fd fd28 	bl	8002c2a <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
    }
    break;
 80051da:	e01d      	b.n	8005218 <LCD_X_DisplayDriver+0x224>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	4812      	ldr	r0, [pc, #72]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 80051e0:	f7fd fd5d 	bl	8002c9e <HAL_LTDC_DisableColorKeying>
    break;
 80051e4:	e018      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	0c1b      	lsrs	r3, r3, #16
 80051ec:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80051f6:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 8005202:	4313      	orrs	r3, r2
 8005204:	61fb      	str	r3, [r7, #28]

    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	4807      	ldr	r0, [pc, #28]	; (8005228 <LCD_X_DisplayDriver+0x234>)
 800520c:	f7fd fc54 	bl	8002ab8 <HAL_LTDC_ConfigColorKeying>
    break;
 8005210:	e002      	b.n	8005218 <LCD_X_DisplayDriver+0x224>

  default:
    r = -1;
 8005212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800521a:	4618      	mov	r0, r3
 800521c:	372c      	adds	r7, #44	; 0x2c
 800521e:	46bd      	mov	sp, r7
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	bf00      	nop
 8005224:	2001f8ac 	.word	0x2001f8ac
 8005228:	20022d18 	.word	0x20022d18

0800522c <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(uint32_t LayerIndex)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b090      	sub	sp, #64	; 0x40
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t                         i;
  static uint32_t                  LUT[256];
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d169      	bne.n	800530e <LCD_LL_LayerInit+0xe2>
  {
  /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 800523e:	23f0      	movs	r3, #240	; 0xf0
 8005240:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowY0 = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY1 = YSIZE_PHYS;
 8005246:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800524a:	617b      	str	r3, [r7, #20]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f8e3 	bl	8005418 <LCD_LL_GetPixelformat>
 8005252:	4603      	mov	r3, r0
 8005254:	61bb      	str	r3, [r7, #24]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8005256:	4930      	ldr	r1, [pc, #192]	; (8005318 <LCD_LL_LayerInit+0xec>)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.Alpha = 255;
 8005268:	23ff      	movs	r3, #255	; 0xff
 800526a:	61fb      	str	r3, [r7, #28]
    layer_cfg.Alpha0 = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	623b      	str	r3, [r7, #32]
    layer_cfg.Backcolor.Blue = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    layer_cfg.Backcolor.Green = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    layer_cfg.Backcolor.Red = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005288:	2307      	movs	r3, #7
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.ImageWidth = XSIZE_PHYS;
 800528c:	23f0      	movs	r3, #240	; 0xf0
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.ImageHeight = YSIZE_PHYS;
 8005290:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	481f      	ldr	r0, [pc, #124]	; (800531c <LCD_LL_LayerInit+0xf0>)
 80052a0:	f7fd fbcc 	bl	8002a3c <HAL_LTDC_ConfigLayer>

    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f005 ffd2 	bl	800b250 <LCD_GetBitsPerPixelEx>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	dc04      	bgt.n	80052bc <LCD_LL_LayerInit+0x90>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4819      	ldr	r0, [pc, #100]	; (800531c <LCD_LL_LayerInit+0xf0>)
 80052b6:	f7fd fd2c 	bl	8002d12 <HAL_LTDC_EnableCLUT>
        }
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
      }
    }
  }
}
 80052ba:	e028      	b.n	800530e <LCD_LL_LayerInit+0xe2>
      if (layer_prop[LayerIndex].pColorConvAPI == GUICC_88666I)
 80052bc:	4916      	ldr	r1, [pc, #88]	; (8005318 <LCD_LL_LayerInit+0xec>)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	3318      	adds	r3, #24
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a14      	ldr	r2, [pc, #80]	; (8005320 <LCD_LL_LayerInit+0xf4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d11c      	bne.n	800530e <LCD_LL_LayerInit+0xe2>
        HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4811      	ldr	r0, [pc, #68]	; (800531c <LCD_LL_LayerInit+0xf0>)
 80052d8:	f7fd fd1b 	bl	8002d12 <HAL_LTDC_EnableCLUT>
        for (i = 0; i < 256; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e0:	e00b      	b.n	80052fa <LCD_LL_LayerInit+0xce>
          LUT[i] = LCD_API_ColorConv_8666.pfIndex2Color(i);
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <LCD_LL_LayerInit+0xf8>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052e8:	4798      	blx	r3
 80052ea:	4601      	mov	r1, r0
 80052ec:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <LCD_LL_LayerInit+0xfc>)
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < 256; i++)
 80052f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f6:	3301      	adds	r3, #1
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	2bff      	cmp	r3, #255	; 0xff
 80052fe:	d9f0      	bls.n	80052e2 <LCD_LL_LayerInit+0xb6>
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005306:	4908      	ldr	r1, [pc, #32]	; (8005328 <LCD_LL_LayerInit+0xfc>)
 8005308:	4804      	ldr	r0, [pc, #16]	; (800531c <LCD_LL_LayerInit+0xf0>)
 800530a:	f7fd fc1a 	bl	8002b42 <HAL_LTDC_ConfigCLUT>
}
 800530e:	bf00      	nop
 8005310:	3740      	adds	r7, #64	; 0x40
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2001f8ac 	.word	0x2001f8ac
 800531c:	20022d18 	.word	0x20022d18
 8005320:	080140bc 	.word	0x080140bc
 8005324:	080140d4 	.word	0x080140d4
 8005328:	200225c8 	.word	0x200225c8

0800532c <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 8005330:	4834      	ldr	r0, [pc, #208]	; (8005404 <LCD_LL_Init+0xd8>)
 8005332:	f7fd fab3 	bl	800289c <HAL_LTDC_DeInit>

      /* Initializaton of ILI9341 component*/
      LCD_PowerOn();
 8005336:	f001 f861 	bl	80063fc <LCD_PowerOn>

      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 800533a:	4b32      	ldr	r3, [pc, #200]	; (8005404 <LCD_LL_Init+0xd8>)
 800533c:	2209      	movs	r2, #9
 800533e:	615a      	str	r2, [r3, #20]
      hltdc.Init.VerticalSync = 1;
 8005340:	4b30      	ldr	r3, [pc, #192]	; (8005404 <LCD_LL_Init+0xd8>)
 8005342:	2201      	movs	r2, #1
 8005344:	619a      	str	r2, [r3, #24]
      hltdc.Init.AccumulatedHBP = 29;
 8005346:	4b2f      	ldr	r3, [pc, #188]	; (8005404 <LCD_LL_Init+0xd8>)
 8005348:	221d      	movs	r2, #29
 800534a:	61da      	str	r2, [r3, #28]
      hltdc.Init.AccumulatedVBP = 3;
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <LCD_LL_Init+0xd8>)
 800534e:	2203      	movs	r2, #3
 8005350:	621a      	str	r2, [r3, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 8005352:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <LCD_LL_Init+0xd8>)
 8005354:	f240 1243 	movw	r2, #323	; 0x143
 8005358:	629a      	str	r2, [r3, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 800535a:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <LCD_LL_Init+0xd8>)
 800535c:	f240 120d 	movw	r2, #269	; 0x10d
 8005360:	625a      	str	r2, [r3, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <LCD_LL_Init+0xd8>)
 8005364:	f240 1247 	movw	r2, #327	; 0x147
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 800536a:	4b26      	ldr	r3, [pc, #152]	; (8005404 <LCD_LL_Init+0xd8>)
 800536c:	f240 1217 	movw	r2, #279	; 0x117
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c

      /* background value */
      hltdc.Init.Backcolor.Blue = 0;
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <LCD_LL_Init+0xd8>)
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <LCD_LL_Init+0xd8>)
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 8005382:	4b20      	ldr	r3, [pc, #128]	; (8005404 <LCD_LL_Init+0xd8>)
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 Mhz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <LCD_LL_Init+0xdc>)
 800538c:	2208      	movs	r2, #8
 800538e:	601a      	str	r2, [r3, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <LCD_LL_Init+0xdc>)
 8005392:	22c0      	movs	r2, #192	; 0xc0
 8005394:	611a      	str	r2, [r3, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <LCD_LL_Init+0xdc>)
 8005398:	2204      	movs	r2, #4
 800539a:	619a      	str	r2, [r3, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800539c:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <LCD_LL_Init+0xdc>)
 800539e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80053a4:	4818      	ldr	r0, [pc, #96]	; (8005408 <LCD_LL_Init+0xdc>)
 80053a6:	f7fe fbcb 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>

      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <LCD_LL_Init+0xd8>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <LCD_LL_Init+0xd8>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <LCD_LL_Init+0xd8>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <LCD_LL_Init+0xd8>)
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
      hltdc.Instance = LTDC;
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <LCD_LL_Init+0xd8>)
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <LCD_LL_Init+0xe0>)
 80053c6:	601a      	str	r2, [r3, #0]

      HAL_LTDC_Init(&hltdc);
 80053c8:	480e      	ldr	r0, [pc, #56]	; (8005404 <LCD_LL_Init+0xd8>)
 80053ca:	f7fd f993 	bl	80026f4 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 80053ce:	2100      	movs	r1, #0
 80053d0:	480c      	ldr	r0, [pc, #48]	; (8005404 <LCD_LL_Init+0xd8>)
 80053d2:	f7fd fd8b 	bl	8002eec <HAL_LTDC_ProgramLineEvent>

	  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <LCD_LL_Init+0xe4>)
 80053d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053dc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_RGB565;
 80053de:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <LCD_LL_Init+0xe4>)
 80053e0:	2202      	movs	r2, #2
 80053e2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <LCD_LL_Init+0xe4>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D;
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <LCD_LL_Init+0xe4>)
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <LCD_LL_Init+0xe8>)
 80053ee:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80053f0:	4807      	ldr	r0, [pc, #28]	; (8005410 <LCD_LL_Init+0xe4>)
 80053f2:	f7fb fd33 	bl	8000e5c <HAL_DMA2D_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d000      	beq.n	80053fe <LCD_LL_Init+0xd2>
  {
    while (1);
 80053fc:	e7fe      	b.n	80053fc <LCD_LL_Init+0xd0>
  }
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20022d18 	.word	0x20022d18
 8005408:	200229c8 	.word	0x200229c8
 800540c:	40016800 	.word	0x40016800
 8005410:	2001f86c 	.word	0x2001f86c
 8005414:	4002b000 	.word	0x4002b000

08005418 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static uint32_t LCD_LL_GetPixelformat(uint32_t LayerIndex)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  const LCD_API_COLOR_CONV * pColorConvAPI;

  if (LayerIndex >= GUI_NUM_LAYERS)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <LCD_LL_GetPixelformat+0x12>
  {
    return 0;
 8005426:	2300      	movs	r3, #0
 8005428:	e03a      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  pColorConvAPI = layer_prop[LayerIndex].pColorConvAPI;
 800542a:	4920      	ldr	r1, [pc, #128]	; (80054ac <LCD_LL_GetPixelformat+0x94>)
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	3318      	adds	r3, #24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60fb      	str	r3, [r7, #12]

  if (pColorConvAPI == GUICC_M8888I)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <LCD_LL_GetPixelformat+0x98>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <LCD_LL_GetPixelformat+0x32>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8005446:	2300      	movs	r3, #0
 8005448:	e02a      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M888)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a19      	ldr	r2, [pc, #100]	; (80054b4 <LCD_LL_GetPixelformat+0x9c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <LCD_LL_GetPixelformat+0x3e>
  {
    return LTDC_PIXEL_FORMAT_RGB888;
 8005452:	2301      	movs	r3, #1
 8005454:	e024      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M565)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <LCD_LL_GetPixelformat+0xa0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d101      	bne.n	8005462 <LCD_LL_GetPixelformat+0x4a>
  {
    return LTDC_PIXEL_FORMAT_RGB565;
 800545e:	2302      	movs	r3, #2
 8005460:	e01e      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M1555I)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a15      	ldr	r2, [pc, #84]	; (80054bc <LCD_LL_GetPixelformat+0xa4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d101      	bne.n	800546e <LCD_LL_GetPixelformat+0x56>
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 800546a:	2303      	movs	r3, #3
 800546c:	e018      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M4444I)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a13      	ldr	r2, [pc, #76]	; (80054c0 <LCD_LL_GetPixelformat+0xa8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d101      	bne.n	800547a <LCD_LL_GetPixelformat+0x62>
  {
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8005476:	2304      	movs	r3, #4
 8005478:	e012      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_8666)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <LCD_LL_GetPixelformat+0xac>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <LCD_LL_GetPixelformat+0x6e>
  {
    return LTDC_PIXEL_FORMAT_L8;
 8005482:	2305      	movs	r3, #5
 8005484:	e00c      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_1616I)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a0f      	ldr	r2, [pc, #60]	; (80054c8 <LCD_LL_GetPixelformat+0xb0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <LCD_LL_GetPixelformat+0x7a>
  {
    return LTDC_PIXEL_FORMAT_AL44;
 800548e:	2306      	movs	r3, #6
 8005490:	e006      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_88666I)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <LCD_LL_GetPixelformat+0xb4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <LCD_LL_GetPixelformat+0x86>
  {
    return LTDC_PIXEL_FORMAT_AL88;
 800549a:	2307      	movs	r3, #7
 800549c:	e000      	b.n	80054a0 <LCD_LL_GetPixelformat+0x88>
  }
  while (1);
 800549e:	e7fe      	b.n	800549e <LCD_LL_GetPixelformat+0x86>
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	2001f8ac 	.word	0x2001f8ac
 80054b0:	08014074 	.word	0x08014074
 80054b4:	08014014 	.word	0x08014014
 80054b8:	0801402c 	.word	0x0801402c
 80054bc:	080140a4 	.word	0x080140a4
 80054c0:	0801408c 	.word	0x0801408c
 80054c4:	080140d4 	.word	0x080140d4
 80054c8:	080140ec 	.word	0x080140ec
 80054cc:	080140bc 	.word	0x080140bc

080054d0 <DMA2D_CopyBuffer>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBuffer(uint32_t LayerIndex, void * pSrc, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff ff9a 	bl	8005418 <LCD_LL_GetPixelformat>
 80054e4:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80054e6:	4b15      	ldr	r3, [pc, #84]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;
 80054f4:	4a11      	ldr	r2, [pc, #68]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst;
 8005500:	4a0e      	ldr	r2, [pc, #56]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 8005506:	4a0d      	ldr	r2, [pc, #52]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 800550c:	4a0b      	ldr	r2, [pc, #44]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	6a39      	ldr	r1, [r7, #32]
 8005514:	b289      	uxth	r1, r1
 8005516:	430b      	orrs	r3, r1
 8005518:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800551a:	4a08      	ldr	r2, [pc, #32]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005526:	bf00      	nop
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <DMA2D_CopyBuffer+0x6c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f9      	bne.n	8005528 <DMA2D_CopyBuffer+0x58>
  {
  }
}
 8005534:	bf00      	nop
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	4002b000 	.word	0x4002b000

08005540 <DMA2D_FillBuffer>:
/*********************************************************************
*
*       FillBuffer
*/
static void DMA2D_FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
 uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ff62 	bl	8005418 <LCD_LL_GetPixelformat>
 8005554:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <DMA2D_FillBuffer+0x68>)
 800555a:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 800555c:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (uint32_t)pDst;
 8005562:	4a10      	ldr	r2, [pc, #64]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8005568:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 800556e:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	b289      	uxth	r1, r1
 800557e:	430b      	orrs	r3, r1
 8005580:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 8005582:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 800558e:	bf00      	nop
 8005590:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <DMA2D_FillBuffer+0x64>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1f9      	bne.n	8005590 <DMA2D_FillBuffer+0x50>
  {
  }
}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	4002b000 	.word	0x4002b000
 80055a8:	00030200 	.word	0x00030200

080055ac <GetBufferSize>:
/*********************************************************************
*
*       GetBufferSize
*/
static uint32_t GetBufferSize(uint32_t LayerIndex)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80055b4:	4913      	ldr	r1, [pc, #76]	; (8005604 <GetBufferSize+0x58>)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	330c      	adds	r3, #12
 80055c4:	6819      	ldr	r1, [r3, #0]
 80055c6:	480f      	ldr	r0, [pc, #60]	; (8005604 <GetBufferSize+0x58>)
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4403      	add	r3, r0
 80055d4:	3310      	adds	r3, #16
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	fb03 f101 	mul.w	r1, r3, r1
 80055dc:	4809      	ldr	r0, [pc, #36]	; (8005604 <GetBufferSize+0x58>)
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4403      	add	r3, r0
 80055ea:	3314      	adds	r3, #20
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	fb03 f301 	mul.w	r3, r3, r1
 80055f2:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2001f8ac 	.word	0x2001f8ac

08005608 <CUSTOM_CopyBuffer>:

/*********************************************************************
*
*       CUSTOM_CopyBuffer
*/
static void CUSTOM_CopyBuffer(int32_t LayerIndex, int32_t IndexSrc, int32_t IndexDst) {
 8005608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800560a:	b08d      	sub	sp, #52	; 0x34
 800560c:	af04      	add	r7, sp, #16
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ffc8 	bl	80055ac <GetBufferSize>
 800561c:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800561e:	4926      	ldr	r1, [pc, #152]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	440b      	add	r3, r1
 800563a:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 800563c:	491e      	ldr	r1, [pc, #120]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4619      	mov	r1, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	440b      	add	r3, r1
 8005658:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	69bc      	ldr	r4, [r7, #24]
 800565e:	697d      	ldr	r5, [r7, #20]
 8005660:	4915      	ldr	r1, [pc, #84]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	330c      	adds	r3, #12
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461e      	mov	r6, r3
 8005674:	4910      	ldr	r1, [pc, #64]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	3310      	adds	r3, #16
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	2300      	movs	r3, #0
 800568a:	9302      	str	r3, [sp, #8]
 800568c:	2300      	movs	r3, #0
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	9200      	str	r2, [sp, #0]
 8005692:	4633      	mov	r3, r6
 8005694:	462a      	mov	r2, r5
 8005696:	4621      	mov	r1, r4
 8005698:	f7ff ff1a 	bl	80054d0 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800569c:	4906      	ldr	r1, [pc, #24]	; (80056b8 <CUSTOM_CopyBuffer+0xb0>)
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	440b      	add	r3, r1
 80056aa:	3308      	adds	r3, #8
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]
}
 80056b0:	bf00      	nop
 80056b2:	3724      	adds	r7, #36	; 0x24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b8:	2001f8ac 	.word	0x2001f8ac

080056bc <CUSTOM_CopyRect>:
/*********************************************************************
*
*       CUSTOM_CopyRect
*/
static void CUSTOM_CopyRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t xSize, int32_t ySize)
{
 80056bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056be:	b08f      	sub	sp, #60	; 0x3c
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	6178      	str	r0, [r7, #20]
 80056c4:	6139      	str	r1, [r7, #16]
 80056c6:	60fa      	str	r2, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
  int32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff ff6d 	bl	80055ac <GetBufferSize>
 80056d2:	4603      	mov	r3, r0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80056d6:	4940      	ldr	r1, [pc, #256]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	6819      	ldr	r1, [r3, #0]
 80056e6:	483c      	ldr	r0, [pc, #240]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4403      	add	r3, r0
 80056f4:	3304      	adds	r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	4419      	add	r1, r3
 8005700:	4835      	ldr	r0, [pc, #212]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4613      	mov	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4403      	add	r3, r0
 800570e:	330c      	adds	r3, #12
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	fb02 f203 	mul.w	r2, r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	18d0      	adds	r0, r2, r3
 800571c:	4c2e      	ldr	r4, [pc, #184]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4423      	add	r3, r4
 800572a:	3314      	adds	r3, #20
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fb03 f300 	mul.w	r3, r3, r0
 8005732:	440b      	add	r3, r1
 8005734:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8005736:	4928      	ldr	r1, [pc, #160]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4613      	mov	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	6819      	ldr	r1, [r3, #0]
 8005746:	4824      	ldr	r0, [pc, #144]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4613      	mov	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4403      	add	r3, r0
 8005754:	3304      	adds	r3, #4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	4419      	add	r1, r3
 8005760:	481d      	ldr	r0, [pc, #116]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4403      	add	r3, r0
 800576e:	330c      	adds	r3, #12
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005774:	fb02 f203 	mul.w	r2, r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	18d0      	adds	r0, r2, r3
 800577c:	4c16      	ldr	r4, [pc, #88]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4423      	add	r3, r4
 800578a:	3314      	adds	r3, #20
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	fb03 f300 	mul.w	r3, r3, r0
 8005792:	440b      	add	r3, r1
 8005794:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8005796:	697c      	ldr	r4, [r7, #20]
 8005798:	6a3d      	ldr	r5, [r7, #32]
 800579a:	69fe      	ldr	r6, [r7, #28]
 800579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579e:	607b      	str	r3, [r7, #4]
 80057a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80057a2:	480d      	ldr	r0, [pc, #52]	; (80057d8 <CUSTOM_CopyRect+0x11c>)
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4403      	add	r3, r0
 80057b0:	330c      	adds	r3, #12
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	9302      	str	r3, [sp, #8]
 80057be:	9201      	str	r2, [sp, #4]
 80057c0:	9100      	str	r1, [sp, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4632      	mov	r2, r6
 80057c6:	4629      	mov	r1, r5
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fe81 	bl	80054d0 <DMA2D_CopyBuffer>
}
 80057ce:	bf00      	nop
 80057d0:	372c      	adds	r7, #44	; 0x2c
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2001f8ac 	.word	0x2001f8ac

080057dc <CUSTOM_FillRect>:
/*********************************************************************
*
*       CUSTOM_FillRect
*/
static void CUSTOM_FillRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t PixelIndex)
{
 80057dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057de:	b08b      	sub	sp, #44	; 0x2c
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 80057ea:	f007 fe7b 	bl	800d4e4 <GUI_GetDrawMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d110      	bne.n	8005816 <CUSTOM_FillRect+0x3a>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 80057f4:	2200      	movs	r2, #0
 80057f6:	2119      	movs	r1, #25
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f005 fce5 	bl	800b1c8 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	68b8      	ldr	r0, [r7, #8]
 8005806:	f005 ff27 	bl	800b658 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 800580a:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <CUSTOM_FillRect+0xf8>)
 800580c:	2119      	movs	r1, #25
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f005 fcda 	bl	800b1c8 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 8005814:	e059      	b.n	80058ca <CUSTOM_FillRect+0xee>
    xSize = x1 - x0 + 1;
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	3301      	adds	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8005820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	3301      	adds	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff febd 	bl	80055ac <GetBufferSize>
 8005832:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8005834:	4928      	ldr	r1, [pc, #160]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461c      	mov	r4, r3
 8005846:	4924      	ldr	r1, [pc, #144]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	330c      	adds	r3, #12
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	fb02 f203 	mul.w	r2, r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	18d1      	adds	r1, r2, r3
 8005862:	481d      	ldr	r0, [pc, #116]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4403      	add	r3, r0
 8005870:	3314      	adds	r3, #20
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	fb03 f301 	mul.w	r3, r3, r1
 8005878:	4618      	mov	r0, r3
 800587a:	4917      	ldr	r1, [pc, #92]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3308      	adds	r3, #8
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	fb03 f302 	mul.w	r3, r3, r2
 8005894:	4403      	add	r3, r0
 8005896:	4423      	add	r3, r4
 8005898:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	693c      	ldr	r4, [r7, #16]
 800589e:	69fd      	ldr	r5, [r7, #28]
 80058a0:	69be      	ldr	r6, [r7, #24]
 80058a2:	490d      	ldr	r1, [pc, #52]	; (80058d8 <CUSTOM_FillRect+0xfc>)
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	330c      	adds	r3, #12
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	9200      	str	r2, [sp, #0]
 80058c0:	4633      	mov	r3, r6
 80058c2:	462a      	mov	r2, r5
 80058c4:	4621      	mov	r1, r4
 80058c6:	f7ff fe3b 	bl	8005540 <DMA2D_FillBuffer>
}
 80058ca:	bf00      	nop
 80058cc:	3724      	adds	r7, #36	; 0x24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d2:	bf00      	nop
 80058d4:	080057dd 	.word	0x080057dd
 80058d8:	2001f8ac 	.word	0x2001f8ac

080058dc <DMA2D_LoadLUT>:
  * @param  pColor
  * @param  NumItems
  * @retval None
  */
static void DMA2D_LoadLUT(LCD_COLOR * pColor, uint32_t NumItems)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  DMA2D->FGCMAR  = (uint32_t)pColor;
 80058e6:	4a0b      	ldr	r2, [pc, #44]	; (8005914 <DMA2D_LoadLUT+0x38>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*  Foreground PFC Control Register */
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 80058ec:	4a09      	ldr	r2, [pc, #36]	; (8005914 <DMA2D_LoadLUT+0x38>)
                  | ((NumItems - 1) & 0xFF) << 8;   /* Number of items to load */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f043 0301 	orr.w	r3, r3, #1
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 80058fa:	61d3      	str	r3, [r2, #28]
  DMA2D->FGPFCCR |= (1 << 5);                       /* Start loading */
 80058fc:	4a05      	ldr	r2, [pc, #20]	; (8005914 <DMA2D_LoadLUT+0x38>)
 80058fe:	4b05      	ldr	r3, [pc, #20]	; (8005914 <DMA2D_LoadLUT+0x38>)
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f043 0320 	orr.w	r3, r3, #32
 8005906:	61d3      	str	r3, [r2, #28]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	4002b000 	.word	0x4002b000

08005918 <InvertAlpha_SwapRB>:
  * @param  pColorDst: Destination address
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha_SwapRB(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  uint32_t Color;
  do
  {
    Color = *pColorSrc++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	1d1a      	adds	r2, r3, #4
 8005928:	60fa      	str	r2, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	617b      	str	r3, [r7, #20]
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1d1a      	adds	r2, r3, #4
 8005932:	60ba      	str	r2, [r7, #8]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	0412      	lsls	r2, r2, #16
 8005938:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
                 |  (Color & 0x0000FF00)                /* Green */
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005942:	4311      	orrs	r1, r2
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	0c12      	lsrs	r2, r2, #16
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	4311      	orrs	r1, r2
                 | ((Color & 0xFF000000) ^ 0xFF000000); /* Invert alpha */
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	43d2      	mvns	r2, r2
 8005950:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005954:	430a      	orrs	r2, r1
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8005956:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1df      	bne.n	8005924 <InvertAlpha_SwapRB+0xc>
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <InvertAlpha>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  uint32_t Color;

  do
  {
    Color = *pColorSrc++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	60fa      	str	r2, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	617b      	str	r3, [r7, #20]
    *pColorDst++ = Color ^ 0xFF000000; /* Invert alpha */
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1d1a      	adds	r2, r3, #4
 800598a:	60ba      	str	r2, [r7, #8]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	f082 427f 	eor.w	r2, r2, #4278190080	; 0xff000000
 8005992:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ed      	bne.n	800597c <InvertAlpha+0xc>
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <DMA2D_AlphaBlendingBulk>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlendingBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <DMA2D_AlphaBlendingBulk+0x80>)
 80059be:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 80059c0:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 80059cc:	4a16      	ldr	r2, [pc, #88]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register */
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	611a      	str	r2, [r3, #16]
  DMA2D->BGOR    = 0;                               /* Background Offset Register */
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059da:	2200      	movs	r2, #0
 80059dc:	619a      	str	r2, [r3, #24]
  DMA2D->OOR     = 0;                               /* Output Offset Register */
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Foreground PFC Control Register (Defines the FG pixel format) */
 80059e4:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Background PFC Control Register (Defines the BG pixel format) */
 80059ea:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;       /* Output     PFC Control Register (Defines the output pixel format) */
 80059f0:	4b0d      	ldr	r3, [pc, #52]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */

  DMA2D->CR     |= DMA2D_CR_START;
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005a0e:	bf00      	nop
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <DMA2D_AlphaBlendingBulk+0x7c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f9      	bne.n	8005a10 <DMA2D_AlphaBlendingBulk+0x64>
  {
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	4002b000 	.word	0x4002b000
 8005a2c:	00020200 	.word	0x00020200

08005a30 <DMA2D_MixColors>:
  * @param  BkColor
  * @param  Intens
  * @retval LCD_COLOR
  */
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b089      	sub	sp, #36	; 0x24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t ColorFG, ColorBG, ColorDst;

  if ((BkColor & 0xFF000000) == 0xFF000000)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a44:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8005a48:	d101      	bne.n	8005a4e <DMA2D_MixColors+0x1e>
  {
    return Color;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	e039      	b.n	8005ac2 <DMA2D_MixColors+0x92>
  }
  ColorFG = Color   ^ 0xFF000000;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8005a54:	61fb      	str	r3, [r7, #28]
  ColorBG = BkColor ^ 0xFF000000;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	61bb      	str	r3, [r7, #24]

  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a60:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <DMA2D_MixColors+0xa4>)
 8005a62:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)&ColorFG;                   /* Foreground Memory Address Register */
 8005a64:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a66:	f107 031c 	add.w	r3, r7, #28
 8005a6a:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)&ColorBG;                   /* Background Memory Address Register */
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a6e:	f107 0318 	add.w	r3, r7, #24
 8005a72:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)&ColorDst;                  /* Output Memory Address Register (Destination address) */
 8005a74:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a76:	f107 0314 	add.w	r3, r7, #20
 8005a7a:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a7c:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <DMA2D_MixColors+0xa0>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a86:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a88:	4a11      	ldr	r2, [pc, #68]	; (8005ad0 <DMA2D_MixColors+0xa0>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005a90:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005a92:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8005a94:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(1 << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005a9c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Control Register (Start operation) */
 8005aa2:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005aae:	bf00      	nop
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <DMA2D_MixColors+0xa0>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f9      	bne.n	8005ab0 <DMA2D_MixColors+0x80>
  {
  }

  return (ColorDst ^ 0xFF000000);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3724      	adds	r7, #36	; 0x24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	4002b000 	.word	0x4002b000
 8005ad4:	00020200 	.word	0x00020200

08005ad8 <DMA2D_ConvertColor>:
  * @param  PixelFormatDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_ConvertColor(void * pSrc, void * pDst,  uint32_t PixelFormatSrc, uint32_t PixelFormatDst, uint32_t NumItems)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  /* Set up mode */

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8005ae6:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005ae8:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8005aec:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8005aee:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset) */
 8005afa:	4b12      	ldr	r3, [pc, #72]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8005b00:	4b10      	ldr	r3, [pc, #64]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8005b0c:	4a0d      	ldr	r2, [pc, #52]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	041b      	lsls	r3, r3, #16
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005b2a:	bf00      	nop
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <DMA2D_ConvertColor+0x6c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f9      	bne.n	8005b2c <DMA2D_ConvertColor+0x54>
  {
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	4002b000 	.word	0x4002b000

08005b48 <_LCD_GetpPalConvTable>:
  * @param  pBitmap
  * @param  LayerIndex
  * @retval LCD_PIXELINDEX
  */
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  void (* pFunc)(void);
  int32_t DoDefault = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]

  /* Check if we have a non transparent device independent bitmap */
  if (pBitmap->BitsPerPixel == 8)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	88db      	ldrh	r3, [r3, #6]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d119      	bne.n	8005b94 <_LCD_GetpPalConvTable+0x4c>
  {
    pFunc = LCD_GetDevFunc(LayerIndex, LCD_DEVFUNC_DRAWBMP_8BPP);
 8005b60:	2125      	movs	r1, #37	; 0x25
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f005 fba8 	bl	800b2b8 <LCD_GetDevFunc>
 8005b68:	6138      	str	r0, [r7, #16]
    if (pFunc)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <_LCD_GetpPalConvTable+0x46>
    {
      if (pBitmap->pPal)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <_LCD_GetpPalConvTable+0x40>
      {
        if (pBitmap->pPal->HasTrans)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	791b      	ldrb	r3, [r3, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <_LCD_GetpPalConvTable+0x50>
        {
          DoDefault = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e007      	b.n	8005b98 <_LCD_GetpPalConvTable+0x50>
        }
      }
      else
      {
        DoDefault = 1;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	e004      	b.n	8005b98 <_LCD_GetpPalConvTable+0x50>
      }
    }
    else
    {
      DoDefault = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e001      	b.n	8005b98 <_LCD_GetpPalConvTable+0x50>
    }
  }
  else
  {
    DoDefault = 1;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
  }

  /* Default palette management for other cases */
  if (DoDefault)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <_LCD_GetpPalConvTable+0x60>
  {

    /* Return a pointer to the index values to be used by the controller */
    return LCD_GetpPalConvTable(pLogPal);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f005 fc82 	bl	800b4a8 <LCD_GetpPalConvTable>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	e00e      	b.n	8005bc6 <_LCD_GetpPalConvTable+0x7e>
  }

  /* Convert palette colors from ARGB to ABGR */
  InvertAlpha_SwapRB((U32 *)pLogPal->pPalEntries, aBufferDMA2D, pLogPal->NumEntries);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6898      	ldr	r0, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4907      	ldr	r1, [pc, #28]	; (8005bd0 <_LCD_GetpPalConvTable+0x88>)
 8005bb4:	f7ff feb0 	bl	8005918 <InvertAlpha_SwapRB>

  /* Load LUT using DMA2D */
  DMA2D_LoadLUT(aBufferDMA2D, pLogPal->NumEntries);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <_LCD_GetpPalConvTable+0x88>)
 8005bc0:	f7ff fe8c 	bl	80058dc <DMA2D_LoadLUT>

  /* Return something not NULL */
  return aBufferDMA2D;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <_LCD_GetpPalConvTable+0x88>)
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	2001f8c8 	.word	0x2001f8c8

08005bd4 <DMA2D_MixColorsBulk>:
  * @param  Intens
  * @param  NumItems
  * @retval None
  */
static void DMA2D_MixColorsBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U8 Intens, uint32_t NumItems)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	70fb      	strb	r3, [r7, #3]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8005be2:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005be4:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <DMA2D_MixColorsBulk+0x7c>)
 8005be6:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8005bf4:	4a15      	ldr	r2, [pc, #84]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005bfa:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005c04:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005c0e:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8005c10:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8005c12:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8005c18:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	f043 0301 	orr.w	r3, r3, #1
 8005c22:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8005c30:	bf00      	nop
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <DMA2D_MixColorsBulk+0x78>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f9      	bne.n	8005c32 <DMA2D_MixColorsBulk+0x5e>
  {
  }
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	4002b000 	.word	0x4002b000
 8005c50:	00020200 	.word	0x00020200

08005c54 <DMA2D_AlphaBlending>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  /* Invert alpha values */
  InvertAlpha(pColorFG, aBuffer_FG, NumItems);
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	490b      	ldr	r1, [pc, #44]	; (8005c94 <DMA2D_AlphaBlending+0x40>)
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe82 	bl	8005970 <InvertAlpha>
  InvertAlpha(pColorBG, aBuffer_BG, NumItems);
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	490a      	ldr	r1, [pc, #40]	; (8005c98 <DMA2D_AlphaBlending+0x44>)
 8005c70:	68b8      	ldr	r0, [r7, #8]
 8005c72:	f7ff fe7d 	bl	8005970 <InvertAlpha>

  /* Use DMA2D for mixing */
  DMA2D_AlphaBlendingBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, NumItems);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <DMA2D_AlphaBlending+0x48>)
 8005c7a:	4907      	ldr	r1, [pc, #28]	; (8005c98 <DMA2D_AlphaBlending+0x44>)
 8005c7c:	4805      	ldr	r0, [pc, #20]	; (8005c94 <DMA2D_AlphaBlending+0x40>)
 8005c7e:	f7ff fe95 	bl	80059ac <DMA2D_AlphaBlendingBulk>

  /* Invert alpha values */
  InvertAlpha(aBufferDMA2D, pColorDst, NumItems);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4805      	ldr	r0, [pc, #20]	; (8005c9c <DMA2D_AlphaBlending+0x48>)
 8005c88:	f7ff fe72 	bl	8005970 <InvertAlpha>
}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	200207c8 	.word	0x200207c8
 8005c98:	200216c8 	.word	0x200216c8
 8005c9c:	2001f8c8 	.word	0x2001f8c8

08005ca0 <DMA2D_Index2ColorBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	70fb      	strb	r3, [r7, #3]
  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(pIndex, aBufferDMA2D, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	4906      	ldr	r1, [pc, #24]	; (8005cd0 <DMA2D_Index2ColorBulk+0x30>)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff ff0d 	bl	8005ad8 <DMA2D_ConvertColor>

  /* Convert colors from ARGB to ABGR and invert alpha values */
  InvertAlpha_SwapRB(aBufferDMA2D, pColor, NumItems);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	4803      	ldr	r0, [pc, #12]	; (8005cd0 <DMA2D_Index2ColorBulk+0x30>)
 8005cc4:	f7ff fe28 	bl	8005918 <InvertAlpha_SwapRB>
}
 8005cc8:	bf00      	nop
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	2001f8c8 	.word	0x2001f8c8

08005cd4 <DMA2D_Color2IndexBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	70fb      	strb	r3, [r7, #3]
  /* Convert colors from ABGR to ARGB and invert alpha values */
  InvertAlpha_SwapRB(pColor, aBufferDMA2D, NumItems);
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4907      	ldr	r1, [pc, #28]	; (8005d04 <DMA2D_Color2IndexBulk+0x30>)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fe16 	bl	8005918 <InvertAlpha_SwapRB>

  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(aBufferDMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4803      	ldr	r0, [pc, #12]	; (8005d04 <DMA2D_Color2IndexBulk+0x30>)
 8005cf8:	f7ff feee 	bl	8005ad8 <DMA2D_ConvertColor>
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	2001f8c8 	.word	0x2001f8c8

08005d08 <LCD_MixColorsBulk>:
  * @param  ySize
  * @param  Intens
  * @retval None
  */
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  int32_t y;

  GUI_USE_PARA(OffFG);
  GUI_USE_PARA(OffDest);
  for (y = 0; y < ySize; y++)
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e030      	b.n	8005d7e <LCD_MixColorsBulk+0x76>
  {
    /* Invert alpha values */
    InvertAlpha(pFG, aBuffer_FG, xSize);
 8005d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1e:	491c      	ldr	r1, [pc, #112]	; (8005d90 <LCD_MixColorsBulk+0x88>)
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff fe25 	bl	8005970 <InvertAlpha>
    InvertAlpha(pBG, aBuffer_BG, xSize);
 8005d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d28:	491a      	ldr	r1, [pc, #104]	; (8005d94 <LCD_MixColorsBulk+0x8c>)
 8005d2a:	68b8      	ldr	r0, [r7, #8]
 8005d2c:	f7ff fe20 	bl	8005970 <InvertAlpha>

    DMA2D_MixColorsBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, Intens, xSize);
 8005d30:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	4a17      	ldr	r2, [pc, #92]	; (8005d98 <LCD_MixColorsBulk+0x90>)
 8005d3c:	4915      	ldr	r1, [pc, #84]	; (8005d94 <LCD_MixColorsBulk+0x8c>)
 8005d3e:	4814      	ldr	r0, [pc, #80]	; (8005d90 <LCD_MixColorsBulk+0x88>)
 8005d40:	f7ff ff48 	bl	8005bd4 <DMA2D_MixColorsBulk>

    InvertAlpha(aBufferDMA2D, pDst, xSize);
 8005d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4813      	ldr	r0, [pc, #76]	; (8005d98 <LCD_MixColorsBulk+0x90>)
 8005d4a:	f7ff fe11 	bl	8005970 <InvertAlpha>
    pFG  += xSize + OffFG;
 8005d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4413      	add	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
    pBG  += xSize + OffBG;
 8005d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	4413      	add	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
    pDst += xSize + OffDest;
 8005d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4413      	add	r3, r2
 8005d76:	607b      	str	r3, [r7, #4]
  for (y = 0; y < ySize; y++)
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d3ca      	bcc.n	8005d1c <LCD_MixColorsBulk+0x14>
  }
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200207c8 	.word	0x200207c8
 8005d94:	200216c8 	.word	0x200216c8
 8005d98:	2001f8c8 	.word	0x2001f8c8

08005d9c <DMA2D_DrawBitmapL8>:
  * @param  xSize
  * @param  ySize
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  uint32_t OffSrc, uint32_t OffDst, uint32_t PixelFormatDst, uint32_t xSize, uint32_t ySize)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8005daa:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dac:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8005db0:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 8005dbe:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 8005dc4:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dcc:	2205      	movs	r2, #5
 8005dce:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | ySize;      /* Number of Line Register (Size configuration of area to be transfered) */
 8005dd6:	490c      	ldr	r1, [pc, #48]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	041a      	lsls	r2, r3, #16
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Start operation */
 8005de2:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f043 0301 	orr.w	r3, r3, #1
 8005dec:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8005dee:	bf00      	nop
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <DMA2D_DrawBitmapL8+0x6c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f9      	bne.n	8005df0 <DMA2D_DrawBitmapL8+0x54>
  {
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	4002b000 	.word	0x4002b000

08005e0c <BSP_LCD_DrawBitmap16bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap16bpp(int32_t LayerIndex, int32_t x, int32_t y, U16 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8005e0c:	b5b0      	push	{r4, r5, r7, lr}
 8005e0e:	b08c      	sub	sp, #48	; 0x30
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff fbc5 	bl	80055ac <GetBufferSize>
 8005e22:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8005e24:	492c      	ldr	r1, [pc, #176]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461c      	mov	r4, r3
 8005e36:	4928      	ldr	r1, [pc, #160]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	330c      	adds	r3, #12
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	fb02 f203 	mul.w	r2, r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	18d1      	adds	r1, r2, r3
 8005e52:	4821      	ldr	r0, [pc, #132]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4403      	add	r3, r0
 8005e60:	3314      	adds	r3, #20
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	fb03 f301 	mul.w	r3, r3, r1
 8005e68:	4618      	mov	r0, r3
 8005e6a:	491b      	ldr	r1, [pc, #108]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3308      	adds	r3, #8
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	fb03 f302 	mul.w	r3, r3, r2
 8005e84:	4403      	add	r3, r0
 8005e86:	4423      	add	r3, r4
 8005e88:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	0fda      	lsrs	r2, r3, #31
 8005e8e:	4413      	add	r3, r2
 8005e90:	105b      	asrs	r3, r3, #1
 8005e92:	461a      	mov	r2, r3
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8005e9a:	490f      	ldr	r1, [pc, #60]	; (8005ed8 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	69bc      	ldr	r4, [r7, #24]
 8005eb6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	6939      	ldr	r1, [r7, #16]
 8005ebe:	9102      	str	r1, [sp, #8]
 8005ec0:	9201      	str	r2, [sp, #4]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	462b      	mov	r3, r5
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	f7ff fb01 	bl	80054d0 <DMA2D_CopyBuffer>
}
 8005ece:	bf00      	nop
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2001f8ac 	.word	0x2001f8ac

08005edc <BSP_LCD_DrawBitmap8bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap8bpp(int32_t LayerIndex, int32_t x, int32_t y, U8 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b08f      	sub	sp, #60	; 0x3c
 8005ee0:	af04      	add	r7, sp, #16
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;
  uint32_t PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fb5d 	bl	80055ac <GetBufferSize>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8005ef4:	492c      	ldr	r1, [pc, #176]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461c      	mov	r4, r3
 8005f06:	4928      	ldr	r1, [pc, #160]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	330c      	adds	r3, #12
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	fb02 f203 	mul.w	r2, r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	18d1      	adds	r1, r2, r3
 8005f22:	4821      	ldr	r0, [pc, #132]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4613      	mov	r3, r2
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	1a9b      	subs	r3, r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4403      	add	r3, r0
 8005f30:	3314      	adds	r3, #20
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	fb03 f301 	mul.w	r3, r3, r1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	491b      	ldr	r1, [pc, #108]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	440b      	add	r3, r1
 8005f48:	3308      	adds	r3, #8
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	fb03 f302 	mul.w	r3, r3, r2
 8005f54:	4403      	add	r3, r0
 8005f56:	4423      	add	r3, r4
 8005f58:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8005f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8005f62:	4911      	ldr	r1, [pc, #68]	; (8005fa8 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	330c      	adds	r3, #12
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	61bb      	str	r3, [r7, #24]
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fa4b 	bl	8005418 <LCD_LL_GetPixelformat>
 8005f82:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8005f84:	6a39      	ldr	r1, [r7, #32]
 8005f86:	69f8      	ldr	r0, [r7, #28]
 8005f88:	69bc      	ldr	r4, [r7, #24]
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f8e:	9202      	str	r2, [sp, #8]
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4623      	mov	r3, r4
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6838      	ldr	r0, [r7, #0]
 8005f9c:	f7ff fefe 	bl	8005d9c <DMA2D_DrawBitmapL8>
}
 8005fa0:	bf00      	nop
 8005fa2:	372c      	adds	r7, #44	; 0x2c
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}
 8005fa8:	2001f8ac 	.word	0x2001f8ac

08005fac <drawTest>:
pPoint[2].y = size;
GUI_AA_FillPolygon(pPoint, 3, x, y);
}

void drawTest(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af02      	add	r7, sp, #8

	/* Rectangles */
	GUI_SetBkColor(CUS_BACKGROUND);
 8005fb2:	48f1      	ldr	r0, [pc, #964]	; (8006378 <drawTest+0x3cc>)
 8005fb4:	f006 fa2c 	bl	800c410 <GUI_SetBkColor>
	GUI_Clear();
 8005fb8:	f008 f9cc 	bl	800e354 <GUI_Clear>
	GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f006 fa05 	bl	800c3cc <GUI_SetDrawMode>
	GUI_SetFont(&GUI_Font8x16);
 8005fc2:	48ee      	ldr	r0, [pc, #952]	; (800637c <drawTest+0x3d0>)
 8005fc4:	f006 f9f8 	bl	800c3b8 <GUI_SetFont>

	GUI_SetColor(CUS_DARKGRAY);
 8005fc8:	48ed      	ldr	r0, [pc, #948]	; (8006380 <drawTest+0x3d4>)
 8005fca:	f006 fa23 	bl	800c414 <GUI_SetColor>
	GUI_AA_FillRoundedRect(5, 5, 235, 47, 8);
 8005fce:	2308      	movs	r3, #8
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	232f      	movs	r3, #47	; 0x2f
 8005fd4:	22eb      	movs	r2, #235	; 0xeb
 8005fd6:	2105      	movs	r1, #5
 8005fd8:	2005      	movs	r0, #5
 8005fda:	f009 fe1d 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(CUS_LIGHTBLUE);
 8005fde:	48e9      	ldr	r0, [pc, #932]	; (8006384 <drawTest+0x3d8>)
 8005fe0:	f006 fa18 	bl	800c414 <GUI_SetColor>
	GUI_AA_FillRoundedRect(5, 5, 26, 47, 8);
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	232f      	movs	r3, #47	; 0x2f
 8005fea:	221a      	movs	r2, #26
 8005fec:	2105      	movs	r1, #5
 8005fee:	2005      	movs	r0, #5
 8005ff0:	f009 fe12 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 8005ff4:	48e2      	ldr	r0, [pc, #904]	; (8006380 <drawTest+0x3d4>)
 8005ff6:	f006 fa0d 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(15, 5, 30, 47);
 8005ffa:	232f      	movs	r3, #47	; 0x2f
 8005ffc:	221e      	movs	r2, #30
 8005ffe:	2105      	movs	r1, #5
 8006000:	200f      	movs	r0, #15
 8006002:	f007 fa75 	bl	800d4f0 <GUI_FillRect>

	GUI_AA_FillRoundedRect(5, 49, 235, 91, 8);
 8006006:	2308      	movs	r3, #8
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	235b      	movs	r3, #91	; 0x5b
 800600c:	22eb      	movs	r2, #235	; 0xeb
 800600e:	2131      	movs	r1, #49	; 0x31
 8006010:	2005      	movs	r0, #5
 8006012:	f009 fe01 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 8006016:	2000      	movs	r0, #0
 8006018:	f006 f9fc 	bl	800c414 <GUI_SetColor>
	GUI_AA_FillRoundedRect(5, 49, 26, 91, 8);
 800601c:	2308      	movs	r3, #8
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	235b      	movs	r3, #91	; 0x5b
 8006022:	221a      	movs	r2, #26
 8006024:	2131      	movs	r1, #49	; 0x31
 8006026:	2005      	movs	r0, #5
 8006028:	f009 fdf6 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 800602c:	48d4      	ldr	r0, [pc, #848]	; (8006380 <drawTest+0x3d4>)
 800602e:	f006 f9f1 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(15, 49, 30, 91);
 8006032:	235b      	movs	r3, #91	; 0x5b
 8006034:	221e      	movs	r2, #30
 8006036:	2131      	movs	r1, #49	; 0x31
 8006038:	200f      	movs	r0, #15
 800603a:	f007 fa59 	bl	800d4f0 <GUI_FillRect>

	GUI_AA_FillRoundedRect(5, 93, 235, 135, 8);
 800603e:	2308      	movs	r3, #8
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2387      	movs	r3, #135	; 0x87
 8006044:	22eb      	movs	r2, #235	; 0xeb
 8006046:	215d      	movs	r1, #93	; 0x5d
 8006048:	2005      	movs	r0, #5
 800604a:	f009 fde5 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 800604e:	2000      	movs	r0, #0
 8006050:	f006 f9e0 	bl	800c414 <GUI_SetColor>
	GUI_AA_FillRoundedRect(5, 93, 26, 135, 8);
 8006054:	2308      	movs	r3, #8
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	2387      	movs	r3, #135	; 0x87
 800605a:	221a      	movs	r2, #26
 800605c:	215d      	movs	r1, #93	; 0x5d
 800605e:	2005      	movs	r0, #5
 8006060:	f009 fdda 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 8006064:	48c6      	ldr	r0, [pc, #792]	; (8006380 <drawTest+0x3d4>)
 8006066:	f006 f9d5 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(15, 93, 30, 135);
 800606a:	2387      	movs	r3, #135	; 0x87
 800606c:	221e      	movs	r2, #30
 800606e:	215d      	movs	r1, #93	; 0x5d
 8006070:	200f      	movs	r0, #15
 8006072:	f007 fa3d 	bl	800d4f0 <GUI_FillRect>

	GUI_AA_FillRoundedRect(5, 137, 235, 179, 8);
 8006076:	2308      	movs	r3, #8
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	23b3      	movs	r3, #179	; 0xb3
 800607c:	22eb      	movs	r2, #235	; 0xeb
 800607e:	2189      	movs	r1, #137	; 0x89
 8006080:	2005      	movs	r0, #5
 8006082:	f009 fdc9 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 8006086:	2000      	movs	r0, #0
 8006088:	f006 f9c4 	bl	800c414 <GUI_SetColor>
	GUI_AA_FillRoundedRect(5, 137, 26, 179, 8);
 800608c:	2308      	movs	r3, #8
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	23b3      	movs	r3, #179	; 0xb3
 8006092:	221a      	movs	r2, #26
 8006094:	2189      	movs	r1, #137	; 0x89
 8006096:	2005      	movs	r0, #5
 8006098:	f009 fdbe 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 800609c:	48b8      	ldr	r0, [pc, #736]	; (8006380 <drawTest+0x3d4>)
 800609e:	f006 f9b9 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(15, 137, 30, 179);
 80060a2:	23b3      	movs	r3, #179	; 0xb3
 80060a4:	221e      	movs	r2, #30
 80060a6:	2189      	movs	r1, #137	; 0x89
 80060a8:	200f      	movs	r0, #15
 80060aa:	f007 fa21 	bl	800d4f0 <GUI_FillRect>


	GUI_AA_FillRoundedRect(35, 181, 235, 223, 8);
 80060ae:	2308      	movs	r3, #8
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	23df      	movs	r3, #223	; 0xdf
 80060b4:	22eb      	movs	r2, #235	; 0xeb
 80060b6:	21b5      	movs	r1, #181	; 0xb5
 80060b8:	2023      	movs	r0, #35	; 0x23
 80060ba:	f009 fdad 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_AA_FillRoundedRect(35, 225, 235, 267, 8);
 80060be:	2308      	movs	r3, #8
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	f240 130b 	movw	r3, #267	; 0x10b
 80060c6:	22eb      	movs	r2, #235	; 0xeb
 80060c8:	21e1      	movs	r1, #225	; 0xe1
 80060ca:	2023      	movs	r0, #35	; 0x23
 80060cc:	f009 fda4 	bl	800fc18 <GUI_AA_FillRoundedRect>
	GUI_AA_FillRoundedRect(35, 269, 235, 311, 8);
 80060d0:	2308      	movs	r3, #8
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	f240 1337 	movw	r3, #311	; 0x137
 80060d8:	22eb      	movs	r2, #235	; 0xeb
 80060da:	f240 110d 	movw	r1, #269	; 0x10d
 80060de:	2023      	movs	r0, #35	; 0x23
 80060e0:	f009 fd9a 	bl	800fc18 <GUI_AA_FillRoundedRect>


	GUI_SetColor(GUI_WHITE);
 80060e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80060e8:	f006 f994 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(7, 188, 30, 196);
 80060ec:	23c4      	movs	r3, #196	; 0xc4
 80060ee:	221e      	movs	r2, #30
 80060f0:	21bc      	movs	r1, #188	; 0xbc
 80060f2:	2007      	movs	r0, #7
 80060f4:	f007 f9fc 	bl	800d4f0 <GUI_FillRect>
	GUI_SetColor(CUS_DARKESTGRAY);
 80060f8:	48a3      	ldr	r0, [pc, #652]	; (8006388 <drawTest+0x3dc>)
 80060fa:	f006 f98b 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(7, 198, 30, 206);
 80060fe:	23ce      	movs	r3, #206	; 0xce
 8006100:	221e      	movs	r2, #30
 8006102:	21c6      	movs	r1, #198	; 0xc6
 8006104:	2007      	movs	r0, #7
 8006106:	f007 f9f3 	bl	800d4f0 <GUI_FillRect>
	GUI_FillRect(7, 208, 30, 216);
 800610a:	23d8      	movs	r3, #216	; 0xd8
 800610c:	221e      	movs	r2, #30
 800610e:	21d0      	movs	r1, #208	; 0xd0
 8006110:	2007      	movs	r0, #7
 8006112:	f007 f9ed 	bl	800d4f0 <GUI_FillRect>

	GUI_FillRect(7, 232, 30, 240);
 8006116:	23f0      	movs	r3, #240	; 0xf0
 8006118:	221e      	movs	r2, #30
 800611a:	21e8      	movs	r1, #232	; 0xe8
 800611c:	2007      	movs	r0, #7
 800611e:	f007 f9e7 	bl	800d4f0 <GUI_FillRect>
	GUI_SetColor(GUI_WHITE);
 8006122:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006126:	f006 f975 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(7, 242, 30, 250);
 800612a:	23fa      	movs	r3, #250	; 0xfa
 800612c:	221e      	movs	r2, #30
 800612e:	21f2      	movs	r1, #242	; 0xf2
 8006130:	2007      	movs	r0, #7
 8006132:	f007 f9dd 	bl	800d4f0 <GUI_FillRect>
	GUI_SetColor(CUS_DARKESTGRAY);
 8006136:	4894      	ldr	r0, [pc, #592]	; (8006388 <drawTest+0x3dc>)
 8006138:	f006 f96c 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(7, 252, 30, 260);
 800613c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006140:	221e      	movs	r2, #30
 8006142:	21fc      	movs	r1, #252	; 0xfc
 8006144:	2007      	movs	r0, #7
 8006146:	f007 f9d3 	bl	800d4f0 <GUI_FillRect>

	GUI_FillRect(7, 276, 30, 284);
 800614a:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800614e:	221e      	movs	r2, #30
 8006150:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006154:	2007      	movs	r0, #7
 8006156:	f007 f9cb 	bl	800d4f0 <GUI_FillRect>
	GUI_FillRect(7, 286, 30, 294);
 800615a:	f44f 7393 	mov.w	r3, #294	; 0x126
 800615e:	221e      	movs	r2, #30
 8006160:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006164:	2007      	movs	r0, #7
 8006166:	f007 f9c3 	bl	800d4f0 <GUI_FillRect>
	GUI_SetColor(GUI_WHITE);
 800616a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800616e:	f006 f951 	bl	800c414 <GUI_SetColor>
	GUI_FillRect(7, 296, 30, 304);
 8006172:	f44f 7398 	mov.w	r3, #304	; 0x130
 8006176:	221e      	movs	r2, #30
 8006178:	f44f 7194 	mov.w	r1, #296	; 0x128
 800617c:	2007      	movs	r0, #7
 800617e:	f007 f9b7 	bl	800d4f0 <GUI_FillRect>

	/* Text */
	GUI_SetTextMode(GUI_TM_TRANS);
 8006182:	2002      	movs	r0, #2
 8006184:	f006 f90e 	bl	800c3a4 <GUI_SetTextMode>
	GUI_EnableAlpha(1);
 8006188:	2001      	movs	r0, #1
 800618a:	f007 fc2b 	bl	800d9e4 <GUI_EnableAlpha>
	GUI_SetColor(GUI_WHITE);
 800618e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006192:	f006 f93f 	bl	800c414 <GUI_SetColor>
	GUI_DispStringAt("ALL DIM", 25, 18);
 8006196:	2212      	movs	r2, #18
 8006198:	2119      	movs	r1, #25
 800619a:	487c      	ldr	r0, [pc, #496]	; (800638c <drawTest+0x3e0>)
 800619c:	f007 fec0 	bl	800df20 <GUI_DispStringAt>
	GUI_DispStringAt("ALL CLEAR", 25, 62);
 80061a0:	223e      	movs	r2, #62	; 0x3e
 80061a2:	2119      	movs	r1, #25
 80061a4:	487a      	ldr	r0, [pc, #488]	; (8006390 <drawTest+0x3e4>)
 80061a6:	f007 febb 	bl	800df20 <GUI_DispStringAt>
	GUI_DispStringAt("PRESENTATION MODE", 25, 106);
 80061aa:	226a      	movs	r2, #106	; 0x6a
 80061ac:	2119      	movs	r1, #25
 80061ae:	4879      	ldr	r0, [pc, #484]	; (8006394 <drawTest+0x3e8>)
 80061b0:	f007 feb6 	bl	800df20 <GUI_DispStringAt>
	GUI_DispStringAt("ALL AUTO", 25, 150);
 80061b4:	2296      	movs	r2, #150	; 0x96
 80061b6:	2119      	movs	r1, #25
 80061b8:	4877      	ldr	r0, [pc, #476]	; (8006398 <drawTest+0x3ec>)
 80061ba:	f007 feb1 	bl	800df20 <GUI_DispStringAt>

	GUI_DispCharAt('1', 50, 194);
 80061be:	22c2      	movs	r2, #194	; 0xc2
 80061c0:	2132      	movs	r1, #50	; 0x32
 80061c2:	2031      	movs	r0, #49	; 0x31
 80061c4:	f007 ff7c 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('1', 50, 238);
 80061c8:	22ee      	movs	r2, #238	; 0xee
 80061ca:	2132      	movs	r1, #50	; 0x32
 80061cc:	2031      	movs	r0, #49	; 0x31
 80061ce:	f007 ff77 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('1', 50, 282);
 80061d2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80061d6:	2132      	movs	r1, #50	; 0x32
 80061d8:	2031      	movs	r0, #49	; 0x31
 80061da:	f007 ff71 	bl	800e0c0 <GUI_DispCharAt>

	GUI_DispCharAt('2', 83, 194);
 80061de:	22c2      	movs	r2, #194	; 0xc2
 80061e0:	2153      	movs	r1, #83	; 0x53
 80061e2:	2032      	movs	r0, #50	; 0x32
 80061e4:	f007 ff6c 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('2', 83, 238);
 80061e8:	22ee      	movs	r2, #238	; 0xee
 80061ea:	2153      	movs	r1, #83	; 0x53
 80061ec:	2032      	movs	r0, #50	; 0x32
 80061ee:	f007 ff67 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('2', 83, 282);
 80061f2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80061f6:	2153      	movs	r1, #83	; 0x53
 80061f8:	2032      	movs	r0, #50	; 0x32
 80061fa:	f007 ff61 	bl	800e0c0 <GUI_DispCharAt>

	GUI_DispCharAt('3', 116, 194);
 80061fe:	22c2      	movs	r2, #194	; 0xc2
 8006200:	2174      	movs	r1, #116	; 0x74
 8006202:	2033      	movs	r0, #51	; 0x33
 8006204:	f007 ff5c 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('3', 116, 238);
 8006208:	22ee      	movs	r2, #238	; 0xee
 800620a:	2174      	movs	r1, #116	; 0x74
 800620c:	2033      	movs	r0, #51	; 0x33
 800620e:	f007 ff57 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('3', 116, 282);
 8006212:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006216:	2174      	movs	r1, #116	; 0x74
 8006218:	2033      	movs	r0, #51	; 0x33
 800621a:	f007 ff51 	bl	800e0c0 <GUI_DispCharAt>

	GUI_DispCharAt('4', 149, 194);
 800621e:	22c2      	movs	r2, #194	; 0xc2
 8006220:	2195      	movs	r1, #149	; 0x95
 8006222:	2034      	movs	r0, #52	; 0x34
 8006224:	f007 ff4c 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('4', 149, 238);
 8006228:	22ee      	movs	r2, #238	; 0xee
 800622a:	2195      	movs	r1, #149	; 0x95
 800622c:	2034      	movs	r0, #52	; 0x34
 800622e:	f007 ff47 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('4', 149, 282);
 8006232:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006236:	2195      	movs	r1, #149	; 0x95
 8006238:	2034      	movs	r0, #52	; 0x34
 800623a:	f007 ff41 	bl	800e0c0 <GUI_DispCharAt>

	GUI_DispCharAt('5', 182, 194);
 800623e:	22c2      	movs	r2, #194	; 0xc2
 8006240:	21b6      	movs	r1, #182	; 0xb6
 8006242:	2035      	movs	r0, #53	; 0x35
 8006244:	f007 ff3c 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('5', 182, 238);
 8006248:	22ee      	movs	r2, #238	; 0xee
 800624a:	21b6      	movs	r1, #182	; 0xb6
 800624c:	2035      	movs	r0, #53	; 0x35
 800624e:	f007 ff37 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('5', 182, 282);
 8006252:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006256:	21b6      	movs	r1, #182	; 0xb6
 8006258:	2035      	movs	r0, #53	; 0x35
 800625a:	f007 ff31 	bl	800e0c0 <GUI_DispCharAt>

	GUI_DispCharAt('A', 215, 194);
 800625e:	22c2      	movs	r2, #194	; 0xc2
 8006260:	21d7      	movs	r1, #215	; 0xd7
 8006262:	2041      	movs	r0, #65	; 0x41
 8006264:	f007 ff2c 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('A', 215, 238);
 8006268:	22ee      	movs	r2, #238	; 0xee
 800626a:	21d7      	movs	r1, #215	; 0xd7
 800626c:	2041      	movs	r0, #65	; 0x41
 800626e:	f007 ff27 	bl	800e0c0 <GUI_DispCharAt>
	GUI_DispCharAt('A', 215, 282);
 8006272:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8006276:	21d7      	movs	r1, #215	; 0xd7
 8006278:	2041      	movs	r0, #65	; 0x41
 800627a:	f007 ff21 	bl	800e0c0 <GUI_DispCharAt>
	GUI_EnableAlpha(0);
 800627e:	2000      	movs	r0, #0
 8006280:	f007 fbb0 	bl	800d9e4 <GUI_EnableAlpha>

	/* Lines under modes */
	GUI_SetColor(CUS_LIGHTBLUE);
 8006284:	483f      	ldr	r0, [pc, #252]	; (8006384 <drawTest+0x3d8>)
 8006286:	f006 f8c5 	bl	800c414 <GUI_SetColor>
	GUI_DrawLine(24, 35, 225, 35);
 800628a:	2323      	movs	r3, #35	; 0x23
 800628c:	22e1      	movs	r2, #225	; 0xe1
 800628e:	2123      	movs	r1, #35	; 0x23
 8006290:	2018      	movs	r0, #24
 8006292:	f007 fe27 	bl	800dee4 <GUI_DrawLine>
	GUI_SetColor(GUI_BLACK);
 8006296:	2000      	movs	r0, #0
 8006298:	f006 f8bc 	bl	800c414 <GUI_SetColor>
	GUI_DrawLine(24, 79, 225, 79);
 800629c:	234f      	movs	r3, #79	; 0x4f
 800629e:	22e1      	movs	r2, #225	; 0xe1
 80062a0:	214f      	movs	r1, #79	; 0x4f
 80062a2:	2018      	movs	r0, #24
 80062a4:	f007 fe1e 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(24, 123, 225, 123);
 80062a8:	237b      	movs	r3, #123	; 0x7b
 80062aa:	22e1      	movs	r2, #225	; 0xe1
 80062ac:	217b      	movs	r1, #123	; 0x7b
 80062ae:	2018      	movs	r0, #24
 80062b0:	f007 fe18 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(24, 167, 225, 167);
 80062b4:	23a7      	movs	r3, #167	; 0xa7
 80062b6:	22e1      	movs	r2, #225	; 0xe1
 80062b8:	21a7      	movs	r1, #167	; 0xa7
 80062ba:	2018      	movs	r0, #24
 80062bc:	f007 fe12 	bl	800dee4 <GUI_DrawLine>

	/* Lines under values */
	GUI_DrawLine(44, 211, 63, 211); /* For 1 */
 80062c0:	23d3      	movs	r3, #211	; 0xd3
 80062c2:	223f      	movs	r2, #63	; 0x3f
 80062c4:	21d3      	movs	r1, #211	; 0xd3
 80062c6:	202c      	movs	r0, #44	; 0x2c
 80062c8:	f007 fe0c 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(44, 255, 63, 255);
 80062cc:	23ff      	movs	r3, #255	; 0xff
 80062ce:	223f      	movs	r2, #63	; 0x3f
 80062d0:	21ff      	movs	r1, #255	; 0xff
 80062d2:	202c      	movs	r0, #44	; 0x2c
 80062d4:	f007 fe06 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(44, 299, 63, 299);
 80062d8:	f240 132b 	movw	r3, #299	; 0x12b
 80062dc:	223f      	movs	r2, #63	; 0x3f
 80062de:	f240 112b 	movw	r1, #299	; 0x12b
 80062e2:	202c      	movs	r0, #44	; 0x2c
 80062e4:	f007 fdfe 	bl	800dee4 <GUI_DrawLine>

	GUI_DrawLine(77, 211, 96, 211); /* For 2 */
 80062e8:	23d3      	movs	r3, #211	; 0xd3
 80062ea:	2260      	movs	r2, #96	; 0x60
 80062ec:	21d3      	movs	r1, #211	; 0xd3
 80062ee:	204d      	movs	r0, #77	; 0x4d
 80062f0:	f007 fdf8 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(77, 255, 96, 255);
 80062f4:	23ff      	movs	r3, #255	; 0xff
 80062f6:	2260      	movs	r2, #96	; 0x60
 80062f8:	21ff      	movs	r1, #255	; 0xff
 80062fa:	204d      	movs	r0, #77	; 0x4d
 80062fc:	f007 fdf2 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(77, 299, 96, 299);
 8006300:	f240 132b 	movw	r3, #299	; 0x12b
 8006304:	2260      	movs	r2, #96	; 0x60
 8006306:	f240 112b 	movw	r1, #299	; 0x12b
 800630a:	204d      	movs	r0, #77	; 0x4d
 800630c:	f007 fdea 	bl	800dee4 <GUI_DrawLine>

	GUI_DrawLine(110, 211, 127, 211); /* For 3 */
 8006310:	23d3      	movs	r3, #211	; 0xd3
 8006312:	227f      	movs	r2, #127	; 0x7f
 8006314:	21d3      	movs	r1, #211	; 0xd3
 8006316:	206e      	movs	r0, #110	; 0x6e
 8006318:	f007 fde4 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(110, 255, 127, 255);
 800631c:	23ff      	movs	r3, #255	; 0xff
 800631e:	227f      	movs	r2, #127	; 0x7f
 8006320:	21ff      	movs	r1, #255	; 0xff
 8006322:	206e      	movs	r0, #110	; 0x6e
 8006324:	f007 fdde 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(110, 299, 127, 299);
 8006328:	f240 132b 	movw	r3, #299	; 0x12b
 800632c:	227f      	movs	r2, #127	; 0x7f
 800632e:	f240 112b 	movw	r1, #299	; 0x12b
 8006332:	206e      	movs	r0, #110	; 0x6e
 8006334:	f007 fdd6 	bl	800dee4 <GUI_DrawLine>

	GUI_DrawLine(143, 211, 160, 211); /* For 4 */
 8006338:	23d3      	movs	r3, #211	; 0xd3
 800633a:	22a0      	movs	r2, #160	; 0xa0
 800633c:	21d3      	movs	r1, #211	; 0xd3
 800633e:	208f      	movs	r0, #143	; 0x8f
 8006340:	f007 fdd0 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(143, 255, 160, 255);
 8006344:	23ff      	movs	r3, #255	; 0xff
 8006346:	22a0      	movs	r2, #160	; 0xa0
 8006348:	21ff      	movs	r1, #255	; 0xff
 800634a:	208f      	movs	r0, #143	; 0x8f
 800634c:	f007 fdca 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(143, 299, 160, 299);
 8006350:	f240 132b 	movw	r3, #299	; 0x12b
 8006354:	22a0      	movs	r2, #160	; 0xa0
 8006356:	f240 112b 	movw	r1, #299	; 0x12b
 800635a:	208f      	movs	r0, #143	; 0x8f
 800635c:	f007 fdc2 	bl	800dee4 <GUI_DrawLine>

	GUI_SetColor(CUS_LIGHTBLUE);
 8006360:	4808      	ldr	r0, [pc, #32]	; (8006384 <drawTest+0x3d8>)
 8006362:	f006 f857 	bl	800c414 <GUI_SetColor>
	GUI_DrawLine(176, 211, 193, 211); /* For 5 */
 8006366:	23d3      	movs	r3, #211	; 0xd3
 8006368:	22c1      	movs	r2, #193	; 0xc1
 800636a:	21d3      	movs	r1, #211	; 0xd3
 800636c:	20b0      	movs	r0, #176	; 0xb0
 800636e:	f007 fdb9 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(176, 255, 193, 255);
 8006372:	23ff      	movs	r3, #255	; 0xff
 8006374:	e012      	b.n	800639c <drawTest+0x3f0>
 8006376:	bf00      	nop
 8006378:	00101005 	.word	0x00101005
 800637c:	080134cc 	.word	0x080134cc
 8006380:	00333333 	.word	0x00333333
 8006384:	00ffd218 	.word	0x00ffd218
 8006388:	00202020 	.word	0x00202020
 800638c:	080129d0 	.word	0x080129d0
 8006390:	080129d8 	.word	0x080129d8
 8006394:	080129e4 	.word	0x080129e4
 8006398:	080129f8 	.word	0x080129f8
 800639c:	22c1      	movs	r2, #193	; 0xc1
 800639e:	21ff      	movs	r1, #255	; 0xff
 80063a0:	20b0      	movs	r0, #176	; 0xb0
 80063a2:	f007 fd9f 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(176, 299, 193, 299);
 80063a6:	f240 132b 	movw	r3, #299	; 0x12b
 80063aa:	22c1      	movs	r2, #193	; 0xc1
 80063ac:	f240 112b 	movw	r1, #299	; 0x12b
 80063b0:	20b0      	movs	r0, #176	; 0xb0
 80063b2:	f007 fd97 	bl	800dee4 <GUI_DrawLine>

	GUI_SetColor(GUI_BLACK);
 80063b6:	2000      	movs	r0, #0
 80063b8:	f006 f82c 	bl	800c414 <GUI_SetColor>
	GUI_DrawLine(209, 211, 226, 211); /* For Auto */
 80063bc:	23d3      	movs	r3, #211	; 0xd3
 80063be:	22e2      	movs	r2, #226	; 0xe2
 80063c0:	21d3      	movs	r1, #211	; 0xd3
 80063c2:	20d1      	movs	r0, #209	; 0xd1
 80063c4:	f007 fd8e 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(209, 255, 226, 255);
 80063c8:	23ff      	movs	r3, #255	; 0xff
 80063ca:	22e2      	movs	r2, #226	; 0xe2
 80063cc:	21ff      	movs	r1, #255	; 0xff
 80063ce:	20d1      	movs	r0, #209	; 0xd1
 80063d0:	f007 fd88 	bl	800dee4 <GUI_DrawLine>
	GUI_DrawLine(209, 299, 226, 299);
 80063d4:	f240 132b 	movw	r3, #299	; 0x12b
 80063d8:	22e2      	movs	r2, #226	; 0xe2
 80063da:	f240 112b 	movw	r1, #299	; 0x12b
 80063de:	20d1      	movs	r0, #209	; 0xd1
 80063e0:	f007 fd80 	bl	800dee4 <GUI_DrawLine>
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop

080063ec <graphicsMain>:

void graphicsMain(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
	drawTest();
 80063f0:	f7ff fddc 	bl	8005fac <drawTest>
	while (1)
	{
		GUI_Delay(10);
 80063f4:	200a      	movs	r0, #10
 80063f6:	f005 ff9c 	bl	800c332 <GUI_Delay>
 80063fa:	e7fb      	b.n	80063f4 <graphicsMain+0x8>

080063fc <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8006400:	20ca      	movs	r0, #202	; 0xca
 8006402:	f000 f943 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8006406:	20c3      	movs	r0, #195	; 0xc3
 8006408:	f000 f96a 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x08);
 800640c:	2008      	movs	r0, #8
 800640e:	f000 f967 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x50);
 8006412:	2050      	movs	r0, #80	; 0x50
 8006414:	f000 f964 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 8006418:	20cf      	movs	r0, #207	; 0xcf
 800641a:	f000 f937 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800641e:	2000      	movs	r0, #0
 8006420:	f000 f95e 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8006424:	20c1      	movs	r0, #193	; 0xc1
 8006426:	f000 f95b 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x30);
 800642a:	2030      	movs	r0, #48	; 0x30
 800642c:	f000 f958 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8006430:	20ed      	movs	r0, #237	; 0xed
 8006432:	f000 f92b 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8006436:	2064      	movs	r0, #100	; 0x64
 8006438:	f000 f952 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x03);
 800643c:	2003      	movs	r0, #3
 800643e:	f000 f94f 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x12);
 8006442:	2012      	movs	r0, #18
 8006444:	f000 f94c 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x81);
 8006448:	2081      	movs	r0, #129	; 0x81
 800644a:	f000 f949 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 800644e:	20e8      	movs	r0, #232	; 0xe8
 8006450:	f000 f91c 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8006454:	2085      	movs	r0, #133	; 0x85
 8006456:	f000 f943 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800645a:	2000      	movs	r0, #0
 800645c:	f000 f940 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x78);
 8006460:	2078      	movs	r0, #120	; 0x78
 8006462:	f000 f93d 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8006466:	20cb      	movs	r0, #203	; 0xcb
 8006468:	f000 f910 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x39);
 800646c:	2039      	movs	r0, #57	; 0x39
 800646e:	f000 f937 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8006472:	202c      	movs	r0, #44	; 0x2c
 8006474:	f000 f934 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8006478:	2000      	movs	r0, #0
 800647a:	f000 f931 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x34);
 800647e:	2034      	movs	r0, #52	; 0x34
 8006480:	f000 f92e 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x02);
 8006484:	2002      	movs	r0, #2
 8006486:	f000 f92b 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 800648a:	20f7      	movs	r0, #247	; 0xf7
 800648c:	f000 f8fe 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8006490:	2020      	movs	r0, #32
 8006492:	f000 f925 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8006496:	20ea      	movs	r0, #234	; 0xea
 8006498:	f000 f8f8 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800649c:	2000      	movs	r0, #0
 800649e:	f000 f91f 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 80064a2:	2000      	movs	r0, #0
 80064a4:	f000 f91c 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 80064a8:	20b1      	movs	r0, #177	; 0xb1
 80064aa:	f000 f8ef 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80064ae:	2000      	movs	r0, #0
 80064b0:	f000 f916 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80064b4:	201b      	movs	r0, #27
 80064b6:	f000 f913 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 80064ba:	20b6      	movs	r0, #182	; 0xb6
 80064bc:	f000 f8e6 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80064c0:	200a      	movs	r0, #10
 80064c2:	f000 f90d 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0xA2);
 80064c6:	20a2      	movs	r0, #162	; 0xa2
 80064c8:	f000 f90a 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 80064cc:	20c0      	movs	r0, #192	; 0xc0
 80064ce:	f000 f8dd 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80064d2:	2010      	movs	r0, #16
 80064d4:	f000 f904 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 80064d8:	20c1      	movs	r0, #193	; 0xc1
 80064da:	f000 f8d7 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80064de:	2010      	movs	r0, #16
 80064e0:	f000 f8fe 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 80064e4:	20c5      	movs	r0, #197	; 0xc5
 80064e6:	f000 f8d1 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x45);
 80064ea:	2045      	movs	r0, #69	; 0x45
 80064ec:	f000 f8f8 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x15);
 80064f0:	2015      	movs	r0, #21
 80064f2:	f000 f8f5 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 80064f6:	20c7      	movs	r0, #199	; 0xc7
 80064f8:	f000 f8c8 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x90);
 80064fc:	2090      	movs	r0, #144	; 0x90
 80064fe:	f000 f8ef 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8006502:	2036      	movs	r0, #54	; 0x36
 8006504:	f000 f8c2 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8006508:	20c8      	movs	r0, #200	; 0xc8
 800650a:	f000 f8e9 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 800650e:	20f2      	movs	r0, #242	; 0xf2
 8006510:	f000 f8bc 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8006514:	2000      	movs	r0, #0
 8006516:	f000 f8e3 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 800651a:	20b0      	movs	r0, #176	; 0xb0
 800651c:	f000 f8b6 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8006520:	20c2      	movs	r0, #194	; 0xc2
 8006522:	f000 f8dd 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8006526:	20b6      	movs	r0, #182	; 0xb6
 8006528:	f000 f8b0 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 800652c:	200a      	movs	r0, #10
 800652e:	f000 f8d7 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0xA7);
 8006532:	20a7      	movs	r0, #167	; 0xa7
 8006534:	f000 f8d4 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x27);
 8006538:	2027      	movs	r0, #39	; 0x27
 800653a:	f000 f8d1 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x04);
 800653e:	2004      	movs	r0, #4
 8006540:	f000 f8ce 	bl	80066e0 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8006544:	202a      	movs	r0, #42	; 0x2a
 8006546:	f000 f8a1 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800654a:	2000      	movs	r0, #0
 800654c:	f000 f8c8 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8006550:	2000      	movs	r0, #0
 8006552:	f000 f8c5 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 8006556:	2000      	movs	r0, #0
 8006558:	f000 f8c2 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0xEF);
 800655c:	20ef      	movs	r0, #239	; 0xef
 800655e:	f000 f8bf 	bl	80066e0 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8006562:	202b      	movs	r0, #43	; 0x2b
 8006564:	f000 f892 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8006568:	2000      	movs	r0, #0
 800656a:	f000 f8b9 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800656e:	2000      	movs	r0, #0
 8006570:	f000 f8b6 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x01);
 8006574:	2001      	movs	r0, #1
 8006576:	f000 f8b3 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x3F);
 800657a:	203f      	movs	r0, #63	; 0x3f
 800657c:	f000 f8b0 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8006580:	20f6      	movs	r0, #246	; 0xf6
 8006582:	f000 f883 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8006586:	2001      	movs	r0, #1
 8006588:	f000 f8aa 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800658c:	2000      	movs	r0, #0
 800658e:	f000 f8a7 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x06);
 8006592:	2006      	movs	r0, #6
 8006594:	f000 f8a4 	bl	80066e0 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8006598:	202c      	movs	r0, #44	; 0x2c
 800659a:	f000 f877 	bl	800668c <LCD_WriteCommand>
	HAL_Delay(100);
 800659e:	2064      	movs	r0, #100	; 0x64
 80065a0:	f7fa f81e 	bl	80005e0 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 80065a4:	2026      	movs	r0, #38	; 0x26
 80065a6:	f000 f871 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x01);
 80065aa:	2001      	movs	r0, #1
 80065ac:	f000 f898 	bl	80066e0 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 80065b0:	20e0      	movs	r0, #224	; 0xe0
 80065b2:	f000 f86b 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 80065b6:	200f      	movs	r0, #15
 80065b8:	f000 f892 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x29);
 80065bc:	2029      	movs	r0, #41	; 0x29
 80065be:	f000 f88f 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x24);
 80065c2:	2024      	movs	r0, #36	; 0x24
 80065c4:	f000 f88c 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80065c8:	200c      	movs	r0, #12
 80065ca:	f000 f889 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x0E);
 80065ce:	200e      	movs	r0, #14
 80065d0:	f000 f886 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x09);
 80065d4:	2009      	movs	r0, #9
 80065d6:	f000 f883 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x4E);
 80065da:	204e      	movs	r0, #78	; 0x4e
 80065dc:	f000 f880 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x78);
 80065e0:	2078      	movs	r0, #120	; 0x78
 80065e2:	f000 f87d 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x3C);
 80065e6:	203c      	movs	r0, #60	; 0x3c
 80065e8:	f000 f87a 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x09);
 80065ec:	2009      	movs	r0, #9
 80065ee:	f000 f877 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x13);
 80065f2:	2013      	movs	r0, #19
 80065f4:	f000 f874 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x05);
 80065f8:	2005      	movs	r0, #5
 80065fa:	f000 f871 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x17);
 80065fe:	2017      	movs	r0, #23
 8006600:	f000 f86e 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x11);
 8006604:	2011      	movs	r0, #17
 8006606:	f000 f86b 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x00);
 800660a:	2000      	movs	r0, #0
 800660c:	f000 f868 	bl	80066e0 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8006610:	20e1      	movs	r0, #225	; 0xe1
 8006612:	f000 f83b 	bl	800668c <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8006616:	2000      	movs	r0, #0
 8006618:	f000 f862 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x16);
 800661c:	2016      	movs	r0, #22
 800661e:	f000 f85f 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8006622:	201b      	movs	r0, #27
 8006624:	f000 f85c 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x04);
 8006628:	2004      	movs	r0, #4
 800662a:	f000 f859 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x11);
 800662e:	2011      	movs	r0, #17
 8006630:	f000 f856 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x07);
 8006634:	2007      	movs	r0, #7
 8006636:	f000 f853 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x31);
 800663a:	2031      	movs	r0, #49	; 0x31
 800663c:	f000 f850 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x33);
 8006640:	2033      	movs	r0, #51	; 0x33
 8006642:	f000 f84d 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x42);
 8006646:	2042      	movs	r0, #66	; 0x42
 8006648:	f000 f84a 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x05);
 800664c:	2005      	movs	r0, #5
 800664e:	f000 f847 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8006652:	200c      	movs	r0, #12
 8006654:	f000 f844 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8006658:	200a      	movs	r0, #10
 800665a:	f000 f841 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x28);
 800665e:	2028      	movs	r0, #40	; 0x28
 8006660:	f000 f83e 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8006664:	202f      	movs	r0, #47	; 0x2f
 8006666:	f000 f83b 	bl	80066e0 <LCD_WriteData>
	LCD_WriteData(0x0F);
 800666a:	200f      	movs	r0, #15
 800666c:	f000 f838 	bl	80066e0 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8006670:	2011      	movs	r0, #17
 8006672:	f000 f80b 	bl	800668c <LCD_WriteCommand>
	HAL_Delay(100);
 8006676:	2064      	movs	r0, #100	; 0x64
 8006678:	f7f9 ffb2 	bl	80005e0 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 800667c:	2029      	movs	r0, #41	; 0x29
 800667e:	f000 f805 	bl	800668c <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8006682:	202c      	movs	r0, #44	; 0x2c
 8006684:	f000 f802 	bl	800668c <LCD_WriteCommand>
}
 8006688:	bf00      	nop
 800668a:	bd80      	pop	{r7, pc}

0800668c <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	733b      	strb	r3, [r7, #12]
 800669a:	2300      	movs	r3, #0
 800669c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066a4:	480b      	ldr	r0, [pc, #44]	; (80066d4 <LCD_WriteCommand+0x48>)
 80066a6:	f7fb f87b 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 80066aa:	2200      	movs	r2, #0
 80066ac:	2104      	movs	r1, #4
 80066ae:	480a      	ldr	r0, [pc, #40]	; (80066d8 <LCD_WriteCommand+0x4c>)
 80066b0:	f7fb f876 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 80066b4:	f107 010c 	add.w	r1, r7, #12
 80066b8:	2364      	movs	r3, #100	; 0x64
 80066ba:	2201      	movs	r2, #1
 80066bc:	4807      	ldr	r0, [pc, #28]	; (80066dc <LCD_WriteCommand+0x50>)
 80066be:	f7fd fcc5 	bl	800404c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 80066c2:	2201      	movs	r2, #1
 80066c4:	2104      	movs	r1, #4
 80066c6:	4804      	ldr	r0, [pc, #16]	; (80066d8 <LCD_WriteCommand+0x4c>)
 80066c8:	f7fb f86a 	bl	80017a0 <HAL_GPIO_WritePin>
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	40020c00 	.word	0x40020c00
 80066d8:	40020800 	.word	0x40020800
 80066dc:	20022ed4 	.word	0x20022ed4

080066e0 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	733b      	strb	r3, [r7, #12]
 80066ee:	2300      	movs	r3, #0
 80066f0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 80066f2:	2201      	movs	r2, #1
 80066f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066f8:	480b      	ldr	r0, [pc, #44]	; (8006728 <LCD_WriteData+0x48>)
 80066fa:	f7fb f851 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 80066fe:	2200      	movs	r2, #0
 8006700:	2104      	movs	r1, #4
 8006702:	480a      	ldr	r0, [pc, #40]	; (800672c <LCD_WriteData+0x4c>)
 8006704:	f7fb f84c 	bl	80017a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8006708:	f107 010c 	add.w	r1, r7, #12
 800670c:	2364      	movs	r3, #100	; 0x64
 800670e:	2201      	movs	r2, #1
 8006710:	4807      	ldr	r0, [pc, #28]	; (8006730 <LCD_WriteData+0x50>)
 8006712:	f7fd fc9b 	bl	800404c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8006716:	2201      	movs	r2, #1
 8006718:	2104      	movs	r1, #4
 800671a:	4804      	ldr	r0, [pc, #16]	; (800672c <LCD_WriteData+0x4c>)
 800671c:	f7fb f840 	bl	80017a0 <HAL_GPIO_WritePin>
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40020c00 	.word	0x40020c00
 800672c:	40020800 	.word	0x40020800
 8006730:	20022ed4 	.word	0x20022ed4

08006734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800673a:	f7f9 fedf 	bl	80004fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800673e:	f000 f82d 	bl	800679c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006742:	f000 fab7 	bl	8006cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006746:	f000 fa45 	bl	8006bd4 <MX_DMA_Init>
  MX_LTDC_Init();
 800674a:	f000 f923 	bl	8006994 <MX_LTDC_Init>
  MX_SPI5_Init();
 800674e:	f000 f9d7 	bl	8006b00 <MX_SPI5_Init>
  MX_FMC_Init();
 8006752:	f000 fa67 	bl	8006c24 <MX_FMC_Init>
  MX_DMA2D_Init();
 8006756:	f000 f8ab 	bl	80068b0 <MX_DMA2D_Init>
  MX_I2C3_Init();
 800675a:	f000 f8db 	bl	8006914 <MX_I2C3_Init>
  MX_TIM6_Init();
 800675e:	f000 fa05 	bl	8006b6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8006762:	480c      	ldr	r0, [pc, #48]	; (8006794 <main+0x60>)
 8006764:	f000 fb74 	bl	8006e50 <SDRAM_init>
  TP_Config();
 8006768:	f001 f994 	bl	8007a94 <TP_Config>
  //HAL_TIM_Base_Start_IT(&htim6);
  __HAL_RCC_CRC_CLK_ENABLE();
 800676c:	2300      	movs	r3, #0
 800676e:	607b      	str	r3, [r7, #4]
 8006770:	4a09      	ldr	r2, [pc, #36]	; (8006798 <main+0x64>)
 8006772:	4b09      	ldr	r3, [pc, #36]	; (8006798 <main+0x64>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800677a:	6313      	str	r3, [r2, #48]	; 0x30
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <main+0x64>)
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
  GUI_Init();
 8006788:	f007 fe1e 	bl	800e3c8 <GUI_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  graphicsMain();
 800678c:	f7ff fe2e 	bl	80063ec <graphicsMain>
  while (1)
 8006790:	e7fe      	b.n	8006790 <main+0x5c>
 8006792:	bf00      	nop
 8006794:	20022fa8 	.word	0x20022fa8
 8006798:	40023800 	.word	0x40023800

0800679c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b0a0      	sub	sp, #128	; 0x80
 80067a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80067a6:	2230      	movs	r2, #48	; 0x30
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f00c f8fc 	bl	80129a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	609a      	str	r2, [r3, #8]
 80067bc:	60da      	str	r2, [r3, #12]
 80067be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067c0:	f107 030c 	add.w	r3, r7, #12
 80067c4:	2230      	movs	r2, #48	; 0x30
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f00c f8ed 	bl	80129a8 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	4a35      	ldr	r2, [pc, #212]	; (80068a8 <SystemClock_Config+0x10c>)
 80067d4:	4b34      	ldr	r3, [pc, #208]	; (80068a8 <SystemClock_Config+0x10c>)
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067dc:	6413      	str	r3, [r2, #64]	; 0x40
 80067de:	4b32      	ldr	r3, [pc, #200]	; (80068a8 <SystemClock_Config+0x10c>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	60bb      	str	r3, [r7, #8]
 80067e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
 80067ee:	4a2f      	ldr	r2, [pc, #188]	; (80068ac <SystemClock_Config+0x110>)
 80067f0:	4b2e      	ldr	r3, [pc, #184]	; (80068ac <SystemClock_Config+0x110>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <SystemClock_Config+0x110>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006802:	607b      	str	r3, [r7, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006806:	2302      	movs	r3, #2
 8006808:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800680a:	2301      	movs	r3, #1
 800680c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800680e:	2310      	movs	r3, #16
 8006810:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006812:	2302      	movs	r3, #2
 8006814:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006816:	2300      	movs	r3, #0
 8006818:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800681a:	2308      	movs	r3, #8
 800681c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800681e:	23b4      	movs	r3, #180	; 0xb4
 8006820:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006822:	2302      	movs	r3, #2
 8006824:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006826:	2304      	movs	r3, #4
 8006828:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800682a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800682e:	4618      	mov	r0, r3
 8006830:	f7fc fd8c 	bl	800334c <HAL_RCC_OscConfig>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800683a:	f000 fb01 	bl	8006e40 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800683e:	f7fc fd35 	bl	80032ac <HAL_PWREx_EnableOverDrive>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8006848:	f000 fafa 	bl	8006e40 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800684c:	230f      	movs	r3, #15
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006850:	2302      	movs	r3, #2
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006854:	2300      	movs	r3, #0
 8006856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800685c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800685e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006862:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006864:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006868:	2105      	movs	r1, #5
 800686a:	4618      	mov	r0, r3
 800686c:	f7fc ffb0 	bl	80037d0 <HAL_RCC_ClockConfig>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8006876:	f000 fae3 	bl	8006e40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800687a:	2308      	movs	r3, #8
 800687c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800687e:	233c      	movs	r3, #60	; 0x3c
 8006880:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8006882:	2302      	movs	r3, #2
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800688c:	f107 030c 	add.w	r3, r7, #12
 8006890:	4618      	mov	r0, r3
 8006892:	f7fd f955 	bl	8003b40 <HAL_RCCEx_PeriphCLKConfig>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800689c:	f000 fad0 	bl	8006e40 <Error_Handler>
  }
}
 80068a0:	bf00      	nop
 80068a2:	3780      	adds	r7, #128	; 0x80
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40023800 	.word	0x40023800
 80068ac:	40007000 	.word	0x40007000

080068b0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80068b4:	4b15      	ldr	r3, [pc, #84]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068b6:	4a16      	ldr	r2, [pc, #88]	; (8006910 <MX_DMA2D_Init+0x60>)
 80068b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80068ba:	4b14      	ldr	r3, [pc, #80]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068bc:	2200      	movs	r2, #0
 80068be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80068c0:	4b12      	ldr	r3, [pc, #72]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068da:	2201      	movs	r2, #1
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80068e4:	4809      	ldr	r0, [pc, #36]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068e6:	f7fa fab9 	bl	8000e5c <HAL_DMA2D_Init>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80068f0:	f000 faa6 	bl	8006e40 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80068f4:	2101      	movs	r1, #1
 80068f6:	4805      	ldr	r0, [pc, #20]	; (800690c <MX_DMA2D_Init+0x5c>)
 80068f8:	f7fa fc0a 	bl	8001110 <HAL_DMA2D_ConfigLayer>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006902:	f000 fa9d 	bl	8006e40 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20022f68 	.word	0x20022f68
 8006910:	4002b000 	.word	0x4002b000

08006914 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8006918:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <MX_I2C3_Init+0x74>)
 800691a:	4a1c      	ldr	r2, [pc, #112]	; (800698c <MX_I2C3_Init+0x78>)
 800691c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800691e:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <MX_I2C3_Init+0x74>)
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <MX_I2C3_Init+0x7c>)
 8006922:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006924:	4b18      	ldr	r3, [pc, #96]	; (8006988 <MX_I2C3_Init+0x74>)
 8006926:	2200      	movs	r2, #0
 8006928:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 800692a:	4b17      	ldr	r3, [pc, #92]	; (8006988 <MX_I2C3_Init+0x74>)
 800692c:	2282      	movs	r2, #130	; 0x82
 800692e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006930:	4b15      	ldr	r3, [pc, #84]	; (8006988 <MX_I2C3_Init+0x74>)
 8006932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006936:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <MX_I2C3_Init+0x74>)
 800693a:	2200      	movs	r2, #0
 800693c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800693e:	4b12      	ldr	r3, [pc, #72]	; (8006988 <MX_I2C3_Init+0x74>)
 8006940:	2200      	movs	r2, #0
 8006942:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <MX_I2C3_Init+0x74>)
 8006946:	2200      	movs	r2, #0
 8006948:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <MX_I2C3_Init+0x74>)
 800694c:	2200      	movs	r2, #0
 800694e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006950:	480d      	ldr	r0, [pc, #52]	; (8006988 <MX_I2C3_Init+0x74>)
 8006952:	f7fa ff3f 	bl	80017d4 <HAL_I2C_Init>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800695c:	f000 fa70 	bl	8006e40 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006960:	2100      	movs	r1, #0
 8006962:	4809      	ldr	r0, [pc, #36]	; (8006988 <MX_I2C3_Init+0x74>)
 8006964:	f7fb fe4b 	bl	80025fe <HAL_I2CEx_ConfigAnalogFilter>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800696e:	f000 fa67 	bl	8006e40 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8006972:	2100      	movs	r1, #0
 8006974:	4804      	ldr	r0, [pc, #16]	; (8006988 <MX_I2C3_Init+0x74>)
 8006976:	f7fb fe7e 	bl	8002676 <HAL_I2CEx_ConfigDigitalFilter>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006980:	f000 fa5e 	bl	8006e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8006984:	bf00      	nop
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20022e20 	.word	0x20022e20
 800698c:	40005c00 	.word	0x40005c00
 8006990:	000186a0 	.word	0x000186a0

08006994 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b09a      	sub	sp, #104	; 0x68
 8006998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800699a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800699e:	2234      	movs	r2, #52	; 0x34
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f00c f800 	bl	80129a8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80069a8:	463b      	mov	r3, r7
 80069aa:	2234      	movs	r2, #52	; 0x34
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f00b fffa 	bl	80129a8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80069b4:	4b50      	ldr	r3, [pc, #320]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069b6:	4a51      	ldr	r2, [pc, #324]	; (8006afc <MX_LTDC_Init+0x168>)
 80069b8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80069ba:	4b4f      	ldr	r3, [pc, #316]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069bc:	2200      	movs	r2, #0
 80069be:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80069c0:	4b4d      	ldr	r3, [pc, #308]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80069c6:	4b4c      	ldr	r3, [pc, #304]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80069cc:	4b4a      	ldr	r3, [pc, #296]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 80069d2:	4b49      	ldr	r3, [pc, #292]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069d4:	2208      	movs	r2, #8
 80069d6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80069d8:	4b47      	ldr	r3, [pc, #284]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069da:	2200      	movs	r2, #0
 80069dc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80069de:	4b46      	ldr	r3, [pc, #280]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069e0:	221d      	movs	r2, #29
 80069e2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80069e4:	4b44      	ldr	r3, [pc, #272]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069e6:	2203      	movs	r2, #3
 80069e8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80069ea:	4b43      	ldr	r3, [pc, #268]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069ec:	f240 120d 	movw	r2, #269	; 0x10d
 80069f0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80069f2:	4b41      	ldr	r3, [pc, #260]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069f4:	f240 1243 	movw	r2, #323	; 0x143
 80069f8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80069fa:	4b3f      	ldr	r3, [pc, #252]	; (8006af8 <MX_LTDC_Init+0x164>)
 80069fc:	f240 1217 	movw	r2, #279	; 0x117
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8006a02:	4b3d      	ldr	r3, [pc, #244]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006a04:	f240 1247 	movw	r2, #327	; 0x147
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8006a0a:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8006a12:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8006a1a:	4b37      	ldr	r3, [pc, #220]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8006a22:	4835      	ldr	r0, [pc, #212]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006a24:	f7fb fe66 	bl	80026f4 <HAL_LTDC_Init>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8006a2e:	f000 fa07 	bl	8006e40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8006a36:	23f0      	movs	r3, #240	; 0xf0
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8006a3e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a42:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006a44:	2300      	movs	r3, #0
 8006a46:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8006a48:	23ff      	movs	r3, #255	; 0xff
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006a50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006a54:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006a56:	2307      	movs	r3, #7
 8006a58:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8006a5e:	23f0      	movs	r3, #240	; 0xf0
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8006a62:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006a66:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006a7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4619      	mov	r1, r3
 8006a82:	481d      	ldr	r0, [pc, #116]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006a84:	f7fb ffda 	bl	8002a3c <HAL_LTDC_ConfigLayer>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 8006a8e:	f000 f9d7 	bl	8006e40 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 8006a96:	23f0      	movs	r3, #240	; 0xf0
 8006a98:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 8006a9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006aa2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8006aac:	2300      	movs	r3, #0
 8006aae:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8006ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab4:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8006ab6:	2305      	movs	r3, #5
 8006ab8:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 8006abe:	23f0      	movs	r3, #240	; 0xf0
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 8006ac2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8006ada:	463b      	mov	r3, r7
 8006adc:	2201      	movs	r2, #1
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4805      	ldr	r0, [pc, #20]	; (8006af8 <MX_LTDC_Init+0x164>)
 8006ae2:	f7fb ffab 	bl	8002a3c <HAL_LTDC_ConfigLayer>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 8006aec:	f000 f9a8 	bl	8006e40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8006af0:	bf00      	nop
 8006af2:	3768      	adds	r7, #104	; 0x68
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20022d18 	.word	0x20022d18
 8006afc:	40016800 	.word	0x40016800

08006b00 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8006b04:	4b17      	ldr	r3, [pc, #92]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <MX_SPI5_Init+0x68>)
 8006b08:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006b10:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006b12:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006b18:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b1e:	4b11      	ldr	r3, [pc, #68]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006b24:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006b2a:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b30:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b34:	2218      	movs	r2, #24
 8006b36:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b44:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b4c:	220a      	movs	r2, #10
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006b50:	4804      	ldr	r0, [pc, #16]	; (8006b64 <MX_SPI5_Init+0x64>)
 8006b52:	f7fd fa18 	bl	8003f86 <HAL_SPI_Init>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8006b5c:	f000 f970 	bl	8006e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006b60:	bf00      	nop
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20022ed4 	.word	0x20022ed4
 8006b68:	40015000 	.word	0x40015000

08006b6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b72:	463b      	mov	r3, r7
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006b7a:	4b14      	ldr	r3, [pc, #80]	; (8006bcc <MX_TIM6_Init+0x60>)
 8006b7c:	4a14      	ldr	r2, [pc, #80]	; (8006bd0 <MX_TIM6_Init+0x64>)
 8006b7e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8006b80:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <MX_TIM6_Init+0x60>)
 8006b82:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b88:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <MX_TIM6_Init+0x60>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8006b8e:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <MX_TIM6_Init+0x60>)
 8006b90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b94:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006b96:	480d      	ldr	r0, [pc, #52]	; (8006bcc <MX_TIM6_Init+0x60>)
 8006b98:	f7fd fc1a 	bl	80043d0 <HAL_TIM_Base_Init>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 8006ba2:	f000 f94d 	bl	8006e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8006ba6:	2310      	movs	r3, #16
 8006ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006bae:	463b      	mov	r3, r7
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4806      	ldr	r0, [pc, #24]	; (8006bcc <MX_TIM6_Init+0x60>)
 8006bb4:	f7fd fe1c 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <MX_TIM6_Init+0x56>
  {
    Error_Handler();
 8006bbe:	f000 f93f 	bl	8006e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20022f2c 	.word	0x20022f2c
 8006bd0:	40001000 	.word	0x40001000

08006bd4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006bda:	2300      	movs	r3, #0
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	4a10      	ldr	r2, [pc, #64]	; (8006c20 <MX_DMA_Init+0x4c>)
 8006be0:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <MX_DMA_Init+0x4c>)
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006be8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bea:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <MX_DMA_Init+0x4c>)
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf2:	607b      	str	r3, [r7, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	200d      	movs	r0, #13
 8006bfc:	f7f9 fe01 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8006c00:	200d      	movs	r0, #13
 8006c02:	f7f9 fe1a 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006c06:	2200      	movs	r2, #0
 8006c08:	2100      	movs	r1, #0
 8006c0a:	200f      	movs	r0, #15
 8006c0c:	f7f9 fdf9 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006c10:	200f      	movs	r0, #15
 8006c12:	f7f9 fe12 	bl	800083a <HAL_NVIC_EnableIRQ>

}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800

08006c24 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006c2a:	4b20      	ldr	r3, [pc, #128]	; (8006cac <MX_FMC_Init+0x88>)
 8006c2c:	4a20      	ldr	r2, [pc, #128]	; (8006cb0 <MX_FMC_Init+0x8c>)
 8006c2e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <MX_FMC_Init+0x88>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006c36:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <MX_FMC_Init+0x88>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <MX_FMC_Init+0x88>)
 8006c3e:	2204      	movs	r2, #4
 8006c40:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006c42:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <MX_FMC_Init+0x88>)
 8006c44:	2210      	movs	r2, #16
 8006c46:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <MX_FMC_Init+0x88>)
 8006c4a:	2240      	movs	r2, #64	; 0x40
 8006c4c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <MX_FMC_Init+0x88>)
 8006c50:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006c54:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006c56:	4b15      	ldr	r3, [pc, #84]	; (8006cac <MX_FMC_Init+0x88>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <MX_FMC_Init+0x88>)
 8006c5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c62:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006c64:	4b11      	ldr	r3, [pc, #68]	; (8006cac <MX_FMC_Init+0x88>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8006c6a:	4b10      	ldr	r3, [pc, #64]	; (8006cac <MX_FMC_Init+0x88>)
 8006c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006c70:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006c72:	2302      	movs	r3, #2
 8006c74:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006c76:	2307      	movs	r3, #7
 8006c78:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006c7e:	2307      	movs	r3, #7
 8006c80:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006c82:	2303      	movs	r3, #3
 8006c84:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006c86:	2302      	movs	r3, #2
 8006c88:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4806      	ldr	r0, [pc, #24]	; (8006cac <MX_FMC_Init+0x88>)
 8006c94:	f7fd f8f8 	bl	8003e88 <HAL_SDRAM_Init>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8006c9e:	f000 f8cf 	bl	8006e40 <Error_Handler>
  }

}
 8006ca2:	bf00      	nop
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20022fa8 	.word	0x20022fa8
 8006cb0:	a0000140 	.word	0xa0000140

08006cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08c      	sub	sp, #48	; 0x30
 8006cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cba:	f107 031c 	add.w	r3, r7, #28
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	60da      	str	r2, [r3, #12]
 8006cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	4a57      	ldr	r2, [pc, #348]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006cd0:	4b56      	ldr	r3, [pc, #344]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cda:	4b54      	ldr	r3, [pc, #336]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	4a50      	ldr	r2, [pc, #320]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006cec:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	f043 0304 	orr.w	r3, r3, #4
 8006cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf6:	4b4d      	ldr	r3, [pc, #308]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	4a49      	ldr	r2, [pc, #292]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d08:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6313      	str	r3, [r2, #48]	; 0x30
 8006d12:	4b46      	ldr	r3, [pc, #280]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	4a42      	ldr	r2, [pc, #264]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d24:	4b41      	ldr	r3, [pc, #260]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f043 0302 	orr.w	r3, r3, #2
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	4a3b      	ldr	r2, [pc, #236]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d40:	4b3a      	ldr	r3, [pc, #232]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	6313      	str	r3, [r2, #48]	; 0x30
 8006d4a:	4b38      	ldr	r3, [pc, #224]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	4a34      	ldr	r2, [pc, #208]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d5c:	4b33      	ldr	r3, [pc, #204]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	f043 0310 	orr.w	r3, r3, #16
 8006d64:	6313      	str	r3, [r2, #48]	; 0x30
 8006d66:	4b31      	ldr	r3, [pc, #196]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4a2d      	ldr	r2, [pc, #180]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d78:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	f043 0308 	orr.w	r3, r3, #8
 8006d80:	6313      	str	r3, [r2, #48]	; 0x30
 8006d82:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <MX_GPIO_Init+0x178>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	603b      	str	r3, [r7, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2104      	movs	r1, #4
 8006d92:	4827      	ldr	r0, [pc, #156]	; (8006e30 <MX_GPIO_Init+0x17c>)
 8006d94:	f7fa fd04 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d9e:	4825      	ldr	r0, [pc, #148]	; (8006e34 <MX_GPIO_Init+0x180>)
 8006da0:	f7fa fcfe 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8006daa:	4823      	ldr	r0, [pc, #140]	; (8006e38 <MX_GPIO_Init+0x184>)
 8006dac:	f7fa fcf8 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 8006db0:	2304      	movs	r3, #4
 8006db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006db4:	2301      	movs	r3, #1
 8006db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8006dc0:	f107 031c 	add.w	r3, r7, #28
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	481a      	ldr	r0, [pc, #104]	; (8006e30 <MX_GPIO_Init+0x17c>)
 8006dc8:	f7fa fa34 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 8006dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006dda:	2302      	movs	r3, #2
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 8006dde:	f107 031c 	add.w	r3, r7, #28
 8006de2:	4619      	mov	r1, r3
 8006de4:	4813      	ldr	r0, [pc, #76]	; (8006e34 <MX_GPIO_Init+0x180>)
 8006de6:	f7fa fa25 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8006dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006df0:	2300      	movs	r3, #0
 8006df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8006df8:	f107 031c 	add.w	r3, r7, #28
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	480f      	ldr	r0, [pc, #60]	; (8006e3c <MX_GPIO_Init+0x188>)
 8006e00:	f7fa fa18 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8006e04:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e12:	2300      	movs	r3, #0
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e16:	f107 031c 	add.w	r3, r7, #28
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4806      	ldr	r0, [pc, #24]	; (8006e38 <MX_GPIO_Init+0x184>)
 8006e1e:	f7fa fa09 	bl	8001234 <HAL_GPIO_Init>

}
 8006e22:	bf00      	nop
 8006e24:	3730      	adds	r7, #48	; 0x30
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	40020800 	.word	0x40020800
 8006e34:	40020c00 	.word	0x40020c00
 8006e38:	40021800 	.word	0x40021800
 8006e3c:	40020000 	.word	0x40020000

08006e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006e44:	bf00      	nop
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8006e5c:	4b2f      	ldr	r3, [pc, #188]	; (8006f1c <SDRAM_init+0xcc>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006e62:	4b2e      	ldr	r3, [pc, #184]	; (8006f1c <SDRAM_init+0xcc>)
 8006e64:	2208      	movs	r2, #8
 8006e66:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006e68:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <SDRAM_init+0xcc>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <SDRAM_init+0xcc>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e78:	4928      	ldr	r1, [pc, #160]	; (8006f1c <SDRAM_init+0xcc>)
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7fd f838 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006e80:	200a      	movs	r0, #10
 8006e82:	f7f9 fbad 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8006e86:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <SDRAM_init+0xcc>)
 8006e88:	2202      	movs	r2, #2
 8006e8a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006e8c:	4b23      	ldr	r3, [pc, #140]	; (8006f1c <SDRAM_init+0xcc>)
 8006e8e:	2208      	movs	r2, #8
 8006e90:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006e92:	4b22      	ldr	r3, [pc, #136]	; (8006f1c <SDRAM_init+0xcc>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8006e98:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <SDRAM_init+0xcc>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ea2:	491e      	ldr	r1, [pc, #120]	; (8006f1c <SDRAM_init+0xcc>)
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fd f823 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006eaa:	200a      	movs	r0, #10
 8006eac:	f7f9 fb98 	bl	80005e0 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <SDRAM_init+0xcc>)
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006eb6:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <SDRAM_init+0xcc>)
 8006eb8:	2208      	movs	r2, #8
 8006eba:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8006ebc:	4b17      	ldr	r3, [pc, #92]	; (8006f1c <SDRAM_init+0xcc>)
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8006ec2:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <SDRAM_init+0xcc>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ecc:	4913      	ldr	r1, [pc, #76]	; (8006f1c <SDRAM_init+0xcc>)
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fd f80e 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006ed4:	200a      	movs	r0, #10
 8006ed6:	f7f9 fb83 	bl	80005e0 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8006eda:	f240 2331 	movw	r3, #561	; 0x231
 8006ede:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <SDRAM_init+0xcc>)
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <SDRAM_init+0xcc>)
 8006ee8:	2208      	movs	r2, #8
 8006eea:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8006eec:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <SDRAM_init+0xcc>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <SDRAM_init+0xcc>)
 8006ef6:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8006ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006efc:	4907      	ldr	r1, [pc, #28]	; (8006f1c <SDRAM_init+0xcc>)
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fc fff6 	bl	8003ef0 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8006f04:	200a      	movs	r0, #10
 8006f06:	f7f9 fb6b 	bl	80005e0 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8006f0a:	f240 516a 	movw	r1, #1386	; 0x56a
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fd f819 	bl	8003f46 <HAL_SDRAM_ProgramRefreshRate>
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20022fdc 	.word	0x20022fdc

08006f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	4a10      	ldr	r2, [pc, #64]	; (8006f6c <HAL_MspInit+0x4c>)
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <HAL_MspInit+0x4c>)
 8006f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f34:	6453      	str	r3, [r2, #68]	; 0x44
 8006f36:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <HAL_MspInit+0x4c>)
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	4a09      	ldr	r2, [pc, #36]	; (8006f6c <HAL_MspInit+0x4c>)
 8006f48:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <HAL_MspInit+0x4c>)
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f50:	6413      	str	r3, [r2, #64]	; 0x40
 8006f52:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <HAL_MspInit+0x4c>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40023800 	.word	0x40023800

08006f70 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <HAL_DMA2D_MspInit+0x48>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d115      	bne.n	8006fae <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <HAL_DMA2D_MspInit+0x4c>)
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <HAL_DMA2D_MspInit+0x4c>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f90:	6313      	str	r3, [r2, #48]	; 0x30
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <HAL_DMA2D_MspInit+0x4c>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	205a      	movs	r0, #90	; 0x5a
 8006fa4:	f7f9 fc2d 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006fa8:	205a      	movs	r0, #90	; 0x5a
 8006faa:	f7f9 fc46 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	4002b000 	.word	0x4002b000
 8006fbc:	40023800 	.word	0x40023800

08006fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	609a      	str	r2, [r3, #8]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a57      	ldr	r2, [pc, #348]	; (800713c <HAL_I2C_MspInit+0x17c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f040 80a8 	bne.w	8007134 <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	4a55      	ldr	r2, [pc, #340]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8006fea:	4b55      	ldr	r3, [pc, #340]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	f043 0304 	orr.w	r3, r3, #4
 8006ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ff4:	4b52      	ldr	r3, [pc, #328]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	4a4e      	ldr	r2, [pc, #312]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8007006:	4b4e      	ldr	r3, [pc, #312]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	6313      	str	r3, [r2, #48]	; 0x30
 8007010:	4b4b      	ldr	r3, [pc, #300]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800701c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007022:	2312      	movs	r3, #18
 8007024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007026:	2301      	movs	r3, #1
 8007028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800702a:	2303      	movs	r3, #3
 800702c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800702e:	2304      	movs	r3, #4
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007032:	f107 0314 	add.w	r3, r7, #20
 8007036:	4619      	mov	r1, r3
 8007038:	4842      	ldr	r0, [pc, #264]	; (8007144 <HAL_I2C_MspInit+0x184>)
 800703a:	f7fa f8fb 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800703e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007044:	2312      	movs	r3, #18
 8007046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007048:	2301      	movs	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800704c:	2303      	movs	r3, #3
 800704e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007050:	2304      	movs	r3, #4
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007054:	f107 0314 	add.w	r3, r7, #20
 8007058:	4619      	mov	r1, r3
 800705a:	483b      	ldr	r0, [pc, #236]	; (8007148 <HAL_I2C_MspInit+0x188>)
 800705c:	f7fa f8ea 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007060:	2300      	movs	r3, #0
 8007062:	60bb      	str	r3, [r7, #8]
 8007064:	4a36      	ldr	r2, [pc, #216]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8007066:	4b36      	ldr	r3, [pc, #216]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800706e:	6413      	str	r3, [r2, #64]	; 0x40
 8007070:	4b33      	ldr	r3, [pc, #204]	; (8007140 <HAL_I2C_MspInit+0x180>)
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 800707c:	4b33      	ldr	r3, [pc, #204]	; (800714c <HAL_I2C_MspInit+0x18c>)
 800707e:	4a34      	ldr	r2, [pc, #208]	; (8007150 <HAL_I2C_MspInit+0x190>)
 8007080:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8007082:	4b32      	ldr	r3, [pc, #200]	; (800714c <HAL_I2C_MspInit+0x18c>)
 8007084:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007088:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800708a:	4b30      	ldr	r3, [pc, #192]	; (800714c <HAL_I2C_MspInit+0x18c>)
 800708c:	2200      	movs	r2, #0
 800708e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007090:	4b2e      	ldr	r3, [pc, #184]	; (800714c <HAL_I2C_MspInit+0x18c>)
 8007092:	2200      	movs	r2, #0
 8007094:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007096:	4b2d      	ldr	r3, [pc, #180]	; (800714c <HAL_I2C_MspInit+0x18c>)
 8007098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800709c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800709e:	4b2b      	ldr	r3, [pc, #172]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80070aa:	4b28      	ldr	r3, [pc, #160]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070b6:	4b25      	ldr	r3, [pc, #148]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80070bc:	4823      	ldr	r0, [pc, #140]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070be:	f7f9 fbe5 	bl	800088c <HAL_DMA_Init>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80070c8:	f7ff feba 	bl	8006e40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070d0:	639a      	str	r2, [r3, #56]	; 0x38
 80070d2:	4a1e      	ldr	r2, [pc, #120]	; (800714c <HAL_I2C_MspInit+0x18c>)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80070d8:	4b1e      	ldr	r3, [pc, #120]	; (8007154 <HAL_I2C_MspInit+0x194>)
 80070da:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_I2C_MspInit+0x198>)
 80070dc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80070de:	4b1d      	ldr	r3, [pc, #116]	; (8007154 <HAL_I2C_MspInit+0x194>)
 80070e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80070e4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070e6:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <HAL_I2C_MspInit+0x194>)
 80070e8:	2240      	movs	r2, #64	; 0x40
 80070ea:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <HAL_I2C_MspInit+0x194>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070f2:	4b18      	ldr	r3, [pc, #96]	; (8007154 <HAL_I2C_MspInit+0x194>)
 80070f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070f8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070fa:	4b16      	ldr	r3, [pc, #88]	; (8007154 <HAL_I2C_MspInit+0x194>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <HAL_I2C_MspInit+0x194>)
 8007102:	2200      	movs	r2, #0
 8007104:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <HAL_I2C_MspInit+0x194>)
 8007108:	2200      	movs	r2, #0
 800710a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800710c:	4b11      	ldr	r3, [pc, #68]	; (8007154 <HAL_I2C_MspInit+0x194>)
 800710e:	2200      	movs	r2, #0
 8007110:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007112:	4b10      	ldr	r3, [pc, #64]	; (8007154 <HAL_I2C_MspInit+0x194>)
 8007114:	2200      	movs	r2, #0
 8007116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8007118:	480e      	ldr	r0, [pc, #56]	; (8007154 <HAL_I2C_MspInit+0x194>)
 800711a:	f7f9 fbb7 	bl	800088c <HAL_DMA_Init>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8007124:	f7ff fe8c 	bl	8006e40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <HAL_I2C_MspInit+0x194>)
 800712c:	635a      	str	r2, [r3, #52]	; 0x34
 800712e:	4a09      	ldr	r2, [pc, #36]	; (8007154 <HAL_I2C_MspInit+0x194>)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007134:	bf00      	nop
 8007136:	3728      	adds	r7, #40	; 0x28
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40005c00 	.word	0x40005c00
 8007140:	40023800 	.word	0x40023800
 8007144:	40020800 	.word	0x40020800
 8007148:	40020000 	.word	0x40020000
 800714c:	20022e74 	.word	0x20022e74
 8007150:	40026040 	.word	0x40026040
 8007154:	20022dc0 	.word	0x20022dc0
 8007158:	40026070 	.word	0x40026070

0800715c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08e      	sub	sp, #56	; 0x38
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a7b      	ldr	r2, [pc, #492]	; (8007368 <HAL_LTDC_MspInit+0x20c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	f040 80f0 	bne.w	8007360 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007180:	2300      	movs	r3, #0
 8007182:	623b      	str	r3, [r7, #32]
 8007184:	4a79      	ldr	r2, [pc, #484]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007186:	4b79      	ldr	r3, [pc, #484]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800718e:	6453      	str	r3, [r2, #68]	; 0x44
 8007190:	4b76      	ldr	r3, [pc, #472]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007198:	623b      	str	r3, [r7, #32]
 800719a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	4a72      	ldr	r2, [pc, #456]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071a2:	4b72      	ldr	r3, [pc, #456]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	f043 0320 	orr.w	r3, r3, #32
 80071aa:	6313      	str	r3, [r2, #48]	; 0x30
 80071ac:	4b6f      	ldr	r3, [pc, #444]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071be:	4b6b      	ldr	r3, [pc, #428]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	6313      	str	r3, [r2, #48]	; 0x30
 80071c8:	4b68      	ldr	r3, [pc, #416]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	4a64      	ldr	r2, [pc, #400]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071da:	4b64      	ldr	r3, [pc, #400]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071de:	f043 0302 	orr.w	r3, r3, #2
 80071e2:	6313      	str	r3, [r2, #48]	; 0x30
 80071e4:	4b61      	ldr	r3, [pc, #388]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	4a5d      	ldr	r2, [pc, #372]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071f6:	4b5d      	ldr	r3, [pc, #372]	; (800736c <HAL_LTDC_MspInit+0x210>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007200:	4b5a      	ldr	r3, [pc, #360]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	4a56      	ldr	r2, [pc, #344]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007212:	4b56      	ldr	r3, [pc, #344]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f043 0304 	orr.w	r3, r3, #4
 800721a:	6313      	str	r3, [r2, #48]	; 0x30
 800721c:	4b53      	ldr	r3, [pc, #332]	; (800736c <HAL_LTDC_MspInit+0x210>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007228:	2300      	movs	r3, #0
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	4a4f      	ldr	r2, [pc, #316]	; (800736c <HAL_LTDC_MspInit+0x210>)
 800722e:	4b4f      	ldr	r3, [pc, #316]	; (800736c <HAL_LTDC_MspInit+0x210>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f043 0308 	orr.w	r3, r3, #8
 8007236:	6313      	str	r3, [r2, #48]	; 0x30
 8007238:	4b4c      	ldr	r3, [pc, #304]	; (800736c <HAL_LTDC_MspInit+0x210>)
 800723a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800724a:	2302      	movs	r3, #2
 800724c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800724e:	2300      	movs	r3, #0
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007252:	2302      	movs	r3, #2
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007256:	230e      	movs	r3, #14
 8007258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800725a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800725e:	4619      	mov	r1, r3
 8007260:	4843      	ldr	r0, [pc, #268]	; (8007370 <HAL_LTDC_MspInit+0x214>)
 8007262:	f7f9 ffe7 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8007266:	f641 0358 	movw	r3, #6232	; 0x1858
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800726c:	2302      	movs	r3, #2
 800726e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007270:	2300      	movs	r3, #0
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007274:	2302      	movs	r3, #2
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007278:	230e      	movs	r3, #14
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800727c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007280:	4619      	mov	r1, r3
 8007282:	483c      	ldr	r0, [pc, #240]	; (8007374 <HAL_LTDC_MspInit+0x218>)
 8007284:	f7f9 ffd6 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007288:	2303      	movs	r3, #3
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800728c:	2302      	movs	r3, #2
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007290:	2300      	movs	r3, #0
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007294:	2302      	movs	r3, #2
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007298:	2309      	movs	r3, #9
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800729c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a0:	4619      	mov	r1, r3
 80072a2:	4835      	ldr	r0, [pc, #212]	; (8007378 <HAL_LTDC_MspInit+0x21c>)
 80072a4:	f7f9 ffc6 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80072a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ae:	2302      	movs	r3, #2
 80072b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072b6:	2302      	movs	r3, #2
 80072b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80072ba:	230e      	movs	r3, #14
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072c2:	4619      	mov	r1, r3
 80072c4:	482c      	ldr	r0, [pc, #176]	; (8007378 <HAL_LTDC_MspInit+0x21c>)
 80072c6:	f7f9 ffb5 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 80072ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d0:	2302      	movs	r3, #2
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072d8:	2302      	movs	r3, #2
 80072da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80072dc:	230e      	movs	r3, #14
 80072de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80072e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e4:	4619      	mov	r1, r3
 80072e6:	4825      	ldr	r0, [pc, #148]	; (800737c <HAL_LTDC_MspInit+0x220>)
 80072e8:	f7f9 ffa4 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80072ec:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f2:	2302      	movs	r3, #2
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072fa:	2302      	movs	r3, #2
 80072fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80072fe:	230e      	movs	r3, #14
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007306:	4619      	mov	r1, r3
 8007308:	481d      	ldr	r0, [pc, #116]	; (8007380 <HAL_LTDC_MspInit+0x224>)
 800730a:	f7f9 ff93 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800730e:	2348      	movs	r3, #72	; 0x48
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007312:	2302      	movs	r3, #2
 8007314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800731a:	2302      	movs	r3, #2
 800731c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800731e:	230e      	movs	r3, #14
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007326:	4619      	mov	r1, r3
 8007328:	4816      	ldr	r0, [pc, #88]	; (8007384 <HAL_LTDC_MspInit+0x228>)
 800732a:	f7f9 ff83 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800732e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007334:	2302      	movs	r3, #2
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007338:	2300      	movs	r3, #0
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800733c:	2302      	movs	r3, #2
 800733e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007340:	2309      	movs	r3, #9
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007348:	4619      	mov	r1, r3
 800734a:	480c      	ldr	r0, [pc, #48]	; (800737c <HAL_LTDC_MspInit+0x220>)
 800734c:	f7f9 ff72 	bl	8001234 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8007350:	2200      	movs	r2, #0
 8007352:	2100      	movs	r1, #0
 8007354:	2058      	movs	r0, #88	; 0x58
 8007356:	f7f9 fa54 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800735a:	2058      	movs	r0, #88	; 0x58
 800735c:	f7f9 fa6d 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8007360:	bf00      	nop
 8007362:	3738      	adds	r7, #56	; 0x38
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40016800 	.word	0x40016800
 800736c:	40023800 	.word	0x40023800
 8007370:	40021400 	.word	0x40021400
 8007374:	40020000 	.word	0x40020000
 8007378:	40020400 	.word	0x40020400
 800737c:	40021800 	.word	0x40021800
 8007380:	40020800 	.word	0x40020800
 8007384:	40020c00 	.word	0x40020c00

08007388 <HAL_LTDC_MspDeInit>:
* @param hltdc: LTDC handle pointer
* @retval None
*/

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]

  if(hltdc->Instance==LTDC)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <HAL_LTDC_MspDeInit+0x68>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d125      	bne.n	80073e6 <HAL_LTDC_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 800739a:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <HAL_LTDC_MspDeInit+0x6c>)
 800739c:	4b15      	ldr	r3, [pc, #84]	; (80073f4 <HAL_LTDC_MspDeInit+0x6c>)
 800739e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073a4:	6453      	str	r3, [r2, #68]	; 0x44
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 80073a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073aa:	4813      	ldr	r0, [pc, #76]	; (80073f8 <HAL_LTDC_MspDeInit+0x70>)
 80073ac:	f7fa f8ec 	bl	8001588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80073b0:	f641 0158 	movw	r1, #6232	; 0x1858
 80073b4:	4811      	ldr	r0, [pc, #68]	; (80073fc <HAL_LTDC_MspDeInit+0x74>)
 80073b6:	f7fa f8e7 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80073ba:	f640 7103 	movw	r1, #3843	; 0xf03
 80073be:	4810      	ldr	r0, [pc, #64]	; (8007400 <HAL_LTDC_MspDeInit+0x78>)
 80073c0:	f7fa f8e2 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11 
 80073c4:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 80073c8:	480e      	ldr	r0, [pc, #56]	; (8007404 <HAL_LTDC_MspDeInit+0x7c>)
 80073ca:	f7fa f8dd 	bl	8001588 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10);
 80073ce:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80073d2:	480d      	ldr	r0, [pc, #52]	; (8007408 <HAL_LTDC_MspDeInit+0x80>)
 80073d4:	f7fa f8d8 	bl	8001588 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3|GPIO_PIN_6);
 80073d8:	2148      	movs	r1, #72	; 0x48
 80073da:	480c      	ldr	r0, [pc, #48]	; (800740c <HAL_LTDC_MspDeInit+0x84>)
 80073dc:	f7fa f8d4 	bl	8001588 <HAL_GPIO_DeInit>

    /* LTDC interrupt DeInit */
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80073e0:	2058      	movs	r0, #88	; 0x58
 80073e2:	f7f9 fa38 	bl	8000856 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }

}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40016800 	.word	0x40016800
 80073f4:	40023800 	.word	0x40023800
 80073f8:	40021400 	.word	0x40021400
 80073fc:	40020000 	.word	0x40020000
 8007400:	40020400 	.word	0x40020400
 8007404:	40021800 	.word	0x40021800
 8007408:	40020800 	.word	0x40020800
 800740c:	40020c00 	.word	0x40020c00

08007410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007418:	f107 0314 	add.w	r3, r7, #20
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a19      	ldr	r2, [pc, #100]	; (8007494 <HAL_SPI_MspInit+0x84>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d12c      	bne.n	800748c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	4a18      	ldr	r2, [pc, #96]	; (8007498 <HAL_SPI_MspInit+0x88>)
 8007438:	4b17      	ldr	r3, [pc, #92]	; (8007498 <HAL_SPI_MspInit+0x88>)
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007440:	6453      	str	r3, [r2, #68]	; 0x44
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <HAL_SPI_MspInit+0x88>)
 8007444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744a:	613b      	str	r3, [r7, #16]
 800744c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	4a11      	ldr	r2, [pc, #68]	; (8007498 <HAL_SPI_MspInit+0x88>)
 8007454:	4b10      	ldr	r3, [pc, #64]	; (8007498 <HAL_SPI_MspInit+0x88>)
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	f043 0320 	orr.w	r3, r3, #32
 800745c:	6313      	str	r3, [r2, #48]	; 0x30
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <HAL_SPI_MspInit+0x88>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800746a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800746e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007470:	2302      	movs	r3, #2
 8007472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007478:	2303      	movs	r3, #3
 800747a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800747c:	2305      	movs	r3, #5
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	4619      	mov	r1, r3
 8007486:	4805      	ldr	r0, [pc, #20]	; (800749c <HAL_SPI_MspInit+0x8c>)
 8007488:	f7f9 fed4 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800748c:	bf00      	nop
 800748e:	3728      	adds	r7, #40	; 0x28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	40015000 	.word	0x40015000
 8007498:	40023800 	.word	0x40023800
 800749c:	40021400 	.word	0x40021400

080074a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a0e      	ldr	r2, [pc, #56]	; (80074e8 <HAL_TIM_Base_MspInit+0x48>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d115      	bne.n	80074de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	4a0d      	ldr	r2, [pc, #52]	; (80074ec <HAL_TIM_Base_MspInit+0x4c>)
 80074b8:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <HAL_TIM_Base_MspInit+0x4c>)
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	f043 0310 	orr.w	r3, r3, #16
 80074c0:	6413      	str	r3, [r2, #64]	; 0x40
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <HAL_TIM_Base_MspInit+0x4c>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80074ce:	2200      	movs	r2, #0
 80074d0:	2105      	movs	r1, #5
 80074d2:	2036      	movs	r0, #54	; 0x36
 80074d4:	f7f9 f995 	bl	8000802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80074d8:	2036      	movs	r0, #54	; 0x36
 80074da:	f7f9 f9ae 	bl	800083a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40001000 	.word	0x40001000
 80074ec:	40023800 	.word	0x40023800

080074f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80074f6:	4b3c      	ldr	r3, [pc, #240]	; (80075e8 <HAL_FMC_MspInit+0xf8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d16f      	bne.n	80075de <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80074fe:	4b3a      	ldr	r3, [pc, #232]	; (80075e8 <HAL_FMC_MspInit+0xf8>)
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007504:	2300      	movs	r3, #0
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	4a38      	ldr	r2, [pc, #224]	; (80075ec <HAL_FMC_MspInit+0xfc>)
 800750a:	4b38      	ldr	r3, [pc, #224]	; (80075ec <HAL_FMC_MspInit+0xfc>)
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	f043 0301 	orr.w	r3, r3, #1
 8007512:	6393      	str	r3, [r2, #56]	; 0x38
 8007514:	4b35      	ldr	r3, [pc, #212]	; (80075ec <HAL_FMC_MspInit+0xfc>)
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	603b      	str	r3, [r7, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007520:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8007524:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007526:	2302      	movs	r3, #2
 8007528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800752e:	2303      	movs	r3, #3
 8007530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007532:	230c      	movs	r3, #12
 8007534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007536:	1d3b      	adds	r3, r7, #4
 8007538:	4619      	mov	r1, r3
 800753a:	482d      	ldr	r0, [pc, #180]	; (80075f0 <HAL_FMC_MspInit+0x100>)
 800753c:	f7f9 fe7a 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007540:	2301      	movs	r3, #1
 8007542:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007544:	2302      	movs	r3, #2
 8007546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007548:	2300      	movs	r3, #0
 800754a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800754c:	2303      	movs	r3, #3
 800754e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007550:	230c      	movs	r3, #12
 8007552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007554:	1d3b      	adds	r3, r7, #4
 8007556:	4619      	mov	r1, r3
 8007558:	4826      	ldr	r0, [pc, #152]	; (80075f4 <HAL_FMC_MspInit+0x104>)
 800755a:	f7f9 fe6b 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800755e:	f248 1333 	movw	r3, #33075	; 0x8133
 8007562:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007564:	2302      	movs	r3, #2
 8007566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800756c:	2303      	movs	r3, #3
 800756e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007570:	230c      	movs	r3, #12
 8007572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007574:	1d3b      	adds	r3, r7, #4
 8007576:	4619      	mov	r1, r3
 8007578:	481f      	ldr	r0, [pc, #124]	; (80075f8 <HAL_FMC_MspInit+0x108>)
 800757a:	f7f9 fe5b 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800757e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007582:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007584:	2302      	movs	r3, #2
 8007586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758c:	2303      	movs	r3, #3
 800758e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007590:	230c      	movs	r3, #12
 8007592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007594:	1d3b      	adds	r3, r7, #4
 8007596:	4619      	mov	r1, r3
 8007598:	4818      	ldr	r0, [pc, #96]	; (80075fc <HAL_FMC_MspInit+0x10c>)
 800759a:	f7f9 fe4b 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800759e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80075a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a4:	2302      	movs	r3, #2
 80075a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ac:	2303      	movs	r3, #3
 80075ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80075b0:	230c      	movs	r3, #12
 80075b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075b4:	1d3b      	adds	r3, r7, #4
 80075b6:	4619      	mov	r1, r3
 80075b8:	4811      	ldr	r0, [pc, #68]	; (8007600 <HAL_FMC_MspInit+0x110>)
 80075ba:	f7f9 fe3b 	bl	8001234 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80075be:	2360      	movs	r3, #96	; 0x60
 80075c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c2:	2302      	movs	r3, #2
 80075c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ca:	2303      	movs	r3, #3
 80075cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80075ce:	230c      	movs	r3, #12
 80075d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	4619      	mov	r1, r3
 80075d6:	480b      	ldr	r0, [pc, #44]	; (8007604 <HAL_FMC_MspInit+0x114>)
 80075d8:	f7f9 fe2c 	bl	8001234 <HAL_GPIO_Init>
 80075dc:	e000      	b.n	80075e0 <HAL_FMC_MspInit+0xf0>
    return;
 80075de:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200229f8 	.word	0x200229f8
 80075ec:	40023800 	.word	0x40023800
 80075f0:	40021400 	.word	0x40021400
 80075f4:	40020800 	.word	0x40020800
 80075f8:	40021800 	.word	0x40021800
 80075fc:	40021000 	.word	0x40021000
 8007600:	40020c00 	.word	0x40020c00
 8007604:	40020400 	.word	0x40020400

08007608 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8007610:	f7ff ff6e 	bl	80074f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007620:	bf00      	nop
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800762a:	b480      	push	{r7}
 800762c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800762e:	e7fe      	b.n	800762e <HardFault_Handler+0x4>

08007630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007634:	e7fe      	b.n	8007634 <MemManage_Handler+0x4>

08007636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007636:	b480      	push	{r7}
 8007638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800763a:	e7fe      	b.n	800763a <BusFault_Handler+0x4>

0800763c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007640:	e7fe      	b.n	8007640 <UsageFault_Handler+0x4>

08007642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007642:	b480      	push	{r7}
 8007644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007646:	bf00      	nop
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007654:	bf00      	nop
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800765e:	b480      	push	{r7}
 8007660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007662:	bf00      	nop
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007670:	f7f8 ff96 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8007674:	4b03      	ldr	r3, [pc, #12]	; (8007684 <SysTick_Handler+0x18>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a02      	ldr	r2, [pc, #8]	; (8007684 <SysTick_Handler+0x18>)
 800767c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800767e:	bf00      	nop
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	20022d14 	.word	0x20022d14

08007688 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 800768c:	4802      	ldr	r0, [pc, #8]	; (8007698 <DMA1_Stream2_IRQHandler+0x10>)
 800768e:	f7f9 f9ab 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8007692:	bf00      	nop
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	20022e74 	.word	0x20022e74

0800769c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80076a0:	4802      	ldr	r0, [pc, #8]	; (80076ac <DMA1_Stream4_IRQHandler+0x10>)
 80076a2:	f7f9 f9a1 	bl	80009e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80076a6:	bf00      	nop
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20022dc0 	.word	0x20022dc0

080076b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80076b6:	4811      	ldr	r0, [pc, #68]	; (80076fc <TIM6_DAC_IRQHandler+0x4c>)
 80076b8:	f7fc feb5 	bl	8004426 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  GUI_PID_STATE pidState;
  tp_state_t tpState;
  static uint8_t prevState = 0;

  TP_GetState(&tpState);
 80076bc:	1d3b      	adds	r3, r7, #4
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fa7c 	bl	8007bbc <TP_GetState>

  if (tpState.touchDetected)
 80076c4:	793b      	ldrb	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <TIM6_DAC_IRQHandler+0x26>
  {
	  pidState.Pressed = tpState.touchDetected;
 80076ca:	793b      	ldrb	r3, [r7, #4]
 80076cc:	753b      	strb	r3, [r7, #20]
	  pidState.x = tpState.x;
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	60fb      	str	r3, [r7, #12]
	  pidState.y = tpState.y;
 80076d2:	893b      	ldrh	r3, [r7, #8]
 80076d4:	613b      	str	r3, [r7, #16]
  }

  if (prevState != tpState.touchDetected)
 80076d6:	793a      	ldrb	r2, [r7, #4]
 80076d8:	4b09      	ldr	r3, [pc, #36]	; (8007700 <TIM6_DAC_IRQHandler+0x50>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d009      	beq.n	80076f4 <TIM6_DAC_IRQHandler+0x44>
  {
	  prevState = tpState.touchDetected;
 80076e0:	793a      	ldrb	r2, [r7, #4]
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <TIM6_DAC_IRQHandler+0x50>)
 80076e4:	701a      	strb	r2, [r3, #0]
	  pidState.Layer = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	757b      	strb	r3, [r7, #21]
	  GUI_TOUCH_StoreStateEx(&pidState);
 80076ea:	f107 030c 	add.w	r3, r7, #12
 80076ee:	4618      	mov	r0, r3
 80076f0:	f004 fe34 	bl	800c35c <GUI_TOUCH_StoreStateEx>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80076f4:	bf00      	nop
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20022f2c 	.word	0x20022f2c
 8007700:	200229fc 	.word	0x200229fc

08007704 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8007708:	4802      	ldr	r0, [pc, #8]	; (8007714 <LTDC_IRQHandler+0x10>)
 800770a:	f7fb f8df 	bl	80028cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800770e:	bf00      	nop
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20022d18 	.word	0x20022d18

08007718 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800771c:	4802      	ldr	r0, [pc, #8]	; (8007728 <DMA2D_IRQHandler+0x10>)
 800771e:	f7f9 fbe6 	bl	8000eee <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20022f68 	.word	0x20022f68

0800772c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007730:	4a16      	ldr	r2, [pc, #88]	; (800778c <SystemInit+0x60>)
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <SystemInit+0x60>)
 8007734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800773c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007740:	4a13      	ldr	r2, [pc, #76]	; (8007790 <SystemInit+0x64>)
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <SystemInit+0x64>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800774c:	4b10      	ldr	r3, [pc, #64]	; (8007790 <SystemInit+0x64>)
 800774e:	2200      	movs	r2, #0
 8007750:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007752:	4a0f      	ldr	r2, [pc, #60]	; (8007790 <SystemInit+0x64>)
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <SystemInit+0x64>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800775c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007760:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <SystemInit+0x64>)
 8007764:	4a0b      	ldr	r2, [pc, #44]	; (8007794 <SystemInit+0x68>)
 8007766:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007768:	4a09      	ldr	r2, [pc, #36]	; (8007790 <SystemInit+0x64>)
 800776a:	4b09      	ldr	r3, [pc, #36]	; (8007790 <SystemInit+0x64>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <SystemInit+0x64>)
 8007776:	2200      	movs	r2, #0
 8007778:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800777a:	4b04      	ldr	r3, [pc, #16]	; (800778c <SystemInit+0x60>)
 800777c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007780:	609a      	str	r2, [r3, #8]
#endif
}
 8007782:	bf00      	nop
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	e000ed00 	.word	0xe000ed00
 8007790:	40023800 	.word	0x40023800
 8007794:	24003010 	.word	0x24003010

08007798 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 800779e:	2300      	movs	r3, #0
 80077a0:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 80077a2:	2303      	movs	r3, #3
 80077a4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 80077a6:	2302      	movs	r3, #2
 80077a8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80077aa:	1d3a      	adds	r2, r7, #4
 80077ac:	2364      	movs	r3, #100	; 0x64
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	2302      	movs	r3, #2
 80077b2:	2182      	movs	r1, #130	; 0x82
 80077b4:	480b      	ldr	r0, [pc, #44]	; (80077e4 <touchReset+0x4c>)
 80077b6:	f7fa f8ed 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80077ba:	2014      	movs	r0, #20
 80077bc:	f7f8 ff10 	bl	80005e0 <HAL_Delay>
	sendBuf[1] = 0x00;
 80077c0:	2300      	movs	r3, #0
 80077c2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80077c4:	1d3a      	adds	r2, r7, #4
 80077c6:	2364      	movs	r3, #100	; 0x64
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	2302      	movs	r3, #2
 80077cc:	2182      	movs	r1, #130	; 0x82
 80077ce:	4805      	ldr	r0, [pc, #20]	; (80077e4 <touchReset+0x4c>)
 80077d0:	f7fa f8e0 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80077d4:	2014      	movs	r0, #20
 80077d6:	f7f8 ff03 	bl	80005e0 <HAL_Delay>
}
 80077da:	bf00      	nop
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20022e20 	.word	0x20022e20

080077e8 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	4603      	mov	r3, r0
 80077f0:	460a      	mov	r2, r1
 80077f2:	71fb      	strb	r3, [r7, #7]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 80077fc:	2300      	movs	r3, #0
 80077fe:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8007800:	2304      	movs	r3, #4
 8007802:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007804:	f107 020c 	add.w	r2, r7, #12
 8007808:	2364      	movs	r3, #100	; 0x64
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	2301      	movs	r3, #1
 800780e:	2182      	movs	r1, #130	; 0x82
 8007810:	4817      	ldr	r0, [pc, #92]	; (8007870 <fnctCmd+0x88>)
 8007812:	f7fa f8bf 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007816:	f107 020c 	add.w	r2, r7, #12
 800781a:	2364      	movs	r3, #100	; 0x64
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2301      	movs	r3, #1
 8007820:	2182      	movs	r1, #130	; 0x82
 8007822:	4813      	ldr	r0, [pc, #76]	; (8007870 <fnctCmd+0x88>)
 8007824:	f7fa f9c4 	bl	8001bb0 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8007828:	7b3b      	ldrb	r3, [r7, #12]
 800782a:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 800782c:	79bb      	ldrb	r3, [r7, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	43db      	mvns	r3, r3
 8007838:	b25a      	sxtb	r2, r3
 800783a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783e:	4013      	ands	r3, r2
 8007840:	b25b      	sxtb	r3, r3
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	e003      	b.n	800784e <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 8007846:	7bfa      	ldrb	r2, [r7, #15]
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	4313      	orrs	r3, r2
 800784c:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 800784e:	2304      	movs	r3, #4
 8007850:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007856:	f107 020c 	add.w	r2, r7, #12
 800785a:	2364      	movs	r3, #100	; 0x64
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	2302      	movs	r3, #2
 8007860:	2182      	movs	r1, #130	; 0x82
 8007862:	4803      	ldr	r0, [pc, #12]	; (8007870 <fnctCmd+0x88>)
 8007864:	f7fa f896 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20022e20 	.word	0x20022e20

08007874 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af02      	add	r7, sp, #8
 800787a:	4603      	mov	r3, r0
 800787c:	460a      	mov	r2, r1
 800787e:	71fb      	strb	r3, [r7, #7]
 8007880:	4613      	mov	r3, r2
 8007882:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8007888:	2300      	movs	r3, #0
 800788a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 800788c:	2317      	movs	r3, #23
 800788e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 8007890:	f107 020c 	add.w	r2, r7, #12
 8007894:	2364      	movs	r3, #100	; 0x64
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	2301      	movs	r3, #1
 800789a:	2182      	movs	r1, #130	; 0x82
 800789c:	4817      	ldr	r0, [pc, #92]	; (80078fc <ioAFConfig+0x88>)
 800789e:	f7fa f879 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80078a2:	f107 020c 	add.w	r2, r7, #12
 80078a6:	2364      	movs	r3, #100	; 0x64
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2301      	movs	r3, #1
 80078ac:	2182      	movs	r1, #130	; 0x82
 80078ae:	4813      	ldr	r0, [pc, #76]	; (80078fc <ioAFConfig+0x88>)
 80078b0:	f7fa f97e 	bl	8001bb0 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 80078b4:	7b3b      	ldrb	r3, [r7, #12]
 80078b6:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 80078b8:	79bb      	ldrb	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 80078be:	7bfa      	ldrb	r2, [r7, #15]
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	73fb      	strb	r3, [r7, #15]
 80078c6:	e008      	b.n	80078da <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 80078c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078cc:	43db      	mvns	r3, r3
 80078ce:	b25a      	sxtb	r2, r3
 80078d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d4:	4013      	ands	r3, r2
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 80078da:	2317      	movs	r3, #23
 80078dc:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80078e2:	f107 020c 	add.w	r2, r7, #12
 80078e6:	2364      	movs	r3, #100	; 0x64
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	2302      	movs	r3, #2
 80078ec:	2182      	movs	r1, #130	; 0x82
 80078ee:	4803      	ldr	r0, [pc, #12]	; (80078fc <ioAFConfig+0x88>)
 80078f0:	f7fa f850 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20022e20 	.word	0x20022e20

08007900 <readX>:

static void readX(uint16_t *x)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af02      	add	r7, sp, #8
 8007906:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 8007908:	234d      	movs	r3, #77	; 0x4d
 800790a:	723b      	strb	r3, [r7, #8]
 800790c:	2300      	movs	r3, #0
 800790e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8007910:	f107 0208 	add.w	r2, r7, #8
 8007914:	2364      	movs	r3, #100	; 0x64
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	2301      	movs	r3, #1
 800791a:	2182      	movs	r1, #130	; 0x82
 800791c:	481f      	ldr	r0, [pc, #124]	; (800799c <readX+0x9c>)
 800791e:	f7fa f839 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007922:	f107 0208 	add.w	r2, r7, #8
 8007926:	2364      	movs	r3, #100	; 0x64
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	2302      	movs	r3, #2
 800792c:	2182      	movs	r1, #130	; 0x82
 800792e:	481b      	ldr	r0, [pc, #108]	; (800799c <readX+0x9c>)
 8007930:	f7fa f93e 	bl	8001bb0 <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 8007934:	7a3b      	ldrb	r3, [r7, #8]
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	7a7a      	ldrb	r2, [r7, #9]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007944:	4293      	cmp	r3, r2
 8007946:	dc05      	bgt.n	8007954 <readX+0x54>
	{
		_x = 3870 - _x;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800794e:	330e      	adds	r3, #14
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	e004      	b.n	800795e <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800795a:	3308      	adds	r3, #8
 800795c:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <readX+0xa0>)
 8007962:	fb82 1203 	smull	r1, r2, r2, r3
 8007966:	441a      	add	r2, r3
 8007968:	10d2      	asrs	r2, r2, #3
 800796a:	17db      	asrs	r3, r3, #31
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <readX+0x84>
	{
		*x = 0;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 8007982:	e006      	b.n	8007992 <readX+0x92>
	else if (*x > 240)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	2bf0      	cmp	r3, #240	; 0xf0
 800798a:	d902      	bls.n	8007992 <readX+0x92>
		*x = 239;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	22ef      	movs	r2, #239	; 0xef
 8007990:	801a      	strh	r2, [r3, #0]
}
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20022e20 	.word	0x20022e20
 80079a0:	88888889 	.word	0x88888889

080079a4 <readY>:

static void readY(uint16_t *y)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 80079ac:	234f      	movs	r3, #79	; 0x4f
 80079ae:	723b      	strb	r3, [r7, #8]
 80079b0:	2300      	movs	r3, #0
 80079b2:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80079b4:	f107 0208 	add.w	r2, r7, #8
 80079b8:	2364      	movs	r3, #100	; 0x64
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2301      	movs	r3, #1
 80079be:	2182      	movs	r1, #130	; 0x82
 80079c0:	4819      	ldr	r0, [pc, #100]	; (8007a28 <readY+0x84>)
 80079c2:	f7f9 ffe7 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80079c6:	f107 0208 	add.w	r2, r7, #8
 80079ca:	2364      	movs	r3, #100	; 0x64
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	2302      	movs	r3, #2
 80079d0:	2182      	movs	r1, #130	; 0x82
 80079d2:	4815      	ldr	r0, [pc, #84]	; (8007a28 <readY+0x84>)
 80079d4:	f7fa f8ec 	bl	8001bb0 <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 80079d8:	7a3b      	ldrb	r3, [r7, #8]
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	7a7a      	ldrb	r2, [r7, #9]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80079e8:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a0f      	ldr	r2, [pc, #60]	; (8007a2c <readY+0x88>)
 80079ee:	fb82 1203 	smull	r1, r2, r2, r3
 80079f2:	1052      	asrs	r2, r2, #1
 80079f4:	17db      	asrs	r3, r3, #31
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <readY+0x6a>
	{
		*y = 0;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 8007a0c:	e008      	b.n	8007a20 <readY+0x7c>
	else if (*y > 320)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007a16:	d903      	bls.n	8007a20 <readY+0x7c>
		*y = 319;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f240 123f 	movw	r2, #319	; 0x13f
 8007a1e:	801a      	strh	r2, [r3, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20022e20 	.word	0x20022e20
 8007a2c:	2e8ba2e9 	.word	0x2e8ba2e9

08007a30 <readZ>:

static void readZ(uint16_t *z)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 8007a38:	2351      	movs	r3, #81	; 0x51
 8007a3a:	733b      	strb	r3, [r7, #12]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8007a40:	f107 020c 	add.w	r2, r7, #12
 8007a44:	2364      	movs	r3, #100	; 0x64
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	2182      	movs	r1, #130	; 0x82
 8007a4c:	4810      	ldr	r0, [pc, #64]	; (8007a90 <readZ+0x60>)
 8007a4e:	f7f9 ffa1 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007a52:	f107 020c 	add.w	r2, r7, #12
 8007a56:	2364      	movs	r3, #100	; 0x64
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	2182      	movs	r1, #130	; 0x82
 8007a5e:	480c      	ldr	r0, [pc, #48]	; (8007a90 <readZ+0x60>)
 8007a60:	f7fa f8a6 	bl	8001bb0 <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 8007a64:	7b3b      	ldrb	r3, [r7, #12]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	b21a      	sxth	r2, r3
 8007a6a:	7b7b      	ldrb	r3, [r7, #13]
 8007a6c:	b21b      	sxth	r3, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	b21b      	sxth	r3, r3
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <readZ+0x56>
	{
		*z = 0;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	801a      	strh	r2, [r3, #0]
	}
}
 8007a86:	bf00      	nop
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20022e20 	.word	0x20022e20

08007a94 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af02      	add	r7, sp, #8
	touchReset();
 8007a9a:	f7ff fe7d 	bl	8007798 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	f7ff fea1 	bl	80077e8 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	2002      	movs	r0, #2
 8007aaa:	f7ff fe9d 	bl	80077e8 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 8007aae:	4b41      	ldr	r3, [pc, #260]	; (8007bb4 <TP_Config+0x120>)
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007ab4:	1d3a      	adds	r2, r7, #4
 8007ab6:	2364      	movs	r3, #100	; 0x64
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	2302      	movs	r3, #2
 8007abc:	2182      	movs	r1, #130	; 0x82
 8007abe:	483e      	ldr	r0, [pc, #248]	; (8007bb8 <TP_Config+0x124>)
 8007ac0:	f7f9 ff68 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8007ac4:	2014      	movs	r0, #20
 8007ac6:	f7f8 fd8b 	bl	80005e0 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 8007aca:	2321      	movs	r3, #33	; 0x21
 8007acc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007ad2:	1d3a      	adds	r2, r7, #4
 8007ad4:	2364      	movs	r3, #100	; 0x64
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2302      	movs	r3, #2
 8007ada:	2182      	movs	r1, #130	; 0x82
 8007adc:	4836      	ldr	r0, [pc, #216]	; (8007bb8 <TP_Config+0x124>)
 8007ade:	f7f9 ff59 	bl	8001994 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	201e      	movs	r0, #30
 8007ae6:	f7ff fec5 	bl	8007874 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8007aea:	2341      	movs	r3, #65	; 0x41
 8007aec:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 8007aee:	239a      	movs	r3, #154	; 0x9a
 8007af0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007af2:	1d3a      	adds	r2, r7, #4
 8007af4:	2364      	movs	r3, #100	; 0x64
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	2302      	movs	r3, #2
 8007afa:	2182      	movs	r1, #130	; 0x82
 8007afc:	482e      	ldr	r0, [pc, #184]	; (8007bb8 <TP_Config+0x124>)
 8007afe:	f7f9 ff49 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 8007b02:	234a      	movs	r3, #74	; 0x4a
 8007b04:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007b06:	2301      	movs	r3, #1
 8007b08:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b0a:	1d3a      	adds	r2, r7, #4
 8007b0c:	2364      	movs	r3, #100	; 0x64
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	2302      	movs	r3, #2
 8007b12:	2182      	movs	r1, #130	; 0x82
 8007b14:	4828      	ldr	r0, [pc, #160]	; (8007bb8 <TP_Config+0x124>)
 8007b16:	f7f9 ff3d 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8007b1a:	234b      	movs	r3, #75	; 0x4b
 8007b1c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b22:	1d3a      	adds	r2, r7, #4
 8007b24:	2364      	movs	r3, #100	; 0x64
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	2302      	movs	r3, #2
 8007b2a:	2182      	movs	r1, #130	; 0x82
 8007b2c:	4822      	ldr	r0, [pc, #136]	; (8007bb8 <TP_Config+0x124>)
 8007b2e:	f7f9 ff31 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8007b32:	234b      	movs	r3, #75	; 0x4b
 8007b34:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 8007b36:	2300      	movs	r3, #0
 8007b38:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b3a:	1d3a      	adds	r2, r7, #4
 8007b3c:	2364      	movs	r3, #100	; 0x64
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2302      	movs	r3, #2
 8007b42:	2182      	movs	r1, #130	; 0x82
 8007b44:	481c      	ldr	r0, [pc, #112]	; (8007bb8 <TP_Config+0x124>)
 8007b46:	f7f9 ff25 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 8007b4a:	2356      	movs	r3, #86	; 0x56
 8007b4c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b52:	1d3a      	adds	r2, r7, #4
 8007b54:	2364      	movs	r3, #100	; 0x64
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	2302      	movs	r3, #2
 8007b5a:	2182      	movs	r1, #130	; 0x82
 8007b5c:	4816      	ldr	r0, [pc, #88]	; (8007bb8 <TP_Config+0x124>)
 8007b5e:	f7f9 ff19 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 8007b62:	2358      	movs	r3, #88	; 0x58
 8007b64:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8007b66:	2301      	movs	r3, #1
 8007b68:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b6a:	1d3a      	adds	r2, r7, #4
 8007b6c:	2364      	movs	r3, #100	; 0x64
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2302      	movs	r3, #2
 8007b72:	2182      	movs	r1, #130	; 0x82
 8007b74:	4810      	ldr	r0, [pc, #64]	; (8007bb8 <TP_Config+0x124>)
 8007b76:	f7f9 ff0d 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b82:	1d3a      	adds	r2, r7, #4
 8007b84:	2364      	movs	r3, #100	; 0x64
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	2302      	movs	r3, #2
 8007b8a:	2182      	movs	r1, #130	; 0x82
 8007b8c:	480a      	ldr	r0, [pc, #40]	; (8007bb8 <TP_Config+0x124>)
 8007b8e:	f7f9 ff01 	bl	8001994 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 8007b92:	230b      	movs	r3, #11
 8007b94:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 8007b96:	23ff      	movs	r3, #255	; 0xff
 8007b98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8007b9a:	1d3a      	adds	r2, r7, #4
 8007b9c:	2364      	movs	r3, #100	; 0x64
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	2182      	movs	r1, #130	; 0x82
 8007ba4:	4804      	ldr	r0, [pc, #16]	; (8007bb8 <TP_Config+0x124>)
 8007ba6:	f7f9 fef5 	bl	8001994 <HAL_I2C_Master_Transmit>

}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	08012a04 	.word	0x08012a04
 8007bb8:	20022e20 	.word	0x20022e20

08007bbc <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af02      	add	r7, sp, #8
 8007bc2:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 8007bc4:	2340      	movs	r3, #64	; 0x40
 8007bc6:	733b      	strb	r3, [r7, #12]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8007bcc:	f107 020c 	add.w	r2, r7, #12
 8007bd0:	2364      	movs	r3, #100	; 0x64
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	2182      	movs	r1, #130	; 0x82
 8007bd8:	483b      	ldr	r0, [pc, #236]	; (8007cc8 <TP_GetState+0x10c>)
 8007bda:	f7f9 fedb 	bl	8001994 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8007bde:	f107 020c 	add.w	r2, r7, #12
 8007be2:	2364      	movs	r3, #100	; 0x64
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2301      	movs	r3, #1
 8007be8:	2182      	movs	r1, #130	; 0x82
 8007bea:	4837      	ldr	r0, [pc, #220]	; (8007cc8 <TP_GetState+0x10c>)
 8007bec:	f7f9 ffe0 	bl	8001bb0 <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 8007bf0:	7b3b      	ldrb	r3, [r7, #12]
 8007bf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d039      	beq.n	8007c78 <TP_GetState+0xbc>
	{
		readX(&x);
 8007c04:	f107 0312 	add.w	r3, r7, #18
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff fe79 	bl	8007900 <readX>
		readY(&y);
 8007c0e:	f107 0310 	add.w	r3, r7, #16
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fec6 	bl	80079a4 <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 8007c18:	8a7a      	ldrh	r2, [r7, #18]
 8007c1a:	4b2c      	ldr	r3, [pc, #176]	; (8007ccc <TP_GetState+0x110>)
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d905      	bls.n	8007c2e <TP_GetState+0x72>
 8007c22:	8a7a      	ldrh	r2, [r7, #18]
 8007c24:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <TP_GetState+0x110>)
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	e004      	b.n	8007c38 <TP_GetState+0x7c>
 8007c2e:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <TP_GetState+0x110>)
 8007c30:	881a      	ldrh	r2, [r3, #0]
 8007c32:	8a7b      	ldrh	r3, [r7, #18]
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 8007c3a:	8a3a      	ldrh	r2, [r7, #16]
 8007c3c:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <TP_GetState+0x114>)
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d905      	bls.n	8007c50 <TP_GetState+0x94>
 8007c44:	8a3a      	ldrh	r2, [r7, #16]
 8007c46:	4b22      	ldr	r3, [pc, #136]	; (8007cd0 <TP_GetState+0x114>)
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	e004      	b.n	8007c5a <TP_GetState+0x9e>
 8007c50:	4b1f      	ldr	r3, [pc, #124]	; (8007cd0 <TP_GetState+0x114>)
 8007c52:	881a      	ldrh	r2, [r3, #0]
 8007c54:	8a3b      	ldrh	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 8007c5c:	8afa      	ldrh	r2, [r7, #22]
 8007c5e:	8abb      	ldrh	r3, [r7, #20]
 8007c60:	4413      	add	r3, r2
 8007c62:	2b05      	cmp	r3, #5
 8007c64:	dd05      	ble.n	8007c72 <TP_GetState+0xb6>
		{
			_x = x;
 8007c66:	8a7a      	ldrh	r2, [r7, #18]
 8007c68:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <TP_GetState+0x110>)
 8007c6a:	801a      	strh	r2, [r3, #0]
			_y = y;
 8007c6c:	8a3a      	ldrh	r2, [r7, #16]
 8007c6e:	4b18      	ldr	r3, [pc, #96]	; (8007cd0 <TP_GetState+0x114>)
 8007c70:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 8007c72:	4818      	ldr	r0, [pc, #96]	; (8007cd4 <TP_GetState+0x118>)
 8007c74:	f7ff fedc 	bl	8007a30 <readZ>
	}

	state->x = _x;
 8007c78:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <TP_GetState+0x110>)
 8007c7a:	881a      	ldrh	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8007c80:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <TP_GetState+0x114>)
 8007c82:	881a      	ldrh	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 8007c88:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <TP_GetState+0x118>)
 8007c8a:	881a      	ldrh	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 8007c90:	234b      	movs	r3, #75	; 0x4b
 8007c92:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 8007c94:	2301      	movs	r3, #1
 8007c96:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007c98:	f107 020c 	add.w	r2, r7, #12
 8007c9c:	2364      	movs	r3, #100	; 0x64
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2182      	movs	r1, #130	; 0x82
 8007ca4:	4808      	ldr	r0, [pc, #32]	; (8007cc8 <TP_GetState+0x10c>)
 8007ca6:	f7f9 fe75 	bl	8001994 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 8007caa:	2300      	movs	r3, #0
 8007cac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 8007cae:	f107 020c 	add.w	r2, r7, #12
 8007cb2:	2364      	movs	r3, #100	; 0x64
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	2182      	movs	r1, #130	; 0x82
 8007cba:	4803      	ldr	r0, [pc, #12]	; (8007cc8 <TP_GetState+0x10c>)
 8007cbc:	f7f9 fe6a 	bl	8001994 <HAL_I2C_Master_Transmit>
}
 8007cc0:	bf00      	nop
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20022e20 	.word	0x20022e20
 8007ccc:	200229fe 	.word	0x200229fe
 8007cd0:	20022a00 	.word	0x20022a00
 8007cd4:	20022a02 	.word	0x20022a02

08007cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8007cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d10 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007cdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007cde:	e003      	b.n	8007ce8 <LoopCopyDataInit>

08007ce0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007ce2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007ce4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007ce6:	3104      	adds	r1, #4

08007ce8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007ce8:	480b      	ldr	r0, [pc, #44]	; (8007d18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007cec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007cee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007cf0:	d3f6      	bcc.n	8007ce0 <CopyDataInit>
  ldr  r2, =_sbss
 8007cf2:	4a0b      	ldr	r2, [pc, #44]	; (8007d20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007cf4:	e002      	b.n	8007cfc <LoopFillZerobss>

08007cf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007cf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007cf8:	f842 3b04 	str.w	r3, [r2], #4

08007cfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007cfc:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007cfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007d00:	d3f9      	bcc.n	8007cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d02:	f7ff fd13 	bl	800772c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d06:	f00a fdf7 	bl	80128f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d0a:	f7fe fd13 	bl	8006734 <main>
  bx  lr    
 8007d0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007d10:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8007d14:	080144c4 	.word	0x080144c4
  ldr  r0, =_sdata
 8007d18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007d1c:	20000050 	.word	0x20000050
  ldr  r2, =_sbss
 8007d20:	20000050 	.word	0x20000050
  ldr  r3, = _ebss
 8007d24:	20023174 	.word	0x20023174

08007d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d28:	e7fe      	b.n	8007d28 <ADC_IRQHandler>
	...

08007d2c <WM__SendMessage>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4c0d      	ldr	r4, [pc, #52]	; (8007d64 <WM__SendMessage+0x38>)
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	2b13      	cmp	r3, #19
 8007d34:	4606      	mov	r6, r0
 8007d36:	460d      	mov	r5, r1
 8007d38:	dc12      	bgt.n	8007d60 <WM__SendMessage+0x34>
 8007d3a:	f006 feaf 	bl	800ea9c <GUI_ALLOC_h2p>
 8007d3e:	6903      	ldr	r3, [r0, #16]
 8007d40:	606e      	str	r6, [r5, #4]
 8007d42:	b143      	cbz	r3, 8007d56 <WM__SendMessage+0x2a>
 8007d44:	6822      	ldr	r2, [r4, #0]
 8007d46:	4628      	mov	r0, r5
 8007d48:	3201      	adds	r2, #1
 8007d4a:	6022      	str	r2, [r4, #0]
 8007d4c:	4798      	blx	r3
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
 8007d56:	4628      	mov	r0, r5
 8007d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d5c:	f001 ba44 	b.w	80091e8 <WM_DefaultProc>
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	bf00      	nop
 8007d64:	20022a04 	.word	0x20022a04

08007d68 <WM__IsEnabled>:
 8007d68:	b508      	push	{r3, lr}
 8007d6a:	f006 fe97 	bl	800ea9c <GUI_ALLOC_h2p>
 8007d6e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007d70:	f080 0010 	eor.w	r0, r0, #16
 8007d74:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8007d78:	bd08      	pop	{r3, pc}

08007d7a <WM__IsAncestor>:
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b908      	cbnz	r0, 8007d84 <WM__IsAncestor+0xa>
 8007d80:	2000      	movs	r0, #0
 8007d82:	bd10      	pop	{r4, pc}
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d0fb      	beq.n	8007d80 <WM__IsAncestor+0x6>
 8007d88:	f006 fe88 	bl	800ea9c <GUI_ALLOC_h2p>
 8007d8c:	6980      	ldr	r0, [r0, #24]
 8007d8e:	42a0      	cmp	r0, r4
 8007d90:	d002      	beq.n	8007d98 <WM__IsAncestor+0x1e>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d1f8      	bne.n	8007d88 <WM__IsAncestor+0xe>
 8007d96:	e7f3      	b.n	8007d80 <WM__IsAncestor+0x6>
 8007d98:	2001      	movs	r0, #1
 8007d9a:	bd10      	pop	{r4, pc}

08007d9c <WM_SetSize>:
 8007d9c:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 8007da0:	460e      	mov	r6, r1
 8007da2:	4690      	mov	r8, r2
 8007da4:	4607      	mov	r7, r0
 8007da6:	b1d0      	cbz	r0, 8007dde <WM_SetSize+0x42>
 8007da8:	f006 fe82 	bl	800eab0 <GUI_ALLOC_LockH>
 8007dac:	4603      	mov	r3, r0
 8007dae:	a802      	add	r0, sp, #8
 8007db0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007db4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007db8:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8007dbc:	f840 3d04 	str.w	r3, [r0, #-4]!
 8007dc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007dc4:	1a8a      	subs	r2, r1, r2
 8007dc6:	1aed      	subs	r5, r5, r3
 8007dc8:	43d2      	mvns	r2, r2
 8007dca:	43ed      	mvns	r5, r5
 8007dcc:	4416      	add	r6, r2
 8007dce:	4445      	add	r5, r8
 8007dd0:	f006 fe7c 	bl	800eacc <GUI_ALLOC_UnlockH>
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	462a      	mov	r2, r5
 8007dda:	f000 f821 	bl	8007e20 <WM_ResizeWindow>
 8007dde:	b003      	add	sp, #12
 8007de0:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

08007de4 <WM__ReleaseCapture>:
 8007de4:	b530      	push	{r4, r5, lr}
 8007de6:	4d0a      	ldr	r5, [pc, #40]	; (8007e10 <WM__ReleaseCapture+0x2c>)
 8007de8:	4c0a      	ldr	r4, [pc, #40]	; (8007e14 <WM__ReleaseCapture+0x30>)
 8007dea:	682b      	ldr	r3, [r5, #0]
 8007dec:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007df0:	b085      	sub	sp, #20
 8007df2:	b150      	cbz	r0, 8007e0a <WM__ReleaseCapture+0x26>
 8007df4:	a904      	add	r1, sp, #16
 8007df6:	2318      	movs	r3, #24
 8007df8:	f841 3d10 	str.w	r3, [r1, #-16]!
 8007dfc:	4669      	mov	r1, sp
 8007dfe:	f7ff ff95 	bl	8007d2c <WM__SendMessage>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8007e0a:	b005      	add	sp, #20
 8007e0c:	bd30      	pop	{r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	20023014 	.word	0x20023014
 8007e14:	20023030 	.word	0x20023030

08007e18 <WM_ReleaseCapture>:
 8007e18:	f7ff bfe4 	b.w	8007de4 <WM__ReleaseCapture>

08007e1c <WM_SendMessageNoPara>:
 8007e1c:	f008 b862 	b.w	800fee4 <WM__SendMessageNoPara>

08007e20 <WM_ResizeWindow>:
 8007e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e24:	ea51 0302 	orrs.w	r3, r1, r2
 8007e28:	b08a      	sub	sp, #40	; 0x28
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	4617      	mov	r7, r2
 8007e30:	d06e      	beq.n	8007f10 <WM_ResizeWindow+0xf0>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d06c      	beq.n	8007f10 <WM_ResizeWindow+0xf0>
 8007e36:	f006 fe3b 	bl	800eab0 <GUI_ALLOC_LockH>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	9003      	str	r0, [sp, #12]
 8007e3e:	c803      	ldmia	r0, {r0, r1}
 8007e40:	ad04      	add	r5, sp, #16
 8007e42:	ac06      	add	r4, sp, #24
 8007e44:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e48:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e4c:	b17e      	cbz	r6, 8007e6e <WM_ResizeWindow+0x4e>
 8007e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e50:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8007e54:	2a80      	cmp	r2, #128	; 0x80
 8007e56:	d105      	bne.n	8007e64 <WM_ResizeWindow+0x44>
 8007e58:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8007e5c:	1b96      	subs	r6, r2, r6
 8007e5e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8007e62:	e004      	b.n	8007e6e <WM_ResizeWindow+0x4e>
 8007e64:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8007e68:	4416      	add	r6, r2
 8007e6a:	f8ad 601c 	strh.w	r6, [sp, #28]
 8007e6e:	b187      	cbz	r7, 8007e92 <WM_ResizeWindow+0x72>
 8007e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e72:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8007e76:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007e7a:	d105      	bne.n	8007e88 <WM_ResizeWindow+0x68>
 8007e7c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8007e80:	1bd7      	subs	r7, r2, r7
 8007e82:	f8ad 701a 	strh.w	r7, [sp, #26]
 8007e86:	e004      	b.n	8007e92 <WM_ResizeWindow+0x72>
 8007e88:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8007e8c:	4417      	add	r7, r2
 8007e8e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	03da      	lsls	r2, r3, #15
 8007e96:	d502      	bpl.n	8007e9e <WM_ResizeWindow+0x7e>
 8007e98:	4640      	mov	r0, r8
 8007e9a:	f000 fc19 	bl	80086d0 <WM__InvalidateDrawAndDescs>
 8007e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	e883 0003 	stmia.w	r3, {r0, r1}
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	079b      	lsls	r3, r3, #30
 8007eac:	d50a      	bpl.n	8007ec4 <WM_ResizeWindow+0xa4>
 8007eae:	a808      	add	r0, sp, #32
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	4622      	mov	r2, r4
 8007eb4:	f005 fabc 	bl	800d430 <GUI_MergeRect>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	a808      	add	r0, sp, #32
 8007ebc:	6999      	ldr	r1, [r3, #24]
 8007ebe:	6a1a      	ldr	r2, [r3, #32]
 8007ec0:	f000 fd0a 	bl	80088d8 <WM__InvalidateRectEx>
 8007ec4:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8007ec8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8007ecc:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8007ed0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8007ed4:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8007ed8:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8007edc:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8007ee0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8007ee4:	1ae3      	subs	r3, r4, r3
 8007ee6:	1a38      	subs	r0, r7, r0
 8007ee8:	ac0a      	add	r4, sp, #40	; 0x28
 8007eea:	1aaa      	subs	r2, r5, r2
 8007eec:	9000      	str	r0, [sp, #0]
 8007eee:	1a71      	subs	r1, r6, r1
 8007ef0:	9803      	ldr	r0, [sp, #12]
 8007ef2:	f007 ff7d 	bl	800fdf0 <WM__UpdateChildPositions>
 8007ef6:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8007efa:	f101 0008 	add.w	r0, r1, #8
 8007efe:	f003 ff59 	bl	800bdb4 <GUI__IntersectRect>
 8007f02:	4640      	mov	r0, r8
 8007f04:	2105      	movs	r1, #5
 8007f06:	f000 fcff 	bl	8008908 <WM__SendMsgNoData>
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f006 fdde 	bl	800eacc <GUI_ALLOC_UnlockH>
 8007f10:	b00a      	add	sp, #40	; 0x28
 8007f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f16 <WM_NotifyParent>:
 8007f16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f18:	2326      	movs	r3, #38	; 0x26
 8007f1a:	9103      	str	r1, [sp, #12]
 8007f1c:	4669      	mov	r1, sp
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	f008 fa8e 	bl	8010440 <WM_SendToParent>
 8007f24:	b005      	add	sp, #20
 8007f26:	f85d fb04 	ldr.w	pc, [sp], #4

08007f2a <_MoveDescendents>:
 8007f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	4606      	mov	r6, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	4615      	mov	r5, r2
 8007f36:	a804      	add	r0, sp, #16
 8007f38:	2100      	movs	r1, #0
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	f00a fd34 	bl	80129a8 <memset>
 8007f40:	b336      	cbz	r6, 8007f90 <_MoveDescendents+0x66>
 8007f42:	4630      	mov	r0, r6
 8007f44:	f006 fdb4 	bl	800eab0 <GUI_ALLOC_LockH>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	9001      	str	r0, [sp, #4]
 8007f4e:	f005 fa5f 	bl	800d410 <GUI_MoveRect>
 8007f52:	9801      	ldr	r0, [sp, #4]
 8007f54:	4621      	mov	r1, r4
 8007f56:	3008      	adds	r0, #8
 8007f58:	462a      	mov	r2, r5
 8007f5a:	f005 fa59 	bl	800d410 <GUI_MoveRect>
 8007f5e:	a808      	add	r0, sp, #32
 8007f60:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 8007f64:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8007f68:	6a17      	ldr	r7, [r2, #32]
 8007f6a:	f006 fdaf 	bl	800eacc <GUI_ALLOC_UnlockH>
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4621      	mov	r1, r4
 8007f72:	462a      	mov	r2, r5
 8007f74:	f7ff ffd9 	bl	8007f2a <_MoveDescendents>
 8007f78:	2303      	movs	r3, #3
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	ab02      	add	r3, sp, #8
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	9402      	str	r4, [sp, #8]
 8007f86:	9503      	str	r5, [sp, #12]
 8007f88:	463e      	mov	r6, r7
 8007f8a:	f7ff fecf 	bl	8007d2c <WM__SendMessage>
 8007f8e:	e7d7      	b.n	8007f40 <_MoveDescendents+0x16>
 8007f90:	b008      	add	sp, #32
 8007f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f96 <WM__MoveWindow>:
 8007f96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f9a:	b08b      	sub	sp, #44	; 0x2c
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	a806      	add	r0, sp, #24
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	2210      	movs	r2, #16
 8007fa8:	f00a fcfe 	bl	80129a8 <memset>
 8007fac:	2e00      	cmp	r6, #0
 8007fae:	d043      	beq.n	8008038 <WM__MoveWindow+0xa2>
 8007fb0:	b90d      	cbnz	r5, 8007fb6 <WM__MoveWindow+0x20>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	d040      	beq.n	8008038 <WM__MoveWindow+0xa2>
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f006 fd7a 	bl	800eab0 <GUI_ALLOC_LockH>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	9001      	str	r0, [sp, #4]
 8007fc0:	c803      	ldmia	r0, {r0, r1}
 8007fc2:	f10d 0808 	add.w	r8, sp, #8
 8007fc6:	e888 0003 	stmia.w	r8, {r0, r1}
 8007fca:	4622      	mov	r2, r4
 8007fcc:	4618      	mov	r0, r3
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f005 fa1e 	bl	800d410 <GUI_MoveRect>
 8007fd4:	9801      	ldr	r0, [sp, #4]
 8007fd6:	af0a      	add	r7, sp, #40	; 0x28
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4622      	mov	r2, r4
 8007fdc:	3008      	adds	r0, #8
 8007fde:	f005 fa17 	bl	800d410 <GUI_MoveRect>
 8007fe2:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8007fe6:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8007fea:	4638      	mov	r0, r7
 8007fec:	f006 fd6e 	bl	800eacc <GUI_ALLOC_UnlockH>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4648      	mov	r0, r9
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7ff ff98 	bl	8007f2a <_MoveDescendents>
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f006 fd58 	bl	800eab0 <GUI_ALLOC_LockH>
 8008000:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008002:	9001      	str	r0, [sp, #4]
 8008004:	0792      	lsls	r2, r2, #30
 8008006:	d50a      	bpl.n	800801e <WM__MoveWindow+0x88>
 8008008:	6981      	ldr	r1, [r0, #24]
 800800a:	b141      	cbz	r1, 800801e <WM__MoveWindow+0x88>
 800800c:	6a02      	ldr	r2, [r0, #32]
 800800e:	f000 fc4e 	bl	80088ae <WM__InvalidateParent>
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	4640      	mov	r0, r8
 8008016:	6999      	ldr	r1, [r3, #24]
 8008018:	6a1a      	ldr	r2, [r3, #32]
 800801a:	f000 fc48 	bl	80088ae <WM__InvalidateParent>
 800801e:	4638      	mov	r0, r7
 8008020:	f006 fd54 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008024:	2303      	movs	r3, #3
 8008026:	9306      	str	r3, [sp, #24]
 8008028:	4630      	mov	r0, r6
 800802a:	ab04      	add	r3, sp, #16
 800802c:	a906      	add	r1, sp, #24
 800802e:	9309      	str	r3, [sp, #36]	; 0x24
 8008030:	9504      	str	r5, [sp, #16]
 8008032:	9405      	str	r4, [sp, #20]
 8008034:	f7ff fe7a 	bl	8007d2c <WM__SendMessage>
 8008038:	b00b      	add	sp, #44	; 0x2c
 800803a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800803e <WM_MoveWindow>:
 800803e:	f7ff bfaa 	b.w	8007f96 <WM__MoveWindow>

08008042 <WM_IsWindow>:
 8008042:	f000 bb35 	b.w	80086b0 <WM__IsWindow>

08008046 <WM_GetParent>:
 8008046:	b508      	push	{r3, lr}
 8008048:	4603      	mov	r3, r0
 800804a:	b110      	cbz	r0, 8008052 <WM_GetParent+0xc>
 800804c:	f006 fd26 	bl	800ea9c <GUI_ALLOC_h2p>
 8008050:	6983      	ldr	r3, [r0, #24]
 8008052:	4618      	mov	r0, r3
 8008054:	bd08      	pop	{r3, pc}

08008056 <WM_GetFirstChild>:
 8008056:	b508      	push	{r3, lr}
 8008058:	4603      	mov	r3, r0
 800805a:	b110      	cbz	r0, 8008062 <WM_GetFirstChild+0xc>
 800805c:	f006 fd1e 	bl	800ea9c <GUI_ALLOC_h2p>
 8008060:	69c3      	ldr	r3, [r0, #28]
 8008062:	4618      	mov	r0, r3
 8008064:	bd08      	pop	{r3, pc}
	...

08008068 <WM_GetDesktopWindow>:
 8008068:	4b03      	ldr	r3, [pc, #12]	; (8008078 <WM_GetDesktopWindow+0x10>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	7c5a      	ldrb	r2, [r3, #17]
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <WM_GetDesktopWindow+0x14>)
 8008070:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000038 	.word	0x20000038
 800807c:	20022ff4 	.word	0x20022ff4

08008080 <_OnExit>:
 8008080:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <_OnExit+0x2c>)
 8008082:	490b      	ldr	r1, [pc, #44]	; (80080b0 <_OnExit+0x30>)
 8008084:	2300      	movs	r3, #0
 8008086:	7013      	strb	r3, [r2, #0]
 8008088:	4a0a      	ldr	r2, [pc, #40]	; (80080b4 <_OnExit+0x34>)
 800808a:	600b      	str	r3, [r1, #0]
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	4a0a      	ldr	r2, [pc, #40]	; (80080b8 <_OnExit+0x38>)
 8008090:	604b      	str	r3, [r1, #4]
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	4a09      	ldr	r2, [pc, #36]	; (80080bc <_OnExit+0x3c>)
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	6053      	str	r3, [r2, #4]
 800809a:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <_OnExit+0x40>)
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <_OnExit+0x44>)
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	4a09      	ldr	r2, [pc, #36]	; (80080c8 <_OnExit+0x48>)
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	4a09      	ldr	r2, [pc, #36]	; (80080cc <_OnExit+0x4c>)
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	4770      	bx	lr
 80080ac:	20022a30 	.word	0x20022a30
 80080b0:	20023004 	.word	0x20023004
 80080b4:	20022a08 	.word	0x20022a08
 80080b8:	20023028 	.word	0x20023028
 80080bc:	20023030 	.word	0x20023030
 80080c0:	2002303c 	.word	0x2002303c
 80080c4:	20022ff0 	.word	0x20022ff0
 80080c8:	2002301c 	.word	0x2002301c
 80080cc:	2002302c 	.word	0x2002302c

080080d0 <_Paint1>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	4604      	mov	r4, r0
 80080d4:	f006 fce2 	bl	800ea9c <GUI_ALLOC_h2p>
 80080d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80080da:	4a04      	ldr	r2, [pc, #16]	; (80080ec <_Paint1+0x1c>)
 80080dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80080e0:	4b03      	ldr	r3, [pc, #12]	; (80080f0 <_Paint1+0x20>)
 80080e2:	4620      	mov	r0, r4
 80080e4:	bf08      	it	eq
 80080e6:	4613      	moveq	r3, r2
 80080e8:	4798      	blx	r3
 80080ea:	bd10      	pop	{r4, pc}
 80080ec:	08008f2d 	.word	0x08008f2d
 80080f0:	080094fd 	.word	0x080094fd

080080f4 <_Findy1>:
 80080f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080f6:	4605      	mov	r5, r0
 80080f8:	b085      	sub	sp, #20
 80080fa:	460c      	mov	r4, r1
 80080fc:	4616      	mov	r6, r2
 80080fe:	2d00      	cmp	r5, #0
 8008100:	d04c      	beq.n	800819c <_Findy1+0xa8>
 8008102:	4628      	mov	r0, r5
 8008104:	f006 fcd4 	bl	800eab0 <GUI_ALLOC_LockH>
 8008108:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800810a:	9001      	str	r0, [sp, #4]
 800810c:	07bb      	lsls	r3, r7, #30
 800810e:	4601      	mov	r1, r0
 8008110:	d53d      	bpl.n	800818e <_Findy1+0x9a>
 8008112:	ad02      	add	r5, sp, #8
 8008114:	b126      	cbz	r6, 8008120 <_Findy1+0x2c>
 8008116:	4628      	mov	r0, r5
 8008118:	4632      	mov	r2, r6
 800811a:	f003 fe19 	bl	800bd50 <GUI__IntersectRects>
 800811e:	e002      	b.n	8008126 <_Findy1+0x32>
 8008120:	c803      	ldmia	r0, {r0, r1}
 8008122:	e885 0003 	stmia.w	r5, {r0, r1}
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f005 f89f 	bl	800d26c <GUI_RectsIntersect>
 800812e:	b370      	cbz	r0, 800818e <_Findy1+0x9a>
 8008130:	f017 0f01 	tst.w	r7, #1
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	d11e      	bne.n	8008176 <_Findy1+0x82>
 8008138:	b13e      	cbz	r6, 800814a <_Findy1+0x56>
 800813a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800813e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008142:	429a      	cmp	r2, r3
 8008144:	bfa8      	it	ge
 8008146:	4613      	movge	r3, r2
 8008148:	e001      	b.n	800814e <_Findy1+0x5a>
 800814a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800814e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008152:	4293      	cmp	r3, r2
 8008154:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008158:	dd06      	ble.n	8008168 <_Findy1+0x74>
 800815a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800815e:	b219      	sxth	r1, r3
 8008160:	428a      	cmp	r2, r1
 8008162:	db14      	blt.n	800818e <_Findy1+0x9a>
 8008164:	3b01      	subs	r3, #1
 8008166:	e004      	b.n	8008172 <_Findy1+0x7e>
 8008168:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800816c:	b219      	sxth	r1, r3
 800816e:	428a      	cmp	r2, r1
 8008170:	dd0d      	ble.n	800818e <_Findy1+0x9a>
 8008172:	80e3      	strh	r3, [r4, #6]
 8008174:	e00b      	b.n	800818e <_Findy1+0x9a>
 8008176:	69df      	ldr	r7, [r3, #28]
 8008178:	b14f      	cbz	r7, 800818e <_Findy1+0x9a>
 800817a:	4638      	mov	r0, r7
 800817c:	4621      	mov	r1, r4
 800817e:	462a      	mov	r2, r5
 8008180:	f7ff ffb8 	bl	80080f4 <_Findy1>
 8008184:	4638      	mov	r0, r7
 8008186:	f006 fc89 	bl	800ea9c <GUI_ALLOC_h2p>
 800818a:	6a07      	ldr	r7, [r0, #32]
 800818c:	e7f4      	b.n	8008178 <_Findy1+0x84>
 800818e:	a804      	add	r0, sp, #16
 8008190:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008194:	6a1d      	ldr	r5, [r3, #32]
 8008196:	f006 fc99 	bl	800eacc <GUI_ALLOC_UnlockH>
 800819a:	e7b0      	b.n	80080fe <_Findy1+0xa>
 800819c:	b005      	add	sp, #20
 800819e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081a0 <_Findx0>:
 80081a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80081a4:	4604      	mov	r4, r0
 80081a6:	460f      	mov	r7, r1
 80081a8:	4690      	mov	r8, r2
 80081aa:	2500      	movs	r5, #0
 80081ac:	2c00      	cmp	r4, #0
 80081ae:	d037      	beq.n	8008220 <_Findx0+0x80>
 80081b0:	4620      	mov	r0, r4
 80081b2:	f006 fc7d 	bl	800eab0 <GUI_ALLOC_LockH>
 80081b6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80081b8:	9001      	str	r0, [sp, #4]
 80081ba:	07b2      	lsls	r2, r6, #30
 80081bc:	4601      	mov	r1, r0
 80081be:	d528      	bpl.n	8008212 <_Findx0+0x72>
 80081c0:	ac02      	add	r4, sp, #8
 80081c2:	f1b8 0f00 	cmp.w	r8, #0
 80081c6:	d004      	beq.n	80081d2 <_Findx0+0x32>
 80081c8:	4620      	mov	r0, r4
 80081ca:	4642      	mov	r2, r8
 80081cc:	f003 fdc0 	bl	800bd50 <GUI__IntersectRects>
 80081d0:	e002      	b.n	80081d8 <_Findx0+0x38>
 80081d2:	c803      	ldmia	r0, {r0, r1}
 80081d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80081d8:	4638      	mov	r0, r7
 80081da:	4621      	mov	r1, r4
 80081dc:	f005 f846 	bl	800d26c <GUI_RectsIntersect>
 80081e0:	b1b8      	cbz	r0, 8008212 <_Findx0+0x72>
 80081e2:	07f3      	lsls	r3, r6, #31
 80081e4:	d405      	bmi.n	80081f2 <_Findx0+0x52>
 80081e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	803b      	strh	r3, [r7, #0]
 80081ee:	2501      	movs	r5, #1
 80081f0:	e00f      	b.n	8008212 <_Findx0+0x72>
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	69de      	ldr	r6, [r3, #28]
 80081f6:	b166      	cbz	r6, 8008212 <_Findx0+0x72>
 80081f8:	4630      	mov	r0, r6
 80081fa:	4639      	mov	r1, r7
 80081fc:	4622      	mov	r2, r4
 80081fe:	f7ff ffcf 	bl	80081a0 <_Findx0>
 8008202:	2800      	cmp	r0, #0
 8008204:	4630      	mov	r0, r6
 8008206:	bf18      	it	ne
 8008208:	2501      	movne	r5, #1
 800820a:	f006 fc47 	bl	800ea9c <GUI_ALLOC_h2p>
 800820e:	6a06      	ldr	r6, [r0, #32]
 8008210:	e7f1      	b.n	80081f6 <_Findx0+0x56>
 8008212:	a804      	add	r0, sp, #16
 8008214:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008218:	6a1c      	ldr	r4, [r3, #32]
 800821a:	f006 fc57 	bl	800eacc <GUI_ALLOC_UnlockH>
 800821e:	e7c5      	b.n	80081ac <_Findx0+0xc>
 8008220:	4628      	mov	r0, r5
 8008222:	b004      	add	sp, #16
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008228 <_Findx1>:
 8008228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800822a:	4604      	mov	r4, r0
 800822c:	b085      	sub	sp, #20
 800822e:	460e      	mov	r6, r1
 8008230:	4617      	mov	r7, r2
 8008232:	2c00      	cmp	r4, #0
 8008234:	d031      	beq.n	800829a <_Findx1+0x72>
 8008236:	4620      	mov	r0, r4
 8008238:	f006 fc3a 	bl	800eab0 <GUI_ALLOC_LockH>
 800823c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800823e:	9001      	str	r0, [sp, #4]
 8008240:	07aa      	lsls	r2, r5, #30
 8008242:	4601      	mov	r1, r0
 8008244:	d522      	bpl.n	800828c <_Findx1+0x64>
 8008246:	ac02      	add	r4, sp, #8
 8008248:	b127      	cbz	r7, 8008254 <_Findx1+0x2c>
 800824a:	4620      	mov	r0, r4
 800824c:	463a      	mov	r2, r7
 800824e:	f003 fd7f 	bl	800bd50 <GUI__IntersectRects>
 8008252:	e002      	b.n	800825a <_Findx1+0x32>
 8008254:	c803      	ldmia	r0, {r0, r1}
 8008256:	e884 0003 	stmia.w	r4, {r0, r1}
 800825a:	4630      	mov	r0, r6
 800825c:	4621      	mov	r1, r4
 800825e:	f005 f805 	bl	800d26c <GUI_RectsIntersect>
 8008262:	b198      	cbz	r0, 800828c <_Findx1+0x64>
 8008264:	07eb      	lsls	r3, r5, #31
 8008266:	d404      	bmi.n	8008272 <_Findx1+0x4a>
 8008268:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800826c:	3b01      	subs	r3, #1
 800826e:	80b3      	strh	r3, [r6, #4]
 8008270:	e00c      	b.n	800828c <_Findx1+0x64>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	69dd      	ldr	r5, [r3, #28]
 8008276:	b14d      	cbz	r5, 800828c <_Findx1+0x64>
 8008278:	4628      	mov	r0, r5
 800827a:	4631      	mov	r1, r6
 800827c:	4622      	mov	r2, r4
 800827e:	f7ff ffd3 	bl	8008228 <_Findx1>
 8008282:	4628      	mov	r0, r5
 8008284:	f006 fc0a 	bl	800ea9c <GUI_ALLOC_h2p>
 8008288:	6a05      	ldr	r5, [r0, #32]
 800828a:	e7f4      	b.n	8008276 <_Findx1+0x4e>
 800828c:	a804      	add	r0, sp, #16
 800828e:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8008292:	6a1c      	ldr	r4, [r3, #32]
 8008294:	f006 fc1a 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008298:	e7cb      	b.n	8008232 <_Findx1+0xa>
 800829a:	b005      	add	sp, #20
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080082a0 <_Paint1Trans>:
 80082a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80082a4:	4d21      	ldr	r5, [pc, #132]	; (800832c <_Paint1Trans+0x8c>)
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	4606      	mov	r6, r0
 80082aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80082ac:	f006 fc00 	bl	800eab0 <GUI_ALLOC_LockH>
 80082b0:	9000      	str	r0, [sp, #0]
 80082b2:	4630      	mov	r0, r6
 80082b4:	f006 fbfc 	bl	800eab0 <GUI_ALLOC_LockH>
 80082b8:	ac02      	add	r4, sp, #8
 80082ba:	4601      	mov	r1, r0
 80082bc:	9001      	str	r0, [sp, #4]
 80082be:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 80082c2:	3008      	adds	r0, #8
 80082c4:	f004 ffd2 	bl	800d26c <GUI_RectsIntersect>
 80082c8:	4607      	mov	r7, r0
 80082ca:	b328      	cbz	r0, 8008318 <_Paint1Trans+0x78>
 80082cc:	9901      	ldr	r1, [sp, #4]
 80082ce:	9a00      	ldr	r2, [sp, #0]
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	4c17      	ldr	r4, [pc, #92]	; (8008330 <_Paint1Trans+0x90>)
 80082d4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80082d6:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 80082da:	f101 0008 	add.w	r0, r1, #8
 80082de:	3208      	adds	r2, #8
 80082e0:	f003 fd36 	bl	800bd50 <GUI__IntersectRects>
 80082e4:	4668      	mov	r0, sp
 80082e6:	f006 fbf1 	bl	800eacc <GUI_ALLOC_UnlockH>
 80082ea:	9a01      	ldr	r2, [sp, #4]
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	f9b2 1000 	ldrsh.w	r1, [r2]
 80082f2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80082f6:	64d9      	str	r1, [r3, #76]	; 0x4c
 80082f8:	651a      	str	r2, [r3, #80]	; 0x50
 80082fa:	a801      	add	r0, sp, #4
 80082fc:	6026      	str	r6, [r4, #0]
 80082fe:	f006 fbe5 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008302:	4630      	mov	r0, r6
 8008304:	f7ff fee4 	bl	80080d0 <_Paint1>
 8008308:	2300      	movs	r3, #0
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	651f      	str	r7, [r3, #80]	; 0x50
 8008310:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8008314:	2701      	movs	r7, #1
 8008316:	e005      	b.n	8008324 <_Paint1Trans+0x84>
 8008318:	4668      	mov	r0, sp
 800831a:	f006 fbd7 	bl	800eacc <GUI_ALLOC_UnlockH>
 800831e:	a801      	add	r0, sp, #4
 8008320:	f006 fbd4 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008324:	4638      	mov	r0, r7
 8008326:	b002      	add	sp, #8
 8008328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800832c:	20000038 	.word	0x20000038
 8008330:	20022ff0 	.word	0x20022ff0

08008334 <_PaintTransChildren>:
 8008334:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008338:	4606      	mov	r6, r0
 800833a:	f006 fbb9 	bl	800eab0 <GUI_ALLOC_LockH>
 800833e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008340:	9001      	str	r0, [sp, #4]
 8008342:	079b      	lsls	r3, r3, #30
 8008344:	d405      	bmi.n	8008352 <_PaintTransChildren+0x1e>
 8008346:	a801      	add	r0, sp, #4
 8008348:	f006 fbc0 	bl	800eacc <GUI_ALLOC_UnlockH>
 800834c:	b002      	add	sp, #8
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008352:	69c4      	ldr	r4, [r0, #28]
 8008354:	2c00      	cmp	r4, #0
 8008356:	d0f6      	beq.n	8008346 <_PaintTransChildren+0x12>
 8008358:	4620      	mov	r0, r4
 800835a:	f006 fba9 	bl	800eab0 <GUI_ALLOC_LockH>
 800835e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008360:	ad02      	add	r5, sp, #8
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b03      	cmp	r3, #3
 8008368:	f845 0d08 	str.w	r0, [r5, #-8]!
 800836c:	d137      	bne.n	80083de <_PaintTransChildren+0xaa>
 800836e:	9901      	ldr	r1, [sp, #4]
 8008370:	3108      	adds	r1, #8
 8008372:	f004 ff7b 	bl	800d26c <GUI_RectsIntersect>
 8008376:	2800      	cmp	r0, #0
 8008378:	d031      	beq.n	80083de <_PaintTransChildren+0xaa>
 800837a:	a802      	add	r0, sp, #8
 800837c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8008380:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8008384:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8008388:	899f      	ldrh	r7, [r3, #12]
 800838a:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 800838e:	f006 fb9d 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008392:	4668      	mov	r0, sp
 8008394:	f006 fb9a 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008398:	4620      	mov	r0, r4
 800839a:	f7ff ff81 	bl	80082a0 <_Paint1Trans>
 800839e:	b170      	cbz	r0, 80083be <_PaintTransChildren+0x8a>
 80083a0:	4620      	mov	r0, r4
 80083a2:	f006 fb7b 	bl	800ea9c <GUI_ALLOC_h2p>
 80083a6:	9000      	str	r0, [sp, #0]
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff ffc3 	bl	8008334 <_PaintTransChildren>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f006 fb74 	bl	800ea9c <GUI_ALLOC_h2p>
 80083b4:	9000      	str	r0, [sp, #0]
 80083b6:	4630      	mov	r0, r6
 80083b8:	f006 fb70 	bl	800ea9c <GUI_ALLOC_h2p>
 80083bc:	9001      	str	r0, [sp, #4]
 80083be:	4630      	mov	r0, r6
 80083c0:	f006 fb76 	bl	800eab0 <GUI_ALLOC_LockH>
 80083c4:	9001      	str	r0, [sp, #4]
 80083c6:	4620      	mov	r0, r4
 80083c8:	f006 fb72 	bl	800eab0 <GUI_ALLOC_LockH>
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	9000      	str	r0, [sp, #0]
 80083d0:	f8a3 9008 	strh.w	r9, [r3, #8]
 80083d4:	f8a3 800a 	strh.w	r8, [r3, #10]
 80083d8:	819f      	strh	r7, [r3, #12]
 80083da:	f8a3 a00e 	strh.w	sl, [r3, #14]
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	4668      	mov	r0, sp
 80083e2:	6a1c      	ldr	r4, [r3, #32]
 80083e4:	f006 fb72 	bl	800eacc <GUI_ALLOC_UnlockH>
 80083e8:	e7b4      	b.n	8008354 <_PaintTransChildren+0x20>
	...

080083ec <WM__PaintWinAndOverlays>:
 80083ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	f006 fb5e 	bl	800eab0 <GUI_ALLOC_LockH>
 80083f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80083f6:	9001      	str	r0, [sp, #4]
 80083f8:	f640 0301 	movw	r3, #2049	; 0x801
 80083fc:	4013      	ands	r3, r2
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d005      	beq.n	800840e <WM__PaintWinAndOverlays+0x22>
 8008402:	a801      	add	r0, sp, #4
 8008404:	f006 fb62 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008408:	4620      	mov	r0, r4
 800840a:	f7ff fe61 	bl	80080d0 <_Paint1>
 800840e:	4b14      	ldr	r3, [pc, #80]	; (8008460 <WM__PaintWinAndOverlays+0x74>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	b313      	cbz	r3, 800845a <WM__PaintWinAndOverlays+0x6e>
 8008414:	4620      	mov	r0, r4
 8008416:	f7ff ff8d 	bl	8008334 <_PaintTransChildren>
 800841a:	4620      	mov	r0, r4
 800841c:	f006 fb3e 	bl	800ea9c <GUI_ALLOC_h2p>
 8008420:	6985      	ldr	r5, [r0, #24]
 8008422:	6a04      	ldr	r4, [r0, #32]
 8008424:	b1cd      	cbz	r5, 800845a <WM__PaintWinAndOverlays+0x6e>
 8008426:	b194      	cbz	r4, 800844e <WM__PaintWinAndOverlays+0x62>
 8008428:	4620      	mov	r0, r4
 800842a:	f006 fb37 	bl	800ea9c <GUI_ALLOC_h2p>
 800842e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	2b03      	cmp	r3, #3
 8008436:	d102      	bne.n	800843e <WM__PaintWinAndOverlays+0x52>
 8008438:	4620      	mov	r0, r4
 800843a:	f7ff ff31 	bl	80082a0 <_Paint1Trans>
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff ff78 	bl	8008334 <_PaintTransChildren>
 8008444:	4620      	mov	r0, r4
 8008446:	f006 fb29 	bl	800ea9c <GUI_ALLOC_h2p>
 800844a:	6a04      	ldr	r4, [r0, #32]
 800844c:	e7eb      	b.n	8008426 <WM__PaintWinAndOverlays+0x3a>
 800844e:	4628      	mov	r0, r5
 8008450:	f006 fb24 	bl	800ea9c <GUI_ALLOC_h2p>
 8008454:	6a04      	ldr	r4, [r0, #32]
 8008456:	6985      	ldr	r5, [r0, #24]
 8008458:	e7e4      	b.n	8008424 <WM__PaintWinAndOverlays+0x38>
 800845a:	b003      	add	sp, #12
 800845c:	bd30      	pop	{r4, r5, pc}
 800845e:	bf00      	nop
 8008460:	2002303c 	.word	0x2002303c

08008464 <_cbPaintMemDev>:
 8008464:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	4d17      	ldr	r5, [pc, #92]	; (80084c8 <_cbPaintMemDev+0x64>)
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	4606      	mov	r6, r0
 800846e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008470:	f006 fb1e 	bl	800eab0 <GUI_ALLOC_LockH>
 8008474:	682a      	ldr	r2, [r5, #0]
 8008476:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 800847a:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 800847e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8008482:	89c7      	ldrh	r7, [r0, #14]
 8008484:	ac02      	add	r4, sp, #8
 8008486:	3208      	adds	r2, #8
 8008488:	f844 0d04 	str.w	r0, [r4, #-4]!
 800848c:	f100 0308 	add.w	r3, r0, #8
 8008490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008494:	e883 0003 	stmia.w	r3, {r0, r1}
 8008498:	4620      	mov	r0, r4
 800849a:	f006 fb17 	bl	800eacc <GUI_ALLOC_UnlockH>
 800849e:	6830      	ldr	r0, [r6, #0]
 80084a0:	f7ff ffa4 	bl	80083ec <WM__PaintWinAndOverlays>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80084a8:	f006 fb02 	bl	800eab0 <GUI_ALLOC_LockH>
 80084ac:	9001      	str	r0, [sp, #4]
 80084ae:	f8a0 a008 	strh.w	sl, [r0, #8]
 80084b2:	f8a0 900a 	strh.w	r9, [r0, #10]
 80084b6:	f8a0 800c 	strh.w	r8, [r0, #12]
 80084ba:	81c7      	strh	r7, [r0, #14]
 80084bc:	4620      	mov	r0, r4
 80084be:	f006 fb05 	bl	800eacc <GUI_ALLOC_UnlockH>
 80084c2:	b002      	add	sp, #8
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	20000038 	.word	0x20000038

080084cc <WM__ClipAtParentBorders>:
 80084cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084ce:	4607      	mov	r7, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	4628      	mov	r0, r5
 80084d4:	f006 faec 	bl	800eab0 <GUI_ALLOC_LockH>
 80084d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80084da:	ac02      	add	r4, sp, #8
 80084dc:	f013 0602 	ands.w	r6, r3, #2
 80084e0:	4601      	mov	r1, r0
 80084e2:	f844 0d04 	str.w	r0, [r4, #-4]!
 80084e6:	d104      	bne.n	80084f2 <WM__ClipAtParentBorders+0x26>
 80084e8:	4620      	mov	r0, r4
 80084ea:	f006 faef 	bl	800eacc <GUI_ALLOC_UnlockH>
 80084ee:	4630      	mov	r0, r6
 80084f0:	e016      	b.n	8008520 <WM__ClipAtParentBorders+0x54>
 80084f2:	4638      	mov	r0, r7
 80084f4:	f003 fc5e 	bl	800bdb4 <GUI__IntersectRect>
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	699e      	ldr	r6, [r3, #24]
 80084fc:	4620      	mov	r0, r4
 80084fe:	b956      	cbnz	r6, 8008516 <WM__ClipAtParentBorders+0x4a>
 8008500:	f006 fae4 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008504:	4b07      	ldr	r3, [pc, #28]	; (8008524 <WM__ClipAtParentBorders+0x58>)
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4295      	cmp	r5, r2
 800850a:	d008      	beq.n	800851e <WM__ClipAtParentBorders+0x52>
 800850c:	6858      	ldr	r0, [r3, #4]
 800850e:	1a2b      	subs	r3, r5, r0
 8008510:	4258      	negs	r0, r3
 8008512:	4158      	adcs	r0, r3
 8008514:	e004      	b.n	8008520 <WM__ClipAtParentBorders+0x54>
 8008516:	f006 fad9 	bl	800eacc <GUI_ALLOC_UnlockH>
 800851a:	4635      	mov	r5, r6
 800851c:	e7d9      	b.n	80084d2 <WM__ClipAtParentBorders+0x6>
 800851e:	2001      	movs	r0, #1
 8008520:	b003      	add	sp, #12
 8008522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008524:	20022ff4 	.word	0x20022ff4

08008528 <WM__InsertWindowIntoList>:
 8008528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852a:	4604      	mov	r4, r0
 800852c:	b085      	sub	sp, #20
 800852e:	460d      	mov	r5, r1
 8008530:	2900      	cmp	r1, #0
 8008532:	d049      	beq.n	80085c8 <WM__InsertWindowIntoList+0xa0>
 8008534:	f006 fabc 	bl	800eab0 <GUI_ALLOC_LockH>
 8008538:	2300      	movs	r3, #0
 800853a:	6203      	str	r3, [r0, #32]
 800853c:	6185      	str	r5, [r0, #24]
 800853e:	9001      	str	r0, [sp, #4]
 8008540:	4628      	mov	r0, r5
 8008542:	f006 fab5 	bl	800eab0 <GUI_ALLOC_LockH>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	69c5      	ldr	r5, [r0, #28]
 800854a:	9002      	str	r0, [sp, #8]
 800854c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800854e:	b92d      	cbnz	r5, 800855c <WM__InsertWindowIntoList+0x34>
 8008550:	61c4      	str	r4, [r0, #28]
 8008552:	a801      	add	r0, sp, #4
 8008554:	f006 faba 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008558:	a802      	add	r0, sp, #8
 800855a:	e033      	b.n	80085c4 <WM__InsertWindowIntoList+0x9c>
 800855c:	4628      	mov	r0, r5
 800855e:	f006 faa7 	bl	800eab0 <GUI_ALLOC_LockH>
 8008562:	ae04      	add	r6, sp, #16
 8008564:	f007 0708 	and.w	r7, r7, #8
 8008568:	f846 0d04 	str.w	r0, [r6, #-4]!
 800856c:	b977      	cbnz	r7, 800858c <WM__InsertWindowIntoList+0x64>
 800856e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008570:	071a      	lsls	r2, r3, #28
 8008572:	d50b      	bpl.n	800858c <WM__InsertWindowIntoList+0x64>
 8008574:	9b01      	ldr	r3, [sp, #4]
 8008576:	621d      	str	r5, [r3, #32]
 8008578:	9b02      	ldr	r3, [sp, #8]
 800857a:	a801      	add	r0, sp, #4
 800857c:	61dc      	str	r4, [r3, #28]
 800857e:	f006 faa5 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008582:	a802      	add	r0, sp, #8
 8008584:	f006 faa2 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008588:	4630      	mov	r0, r6
 800858a:	e01b      	b.n	80085c4 <WM__InsertWindowIntoList+0x9c>
 800858c:	a802      	add	r0, sp, #8
 800858e:	f006 fa9d 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008592:	4630      	mov	r0, r6
 8008594:	f006 fa9a 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008598:	4628      	mov	r0, r5
 800859a:	f006 fa7f 	bl	800ea9c <GUI_ALLOC_h2p>
 800859e:	9003      	str	r0, [sp, #12]
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	6a1d      	ldr	r5, [r3, #32]
 80085a4:	b90d      	cbnz	r5, 80085aa <WM__InsertWindowIntoList+0x82>
 80085a6:	621c      	str	r4, [r3, #32]
 80085a8:	e00b      	b.n	80085c2 <WM__InsertWindowIntoList+0x9a>
 80085aa:	4628      	mov	r0, r5
 80085ac:	f006 fa76 	bl	800ea9c <GUI_ALLOC_h2p>
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	d1f4      	bne.n	800859e <WM__InsertWindowIntoList+0x76>
 80085b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80085b6:	071b      	lsls	r3, r3, #28
 80085b8:	d5f1      	bpl.n	800859e <WM__InsertWindowIntoList+0x76>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	621c      	str	r4, [r3, #32]
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	621d      	str	r5, [r3, #32]
 80085c2:	a801      	add	r0, sp, #4
 80085c4:	f006 fa82 	bl	800eacc <GUI_ALLOC_UnlockH>
 80085c8:	b005      	add	sp, #20
 80085ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085cc <WM__RemoveWindowFromList>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	f006 fa64 	bl	800ea9c <GUI_ALLOC_h2p>
 80085d4:	4605      	mov	r5, r0
 80085d6:	6980      	ldr	r0, [r0, #24]
 80085d8:	b1a8      	cbz	r0, 8008606 <WM__RemoveWindowFromList+0x3a>
 80085da:	f006 fa5f 	bl	800ea9c <GUI_ALLOC_h2p>
 80085de:	69c3      	ldr	r3, [r0, #28]
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	4606      	mov	r6, r0
 80085e4:	d105      	bne.n	80085f2 <WM__RemoveWindowFromList+0x26>
 80085e6:	4618      	mov	r0, r3
 80085e8:	f006 fa58 	bl	800ea9c <GUI_ALLOC_h2p>
 80085ec:	6a03      	ldr	r3, [r0, #32]
 80085ee:	61f3      	str	r3, [r6, #28]
 80085f0:	bd70      	pop	{r4, r5, r6, pc}
 80085f2:	b143      	cbz	r3, 8008606 <WM__RemoveWindowFromList+0x3a>
 80085f4:	4618      	mov	r0, r3
 80085f6:	f006 fa51 	bl	800ea9c <GUI_ALLOC_h2p>
 80085fa:	6a03      	ldr	r3, [r0, #32]
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	d1f8      	bne.n	80085f2 <WM__RemoveWindowFromList+0x26>
 8008600:	6a2b      	ldr	r3, [r5, #32]
 8008602:	6203      	str	r3, [r0, #32]
 8008604:	bd70      	pop	{r4, r5, r6, pc}
 8008606:	bd70      	pop	{r4, r5, r6, pc}

08008608 <WM__Client2Screen>:
 8008608:	4603      	mov	r3, r0
 800860a:	4608      	mov	r0, r1
 800860c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008610:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008614:	f004 befc 	b.w	800d410 <GUI_MoveRect>

08008618 <_SetClipRectUserIntersect>:
 8008618:	4b11      	ldr	r3, [pc, #68]	; (8008660 <_SetClipRectUserIntersect+0x48>)
 800861a:	b530      	push	{r4, r5, lr}
 800861c:	681c      	ldr	r4, [r3, #0]
 800861e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008620:	b085      	sub	sp, #20
 8008622:	4605      	mov	r5, r0
 8008624:	b1ba      	cbz	r2, 8008656 <_SetClipRectUserIntersect+0x3e>
 8008626:	6810      	ldr	r0, [r2, #0]
 8008628:	6851      	ldr	r1, [r2, #4]
 800862a:	ab02      	add	r3, sp, #8
 800862c:	c303      	stmia	r3!, {r0, r1}
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <_SetClipRectUserIntersect+0x4c>)
 8008630:	6818      	ldr	r0, [r3, #0]
 8008632:	b900      	cbnz	r0, 8008636 <_SetClipRectUserIntersect+0x1e>
 8008634:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008636:	f006 fa3b 	bl	800eab0 <GUI_ALLOC_LockH>
 800863a:	ac04      	add	r4, sp, #16
 800863c:	a902      	add	r1, sp, #8
 800863e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008642:	f7ff ffe1 	bl	8008608 <WM__Client2Screen>
 8008646:	4620      	mov	r0, r4
 8008648:	f006 fa40 	bl	800eacc <GUI_ALLOC_UnlockH>
 800864c:	a802      	add	r0, sp, #8
 800864e:	4629      	mov	r1, r5
 8008650:	f003 fbb0 	bl	800bdb4 <GUI__IntersectRect>
 8008654:	a802      	add	r0, sp, #8
 8008656:	f002 fd11 	bl	800b07c <LCD_SetClipRectEx>
 800865a:	b005      	add	sp, #20
 800865c:	bd30      	pop	{r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	20000038 	.word	0x20000038
 8008664:	20022ff0 	.word	0x20022ff0

08008668 <WM__ActivateClipRect>:
 8008668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800866a:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <WM__ActivateClipRect+0x3c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008672:	b10a      	cbz	r2, 8008678 <WM__ActivateClipRect+0x10>
 8008674:	480c      	ldr	r0, [pc, #48]	; (80086a8 <WM__ActivateClipRect+0x40>)
 8008676:	e011      	b.n	800869c <WM__ActivateClipRect+0x34>
 8008678:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800867a:	f006 fa19 	bl	800eab0 <GUI_ALLOC_LockH>
 800867e:	9001      	str	r0, [sp, #4]
 8008680:	c803      	ldmia	r0, {r0, r1}
 8008682:	ac02      	add	r4, sp, #8
 8008684:	e884 0003 	stmia.w	r4, {r0, r1}
 8008688:	a801      	add	r0, sp, #4
 800868a:	f006 fa1f 	bl	800eacc <GUI_ALLOC_UnlockH>
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <WM__ActivateClipRect+0x44>)
 8008690:	6819      	ldr	r1, [r3, #0]
 8008692:	b111      	cbz	r1, 800869a <WM__ActivateClipRect+0x32>
 8008694:	4620      	mov	r0, r4
 8008696:	f7ff ff19 	bl	80084cc <WM__ClipAtParentBorders>
 800869a:	4620      	mov	r0, r4
 800869c:	f7ff ffbc 	bl	8008618 <_SetClipRectUserIntersect>
 80086a0:	b004      	add	sp, #16
 80086a2:	bd10      	pop	{r4, pc}
 80086a4:	20000038 	.word	0x20000038
 80086a8:	20022a14 	.word	0x20022a14
 80086ac:	20022ff0 	.word	0x20022ff0

080086b0 <WM__IsWindow>:
 80086b0:	4b06      	ldr	r3, [pc, #24]	; (80086cc <WM__IsWindow+0x1c>)
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	b128      	cbz	r0, 80086c6 <WM__IsWindow+0x16>
 80086ba:	42a0      	cmp	r0, r4
 80086bc:	d004      	beq.n	80086c8 <WM__IsWindow+0x18>
 80086be:	f006 f9ed 	bl	800ea9c <GUI_ALLOC_h2p>
 80086c2:	6940      	ldr	r0, [r0, #20]
 80086c4:	e7f8      	b.n	80086b8 <WM__IsWindow+0x8>
 80086c6:	bd10      	pop	{r4, pc}
 80086c8:	2001      	movs	r0, #1
 80086ca:	bd10      	pop	{r4, pc}
 80086cc:	20023010 	.word	0x20023010

080086d0 <WM__InvalidateDrawAndDescs>:
 80086d0:	b513      	push	{r0, r1, r4, lr}
 80086d2:	4604      	mov	r4, r0
 80086d4:	b300      	cbz	r0, 8008718 <WM__InvalidateDrawAndDescs+0x48>
 80086d6:	f006 f9eb 	bl	800eab0 <GUI_ALLOC_LockH>
 80086da:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80086dc:	9001      	str	r0, [sp, #4]
 80086de:	0793      	lsls	r3, r2, #30
 80086e0:	d517      	bpl.n	8008712 <WM__InvalidateDrawAndDescs+0x42>
 80086e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80086e4:	b140      	cbz	r0, 80086f8 <WM__InvalidateDrawAndDescs+0x28>
 80086e6:	4b0d      	ldr	r3, [pc, #52]	; (800871c <WM__InvalidateDrawAndDescs+0x4c>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	42a3      	cmp	r3, r4
 80086ec:	d004      	beq.n	80086f8 <WM__InvalidateDrawAndDescs+0x28>
 80086ee:	f001 fe15 	bl	800a31c <GUI_MEMDEV_Delete>
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	625a      	str	r2, [r3, #36]	; 0x24
 80086f8:	4620      	mov	r0, r4
 80086fa:	f7ff fcac 	bl	8008056 <WM_GetFirstChild>
 80086fe:	4604      	mov	r4, r0
 8008700:	b13c      	cbz	r4, 8008712 <WM__InvalidateDrawAndDescs+0x42>
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff ffe4 	bl	80086d0 <WM__InvalidateDrawAndDescs>
 8008708:	4620      	mov	r0, r4
 800870a:	f006 f9c7 	bl	800ea9c <GUI_ALLOC_h2p>
 800870e:	6a04      	ldr	r4, [r0, #32]
 8008710:	e7f6      	b.n	8008700 <WM__InvalidateDrawAndDescs+0x30>
 8008712:	a801      	add	r0, sp, #4
 8008714:	f006 f9da 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008718:	b002      	add	sp, #8
 800871a:	bd10      	pop	{r4, pc}
 800871c:	20023038 	.word	0x20023038

08008720 <WM__RectIsNZ>:
 8008720:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008724:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	dc08      	bgt.n	800873e <WM__RectIsNZ+0x1e>
 800872c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008730:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8008734:	429a      	cmp	r2, r3
 8008736:	bfcc      	ite	gt
 8008738:	2000      	movgt	r0, #0
 800873a:	2001      	movle	r0, #1
 800873c:	4770      	bx	lr
 800873e:	2000      	movs	r0, #0
 8008740:	4770      	bx	lr
	...

08008744 <_Invalidate1Abs>:
 8008744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008746:	b085      	sub	sp, #20
 8008748:	4606      	mov	r6, r0
 800874a:	460d      	mov	r5, r1
 800874c:	4617      	mov	r7, r2
 800874e:	f006 f9a5 	bl	800ea9c <GUI_ALLOC_h2p>
 8008752:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008754:	9001      	str	r0, [sp, #4]
 8008756:	07a3      	lsls	r3, r4, #30
 8008758:	d534      	bpl.n	80087c4 <_Invalidate1Abs+0x80>
 800875a:	4628      	mov	r0, r5
 800875c:	f7ff ffe0 	bl	8008720 <WM__RectIsNZ>
 8008760:	2800      	cmp	r0, #0
 8008762:	d02f      	beq.n	80087c4 <_Invalidate1Abs+0x80>
 8008764:	f640 0301 	movw	r3, #2049	; 0x801
 8008768:	4023      	ands	r3, r4
 800876a:	2b01      	cmp	r3, #1
 800876c:	d02a      	beq.n	80087c4 <_Invalidate1Abs+0x80>
 800876e:	4630      	mov	r0, r6
 8008770:	f006 f99e 	bl	800eab0 <GUI_ALLOC_LockH>
 8008774:	ac02      	add	r4, sp, #8
 8008776:	4602      	mov	r2, r0
 8008778:	9001      	str	r0, [sp, #4]
 800877a:	4629      	mov	r1, r5
 800877c:	4620      	mov	r0, r4
 800877e:	f003 fae7 	bl	800bd50 <GUI__IntersectRects>
 8008782:	4620      	mov	r0, r4
 8008784:	f7ff ffcc 	bl	8008720 <WM__RectIsNZ>
 8008788:	b1c8      	cbz	r0, 80087be <_Invalidate1Abs+0x7a>
 800878a:	9b01      	ldr	r3, [sp, #4]
 800878c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800878e:	f244 0120 	movw	r1, #16416	; 0x4020
 8008792:	4031      	ands	r1, r6
 8008794:	f103 0508 	add.w	r5, r3, #8
 8008798:	b129      	cbz	r1, 80087a6 <_Invalidate1Abs+0x62>
 800879a:	4628      	mov	r0, r5
 800879c:	4629      	mov	r1, r5
 800879e:	4622      	mov	r2, r4
 80087a0:	f004 fe46 	bl	800d430 <GUI_MergeRect>
 80087a4:	e00b      	b.n	80087be <_Invalidate1Abs+0x7a>
 80087a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087aa:	433e      	orrs	r6, r7
 80087ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80087b0:	629e      	str	r6, [r3, #40]	; 0x28
 80087b2:	4b05      	ldr	r3, [pc, #20]	; (80087c8 <_Invalidate1Abs+0x84>)
 80087b4:	881a      	ldrh	r2, [r3, #0]
 80087b6:	3201      	adds	r2, #1
 80087b8:	801a      	strh	r2, [r3, #0]
 80087ba:	f003 fd0f 	bl	800c1dc <GUI_SignalEvent>
 80087be:	a801      	add	r0, sp, #4
 80087c0:	f006 f984 	bl	800eacc <GUI_ALLOC_UnlockH>
 80087c4:	b005      	add	sp, #20
 80087c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c8:	2002300c 	.word	0x2002300c

080087cc <WM__Invalidate1Abs>:
 80087cc:	2220      	movs	r2, #32
 80087ce:	f7ff bfb9 	b.w	8008744 <_Invalidate1Abs>

080087d2 <WM_InvalidateWindowAndDescsEx>:
 80087d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d4:	460f      	mov	r7, r1
 80087d6:	b085      	sub	sp, #20
 80087d8:	4615      	mov	r5, r2
 80087da:	4606      	mov	r6, r0
 80087dc:	b348      	cbz	r0, 8008832 <WM_InvalidateWindowAndDescsEx+0x60>
 80087de:	f006 f967 	bl	800eab0 <GUI_ALLOC_LockH>
 80087e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087e4:	ac04      	add	r4, sp, #16
 80087e6:	079b      	lsls	r3, r3, #30
 80087e8:	4602      	mov	r2, r0
 80087ea:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80087ee:	d403      	bmi.n	80087f8 <WM_InvalidateWindowAndDescsEx+0x26>
 80087f0:	4620      	mov	r0, r4
 80087f2:	f006 f96b 	bl	800eacc <GUI_ALLOC_UnlockH>
 80087f6:	e01c      	b.n	8008832 <WM_InvalidateWindowAndDescsEx+0x60>
 80087f8:	a802      	add	r0, sp, #8
 80087fa:	4639      	mov	r1, r7
 80087fc:	f003 faa8 	bl	800bd50 <GUI__IntersectRects>
 8008800:	2800      	cmp	r0, #0
 8008802:	d0f5      	beq.n	80087f0 <WM_InvalidateWindowAndDescsEx+0x1e>
 8008804:	4620      	mov	r0, r4
 8008806:	f006 f961 	bl	800eacc <GUI_ALLOC_UnlockH>
 800880a:	4630      	mov	r0, r6
 800880c:	a902      	add	r1, sp, #8
 800880e:	462a      	mov	r2, r5
 8008810:	f7ff ff98 	bl	8008744 <_Invalidate1Abs>
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff fc1e 	bl	8008056 <WM_GetFirstChild>
 800881a:	4604      	mov	r4, r0
 800881c:	b14c      	cbz	r4, 8008832 <WM_InvalidateWindowAndDescsEx+0x60>
 800881e:	4620      	mov	r0, r4
 8008820:	a902      	add	r1, sp, #8
 8008822:	462a      	mov	r2, r5
 8008824:	f7ff ffd5 	bl	80087d2 <WM_InvalidateWindowAndDescsEx>
 8008828:	4620      	mov	r0, r4
 800882a:	f006 f937 	bl	800ea9c <GUI_ALLOC_h2p>
 800882e:	6a04      	ldr	r4, [r0, #32]
 8008830:	e7f4      	b.n	800881c <WM_InvalidateWindowAndDescsEx+0x4a>
 8008832:	b005      	add	sp, #20
 8008834:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008836 <WM__InvalidateRect>:
 8008836:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800883a:	4680      	mov	r8, r0
 800883c:	4617      	mov	r7, r2
 800883e:	461d      	mov	r5, r3
 8008840:	460c      	mov	r4, r1
 8008842:	2900      	cmp	r1, #0
 8008844:	d030      	beq.n	80088a8 <WM__InvalidateRect+0x72>
 8008846:	4608      	mov	r0, r1
 8008848:	f006 f932 	bl	800eab0 <GUI_ALLOC_LockH>
 800884c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800884e:	9001      	str	r0, [sp, #4]
 8008850:	07b3      	lsls	r3, r6, #30
 8008852:	4602      	mov	r2, r0
 8008854:	d525      	bpl.n	80088a2 <WM__InvalidateRect+0x6c>
 8008856:	a802      	add	r0, sp, #8
 8008858:	4641      	mov	r1, r8
 800885a:	f003 fa79 	bl	800bd50 <GUI__IntersectRects>
 800885e:	b300      	cbz	r0, 80088a2 <WM__InvalidateRect+0x6c>
 8008860:	f640 0301 	movw	r3, #2049	; 0x801
 8008864:	4033      	ands	r3, r6
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <WM__InvalidateRect+0x44>
 800886a:	9b01      	ldr	r3, [sp, #4]
 800886c:	a802      	add	r0, sp, #8
 800886e:	6999      	ldr	r1, [r3, #24]
 8008870:	6a1a      	ldr	r2, [r3, #32]
 8008872:	462b      	mov	r3, r5
 8008874:	f7ff ffdf 	bl	8008836 <WM__InvalidateRect>
 8008878:	e004      	b.n	8008884 <WM__InvalidateRect+0x4e>
 800887a:	4620      	mov	r0, r4
 800887c:	a902      	add	r1, sp, #8
 800887e:	462a      	mov	r2, r5
 8008880:	f7ff ff60 	bl	8008744 <_Invalidate1Abs>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	69dc      	ldr	r4, [r3, #28]
 8008888:	b15c      	cbz	r4, 80088a2 <WM__InvalidateRect+0x6c>
 800888a:	42bc      	cmp	r4, r7
 800888c:	d009      	beq.n	80088a2 <WM__InvalidateRect+0x6c>
 800888e:	4620      	mov	r0, r4
 8008890:	a902      	add	r1, sp, #8
 8008892:	462a      	mov	r2, r5
 8008894:	f7ff ff9d 	bl	80087d2 <WM_InvalidateWindowAndDescsEx>
 8008898:	4620      	mov	r0, r4
 800889a:	f006 f8ff 	bl	800ea9c <GUI_ALLOC_h2p>
 800889e:	6a04      	ldr	r4, [r0, #32]
 80088a0:	e7f2      	b.n	8008888 <WM__InvalidateRect+0x52>
 80088a2:	a801      	add	r0, sp, #4
 80088a4:	f006 f912 	bl	800eacc <GUI_ALLOC_UnlockH>
 80088a8:	b004      	add	sp, #16
 80088aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080088ae <WM__InvalidateParent>:
 80088ae:	b570      	push	{r4, r5, r6, lr}
 80088b0:	4605      	mov	r5, r0
 80088b2:	4608      	mov	r0, r1
 80088b4:	460c      	mov	r4, r1
 80088b6:	4616      	mov	r6, r2
 80088b8:	f006 f8f0 	bl	800ea9c <GUI_ALLOC_h2p>
 80088bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80088be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80088c2:	4628      	mov	r0, r5
 80088c4:	4621      	mov	r1, r4
 80088c6:	4632      	mov	r2, r6
 80088c8:	bf0c      	ite	eq
 80088ca:	2320      	moveq	r3, #32
 80088cc:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 80088d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088d4:	f7ff bfaf 	b.w	8008836 <WM__InvalidateRect>

080088d8 <WM__InvalidateRectEx>:
 80088d8:	2320      	movs	r3, #32
 80088da:	f7ff bfac 	b.w	8008836 <WM__InvalidateRect>

080088de <WM__DetachWindow>:
 80088de:	b513      	push	{r0, r1, r4, lr}
 80088e0:	4604      	mov	r4, r0
 80088e2:	f006 f8e5 	bl	800eab0 <GUI_ALLOC_LockH>
 80088e6:	6981      	ldr	r1, [r0, #24]
 80088e8:	9001      	str	r0, [sp, #4]
 80088ea:	b141      	cbz	r1, 80088fe <WM__DetachWindow+0x20>
 80088ec:	6a02      	ldr	r2, [r0, #32]
 80088ee:	f7ff fff3 	bl	80088d8 <WM__InvalidateRectEx>
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff fe6a 	bl	80085cc <WM__RemoveWindowFromList>
 80088f8:	9b01      	ldr	r3, [sp, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	619a      	str	r2, [r3, #24]
 80088fe:	a801      	add	r0, sp, #4
 8008900:	f006 f8e4 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008904:	b002      	add	sp, #8
 8008906:	bd10      	pop	{r4, pc}

08008908 <WM__SendMsgNoData>:
 8008908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800890a:	ab04      	add	r3, sp, #16
 800890c:	9001      	str	r0, [sp, #4]
 800890e:	f843 1d10 	str.w	r1, [r3, #-16]!
 8008912:	4669      	mov	r1, sp
 8008914:	f7ff fa0a 	bl	8007d2c <WM__SendMessage>
 8008918:	b005      	add	sp, #20
 800891a:	f85d fb04 	ldr.w	pc, [sp], #4

0800891e <WM__GetClientRectWin>:
 800891e:	2300      	movs	r3, #0
 8008920:	800b      	strh	r3, [r1, #0]
 8008922:	8882      	ldrh	r2, [r0, #4]
 8008924:	804b      	strh	r3, [r1, #2]
 8008926:	8803      	ldrh	r3, [r0, #0]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	808b      	strh	r3, [r1, #4]
 800892c:	88c2      	ldrh	r2, [r0, #6]
 800892e:	8843      	ldrh	r3, [r0, #2]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	80cb      	strh	r3, [r1, #6]
 8008934:	4770      	bx	lr

08008936 <WM_InvalidateRect>:
 8008936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008938:	460f      	mov	r7, r1
 800893a:	b087      	sub	sp, #28
 800893c:	4605      	mov	r5, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	d033      	beq.n	80089aa <WM_InvalidateRect+0x74>
 8008942:	f006 f8b5 	bl	800eab0 <GUI_ALLOC_LockH>
 8008946:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008948:	9001      	str	r0, [sp, #4]
 800894a:	07b2      	lsls	r2, r6, #30
 800894c:	d52a      	bpl.n	80089a4 <WM_InvalidateRect+0x6e>
 800894e:	c803      	ldmia	r0, {r0, r1}
 8008950:	ac04      	add	r4, sp, #16
 8008952:	03f3      	lsls	r3, r6, #15
 8008954:	e884 0003 	stmia.w	r4, {r0, r1}
 8008958:	d502      	bpl.n	8008960 <WM_InvalidateRect+0x2a>
 800895a:	4628      	mov	r0, r5
 800895c:	f7ff feb8 	bl	80086d0 <WM__InvalidateDrawAndDescs>
 8008960:	b15f      	cbz	r7, 800897a <WM_InvalidateRect+0x44>
 8008962:	6838      	ldr	r0, [r7, #0]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	ab02      	add	r3, sp, #8
 8008968:	c303      	stmia	r3!, {r0, r1}
 800896a:	9801      	ldr	r0, [sp, #4]
 800896c:	a902      	add	r1, sp, #8
 800896e:	f7ff fe4b 	bl	8008608 <WM__Client2Screen>
 8008972:	4620      	mov	r0, r4
 8008974:	a902      	add	r1, sp, #8
 8008976:	f003 fa1d 	bl	800bdb4 <GUI__IntersectRect>
 800897a:	4620      	mov	r0, r4
 800897c:	4629      	mov	r1, r5
 800897e:	f7ff fda5 	bl	80084cc <WM__ClipAtParentBorders>
 8008982:	b178      	cbz	r0, 80089a4 <WM_InvalidateRect+0x6e>
 8008984:	f640 0301 	movw	r3, #2049	; 0x801
 8008988:	4033      	ands	r3, r6
 800898a:	2b01      	cmp	r3, #1
 800898c:	d106      	bne.n	800899c <WM_InvalidateRect+0x66>
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	4620      	mov	r0, r4
 8008992:	6999      	ldr	r1, [r3, #24]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	f7ff ff9f 	bl	80088d8 <WM__InvalidateRectEx>
 800899a:	e003      	b.n	80089a4 <WM_InvalidateRect+0x6e>
 800899c:	4628      	mov	r0, r5
 800899e:	4621      	mov	r1, r4
 80089a0:	f7ff ff14 	bl	80087cc <WM__Invalidate1Abs>
 80089a4:	a801      	add	r0, sp, #4
 80089a6:	f006 f891 	bl	800eacc <GUI_ALLOC_UnlockH>
 80089aa:	b007      	add	sp, #28
 80089ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ae <WM_InvalidateWindow>:
 80089ae:	2100      	movs	r1, #0
 80089b0:	f7ff bfc1 	b.w	8008936 <WM_InvalidateRect>

080089b4 <WM__GetTopLevelLayer>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4604      	mov	r4, r0
 80089b8:	f006 f870 	bl	800ea9c <GUI_ALLOC_h2p>
 80089bc:	6980      	ldr	r0, [r0, #24]
 80089be:	2800      	cmp	r0, #0
 80089c0:	d1f9      	bne.n	80089b6 <WM__GetTopLevelLayer+0x2>
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <WM__GetTopLevelLayer+0x24>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	4294      	cmp	r4, r2
 80089c8:	d005      	beq.n	80089d6 <WM__GetTopLevelLayer+0x22>
 80089ca:	6858      	ldr	r0, [r3, #4]
 80089cc:	4284      	cmp	r4, r0
 80089ce:	bf14      	ite	ne
 80089d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80089d4:	2001      	moveq	r0, #1
 80089d6:	bd10      	pop	{r4, pc}
 80089d8:	20022ff4 	.word	0x20022ff4

080089dc <WM__SelectTopLevelLayer>:
 80089dc:	b508      	push	{r3, lr}
 80089de:	f7ff ffe9 	bl	80089b4 <WM__GetTopLevelLayer>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	db03      	blt.n	80089ee <WM__SelectTopLevelLayer+0x12>
 80089e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089ea:	f004 bc09 	b.w	800d200 <GUI_SelectLayer>
 80089ee:	bd08      	pop	{r3, pc}

080089f0 <WM_SelectWindow>:
 80089f0:	4a0d      	ldr	r2, [pc, #52]	; (8008a28 <WM_SelectWindow+0x38>)
 80089f2:	6813      	ldr	r3, [r2, #0]
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80089f8:	4604      	mov	r4, r0
 80089fa:	4616      	mov	r6, r2
 80089fc:	b908      	cbnz	r0, 8008a02 <WM_SelectWindow+0x12>
 80089fe:	4a0b      	ldr	r2, [pc, #44]	; (8008a2c <WM_SelectWindow+0x3c>)
 8008a00:	6814      	ldr	r4, [r2, #0]
 8008a02:	649c      	str	r4, [r3, #72]	; 0x48
 8008a04:	4620      	mov	r0, r4
 8008a06:	f7ff ffe9 	bl	80089dc <WM__SelectTopLevelLayer>
 8008a0a:	f003 f839 	bl	800ba80 <LCD_SetClipRectMax>
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f006 f844 	bl	800ea9c <GUI_ALLOC_h2p>
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	f9b0 1000 	ldrsh.w	r1, [r0]
 8008a1a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8008a1e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008a20:	651a      	str	r2, [r3, #80]	; 0x50
 8008a22:	4628      	mov	r0, r5
 8008a24:	bd70      	pop	{r4, r5, r6, pc}
 8008a26:	bf00      	nop
 8008a28:	20000038 	.word	0x20000038
 8008a2c:	20023010 	.word	0x20023010

08008a30 <WM_CreateWindowAsChild>:
 8008a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a36:	469b      	mov	fp, r3
 8008a38:	4b4b      	ldr	r3, [pc, #300]	; (8008b68 <WM_CreateWindowAsChild+0x138>)
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	4688      	mov	r8, r1
 8008a3e:	4692      	mov	sl, r2
 8008a40:	681e      	ldr	r6, [r3, #0]
 8008a42:	bb65      	cbnz	r5, 8008a9e <WM_CreateWindowAsChild+0x6e>
 8008a44:	4b49      	ldr	r3, [pc, #292]	; (8008b6c <WM_CreateWindowAsChild+0x13c>)
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b363      	cbz	r3, 8008aa4 <WM_CreateWindowAsChild+0x74>
 8008a4a:	4b49      	ldr	r3, [pc, #292]	; (8008b70 <WM_CreateWindowAsChild+0x140>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	7c5a      	ldrb	r2, [r3, #17]
 8008a50:	4b48      	ldr	r3, [pc, #288]	; (8008b74 <WM_CreateWindowAsChild+0x144>)
 8008a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	d024      	beq.n	8008aa4 <WM_CreateWindowAsChild+0x74>
 8008a5a:	b31b      	cbz	r3, 8008aa4 <WM_CreateWindowAsChild+0x74>
 8008a5c:	461d      	mov	r5, r3
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f006 f826 	bl	800eab0 <GUI_ALLOC_LockH>
 8008a64:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008a68:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008a6c:	9001      	str	r0, [sp, #4]
 8008a6e:	4417      	add	r7, r2
 8008a70:	4498      	add	r8, r3
 8008a72:	f1ba 0f00 	cmp.w	sl, #0
 8008a76:	d105      	bne.n	8008a84 <WM_CreateWindowAsChild+0x54>
 8008a78:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 8008a7c:	ebc2 0a0a 	rsb	sl, r2, sl
 8008a80:	f10a 0a01 	add.w	sl, sl, #1
 8008a84:	f1bb 0f00 	cmp.w	fp, #0
 8008a88:	d105      	bne.n	8008a96 <WM_CreateWindowAsChild+0x66>
 8008a8a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 8008a8e:	ebc3 0b0b 	rsb	fp, r3, fp
 8008a92:	f10b 0b01 	add.w	fp, fp, #1
 8008a96:	a801      	add	r0, sp, #4
 8008a98:	f006 f818 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008a9c:	e002      	b.n	8008aa4 <WM_CreateWindowAsChild+0x74>
 8008a9e:	1c6b      	adds	r3, r5, #1
 8008aa0:	d1dd      	bne.n	8008a5e <WM_CreateWindowAsChild+0x2e>
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008aa6:	302c      	adds	r0, #44	; 0x2c
 8008aa8:	f006 fa4e 	bl	800ef48 <GUI_ALLOC_AllocZero>
 8008aac:	4604      	mov	r4, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d056      	beq.n	8008b60 <WM_CreateWindowAsChild+0x130>
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab4:	431e      	orrs	r6, r3
 8008ab6:	4b2d      	ldr	r3, [pc, #180]	; (8008b6c <WM_CreateWindowAsChild+0x13c>)
 8008ab8:	881a      	ldrh	r2, [r3, #0]
 8008aba:	3201      	adds	r2, #1
 8008abc:	801a      	strh	r2, [r3, #0]
 8008abe:	f005 fff7 	bl	800eab0 <GUI_ALLOC_LockH>
 8008ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac4:	6103      	str	r3, [r0, #16]
 8008ac6:	f10d 0908 	add.w	r9, sp, #8
 8008aca:	4b2b      	ldr	r3, [pc, #172]	; (8008b78 <WM_CreateWindowAsChild+0x148>)
 8008acc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008ace:	f849 0d08 	str.w	r0, [r9, #-8]!
 8008ad2:	4033      	ands	r3, r6
 8008ad4:	8007      	strh	r7, [r0, #0]
 8008ad6:	f8a0 8002 	strh.w	r8, [r0, #2]
 8008ada:	4457      	add	r7, sl
 8008adc:	44d8      	add	r8, fp
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	3f01      	subs	r7, #1
 8008ae2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008ae6:	6283      	str	r3, [r0, #40]	; 0x28
 8008ae8:	8087      	strh	r7, [r0, #4]
 8008aea:	f8a0 8006 	strh.w	r8, [r0, #6]
 8008aee:	4668      	mov	r0, sp
 8008af0:	f005 ffec 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008af4:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <WM_CreateWindowAsChild+0x14c>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	b148      	cbz	r0, 8008b0e <WM_CreateWindowAsChild+0xde>
 8008afa:	f005 ffcf 	bl	800ea9c <GUI_ALLOC_h2p>
 8008afe:	4607      	mov	r7, r0
 8008b00:	4620      	mov	r0, r4
 8008b02:	f005 ffcb 	bl	800ea9c <GUI_ALLOC_h2p>
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	6143      	str	r3, [r0, #20]
 8008b0a:	617c      	str	r4, [r7, #20]
 8008b0c:	e000      	b.n	8008b10 <WM_CreateWindowAsChild+0xe0>
 8008b0e:	601c      	str	r4, [r3, #0]
 8008b10:	4629      	mov	r1, r5
 8008b12:	4620      	mov	r0, r4
 8008b14:	f7ff fd08 	bl	8008528 <WM__InsertWindowIntoList>
 8008b18:	06b5      	lsls	r5, r6, #26
 8008b1a:	d502      	bpl.n	8008b22 <WM_CreateWindowAsChild+0xf2>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f7ff ff67 	bl	80089f0 <WM_SelectWindow>
 8008b22:	07f0      	lsls	r0, r6, #31
 8008b24:	d503      	bpl.n	8008b2e <WM_CreateWindowAsChild+0xfe>
 8008b26:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <WM_CreateWindowAsChild+0x150>)
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	3201      	adds	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	0671      	lsls	r1, r6, #25
 8008b30:	d502      	bpl.n	8008b38 <WM_CreateWindowAsChild+0x108>
 8008b32:	4620      	mov	r0, r4
 8008b34:	f007 fd54 	bl	80105e0 <WM_BringToBottom>
 8008b38:	07b2      	lsls	r2, r6, #30
 8008b3a:	d50d      	bpl.n	8008b58 <WM_CreateWindowAsChild+0x128>
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f005 ffb7 	bl	800eab0 <GUI_ALLOC_LockH>
 8008b42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008b44:	9000      	str	r0, [sp, #0]
 8008b46:	f043 0302 	orr.w	r3, r3, #2
 8008b4a:	6283      	str	r3, [r0, #40]	; 0x28
 8008b4c:	4668      	mov	r0, sp
 8008b4e:	f005 ffbd 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff ff2b 	bl	80089ae <WM_InvalidateWindow>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	f7ff fed4 	bl	8008908 <WM__SendMsgNoData>
 8008b60:	4620      	mov	r0, r4
 8008b62:	b003      	add	sp, #12
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	2002301c 	.word	0x2002301c
 8008b6c:	20022fec 	.word	0x20022fec
 8008b70:	20000038 	.word	0x20000038
 8008b74:	20022ff4 	.word	0x20022ff4
 8008b78:	003f3f9f 	.word	0x003f3f9f
 8008b7c:	20023010 	.word	0x20023010
 8008b80:	2002303c 	.word	0x2002303c

08008b84 <WM_DeleteWindow>:
 8008b84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b86:	4604      	mov	r4, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d06e      	beq.n	8008c6a <WM_DeleteWindow+0xe6>
 8008b8c:	f7ff fd90 	bl	80086b0 <WM__IsWindow>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d06a      	beq.n	8008c6a <WM_DeleteWindow+0xe6>
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7ff ff0d 	bl	80089b4 <WM__GetTopLevelLayer>
 8008b9a:	210b      	movs	r1, #11
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f7ff feb2 	bl	8008908 <WM__SendMsgNoData>
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f007 fc26 	bl	80103f6 <WM__DeleteAssocTimer>
 8008baa:	4620      	mov	r0, r4
 8008bac:	f005 ff80 	bl	800eab0 <GUI_ALLOC_LockH>
 8008bb0:	9001      	str	r0, [sp, #4]
 8008bb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008bb4:	b108      	cbz	r0, 8008bba <WM_DeleteWindow+0x36>
 8008bb6:	f001 fbb1 	bl	800a31c <GUI_MEMDEV_Delete>
 8008bba:	4b2d      	ldr	r3, [pc, #180]	; (8008c70 <WM_DeleteWindow+0xec>)
 8008bbc:	4a2d      	ldr	r2, [pc, #180]	; (8008c74 <WM_DeleteWindow+0xf0>)
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	6019      	str	r1, [r3, #0]
 8008bc2:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <WM_DeleteWindow+0xf4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008bca:	42a0      	cmp	r0, r4
 8008bcc:	bf08      	it	eq
 8008bce:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8008bd2:	4a2a      	ldr	r2, [pc, #168]	; (8008c7c <WM_DeleteWindow+0xf8>)
 8008bd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008bd8:	42a1      	cmp	r1, r4
 8008bda:	bf04      	itt	eq
 8008bdc:	2100      	moveq	r1, #0
 8008bde:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8008be2:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <WM_DeleteWindow+0xfc>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	b12b      	cbz	r3, 8008bf4 <WM_DeleteWindow+0x70>
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	42a2      	cmp	r2, r4
 8008bec:	bf04      	itt	eq
 8008bee:	2200      	moveq	r2, #0
 8008bf0:	605a      	streq	r2, [r3, #4]
 8008bf2:	e7f7      	b.n	8008be4 <WM_DeleteWindow+0x60>
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	2107      	movs	r1, #7
 8008bf8:	f7ff f98d 	bl	8007f16 <WM_NotifyParent>
 8008bfc:	9e01      	ldr	r6, [sp, #4]
 8008bfe:	69f0      	ldr	r0, [r6, #28]
 8008c00:	f7ff ffc0 	bl	8008b84 <WM_DeleteWindow>
 8008c04:	69f3      	ldr	r3, [r6, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f9      	bne.n	8008bfe <WM_DeleteWindow+0x7a>
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fe67 	bl	80088de <WM__DetachWindow>
 8008c10:	4b1c      	ldr	r3, [pc, #112]	; (8008c84 <WM_DeleteWindow+0x100>)
 8008c12:	6818      	ldr	r0, [r3, #0]
 8008c14:	b150      	cbz	r0, 8008c2c <WM_DeleteWindow+0xa8>
 8008c16:	f005 ff41 	bl	800ea9c <GUI_ALLOC_h2p>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	6940      	ldr	r0, [r0, #20]
 8008c1e:	42a0      	cmp	r0, r4
 8008c20:	d1f8      	bne.n	8008c14 <WM_DeleteWindow+0x90>
 8008c22:	4620      	mov	r0, r4
 8008c24:	f005 ff3a 	bl	800ea9c <GUI_ALLOC_h2p>
 8008c28:	6943      	ldr	r3, [r0, #20]
 8008c2a:	6173      	str	r3, [r6, #20]
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	07da      	lsls	r2, r3, #31
 8008c32:	d503      	bpl.n	8008c3c <WM_DeleteWindow+0xb8>
 8008c34:	4a14      	ldr	r2, [pc, #80]	; (8008c88 <WM_DeleteWindow+0x104>)
 8008c36:	6811      	ldr	r1, [r2, #0]
 8008c38:	3901      	subs	r1, #1
 8008c3a:	6011      	str	r1, [r2, #0]
 8008c3c:	069b      	lsls	r3, r3, #26
 8008c3e:	d503      	bpl.n	8008c48 <WM_DeleteWindow+0xc4>
 8008c40:	4b12      	ldr	r3, [pc, #72]	; (8008c8c <WM_DeleteWindow+0x108>)
 8008c42:	881a      	ldrh	r2, [r3, #0]
 8008c44:	3a01      	subs	r2, #1
 8008c46:	801a      	strh	r2, [r3, #0]
 8008c48:	a801      	add	r0, sp, #4
 8008c4a:	f005 ff3f 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008c4e:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <WM_DeleteWindow+0x10c>)
 8008c50:	881a      	ldrh	r2, [r3, #0]
 8008c52:	4620      	mov	r0, r4
 8008c54:	3a01      	subs	r2, #1
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	f005 ff58 	bl	800eb0c <GUI_ALLOC_Free>
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	db04      	blt.n	8008c6a <WM_DeleteWindow+0xe6>
 8008c60:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <WM_DeleteWindow+0x110>)
 8008c62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c66:	f7ff fec3 	bl	80089f0 <WM_SelectWindow>
 8008c6a:	b002      	add	sp, #8
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	bf00      	nop
 8008c70:	20022a24 	.word	0x20022a24
 8008c74:	20023004 	.word	0x20023004
 8008c78:	20023014 	.word	0x20023014
 8008c7c:	20023030 	.word	0x20023030
 8008c80:	20023028 	.word	0x20023028
 8008c84:	20023010 	.word	0x20023010
 8008c88:	2002303c 	.word	0x2002303c
 8008c8c:	2002300c 	.word	0x2002300c
 8008c90:	20022fec 	.word	0x20022fec
 8008c94:	20022ff4 	.word	0x20022ff4

08008c98 <WM__GetNextIVR>:
 8008c98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008c9c:	4f5d      	ldr	r7, [pc, #372]	; (8008e14 <WM__GetNextIVR+0x17c>)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f000 80b2 	beq.w	8008e0e <WM__GetNextIVR+0x176>
 8008caa:	4b5b      	ldr	r3, [pc, #364]	; (8008e18 <WM__GetNextIVR+0x180>)
 8008cac:	695a      	ldr	r2, [r3, #20]
 8008cae:	2a01      	cmp	r2, #1
 8008cb0:	461c      	mov	r4, r3
 8008cb2:	dd03      	ble.n	8008cbc <WM__GetNextIVR+0x24>
 8008cb4:	3a01      	subs	r2, #1
 8008cb6:	615a      	str	r2, [r3, #20]
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e0a8      	b.n	8008e0e <WM__GetNextIVR+0x176>
 8008cbc:	f104 0608 	add.w	r6, r4, #8
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	ad02      	add	r5, sp, #8
 8008cca:	6123      	str	r3, [r4, #16]
 8008ccc:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cd0:	b923      	cbnz	r3, 8008cdc <WM__GetNextIVR+0x44>
 8008cd2:	8823      	ldrh	r3, [r4, #0]
 8008cd4:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008cd8:	8863      	ldrh	r3, [r4, #2]
 8008cda:	e011      	b.n	8008d00 <WM__GetNextIVR+0x68>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	8962      	ldrh	r2, [r4, #10]
 8008ce0:	f8ad 200a 	strh.w	r2, [sp, #10]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8008cec:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008cf0:	b21b      	sxth	r3, r3
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	da06      	bge.n	8008d04 <WM__GetNextIVR+0x6c>
 8008cf6:	8823      	ldrh	r3, [r4, #0]
 8008cf8:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008cfc:	89e3      	ldrh	r3, [r4, #14]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008d04:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008d08:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8008d0c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8008e18 <WM__GetNextIVR+0x180>
 8008d10:	429a      	cmp	r2, r3
 8008d12:	dd04      	ble.n	8008d1e <WM__GetNextIVR+0x86>
 8008d14:	6963      	ldr	r3, [r4, #20]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	2000      	movs	r0, #0
 8008d1a:	6163      	str	r3, [r4, #20]
 8008d1c:	e077      	b.n	8008e0e <WM__GetNextIVR+0x176>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008d22:	f005 fec5 	bl	800eab0 <GUI_ALLOC_LockH>
 8008d26:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008d2a:	f9b8 3000 	ldrsh.w	r3, [r8]
 8008d2e:	9001      	str	r0, [sp, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d11c      	bne.n	8008d6e <WM__GetNextIVR+0xd6>
 8008d34:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8008d38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d3c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008d40:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d44:	4b33      	ldr	r3, [pc, #204]	; (8008e14 <WM__GetNextIVR+0x17c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d4a:	b15a      	cbz	r2, 8008d64 <WM__GetNextIVR+0xcc>
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f005 fea5 	bl	800ea9c <GUI_ALLOC_h2p>
 8008d52:	4680      	mov	r8, r0
 8008d54:	2200      	movs	r2, #0
 8008d56:	6a00      	ldr	r0, [r0, #32]
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7ff f9cb 	bl	80080f4 <_Findy1>
 8008d5e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008d62:	e7f2      	b.n	8008d4a <WM__GetNextIVR+0xb2>
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	4629      	mov	r1, r5
 8008d68:	69d8      	ldr	r0, [r3, #28]
 8008d6a:	f7ff f9c3 	bl	80080f4 <_Findy1>
 8008d6e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008d72:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d7a:	b16a      	cbz	r2, 8008d98 <WM__GetNextIVR+0x100>
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	f005 fe8d 	bl	800ea9c <GUI_ALLOC_h2p>
 8008d82:	4629      	mov	r1, r5
 8008d84:	4680      	mov	r8, r0
 8008d86:	2200      	movs	r2, #0
 8008d88:	6a00      	ldr	r0, [r0, #32]
 8008d8a:	f7ff fa09 	bl	80081a0 <_Findx0>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d1ed      	bne.n	8008d6e <WM__GetNextIVR+0xd6>
 8008d92:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008d96:	e7f0      	b.n	8008d7a <WM__GetNextIVR+0xe2>
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	69d8      	ldr	r0, [r3, #28]
 8008d9e:	f7ff f9ff 	bl	80081a0 <_Findx0>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d1e3      	bne.n	8008d6e <WM__GetNextIVR+0xd6>
 8008da6:	88a3      	ldrh	r3, [r4, #4]
 8008da8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8008dac:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008db0:	b21b      	sxth	r3, r3
 8008db2:	429a      	cmp	r2, r3
 8008db4:	dd07      	ble.n	8008dc6 <WM__GetNextIVR+0x12e>
 8008db6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008dba:	e886 0003 	stmia.w	r6, {r0, r1}
 8008dbe:	a801      	add	r0, sp, #4
 8008dc0:	f005 fe84 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008dc4:	e797      	b.n	8008cf6 <WM__GetNextIVR+0x5e>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dca:	b152      	cbz	r2, 8008de2 <WM__GetNextIVR+0x14a>
 8008dcc:	4610      	mov	r0, r2
 8008dce:	f005 fe65 	bl	800ea9c <GUI_ALLOC_h2p>
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	6a00      	ldr	r0, [r0, #32]
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7ff fa25 	bl	8008228 <_Findx1>
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	e7f3      	b.n	8008dca <WM__GetNextIVR+0x132>
 8008de2:	af04      	add	r7, sp, #16
 8008de4:	4629      	mov	r1, r5
 8008de6:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8008dea:	69d8      	ldr	r0, [r3, #28]
 8008dec:	f7ff fa1c 	bl	8008228 <_Findx1>
 8008df0:	4638      	mov	r0, r7
 8008df2:	f005 fe6b 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	dc89      	bgt.n	8008d14 <WM__GetNextIVR+0x7c>
 8008e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008e04:	e886 0003 	stmia.w	r6, {r0, r1}
 8008e08:	f7ff fc2e 	bl	8008668 <WM__ActivateClipRect>
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	b004      	add	sp, #16
 8008e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e14:	20000038 	.word	0x20000038
 8008e18:	20022a0c 	.word	0x20022a0c

08008e1c <WM__InitIVRSearch>:
 8008e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e20:	4f39      	ldr	r7, [pc, #228]	; (8008f08 <WM__InitIVRSearch+0xec>)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008e28:	b086      	sub	sp, #24
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	b912      	cbnz	r2, 8008e34 <WM__InitIVRSearch+0x18>
 8008e2e:	f7ff fc1b 	bl	8008668 <WM__ActivateClipRect>
 8008e32:	e064      	b.n	8008efe <WM__InitIVRSearch+0xe2>
 8008e34:	4d35      	ldr	r5, [pc, #212]	; (8008f0c <WM__InitIVRSearch+0xf0>)
 8008e36:	696a      	ldr	r2, [r5, #20]
 8008e38:	3201      	adds	r2, #1
 8008e3a:	2a01      	cmp	r2, #1
 8008e3c:	616a      	str	r2, [r5, #20]
 8008e3e:	462c      	mov	r4, r5
 8008e40:	dc5d      	bgt.n	8008efe <WM__InitIVRSearch+0xe2>
 8008e42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008e44:	f005 fe34 	bl	800eab0 <GUI_ALLOC_LockH>
 8008e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e4c:	612a      	str	r2, [r5, #16]
 8008e4e:	4a30      	ldr	r2, [pc, #192]	; (8008f10 <WM__InitIVRSearch+0xf4>)
 8008e50:	9000      	str	r0, [sp, #0]
 8008e52:	7812      	ldrb	r2, [r2, #0]
 8008e54:	b12a      	cbz	r2, 8008e62 <WM__InitIVRSearch+0x46>
 8008e56:	f100 0308 	add.w	r3, r0, #8
 8008e5a:	aa02      	add	r2, sp, #8
 8008e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e60:	e005      	b.n	8008e6e <WM__InitIVRSearch+0x52>
 8008e62:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008e64:	f012 0802 	ands.w	r8, r2, #2
 8008e68:	d00a      	beq.n	8008e80 <WM__InitIVRSearch+0x64>
 8008e6a:	c803      	ldmia	r0, {r0, r1}
 8008e6c:	aa02      	add	r2, sp, #8
 8008e6e:	e882 0003 	stmia.w	r2, {r0, r1}
 8008e72:	ad02      	add	r5, sp, #8
 8008e74:	b166      	cbz	r6, 8008e90 <WM__InitIVRSearch+0x74>
 8008e76:	4628      	mov	r0, r5
 8008e78:	4631      	mov	r1, r6
 8008e7a:	f002 ff9b 	bl	800bdb4 <GUI__IntersectRect>
 8008e7e:	e007      	b.n	8008e90 <WM__InitIVRSearch+0x74>
 8008e80:	696b      	ldr	r3, [r5, #20]
 8008e82:	4668      	mov	r0, sp
 8008e84:	3b01      	subs	r3, #1
 8008e86:	616b      	str	r3, [r5, #20]
 8008e88:	f005 fe20 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	e037      	b.n	8008f00 <WM__InitIVRSearch+0xe4>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	4e20      	ldr	r6, [pc, #128]	; (8008f14 <WM__InitIVRSearch+0xf8>)
 8008e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e96:	b1c2      	cbz	r2, 8008eca <WM__InitIVRSearch+0xae>
 8008e98:	9b00      	ldr	r3, [sp, #0]
 8008e9a:	6810      	ldr	r0, [r2, #0]
 8008e9c:	6851      	ldr	r1, [r2, #4]
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	ab04      	add	r3, sp, #16
 8008ea2:	c303      	stmia	r3!, {r0, r1}
 8008ea4:	6833      	ldr	r3, [r6, #0]
 8008ea6:	b133      	cbz	r3, 8008eb6 <WM__InitIVRSearch+0x9a>
 8008ea8:	a801      	add	r0, sp, #4
 8008eaa:	f005 fe0f 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008eae:	6830      	ldr	r0, [r6, #0]
 8008eb0:	f005 fdfe 	bl	800eab0 <GUI_ALLOC_LockH>
 8008eb4:	9001      	str	r0, [sp, #4]
 8008eb6:	9801      	ldr	r0, [sp, #4]
 8008eb8:	a904      	add	r1, sp, #16
 8008eba:	f7ff fba5 	bl	8008608 <WM__Client2Screen>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	f002 ff77 	bl	800bdb4 <GUI__IntersectRect>
 8008ec6:	a801      	add	r0, sp, #4
 8008ec8:	e000      	b.n	8008ecc <WM__InitIVRSearch+0xb0>
 8008eca:	4668      	mov	r0, sp
 8008ecc:	f005 fdfe 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008ed0:	6831      	ldr	r1, [r6, #0]
 8008ed2:	b119      	cbz	r1, 8008edc <WM__InitIVRSearch+0xc0>
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7ff faf9 	bl	80084cc <WM__ClipAtParentBorders>
 8008eda:	b128      	cbz	r0, 8008ee8 <WM__InitIVRSearch+0xcc>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	4628      	mov	r0, r5
 8008ee0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008ee2:	f7ff faf3 	bl	80084cc <WM__ClipAtParentBorders>
 8008ee6:	b918      	cbnz	r0, 8008ef0 <WM__InitIVRSearch+0xd4>
 8008ee8:	6963      	ldr	r3, [r4, #20]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6163      	str	r3, [r4, #20]
 8008eee:	e007      	b.n	8008f00 <WM__InitIVRSearch+0xe4>
 8008ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ef4:	e884 0003 	stmia.w	r4, {r0, r1}
 8008ef8:	f7ff fece 	bl	8008c98 <WM__GetNextIVR>
 8008efc:	e000      	b.n	8008f00 <WM__InitIVRSearch+0xe4>
 8008efe:	2001      	movs	r0, #1
 8008f00:	b006      	add	sp, #24
 8008f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f06:	bf00      	nop
 8008f08:	20000038 	.word	0x20000038
 8008f0c:	20022a0c 	.word	0x20022a0c
 8008f10:	20023019 	.word	0x20023019
 8008f14:	20022ff0 	.word	0x20022ff0

08008f18 <WM_SetDefault>:
 8008f18:	b508      	push	{r3, lr}
 8008f1a:	f003 fa59 	bl	800c3d0 <GL_SetDefault>
 8008f1e:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <WM_SetDefault+0x10>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44
 8008f26:	bd08      	pop	{r3, pc}
 8008f28:	20000038 	.word	0x20000038

08008f2c <WM__Paint1>:
 8008f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2e:	b089      	sub	sp, #36	; 0x24
 8008f30:	4604      	mov	r4, r0
 8008f32:	f005 fdbd 	bl	800eab0 <GUI_ALLOC_LockH>
 8008f36:	6907      	ldr	r7, [r0, #16]
 8008f38:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008f3a:	9001      	str	r0, [sp, #4]
 8008f3c:	3008      	adds	r0, #8
 8008f3e:	c803      	ldmia	r0, {r0, r1}
 8008f40:	ad02      	add	r5, sp, #8
 8008f42:	e885 0003 	stmia.w	r5, {r0, r1}
 8008f46:	a801      	add	r0, sp, #4
 8008f48:	f005 fdc0 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008f4c:	2f00      	cmp	r7, #0
 8008f4e:	d031      	beq.n	8008fb4 <WM__Paint1+0x88>
 8008f50:	07b3      	lsls	r3, r6, #30
 8008f52:	d52f      	bpl.n	8008fb4 <WM__Paint1+0x88>
 8008f54:	4620      	mov	r0, r4
 8008f56:	212e      	movs	r1, #46	; 0x2e
 8008f58:	f7fe ff60 	bl	8007e1c <WM_SendMessageNoPara>
 8008f5c:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <WM__Paint1+0x8c>)
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8008f64:	f102 0201 	add.w	r2, r2, #1
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	461e      	mov	r6, r3
 8008f6c:	d00a      	beq.n	8008f84 <WM__Paint1+0x58>
 8008f6e:	230f      	movs	r3, #15
 8008f70:	9405      	str	r4, [sp, #20]
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9507      	str	r5, [sp, #28]
 8008f76:	f7ff ffcf 	bl	8008f18 <WM_SetDefault>
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	f7fe fed5 	bl	8007d2c <WM__SendMessage>
 8008f82:	e010      	b.n	8008fa6 <WM__Paint1+0x7a>
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7ff ff49 	bl	8008e1c <WM__InitIVRSearch>
 8008f8a:	b160      	cbz	r0, 8008fa6 <WM__Paint1+0x7a>
 8008f8c:	230f      	movs	r3, #15
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	9405      	str	r4, [sp, #20]
 8008f92:	9507      	str	r5, [sp, #28]
 8008f94:	f7ff ffc0 	bl	8008f18 <WM_SetDefault>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	a904      	add	r1, sp, #16
 8008f9c:	f7fe fec6 	bl	8007d2c <WM__SendMessage>
 8008fa0:	f7ff fe7a 	bl	8008c98 <WM__GetNextIVR>
 8008fa4:	e7f1      	b.n	8008f8a <WM__Paint1+0x5e>
 8008fa6:	7833      	ldrb	r3, [r6, #0]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	3b01      	subs	r3, #1
 8008fac:	212f      	movs	r1, #47	; 0x2f
 8008fae:	7033      	strb	r3, [r6, #0]
 8008fb0:	f7fe ff34 	bl	8007e1c <WM_SendMessageNoPara>
 8008fb4:	b009      	add	sp, #36	; 0x24
 8008fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb8:	20023019 	.word	0x20023019

08008fbc <WM__Paint>:
 8008fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	ac06      	add	r4, sp, #24
 8008fc2:	9003      	str	r0, [sp, #12]
 8008fc4:	f005 fd74 	bl	800eab0 <GUI_ALLOC_LockH>
 8008fc8:	f100 0208 	add.w	r2, r0, #8
 8008fcc:	4603      	mov	r3, r0
 8008fce:	9005      	str	r0, [sp, #20]
 8008fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fd4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008fd6:	699e      	ldr	r6, [r3, #24]
 8008fd8:	691f      	ldr	r7, [r3, #16]
 8008fda:	e884 0003 	stmia.w	r4, {r0, r1}
 8008fde:	a805      	add	r0, sp, #20
 8008fe0:	f005 fd74 	bl	800eacc <GUI_ALLOC_UnlockH>
 8008fe4:	f244 0320 	movw	r3, #16416	; 0x4020
 8008fe8:	402b      	ands	r3, r5
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d034      	beq.n	8009058 <WM__Paint+0x9c>
 8008fee:	b1bf      	cbz	r7, 8009020 <WM__Paint+0x64>
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	9903      	ldr	r1, [sp, #12]
 8008ff4:	f7ff fa6a 	bl	80084cc <WM__ClipAtParentBorders>
 8008ff8:	b190      	cbz	r0, 8009020 <WM__Paint+0x64>
 8008ffa:	9803      	ldr	r0, [sp, #12]
 8008ffc:	f7ff fcf8 	bl	80089f0 <WM_SelectWindow>
 8009000:	0769      	lsls	r1, r5, #29
 8009002:	d50f      	bpl.n	8009024 <WM__Paint+0x68>
 8009004:	b126      	cbz	r6, 8009010 <WM__Paint+0x54>
 8009006:	f005 0501 	and.w	r5, r5, #1
 800900a:	f085 0501 	eor.w	r5, r5, #1
 800900e:	e000      	b.n	8009012 <WM__Paint+0x56>
 8009010:	2501      	movs	r5, #1
 8009012:	9500      	str	r5, [sp, #0]
 8009014:	4620      	mov	r0, r4
 8009016:	4912      	ldr	r1, [pc, #72]	; (8009060 <WM__Paint+0xa4>)
 8009018:	aa03      	add	r2, sp, #12
 800901a:	2300      	movs	r3, #0
 800901c:	f000 fb14 	bl	8009648 <GUI_MEMDEV_Draw>
 8009020:	2400      	movs	r4, #0
 8009022:	e003      	b.n	800902c <WM__Paint+0x70>
 8009024:	9803      	ldr	r0, [sp, #12]
 8009026:	f7ff f9e1 	bl	80083ec <WM__PaintWinAndOverlays>
 800902a:	2401      	movs	r4, #1
 800902c:	9803      	ldr	r0, [sp, #12]
 800902e:	f005 fd3f 	bl	800eab0 <GUI_ALLOC_LockH>
 8009032:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009034:	9005      	str	r0, [sp, #20]
 8009036:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800903a:	f023 0320 	bic.w	r3, r3, #32
 800903e:	0492      	lsls	r2, r2, #18
 8009040:	bf48      	it	mi
 8009042:	f043 0304 	orrmi.w	r3, r3, #4
 8009046:	6283      	str	r3, [r0, #40]	; 0x28
 8009048:	a805      	add	r0, sp, #20
 800904a:	f005 fd3f 	bl	800eacc <GUI_ALLOC_UnlockH>
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <WM__Paint+0xa8>)
 8009050:	881a      	ldrh	r2, [r3, #0]
 8009052:	3a01      	subs	r2, #1
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	e000      	b.n	800905a <WM__Paint+0x9e>
 8009058:	461c      	mov	r4, r3
 800905a:	4620      	mov	r0, r4
 800905c:	b009      	add	sp, #36	; 0x24
 800905e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009060:	08008465 	.word	0x08008465
 8009064:	2002300c 	.word	0x2002300c

08009068 <WM_Exec>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	4b4c      	ldr	r3, [pc, #304]	; (80091a0 <WM_Exec+0x138>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	b09f      	sub	sp, #124	; 0x7c
 8009072:	b103      	cbz	r3, 8009076 <WM_Exec+0xe>
 8009074:	4798      	blx	r3
 8009076:	2600      	movs	r6, #0
 8009078:	4d4a      	ldr	r5, [pc, #296]	; (80091a4 <WM_Exec+0x13c>)
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b1db      	cbz	r3, 80090b6 <WM_Exec+0x4e>
 800907e:	4b4a      	ldr	r3, [pc, #296]	; (80091a8 <WM_Exec+0x140>)
 8009080:	681c      	ldr	r4, [r3, #0]
 8009082:	b1bc      	cbz	r4, 80090b4 <WM_Exec+0x4c>
 8009084:	4620      	mov	r0, r4
 8009086:	f005 fd13 	bl	800eab0 <GUI_ALLOC_LockH>
 800908a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800908c:	6947      	ldr	r7, [r0, #20]
 800908e:	ab1e      	add	r3, sp, #120	; 0x78
 8009090:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009094:	f843 0d70 	str.w	r0, [r3, #-112]!
 8009098:	d007      	beq.n	80090aa <WM_Exec+0x42>
 800909a:	4618      	mov	r0, r3
 800909c:	f005 fd16 	bl	800eacc <GUI_ALLOC_UnlockH>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f7ff fd6f 	bl	8008b84 <WM_DeleteWindow>
 80090a6:	463c      	mov	r4, r7
 80090a8:	e7eb      	b.n	8009082 <WM_Exec+0x1a>
 80090aa:	4618      	mov	r0, r3
 80090ac:	463c      	mov	r4, r7
 80090ae:	f005 fd0d 	bl	800eacc <GUI_ALLOC_UnlockH>
 80090b2:	e7e6      	b.n	8009082 <WM_Exec+0x1a>
 80090b4:	602c      	str	r4, [r5, #0]
 80090b6:	4b3d      	ldr	r3, [pc, #244]	; (80091ac <WM_Exec+0x144>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	b103      	cbz	r3, 80090be <WM_Exec+0x56>
 80090bc:	4798      	blx	r3
 80090be:	4b3c      	ldr	r3, [pc, #240]	; (80091b0 <WM_Exec+0x148>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	b92b      	cbnz	r3, 80090d0 <WM_Exec+0x68>
 80090c4:	4f3b      	ldr	r7, [pc, #236]	; (80091b4 <WM_Exec+0x14c>)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80090cc:	b143      	cbz	r3, 80090e0 <WM_Exec+0x78>
 80090ce:	e003      	b.n	80090d8 <WM_Exec+0x70>
 80090d0:	4798      	blx	r3
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d0f6      	beq.n	80090c4 <WM_Exec+0x5c>
 80090d6:	e058      	b.n	800918a <WM_Exec+0x122>
 80090d8:	f004 f97e 	bl	800d3d8 <GUI_PollKeyMsg>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d154      	bne.n	800918a <WM_Exec+0x122>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	f893 5054 	ldrb.w	r5, [r3, #84]	; 0x54
 80090e6:	b14d      	cbz	r5, 80090fc <WM_Exec+0x94>
 80090e8:	4b33      	ldr	r3, [pc, #204]	; (80091b8 <WM_Exec+0x150>)
 80090ea:	881d      	ldrh	r5, [r3, #0]
 80090ec:	b135      	cbz	r5, 80090fc <WM_Exec+0x94>
 80090ee:	4b33      	ldr	r3, [pc, #204]	; (80091bc <WM_Exec+0x154>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d04b      	beq.n	800918e <WM_Exec+0x126>
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4798      	blx	r3
 80090fa:	2501      	movs	r5, #1
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009102:	b913      	cbnz	r3, 800910a <WM_Exec+0xa2>
 8009104:	2d00      	cmp	r5, #0
 8009106:	d137      	bne.n	8009178 <WM_Exec+0x110>
 8009108:	e045      	b.n	8009196 <WM_Exec+0x12e>
 800910a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80091b8 <WM_Exec+0x150>
 800910e:	f8b8 3000 	ldrh.w	r3, [r8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d0f6      	beq.n	8009104 <WM_Exec+0x9c>
 8009116:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80091c0 <WM_Exec+0x158>
 800911a:	f8d9 4000 	ldr.w	r4, [r9]
 800911e:	b90c      	cbnz	r4, 8009124 <WM_Exec+0xbc>
 8009120:	4b21      	ldr	r3, [pc, #132]	; (80091a8 <WM_Exec+0x140>)
 8009122:	681c      	ldr	r4, [r3, #0]
 8009124:	a802      	add	r0, sp, #8
 8009126:	f004 f88d 	bl	800d244 <GUI_SaveContext_W>
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 8009130:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8009134:	b914      	cbnz	r4, 800913c <WM_Exec+0xd4>
 8009136:	2400      	movs	r4, #0
 8009138:	e00d      	b.n	8009156 <WM_Exec+0xee>
 800913a:	b963      	cbnz	r3, 8009156 <WM_Exec+0xee>
 800913c:	4620      	mov	r0, r4
 800913e:	f7ff ff3d 	bl	8008fbc <WM__Paint>
 8009142:	4603      	mov	r3, r0
 8009144:	4620      	mov	r0, r4
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	f005 fca8 	bl	800ea9c <GUI_ALLOC_h2p>
 800914c:	6944      	ldr	r4, [r0, #20]
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	2c00      	cmp	r4, #0
 8009152:	d1f2      	bne.n	800913a <WM_Exec+0xd2>
 8009154:	e7ef      	b.n	8009136 <WM_Exec+0xce>
 8009156:	4658      	mov	r0, fp
 8009158:	f8c9 4000 	str.w	r4, [r9]
 800915c:	f003 f95a 	bl	800c414 <GUI_SetColor>
 8009160:	4650      	mov	r0, sl
 8009162:	f003 f955 	bl	800c410 <GUI_SetBkColor>
 8009166:	a802      	add	r0, sp, #8
 8009168:	f004 f876 	bl	800d258 <GUI_RestoreContext>
 800916c:	f8b8 3000 	ldrh.w	r3, [r8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0c7      	beq.n	8009104 <WM_Exec+0x9c>
 8009174:	2601      	movs	r6, #1
 8009176:	e7c1      	b.n	80090fc <WM_Exec+0x94>
 8009178:	4b10      	ldr	r3, [pc, #64]	; (80091bc <WM_Exec+0x154>)
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	b110      	cbz	r0, 8009184 <WM_Exec+0x11c>
 800917e:	6843      	ldr	r3, [r0, #4]
 8009180:	4798      	blx	r3
 8009182:	e008      	b.n	8009196 <WM_Exec+0x12e>
 8009184:	f002 fddc 	bl	800bd40 <GUI__ManageCache>
 8009188:	e005      	b.n	8009196 <WM_Exec+0x12e>
 800918a:	2601      	movs	r6, #1
 800918c:	e774      	b.n	8009078 <WM_Exec+0x10>
 800918e:	2001      	movs	r0, #1
 8009190:	f002 fdd6 	bl	800bd40 <GUI__ManageCache>
 8009194:	e7b1      	b.n	80090fa <WM_Exec+0x92>
 8009196:	4630      	mov	r0, r6
 8009198:	b01f      	add	sp, #124	; 0x7c
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	bf00      	nop
 80091a0:	20023000 	.word	0x20023000
 80091a4:	20022a08 	.word	0x20022a08
 80091a8:	20023010 	.word	0x20023010
 80091ac:	20022ffc 	.word	0x20022ffc
 80091b0:	20023080 	.word	0x20023080
 80091b4:	20000038 	.word	0x20000038
 80091b8:	2002300c 	.word	0x2002300c
 80091bc:	2002302c 	.word	0x2002302c
 80091c0:	20022a24 	.word	0x20022a24

080091c4 <WM_Activate>:
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <WM_Activate+0xc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80091ce:	4770      	bx	lr
 80091d0:	20000038 	.word	0x20000038

080091d4 <WM_Deactivate>:
 80091d4:	4b03      	ldr	r3, [pc, #12]	; (80091e4 <WM_Deactivate+0x10>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80091de:	f002 bc4f 	b.w	800ba80 <LCD_SetClipRectMax>
 80091e2:	bf00      	nop
 80091e4:	20000038 	.word	0x20000038

080091e8 <WM_DefaultProc>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	4604      	mov	r4, r0
 80091ec:	6840      	ldr	r0, [r0, #4]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	68e1      	ldr	r1, [r4, #12]
 80091f2:	2b17      	cmp	r3, #23
 80091f4:	d00f      	beq.n	8009216 <WM_DefaultProc+0x2e>
 80091f6:	dc06      	bgt.n	8009206 <WM_DefaultProc+0x1e>
 80091f8:	2b0e      	cmp	r3, #14
 80091fa:	d00e      	beq.n	800921a <WM_DefaultProc+0x32>
 80091fc:	2b14      	cmp	r3, #20
 80091fe:	d114      	bne.n	800922a <WM_DefaultProc+0x42>
 8009200:	f007 f9be 	bl	8010580 <WM__GetClientRectEx>
 8009204:	e011      	b.n	800922a <WM_DefaultProc+0x42>
 8009206:	2b22      	cmp	r3, #34	; 0x22
 8009208:	d00c      	beq.n	8009224 <WM_DefaultProc+0x3c>
 800920a:	2b28      	cmp	r3, #40	; 0x28
 800920c:	d10d      	bne.n	800922a <WM_DefaultProc+0x42>
 800920e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009212:	f7ff bbcc 	b.w	80089ae <WM_InvalidateWindow>
 8009216:	60e0      	str	r0, [r4, #12]
 8009218:	bd10      	pop	{r4, pc}
 800921a:	4621      	mov	r1, r4
 800921c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009220:	f007 b90e 	b.w	8010440 <WM_SendToParent>
 8009224:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009228:	e000      	b.n	800922c <WM_DefaultProc+0x44>
 800922a:	2300      	movs	r3, #0
 800922c:	60e3      	str	r3, [r4, #12]
 800922e:	bd10      	pop	{r4, pc}

08009230 <_cbBackWin>:
 8009230:	6803      	ldr	r3, [r0, #0]
 8009232:	2b0e      	cmp	r3, #14
 8009234:	b510      	push	{r4, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	d002      	beq.n	8009240 <_cbBackWin+0x10>
 800923a:	2b0f      	cmp	r3, #15
 800923c:	d009      	beq.n	8009252 <_cbBackWin+0x22>
 800923e:	e020      	b.n	8009282 <_cbBackWin+0x52>
 8009240:	68c3      	ldr	r3, [r0, #12]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	2a01      	cmp	r2, #1
 8009246:	d121      	bne.n	800928c <_cbBackWin+0x5c>
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924e:	f004 b8bb 	b.w	800d3c8 <GUI_StoreKey>
 8009252:	4a0f      	ldr	r2, [pc, #60]	; (8009290 <_cbBackWin+0x60>)
 8009254:	6843      	ldr	r3, [r0, #4]
 8009256:	6811      	ldr	r1, [r2, #0]
 8009258:	428b      	cmp	r3, r1
 800925a:	d006      	beq.n	800926a <_cbBackWin+0x3a>
 800925c:	6852      	ldr	r2, [r2, #4]
 800925e:	4293      	cmp	r3, r2
 8009260:	bf14      	ite	ne
 8009262:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009266:	2301      	moveq	r3, #1
 8009268:	e000      	b.n	800926c <_cbBackWin+0x3c>
 800926a:	2300      	movs	r3, #0
 800926c:	4a09      	ldr	r2, [pc, #36]	; (8009294 <_cbBackWin+0x64>)
 800926e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009272:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009276:	4298      	cmp	r0, r3
 8009278:	d003      	beq.n	8009282 <_cbBackWin+0x52>
 800927a:	f003 f8c9 	bl	800c410 <GUI_SetBkColor>
 800927e:	f005 f869 	bl	800e354 <GUI_Clear>
 8009282:	4620      	mov	r0, r4
 8009284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009288:	f7ff bfae 	b.w	80091e8 <WM_DefaultProc>
 800928c:	bd10      	pop	{r4, pc}
 800928e:	bf00      	nop
 8009290:	20022ff4 	.word	0x20022ff4
 8009294:	20023020 	.word	0x20023020

08009298 <WM_Init>:
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	4b2b      	ldr	r3, [pc, #172]	; (8009348 <WM_Init+0xb0>)
 800929c:	7818      	ldrb	r0, [r3, #0]
 800929e:	b085      	sub	sp, #20
 80092a0:	461d      	mov	r5, r3
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d14d      	bne.n	8009342 <WM_Init+0xaa>
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <WM_Init+0xb4>)
 80092a8:	6018      	str	r0, [r3, #0]
 80092aa:	4b29      	ldr	r3, [pc, #164]	; (8009350 <WM_Init+0xb8>)
 80092ac:	6018      	str	r0, [r3, #0]
 80092ae:	4b29      	ldr	r3, [pc, #164]	; (8009354 <WM_Init+0xbc>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6458      	str	r0, [r3, #68]	; 0x44
 80092b4:	4b28      	ldr	r3, [pc, #160]	; (8009358 <WM_Init+0xc0>)
 80092b6:	8018      	strh	r0, [r3, #0]
 80092b8:	4b28      	ldr	r3, [pc, #160]	; (800935c <WM_Init+0xc4>)
 80092ba:	4604      	mov	r4, r0
 80092bc:	8018      	strh	r0, [r3, #0]
 80092be:	4620      	mov	r0, r4
 80092c0:	f004 ff18 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 80092c4:	b1c0      	cbz	r0, 80092f8 <WM_Init+0x60>
 80092c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ca:	2302      	movs	r3, #2
 80092cc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80092d0:	2000      	movs	r0, #0
 80092d2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80092d6:	4b22      	ldr	r3, [pc, #136]	; (8009360 <WM_Init+0xc8>)
 80092d8:	9302      	str	r3, [sp, #8]
 80092da:	9003      	str	r0, [sp, #12]
 80092dc:	4613      	mov	r3, r2
 80092de:	4601      	mov	r1, r0
 80092e0:	f7ff fba6 	bl	8008a30 <WM_CreateWindowAsChild>
 80092e4:	4b1f      	ldr	r3, [pc, #124]	; (8009364 <WM_Init+0xcc>)
 80092e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80092ea:	4b1f      	ldr	r3, [pc, #124]	; (8009368 <WM_Init+0xd0>)
 80092ec:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80092f0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80092f4:	f7ff fb5b 	bl	80089ae <WM_InvalidateWindow>
 80092f8:	3401      	adds	r4, #1
 80092fa:	2c02      	cmp	r4, #2
 80092fc:	d1df      	bne.n	80092be <WM_Init+0x26>
 80092fe:	481b      	ldr	r0, [pc, #108]	; (800936c <WM_Init+0xd4>)
 8009300:	f007 f950 	bl	80105a4 <WM__AddCriticalHandle>
 8009304:	481a      	ldr	r0, [pc, #104]	; (8009370 <WM_Init+0xd8>)
 8009306:	f007 f94d 	bl	80105a4 <WM__AddCriticalHandle>
 800930a:	481a      	ldr	r0, [pc, #104]	; (8009374 <WM_Init+0xdc>)
 800930c:	f007 f94a 	bl	80105a4 <WM__AddCriticalHandle>
 8009310:	4819      	ldr	r0, [pc, #100]	; (8009378 <WM_Init+0xe0>)
 8009312:	f007 f947 	bl	80105a4 <WM__AddCriticalHandle>
 8009316:	4819      	ldr	r0, [pc, #100]	; (800937c <WM_Init+0xe4>)
 8009318:	f007 f944 	bl	80105a4 <WM__AddCriticalHandle>
 800931c:	4818      	ldr	r0, [pc, #96]	; (8009380 <WM_Init+0xe8>)
 800931e:	f007 f941 	bl	80105a4 <WM__AddCriticalHandle>
 8009322:	4b10      	ldr	r3, [pc, #64]	; (8009364 <WM_Init+0xcc>)
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7ff fb63 	bl	80089f0 <WM_SelectWindow>
 800932a:	f7ff ff4b 	bl	80091c4 <WM_Activate>
 800932e:	2301      	movs	r3, #1
 8009330:	702b      	strb	r3, [r5, #0]
 8009332:	4814      	ldr	r0, [pc, #80]	; (8009384 <WM_Init+0xec>)
 8009334:	4b14      	ldr	r3, [pc, #80]	; (8009388 <WM_Init+0xf0>)
 8009336:	6003      	str	r3, [r0, #0]
 8009338:	b005      	add	sp, #20
 800933a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800933e:	f005 b819 	b.w	800e374 <GUI__RegisterExit>
 8009342:	b005      	add	sp, #20
 8009344:	bd30      	pop	{r4, r5, pc}
 8009346:	bf00      	nop
 8009348:	20022a30 	.word	0x20022a30
 800934c:	20023010 	.word	0x20023010
 8009350:	20022a24 	.word	0x20022a24
 8009354:	20000038 	.word	0x20000038
 8009358:	2002300c 	.word	0x2002300c
 800935c:	20022fec 	.word	0x20022fec
 8009360:	08009231 	.word	0x08009231
 8009364:	20022ff4 	.word	0x20022ff4
 8009368:	20023020 	.word	0x20023020
 800936c:	20023164 	.word	0x20023164
 8009370:	20023154 	.word	0x20023154
 8009374:	20023144 	.word	0x20023144
 8009378:	2002316c 	.word	0x2002316c
 800937c:	2002315c 	.word	0x2002315c
 8009380:	2002314c 	.word	0x2002314c
 8009384:	20022a28 	.word	0x20022a28
 8009388:	08008081 	.word	0x08008081

0800938c <_CreateStaticDevice>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	b087      	sub	sp, #28
 8009392:	4604      	mov	r4, r0
 8009394:	f005 fb8c 	bl	800eab0 <GUI_ALLOC_LockH>
 8009398:	af06      	add	r7, sp, #24
 800939a:	f8b0 8000 	ldrh.w	r8, [r0]
 800939e:	8886      	ldrh	r6, [r0, #4]
 80093a0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 80093a4:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 80093a8:	f847 0d04 	str.w	r0, [r7, #-4]!
 80093ac:	fa0f f888 	sxth.w	r8, r8
 80093b0:	b236      	sxth	r6, r6
 80093b2:	ebc8 0606 	rsb	r6, r8, r6
 80093b6:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 80093ba:	3601      	adds	r6, #1
 80093bc:	4638      	mov	r0, r7
 80093be:	fa0f f989 	sxth.w	r9, r9
 80093c2:	fa0f f58b 	sxth.w	r5, fp
 80093c6:	f005 fb81 	bl	800eacc <GUI_ALLOC_UnlockH>
 80093ca:	ebc9 0505 	rsb	r5, r9, r5
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	f105 0501 	add.w	r5, r5, #1
 80093d4:	dd4d      	ble.n	8009472 <_CreateStaticDevice+0xe6>
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	dd4b      	ble.n	8009472 <_CreateStaticDevice+0xe6>
 80093da:	f1ba 0f00 	cmp.w	sl, #0
 80093de:	d04a      	beq.n	8009476 <_CreateStaticDevice+0xea>
 80093e0:	4650      	mov	r0, sl
 80093e2:	f005 fb65 	bl	800eab0 <GUI_ALLOC_LockH>
 80093e6:	ab06      	add	r3, sp, #24
 80093e8:	8886      	ldrh	r6, [r0, #4]
 80093ea:	f843 0d08 	str.w	r0, [r3, #-8]!
 80093ee:	88c5      	ldrh	r5, [r0, #6]
 80093f0:	b236      	sxth	r6, r6
 80093f2:	4618      	mov	r0, r3
 80093f4:	f005 fb6a 	bl	800eacc <GUI_ALLOC_UnlockH>
 80093f8:	4546      	cmp	r6, r8
 80093fa:	d102      	bne.n	8009402 <_CreateStaticDevice+0x76>
 80093fc:	b22d      	sxth	r5, r5
 80093fe:	454d      	cmp	r5, r9
 8009400:	d032      	beq.n	8009468 <_CreateStaticDevice+0xdc>
 8009402:	4650      	mov	r0, sl
 8009404:	4641      	mov	r1, r8
 8009406:	464a      	mov	r2, r9
 8009408:	f000 f886 	bl	8009518 <GUI_MEMDEV_SetOrg>
 800940c:	e02c      	b.n	8009468 <_CreateStaticDevice+0xdc>
 800940e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009414:	6283      	str	r3, [r0, #40]	; 0x28
 8009416:	4638      	mov	r0, r7
 8009418:	f005 fb58 	bl	800eacc <GUI_ALLOC_UnlockH>
 800941c:	4640      	mov	r0, r8
 800941e:	f000 ffdb 	bl	800a3d8 <GUI_MEMDEV_Select>
 8009422:	4607      	mov	r7, r0
 8009424:	4650      	mov	r0, sl
 8009426:	f003 fec5 	bl	800d1b4 <GUI__AlphaPreserveTrans>
 800942a:	4640      	mov	r0, r8
 800942c:	f000 f8f6 	bl	800961c <GUI_MEMDEV_GetDataPtr>
 8009430:	4b2d      	ldr	r3, [pc, #180]	; (80094e8 <_CreateStaticDevice+0x15c>)
 8009432:	fb05 f206 	mul.w	r2, r5, r6
 8009436:	7819      	ldrb	r1, [r3, #0]
 8009438:	4d2c      	ldr	r5, [pc, #176]	; (80094ec <_CreateStaticDevice+0x160>)
 800943a:	4e2d      	ldr	r6, [pc, #180]	; (80094f0 <_CreateStaticDevice+0x164>)
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	f002 fbe1 	bl	800bc04 <GUI__memset>
 8009442:	4620      	mov	r0, r4
 8009444:	f8d5 8000 	ldr.w	r8, [r5]
 8009448:	6034      	str	r4, [r6, #0]
 800944a:	f007 f887 	bl	801055c <WM_GetWindowOrgX>
 800944e:	6028      	str	r0, [r5, #0]
 8009450:	4620      	mov	r0, r4
 8009452:	f7ff fd6b 	bl	8008f2c <WM__Paint1>
 8009456:	2000      	movs	r0, #0
 8009458:	f8c5 8000 	str.w	r8, [r5]
 800945c:	6030      	str	r0, [r6, #0]
 800945e:	f003 fea9 	bl	800d1b4 <GUI__AlphaPreserveTrans>
 8009462:	4638      	mov	r0, r7
 8009464:	f000 ffb8 	bl	800a3d8 <GUI_MEMDEV_Select>
 8009468:	4620      	mov	r0, r4
 800946a:	f005 fb17 	bl	800ea9c <GUI_ALLOC_h2p>
 800946e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009470:	e037      	b.n	80094e2 <_CreateStaticDevice+0x156>
 8009472:	2000      	movs	r0, #0
 8009474:	e035      	b.n	80094e2 <_CreateStaticDevice+0x156>
 8009476:	f7fe fdf7 	bl	8008068 <WM_GetDesktopWindow>
 800947a:	4284      	cmp	r4, r0
 800947c:	d112      	bne.n	80094a4 <_CreateStaticDevice+0x118>
 800947e:	f001 fef7 	bl	800b270 <LCD_GetXSize>
 8009482:	4682      	mov	sl, r0
 8009484:	f001 fefc 	bl	800b280 <LCD_GetYSize>
 8009488:	4556      	cmp	r6, sl
 800948a:	dc02      	bgt.n	8009492 <_CreateStaticDevice+0x106>
 800948c:	4285      	cmp	r5, r0
 800948e:	dd09      	ble.n	80094a4 <_CreateStaticDevice+0x118>
 8009490:	e000      	b.n	8009494 <_CreateStaticDevice+0x108>
 8009492:	4656      	mov	r6, sl
 8009494:	4285      	cmp	r5, r0
 8009496:	bfa8      	it	ge
 8009498:	4605      	movge	r5, r0
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	462a      	mov	r2, r5
 80094a0:	f7fe fc7c 	bl	8007d9c <WM_SetSize>
 80094a4:	4b13      	ldr	r3, [pc, #76]	; (80094f4 <_CreateStaticDevice+0x168>)
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	f04f 0a01 	mov.w	sl, #1
 80094ac:	4b12      	ldr	r3, [pc, #72]	; (80094f8 <_CreateStaticDevice+0x16c>)
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	4640      	mov	r0, r8
 80094b2:	4649      	mov	r1, r9
 80094b4:	4632      	mov	r2, r6
 80094b6:	462b      	mov	r3, r5
 80094b8:	f8cd a000 	str.w	sl, [sp]
 80094bc:	f000 fe96 	bl	800a1ec <GUI_MEMDEV__CreateFixed>
 80094c0:	4680      	mov	r8, r0
 80094c2:	4620      	mov	r0, r4
 80094c4:	f005 faf4 	bl	800eab0 <GUI_ALLOC_LockH>
 80094c8:	9005      	str	r0, [sp, #20]
 80094ca:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 80094ce:	f1b8 0f00 	cmp.w	r8, #0
 80094d2:	d19c      	bne.n	800940e <_CreateStaticDevice+0x82>
 80094d4:	4638      	mov	r0, r7
 80094d6:	f005 faf9 	bl	800eacc <GUI_ALLOC_UnlockH>
 80094da:	4620      	mov	r0, r4
 80094dc:	f7ff fd26 	bl	8008f2c <WM__Paint1>
 80094e0:	4640      	mov	r0, r8
 80094e2:	b007      	add	sp, #28
 80094e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e8:	20000010 	.word	0x20000010
 80094ec:	2002304c 	.word	0x2002304c
 80094f0:	20023038 	.word	0x20023038
 80094f4:	08012a68 	.word	0x08012a68
 80094f8:	08014044 	.word	0x08014044

080094fc <GUI_MEMDEV_Paint1Static>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4605      	mov	r5, r0
 8009500:	2405      	movs	r4, #5
 8009502:	4628      	mov	r0, r5
 8009504:	f7ff ff42 	bl	800938c <_CreateStaticDevice>
 8009508:	b910      	cbnz	r0, 8009510 <GUI_MEMDEV_Paint1Static+0x14>
 800950a:	3c01      	subs	r4, #1
 800950c:	d1f9      	bne.n	8009502 <GUI_MEMDEV_Paint1Static+0x6>
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009514:	f007 bd72 	b.w	8010ffc <GUI_MEMDEV_Write>

08009518 <GUI_MEMDEV_SetOrg>:
 8009518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800951a:	460d      	mov	r5, r1
 800951c:	4614      	mov	r4, r2
 800951e:	b918      	cbnz	r0, 8009528 <GUI_MEMDEV_SetOrg+0x10>
 8009520:	4b11      	ldr	r3, [pc, #68]	; (8009568 <GUI_MEMDEV_SetOrg+0x50>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009526:	b1e8      	cbz	r0, 8009564 <GUI_MEMDEV_SetOrg+0x4c>
 8009528:	f005 fac2 	bl	800eab0 <GUI_ALLOC_LockH>
 800952c:	b2a4      	uxth	r4, r4
 800952e:	b2ad      	uxth	r5, r5
 8009530:	80c4      	strh	r4, [r0, #6]
 8009532:	8085      	strh	r5, [r0, #4]
 8009534:	9000      	str	r0, [sp, #0]
 8009536:	f002 faa3 	bl	800ba80 <LCD_SetClipRectMax>
 800953a:	9b00      	ldr	r3, [sp, #0]
 800953c:	6958      	ldr	r0, [r3, #20]
 800953e:	b170      	cbz	r0, 800955e <GUI_MEMDEV_SetOrg+0x46>
 8009540:	f005 fab6 	bl	800eab0 <GUI_ALLOC_LockH>
 8009544:	9b00      	ldr	r3, [sp, #0]
 8009546:	9001      	str	r0, [sp, #4]
 8009548:	891a      	ldrh	r2, [r3, #8]
 800954a:	895b      	ldrh	r3, [r3, #10]
 800954c:	8082      	strh	r2, [r0, #4]
 800954e:	80c3      	strh	r3, [r0, #6]
 8009550:	b112      	cbz	r2, 8009558 <GUI_MEMDEV_SetOrg+0x40>
 8009552:	b10b      	cbz	r3, 8009558 <GUI_MEMDEV_SetOrg+0x40>
 8009554:	8005      	strh	r5, [r0, #0]
 8009556:	8044      	strh	r4, [r0, #2]
 8009558:	a801      	add	r0, sp, #4
 800955a:	f005 fab7 	bl	800eacc <GUI_ALLOC_UnlockH>
 800955e:	4668      	mov	r0, sp
 8009560:	f005 fab4 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009564:	b003      	add	sp, #12
 8009566:	bd30      	pop	{r4, r5, pc}
 8009568:	20000038 	.word	0x20000038

0800956c <GUI_MEMDEV_GetYSize>:
 800956c:	b513      	push	{r0, r1, r4, lr}
 800956e:	b920      	cbnz	r0, 800957a <GUI_MEMDEV_GetYSize+0xe>
 8009570:	4b08      	ldr	r3, [pc, #32]	; (8009594 <GUI_MEMDEV_GetYSize+0x28>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009576:	4604      	mov	r4, r0
 8009578:	b148      	cbz	r0, 800958e <GUI_MEMDEV_GetYSize+0x22>
 800957a:	f005 fa99 	bl	800eab0 <GUI_ALLOC_LockH>
 800957e:	ab02      	add	r3, sp, #8
 8009580:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8009584:	f843 0d04 	str.w	r0, [r3, #-4]!
 8009588:	4618      	mov	r0, r3
 800958a:	f005 fa9f 	bl	800eacc <GUI_ALLOC_UnlockH>
 800958e:	4620      	mov	r0, r4
 8009590:	b002      	add	sp, #8
 8009592:	bd10      	pop	{r4, pc}
 8009594:	20000038 	.word	0x20000038

08009598 <GUI_MEMDEV_GetXSize>:
 8009598:	b513      	push	{r0, r1, r4, lr}
 800959a:	b920      	cbnz	r0, 80095a6 <GUI_MEMDEV_GetXSize+0xe>
 800959c:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <GUI_MEMDEV_GetXSize+0x28>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80095a2:	4604      	mov	r4, r0
 80095a4:	b148      	cbz	r0, 80095ba <GUI_MEMDEV_GetXSize+0x22>
 80095a6:	f005 fa83 	bl	800eab0 <GUI_ALLOC_LockH>
 80095aa:	ab02      	add	r3, sp, #8
 80095ac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80095b0:	f843 0d04 	str.w	r0, [r3, #-4]!
 80095b4:	4618      	mov	r0, r3
 80095b6:	f005 fa89 	bl	800eacc <GUI_ALLOC_UnlockH>
 80095ba:	4620      	mov	r0, r4
 80095bc:	b002      	add	sp, #8
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	20000038 	.word	0x20000038

080095c4 <GUI_MEMDEV_GetXPos>:
 80095c4:	b513      	push	{r0, r1, r4, lr}
 80095c6:	b920      	cbnz	r0, 80095d2 <GUI_MEMDEV_GetXPos+0xe>
 80095c8:	4b08      	ldr	r3, [pc, #32]	; (80095ec <GUI_MEMDEV_GetXPos+0x28>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80095ce:	4604      	mov	r4, r0
 80095d0:	b148      	cbz	r0, 80095e6 <GUI_MEMDEV_GetXPos+0x22>
 80095d2:	f005 fa6d 	bl	800eab0 <GUI_ALLOC_LockH>
 80095d6:	ab02      	add	r3, sp, #8
 80095d8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80095dc:	f843 0d04 	str.w	r0, [r3, #-4]!
 80095e0:	4618      	mov	r0, r3
 80095e2:	f005 fa73 	bl	800eacc <GUI_ALLOC_UnlockH>
 80095e6:	4620      	mov	r0, r4
 80095e8:	b002      	add	sp, #8
 80095ea:	bd10      	pop	{r4, pc}
 80095ec:	20000038 	.word	0x20000038

080095f0 <GUI_MEMDEV_GetYPos>:
 80095f0:	b513      	push	{r0, r1, r4, lr}
 80095f2:	b920      	cbnz	r0, 80095fe <GUI_MEMDEV_GetYPos+0xe>
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <GUI_MEMDEV_GetYPos+0x28>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80095fa:	4604      	mov	r4, r0
 80095fc:	b148      	cbz	r0, 8009612 <GUI_MEMDEV_GetYPos+0x22>
 80095fe:	f005 fa57 	bl	800eab0 <GUI_ALLOC_LockH>
 8009602:	ab02      	add	r3, sp, #8
 8009604:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8009608:	f843 0d04 	str.w	r0, [r3, #-4]!
 800960c:	4618      	mov	r0, r3
 800960e:	f005 fa5d 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009612:	4620      	mov	r0, r4
 8009614:	b002      	add	sp, #8
 8009616:	bd10      	pop	{r4, pc}
 8009618:	20000038 	.word	0x20000038

0800961c <GUI_MEMDEV_GetDataPtr>:
 800961c:	b513      	push	{r0, r1, r4, lr}
 800961e:	b150      	cbz	r0, 8009636 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009620:	f005 fa46 	bl	800eab0 <GUI_ALLOC_LockH>
 8009624:	4604      	mov	r4, r0
 8009626:	a802      	add	r0, sp, #8
 8009628:	f840 4d04 	str.w	r4, [r0, #-4]!
 800962c:	f005 fa4e 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009630:	f104 0018 	add.w	r0, r4, #24
 8009634:	e7ff      	b.n	8009636 <GUI_MEMDEV_GetDataPtr+0x1a>
 8009636:	b002      	add	sp, #8
 8009638:	bd10      	pop	{r4, pc}
	...

0800963c <GUI_MEMDEV__SetAlphaCallback>:
 800963c:	4b01      	ldr	r3, [pc, #4]	; (8009644 <GUI_MEMDEV__SetAlphaCallback+0x8>)
 800963e:	6018      	str	r0, [r3, #0]
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	20022a34 	.word	0x20022a34

08009648 <GUI_MEMDEV_Draw>:
 8009648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964c:	461e      	mov	r6, r3
 800964e:	b089      	sub	sp, #36	; 0x24
 8009650:	4b4e      	ldr	r3, [pc, #312]	; (800978c <GUI_MEMDEV_Draw+0x144>)
 8009652:	9204      	str	r2, [sp, #16]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	9103      	str	r1, [sp, #12]
 8009658:	7c54      	ldrb	r4, [r2, #17]
 800965a:	4a4d      	ldr	r2, [pc, #308]	; (8009790 <GUI_MEMDEV_Draw+0x148>)
 800965c:	5712      	ldrsb	r2, [r2, r4]
 800965e:	2a01      	cmp	r2, #1
 8009660:	4605      	mov	r5, r0
 8009662:	469b      	mov	fp, r3
 8009664:	4620      	mov	r0, r4
 8009666:	dd06      	ble.n	8009676 <GUI_MEMDEV_Draw+0x2e>
 8009668:	f001 fde6 	bl	800b238 <LCD_GetXSizeEx>
 800966c:	4607      	mov	r7, r0
 800966e:	4620      	mov	r0, r4
 8009670:	f001 fde5 	bl	800b23e <LCD_GetYSizeEx>
 8009674:	e005      	b.n	8009682 <GUI_MEMDEV_Draw+0x3a>
 8009676:	f001 fde5 	bl	800b244 <LCD_GetVXSizeEx>
 800967a:	4607      	mov	r7, r0
 800967c:	4620      	mov	r0, r4
 800967e:	f001 fde4 	bl	800b24a <LCD_GetVYSizeEx>
 8009682:	4604      	mov	r4, r0
 8009684:	b325      	cbz	r5, 80096d0 <GUI_MEMDEV_Draw+0x88>
 8009686:	a806      	add	r0, sp, #24
 8009688:	a907      	add	r1, sp, #28
 800968a:	f003 ff1d 	bl	800d4c8 <GUI_GetOrg>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	f9b5 a000 	ldrsh.w	sl, [r5]
 8009694:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009698:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 800969c:	441f      	add	r7, r3
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096a4:	3f01      	subs	r7, #1
 80096a6:	4297      	cmp	r7, r2
 80096a8:	bfd4      	ite	le
 80096aa:	ebca 0707 	rsble	r7, sl, r7
 80096ae:	ebca 0702 	rsbgt	r7, sl, r2
 80096b2:	441c      	add	r4, r3
 80096b4:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80096b8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80096bc:	3c01      	subs	r4, #1
 80096be:	4294      	cmp	r4, r2
 80096c0:	bfd4      	ite	le
 80096c2:	ebc8 0404 	rsble	r4, r8, r4
 80096c6:	ebc8 0402 	rsbgt	r4, r8, r2
 80096ca:	3701      	adds	r7, #1
 80096cc:	3401      	adds	r4, #1
 80096ce:	e001      	b.n	80096d4 <GUI_MEMDEV_Draw+0x8c>
 80096d0:	46a8      	mov	r8, r5
 80096d2:	46aa      	mov	sl, r5
 80096d4:	b906      	cbnz	r6, 80096d8 <GUI_MEMDEV_Draw+0x90>
 80096d6:	4266      	negs	r6, r4
 80096d8:	2f00      	cmp	r7, #0
 80096da:	dd52      	ble.n	8009782 <GUI_MEMDEV_Draw+0x13a>
 80096dc:	2c00      	cmp	r4, #0
 80096de:	dd50      	ble.n	8009782 <GUI_MEMDEV_Draw+0x13a>
 80096e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	4650      	mov	r0, sl
 80096e6:	4641      	mov	r1, r8
 80096e8:	463a      	mov	r2, r7
 80096ea:	4633      	mov	r3, r6
 80096ec:	f000 fe38 	bl	800a360 <GUI_MEMDEV_CreateEx>
 80096f0:	4605      	mov	r5, r0
 80096f2:	b920      	cbnz	r0, 80096fe <GUI_MEMDEV_Draw+0xb6>
 80096f4:	9804      	ldr	r0, [sp, #16]
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	4798      	blx	r3
 80096fa:	2001      	movs	r0, #1
 80096fc:	e042      	b.n	8009784 <GUI_MEMDEV_Draw+0x13c>
 80096fe:	f7ff ff35 	bl	800956c <GUI_MEMDEV_GetYSize>
 8009702:	42a0      	cmp	r0, r4
 8009704:	4606      	mov	r6, r0
 8009706:	d006      	beq.n	8009716 <GUI_MEMDEV_Draw+0xce>
 8009708:	f8db 3000 	ldr.w	r3, [fp]
 800970c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800970e:	b110      	cbz	r0, 8009716 <GUI_MEMDEV_Draw+0xce>
 8009710:	2132      	movs	r1, #50	; 0x32
 8009712:	f006 fbe7 	bl	800fee4 <WM__SendMessageNoPara>
 8009716:	4628      	mov	r0, r5
 8009718:	f000 fe5e 	bl	800a3d8 <GUI_MEMDEV_Select>
 800971c:	4273      	negs	r3, r6
 800971e:	9305      	str	r3, [sp, #20]
 8009720:	46a1      	mov	r9, r4
 8009722:	2700      	movs	r7, #0
 8009724:	45b1      	cmp	r9, r6
 8009726:	da03      	bge.n	8009730 <GUI_MEMDEV_Draw+0xe8>
 8009728:	4628      	mov	r0, r5
 800972a:	4649      	mov	r1, r9
 800972c:	f007 fd66 	bl	80111fc <GUI_MEMDEV_ReduceYSize>
 8009730:	b147      	cbz	r7, 8009744 <GUI_MEMDEV_Draw+0xfc>
 8009732:	4628      	mov	r0, r5
 8009734:	4651      	mov	r1, sl
 8009736:	eb07 0208 	add.w	r2, r7, r8
 800973a:	f7ff feed 	bl	8009518 <GUI_MEMDEV_SetOrg>
 800973e:	4628      	mov	r0, r5
 8009740:	f007 fd72 	bl	8011228 <GUI_MEMDEV_Clear>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	9804      	ldr	r0, [sp, #16]
 8009748:	4798      	blx	r3
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <GUI_MEMDEV_Draw+0x14c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	b10b      	cbz	r3, 8009754 <GUI_MEMDEV_Draw+0x10c>
 8009750:	2000      	movs	r0, #0
 8009752:	4798      	blx	r3
 8009754:	4628      	mov	r0, r5
 8009756:	f000 feb7 	bl	800a4c8 <GUI_MEMDEV_CopyToLCD>
 800975a:	4437      	add	r7, r6
 800975c:	9b05      	ldr	r3, [sp, #20]
 800975e:	42a7      	cmp	r7, r4
 8009760:	4499      	add	r9, r3
 8009762:	dbdf      	blt.n	8009724 <GUI_MEMDEV_Draw+0xdc>
 8009764:	4628      	mov	r0, r5
 8009766:	f000 fdd9 	bl	800a31c <GUI_MEMDEV_Delete>
 800976a:	2000      	movs	r0, #0
 800976c:	f000 fe34 	bl	800a3d8 <GUI_MEMDEV_Select>
 8009770:	42a6      	cmp	r6, r4
 8009772:	d006      	beq.n	8009782 <GUI_MEMDEV_Draw+0x13a>
 8009774:	f8db 3000 	ldr.w	r3, [fp]
 8009778:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800977a:	b110      	cbz	r0, 8009782 <GUI_MEMDEV_Draw+0x13a>
 800977c:	2133      	movs	r1, #51	; 0x33
 800977e:	f006 fbb1 	bl	800fee4 <WM__SendMessageNoPara>
 8009782:	2000      	movs	r0, #0
 8009784:	b009      	add	sp, #36	; 0x24
 8009786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978a:	bf00      	nop
 800978c:	20000038 	.word	0x20000038
 8009790:	20023044 	.word	0x20023044
 8009794:	20022a34 	.word	0x20022a34

08009798 <_GetDevData>:
 8009798:	4802      	ldr	r0, [pc, #8]	; (80097a4 <_GetDevData+0xc>)
 800979a:	2901      	cmp	r1, #1
 800979c:	bf18      	it	ne
 800979e:	2000      	movne	r0, #0
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	08012a68 	.word	0x08012a68

080097a8 <_GetDevFunc>:
 80097a8:	4802      	ldr	r0, [pc, #8]	; (80097b4 <_GetDevFunc+0xc>)
 80097aa:	2916      	cmp	r1, #22
 80097ac:	bf18      	it	ne
 80097ae:	2000      	movne	r0, #0
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	08010e0d 	.word	0x08010e0d

080097b8 <_GetDevProp>:
 80097b8:	2908      	cmp	r1, #8
 80097ba:	bf0c      	ite	eq
 80097bc:	2020      	moveq	r0, #32
 80097be:	2000      	movne	r0, #0
 80097c0:	4770      	bx	lr

080097c2 <_SetOrg>:
 80097c2:	b508      	push	{r3, lr}
 80097c4:	6800      	ldr	r0, [r0, #0]
 80097c6:	68c3      	ldr	r3, [r0, #12]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	4798      	blx	r3
 80097cc:	bd08      	pop	{r3, pc}

080097ce <_GetRect>:
 80097ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d0:	6880      	ldr	r0, [r0, #8]
 80097d2:	460c      	mov	r4, r1
 80097d4:	f005 f96c 	bl	800eab0 <GUI_ALLOC_LockH>
 80097d8:	4603      	mov	r3, r0
 80097da:	a802      	add	r0, sp, #8
 80097dc:	8899      	ldrh	r1, [r3, #4]
 80097de:	88da      	ldrh	r2, [r3, #6]
 80097e0:	891d      	ldrh	r5, [r3, #8]
 80097e2:	f840 3d04 	str.w	r3, [r0, #-4]!
 80097e6:	895b      	ldrh	r3, [r3, #10]
 80097e8:	8021      	strh	r1, [r4, #0]
 80097ea:	8062      	strh	r2, [r4, #2]
 80097ec:	4429      	add	r1, r5
 80097ee:	441a      	add	r2, r3
 80097f0:	3901      	subs	r1, #1
 80097f2:	3a01      	subs	r2, #1
 80097f4:	80a1      	strh	r1, [r4, #4]
 80097f6:	80e2      	strh	r2, [r4, #6]
 80097f8:	f005 f968 	bl	800eacc <GUI_ALLOC_UnlockH>
 80097fc:	b003      	add	sp, #12
 80097fe:	bd30      	pop	{r4, r5, pc}

08009800 <_XY2PTR>:
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <_XY2PTR+0x3c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009806:	4605      	mov	r5, r0
 8009808:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800980a:	460e      	mov	r6, r1
 800980c:	f005 f950 	bl	800eab0 <GUI_ALLOC_LockH>
 8009810:	4603      	mov	r3, r0
 8009812:	a802      	add	r0, sp, #8
 8009814:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8009818:	f840 3d04 	str.w	r3, [r0, #-4]!
 800981c:	f103 0118 	add.w	r1, r3, #24
 8009820:	1b36      	subs	r6, r6, r4
 8009822:	68dc      	ldr	r4, [r3, #12]
 8009824:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009828:	fb04 1406 	mla	r4, r4, r6, r1
 800982c:	1aed      	subs	r5, r5, r3
 800982e:	f005 f94d 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009832:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8009836:	4620      	mov	r0, r4
 8009838:	b002      	add	sp, #8
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	20000038 	.word	0x20000038

08009840 <_GetPixelIndex>:
 8009840:	b508      	push	{r3, lr}
 8009842:	4608      	mov	r0, r1
 8009844:	4611      	mov	r1, r2
 8009846:	f7ff ffdb 	bl	8009800 <_XY2PTR>
 800984a:	6800      	ldr	r0, [r0, #0]
 800984c:	bd08      	pop	{r3, pc}
	...

08009850 <_XorPixel>:
 8009850:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <_XorPixel+0x58>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009856:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009858:	4615      	mov	r5, r2
 800985a:	460e      	mov	r6, r1
 800985c:	f005 f928 	bl	800eab0 <GUI_ALLOC_LockH>
 8009860:	4629      	mov	r1, r5
 8009862:	9000      	str	r0, [sp, #0]
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff ffcb 	bl	8009800 <_XY2PTR>
 800986a:	9b00      	ldr	r3, [sp, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	4604      	mov	r4, r0
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	4798      	blx	r3
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	4058      	eors	r0, r3
 800987a:	9b00      	ldr	r3, [sp, #0]
 800987c:	6020      	str	r0, [r4, #0]
 800987e:	6958      	ldr	r0, [r3, #20]
 8009880:	b160      	cbz	r0, 800989c <_XorPixel+0x4c>
 8009882:	f005 f915 	bl	800eab0 <GUI_ALLOC_LockH>
 8009886:	ac02      	add	r4, sp, #8
 8009888:	6883      	ldr	r3, [r0, #8]
 800988a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4631      	mov	r1, r6
 8009892:	462a      	mov	r2, r5
 8009894:	4798      	blx	r3
 8009896:	4620      	mov	r0, r4
 8009898:	f005 f918 	bl	800eacc <GUI_ALLOC_UnlockH>
 800989c:	4668      	mov	r0, sp
 800989e:	f005 f915 	bl	800eacc <GUI_ALLOC_UnlockH>
 80098a2:	b002      	add	sp, #8
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
 80098a6:	bf00      	nop
 80098a8:	20000038 	.word	0x20000038

080098ac <_SetPixelIndex>:
 80098ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098ae:	461c      	mov	r4, r3
 80098b0:	4b10      	ldr	r3, [pc, #64]	; (80098f4 <_SetPixelIndex+0x48>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80098b6:	460e      	mov	r6, r1
 80098b8:	4615      	mov	r5, r2
 80098ba:	f005 f8f9 	bl	800eab0 <GUI_ALLOC_LockH>
 80098be:	4629      	mov	r1, r5
 80098c0:	9000      	str	r0, [sp, #0]
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ff9c 	bl	8009800 <_XY2PTR>
 80098c8:	9b00      	ldr	r3, [sp, #0]
 80098ca:	6004      	str	r4, [r0, #0]
 80098cc:	6958      	ldr	r0, [r3, #20]
 80098ce:	b160      	cbz	r0, 80098ea <_SetPixelIndex+0x3e>
 80098d0:	f005 f8ee 	bl	800eab0 <GUI_ALLOC_LockH>
 80098d4:	ac02      	add	r4, sp, #8
 80098d6:	6883      	ldr	r3, [r0, #8]
 80098d8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4631      	mov	r1, r6
 80098e0:	462a      	mov	r2, r5
 80098e2:	4798      	blx	r3
 80098e4:	4620      	mov	r0, r4
 80098e6:	f005 f8f1 	bl	800eacc <GUI_ALLOC_UnlockH>
 80098ea:	4668      	mov	r0, sp
 80098ec:	f005 f8ee 	bl	800eacc <GUI_ALLOC_UnlockH>
 80098f0:	b002      	add	sp, #8
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	20000038 	.word	0x20000038

080098f8 <_DrawVLine>:
 80098f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098fc:	4d2c      	ldr	r5, [pc, #176]	; (80099b0 <_DrawVLine+0xb8>)
 80098fe:	461e      	mov	r6, r3
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009904:	460f      	mov	r7, r1
 8009906:	4614      	mov	r4, r2
 8009908:	f005 f8d2 	bl	800eab0 <GUI_ALLOC_LockH>
 800990c:	9000      	str	r0, [sp, #0]
 800990e:	6940      	ldr	r0, [r0, #20]
 8009910:	46a9      	mov	r9, r5
 8009912:	b108      	cbz	r0, 8009918 <_DrawVLine+0x20>
 8009914:	f005 f8cc 	bl	800eab0 <GUI_ALLOC_LockH>
 8009918:	9001      	str	r0, [sp, #4]
 800991a:	4621      	mov	r1, r4
 800991c:	4638      	mov	r0, r7
 800991e:	f7ff ff6f 	bl	8009800 <_XY2PTR>
 8009922:	f8d9 2000 	ldr.w	r2, [r9]
 8009926:	9b00      	ldr	r3, [sp, #0]
 8009928:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800992a:	7c12      	ldrb	r2, [r2, #16]
 800992c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8009930:	f8d1 9000 	ldr.w	r9, [r1]
 8009934:	07d2      	lsls	r2, r2, #31
 8009936:	4605      	mov	r5, r0
 8009938:	d51f      	bpl.n	800997a <_DrawVLine+0x82>
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	4798      	blx	r3
 8009942:	4680      	mov	r8, r0
 8009944:	9801      	ldr	r0, [sp, #4]
 8009946:	b128      	cbz	r0, 8009954 <_DrawVLine+0x5c>
 8009948:	6882      	ldr	r2, [r0, #8]
 800994a:	4639      	mov	r1, r7
 800994c:	f8d2 c000 	ldr.w	ip, [r2]
 8009950:	4622      	mov	r2, r4
 8009952:	47e0      	blx	ip
 8009954:	682b      	ldr	r3, [r5, #0]
 8009956:	ea83 0308 	eor.w	r3, r3, r8
 800995a:	602b      	str	r3, [r5, #0]
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	3401      	adds	r4, #1
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	42b4      	cmp	r4, r6
 8009964:	441d      	add	r5, r3
 8009966:	dded      	ble.n	8009944 <_DrawVLine+0x4c>
 8009968:	4668      	mov	r0, sp
 800996a:	f005 f8af 	bl	800eacc <GUI_ALLOC_UnlockH>
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	b1d3      	cbz	r3, 80099a8 <_DrawVLine+0xb0>
 8009972:	a801      	add	r0, sp, #4
 8009974:	f005 f8aa 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009978:	e016      	b.n	80099a8 <_DrawVLine+0xb0>
 800997a:	9b01      	ldr	r3, [sp, #4]
 800997c:	b163      	cbz	r3, 8009998 <_DrawVLine+0xa0>
 800997e:	9801      	ldr	r0, [sp, #4]
 8009980:	6883      	ldr	r3, [r0, #8]
 8009982:	4622      	mov	r2, r4
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4639      	mov	r1, r7
 8009988:	3401      	adds	r4, #1
 800998a:	4798      	blx	r3
 800998c:	42b4      	cmp	r4, r6
 800998e:	f8c5 9000 	str.w	r9, [r5]
 8009992:	4445      	add	r5, r8
 8009994:	ddf3      	ble.n	800997e <_DrawVLine+0x86>
 8009996:	e7e7      	b.n	8009968 <_DrawVLine+0x70>
 8009998:	1b34      	subs	r4, r6, r4
 800999a:	3401      	adds	r4, #1
 800999c:	3c01      	subs	r4, #1
 800999e:	f8c5 9000 	str.w	r9, [r5]
 80099a2:	4445      	add	r5, r8
 80099a4:	d1fa      	bne.n	800999c <_DrawVLine+0xa4>
 80099a6:	e7df      	b.n	8009968 <_DrawVLine+0x70>
 80099a8:	b003      	add	sp, #12
 80099aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ae:	bf00      	nop
 80099b0:	20000038 	.word	0x20000038

080099b4 <_FillRect>:
 80099b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009a68 <_FillRect+0xb4>
 80099bc:	4614      	mov	r4, r2
 80099be:	f8db 2000 	ldr.w	r2, [fp]
 80099c2:	b085      	sub	sp, #20
 80099c4:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80099c6:	460f      	mov	r7, r1
 80099c8:	461d      	mov	r5, r3
 80099ca:	f005 f871 	bl	800eab0 <GUI_ALLOC_LockH>
 80099ce:	4621      	mov	r1, r4
 80099d0:	9002      	str	r0, [sp, #8]
 80099d2:	4638      	mov	r0, r7
 80099d4:	f7ff ff14 	bl	8009800 <_XY2PTR>
 80099d8:	9a02      	ldr	r2, [sp, #8]
 80099da:	f8db 3000 	ldr.w	r3, [fp]
 80099de:	f8d2 900c 	ldr.w	r9, [r2, #12]
 80099e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e4:	4606      	mov	r6, r0
 80099e6:	6950      	ldr	r0, [r2, #20]
 80099e8:	f8d3 a000 	ldr.w	sl, [r3]
 80099ec:	1bed      	subs	r5, r5, r7
 80099ee:	3501      	adds	r5, #1
 80099f0:	b338      	cbz	r0, 8009a42 <_FillRect+0x8e>
 80099f2:	f005 f85d 	bl	800eab0 <GUI_ALLOC_LockH>
 80099f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099f8:	f10d 0810 	add.w	r8, sp, #16
 80099fc:	1b13      	subs	r3, r2, r4
 80099fe:	f848 0d04 	str.w	r0, [r8, #-4]!
 8009a02:	3301      	adds	r3, #1
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	4639      	mov	r1, r7
 8009a08:	4622      	mov	r2, r4
 8009a0a:	462b      	mov	r3, r5
 8009a0c:	f007 fbe0 	bl	80111d0 <GUI_USAGE_AddRect>
 8009a10:	4640      	mov	r0, r8
 8009a12:	f005 f85b 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009a16:	e014      	b.n	8009a42 <_FillRect+0x8e>
 8009a18:	f8db 3000 	ldr.w	r3, [fp]
 8009a1c:	7c1b      	ldrb	r3, [r3, #16]
 8009a1e:	07db      	lsls	r3, r3, #31
 8009a20:	d513      	bpl.n	8009a4a <_FillRect+0x96>
 8009a22:	9b02      	ldr	r3, [sp, #8]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	4798      	blx	r3
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	462b      	mov	r3, r5
 8009a30:	6811      	ldr	r1, [r2, #0]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	ea81 0100 	eor.w	r1, r1, r0
 8009a38:	f842 1b04 	str.w	r1, [r2], #4
 8009a3c:	d1f8      	bne.n	8009a30 <_FillRect+0x7c>
 8009a3e:	444e      	add	r6, r9
 8009a40:	3401      	adds	r4, #1
 8009a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a44:	429c      	cmp	r4, r3
 8009a46:	dde7      	ble.n	8009a18 <_FillRect+0x64>
 8009a48:	e008      	b.n	8009a5c <_FillRect+0xa8>
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	ddf7      	ble.n	8009a3e <_FillRect+0x8a>
 8009a4e:	462b      	mov	r3, r5
 8009a50:	4632      	mov	r2, r6
 8009a52:	3b01      	subs	r3, #1
 8009a54:	f842 ab04 	str.w	sl, [r2], #4
 8009a58:	d1fb      	bne.n	8009a52 <_FillRect+0x9e>
 8009a5a:	e7f0      	b.n	8009a3e <_FillRect+0x8a>
 8009a5c:	a802      	add	r0, sp, #8
 8009a5e:	f005 f835 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009a62:	b005      	add	sp, #20
 8009a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a68:	20000038 	.word	0x20000038

08009a6c <_DrawHLine>:
 8009a6c:	b507      	push	{r0, r1, r2, lr}
 8009a6e:	9200      	str	r2, [sp, #0]
 8009a70:	f7ff ffa0 	bl	80099b4 <_FillRect>
 8009a74:	b003      	add	sp, #12
 8009a76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009a7c <_DrawBitmap>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	4c9d      	ldr	r4, [pc, #628]	; (8009cf8 <_DrawBitmap+0x27c>)
 8009a82:	469a      	mov	sl, r3
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	b091      	sub	sp, #68	; 0x44
 8009a88:	4680      	mov	r8, r0
 8009a8a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009a8c:	9207      	str	r2, [sp, #28]
 8009a8e:	460e      	mov	r6, r1
 8009a90:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8009a94:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f000 8387 	beq.w	800a1aa <_DrawBitmap+0x72e>
 8009a9c:	f005 f808 	bl	800eab0 <GUI_ALLOC_LockH>
 8009aa0:	900e      	str	r0, [sp, #56]	; 0x38
 8009aa2:	6940      	ldr	r0, [r0, #20]
 8009aa4:	b108      	cbz	r0, 8009aaa <_DrawBitmap+0x2e>
 8009aa6:	f005 f803 	bl	800eab0 <GUI_ALLOC_LockH>
 8009aaa:	900f      	str	r0, [sp, #60]	; 0x3c
 8009aac:	a810      	add	r0, sp, #64	; 0x40
 8009aae:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab6:	f005 f809 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009aba:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009abc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009abe:	4437      	add	r7, r6
 8009ac0:	9704      	str	r7, [sp, #16]
 8009ac2:	b150      	cbz	r0, 8009ada <_DrawBitmap+0x5e>
 8009ac4:	6823      	ldr	r3, [r4, #0]
 8009ac6:	7c1b      	ldrb	r3, [r3, #16]
 8009ac8:	079c      	lsls	r4, r3, #30
 8009aca:	d406      	bmi.n	8009ada <_DrawBitmap+0x5e>
 8009acc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009ace:	9700      	str	r7, [sp, #0]
 8009ad0:	9904      	ldr	r1, [sp, #16]
 8009ad2:	9a07      	ldr	r2, [sp, #28]
 8009ad4:	4653      	mov	r3, sl
 8009ad6:	f007 fb7b 	bl	80111d0 <GUI_USAGE_AddRect>
 8009ada:	9804      	ldr	r0, [sp, #16]
 8009adc:	9907      	ldr	r1, [sp, #28]
 8009ade:	f7ff fe8f 	bl	8009800 <_XY2PTR>
 8009ae2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009ae4:	2f17      	cmp	r7, #23
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	dd64      	ble.n	8009bb4 <_DrawBitmap+0x138>
 8009aea:	ea4f 078a 	mov.w	r7, sl, lsl #2
 8009aee:	9706      	str	r7, [sp, #24]
 8009af0:	f04f 0900 	mov.w	r9, #0
 8009af4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009af6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009af8:	45b9      	cmp	r9, r7
 8009afa:	da57      	bge.n	8009bac <_DrawBitmap+0x130>
 8009afc:	b130      	cbz	r0, 8009b0c <_DrawBitmap+0x90>
 8009afe:	6883      	ldr	r3, [r0, #8]
 8009b00:	9a07      	ldr	r2, [sp, #28]
 8009b02:	685c      	ldr	r4, [r3, #4]
 8009b04:	9904      	ldr	r1, [sp, #16]
 8009b06:	444a      	add	r2, r9
 8009b08:	4653      	mov	r3, sl
 8009b0a:	47a0      	blx	r4
 8009b0c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009b10:	68d8      	ldr	r0, [r3, #12]
 8009b12:	b128      	cbz	r0, 8009b20 <_DrawBitmap+0xa4>
 8009b14:	4630      	mov	r0, r6
 8009b16:	4659      	mov	r1, fp
 8009b18:	9a06      	ldr	r2, [sp, #24]
 8009b1a:	f008 ff20 	bl	801295e <memcpy>
 8009b1e:	e03e      	b.n	8009b9e <_DrawBitmap+0x122>
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	4798      	blx	r3
 8009b24:	0e00      	lsrs	r0, r0, #24
 8009b26:	9005      	str	r0, [sp, #20]
 8009b28:	4635      	mov	r5, r6
 8009b2a:	4657      	mov	r7, sl
 8009b2c:	465c      	mov	r4, fp
 8009b2e:	463b      	mov	r3, r7
 8009b30:	4622      	mov	r2, r4
 8009b32:	f04f 0c00 	mov.w	ip, #0
 8009b36:	f852 1b04 	ldr.w	r1, [r2], #4
 8009b3a:	9805      	ldr	r0, [sp, #20]
 8009b3c:	0e09      	lsrs	r1, r1, #24
 8009b3e:	4281      	cmp	r1, r0
 8009b40:	9805      	ldr	r0, [sp, #20]
 8009b42:	bf08      	it	eq
 8009b44:	f10c 0c01 	addeq.w	ip, ip, #1
 8009b48:	4281      	cmp	r1, r0
 8009b4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009b4e:	d014      	beq.n	8009b7a <_DrawBitmap+0xfe>
 8009b50:	f1bc 0f00 	cmp.w	ip, #0
 8009b54:	d014      	beq.n	8009b80 <_DrawBitmap+0x104>
 8009b56:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	461a      	mov	r2, r3
 8009b60:	9303      	str	r3, [sp, #12]
 8009b62:	f8cd c008 	str.w	ip, [sp, #8]
 8009b66:	f008 fefa 	bl	801295e <memcpy>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009b70:	441d      	add	r5, r3
 8009b72:	441c      	add	r4, r3
 8009b74:	ebcc 0707 	rsb	r7, ip, r7
 8009b78:	e00f      	b.n	8009b9a <_DrawBitmap+0x11e>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1db      	bne.n	8009b36 <_DrawBitmap+0xba>
 8009b7e:	e7e7      	b.n	8009b50 <_DrawBitmap+0xd4>
 8009b80:	6820      	ldr	r0, [r4, #0]
 8009b82:	0e02      	lsrs	r2, r0, #24
 8009b84:	2aff      	cmp	r2, #255	; 0xff
 8009b86:	d005      	beq.n	8009b94 <_DrawBitmap+0x118>
 8009b88:	43d2      	mvns	r2, r2
 8009b8a:	6829      	ldr	r1, [r5, #0]
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	f002 f92f 	bl	800bdf0 <GUI__MixColors>
 8009b92:	6028      	str	r0, [r5, #0]
 8009b94:	3504      	adds	r5, #4
 8009b96:	3404      	adds	r4, #4
 8009b98:	3f01      	subs	r7, #1
 8009b9a:	2f00      	cmp	r7, #0
 8009b9c:	d1c7      	bne.n	8009b2e <_DrawBitmap+0xb2>
 8009b9e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009ba0:	44bb      	add	fp, r7
 8009ba2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009ba4:	f109 0901 	add.w	r9, r9, #1
 8009ba8:	443e      	add	r6, r7
 8009baa:	e7a3      	b.n	8009af4 <_DrawBitmap+0x78>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f040 82f9 	bne.w	800a1a4 <_DrawBitmap+0x728>
 8009bb2:	e2fa      	b.n	800a1aa <_DrawBitmap+0x72e>
 8009bb4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009bb6:	2f10      	cmp	r7, #16
 8009bb8:	d137      	bne.n	8009c2a <_DrawBitmap+0x1ae>
 8009bba:	1f06      	subs	r6, r0, #4
 8009bbc:	2500      	movs	r5, #0
 8009bbe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009bc0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009bc2:	42bd      	cmp	r5, r7
 8009bc4:	f280 80a0 	bge.w	8009d08 <_DrawBitmap+0x28c>
 8009bc8:	9f07      	ldr	r7, [sp, #28]
 8009bca:	442f      	add	r7, r5
 8009bcc:	b13c      	cbz	r4, 8009bde <_DrawBitmap+0x162>
 8009bce:	68a3      	ldr	r3, [r4, #8]
 8009bd0:	9904      	ldr	r1, [sp, #16]
 8009bd2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	463a      	mov	r2, r7
 8009bda:	4653      	mov	r3, sl
 8009bdc:	47e0      	blx	ip
 8009bde:	f1ab 0302 	sub.w	r3, fp, #2
 8009be2:	9306      	str	r3, [sp, #24]
 8009be4:	9605      	str	r6, [sp, #20]
 8009be6:	46d1      	mov	r9, sl
 8009be8:	9904      	ldr	r1, [sp, #16]
 8009bea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009bee:	9a06      	ldr	r2, [sp, #24]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8009bf6:	9206      	str	r2, [sp, #24]
 8009bf8:	4451      	add	r1, sl
 8009bfa:	ebc9 0101 	rsb	r1, r9, r1
 8009bfe:	9103      	str	r1, [sp, #12]
 8009c00:	4798      	blx	r3
 8009c02:	9b05      	ldr	r3, [sp, #20]
 8009c04:	9903      	ldr	r1, [sp, #12]
 8009c06:	f843 0f04 	str.w	r0, [r3, #4]!
 8009c0a:	9305      	str	r3, [sp, #20]
 8009c0c:	b124      	cbz	r4, 8009c18 <_DrawBitmap+0x19c>
 8009c0e:	68a3      	ldr	r3, [r4, #8]
 8009c10:	4620      	mov	r0, r4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	463a      	mov	r2, r7
 8009c16:	4798      	blx	r3
 8009c18:	f1b9 0901 	subs.w	r9, r9, #1
 8009c1c:	d1e4      	bne.n	8009be8 <_DrawBitmap+0x16c>
 8009c1e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009c20:	44bb      	add	fp, r7
 8009c22:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009c24:	3501      	adds	r5, #1
 8009c26:	443e      	add	r6, r7
 8009c28:	e7c9      	b.n	8009bbe <_DrawBitmap+0x142>
 8009c2a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009c2c:	2f08      	cmp	r7, #8
 8009c2e:	f100 0604 	add.w	r6, r0, #4
 8009c32:	d16d      	bne.n	8009d10 <_DrawBitmap+0x294>
 8009c34:	9f07      	ldr	r7, [sp, #28]
 8009c36:	9907      	ldr	r1, [sp, #28]
 8009c38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009c3c:	1a7b      	subs	r3, r7, r1
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	f1a6 0004 	sub.w	r0, r6, #4
 8009c44:	da60      	bge.n	8009d08 <_DrawBitmap+0x28c>
 8009c46:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <_DrawBitmap+0x27c>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	7c1b      	ldrb	r3, [r3, #16]
 8009c4c:	b36d      	cbz	r5, 8009caa <_DrawBitmap+0x22e>
 8009c4e:	f013 0303 	ands.w	r3, r3, #3
 8009c52:	d005      	beq.n	8009c60 <_DrawBitmap+0x1e4>
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d151      	bne.n	8009cfc <_DrawBitmap+0x280>
 8009c58:	46b1      	mov	r9, r6
 8009c5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c5e:	e01c      	b.n	8009c9a <_DrawBitmap+0x21e>
 8009c60:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8009c64:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009c68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	4553      	cmp	r3, sl
 8009c70:	d1f6      	bne.n	8009c60 <_DrawBitmap+0x1e4>
 8009c72:	e043      	b.n	8009cfc <_DrawBitmap+0x280>
 8009c74:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009c78:	f849 3c04 	str.w	r3, [r9, #-4]
 8009c7c:	b12c      	cbz	r4, 8009c8a <_DrawBitmap+0x20e>
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	4620      	mov	r0, r4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4641      	mov	r1, r8
 8009c86:	463a      	mov	r2, r7
 8009c88:	4798      	blx	r3
 8009c8a:	9b04      	ldr	r3, [sp, #16]
 8009c8c:	f108 0801 	add.w	r8, r8, #1
 8009c90:	4453      	add	r3, sl
 8009c92:	4543      	cmp	r3, r8
 8009c94:	f109 0904 	add.w	r9, r9, #4
 8009c98:	d030      	beq.n	8009cfc <_DrawBitmap+0x280>
 8009c9a:	9804      	ldr	r0, [sp, #16]
 8009c9c:	ebc0 030b 	rsb	r3, r0, fp
 8009ca0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0f0      	beq.n	8009c8a <_DrawBitmap+0x20e>
 8009ca8:	e7e4      	b.n	8009c74 <_DrawBitmap+0x1f8>
 8009caa:	f013 0303 	ands.w	r3, r3, #3
 8009cae:	d005      	beq.n	8009cbc <_DrawBitmap+0x240>
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d123      	bne.n	8009cfc <_DrawBitmap+0x280>
 8009cb4:	46b1      	mov	r9, r6
 8009cb6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009cba:	e015      	b.n	8009ce8 <_DrawBitmap+0x26c>
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	f008 fe4d 	bl	801295e <memcpy>
 8009cc4:	e01a      	b.n	8009cfc <_DrawBitmap+0x280>
 8009cc6:	f849 3c04 	str.w	r3, [r9, #-4]
 8009cca:	b12c      	cbz	r4, 8009cd8 <_DrawBitmap+0x25c>
 8009ccc:	68a3      	ldr	r3, [r4, #8]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	4798      	blx	r3
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	4453      	add	r3, sl
 8009ce0:	4543      	cmp	r3, r8
 8009ce2:	f109 0904 	add.w	r9, r9, #4
 8009ce6:	d009      	beq.n	8009cfc <_DrawBitmap+0x280>
 8009ce8:	9904      	ldr	r1, [sp, #16]
 8009cea:	ebc1 030b 	rsb	r3, r1, fp
 8009cee:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <_DrawBitmap+0x25c>
 8009cf6:	e7e6      	b.n	8009cc6 <_DrawBitmap+0x24a>
 8009cf8:	20000038 	.word	0x20000038
 8009cfc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d00:	4493      	add	fp, r2
 8009d02:	3701      	adds	r7, #1
 8009d04:	441e      	add	r6, r3
 8009d06:	e796      	b.n	8009c36 <_DrawBitmap+0x1ba>
 8009d08:	2c00      	cmp	r4, #0
 8009d0a:	f040 824b 	bne.w	800a1a4 <_DrawBitmap+0x728>
 8009d0e:	e24c      	b.n	800a1aa <_DrawBitmap+0x72e>
 8009d10:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009d12:	4bb2      	ldr	r3, [pc, #712]	; (8009fdc <_DrawBitmap+0x560>)
 8009d14:	9609      	str	r6, [sp, #36]	; 0x24
 8009d16:	007f      	lsls	r7, r7, #1
 8009d18:	970c      	str	r7, [sp, #48]	; 0x30
 8009d1a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009d1c:	00bf      	lsls	r7, r7, #2
 8009d1e:	970d      	str	r7, [sp, #52]	; 0x34
 8009d20:	9f07      	ldr	r7, [sp, #28]
 8009d22:	9705      	str	r7, [sp, #20]
 8009d24:	2d00      	cmp	r5, #0
 8009d26:	bf08      	it	eq
 8009d28:	461d      	moveq	r5, r3
 8009d2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009d2c:	9807      	ldr	r0, [sp, #28]
 8009d2e:	1f3c      	subs	r4, r7, #4
 8009d30:	9f05      	ldr	r7, [sp, #20]
 8009d32:	1a3b      	subs	r3, r7, r0
 8009d34:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009d36:	42bb      	cmp	r3, r7
 8009d38:	f280 8232 	bge.w	800a1a0 <_DrawBitmap+0x724>
 8009d3c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009d3e:	2f02      	cmp	r7, #2
 8009d40:	f000 80ad 	beq.w	8009e9e <_DrawBitmap+0x422>
 8009d44:	2f04      	cmp	r7, #4
 8009d46:	f000 814f 	beq.w	8009fe8 <_DrawBitmap+0x56c>
 8009d4a:	2f01      	cmp	r7, #1
 8009d4c:	f040 821e 	bne.w	800a18c <_DrawBitmap+0x710>
 8009d50:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8009fe4 <_DrawBitmap+0x568>
 8009d54:	f8d9 3000 	ldr.w	r3, [r9]
 8009d58:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009d5a:	f004 fea9 	bl	800eab0 <GUI_ALLOC_LockH>
 8009d5e:	f89b 3000 	ldrb.w	r3, [fp]
 8009d62:	4a9f      	ldr	r2, [pc, #636]	; (8009fe0 <_DrawBitmap+0x564>)
 8009d64:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009d66:	5cd6      	ldrb	r6, [r2, r3]
 8009d68:	f8d9 3000 	ldr.w	r3, [r9]
 8009d6c:	900e      	str	r0, [sp, #56]	; 0x38
 8009d6e:	7c1b      	ldrb	r3, [r3, #16]
 8009d70:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	4657      	mov	r7, sl
 8009d7c:	f1c1 0808 	rsb	r8, r1, #8
 8009d80:	fa46 f601 	asr.w	r6, r6, r1
 8009d84:	d020      	beq.n	8009dc8 <_DrawBitmap+0x34c>
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d061      	beq.n	8009e4e <_DrawBitmap+0x3d2>
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d05f      	beq.n	8009e4e <_DrawBitmap+0x3d2>
 8009d8e:	465a      	mov	r2, fp
 8009d90:	4547      	cmp	r7, r8
 8009d92:	bf38      	it	cc
 8009d94:	46b8      	movcc	r8, r7
 8009d96:	ebc8 0707 	rsb	r7, r8, r7
 8009d9a:	4643      	mov	r3, r8
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	f006 0001 	and.w	r0, r6, #1
 8009da2:	3b01      	subs	r3, #1
 8009da4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8009da8:	f841 0b04 	str.w	r0, [r1], #4
 8009dac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009db0:	d1f5      	bne.n	8009d9e <_DrawBitmap+0x322>
 8009db2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009db6:	2f00      	cmp	r7, #0
 8009db8:	d06d      	beq.n	8009e96 <_DrawBitmap+0x41a>
 8009dba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009dbe:	4988      	ldr	r1, [pc, #544]	; (8009fe0 <_DrawBitmap+0x564>)
 8009dc0:	f04f 0808 	mov.w	r8, #8
 8009dc4:	5cce      	ldrb	r6, [r1, r3]
 8009dc6:	e7e3      	b.n	8009d90 <_DrawBitmap+0x314>
 8009dc8:	686b      	ldr	r3, [r5, #4]
 8009dca:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8009dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dd0:	f8cd b020 	str.w	fp, [sp, #32]
 8009dd4:	4547      	cmp	r7, r8
 8009dd6:	bf38      	it	cc
 8009dd8:	46b8      	movcc	r8, r7
 8009dda:	ebc8 0707 	rsb	r7, r8, r7
 8009dde:	f1bc 0f00 	cmp.w	ip, #0
 8009de2:	d026      	beq.n	8009e32 <_DrawBitmap+0x3b6>
 8009de4:	b91e      	cbnz	r6, 8009dee <_DrawBitmap+0x372>
 8009de6:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009dea:	44c1      	add	r9, r8
 8009dec:	e025      	b.n	8009e3a <_DrawBitmap+0x3be>
 8009dee:	07f0      	lsls	r0, r6, #31
 8009df0:	d50c      	bpl.n	8009e0c <_DrawBitmap+0x390>
 8009df2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009df6:	9a05      	ldr	r2, [sp, #20]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f8cd c008 	str.w	ip, [sp, #8]
 8009dfe:	4660      	mov	r0, ip
 8009e00:	4649      	mov	r1, r9
 8009e02:	4798      	blx	r3
 8009e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e06:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	f1b8 0801 	subs.w	r8, r8, #1
 8009e10:	f109 0901 	add.w	r9, r9, #1
 8009e14:	f104 0404 	add.w	r4, r4, #4
 8009e18:	d00f      	beq.n	8009e3a <_DrawBitmap+0x3be>
 8009e1a:	0876      	lsrs	r6, r6, #1
 8009e1c:	e7e2      	b.n	8009de4 <_DrawBitmap+0x368>
 8009e1e:	07f1      	lsls	r1, r6, #31
 8009e20:	bf44      	itt	mi
 8009e22:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 8009e24:	6023      	strmi	r3, [r4, #0]
 8009e26:	f1b8 0801 	subs.w	r8, r8, #1
 8009e2a:	f104 0404 	add.w	r4, r4, #4
 8009e2e:	d004      	beq.n	8009e3a <_DrawBitmap+0x3be>
 8009e30:	0876      	lsrs	r6, r6, #1
 8009e32:	2e00      	cmp	r6, #0
 8009e34:	d1f3      	bne.n	8009e1e <_DrawBitmap+0x3a2>
 8009e36:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009e3a:	b367      	cbz	r7, 8009e96 <_DrawBitmap+0x41a>
 8009e3c:	9808      	ldr	r0, [sp, #32]
 8009e3e:	4a68      	ldr	r2, [pc, #416]	; (8009fe0 <_DrawBitmap+0x564>)
 8009e40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009e44:	9008      	str	r0, [sp, #32]
 8009e46:	5cd6      	ldrb	r6, [r2, r3]
 8009e48:	f04f 0808 	mov.w	r8, #8
 8009e4c:	e7c2      	b.n	8009dd4 <_DrawBitmap+0x358>
 8009e4e:	6803      	ldr	r3, [r0, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	4798      	blx	r3
 8009e56:	4659      	mov	r1, fp
 8009e58:	4547      	cmp	r7, r8
 8009e5a:	bf38      	it	cc
 8009e5c:	46b8      	movcc	r8, r7
 8009e5e:	ebc8 0707 	rsb	r7, r8, r7
 8009e62:	1d23      	adds	r3, r4, #4
 8009e64:	46c6      	mov	lr, r8
 8009e66:	07f2      	lsls	r2, r6, #31
 8009e68:	d504      	bpl.n	8009e74 <_DrawBitmap+0x3f8>
 8009e6a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8009e6e:	4042      	eors	r2, r0
 8009e70:	f843 2c04 	str.w	r2, [r3, #-4]
 8009e74:	f1be 0e01 	subs.w	lr, lr, #1
 8009e78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e7c:	f103 0304 	add.w	r3, r3, #4
 8009e80:	d1f1      	bne.n	8009e66 <_DrawBitmap+0x3ea>
 8009e82:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009e86:	b137      	cbz	r7, 8009e96 <_DrawBitmap+0x41a>
 8009e88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009e8c:	4a54      	ldr	r2, [pc, #336]	; (8009fe0 <_DrawBitmap+0x564>)
 8009e8e:	f04f 0808 	mov.w	r8, #8
 8009e92:	5cd6      	ldrb	r6, [r2, r3]
 8009e94:	e7e0      	b.n	8009e58 <_DrawBitmap+0x3dc>
 8009e96:	a80e      	add	r0, sp, #56	; 0x38
 8009e98:	f004 fe18 	bl	800eacc <GUI_ALLOC_UnlockH>
 8009e9c:	e176      	b.n	800a18c <_DrawBitmap+0x710>
 8009e9e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ea2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8009ea6:	f1c7 0604 	rsb	r6, r7, #4
 8009eaa:	f89b 7000 	ldrb.w	r7, [fp]
 8009eae:	409f      	lsls	r7, r3
 8009eb0:	4b4c      	ldr	r3, [pc, #304]	; (8009fe4 <_DrawBitmap+0x568>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	7c1b      	ldrb	r3, [r3, #16]
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	b2f6      	uxtb	r6, r6
 8009ebe:	b2ff      	uxtb	r7, r7
 8009ec0:	d066      	beq.n	8009f90 <_DrawBitmap+0x514>
 8009ec2:	d308      	bcc.n	8009ed6 <_DrawBitmap+0x45a>
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	f040 8161 	bne.w	800a18c <_DrawBitmap+0x710>
 8009eca:	9804      	ldr	r0, [sp, #16]
 8009ecc:	f8cd b020 	str.w	fp, [sp, #32]
 8009ed0:	46d0      	mov	r8, sl
 8009ed2:	9006      	str	r0, [sp, #24]
 8009ed4:	e03e      	b.n	8009f54 <_DrawBitmap+0x4d8>
 8009ed6:	465a      	mov	r2, fp
 8009ed8:	4653      	mov	r3, sl
 8009eda:	429e      	cmp	r6, r3
 8009edc:	bfc8      	it	gt
 8009ede:	b2de      	uxtbgt	r6, r3
 8009ee0:	1b9b      	subs	r3, r3, r6
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 8009eea:	3901      	subs	r1, #1
 8009eec:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8009ef0:	f840 cb04 	str.w	ip, [r0], #4
 8009ef4:	00bf      	lsls	r7, r7, #2
 8009ef6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8009efa:	b2ff      	uxtb	r7, r7
 8009efc:	d1f3      	bne.n	8009ee6 <_DrawBitmap+0x46a>
 8009efe:	3e01      	subs	r6, #1
 8009f00:	b2f6      	uxtb	r6, r6
 8009f02:	3601      	adds	r6, #1
 8009f04:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 813f 	beq.w	800a18c <_DrawBitmap+0x710>
 8009f0e:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8009f12:	2604      	movs	r6, #4
 8009f14:	e7e1      	b.n	8009eda <_DrawBitmap+0x45e>
 8009f16:	9906      	ldr	r1, [sp, #24]
 8009f18:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009f1c:	4449      	add	r1, r9
 8009f1e:	d122      	bne.n	8009f66 <_DrawBitmap+0x4ea>
 8009f20:	f109 0901 	add.w	r9, r9, #1
 8009f24:	fa5f f289 	uxtb.w	r2, r9
 8009f28:	00bf      	lsls	r7, r7, #2
 8009f2a:	4296      	cmp	r6, r2
 8009f2c:	b2ff      	uxtb	r7, r7
 8009f2e:	d1f2      	bne.n	8009f16 <_DrawBitmap+0x49a>
 8009f30:	9f06      	ldr	r7, [sp, #24]
 8009f32:	3e01      	subs	r6, #1
 8009f34:	b2f6      	uxtb	r6, r6
 8009f36:	1c7b      	adds	r3, r7, #1
 8009f38:	1c72      	adds	r2, r6, #1
 8009f3a:	199e      	adds	r6, r3, r6
 8009f3c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8009f40:	9606      	str	r6, [sp, #24]
 8009f42:	f1b8 0f00 	cmp.w	r8, #0
 8009f46:	f000 8121 	beq.w	800a18c <_DrawBitmap+0x710>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009f50:	9308      	str	r3, [sp, #32]
 8009f52:	2604      	movs	r6, #4
 8009f54:	4546      	cmp	r6, r8
 8009f56:	bfc8      	it	gt
 8009f58:	fa5f f688 	uxtbgt.w	r6, r8
 8009f5c:	ebc6 0808 	rsb	r8, r6, r8
 8009f60:	f04f 0900 	mov.w	r9, #0
 8009f64:	e7d7      	b.n	8009f16 <_DrawBitmap+0x49a>
 8009f66:	09ba      	lsrs	r2, r7, #6
 8009f68:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009f6c:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 8009f70:	f1bc 0f00 	cmp.w	ip, #0
 8009f74:	d0d4      	beq.n	8009f20 <_DrawBitmap+0x4a4>
 8009f76:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8009f7a:	6812      	ldr	r2, [r2, #0]
 8009f7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f7e:	4660      	mov	r0, ip
 8009f80:	f8cd c008 	str.w	ip, [sp, #8]
 8009f84:	9a05      	ldr	r2, [sp, #20]
 8009f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f88:	4798      	blx	r3
 8009f8a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8009f8e:	e7c7      	b.n	8009f20 <_DrawBitmap+0x4a4>
 8009f90:	4658      	mov	r0, fp
 8009f92:	4653      	mov	r3, sl
 8009f94:	429e      	cmp	r6, r3
 8009f96:	bfc8      	it	gt
 8009f98:	b2de      	uxtbgt	r6, r3
 8009f9a:	1b9b      	subs	r3, r3, r6
 8009f9c:	1d22      	adds	r2, r4, #4
 8009f9e:	46b4      	mov	ip, r6
 8009fa0:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8009fa4:	d005      	beq.n	8009fb2 <_DrawBitmap+0x536>
 8009fa6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8009faa:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009fae:	f842 1c04 	str.w	r1, [r2, #-4]
 8009fb2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009fb6:	00bf      	lsls	r7, r7, #2
 8009fb8:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009fbc:	b2ff      	uxtb	r7, r7
 8009fbe:	f102 0204 	add.w	r2, r2, #4
 8009fc2:	d1ed      	bne.n	8009fa0 <_DrawBitmap+0x524>
 8009fc4:	3e01      	subs	r6, #1
 8009fc6:	b2f6      	uxtb	r6, r6
 8009fc8:	3601      	adds	r6, #1
 8009fca:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 80dc 	beq.w	800a18c <_DrawBitmap+0x710>
 8009fd4:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8009fd8:	2604      	movs	r6, #4
 8009fda:	e7db      	b.n	8009f94 <_DrawBitmap+0x518>
 8009fdc:	08012a28 	.word	0x08012a28
 8009fe0:	08013e18 	.word	0x08013e18
 8009fe4:	20000038 	.word	0x20000038
 8009fe8:	4a71      	ldr	r2, [pc, #452]	; (800a1b0 <_DrawBitmap+0x734>)
 8009fea:	f89b 3000 	ldrb.w	r3, [fp]
 8009fee:	6812      	ldr	r2, [r2, #0]
 8009ff0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8009ff6:	f002 0203 	and.w	r2, r2, #3
 8009ffa:	4083      	lsls	r3, r0
 8009ffc:	2a01      	cmp	r2, #1
 8009ffe:	b2de      	uxtb	r6, r3
 800a000:	f000 809c 	beq.w	800a13c <_DrawBitmap+0x6c0>
 800a004:	d302      	bcc.n	800a00c <_DrawBitmap+0x590>
 800a006:	2a02      	cmp	r2, #2
 800a008:	d035      	beq.n	800a076 <_DrawBitmap+0x5fa>
 800a00a:	e0bf      	b.n	800a18c <_DrawBitmap+0x710>
 800a00c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a00e:	b15f      	cbz	r7, 800a028 <_DrawBitmap+0x5ac>
 800a010:	0936      	lsrs	r6, r6, #4
 800a012:	f10b 0201 	add.w	r2, fp, #1
 800a016:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800a020:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a022:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a026:	e001      	b.n	800a02c <_DrawBitmap+0x5b0>
 800a028:	4653      	mov	r3, sl
 800a02a:	465a      	mov	r2, fp
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	dd1a      	ble.n	800a066 <_DrawBitmap+0x5ea>
 800a030:	1058      	asrs	r0, r3, #1
 800a032:	f104 0108 	add.w	r1, r4, #8
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	eb02 0800 	add.w	r8, r2, r0
 800a03e:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800a042:	f006 060f 	and.w	r6, r6, #15
 800a046:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800a04a:	f841 7c08 	str.w	r7, [r1, #-8]
 800a04e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800a052:	f841 6c04 	str.w	r6, [r1, #-4]
 800a056:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800a05a:	4542      	cmp	r2, r8
 800a05c:	f101 0108 	add.w	r1, r1, #8
 800a060:	d1ed      	bne.n	800a03e <_DrawBitmap+0x5c2>
 800a062:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8090 	beq.w	800a18c <_DrawBitmap+0x710>
 800a06c:	0936      	lsrs	r6, r6, #4
 800a06e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	e08a      	b.n	800a18c <_DrawBitmap+0x710>
 800a076:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a078:	b1c0      	cbz	r0, 800a0ac <_DrawBitmap+0x630>
 800a07a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800a07e:	d00a      	beq.n	800a096 <_DrawBitmap+0x61a>
 800a080:	0936      	lsrs	r6, r6, #4
 800a082:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	b12f      	cbz	r7, 800a096 <_DrawBitmap+0x61a>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	9904      	ldr	r1, [sp, #16]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	9a05      	ldr	r2, [sp, #20]
 800a092:	4638      	mov	r0, r7
 800a094:	4798      	blx	r3
 800a096:	9904      	ldr	r1, [sp, #16]
 800a098:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a09a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800a09e:	f101 0801 	add.w	r8, r1, #1
 800a0a2:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800a0a6:	f10b 0901 	add.w	r9, fp, #1
 800a0aa:	e011      	b.n	800a0d0 <_DrawBitmap+0x654>
 800a0ac:	46d4      	mov	ip, sl
 800a0ae:	46d9      	mov	r9, fp
 800a0b0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0b4:	e00c      	b.n	800a0d0 <_DrawBitmap+0x654>
 800a0b6:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800a0ba:	d10d      	bne.n	800a0d8 <_DrawBitmap+0x65c>
 800a0bc:	f016 060f 	ands.w	r6, r6, #15
 800a0c0:	d11b      	bne.n	800a0fa <_DrawBitmap+0x67e>
 800a0c2:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800a0c6:	3408      	adds	r4, #8
 800a0c8:	f108 0802 	add.w	r8, r8, #2
 800a0cc:	f1ac 0c02 	sub.w	ip, ip, #2
 800a0d0:	f1bc 0f01 	cmp.w	ip, #1
 800a0d4:	dcef      	bgt.n	800a0b6 <_DrawBitmap+0x63a>
 800a0d6:	e021      	b.n	800a11c <_DrawBitmap+0x6a0>
 800a0d8:	0933      	lsrs	r3, r6, #4
 800a0da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800a0de:	6023      	str	r3, [r4, #0]
 800a0e0:	2f00      	cmp	r7, #0
 800a0e2:	d0eb      	beq.n	800a0bc <_DrawBitmap+0x640>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	9a05      	ldr	r2, [sp, #20]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f8cd c008 	str.w	ip, [sp, #8]
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	4798      	blx	r3
 800a0f4:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a0f8:	e7e0      	b.n	800a0bc <_DrawBitmap+0x640>
 800a0fa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a0fe:	6063      	str	r3, [r4, #4]
 800a100:	2f00      	cmp	r7, #0
 800a102:	d0de      	beq.n	800a0c2 <_DrawBitmap+0x646>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	9a05      	ldr	r2, [sp, #20]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f8cd c008 	str.w	ip, [sp, #8]
 800a10e:	4638      	mov	r0, r7
 800a110:	f108 0101 	add.w	r1, r8, #1
 800a114:	4798      	blx	r3
 800a116:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a11a:	e7d2      	b.n	800a0c2 <_DrawBitmap+0x646>
 800a11c:	f1bc 0f00 	cmp.w	ip, #0
 800a120:	d034      	beq.n	800a18c <_DrawBitmap+0x710>
 800a122:	0936      	lsrs	r6, r6, #4
 800a124:	d032      	beq.n	800a18c <_DrawBitmap+0x710>
 800a126:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	b377      	cbz	r7, 800a18c <_DrawBitmap+0x710>
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	9a05      	ldr	r2, [sp, #20]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4638      	mov	r0, r7
 800a136:	4641      	mov	r1, r8
 800a138:	4798      	blx	r3
 800a13a:	e027      	b.n	800a18c <_DrawBitmap+0x710>
 800a13c:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800a13e:	f1c7 0302 	rsb	r3, r7, #2
 800a142:	b2db      	uxtb	r3, r3
 800a144:	465f      	mov	r7, fp
 800a146:	4652      	mov	r2, sl
 800a148:	4293      	cmp	r3, r2
 800a14a:	bfc8      	it	gt
 800a14c:	b2d3      	uxtbgt	r3, r2
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	1d20      	adds	r0, r4, #4
 800a152:	469c      	mov	ip, r3
 800a154:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800a158:	d005      	beq.n	800a166 <_DrawBitmap+0x6ea>
 800a15a:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800a15e:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800a162:	f840 1c04 	str.w	r1, [r0, #-4]
 800a166:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a16a:	0136      	lsls	r6, r6, #4
 800a16c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800a170:	b2f6      	uxtb	r6, r6
 800a172:	f100 0004 	add.w	r0, r0, #4
 800a176:	d1ed      	bne.n	800a154 <_DrawBitmap+0x6d8>
 800a178:	3b01      	subs	r3, #1
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	3301      	adds	r3, #1
 800a17e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a182:	b11a      	cbz	r2, 800a18c <_DrawBitmap+0x710>
 800a184:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800a188:	2302      	movs	r3, #2
 800a18a:	e7dd      	b.n	800a148 <_DrawBitmap+0x6cc>
 800a18c:	9b05      	ldr	r3, [sp, #20]
 800a18e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800a190:	3301      	adds	r3, #1
 800a192:	44bb      	add	fp, r7
 800a194:	9305      	str	r3, [sp, #20]
 800a196:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19a:	443b      	add	r3, r7
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	e5c4      	b.n	8009d2a <_DrawBitmap+0x2ae>
 800a1a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1a2:	b113      	cbz	r3, 800a1aa <_DrawBitmap+0x72e>
 800a1a4:	a80f      	add	r0, sp, #60	; 0x3c
 800a1a6:	f004 fc91 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a1aa:	b011      	add	sp, #68	; 0x44
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	20000038 	.word	0x20000038

0800a1b4 <GUI_MEMDEV__WriteToActiveAt>:
 800a1b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a1b8:	460e      	mov	r6, r1
 800a1ba:	4690      	mov	r8, r2
 800a1bc:	4607      	mov	r7, r0
 800a1be:	f004 fc77 	bl	800eab0 <GUI_ALLOC_LockH>
 800a1c2:	6803      	ldr	r3, [r0, #0]
 800a1c4:	ac02      	add	r4, sp, #8
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	2116      	movs	r1, #22
 800a1d2:	4798      	blx	r3
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f004 fc78 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a1dc:	b11d      	cbz	r5, 800a1e6 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800a1de:	4638      	mov	r0, r7
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	47a8      	blx	r5
 800a1e6:	b002      	add	sp, #8
 800a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a1ec <GUI_MEMDEV__CreateFixed>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	4e3e      	ldr	r6, [pc, #248]	; (800a2ec <GUI_MEMDEV__CreateFixed+0x100>)
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	461d      	mov	r5, r3
 800a1f6:	6833      	ldr	r3, [r6, #0]
 800a1f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800a1fa:	7c5b      	ldrb	r3, [r3, #17]
 800a1fc:	4683      	mov	fp, r0
 800a1fe:	468a      	mov	sl, r1
 800a200:	4690      	mov	r8, r2
 800a202:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a204:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a206:	2200      	movs	r2, #0
 800a208:	f003 ff86 	bl	800e118 <GUI_DEVICE_Create>
 800a20c:	4604      	mov	r4, r0
 800a20e:	2800      	cmp	r0, #0
 800a210:	d033      	beq.n	800a27a <GUI_MEMDEV__CreateFixed+0x8e>
 800a212:	6903      	ldr	r3, [r0, #16]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	4798      	blx	r3
 800a218:	f001 f8db 	bl	800b3d2 <LCD__GetBPPDevice>
 800a21c:	fb08 f600 	mul.w	r6, r8, r0
 800a220:	9003      	str	r0, [sp, #12]
 800a222:	3607      	adds	r6, #7
 800a224:	f004 fe00 	bl	800ee28 <GUI_ALLOC_RequestSize>
 800a228:	f017 0901 	ands.w	r9, r7, #1
 800a22c:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 800a230:	d104      	bne.n	800a23c <GUI_MEMDEV__CreateFixed+0x50>
 800a232:	2304      	movs	r3, #4
 800a234:	fb90 f0f3 	sdiv	r0, r0, r3
 800a238:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	dc09      	bgt.n	800a254 <GUI_MEMDEV__CreateFixed+0x68>
 800a240:	b11e      	cbz	r6, 800a24a <GUI_MEMDEV__CreateFixed+0x5e>
 800a242:	3818      	subs	r0, #24
 800a244:	fbb0 f0f6 	udiv	r0, r0, r6
 800a248:	e000      	b.n	800a24c <GUI_MEMDEV__CreateFixed+0x60>
 800a24a:	4630      	mov	r0, r6
 800a24c:	426d      	negs	r5, r5
 800a24e:	42a8      	cmp	r0, r5
 800a250:	bfb8      	it	lt
 800a252:	4605      	movlt	r5, r0
 800a254:	f1b9 0f00 	cmp.w	r9, #0
 800a258:	d109      	bne.n	800a26e <GUI_MEMDEV__CreateFixed+0x82>
 800a25a:	f8cd 9000 	str.w	r9, [sp]
 800a25e:	4658      	mov	r0, fp
 800a260:	4651      	mov	r1, sl
 800a262:	4642      	mov	r2, r8
 800a264:	462b      	mov	r3, r5
 800a266:	f006 ff73 	bl	8011150 <GUI_USAGE_BM_Create>
 800a26a:	4607      	mov	r7, r0
 800a26c:	e000      	b.n	800a270 <GUI_MEMDEV__CreateFixed+0x84>
 800a26e:	2700      	movs	r7, #0
 800a270:	2d00      	cmp	r5, #0
 800a272:	dc04      	bgt.n	800a27e <GUI_MEMDEV__CreateFixed+0x92>
 800a274:	4620      	mov	r0, r4
 800a276:	f003 ff4d 	bl	800e114 <GUI_DEVICE_Delete>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e032      	b.n	800a2e4 <GUI_MEMDEV__CreateFixed+0xf8>
 800a27e:	fb06 f005 	mul.w	r0, r6, r5
 800a282:	3018      	adds	r0, #24
 800a284:	f1b9 0f00 	cmp.w	r9, #0
 800a288:	d002      	beq.n	800a290 <GUI_MEMDEV__CreateFixed+0xa4>
 800a28a:	f004 fe59 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 800a28e:	e001      	b.n	800a294 <GUI_MEMDEV__CreateFixed+0xa8>
 800a290:	f004 fe5a 	bl	800ef48 <GUI_ALLOC_AllocZero>
 800a294:	4681      	mov	r9, r0
 800a296:	b940      	cbnz	r0, 800a2aa <GUI_MEMDEV__CreateFixed+0xbe>
 800a298:	4620      	mov	r0, r4
 800a29a:	f003 ff3b 	bl	800e114 <GUI_DEVICE_Delete>
 800a29e:	2f00      	cmp	r7, #0
 800a2a0:	d0eb      	beq.n	800a27a <GUI_MEMDEV__CreateFixed+0x8e>
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f004 fc32 	bl	800eb0c <GUI_ALLOC_Free>
 800a2a8:	e01b      	b.n	800a2e2 <GUI_MEMDEV__CreateFixed+0xf6>
 800a2aa:	f004 fc01 	bl	800eab0 <GUI_ALLOC_LockH>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	a806      	add	r0, sp, #24
 800a2b2:	9a03      	ldr	r2, [sp, #12]
 800a2b4:	f840 3d04 	str.w	r3, [r0, #-4]!
 800a2b8:	611a      	str	r2, [r3, #16]
 800a2ba:	601c      	str	r4, [r3, #0]
 800a2bc:	f8a3 b004 	strh.w	fp, [r3, #4]
 800a2c0:	f8a3 a006 	strh.w	sl, [r3, #6]
 800a2c4:	f8a3 8008 	strh.w	r8, [r3, #8]
 800a2c8:	815d      	strh	r5, [r3, #10]
 800a2ca:	60de      	str	r6, [r3, #12]
 800a2cc:	615f      	str	r7, [r3, #20]
 800a2ce:	f004 fbfd 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a2d2:	4a06      	ldr	r2, [pc, #24]	; (800a2ec <GUI_MEMDEV__CreateFixed+0x100>)
 800a2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	6813      	ldr	r3, [r2, #0]
 800a2da:	f8c4 9008 	str.w	r9, [r4, #8]
 800a2de:	7c5b      	ldrb	r3, [r3, #17]
 800a2e0:	61a3      	str	r3, [r4, #24]
 800a2e2:	4648      	mov	r0, r9
 800a2e4:	b007      	add	sp, #28
 800a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000038 	.word	0x20000038

0800a2f0 <GUI_MEMDEV_GetBitsPerPixel>:
 800a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b170      	cbz	r0, 800a314 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800a2f6:	f004 fbdb 	bl	800eab0 <GUI_ALLOC_LockH>
 800a2fa:	6803      	ldr	r3, [r0, #0]
 800a2fc:	ac02      	add	r4, sp, #8
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	4798      	blx	r3
 800a308:	f001 f863 	bl	800b3d2 <LCD__GetBPPDevice>
 800a30c:	4605      	mov	r5, r0
 800a30e:	4620      	mov	r0, r4
 800a310:	f004 fbdc 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a314:	4628      	mov	r0, r5
 800a316:	b003      	add	sp, #12
 800a318:	bd30      	pop	{r4, r5, pc}
	...

0800a31c <GUI_MEMDEV_Delete>:
 800a31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a31e:	4604      	mov	r4, r0
 800a320:	b1d0      	cbz	r0, 800a358 <GUI_MEMDEV_Delete+0x3c>
 800a322:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <GUI_MEMDEV_Delete+0x40>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a328:	4283      	cmp	r3, r0
 800a32a:	d101      	bne.n	800a330 <GUI_MEMDEV_Delete+0x14>
 800a32c:	f002 ff80 	bl	800d230 <GUI_SelectLCD>
 800a330:	4620      	mov	r0, r4
 800a332:	f004 fbbd 	bl	800eab0 <GUI_ALLOC_LockH>
 800a336:	9001      	str	r0, [sp, #4]
 800a338:	6940      	ldr	r0, [r0, #20]
 800a33a:	b108      	cbz	r0, 800a340 <GUI_MEMDEV_Delete+0x24>
 800a33c:	f006 ff34 	bl	80111a8 <GUI_USAGE_DecUseCnt>
 800a340:	ad02      	add	r5, sp, #8
 800a342:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a346:	6818      	ldr	r0, [r3, #0]
 800a348:	f003 fee4 	bl	800e114 <GUI_DEVICE_Delete>
 800a34c:	4628      	mov	r0, r5
 800a34e:	f004 fbbd 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a352:	4620      	mov	r0, r4
 800a354:	f004 fbda 	bl	800eb0c <GUI_ALLOC_Free>
 800a358:	b003      	add	sp, #12
 800a35a:	bd30      	pop	{r4, r5, pc}
 800a35c:	20000038 	.word	0x20000038

0800a360 <GUI_MEMDEV_CreateEx>:
 800a360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	469a      	mov	sl, r3
 800a366:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <GUI_MEMDEV_CreateEx+0x6c>)
 800a368:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4607      	mov	r7, r0
 800a36e:	7c58      	ldrb	r0, [r3, #17]
 800a370:	4b17      	ldr	r3, [pc, #92]	; (800a3d0 <GUI_MEMDEV_CreateEx+0x70>)
 800a372:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800a376:	4688      	mov	r8, r1
 800a378:	4691      	mov	r9, r2
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b04      	cmp	r3, #4
 800a380:	d006      	beq.n	800a390 <GUI_MEMDEV_CreateEx+0x30>
 800a382:	6824      	ldr	r4, [r4, #0]
 800a384:	2c00      	cmp	r4, #0
 800a386:	d1f8      	bne.n	800a37a <GUI_MEMDEV_CreateEx+0x1a>
 800a388:	f003 feb4 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800a38c:	4604      	mov	r4, r0
 800a38e:	b130      	cbz	r0, 800a39e <GUI_MEMDEV_CreateEx+0x3e>
 800a390:	68e3      	ldr	r3, [r4, #12]
 800a392:	4620      	mov	r0, r4
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	2101      	movs	r1, #1
 800a398:	4798      	blx	r3
 800a39a:	4606      	mov	r6, r0
 800a39c:	b908      	cbnz	r0, 800a3a2 <GUI_MEMDEV_CreateEx+0x42>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	e010      	b.n	800a3c4 <GUI_MEMDEV_CreateEx+0x64>
 800a3a2:	6924      	ldr	r4, [r4, #16]
 800a3a4:	68a3      	ldr	r3, [r4, #8]
 800a3a6:	4798      	blx	r3
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	bf04      	itt	eq
 800a3ac:	f045 0501 	orreq.w	r5, r5, #1
 800a3b0:	4c08      	ldreq	r4, [pc, #32]	; (800a3d4 <GUI_MEMDEV_CreateEx+0x74>)
 800a3b2:	9402      	str	r4, [sp, #8]
 800a3b4:	e88d 0060 	stmia.w	sp, {r5, r6}
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	4641      	mov	r1, r8
 800a3bc:	464a      	mov	r2, r9
 800a3be:	4653      	mov	r3, sl
 800a3c0:	f7ff ff14 	bl	800a1ec <GUI_MEMDEV__CreateFixed>
 800a3c4:	b004      	add	sp, #16
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000038 	.word	0x20000038
 800a3d0:	20023074 	.word	0x20023074
 800a3d4:	08014044 	.word	0x08014044

0800a3d8 <GUI_MEMDEV_Select>:
 800a3d8:	4b11      	ldr	r3, [pc, #68]	; (800a420 <GUI_MEMDEV_Select+0x48>)
 800a3da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	4604      	mov	r4, r0
 800a3e0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800a3e2:	461f      	mov	r7, r3
 800a3e4:	b910      	cbnz	r0, 800a3ec <GUI_MEMDEV_Select+0x14>
 800a3e6:	f002 ff23 	bl	800d230 <GUI_SelectLCD>
 800a3ea:	e016      	b.n	800a41a <GUI_MEMDEV_Select+0x42>
 800a3ec:	b10e      	cbz	r6, 800a3f2 <GUI_MEMDEV_Select+0x1a>
 800a3ee:	f002 ff1f 	bl	800d230 <GUI_SelectLCD>
 800a3f2:	f7fe feef 	bl	80091d4 <WM_Deactivate>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f004 fb5a 	bl	800eab0 <GUI_ALLOC_LockH>
 800a3fc:	ad02      	add	r5, sp, #8
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a404:	661c      	str	r4, [r3, #96]	; 0x60
 800a406:	6800      	ldr	r0, [r0, #0]
 800a408:	f003 fec2 	bl	800e190 <GUI_DEVICE_Link>
 800a40c:	4628      	mov	r0, r5
 800a40e:	f004 fb5d 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a412:	f000 fe21 	bl	800b058 <LCD_UpdateColorIndices>
 800a416:	f001 fb33 	bl	800ba80 <LCD_SetClipRectMax>
 800a41a:	4630      	mov	r0, r6
 800a41c:	b003      	add	sp, #12
 800a41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a420:	20000038 	.word	0x20000038

0800a424 <GUI_MEMDEV_CopyToLCDAt>:
 800a424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a428:	460c      	mov	r4, r1
 800a42a:	b085      	sub	sp, #20
 800a42c:	4615      	mov	r5, r2
 800a42e:	4606      	mov	r6, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	d041      	beq.n	800a4b8 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800a434:	2000      	movs	r0, #0
 800a436:	f001 ffc9 	bl	800c3cc <GUI_SetDrawMode>
 800a43a:	4b21      	ldr	r3, [pc, #132]	; (800a4c0 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4607      	mov	r7, r0
 800a440:	4630      	mov	r0, r6
 800a442:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800a446:	f004 fb33 	bl	800eab0 <GUI_ALLOC_LockH>
 800a44a:	6803      	ldr	r3, [r0, #0]
 800a44c:	9001      	str	r0, [sp, #4]
 800a44e:	6998      	ldr	r0, [r3, #24]
 800a450:	f002 fed6 	bl	800d200 <GUI_SelectLayer>
 800a454:	4b1b      	ldr	r3, [pc, #108]	; (800a4c4 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800a456:	429c      	cmp	r4, r3
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	bf04      	itt	eq
 800a45c:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 800a460:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 800a464:	891a      	ldrh	r2, [r3, #8]
 800a466:	895b      	ldrh	r3, [r3, #10]
 800a468:	f8ad 4008 	strh.w	r4, [sp, #8]
 800a46c:	3a01      	subs	r2, #1
 800a46e:	3b01      	subs	r3, #1
 800a470:	4422      	add	r2, r4
 800a472:	442b      	add	r3, r5
 800a474:	4681      	mov	r9, r0
 800a476:	f8ad 200c 	strh.w	r2, [sp, #12]
 800a47a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a47e:	f8ad 500a 	strh.w	r5, [sp, #10]
 800a482:	f7fe fe9f 	bl	80091c4 <WM_Activate>
 800a486:	a801      	add	r0, sp, #4
 800a488:	f004 fb20 	bl	800eacc <GUI_ALLOC_UnlockH>
 800a48c:	a802      	add	r0, sp, #8
 800a48e:	f7fe fcc5 	bl	8008e1c <WM__InitIVRSearch>
 800a492:	b948      	cbnz	r0, 800a4a8 <GUI_MEMDEV_CopyToLCDAt+0x84>
 800a494:	4648      	mov	r0, r9
 800a496:	f002 feb3 	bl	800d200 <GUI_SelectLayer>
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7ff ff9c 	bl	800a3d8 <GUI_MEMDEV_Select>
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f001 ff93 	bl	800c3cc <GUI_SetDrawMode>
 800a4a6:	e007      	b.n	800a4b8 <GUI_MEMDEV_CopyToLCDAt+0x94>
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	f006 f91b 	bl	80106e8 <GUI_MEMDEV__WriteToActiveOpaque>
 800a4b2:	f7fe fbf1 	bl	8008c98 <WM__GetNextIVR>
 800a4b6:	e7ec      	b.n	800a492 <GUI_MEMDEV_CopyToLCDAt+0x6e>
 800a4b8:	b005      	add	sp, #20
 800a4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000038 	.word	0x20000038
 800a4c4:	fffff001 	.word	0xfffff001

0800a4c8 <GUI_MEMDEV_CopyToLCD>:
 800a4c8:	4901      	ldr	r1, [pc, #4]	; (800a4d0 <GUI_MEMDEV_CopyToLCD+0x8>)
 800a4ca:	460a      	mov	r2, r1
 800a4cc:	f7ff bfaa 	b.w	800a424 <GUI_MEMDEV_CopyToLCDAt>
 800a4d0:	fffff001 	.word	0xfffff001

0800a4d4 <_GetRect>:
 800a4d4:	6883      	ldr	r3, [r0, #8]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	800a      	strh	r2, [r1, #0]
 800a4da:	804a      	strh	r2, [r1, #2]
 800a4dc:	695a      	ldr	r2, [r3, #20]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	3a01      	subs	r2, #1
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	808a      	strh	r2, [r1, #4]
 800a4e6:	80cb      	strh	r3, [r1, #6]
 800a4e8:	4770      	bx	lr

0800a4ea <_SetPixelIndex>:
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	6880      	ldr	r0, [r0, #8]
 800a4ee:	69c4      	ldr	r4, [r0, #28]
 800a4f0:	6800      	ldr	r0, [r0, #0]
 800a4f2:	fb04 1202 	mla	r2, r4, r2, r1
 800a4f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a4fa:	bd10      	pop	{r4, pc}

0800a4fc <_GetPixelIndex>:
 800a4fc:	6883      	ldr	r3, [r0, #8]
 800a4fe:	69d8      	ldr	r0, [r3, #28]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	fb00 1202 	mla	r2, r0, r2, r1
 800a506:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a50a:	4770      	bx	lr

0800a50c <_XorPixel>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	4604      	mov	r4, r0
 800a512:	460f      	mov	r7, r1
 800a514:	4616      	mov	r6, r2
 800a516:	f7ff fff1 	bl	800a4fc <_GetPixelIndex>
 800a51a:	6925      	ldr	r5, [r4, #16]
 800a51c:	68ab      	ldr	r3, [r5, #8]
 800a51e:	4680      	mov	r8, r0
 800a520:	4798      	blx	r3
 800a522:	4639      	mov	r1, r7
 800a524:	ea80 0308 	eor.w	r3, r0, r8
 800a528:	4632      	mov	r2, r6
 800a52a:	4620      	mov	r0, r4
 800a52c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a530:	f7ff bfdb 	b.w	800a4ea <_SetPixelIndex>

0800a534 <_FillRect>:
 800a534:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a538:	6886      	ldr	r6, [r0, #8]
 800a53a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a53c:	6b34      	ldr	r4, [r6, #48]	; 0x30
 800a53e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800a654 <_FillRect+0x120>
 800a542:	4689      	mov	r9, r1
 800a544:	4692      	mov	sl, r2
 800a546:	b144      	cbz	r4, 800a55a <_FillRect+0x26>
 800a548:	9700      	str	r7, [sp, #0]
 800a54a:	f8dc 5000 	ldr.w	r5, [ip]
 800a54e:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800a550:	682d      	ldr	r5, [r5, #0]
 800a552:	9501      	str	r5, [sp, #4]
 800a554:	6980      	ldr	r0, [r0, #24]
 800a556:	47a0      	blx	r4
 800a558:	e079      	b.n	800a64e <_FillRect+0x11a>
 800a55a:	1a5b      	subs	r3, r3, r1
 800a55c:	f8dc 1000 	ldr.w	r1, [ip]
 800a560:	f891 c010 	ldrb.w	ip, [r1, #16]
 800a564:	ebc2 0807 	rsb	r8, r2, r7
 800a568:	f01c 0c01 	ands.w	ip, ip, #1
 800a56c:	f103 0401 	add.w	r4, r3, #1
 800a570:	f108 0501 	add.w	r5, r8, #1
 800a574:	69f7      	ldr	r7, [r6, #28]
 800a576:	d021      	beq.n	800a5bc <_FillRect+0x88>
 800a578:	6903      	ldr	r3, [r0, #16]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	4798      	blx	r3
 800a57e:	69f2      	ldr	r2, [r6, #28]
 800a580:	2c00      	cmp	r4, #0
 800a582:	d064      	beq.n	800a64e <_FillRect+0x11a>
 800a584:	f06f 0c03 	mvn.w	ip, #3
 800a588:	fb02 990a 	mla	r9, r2, sl, r9
 800a58c:	fb0c fc07 	mul.w	ip, ip, r7
 800a590:	fb07 9708 	mla	r7, r7, r8, r9
 800a594:	00bf      	lsls	r7, r7, #2
 800a596:	2d00      	cmp	r5, #0
 800a598:	d059      	beq.n	800a64e <_FillRect+0x11a>
 800a59a:	3d01      	subs	r5, #1
 800a59c:	463b      	mov	r3, r7
 800a59e:	4622      	mov	r2, r4
 800a5a0:	f8d6 8000 	ldr.w	r8, [r6]
 800a5a4:	f853 1008 	ldr.w	r1, [r3, r8]
 800a5a8:	3a01      	subs	r2, #1
 800a5aa:	ea81 0100 	eor.w	r1, r1, r0
 800a5ae:	f843 1008 	str.w	r1, [r3, r8]
 800a5b2:	f103 0304 	add.w	r3, r3, #4
 800a5b6:	d1f3      	bne.n	800a5a0 <_FillRect+0x6c>
 800a5b8:	4467      	add	r7, ip
 800a5ba:	e7ec      	b.n	800a596 <_FillRect+0x62>
 800a5bc:	6830      	ldr	r0, [r6, #0]
 800a5be:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800a5c0:	fb07 9202 	mla	r2, r7, r2, r9
 800a5c4:	2c0f      	cmp	r4, #15
 800a5c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a5ca:	6808      	ldr	r0, [r1, #0]
 800a5cc:	d92f      	bls.n	800a62e <_FillRect+0xfa>
 800a5ce:	f1a3 0a0f 	sub.w	sl, r3, #15
 800a5d2:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800a5d6:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800a5da:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 800a5de:	f10a 0a01 	add.w	sl, sl, #1
 800a5e2:	fb09 2101 	mla	r1, r9, r1, r2
 800a5e6:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 800a5ea:	462e      	mov	r6, r5
 800a5ec:	4662      	mov	r2, ip
 800a5ee:	b1e6      	cbz	r6, 800a62a <_FillRect+0xf6>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	3a10      	subs	r2, #16
 800a5f6:	2a0f      	cmp	r2, #15
 800a5f8:	6018      	str	r0, [r3, #0]
 800a5fa:	6058      	str	r0, [r3, #4]
 800a5fc:	6098      	str	r0, [r3, #8]
 800a5fe:	60d8      	str	r0, [r3, #12]
 800a600:	6118      	str	r0, [r3, #16]
 800a602:	6158      	str	r0, [r3, #20]
 800a604:	6198      	str	r0, [r3, #24]
 800a606:	61d8      	str	r0, [r3, #28]
 800a608:	6218      	str	r0, [r3, #32]
 800a60a:	6258      	str	r0, [r3, #36]	; 0x24
 800a60c:	6298      	str	r0, [r3, #40]	; 0x28
 800a60e:	62d8      	str	r0, [r3, #44]	; 0x2c
 800a610:	6318      	str	r0, [r3, #48]	; 0x30
 800a612:	6358      	str	r0, [r3, #52]	; 0x34
 800a614:	6398      	str	r0, [r3, #56]	; 0x38
 800a616:	63d8      	str	r0, [r3, #60]	; 0x3c
 800a618:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800a61c:	d8ea      	bhi.n	800a5f4 <_FillRect+0xc0>
 800a61e:	eb01 020a 	add.w	r2, r1, sl
 800a622:	3e01      	subs	r6, #1
 800a624:	ebc9 0101 	rsb	r1, r9, r1
 800a628:	e7e1      	b.n	800a5ee <_FillRect+0xba>
 800a62a:	f004 040f 	and.w	r4, r4, #15
 800a62e:	b174      	cbz	r4, 800a64e <_FillRect+0x11a>
 800a630:	00bf      	lsls	r7, r7, #2
 800a632:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800a636:	fb07 2208 	mla	r2, r7, r8, r2
 800a63a:	b145      	cbz	r5, 800a64e <_FillRect+0x11a>
 800a63c:	4611      	mov	r1, r2
 800a63e:	4623      	mov	r3, r4
 800a640:	3b01      	subs	r3, #1
 800a642:	f841 0b04 	str.w	r0, [r1], #4
 800a646:	d1fb      	bne.n	800a640 <_FillRect+0x10c>
 800a648:	3d01      	subs	r5, #1
 800a64a:	1bd2      	subs	r2, r2, r7
 800a64c:	e7f5      	b.n	800a63a <_FillRect+0x106>
 800a64e:	b002      	add	sp, #8
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	20000038 	.word	0x20000038

0800a658 <_DrawHLine>:
 800a658:	b507      	push	{r0, r1, r2, lr}
 800a65a:	9200      	str	r2, [sp, #0]
 800a65c:	f7ff ff6a 	bl	800a534 <_FillRect>
 800a660:	b003      	add	sp, #12
 800a662:	f85d fb04 	ldr.w	pc, [sp], #4

0800a666 <_DrawVLine>:
 800a666:	b507      	push	{r0, r1, r2, lr}
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	460b      	mov	r3, r1
 800a66c:	f7ff ff62 	bl	800a534 <_FillRect>
 800a670:	b003      	add	sp, #12
 800a672:	f85d fb04 	ldr.w	pc, [sp], #4

0800a676 <_GetDevProp>:
 800a676:	3901      	subs	r1, #1
 800a678:	6883      	ldr	r3, [r0, #8]
 800a67a:	290d      	cmp	r1, #13
 800a67c:	d814      	bhi.n	800a6a8 <_GetDevProp+0x32>
 800a67e:	e8df f001 	tbb	[pc, r1]
 800a682:	0b09      	.short	0x0b09
 800a684:	13130f0d 	.word	0x13130f0d
 800a688:	11160713 	.word	0x11160713
 800a68c:	16161611 	.word	0x16161611
 800a690:	2020      	movs	r0, #32
 800a692:	4770      	bx	lr
 800a694:	68d8      	ldr	r0, [r3, #12]
 800a696:	4770      	bx	lr
 800a698:	6918      	ldr	r0, [r3, #16]
 800a69a:	4770      	bx	lr
 800a69c:	6958      	ldr	r0, [r3, #20]
 800a69e:	4770      	bx	lr
 800a6a0:	6998      	ldr	r0, [r3, #24]
 800a6a2:	4770      	bx	lr
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	4770      	bx	lr
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6ac:	4770      	bx	lr
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <_GetDevData>:
 800a6b4:	4802      	ldr	r0, [pc, #8]	; (800a6c0 <_GetDevData+0xc>)
 800a6b6:	2901      	cmp	r1, #1
 800a6b8:	bf18      	it	ne
 800a6ba:	2000      	movne	r0, #0
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	08012a68 	.word	0x08012a68

0800a6c4 <_ReadRect>:
 800a6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	460f      	mov	r7, r1
 800a6ca:	6881      	ldr	r1, [r0, #8]
 800a6cc:	69c8      	ldr	r0, [r1, #28]
 800a6ce:	f06f 0903 	mvn.w	r9, #3
 800a6d2:	fb00 7502 	mla	r5, r0, r2, r7
 800a6d6:	1bdb      	subs	r3, r3, r7
 800a6d8:	00ae      	lsls	r6, r5, #2
 800a6da:	fb09 fc00 	mul.w	ip, r9, r0
 800a6de:	fb09 f505 	mul.w	r5, r9, r5
 800a6e2:	f103 0901 	add.w	r9, r3, #1
 800a6e6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800a6ea:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800a6ee:	1c5f      	adds	r7, r3, #1
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a6f6:	680c      	ldr	r4, [r1, #0]
 800a6f8:	44aa      	add	sl, r5
 800a6fa:	f850 b004 	ldr.w	fp, [r0, r4]
 800a6fe:	f84a b000 	str.w	fp, [sl, r0]
 800a702:	3f01      	subs	r7, #1
 800a704:	f100 0004 	add.w	r0, r0, #4
 800a708:	d1f3      	bne.n	800a6f2 <_ReadRect+0x2e>
 800a70a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a70c:	444c      	add	r4, r9
 800a70e:	940a      	str	r4, [sp, #40]	; 0x28
 800a710:	3201      	adds	r2, #1
 800a712:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a714:	1e50      	subs	r0, r2, #1
 800a716:	42a0      	cmp	r0, r4
 800a718:	4446      	add	r6, r8
 800a71a:	4465      	add	r5, ip
 800a71c:	dbe7      	blt.n	800a6ee <_ReadRect+0x2a>
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a724 <_GetDevFunc>:
 800a724:	3901      	subs	r1, #1
 800a726:	2924      	cmp	r1, #36	; 0x24
 800a728:	d844      	bhi.n	800a7b4 <_GetDevFunc+0x90>
 800a72a:	e8df f001 	tbb	[pc, r1]
 800a72e:	1b41      	.short	0x1b41
 800a730:	1d431917 	.word	0x1d431917
 800a734:	45134343 	.word	0x45134343
 800a738:	21431f15 	.word	0x21431f15
 800a73c:	43434323 	.word	0x43434323
 800a740:	2f292725 	.word	0x2f292725
 800a744:	43314343 	.word	0x43314343
 800a748:	43434343 	.word	0x43434343
 800a74c:	2d2b3543 	.word	0x2d2b3543
 800a750:	433d      	.short	0x433d
 800a752:	39          	.byte	0x39
 800a753:	00          	.byte	0x00
 800a754:	4819      	ldr	r0, [pc, #100]	; (800a7bc <_GetDevFunc+0x98>)
 800a756:	4770      	bx	lr
 800a758:	4819      	ldr	r0, [pc, #100]	; (800a7c0 <_GetDevFunc+0x9c>)
 800a75a:	4770      	bx	lr
 800a75c:	4819      	ldr	r0, [pc, #100]	; (800a7c4 <_GetDevFunc+0xa0>)
 800a75e:	4770      	bx	lr
 800a760:	4819      	ldr	r0, [pc, #100]	; (800a7c8 <_GetDevFunc+0xa4>)
 800a762:	4770      	bx	lr
 800a764:	4819      	ldr	r0, [pc, #100]	; (800a7cc <_GetDevFunc+0xa8>)
 800a766:	4770      	bx	lr
 800a768:	4819      	ldr	r0, [pc, #100]	; (800a7d0 <_GetDevFunc+0xac>)
 800a76a:	4770      	bx	lr
 800a76c:	4819      	ldr	r0, [pc, #100]	; (800a7d4 <_GetDevFunc+0xb0>)
 800a76e:	4770      	bx	lr
 800a770:	4819      	ldr	r0, [pc, #100]	; (800a7d8 <_GetDevFunc+0xb4>)
 800a772:	4770      	bx	lr
 800a774:	4819      	ldr	r0, [pc, #100]	; (800a7dc <_GetDevFunc+0xb8>)
 800a776:	4770      	bx	lr
 800a778:	4819      	ldr	r0, [pc, #100]	; (800a7e0 <_GetDevFunc+0xbc>)
 800a77a:	4770      	bx	lr
 800a77c:	4819      	ldr	r0, [pc, #100]	; (800a7e4 <_GetDevFunc+0xc0>)
 800a77e:	4770      	bx	lr
 800a780:	4819      	ldr	r0, [pc, #100]	; (800a7e8 <_GetDevFunc+0xc4>)
 800a782:	4770      	bx	lr
 800a784:	4819      	ldr	r0, [pc, #100]	; (800a7ec <_GetDevFunc+0xc8>)
 800a786:	4770      	bx	lr
 800a788:	4819      	ldr	r0, [pc, #100]	; (800a7f0 <_GetDevFunc+0xcc>)
 800a78a:	4770      	bx	lr
 800a78c:	4819      	ldr	r0, [pc, #100]	; (800a7f4 <_GetDevFunc+0xd0>)
 800a78e:	4770      	bx	lr
 800a790:	6803      	ldr	r3, [r0, #0]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a796:	4770      	bx	lr
 800a798:	6803      	ldr	r3, [r0, #0]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a79e:	4770      	bx	lr
 800a7a0:	6803      	ldr	r3, [r0, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a7a6:	4770      	bx	lr
 800a7a8:	6803      	ldr	r3, [r0, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a7ae:	4770      	bx	lr
 800a7b0:	4811      	ldr	r0, [pc, #68]	; (800a7f8 <_GetDevFunc+0xd4>)
 800a7b2:	4770      	bx	lr
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	4770      	bx	lr
 800a7b8:	4810      	ldr	r0, [pc, #64]	; (800a7fc <_GetDevFunc+0xd8>)
 800a7ba:	4770      	bx	lr
 800a7bc:	0800ae8f 	.word	0x0800ae8f
 800a7c0:	0800aff1 	.word	0x0800aff1
 800a7c4:	0800af0b 	.word	0x0800af0b
 800a7c8:	0800ade3 	.word	0x0800ade3
 800a7cc:	0800ae67 	.word	0x0800ae67
 800a7d0:	0800ae3f 	.word	0x0800ae3f
 800a7d4:	0800ae25 	.word	0x0800ae25
 800a7d8:	0800a84d 	.word	0x0800a84d
 800a7dc:	0800a843 	.word	0x0800a843
 800a7e0:	0800a82d 	.word	0x0800a82d
 800a7e4:	0800a817 	.word	0x0800a817
 800a7e8:	0800a801 	.word	0x0800a801
 800a7ec:	0800aeb9 	.word	0x0800aeb9
 800a7f0:	0800adff 	.word	0x0800adff
 800a7f4:	0800ad9d 	.word	0x0800ad9d
 800a7f8:	0800a6c5 	.word	0x0800a6c5
 800a7fc:	0800b033 	.word	0x0800b033

0800a800 <_SetChroma>:
 800a800:	b507      	push	{r0, r1, r2, lr}
 800a802:	6980      	ldr	r0, [r0, #24]
 800a804:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a808:	210d      	movs	r1, #13
 800a80a:	466a      	mov	r2, sp
 800a80c:	f7fa fbf2 	bl	8004ff4 <LCD_X_DisplayDriver>
 800a810:	b003      	add	sp, #12
 800a812:	f85d fb04 	ldr.w	pc, [sp], #4

0800a816 <_SetChromaMode>:
 800a816:	b507      	push	{r0, r1, r2, lr}
 800a818:	aa02      	add	r2, sp, #8
 800a81a:	6980      	ldr	r0, [r0, #24]
 800a81c:	f842 1d04 	str.w	r1, [r2, #-4]!
 800a820:	210c      	movs	r1, #12
 800a822:	f7fa fbe7 	bl	8004ff4 <LCD_X_DisplayDriver>
 800a826:	b003      	add	sp, #12
 800a828:	f85d fb04 	ldr.w	pc, [sp], #4

0800a82c <_SetAlphaMode>:
 800a82c:	b507      	push	{r0, r1, r2, lr}
 800a82e:	aa02      	add	r2, sp, #8
 800a830:	6980      	ldr	r0, [r0, #24]
 800a832:	f842 1d04 	str.w	r1, [r2, #-4]!
 800a836:	210b      	movs	r1, #11
 800a838:	f7fa fbdc 	bl	8004ff4 <LCD_X_DisplayDriver>
 800a83c:	b003      	add	sp, #12
 800a83e:	f85d fb04 	ldr.w	pc, [sp], #4

0800a842 <_Off>:
 800a842:	6980      	ldr	r0, [r0, #24]
 800a844:	2106      	movs	r1, #6
 800a846:	2200      	movs	r2, #0
 800a848:	f7fa bbd4 	b.w	8004ff4 <LCD_X_DisplayDriver>

0800a84c <_On>:
 800a84c:	6980      	ldr	r0, [r0, #24]
 800a84e:	2105      	movs	r1, #5
 800a850:	2200      	movs	r2, #0
 800a852:	f7fa bbcf 	b.w	8004ff4 <LCD_X_DisplayDriver>

0800a856 <_SetOrg>:
 800a856:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a85a:	2300      	movs	r3, #0
 800a85c:	4607      	mov	r7, r0
 800a85e:	6884      	ldr	r4, [r0, #8]
 800a860:	6980      	ldr	r0, [r0, #24]
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	460d      	mov	r5, r1
 800a866:	4616      	mov	r6, r2
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	f000 fcf7 	bl	800b25c <LCD_GetMirrorXEx>
 800a86e:	4680      	mov	r8, r0
 800a870:	69b8      	ldr	r0, [r7, #24]
 800a872:	f000 fcf6 	bl	800b262 <LCD_GetMirrorYEx>
 800a876:	4681      	mov	r9, r0
 800a878:	69b8      	ldr	r0, [r7, #24]
 800a87a:	f000 fcf5 	bl	800b268 <LCD_GetSwapXYEx>
 800a87e:	0080      	lsls	r0, r0, #2
 800a880:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800a884:	ea40 0008 	orr.w	r0, r0, r8
 800a888:	2807      	cmp	r0, #7
 800a88a:	d826      	bhi.n	800a8da <_SetOrg+0x84>
 800a88c:	e8df f000 	tbb	[pc, r0]
 800a890:	0b0f0408 	.word	0x0b0f0408
 800a894:	1b1f1519 	.word	0x1b1f1519
 800a898:	6962      	ldr	r2, [r4, #20]
 800a89a:	68e3      	ldr	r3, [r4, #12]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	1b5d      	subs	r5, r3, r5
 800a8a0:	9500      	str	r5, [sp, #0]
 800a8a2:	9601      	str	r6, [sp, #4]
 800a8a4:	e019      	b.n	800a8da <_SetOrg+0x84>
 800a8a6:	6962      	ldr	r2, [r4, #20]
 800a8a8:	68e3      	ldr	r3, [r4, #12]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	1b5d      	subs	r5, r3, r5
 800a8ae:	69a2      	ldr	r2, [r4, #24]
 800a8b0:	6923      	ldr	r3, [r4, #16]
 800a8b2:	9500      	str	r5, [sp, #0]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	1b9e      	subs	r6, r3, r6
 800a8b8:	e7f3      	b.n	800a8a2 <_SetOrg+0x4c>
 800a8ba:	69a2      	ldr	r2, [r4, #24]
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	1b9e      	subs	r6, r3, r6
 800a8c2:	9600      	str	r6, [sp, #0]
 800a8c4:	e008      	b.n	800a8d8 <_SetOrg+0x82>
 800a8c6:	69a2      	ldr	r2, [r4, #24]
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	1b9e      	subs	r6, r3, r6
 800a8ce:	6962      	ldr	r2, [r4, #20]
 800a8d0:	68e3      	ldr	r3, [r4, #12]
 800a8d2:	9600      	str	r6, [sp, #0]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	1b5d      	subs	r5, r3, r5
 800a8d8:	9501      	str	r5, [sp, #4]
 800a8da:	69b8      	ldr	r0, [r7, #24]
 800a8dc:	2103      	movs	r1, #3
 800a8de:	466a      	mov	r2, sp
 800a8e0:	f7fa fb88 	bl	8004ff4 <LCD_X_DisplayDriver>
 800a8e4:	b003      	add	sp, #12
 800a8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a8ec <_DrawBitmap>:
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f0:	b08d      	sub	sp, #52	; 0x34
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a8f6:	910a      	str	r1, [sp, #40]	; 0x28
 800a8f8:	2804      	cmp	r0, #4
 800a8fa:	469b      	mov	fp, r3
 800a8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8fe:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800a900:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a902:	68b3      	ldr	r3, [r6, #8]
 800a904:	d011      	beq.n	800a92a <_DrawBitmap+0x3e>
 800a906:	dc09      	bgt.n	800a91c <_DrawBitmap+0x30>
 800a908:	2801      	cmp	r0, #1
 800a90a:	d013      	beq.n	800a934 <_DrawBitmap+0x48>
 800a90c:	2802      	cmp	r0, #2
 800a90e:	f040 822d 	bne.w	800ad6c <_DrawBitmap+0x480>
 800a912:	4aab      	ldr	r2, [pc, #684]	; (800abc0 <_DrawBitmap+0x2d4>)
 800a914:	6812      	ldr	r2, [r2, #0]
 800a916:	920b      	str	r2, [sp, #44]	; 0x2c
 800a918:	2100      	movs	r1, #0
 800a91a:	e0b8      	b.n	800aa8e <_DrawBitmap+0x1a2>
 800a91c:	2808      	cmp	r0, #8
 800a91e:	f000 8172 	beq.w	800ac06 <_DrawBitmap+0x31a>
 800a922:	2820      	cmp	r0, #32
 800a924:	f000 81fb 	beq.w	800ad1e <_DrawBitmap+0x432>
 800a928:	e220      	b.n	800ad6c <_DrawBitmap+0x480>
 800a92a:	4aa5      	ldr	r2, [pc, #660]	; (800abc0 <_DrawBitmap+0x2d4>)
 800a92c:	6812      	ldr	r2, [r2, #0]
 800a92e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a930:	2100      	movs	r1, #0
 800a932:	e10a      	b.n	800ab4a <_DrawBitmap+0x25e>
 800a934:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800a936:	b90f      	cbnz	r7, 800a93c <_DrawBitmap+0x50>
 800a938:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a93a:	e042      	b.n	800a9c2 <_DrawBitmap+0xd6>
 800a93c:	4ba0      	ldr	r3, [pc, #640]	; (800abc0 <_DrawBitmap+0x2d4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	7c1b      	ldrb	r3, [r3, #16]
 800a942:	07db      	lsls	r3, r3, #31
 800a944:	d4f8      	bmi.n	800a938 <_DrawBitmap+0x4c>
 800a946:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a948:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a94a:	9302      	str	r3, [sp, #8]
 800a94c:	e88d 0801 	stmia.w	sp, {r0, fp}
 800a950:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a952:	9003      	str	r0, [sp, #12]
 800a954:	9504      	str	r5, [sp, #16]
 800a956:	69b0      	ldr	r0, [r6, #24]
 800a958:	4623      	mov	r3, r4
 800a95a:	47b8      	blx	r7
 800a95c:	e206      	b.n	800ad6c <_DrawBitmap+0x480>
 800a95e:	4b98      	ldr	r3, [pc, #608]	; (800abc0 <_DrawBitmap+0x2d4>)
 800a960:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a968:	7c1b      	ldrb	r3, [r3, #16]
 800a96a:	f8d5 c000 	ldr.w	ip, [r5]
 800a96e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800a972:	68b0      	ldr	r0, [r6, #8]
 800a974:	f003 0303 	and.w	r3, r3, #3
 800a978:	2b02      	cmp	r3, #2
 800a97a:	448a      	add	sl, r1
 800a97c:	d02d      	beq.n	800a9da <_DrawBitmap+0xee>
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d04d      	beq.n	800aa1e <_DrawBitmap+0x132>
 800a982:	2b01      	cmp	r3, #1
 800a984:	d04b      	beq.n	800aa1e <_DrawBitmap+0x132>
 800a986:	f1c1 0308 	rsb	r3, r1, #8
 800a98a:	7822      	ldrb	r2, [r4, #0]
 800a98c:	498d      	ldr	r1, [pc, #564]	; (800abc4 <_DrawBitmap+0x2d8>)
 800a98e:	5c8a      	ldrb	r2, [r1, r2]
 800a990:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a992:	410a      	asrs	r2, r1
 800a994:	69c1      	ldr	r1, [r0, #28]
 800a996:	6800      	ldr	r0, [r0, #0]
 800a998:	fb01 a107 	mla	r1, r1, r7, sl
 800a99c:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 800a9a0:	4659      	mov	r1, fp
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f012 0f01 	tst.w	r2, #1
 800a9a8:	bf0c      	ite	eq
 800a9aa:	46e0      	moveq	r8, ip
 800a9ac:	46c8      	movne	r8, r9
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	d00d      	beq.n	800a9ce <_DrawBitmap+0xe2>
 800a9b2:	0852      	lsrs	r2, r2, #1
 800a9b4:	3901      	subs	r1, #1
 800a9b6:	f84a 8b04 	str.w	r8, [sl], #4
 800a9ba:	d1f3      	bne.n	800a9a4 <_DrawBitmap+0xb8>
 800a9bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9be:	3701      	adds	r7, #1
 800a9c0:	4414      	add	r4, r2
 800a9c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9c6:	1a3b      	subs	r3, r7, r0
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	dbc8      	blt.n	800a95e <_DrawBitmap+0x72>
 800a9cc:	e1ce      	b.n	800ad6c <_DrawBitmap+0x480>
 800a9ce:	7843      	ldrb	r3, [r0, #1]
 800a9d0:	4a7c      	ldr	r2, [pc, #496]	; (800abc4 <_DrawBitmap+0x2d8>)
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	5cd2      	ldrb	r2, [r2, r3]
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	e7ec      	b.n	800a9b4 <_DrawBitmap+0xc8>
 800a9da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9dc:	4979      	ldr	r1, [pc, #484]	; (800abc4 <_DrawBitmap+0x2d8>)
 800a9de:	f1c2 0308 	rsb	r3, r2, #8
 800a9e2:	7822      	ldrb	r2, [r4, #0]
 800a9e4:	5c89      	ldrb	r1, [r1, r2]
 800a9e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a9e8:	4111      	asrs	r1, r2
 800a9ea:	69c2      	ldr	r2, [r0, #28]
 800a9ec:	6800      	ldr	r0, [r0, #0]
 800a9ee:	fb02 a207 	mla	r2, r2, r7, sl
 800a9f2:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	f011 0f01 	tst.w	r1, #1
 800a9fe:	bf18      	it	ne
 800aa00:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	d001      	beq.n	800aa0c <_DrawBitmap+0x120>
 800aa08:	0849      	lsrs	r1, r1, #1
 800aa0a:	e004      	b.n	800aa16 <_DrawBitmap+0x12a>
 800aa0c:	7853      	ldrb	r3, [r2, #1]
 800aa0e:	496d      	ldr	r1, [pc, #436]	; (800abc4 <_DrawBitmap+0x2d8>)
 800aa10:	3201      	adds	r2, #1
 800aa12:	5cc9      	ldrb	r1, [r1, r3]
 800aa14:	2308      	movs	r3, #8
 800aa16:	3001      	adds	r0, #1
 800aa18:	4558      	cmp	r0, fp
 800aa1a:	d1ee      	bne.n	800a9fa <_DrawBitmap+0x10e>
 800aa1c:	e7ce      	b.n	800a9bc <_DrawBitmap+0xd0>
 800aa1e:	6933      	ldr	r3, [r6, #16]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	4798      	blx	r3
 800aa24:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800aa28:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa2a:	46d9      	mov	r9, fp
 800aa2c:	46a4      	mov	ip, r4
 800aa2e:	f89c 1000 	ldrb.w	r1, [ip]
 800aa32:	2280      	movs	r2, #128	; 0x80
 800aa34:	fa42 f208 	asr.w	r2, r2, r8
 800aa38:	eb0a 030b 	add.w	r3, sl, fp
 800aa3c:	4211      	tst	r1, r2
 800aa3e:	ebc9 0303 	rsb	r3, r9, r3
 800aa42:	d013      	beq.n	800aa6c <_DrawBitmap+0x180>
 800aa44:	4619      	mov	r1, r3
 800aa46:	463a      	mov	r2, r7
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f8cd c01c 	str.w	ip, [sp, #28]
 800aa4e:	9308      	str	r3, [sp, #32]
 800aa50:	f7ff fd54 	bl	800a4fc <_GetPixelIndex>
 800aa54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa56:	9b08      	ldr	r3, [sp, #32]
 800aa58:	ea80 0e01 	eor.w	lr, r0, r1
 800aa5c:	463a      	mov	r2, r7
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4630      	mov	r0, r6
 800aa62:	4673      	mov	r3, lr
 800aa64:	f7ff fd41 	bl	800a4ea <_SetPixelIndex>
 800aa68:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800aa6c:	f108 0801 	add.w	r8, r8, #1
 800aa70:	f1b8 0f08 	cmp.w	r8, #8
 800aa74:	bf04      	itt	eq
 800aa76:	f10c 0c01 	addeq.w	ip, ip, #1
 800aa7a:	f04f 0800 	moveq.w	r8, #0
 800aa7e:	f1b9 0901 	subs.w	r9, r9, #1
 800aa82:	d1d4      	bne.n	800aa2e <_DrawBitmap+0x142>
 800aa84:	e79a      	b.n	800a9bc <_DrawBitmap+0xd0>
 800aa86:	b935      	cbnz	r5, 800aa96 <_DrawBitmap+0x1aa>
 800aa88:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	443c      	add	r4, r7
 800aa8e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800aa90:	42b9      	cmp	r1, r7
 800aa92:	dbf8      	blt.n	800aa86 <_DrawBitmap+0x19a>
 800aa94:	e16a      	b.n	800ad6c <_DrawBitmap+0x480>
 800aa96:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800aa9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aa9c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800aa9e:	69da      	ldr	r2, [r3, #28]
 800aaa0:	7826      	ldrb	r6, [r4, #0]
 800aaa2:	4438      	add	r0, r7
 800aaa4:	4488      	add	r8, r1
 800aaa6:	fb02 0808 	mla	r8, r2, r8, r0
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aaae:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800aab2:	7c02      	ldrb	r2, [r0, #16]
 800aab4:	f012 0203 	ands.w	r2, r2, #3
 800aab8:	46c4      	mov	ip, r8
 800aaba:	d005      	beq.n	800aac8 <_DrawBitmap+0x1dc>
 800aabc:	2a02      	cmp	r2, #2
 800aabe:	d1e3      	bne.n	800aa88 <_DrawBitmap+0x19c>
 800aac0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aac2:	9406      	str	r4, [sp, #24]
 800aac4:	2000      	movs	r0, #0
 800aac6:	e020      	b.n	800ab0a <_DrawBitmap+0x21e>
 800aac8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aaca:	4658      	mov	r0, fp
 800aacc:	4627      	mov	r7, r4
 800aace:	f1c2 0803 	rsb	r8, r2, #3
 800aad2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800aad6:	f1c8 0906 	rsb	r9, r8, #6
 800aada:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800aade:	fa4a f909 	asr.w	r9, sl, r9
 800aae2:	ea09 0906 	and.w	r9, r9, r6
 800aae6:	fa29 f808 	lsr.w	r8, r9, r8
 800aaea:	3201      	adds	r2, #1
 800aaec:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800aaf0:	f84c 8b04 	str.w	r8, [ip], #4
 800aaf4:	2a04      	cmp	r2, #4
 800aaf6:	d102      	bne.n	800aafe <_DrawBitmap+0x212>
 800aaf8:	787e      	ldrb	r6, [r7, #1]
 800aafa:	2200      	movs	r2, #0
 800aafc:	3701      	adds	r7, #1
 800aafe:	3801      	subs	r0, #1
 800ab00:	d1e5      	bne.n	800aace <_DrawBitmap+0x1e2>
 800ab02:	e7c1      	b.n	800aa88 <_DrawBitmap+0x19c>
 800ab04:	3001      	adds	r0, #1
 800ab06:	4558      	cmp	r0, fp
 800ab08:	d0be      	beq.n	800aa88 <_DrawBitmap+0x19c>
 800ab0a:	f1c2 0c03 	rsb	ip, r2, #3
 800ab0e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800ab12:	f1cc 0906 	rsb	r9, ip, #6
 800ab16:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800ab1a:	fa4a f909 	asr.w	r9, sl, r9
 800ab1e:	ea09 0906 	and.w	r9, r9, r6
 800ab22:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800ab26:	bf1c      	itt	ne
 800ab28:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800ab2c:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800ab30:	3201      	adds	r2, #1
 800ab32:	2a04      	cmp	r2, #4
 800ab34:	d1e6      	bne.n	800ab04 <_DrawBitmap+0x218>
 800ab36:	9a06      	ldr	r2, [sp, #24]
 800ab38:	7856      	ldrb	r6, [r2, #1]
 800ab3a:	3201      	adds	r2, #1
 800ab3c:	9206      	str	r2, [sp, #24]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	e7e0      	b.n	800ab04 <_DrawBitmap+0x218>
 800ab42:	b935      	cbnz	r5, 800ab52 <_DrawBitmap+0x266>
 800ab44:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800ab46:	3101      	adds	r1, #1
 800ab48:	443c      	add	r4, r7
 800ab4a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ab4c:	42b9      	cmp	r1, r7
 800ab4e:	dbf8      	blt.n	800ab42 <_DrawBitmap+0x256>
 800ab50:	e10c      	b.n	800ad6c <_DrawBitmap+0x480>
 800ab52:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800ab56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab58:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ab5a:	69da      	ldr	r2, [r3, #28]
 800ab5c:	7826      	ldrb	r6, [r4, #0]
 800ab5e:	4438      	add	r0, r7
 800ab60:	4488      	add	r8, r1
 800ab62:	fb02 0808 	mla	r8, r2, r8, r0
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab6a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800ab6e:	7c02      	ldrb	r2, [r0, #16]
 800ab70:	f012 0203 	ands.w	r2, r2, #3
 800ab74:	46c4      	mov	ip, r8
 800ab76:	d005      	beq.n	800ab84 <_DrawBitmap+0x298>
 800ab78:	2a02      	cmp	r2, #2
 800ab7a:	d1e3      	bne.n	800ab44 <_DrawBitmap+0x258>
 800ab7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab7e:	9406      	str	r4, [sp, #24]
 800ab80:	2000      	movs	r0, #0
 800ab82:	e024      	b.n	800abce <_DrawBitmap+0x2e2>
 800ab84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab86:	4658      	mov	r0, fp
 800ab88:	4627      	mov	r7, r4
 800ab8a:	f1c2 0801 	rsb	r8, r2, #1
 800ab8e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800ab92:	f1c8 0904 	rsb	r9, r8, #4
 800ab96:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800ab9a:	fa4a f909 	asr.w	r9, sl, r9
 800ab9e:	ea09 0906 	and.w	r9, r9, r6
 800aba2:	fa29 f808 	lsr.w	r8, r9, r8
 800aba6:	3201      	adds	r2, #1
 800aba8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800abac:	f84c 8b04 	str.w	r8, [ip], #4
 800abb0:	2a02      	cmp	r2, #2
 800abb2:	d102      	bne.n	800abba <_DrawBitmap+0x2ce>
 800abb4:	787e      	ldrb	r6, [r7, #1]
 800abb6:	2200      	movs	r2, #0
 800abb8:	3701      	adds	r7, #1
 800abba:	3801      	subs	r0, #1
 800abbc:	d1e5      	bne.n	800ab8a <_DrawBitmap+0x29e>
 800abbe:	e7c1      	b.n	800ab44 <_DrawBitmap+0x258>
 800abc0:	20000038 	.word	0x20000038
 800abc4:	08013e18 	.word	0x08013e18
 800abc8:	3001      	adds	r0, #1
 800abca:	4558      	cmp	r0, fp
 800abcc:	d0ba      	beq.n	800ab44 <_DrawBitmap+0x258>
 800abce:	f1c2 0c01 	rsb	ip, r2, #1
 800abd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800abd6:	f1cc 0904 	rsb	r9, ip, #4
 800abda:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800abde:	fa4a f909 	asr.w	r9, sl, r9
 800abe2:	ea09 0906 	and.w	r9, r9, r6
 800abe6:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800abea:	bf1c      	itt	ne
 800abec:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800abf0:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800abf4:	3201      	adds	r2, #1
 800abf6:	2a02      	cmp	r2, #2
 800abf8:	d1e6      	bne.n	800abc8 <_DrawBitmap+0x2dc>
 800abfa:	9a06      	ldr	r2, [sp, #24]
 800abfc:	7856      	ldrb	r6, [r2, #1]
 800abfe:	3201      	adds	r2, #1
 800ac00:	9206      	str	r2, [sp, #24]
 800ac02:	2200      	movs	r2, #0
 800ac04:	e7e0      	b.n	800abc8 <_DrawBitmap+0x2dc>
 800ac06:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800ac08:	f8df c168 	ldr.w	ip, [pc, #360]	; 800ad74 <_DrawBitmap+0x488>
 800ac0c:	b127      	cbz	r7, 800ac18 <_DrawBitmap+0x32c>
 800ac0e:	f8dc 0000 	ldr.w	r0, [ip]
 800ac12:	7c00      	ldrb	r0, [r0, #16]
 800ac14:	0780      	lsls	r0, r0, #30
 800ac16:	d504      	bpl.n	800ac22 <_DrawBitmap+0x336>
 800ac18:	f8dc c000 	ldr.w	ip, [ip]
 800ac1c:	f04f 0900 	mov.w	r9, #0
 800ac20:	e011      	b.n	800ac46 <_DrawBitmap+0x35a>
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	d0f8      	beq.n	800ac18 <_DrawBitmap+0x32c>
 800ac26:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ac28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ac2a:	9302      	str	r3, [sp, #8]
 800ac2c:	f8cd b000 	str.w	fp, [sp]
 800ac30:	9001      	str	r0, [sp, #4]
 800ac32:	9503      	str	r5, [sp, #12]
 800ac34:	69b0      	ldr	r0, [r6, #24]
 800ac36:	4623      	mov	r3, r4
 800ac38:	47b8      	blx	r7
 800ac3a:	e097      	b.n	800ad6c <_DrawBitmap+0x480>
 800ac3c:	b93d      	cbnz	r5, 800ac4e <_DrawBitmap+0x362>
 800ac3e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800ac40:	f109 0901 	add.w	r9, r9, #1
 800ac44:	443c      	add	r4, r7
 800ac46:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ac48:	45b9      	cmp	r9, r7
 800ac4a:	dbf7      	blt.n	800ac3c <_DrawBitmap+0x350>
 800ac4c:	e08e      	b.n	800ad6c <_DrawBitmap+0x480>
 800ac4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac50:	69da      	ldr	r2, [r3, #28]
 800ac52:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ac54:	4448      	add	r0, r9
 800ac56:	fb02 7000 	mla	r0, r2, r0, r7
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ac60:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800ac64:	f012 0203 	ands.w	r2, r2, #3
 800ac68:	4601      	mov	r1, r0
 800ac6a:	d003      	beq.n	800ac74 <_DrawBitmap+0x388>
 800ac6c:	2a02      	cmp	r2, #2
 800ac6e:	d1e6      	bne.n	800ac3e <_DrawBitmap+0x352>
 800ac70:	2100      	movs	r1, #0
 800ac72:	e04f      	b.n	800ad14 <_DrawBitmap+0x428>
 800ac74:	4658      	mov	r0, fp
 800ac76:	4622      	mov	r2, r4
 800ac78:	2807      	cmp	r0, #7
 800ac7a:	dd23      	ble.n	800acc4 <_DrawBitmap+0x3d8>
 800ac7c:	7816      	ldrb	r6, [r2, #0]
 800ac7e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ac82:	600e      	str	r6, [r1, #0]
 800ac84:	7856      	ldrb	r6, [r2, #1]
 800ac86:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ac8a:	604e      	str	r6, [r1, #4]
 800ac8c:	7896      	ldrb	r6, [r2, #2]
 800ac8e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ac92:	608e      	str	r6, [r1, #8]
 800ac94:	78d6      	ldrb	r6, [r2, #3]
 800ac96:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ac9a:	60ce      	str	r6, [r1, #12]
 800ac9c:	7916      	ldrb	r6, [r2, #4]
 800ac9e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800aca2:	610e      	str	r6, [r1, #16]
 800aca4:	7956      	ldrb	r6, [r2, #5]
 800aca6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800acaa:	614e      	str	r6, [r1, #20]
 800acac:	7996      	ldrb	r6, [r2, #6]
 800acae:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800acb2:	618e      	str	r6, [r1, #24]
 800acb4:	79d6      	ldrb	r6, [r2, #7]
 800acb6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800acba:	61ce      	str	r6, [r1, #28]
 800acbc:	3808      	subs	r0, #8
 800acbe:	3208      	adds	r2, #8
 800acc0:	3120      	adds	r1, #32
 800acc2:	e7d9      	b.n	800ac78 <_DrawBitmap+0x38c>
 800acc4:	2803      	cmp	r0, #3
 800acc6:	dd13      	ble.n	800acf0 <_DrawBitmap+0x404>
 800acc8:	7816      	ldrb	r6, [r2, #0]
 800acca:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800acce:	600e      	str	r6, [r1, #0]
 800acd0:	7856      	ldrb	r6, [r2, #1]
 800acd2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800acd6:	604e      	str	r6, [r1, #4]
 800acd8:	7896      	ldrb	r6, [r2, #2]
 800acda:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800acde:	608e      	str	r6, [r1, #8]
 800ace0:	78d6      	ldrb	r6, [r2, #3]
 800ace2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800ace6:	60ce      	str	r6, [r1, #12]
 800ace8:	3804      	subs	r0, #4
 800acea:	3204      	adds	r2, #4
 800acec:	3110      	adds	r1, #16
 800acee:	e7e9      	b.n	800acc4 <_DrawBitmap+0x3d8>
 800acf0:	2600      	movs	r6, #0
 800acf2:	4286      	cmp	r6, r0
 800acf4:	d0a3      	beq.n	800ac3e <_DrawBitmap+0x352>
 800acf6:	f812 8006 	ldrb.w	r8, [r2, r6]
 800acfa:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 800acfe:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 800ad02:	3601      	adds	r6, #1
 800ad04:	e7f5      	b.n	800acf2 <_DrawBitmap+0x406>
 800ad06:	5c62      	ldrb	r2, [r4, r1]
 800ad08:	b11a      	cbz	r2, 800ad12 <_DrawBitmap+0x426>
 800ad0a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800ad0e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800ad12:	3101      	adds	r1, #1
 800ad14:	ebc1 020b 	rsb	r2, r1, fp
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	dcf4      	bgt.n	800ad06 <_DrawBitmap+0x41a>
 800ad1c:	e78f      	b.n	800ac3e <_DrawBitmap+0x352>
 800ad1e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800ad20:	b90d      	cbnz	r5, 800ad26 <_DrawBitmap+0x43a>
 800ad22:	462b      	mov	r3, r5
 800ad24:	e012      	b.n	800ad4c <_DrawBitmap+0x460>
 800ad26:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ad28:	9701      	str	r7, [sp, #4]
 800ad2a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800ad2c:	f8cd b000 	str.w	fp, [sp]
 800ad30:	9702      	str	r7, [sp, #8]
 800ad32:	69b0      	ldr	r0, [r6, #24]
 800ad34:	4623      	mov	r3, r4
 800ad36:	47a8      	blx	r5
 800ad38:	e018      	b.n	800ad6c <_DrawBitmap+0x480>
 800ad3a:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800ad3e:	1b0d      	subs	r5, r1, r4
 800ad40:	3a01      	subs	r2, #1
 800ad42:	502f      	str	r7, [r5, r0]
 800ad44:	d1f9      	bne.n	800ad3a <_DrawBitmap+0x44e>
 800ad46:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800ad48:	3301      	adds	r3, #1
 800ad4a:	443c      	add	r4, r7
 800ad4c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ad4e:	42ab      	cmp	r3, r5
 800ad50:	da0c      	bge.n	800ad6c <_DrawBitmap+0x480>
 800ad52:	68b2      	ldr	r2, [r6, #8]
 800ad54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad56:	69d1      	ldr	r1, [r2, #28]
 800ad58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad5a:	6812      	ldr	r2, [r2, #0]
 800ad5c:	4418      	add	r0, r3
 800ad5e:	fb01 5100 	mla	r1, r1, r0, r5
 800ad62:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ad66:	1f21      	subs	r1, r4, #4
 800ad68:	465a      	mov	r2, fp
 800ad6a:	e7e6      	b.n	800ad3a <_DrawBitmap+0x44e>
 800ad6c:	b00d      	add	sp, #52	; 0x34
 800ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad72:	bf00      	nop
 800ad74:	20000038 	.word	0x20000038

0800ad78 <_InitOnce.isra.4>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	6805      	ldr	r5, [r0, #0]
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	b93d      	cbnz	r5, 800ad90 <_InitOnce.isra.4+0x18>
 800ad80:	2048      	movs	r0, #72	; 0x48
 800ad82:	f003 ffe1 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800ad86:	4629      	mov	r1, r5
 800ad88:	6020      	str	r0, [r4, #0]
 800ad8a:	2248      	movs	r2, #72	; 0x48
 800ad8c:	f000 ff3a 	bl	800bc04 <GUI__memset>
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	f1d0 0001 	rsbs	r0, r0, #1
 800ad96:	bf38      	it	cc
 800ad98:	2000      	movcc	r0, #0
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}

0800ad9c <_SetDevFunc>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	4605      	mov	r5, r0
 800ada0:	3008      	adds	r0, #8
 800ada2:	460e      	mov	r6, r1
 800ada4:	4614      	mov	r4, r2
 800ada6:	f7ff ffe7 	bl	800ad78 <_InitOnce.isra.4>
 800adaa:	68ab      	ldr	r3, [r5, #8]
 800adac:	b1c3      	cbz	r3, 800ade0 <_SetDevFunc+0x44>
 800adae:	f1a6 0119 	sub.w	r1, r6, #25
 800adb2:	290f      	cmp	r1, #15
 800adb4:	d814      	bhi.n	800ade0 <_SetDevFunc+0x44>
 800adb6:	e8df f001 	tbb	[pc, r1]
 800adba:	1308      	.short	0x1308
 800adbc:	13131313 	.word	0x13131313
 800adc0:	130a0c13 	.word	0x130a0c13
 800adc4:	130e1310 	.word	0x130e1310
 800adc8:	1213      	.short	0x1213
 800adca:	631c      	str	r4, [r3, #48]	; 0x30
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
 800adce:	635c      	str	r4, [r3, #52]	; 0x34
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	639c      	str	r4, [r3, #56]	; 0x38
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	63dc      	str	r4, [r3, #60]	; 0x3c
 800add8:	bd70      	pop	{r4, r5, r6, pc}
 800adda:	641c      	str	r4, [r3, #64]	; 0x40
 800addc:	bd70      	pop	{r4, r5, r6, pc}
 800adde:	645c      	str	r4, [r3, #68]	; 0x44
 800ade0:	bd70      	pop	{r4, r5, r6, pc}

0800ade2 <_GetPos>:
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	4604      	mov	r4, r0
 800ade6:	3008      	adds	r0, #8
 800ade8:	460d      	mov	r5, r1
 800adea:	4616      	mov	r6, r2
 800adec:	f7ff ffc4 	bl	800ad78 <_InitOnce.isra.4>
 800adf0:	68a3      	ldr	r3, [r4, #8]
 800adf2:	b11b      	cbz	r3, 800adfc <_GetPos+0x1a>
 800adf4:	6a18      	ldr	r0, [r3, #32]
 800adf6:	6028      	str	r0, [r5, #0]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfa:	6033      	str	r3, [r6, #0]
 800adfc:	bd70      	pop	{r4, r5, r6, pc}

0800adfe <_ShowBuffer>:
 800adfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae00:	4604      	mov	r4, r0
 800ae02:	2300      	movs	r3, #0
 800ae04:	3008      	adds	r0, #8
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	460d      	mov	r5, r1
 800ae0a:	f7ff ffb5 	bl	800ad78 <_InitOnce.isra.4>
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	b133      	cbz	r3, 800ae20 <_ShowBuffer+0x22>
 800ae12:	aa02      	add	r2, sp, #8
 800ae14:	69a0      	ldr	r0, [r4, #24]
 800ae16:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ae1a:	210e      	movs	r1, #14
 800ae1c:	f7fa f8ea 	bl	8004ff4 <LCD_X_DisplayDriver>
 800ae20:	b003      	add	sp, #12
 800ae22:	bd30      	pop	{r4, r5, pc}

0800ae24 <_Init>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	3008      	adds	r0, #8
 800ae2a:	f7ff ffa5 	bl	800ad78 <_InitOnce.isra.4>
 800ae2e:	2101      	movs	r1, #1
 800ae30:	4605      	mov	r5, r0
 800ae32:	2200      	movs	r2, #0
 800ae34:	69a0      	ldr	r0, [r4, #24]
 800ae36:	f7fa f8dd 	bl	8004ff4 <LCD_X_DisplayDriver>
 800ae3a:	4328      	orrs	r0, r5
 800ae3c:	bd38      	pop	{r3, r4, r5, pc}

0800ae3e <_SetVis>:
 800ae3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae40:	4604      	mov	r4, r0
 800ae42:	2300      	movs	r3, #0
 800ae44:	3008      	adds	r0, #8
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	460d      	mov	r5, r1
 800ae4a:	f7ff ff95 	bl	800ad78 <_InitOnce.isra.4>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	b13b      	cbz	r3, 800ae62 <_SetVis+0x24>
 800ae52:	aa02      	add	r2, sp, #8
 800ae54:	62dd      	str	r5, [r3, #44]	; 0x2c
 800ae56:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ae5a:	69a0      	ldr	r0, [r4, #24]
 800ae5c:	2109      	movs	r1, #9
 800ae5e:	f7fa f8c9 	bl	8004ff4 <LCD_X_DisplayDriver>
 800ae62:	b003      	add	sp, #12
 800ae64:	bd30      	pop	{r4, r5, pc}

0800ae66 <_SetAlpha>:
 800ae66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae68:	4604      	mov	r4, r0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	3008      	adds	r0, #8
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	460d      	mov	r5, r1
 800ae72:	f7ff ff81 	bl	800ad78 <_InitOnce.isra.4>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	b13b      	cbz	r3, 800ae8a <_SetAlpha+0x24>
 800ae7a:	aa02      	add	r2, sp, #8
 800ae7c:	629d      	str	r5, [r3, #40]	; 0x28
 800ae7e:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ae82:	69a0      	ldr	r0, [r4, #24]
 800ae84:	210a      	movs	r1, #10
 800ae86:	f7fa f8b5 	bl	8004ff4 <LCD_X_DisplayDriver>
 800ae8a:	b003      	add	sp, #12
 800ae8c:	bd30      	pop	{r4, r5, pc}

0800ae8e <_SetVRAMAddr>:
 800ae8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae90:	4604      	mov	r4, r0
 800ae92:	2300      	movs	r3, #0
 800ae94:	3008      	adds	r0, #8
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	460d      	mov	r5, r1
 800ae9a:	f7ff ff6d 	bl	800ad78 <_InitOnce.isra.4>
 800ae9e:	68a3      	ldr	r3, [r4, #8]
 800aea0:	b143      	cbz	r3, 800aeb4 <_SetVRAMAddr+0x26>
 800aea2:	aa02      	add	r2, sp, #8
 800aea4:	601d      	str	r5, [r3, #0]
 800aea6:	605d      	str	r5, [r3, #4]
 800aea8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800aeac:	69a0      	ldr	r0, [r4, #24]
 800aeae:	2102      	movs	r1, #2
 800aeb0:	f7fa f8a0 	bl	8004ff4 <LCD_X_DisplayDriver>
 800aeb4:	b003      	add	sp, #12
 800aeb6:	bd30      	pop	{r4, r5, pc}

0800aeb8 <_CopyBuffer>:
 800aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	4605      	mov	r5, r0
 800aebe:	3008      	adds	r0, #8
 800aec0:	460e      	mov	r6, r1
 800aec2:	4617      	mov	r7, r2
 800aec4:	f7ff ff58 	bl	800ad78 <_InitOnce.isra.4>
 800aec8:	68ac      	ldr	r4, [r5, #8]
 800aeca:	b1e4      	cbz	r4, 800af06 <_CopyBuffer+0x4e>
 800aecc:	42be      	cmp	r6, r7
 800aece:	d01a      	beq.n	800af06 <_CopyBuffer+0x4e>
 800aed0:	68eb      	ldr	r3, [r5, #12]
 800aed2:	2108      	movs	r1, #8
 800aed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed6:	4628      	mov	r0, r5
 800aed8:	4798      	blx	r3
 800aeda:	6923      	ldr	r3, [r4, #16]
 800aedc:	68e2      	ldr	r2, [r4, #12]
 800aede:	6861      	ldr	r1, [r4, #4]
 800aee0:	435a      	muls	r2, r3
 800aee2:	4350      	muls	r0, r2
 800aee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aee6:	08c2      	lsrs	r2, r0, #3
 800aee8:	fb07 1802 	mla	r8, r7, r2, r1
 800aeec:	b123      	cbz	r3, 800aef8 <_CopyBuffer+0x40>
 800aeee:	69a8      	ldr	r0, [r5, #24]
 800aef0:	4631      	mov	r1, r6
 800aef2:	463a      	mov	r2, r7
 800aef4:	4798      	blx	r3
 800aef6:	e004      	b.n	800af02 <_CopyBuffer+0x4a>
 800aef8:	4640      	mov	r0, r8
 800aefa:	fb06 1102 	mla	r1, r6, r2, r1
 800aefe:	f007 fd2e 	bl	801295e <memcpy>
 800af02:	f8c4 8000 	str.w	r8, [r4]
 800af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af0a <_SetPos>:
 800af0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0e:	b087      	sub	sp, #28
 800af10:	4604      	mov	r4, r0
 800af12:	460e      	mov	r6, r1
 800af14:	4615      	mov	r5, r2
 800af16:	2100      	movs	r1, #0
 800af18:	2218      	movs	r2, #24
 800af1a:	4668      	mov	r0, sp
 800af1c:	f007 fd44 	bl	80129a8 <memset>
 800af20:	f104 0008 	add.w	r0, r4, #8
 800af24:	f7ff ff28 	bl	800ad78 <_InitOnce.isra.4>
 800af28:	68a7      	ldr	r7, [r4, #8]
 800af2a:	2f00      	cmp	r7, #0
 800af2c:	d05d      	beq.n	800afea <_SetPos+0xe0>
 800af2e:	623e      	str	r6, [r7, #32]
 800af30:	627d      	str	r5, [r7, #36]	; 0x24
 800af32:	f000 fa03 	bl	800b33c <LCD_GetXSizeDisplay>
 800af36:	4681      	mov	r9, r0
 800af38:	f000 fa06 	bl	800b348 <LCD_GetYSizeDisplay>
 800af3c:	68e3      	ldr	r3, [r4, #12]
 800af3e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	f8d7 b010 	ldr.w	fp, [r7, #16]
 800af48:	4680      	mov	r8, r0
 800af4a:	2108      	movs	r1, #8
 800af4c:	4620      	mov	r0, r4
 800af4e:	4798      	blx	r3
 800af50:	2308      	movs	r3, #8
 800af52:	3007      	adds	r0, #7
 800af54:	fb90 f0f3 	sdiv	r0, r0, r3
 800af58:	2e00      	cmp	r6, #0
 800af5a:	9004      	str	r0, [sp, #16]
 800af5c:	eb0a 0306 	add.w	r3, sl, r6
 800af60:	da07      	bge.n	800af72 <_SetPos+0x68>
 800af62:	9a05      	ldr	r2, [sp, #20]
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	fb00 2616 	mls	r6, r0, r6, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	9605      	str	r6, [sp, #20]
 800af6e:	9200      	str	r2, [sp, #0]
 800af70:	e007      	b.n	800af82 <_SetPos+0x78>
 800af72:	454b      	cmp	r3, r9
 800af74:	9600      	str	r6, [sp, #0]
 800af76:	bfca      	itet	gt
 800af78:	ebc6 0609 	rsbgt	r6, r6, r9
 800af7c:	f8cd a008 	strle.w	sl, [sp, #8]
 800af80:	9602      	strgt	r6, [sp, #8]
 800af82:	2d00      	cmp	r5, #0
 800af84:	eb0b 0305 	add.w	r3, fp, r5
 800af88:	da09      	bge.n	800af9e <_SetPos+0x94>
 800af8a:	9a04      	ldr	r2, [sp, #16]
 800af8c:	9303      	str	r3, [sp, #12]
 800af8e:	4355      	muls	r5, r2
 800af90:	9a05      	ldr	r2, [sp, #20]
 800af92:	fb0a 2215 	mls	r2, sl, r5, r2
 800af96:	9205      	str	r2, [sp, #20]
 800af98:	2200      	movs	r2, #0
 800af9a:	9201      	str	r2, [sp, #4]
 800af9c:	e007      	b.n	800afae <_SetPos+0xa4>
 800af9e:	4543      	cmp	r3, r8
 800afa0:	9501      	str	r5, [sp, #4]
 800afa2:	bfca      	itet	gt
 800afa4:	ebc5 0508 	rsbgt	r5, r5, r8
 800afa8:	f8cd b00c 	strle.w	fp, [sp, #12]
 800afac:	9503      	strgt	r5, [sp, #12]
 800afae:	9b02      	ldr	r3, [sp, #8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb4:	dd08      	ble.n	800afc8 <_SetPos+0xbe>
 800afb6:	9a03      	ldr	r2, [sp, #12]
 800afb8:	2a00      	cmp	r2, #0
 800afba:	dd05      	ble.n	800afc8 <_SetPos+0xbe>
 800afbc:	9a00      	ldr	r2, [sp, #0]
 800afbe:	454a      	cmp	r2, r9
 800afc0:	da02      	bge.n	800afc8 <_SetPos+0xbe>
 800afc2:	9a01      	ldr	r2, [sp, #4]
 800afc4:	4542      	cmp	r2, r8
 800afc6:	db06      	blt.n	800afd6 <_SetPos+0xcc>
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d10e      	bne.n	800afea <_SetPos+0xe0>
 800afcc:	4620      	mov	r0, r4
 800afce:	2100      	movs	r1, #0
 800afd0:	f7ff ff35 	bl	800ae3e <_SetVis>
 800afd4:	e009      	b.n	800afea <_SetPos+0xe0>
 800afd6:	b91b      	cbnz	r3, 800afe0 <_SetPos+0xd6>
 800afd8:	4620      	mov	r0, r4
 800afda:	2101      	movs	r1, #1
 800afdc:	f7ff ff2f 	bl	800ae3e <_SetVis>
 800afe0:	69a0      	ldr	r0, [r4, #24]
 800afe2:	2108      	movs	r1, #8
 800afe4:	466a      	mov	r2, sp
 800afe6:	f7fa f805 	bl	8004ff4 <LCD_X_DisplayDriver>
 800afea:	b007      	add	sp, #28
 800afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aff0 <_SetSize>:
 800aff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aff2:	4605      	mov	r5, r0
 800aff4:	2300      	movs	r3, #0
 800aff6:	3008      	adds	r0, #8
 800aff8:	460e      	mov	r6, r1
 800affa:	4617      	mov	r7, r2
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	f7ff feba 	bl	800ad78 <_InitOnce.isra.4>
 800b004:	68ac      	ldr	r4, [r5, #8]
 800b006:	b194      	cbz	r4, 800b02e <_SetSize+0x3e>
 800b008:	69e3      	ldr	r3, [r4, #28]
 800b00a:	b93b      	cbnz	r3, 800b01c <_SetSize+0x2c>
 800b00c:	69a8      	ldr	r0, [r5, #24]
 800b00e:	f000 f92b 	bl	800b268 <LCD_GetSwapXYEx>
 800b012:	2800      	cmp	r0, #0
 800b014:	bf0c      	ite	eq
 800b016:	4630      	moveq	r0, r6
 800b018:	4638      	movne	r0, r7
 800b01a:	61e0      	str	r0, [r4, #28]
 800b01c:	60e6      	str	r6, [r4, #12]
 800b01e:	6127      	str	r7, [r4, #16]
 800b020:	69a8      	ldr	r0, [r5, #24]
 800b022:	2107      	movs	r1, #7
 800b024:	466a      	mov	r2, sp
 800b026:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800b02a:	f7f9 ffe3 	bl	8004ff4 <LCD_X_DisplayDriver>
 800b02e:	b003      	add	sp, #12
 800b030:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b032 <_SetVSize>:
 800b032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b034:	4606      	mov	r6, r0
 800b036:	3008      	adds	r0, #8
 800b038:	460d      	mov	r5, r1
 800b03a:	4617      	mov	r7, r2
 800b03c:	f7ff fe9c 	bl	800ad78 <_InitOnce.isra.4>
 800b040:	68b4      	ldr	r4, [r6, #8]
 800b042:	b144      	cbz	r4, 800b056 <_SetVSize+0x24>
 800b044:	69b0      	ldr	r0, [r6, #24]
 800b046:	f000 f90f 	bl	800b268 <LCD_GetSwapXYEx>
 800b04a:	6165      	str	r5, [r4, #20]
 800b04c:	61a7      	str	r7, [r4, #24]
 800b04e:	b108      	cbz	r0, 800b054 <_SetVSize+0x22>
 800b050:	61e7      	str	r7, [r4, #28]
 800b052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b054:	61e5      	str	r5, [r4, #28]
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b058 <LCD_UpdateColorIndices>:
 800b058:	b510      	push	{r4, lr}
 800b05a:	4c07      	ldr	r4, [pc, #28]	; (800b078 <LCD_UpdateColorIndices+0x20>)
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b060:	f000 fd68 	bl	800bb34 <LCD_Color2Index>
 800b064:	f000 fd86 	bl	800bb74 <LCD_SetColorIndex>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b06c:	f000 fd62 	bl	800bb34 <LCD_Color2Index>
 800b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b074:	f000 bd9a 	b.w	800bbac <LCD_SetBkColorIndex>
 800b078:	20000038 	.word	0x20000038

0800b07c <LCD_SetClipRectEx>:
 800b07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b07e:	4c09      	ldr	r4, [pc, #36]	; (800b0a4 <LCD_SetClipRectEx+0x28>)
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	7c5a      	ldrb	r2, [r3, #17]
 800b084:	4b08      	ldr	r3, [pc, #32]	; (800b0a8 <LCD_SetClipRectEx+0x2c>)
 800b086:	4605      	mov	r5, r0
 800b088:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b08c:	68c2      	ldr	r2, [r0, #12]
 800b08e:	4669      	mov	r1, sp
 800b090:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b092:	4790      	blx	r2
 800b094:	6820      	ldr	r0, [r4, #0]
 800b096:	4629      	mov	r1, r5
 800b098:	466a      	mov	r2, sp
 800b09a:	3008      	adds	r0, #8
 800b09c:	f000 fe58 	bl	800bd50 <GUI__IntersectRects>
 800b0a0:	b003      	add	sp, #12
 800b0a2:	bd30      	pop	{r4, r5, pc}
 800b0a4:	20000038 	.word	0x20000038
 800b0a8:	20023074 	.word	0x20023074

0800b0ac <LCD_SetVRAMAddrEx>:
 800b0ac:	b513      	push	{r0, r1, r4, lr}
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	f003 f820 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b0b4:	9001      	str	r0, [sp, #4]
 800b0b6:	b908      	cbnz	r0, 800b0bc <LCD_SetVRAMAddrEx+0x10>
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	e00b      	b.n	800b0d4 <LCD_SetVRAMAddrEx+0x28>
 800b0bc:	68c3      	ldr	r3, [r0, #12]
 800b0be:	2109      	movs	r1, #9
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	a801      	add	r0, sp, #4
 800b0c4:	4798      	blx	r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d0f5      	beq.n	800b0b8 <LCD_SetVRAMAddrEx+0xc>
 800b0cc:	9801      	ldr	r0, [sp, #4]
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4798      	blx	r3
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	b002      	add	sp, #8
 800b0d6:	bd10      	pop	{r4, pc}

0800b0d8 <LCD_SetVSizeEx>:
 800b0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0da:	460d      	mov	r5, r1
 800b0dc:	4614      	mov	r4, r2
 800b0de:	f003 f809 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b0e2:	9001      	str	r0, [sp, #4]
 800b0e4:	b908      	cbnz	r0, 800b0ea <LCD_SetVSizeEx+0x12>
 800b0e6:	2001      	movs	r0, #1
 800b0e8:	e00c      	b.n	800b104 <LCD_SetVSizeEx+0x2c>
 800b0ea:	68c3      	ldr	r3, [r0, #12]
 800b0ec:	210a      	movs	r1, #10
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	a801      	add	r0, sp, #4
 800b0f2:	4798      	blx	r3
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d0f5      	beq.n	800b0e6 <LCD_SetVSizeEx+0xe>
 800b0fa:	9801      	ldr	r0, [sp, #4]
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4622      	mov	r2, r4
 800b100:	4798      	blx	r3
 800b102:	2000      	movs	r0, #0
 800b104:	b003      	add	sp, #12
 800b106:	bd30      	pop	{r4, r5, pc}

0800b108 <LCD_SetSizeEx>:
 800b108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b10a:	460d      	mov	r5, r1
 800b10c:	4614      	mov	r4, r2
 800b10e:	f002 fff1 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b112:	9001      	str	r0, [sp, #4]
 800b114:	b908      	cbnz	r0, 800b11a <LCD_SetSizeEx+0x12>
 800b116:	2001      	movs	r0, #1
 800b118:	e00c      	b.n	800b134 <LCD_SetSizeEx+0x2c>
 800b11a:	68c3      	ldr	r3, [r0, #12]
 800b11c:	210b      	movs	r1, #11
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	a801      	add	r0, sp, #4
 800b122:	4798      	blx	r3
 800b124:	4603      	mov	r3, r0
 800b126:	2800      	cmp	r0, #0
 800b128:	d0f5      	beq.n	800b116 <LCD_SetSizeEx+0xe>
 800b12a:	9801      	ldr	r0, [sp, #4]
 800b12c:	4629      	mov	r1, r5
 800b12e:	4622      	mov	r2, r4
 800b130:	4798      	blx	r3
 800b132:	2000      	movs	r0, #0
 800b134:	b003      	add	sp, #12
 800b136:	bd30      	pop	{r4, r5, pc}

0800b138 <LCD_SetPosEx>:
 800b138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b13a:	460d      	mov	r5, r1
 800b13c:	4614      	mov	r4, r2
 800b13e:	f002 ffd9 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b142:	9001      	str	r0, [sp, #4]
 800b144:	b908      	cbnz	r0, 800b14a <LCD_SetPosEx+0x12>
 800b146:	2001      	movs	r0, #1
 800b148:	e00c      	b.n	800b164 <LCD_SetPosEx+0x2c>
 800b14a:	68c3      	ldr	r3, [r0, #12]
 800b14c:	2103      	movs	r1, #3
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	a801      	add	r0, sp, #4
 800b152:	4798      	blx	r3
 800b154:	4603      	mov	r3, r0
 800b156:	2800      	cmp	r0, #0
 800b158:	d0f5      	beq.n	800b146 <LCD_SetPosEx+0xe>
 800b15a:	9801      	ldr	r0, [sp, #4]
 800b15c:	4629      	mov	r1, r5
 800b15e:	4622      	mov	r2, r4
 800b160:	4798      	blx	r3
 800b162:	2000      	movs	r0, #0
 800b164:	b003      	add	sp, #12
 800b166:	bd30      	pop	{r4, r5, pc}

0800b168 <LCD_SetLUTEntryEx>:
 800b168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b16a:	460d      	mov	r5, r1
 800b16c:	4614      	mov	r4, r2
 800b16e:	f002 ffc1 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b172:	9001      	str	r0, [sp, #4]
 800b174:	b908      	cbnz	r0, 800b17a <LCD_SetLUTEntryEx+0x12>
 800b176:	2001      	movs	r0, #1
 800b178:	e00c      	b.n	800b194 <LCD_SetLUTEntryEx+0x2c>
 800b17a:	68c3      	ldr	r3, [r0, #12]
 800b17c:	2110      	movs	r1, #16
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	a801      	add	r0, sp, #4
 800b182:	4798      	blx	r3
 800b184:	4603      	mov	r3, r0
 800b186:	2800      	cmp	r0, #0
 800b188:	d0f5      	beq.n	800b176 <LCD_SetLUTEntryEx+0xe>
 800b18a:	9801      	ldr	r0, [sp, #4]
 800b18c:	4629      	mov	r1, r5
 800b18e:	4622      	mov	r2, r4
 800b190:	4798      	blx	r3
 800b192:	2000      	movs	r0, #0
 800b194:	b003      	add	sp, #12
 800b196:	bd30      	pop	{r4, r5, pc}

0800b198 <LCD_GetPosEx>:
 800b198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b19a:	460d      	mov	r5, r1
 800b19c:	4614      	mov	r4, r2
 800b19e:	f002 ffa9 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b1a2:	9001      	str	r0, [sp, #4]
 800b1a4:	b908      	cbnz	r0, 800b1aa <LCD_GetPosEx+0x12>
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e00c      	b.n	800b1c4 <LCD_GetPosEx+0x2c>
 800b1aa:	68c3      	ldr	r3, [r0, #12]
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	a801      	add	r0, sp, #4
 800b1b2:	4798      	blx	r3
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d0f5      	beq.n	800b1a6 <LCD_GetPosEx+0xe>
 800b1ba:	9801      	ldr	r0, [sp, #4]
 800b1bc:	4629      	mov	r1, r5
 800b1be:	4622      	mov	r2, r4
 800b1c0:	4798      	blx	r3
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	b003      	add	sp, #12
 800b1c6:	bd30      	pop	{r4, r5, pc}

0800b1c8 <LCD_SetDevFunc>:
 800b1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	f002 ff91 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b1d2:	9001      	str	r0, [sp, #4]
 800b1d4:	b908      	cbnz	r0, 800b1da <LCD_SetDevFunc+0x12>
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	e00c      	b.n	800b1f4 <LCD_SetDevFunc+0x2c>
 800b1da:	68c3      	ldr	r3, [r0, #12]
 800b1dc:	2116      	movs	r1, #22
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	a801      	add	r0, sp, #4
 800b1e2:	4798      	blx	r3
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d0f5      	beq.n	800b1d6 <LCD_SetDevFunc+0xe>
 800b1ea:	9801      	ldr	r0, [sp, #4]
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	4798      	blx	r3
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	b003      	add	sp, #12
 800b1f6:	bd30      	pop	{r4, r5, pc}

0800b1f8 <_GetDevProp>:
 800b1f8:	2801      	cmp	r0, #1
 800b1fa:	b510      	push	{r4, lr}
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	dc08      	bgt.n	800b212 <_GetDevProp+0x1a>
 800b200:	f002 ff78 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b204:	b120      	cbz	r0, 800b210 <_GetDevProp+0x18>
 800b206:	68c3      	ldr	r3, [r0, #12]
 800b208:	4621      	mov	r1, r4
 800b20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20c:	4798      	blx	r3
 800b20e:	bd10      	pop	{r4, pc}
 800b210:	bd10      	pop	{r4, pc}
 800b212:	2000      	movs	r0, #0
 800b214:	bd10      	pop	{r4, pc}

0800b216 <_GetMaxValue>:
 800b216:	b538      	push	{r3, r4, r5, lr}
 800b218:	4604      	mov	r4, r0
 800b21a:	4621      	mov	r1, r4
 800b21c:	2001      	movs	r0, #1
 800b21e:	f7ff ffeb 	bl	800b1f8 <_GetDevProp>
 800b222:	4621      	mov	r1, r4
 800b224:	4605      	mov	r5, r0
 800b226:	2000      	movs	r0, #0
 800b228:	f7ff ffe6 	bl	800b1f8 <_GetDevProp>
 800b22c:	42a8      	cmp	r0, r5
 800b22e:	bfb8      	it	lt
 800b230:	4628      	movlt	r0, r5
 800b232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b236:	bd38      	pop	{r3, r4, r5, pc}

0800b238 <LCD_GetXSizeEx>:
 800b238:	2101      	movs	r1, #1
 800b23a:	f7ff bfdd 	b.w	800b1f8 <_GetDevProp>

0800b23e <LCD_GetYSizeEx>:
 800b23e:	2102      	movs	r1, #2
 800b240:	f7ff bfda 	b.w	800b1f8 <_GetDevProp>

0800b244 <LCD_GetVXSizeEx>:
 800b244:	2103      	movs	r1, #3
 800b246:	f7ff bfd7 	b.w	800b1f8 <_GetDevProp>

0800b24a <LCD_GetVYSizeEx>:
 800b24a:	2104      	movs	r1, #4
 800b24c:	f7ff bfd4 	b.w	800b1f8 <_GetDevProp>

0800b250 <LCD_GetBitsPerPixelEx>:
 800b250:	2108      	movs	r1, #8
 800b252:	f7ff bfd1 	b.w	800b1f8 <_GetDevProp>

0800b256 <LCD_GetNumColorsEx>:
 800b256:	2109      	movs	r1, #9
 800b258:	f7ff bfce 	b.w	800b1f8 <_GetDevProp>

0800b25c <LCD_GetMirrorXEx>:
 800b25c:	210c      	movs	r1, #12
 800b25e:	f7ff bfcb 	b.w	800b1f8 <_GetDevProp>

0800b262 <LCD_GetMirrorYEx>:
 800b262:	210d      	movs	r1, #13
 800b264:	f7ff bfc8 	b.w	800b1f8 <_GetDevProp>

0800b268 <LCD_GetSwapXYEx>:
 800b268:	210e      	movs	r1, #14
 800b26a:	f7ff bfc5 	b.w	800b1f8 <_GetDevProp>
	...

0800b270 <LCD_GetXSize>:
 800b270:	4b02      	ldr	r3, [pc, #8]	; (800b27c <LCD_GetXSize+0xc>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	7c58      	ldrb	r0, [r3, #17]
 800b276:	f7ff bfdf 	b.w	800b238 <LCD_GetXSizeEx>
 800b27a:	bf00      	nop
 800b27c:	20000038 	.word	0x20000038

0800b280 <LCD_GetYSize>:
 800b280:	4b02      	ldr	r3, [pc, #8]	; (800b28c <LCD_GetYSize+0xc>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	7c58      	ldrb	r0, [r3, #17]
 800b286:	f7ff bfda 	b.w	800b23e <LCD_GetYSizeEx>
 800b28a:	bf00      	nop
 800b28c:	20000038 	.word	0x20000038

0800b290 <LCD_GetNumColors>:
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <LCD_GetNumColors+0xc>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	7c58      	ldrb	r0, [r3, #17]
 800b296:	f7ff bfde 	b.w	800b256 <LCD_GetNumColorsEx>
 800b29a:	bf00      	nop
 800b29c:	20000038 	.word	0x20000038

0800b2a0 <GUI_GetBitsPerPixelEx>:
 800b2a0:	b508      	push	{r3, lr}
 800b2a2:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <GUI_GetBitsPerPixelEx+0x14>)
 800b2a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b2a8:	68c3      	ldr	r3, [r0, #12]
 800b2aa:	2108      	movs	r1, #8
 800b2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ae:	4798      	blx	r3
 800b2b0:	bd08      	pop	{r3, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20023074 	.word	0x20023074

0800b2b8 <LCD_GetDevFunc>:
 800b2b8:	b508      	push	{r3, lr}
 800b2ba:	4b04      	ldr	r3, [pc, #16]	; (800b2cc <LCD_GetDevFunc+0x14>)
 800b2bc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800b2c0:	68d2      	ldr	r2, [r2, #12]
 800b2c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2c8:	4790      	blx	r2
 800b2ca:	bd08      	pop	{r3, pc}
 800b2cc:	20023074 	.word	0x20023074

0800b2d0 <LCD_GetPaletteEx>:
 800b2d0:	b508      	push	{r3, lr}
 800b2d2:	f002 ff0f 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b2d6:	b120      	cbz	r0, 800b2e2 <LCD_GetPaletteEx+0x12>
 800b2d8:	68c3      	ldr	r3, [r0, #12]
 800b2da:	2102      	movs	r1, #2
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	4798      	blx	r3
 800b2e0:	bd08      	pop	{r3, pc}
 800b2e2:	bd08      	pop	{r3, pc}

0800b2e4 <LCD_GetPalette>:
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <LCD_GetPalette+0xc>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	7c58      	ldrb	r0, [r3, #17]
 800b2ea:	f7ff bff1 	b.w	800b2d0 <LCD_GetPaletteEx>
 800b2ee:	bf00      	nop
 800b2f0:	20000038 	.word	0x20000038

0800b2f4 <GUI_GetpfIndex2ColorEx>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <GUI_GetpfIndex2ColorEx+0xc>)
 800b2f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	6858      	ldr	r0, [r3, #4]
 800b2fe:	4770      	bx	lr
 800b300:	20023074 	.word	0x20023074

0800b304 <GUI_GetpfColor2IndexEx>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <GUI_GetpfColor2IndexEx+0xc>)
 800b306:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	6818      	ldr	r0, [r3, #0]
 800b30e:	4770      	bx	lr
 800b310:	20023074 	.word	0x20023074

0800b314 <LCD_GetXSizeMax>:
 800b314:	2001      	movs	r0, #1
 800b316:	f7ff bf7e 	b.w	800b216 <_GetMaxValue>

0800b31a <LCD_GetYSizeMax>:
 800b31a:	2002      	movs	r0, #2
 800b31c:	f7ff bf7b 	b.w	800b216 <_GetMaxValue>

0800b320 <LCD_GetVXSizeMax>:
 800b320:	2003      	movs	r0, #3
 800b322:	f7ff bf78 	b.w	800b216 <_GetMaxValue>
	...

0800b328 <LCD_SetDisplaySize>:
 800b328:	4b02      	ldr	r3, [pc, #8]	; (800b334 <LCD_SetDisplaySize+0xc>)
 800b32a:	6018      	str	r0, [r3, #0]
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <LCD_SetDisplaySize+0x10>)
 800b32e:	6019      	str	r1, [r3, #0]
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	20022a3c 	.word	0x20022a3c
 800b338:	20022a38 	.word	0x20022a38

0800b33c <LCD_GetXSizeDisplay>:
 800b33c:	4b01      	ldr	r3, [pc, #4]	; (800b344 <LCD_GetXSizeDisplay+0x8>)
 800b33e:	6818      	ldr	r0, [r3, #0]
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	20022a3c 	.word	0x20022a3c

0800b348 <LCD_GetYSizeDisplay>:
 800b348:	4b01      	ldr	r3, [pc, #4]	; (800b350 <LCD_GetYSizeDisplay+0x8>)
 800b34a:	6818      	ldr	r0, [r3, #0]
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20022a38 	.word	0x20022a38

0800b354 <LCD__GetBPP>:
 800b354:	2800      	cmp	r0, #0
 800b356:	d03b      	beq.n	800b3d0 <LCD__GetBPP+0x7c>
 800b358:	f030 0301 	bics.w	r3, r0, #1
 800b35c:	d029      	beq.n	800b3b2 <LCD__GetBPP+0x5e>
 800b35e:	f030 0303 	bics.w	r3, r0, #3
 800b362:	d028      	beq.n	800b3b6 <LCD__GetBPP+0x62>
 800b364:	f030 0307 	bics.w	r3, r0, #7
 800b368:	d027      	beq.n	800b3ba <LCD__GetBPP+0x66>
 800b36a:	f030 030f 	bics.w	r3, r0, #15
 800b36e:	d026      	beq.n	800b3be <LCD__GetBPP+0x6a>
 800b370:	f030 031f 	bics.w	r3, r0, #31
 800b374:	d025      	beq.n	800b3c2 <LCD__GetBPP+0x6e>
 800b376:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800b37a:	d024      	beq.n	800b3c6 <LCD__GetBPP+0x72>
 800b37c:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800b380:	f023 0301 	bic.w	r3, r3, #1
 800b384:	b30b      	cbz	r3, 800b3ca <LCD__GetBPP+0x76>
 800b386:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800b38a:	f023 030f 	bic.w	r3, r3, #15
 800b38e:	b1e3      	cbz	r3, 800b3ca <LCD__GetBPP+0x76>
 800b390:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800b394:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b398:	b1bb      	cbz	r3, 800b3ca <LCD__GetBPP+0x76>
 800b39a:	0c03      	lsrs	r3, r0, #16
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	b1a3      	cbz	r3, 800b3ca <LCD__GetBPP+0x76>
 800b3a0:	0c83      	lsrs	r3, r0, #18
 800b3a2:	049b      	lsls	r3, r3, #18
 800b3a4:	b19b      	cbz	r3, 800b3ce <LCD__GetBPP+0x7a>
 800b3a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3aa:	bf0c      	ite	eq
 800b3ac:	2018      	moveq	r0, #24
 800b3ae:	2020      	movne	r0, #32
 800b3b0:	4770      	bx	lr
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	4770      	bx	lr
 800b3b6:	2002      	movs	r0, #2
 800b3b8:	4770      	bx	lr
 800b3ba:	2003      	movs	r0, #3
 800b3bc:	4770      	bx	lr
 800b3be:	2004      	movs	r0, #4
 800b3c0:	4770      	bx	lr
 800b3c2:	2005      	movs	r0, #5
 800b3c4:	4770      	bx	lr
 800b3c6:	2008      	movs	r0, #8
 800b3c8:	4770      	bx	lr
 800b3ca:	2010      	movs	r0, #16
 800b3cc:	4770      	bx	lr
 800b3ce:	2012      	movs	r0, #18
 800b3d0:	4770      	bx	lr

0800b3d2 <LCD__GetBPPDevice>:
 800b3d2:	b508      	push	{r3, lr}
 800b3d4:	f7ff ffbe 	bl	800b354 <LCD__GetBPP>
 800b3d8:	2801      	cmp	r0, #1
 800b3da:	d00f      	beq.n	800b3fc <LCD__GetBPPDevice+0x2a>
 800b3dc:	1e83      	subs	r3, r0, #2
 800b3de:	2b06      	cmp	r3, #6
 800b3e0:	d909      	bls.n	800b3f6 <LCD__GetBPPDevice+0x24>
 800b3e2:	f1a0 0309 	sub.w	r3, r0, #9
 800b3e6:	2b07      	cmp	r3, #7
 800b3e8:	d907      	bls.n	800b3fa <LCD__GetBPPDevice+0x28>
 800b3ea:	3811      	subs	r0, #17
 800b3ec:	2810      	cmp	r0, #16
 800b3ee:	bf34      	ite	cc
 800b3f0:	2020      	movcc	r0, #32
 800b3f2:	2000      	movcs	r0, #0
 800b3f4:	bd08      	pop	{r3, pc}
 800b3f6:	2008      	movs	r0, #8
 800b3f8:	bd08      	pop	{r3, pc}
 800b3fa:	2010      	movs	r0, #16
 800b3fc:	bd08      	pop	{r3, pc}
	...

0800b400 <_OnExit>:
 800b400:	b510      	push	{r4, lr}
 800b402:	4c03      	ldr	r4, [pc, #12]	; (800b410 <_OnExit+0x10>)
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	f003 fb3f 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800b40a:	2300      	movs	r3, #0
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	bd10      	pop	{r4, pc}
 800b410:	20023040 	.word	0x20023040

0800b414 <LCD_InitColors>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	4d09      	ldr	r5, [pc, #36]	; (800b43c <LCD_InitColors+0x28>)
 800b418:	682c      	ldr	r4, [r5, #0]
 800b41a:	b95c      	cbnz	r4, 800b434 <LCD_InitColors+0x20>
 800b41c:	4b08      	ldr	r3, [pc, #32]	; (800b440 <LCD_InitColors+0x2c>)
 800b41e:	6818      	ldr	r0, [r3, #0]
 800b420:	0080      	lsls	r0, r0, #2
 800b422:	f003 fc91 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800b426:	6028      	str	r0, [r5, #0]
 800b428:	b130      	cbz	r0, 800b438 <LCD_InitColors+0x24>
 800b42a:	4806      	ldr	r0, [pc, #24]	; (800b444 <LCD_InitColors+0x30>)
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <LCD_InitColors+0x34>)
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	f002 ffa0 	bl	800e374 <GUI__RegisterExit>
 800b434:	2000      	movs	r0, #0
 800b436:	bd38      	pop	{r3, r4, r5, pc}
 800b438:	2001      	movs	r0, #1
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	20023040 	.word	0x20023040
 800b440:	20000014 	.word	0x20000014
 800b444:	20022a40 	.word	0x20022a40
 800b448:	0800b401 	.word	0x0800b401

0800b44c <LCD_GetpPalConvTableUncached>:
 800b44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b450:	b320      	cbz	r0, 800b49c <LCD_GetpPalConvTableUncached+0x50>
 800b452:	6885      	ldr	r5, [r0, #8]
 800b454:	b1dd      	cbz	r5, 800b48e <LCD_GetpPalConvTableUncached+0x42>
 800b456:	4e12      	ldr	r6, [pc, #72]	; (800b4a0 <LCD_GetpPalConvTableUncached+0x54>)
 800b458:	6833      	ldr	r3, [r6, #0]
 800b45a:	b1db      	cbz	r3, 800b494 <LCD_GetpPalConvTableUncached+0x48>
 800b45c:	6803      	ldr	r3, [r0, #0]
 800b45e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b462:	dc1a      	bgt.n	800b49a <LCD_GetpPalConvTableUncached+0x4e>
 800b464:	4a0f      	ldr	r2, [pc, #60]	; (800b4a4 <LCD_GetpPalConvTableUncached+0x58>)
 800b466:	6812      	ldr	r2, [r2, #0]
 800b468:	2400      	movs	r4, #0
 800b46a:	429a      	cmp	r2, r3
 800b46c:	bfb4      	ite	lt
 800b46e:	4690      	movlt	r8, r2
 800b470:	4698      	movge	r8, r3
 800b472:	4544      	cmp	r4, r8
 800b474:	da08      	bge.n	800b488 <LCD_GetpPalConvTableUncached+0x3c>
 800b476:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800b47a:	6837      	ldr	r7, [r6, #0]
 800b47c:	f000 fb5a 	bl	800bb34 <LCD_Color2Index>
 800b480:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800b484:	3401      	adds	r4, #1
 800b486:	e7f4      	b.n	800b472 <LCD_GetpPalConvTableUncached+0x26>
 800b488:	6830      	ldr	r0, [r6, #0]
 800b48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b48e:	4628      	mov	r0, r5
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	4618      	mov	r0, r3
 800b496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49a:	2000      	movs	r0, #0
 800b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a0:	20023040 	.word	0x20023040
 800b4a4:	20000014 	.word	0x20000014

0800b4a8 <LCD_GetpPalConvTable>:
 800b4a8:	f7ff bfd0 	b.w	800b44c <LCD_GetpPalConvTableUncached>

0800b4ac <LCD_GetpPalConvTableBM>:
 800b4ac:	f7ff bfce 	b.w	800b44c <LCD_GetpPalConvTableUncached>

0800b4b0 <LCD_InitLUT>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	f006 f852 	bl	801155c <LCD_GetNumLayers>
 800b4b8:	2400      	movs	r4, #0
 800b4ba:	4680      	mov	r8, r0
 800b4bc:	4544      	cmp	r4, r8
 800b4be:	da2c      	bge.n	800b51a <LCD_InitLUT+0x6a>
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f002 fe17 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800b4c6:	b330      	cbz	r0, 800b516 <LCD_InitLUT+0x66>
 800b4c8:	4e15      	ldr	r6, [pc, #84]	; (800b520 <LCD_InitLUT+0x70>)
 800b4ca:	6833      	ldr	r3, [r6, #0]
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f893 9011 	ldrb.w	r9, [r3, #17]
 800b4d2:	745c      	strb	r4, [r3, #17]
 800b4d4:	f7ff febc 	bl	800b250 <LCD_GetBitsPerPixelEx>
 800b4d8:	2808      	cmp	r0, #8
 800b4da:	dd03      	ble.n	800b4e4 <LCD_InitLUT+0x34>
 800b4dc:	6833      	ldr	r3, [r6, #0]
 800b4de:	f883 9011 	strb.w	r9, [r3, #17]
 800b4e2:	e018      	b.n	800b516 <LCD_InitLUT+0x66>
 800b4e4:	4b0f      	ldr	r3, [pc, #60]	; (800b524 <LCD_InitLUT+0x74>)
 800b4e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b4ea:	691a      	ldr	r2, [r3, #16]
 800b4ec:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <LCD_InitLUT+0x78>)
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d0f4      	beq.n	800b4dc <LCD_InitLUT+0x2c>
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7ff feaf 	bl	800b256 <LCD_GetNumColorsEx>
 800b4f8:	2500      	movs	r5, #0
 800b4fa:	4682      	mov	sl, r0
 800b4fc:	4555      	cmp	r5, sl
 800b4fe:	daed      	bge.n	800b4dc <LCD_InitLUT+0x2c>
 800b500:	b2ef      	uxtb	r7, r5
 800b502:	4638      	mov	r0, r7
 800b504:	f000 fb26 	bl	800bb54 <LCD_Index2Color>
 800b508:	4639      	mov	r1, r7
 800b50a:	4602      	mov	r2, r0
 800b50c:	4620      	mov	r0, r4
 800b50e:	f7ff fe2b 	bl	800b168 <LCD_SetLUTEntryEx>
 800b512:	3501      	adds	r5, #1
 800b514:	e7f2      	b.n	800b4fc <LCD_InitLUT+0x4c>
 800b516:	3401      	adds	r4, #1
 800b518:	e7d0      	b.n	800b4bc <LCD_InitLUT+0xc>
 800b51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51e:	bf00      	nop
 800b520:	20000038 	.word	0x20000038
 800b524:	20023074 	.word	0x20023074
 800b528:	0801405c 	.word	0x0801405c

0800b52c <_SetDrawMode>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	4b08      	ldr	r3, [pc, #32]	; (800b550 <_SetDrawMode+0x24>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	7c1a      	ldrb	r2, [r3, #16]
 800b534:	ea80 0102 	eor.w	r1, r0, r2
 800b538:	0749      	lsls	r1, r1, #29
 800b53a:	d505      	bpl.n	800b548 <_SetDrawMode+0x1c>
 800b53c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b53e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b540:	6826      	ldr	r6, [r4, #0]
 800b542:	680d      	ldr	r5, [r1, #0]
 800b544:	6025      	str	r5, [r4, #0]
 800b546:	600e      	str	r6, [r1, #0]
 800b548:	7418      	strb	r0, [r3, #16]
 800b54a:	4610      	mov	r0, r2
 800b54c:	bd70      	pop	{r4, r5, r6, pc}
 800b54e:	bf00      	nop
 800b550:	20000038 	.word	0x20000038

0800b554 <LCD_SetDrawMode>:
 800b554:	b508      	push	{r3, lr}
 800b556:	4b02      	ldr	r3, [pc, #8]	; (800b560 <LCD_SetDrawMode+0xc>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	4798      	blx	r3
 800b55e:	bd08      	pop	{r3, pc}
 800b560:	20000018 	.word	0x20000018

0800b564 <LCD_DrawPixel>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4b14      	ldr	r3, [pc, #80]	; (800b5b8 <LCD_DrawPixel+0x54>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	460a      	mov	r2, r1
 800b56c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800b570:	428a      	cmp	r2, r1
 800b572:	4604      	mov	r4, r0
 800b574:	db1e      	blt.n	800b5b4 <LCD_DrawPixel+0x50>
 800b576:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800b57a:	428a      	cmp	r2, r1
 800b57c:	dc1a      	bgt.n	800b5b4 <LCD_DrawPixel+0x50>
 800b57e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800b582:	4288      	cmp	r0, r1
 800b584:	db16      	blt.n	800b5b4 <LCD_DrawPixel+0x50>
 800b586:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b58a:	4288      	cmp	r0, r1
 800b58c:	dc12      	bgt.n	800b5b4 <LCD_DrawPixel+0x50>
 800b58e:	7c19      	ldrb	r1, [r3, #16]
 800b590:	7c58      	ldrb	r0, [r3, #17]
 800b592:	f011 0f01 	tst.w	r1, #1
 800b596:	4909      	ldr	r1, [pc, #36]	; (800b5bc <LCD_DrawPixel+0x58>)
 800b598:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b59c:	d004      	beq.n	800b5a8 <LCD_DrawPixel+0x44>
 800b59e:	68c3      	ldr	r3, [r0, #12]
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	4798      	blx	r3
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	68c1      	ldr	r1, [r0, #12]
 800b5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ac:	698d      	ldr	r5, [r1, #24]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	47a8      	blx	r5
 800b5b4:	bd38      	pop	{r3, r4, r5, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20000038 	.word	0x20000038
 800b5bc:	20023074 	.word	0x20023074

0800b5c0 <LCD_DrawHLine>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4b10      	ldr	r3, [pc, #64]	; (800b604 <LCD_DrawHLine+0x44>)
 800b5c4:	681c      	ldr	r4, [r3, #0]
 800b5c6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b5ca:	4299      	cmp	r1, r3
 800b5cc:	460d      	mov	r5, r1
 800b5ce:	db17      	blt.n	800b600 <LCD_DrawHLine+0x40>
 800b5d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b5d4:	4299      	cmp	r1, r3
 800b5d6:	dc13      	bgt.n	800b600 <LCD_DrawHLine+0x40>
 800b5d8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e0:	4288      	cmp	r0, r1
 800b5e2:	bfa8      	it	ge
 800b5e4:	4601      	movge	r1, r0
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	bfb8      	it	lt
 800b5ea:	4613      	movlt	r3, r2
 800b5ec:	428b      	cmp	r3, r1
 800b5ee:	db07      	blt.n	800b600 <LCD_DrawHLine+0x40>
 800b5f0:	7c60      	ldrb	r0, [r4, #17]
 800b5f2:	4a05      	ldr	r2, [pc, #20]	; (800b608 <LCD_DrawHLine+0x48>)
 800b5f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800b5f8:	68c2      	ldr	r2, [r0, #12]
 800b5fa:	6894      	ldr	r4, [r2, #8]
 800b5fc:	462a      	mov	r2, r5
 800b5fe:	47a0      	blx	r4
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	bf00      	nop
 800b604:	20000038 	.word	0x20000038
 800b608:	20023074 	.word	0x20023074

0800b60c <LCD_DrawVLine>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4b10      	ldr	r3, [pc, #64]	; (800b650 <LCD_DrawVLine+0x44>)
 800b610:	681c      	ldr	r4, [r3, #0]
 800b612:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800b616:	4605      	mov	r5, r0
 800b618:	429d      	cmp	r5, r3
 800b61a:	4610      	mov	r0, r2
 800b61c:	db17      	blt.n	800b64e <LCD_DrawVLine+0x42>
 800b61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b622:	429d      	cmp	r5, r3
 800b624:	dc13      	bgt.n	800b64e <LCD_DrawVLine+0x42>
 800b626:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b62a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b62e:	4291      	cmp	r1, r2
 800b630:	bfa8      	it	ge
 800b632:	460a      	movge	r2, r1
 800b634:	4298      	cmp	r0, r3
 800b636:	bfb8      	it	lt
 800b638:	4603      	movlt	r3, r0
 800b63a:	4293      	cmp	r3, r2
 800b63c:	db07      	blt.n	800b64e <LCD_DrawVLine+0x42>
 800b63e:	7c60      	ldrb	r0, [r4, #17]
 800b640:	4904      	ldr	r1, [pc, #16]	; (800b654 <LCD_DrawVLine+0x48>)
 800b642:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b646:	68c1      	ldr	r1, [r0, #12]
 800b648:	68cc      	ldr	r4, [r1, #12]
 800b64a:	4629      	mov	r1, r5
 800b64c:	47a0      	blx	r4
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	20000038 	.word	0x20000038
 800b654:	20023074 	.word	0x20023074

0800b658 <LCD_FillRect>:
 800b658:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b65a:	460e      	mov	r6, r1
 800b65c:	4912      	ldr	r1, [pc, #72]	; (800b6a8 <LCD_FillRect+0x50>)
 800b65e:	680c      	ldr	r4, [r1, #0]
 800b660:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b668:	4288      	cmp	r0, r1
 800b66a:	bfa8      	it	ge
 800b66c:	4601      	movge	r1, r0
 800b66e:	42aa      	cmp	r2, r5
 800b670:	bfb8      	it	lt
 800b672:	4615      	movlt	r5, r2
 800b674:	428d      	cmp	r5, r1
 800b676:	db14      	blt.n	800b6a2 <LCD_FillRect+0x4a>
 800b678:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b67c:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b680:	4296      	cmp	r6, r2
 800b682:	bfa8      	it	ge
 800b684:	4632      	movge	r2, r6
 800b686:	4283      	cmp	r3, r0
 800b688:	bfa8      	it	ge
 800b68a:	4603      	movge	r3, r0
 800b68c:	4293      	cmp	r3, r2
 800b68e:	db08      	blt.n	800b6a2 <LCD_FillRect+0x4a>
 800b690:	7c64      	ldrb	r4, [r4, #17]
 800b692:	4806      	ldr	r0, [pc, #24]	; (800b6ac <LCD_FillRect+0x54>)
 800b694:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b698:	68c4      	ldr	r4, [r0, #12]
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	6924      	ldr	r4, [r4, #16]
 800b69e:	462b      	mov	r3, r5
 800b6a0:	47a0      	blx	r4
 800b6a2:	b002      	add	sp, #8
 800b6a4:	bd70      	pop	{r4, r5, r6, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000038 	.word	0x20000038
 800b6ac:	20023074 	.word	0x20023074

0800b6b0 <LCD__DrawBitmap_1bpp>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800b864 <LCD__DrawBitmap_1bpp+0x1b4>
 800b6b8:	b08f      	sub	sp, #60	; 0x3c
 800b6ba:	f8dc c000 	ldr.w	ip, [ip]
 800b6be:	9009      	str	r0, [sp, #36]	; 0x24
 800b6c0:	460e      	mov	r6, r1
 800b6c2:	4615      	mov	r5, r2
 800b6c4:	469b      	mov	fp, r3
 800b6c6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b6c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b6cc:	f1bc 0f00 	cmp.w	ip, #0
 800b6d0:	d00d      	beq.n	800b6ee <LCD__DrawBitmap_1bpp+0x3e>
 800b6d2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b6d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b6d6:	9500      	str	r5, [sp, #0]
 800b6d8:	9601      	str	r6, [sp, #4]
 800b6da:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b6dc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b6de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b6e0:	9702      	str	r7, [sp, #8]
 800b6e2:	9503      	str	r5, [sp, #12]
 800b6e4:	9404      	str	r4, [sp, #16]
 800b6e6:	9605      	str	r6, [sp, #20]
 800b6e8:	f8dc 4000 	ldr.w	r4, [ip]
 800b6ec:	e053      	b.n	800b796 <LCD__DrawBitmap_1bpp+0xe6>
 800b6ee:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b6f0:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b6f2:	ea47 0300 	orr.w	r3, r7, r0
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d14f      	bne.n	800b79a <LCD__DrawBitmap_1bpp+0xea>
 800b6fa:	4b58      	ldr	r3, [pc, #352]	; (800b85c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b6fc:	6818      	ldr	r0, [r3, #0]
 800b6fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b702:	1a51      	subs	r1, r2, r1
 800b704:	2900      	cmp	r1, #0
 800b706:	dd08      	ble.n	800b71a <LCD__DrawBitmap_1bpp+0x6a>
 800b708:	ebc1 030b 	rsb	r3, r1, fp
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f340 80a2 	ble.w	800b856 <LCD__DrawBitmap_1bpp+0x1a6>
 800b712:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b714:	fb07 4401 	mla	r4, r7, r1, r4
 800b718:	e001      	b.n	800b71e <LCD__DrawBitmap_1bpp+0x6e>
 800b71a:	465b      	mov	r3, fp
 800b71c:	4632      	mov	r2, r6
 800b71e:	445e      	add	r6, fp
 800b720:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800b724:	3e01      	subs	r6, #1
 800b726:	1a76      	subs	r6, r6, r1
 800b728:	2e00      	cmp	r6, #0
 800b72a:	dd03      	ble.n	800b734 <LCD__DrawBitmap_1bpp+0x84>
 800b72c:	1b9b      	subs	r3, r3, r6
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f340 8091 	ble.w	800b856 <LCD__DrawBitmap_1bpp+0x1a6>
 800b734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b736:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800b73a:	4429      	add	r1, r5
 800b73c:	3901      	subs	r1, #1
 800b73e:	1b89      	subs	r1, r1, r6
 800b740:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b742:	2900      	cmp	r1, #0
 800b744:	bfc8      	it	gt
 800b746:	ebc1 0505 	rsbgt	r5, r1, r5
 800b74a:	ebc8 0106 	rsb	r1, r8, r6
 800b74e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800b752:	42b1      	cmp	r1, r6
 800b754:	da0c      	bge.n	800b770 <LCD__DrawBitmap_1bpp+0xc0>
 800b756:	ebc1 0c06 	rsb	ip, r1, r6
 800b75a:	eb08 070c 	add.w	r7, r8, ip
 800b75e:	1b8e      	subs	r6, r1, r6
 800b760:	f02c 0c07 	bic.w	ip, ip, #7
 800b764:	4435      	add	r5, r6
 800b766:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800b76a:	4461      	add	r1, ip
 800b76c:	f007 0807 	and.w	r8, r7, #7
 800b770:	2d00      	cmp	r5, #0
 800b772:	dd70      	ble.n	800b856 <LCD__DrawBitmap_1bpp+0x1a6>
 800b774:	7c46      	ldrb	r6, [r0, #17]
 800b776:	483a      	ldr	r0, [pc, #232]	; (800b860 <LCD__DrawBitmap_1bpp+0x1b0>)
 800b778:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b77a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800b77e:	68c6      	ldr	r6, [r0, #12]
 800b780:	9701      	str	r7, [sp, #4]
 800b782:	9403      	str	r4, [sp, #12]
 800b784:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b786:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	9702      	str	r7, [sp, #8]
 800b78c:	f8cd 8010 	str.w	r8, [sp, #16]
 800b790:	9405      	str	r4, [sp, #20]
 800b792:	6874      	ldr	r4, [r6, #4]
 800b794:	462b      	mov	r3, r5
 800b796:	47a0      	blx	r4
 800b798:	e05d      	b.n	800b856 <LCD__DrawBitmap_1bpp+0x1a6>
 800b79a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b79c:	f1c7 0708 	rsb	r7, r7, #8
 800b7a0:	970c      	str	r7, [sp, #48]	; 0x30
 800b7a2:	4667      	mov	r7, ip
 800b7a4:	45dc      	cmp	ip, fp
 800b7a6:	da56      	bge.n	800b856 <LCD__DrawBitmap_1bpp+0x1a6>
 800b7a8:	4b2c      	ldr	r3, [pc, #176]	; (800b85c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b7aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4430      	add	r0, r6
 800b7b0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b7b4:	900a      	str	r0, [sp, #40]	; 0x28
 800b7b6:	1e41      	subs	r1, r0, #1
 800b7b8:	4291      	cmp	r1, r2
 800b7ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800b7bc:	db45      	blt.n	800b84a <LCD__DrawBitmap_1bpp+0x19a>
 800b7be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b7c2:	429e      	cmp	r6, r3
 800b7c4:	dc41      	bgt.n	800b84a <LCD__DrawBitmap_1bpp+0x19a>
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b7ce:	9408      	str	r4, [sp, #32]
 800b7d0:	46c2      	mov	sl, r8
 800b7d2:	45aa      	cmp	sl, r5
 800b7d4:	da39      	bge.n	800b84a <LCD__DrawBitmap_1bpp+0x19a>
 800b7d6:	f1b8 0f00 	cmp.w	r8, #0
 800b7da:	d105      	bne.n	800b7e8 <LCD__DrawBitmap_1bpp+0x138>
 800b7dc:	9a08      	ldr	r2, [sp, #32]
 800b7de:	7817      	ldrb	r7, [r2, #0]
 800b7e0:	3201      	adds	r2, #1
 800b7e2:	9208      	str	r2, [sp, #32]
 800b7e4:	f04f 0808 	mov.w	r8, #8
 800b7e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b7ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b7ec:	4a1b      	ldr	r2, [pc, #108]	; (800b85c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b7ee:	fa47 f300 	asr.w	r3, r7, r0
 800b7f2:	ebc1 0808 	rsb	r8, r1, r8
 800b7f6:	408f      	lsls	r7, r1
 800b7f8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800b7fc:	b2ff      	uxtb	r7, r7
 800b7fe:	d103      	bne.n	800b808 <LCD__DrawBitmap_1bpp+0x158>
 800b800:	6810      	ldr	r0, [r2, #0]
 800b802:	7c00      	ldrb	r0, [r0, #16]
 800b804:	0780      	lsls	r0, r0, #30
 800b806:	d41b      	bmi.n	800b840 <LCD__DrawBitmap_1bpp+0x190>
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b80c:	6810      	ldr	r0, [r2, #0]
 800b80e:	900d      	str	r0, [sp, #52]	; 0x34
 800b810:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b812:	b110      	cbz	r0, 800b81a <LCD__DrawBitmap_1bpp+0x16a>
 800b814:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b818:	e000      	b.n	800b81c <LCD__DrawBitmap_1bpp+0x16c>
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	1e4a      	subs	r2, r1, #1
 800b822:	444a      	add	r2, r9
 800b824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b826:	f8cd c01c 	str.w	ip, [sp, #28]
 800b82a:	4648      	mov	r0, r9
 800b82c:	4631      	mov	r1, r6
 800b82e:	f7ff ff13 	bl	800b658 <LCD_FillRect>
 800b832:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b842:	f10a 0a01 	add.w	sl, sl, #1
 800b846:	4499      	add	r9, r3
 800b848:	e7c3      	b.n	800b7d2 <LCD__DrawBitmap_1bpp+0x122>
 800b84a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b84c:	f10c 0c01 	add.w	ip, ip, #1
 800b850:	4434      	add	r4, r6
 800b852:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b854:	e7a6      	b.n	800b7a4 <LCD__DrawBitmap_1bpp+0xf4>
 800b856:	b00f      	add	sp, #60	; 0x3c
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	20000038 	.word	0x20000038
 800b860:	20023074 	.word	0x20023074
 800b864:	20023048 	.word	0x20023048

0800b868 <LCD_DrawBitmap>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800ba7c <LCD_DrawBitmap+0x214>
 800b870:	b091      	sub	sp, #68	; 0x44
 800b872:	f8dc 9000 	ldr.w	r9, [ip]
 800b876:	9207      	str	r2, [sp, #28]
 800b878:	4605      	mov	r5, r0
 800b87a:	4688      	mov	r8, r1
 800b87c:	469b      	mov	fp, r3
 800b87e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b880:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	d00c      	beq.n	800b8a2 <LCD_DrawBitmap+0x3a>
 800b888:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b88a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b88c:	9500      	str	r5, [sp, #0]
 800b88e:	9701      	str	r7, [sp, #4]
 800b890:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b892:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b894:	9602      	str	r6, [sp, #8]
 800b896:	9503      	str	r5, [sp, #12]
 800b898:	9404      	str	r4, [sp, #16]
 800b89a:	9705      	str	r7, [sp, #20]
 800b89c:	f8d9 4000 	ldr.w	r4, [r9]
 800b8a0:	e081      	b.n	800b9a6 <LCD_DrawBitmap+0x13e>
 800b8a2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b8a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b8a6:	ea47 0300 	orr.w	r3, r7, r0
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d17d      	bne.n	800b9aa <LCD_DrawBitmap+0x142>
 800b8ae:	4b71      	ldr	r3, [pc, #452]	; (800ba74 <LCD_DrawBitmap+0x20c>)
 800b8b0:	6818      	ldr	r0, [r3, #0]
 800b8b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b8b6:	1a53      	subs	r3, r2, r1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd08      	ble.n	800b8ce <LCD_DrawBitmap+0x66>
 800b8bc:	ebc3 010b 	rsb	r1, r3, fp
 800b8c0:	2900      	cmp	r1, #0
 800b8c2:	f340 80d4 	ble.w	800ba6e <LCD_DrawBitmap+0x206>
 800b8c6:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b8c8:	fb07 4403 	mla	r4, r7, r3, r4
 800b8cc:	e001      	b.n	800b8d2 <LCD_DrawBitmap+0x6a>
 800b8ce:	4659      	mov	r1, fp
 800b8d0:	4642      	mov	r2, r8
 800b8d2:	44d8      	add	r8, fp
 800b8d4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800b8d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b8dc:	ebc3 0808 	rsb	r8, r3, r8
 800b8e0:	f1b8 0f00 	cmp.w	r8, #0
 800b8e4:	dd04      	ble.n	800b8f0 <LCD_DrawBitmap+0x88>
 800b8e6:	ebc8 0101 	rsb	r1, r8, r1
 800b8ea:	2900      	cmp	r1, #0
 800b8ec:	f340 80bf 	ble.w	800ba6e <LCD_DrawBitmap+0x206>
 800b8f0:	9b07      	ldr	r3, [sp, #28]
 800b8f2:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800b8f6:	442b      	add	r3, r5
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	ebcc 0303 	rsb	r3, ip, r3
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	dd02      	ble.n	800b908 <LCD_DrawBitmap+0xa0>
 800b902:	9f07      	ldr	r7, [sp, #28]
 800b904:	1aff      	subs	r7, r7, r3
 800b906:	9707      	str	r7, [sp, #28]
 800b908:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800b90c:	4565      	cmp	r5, ip
 800b90e:	da33      	bge.n	800b978 <LCD_DrawBitmap+0x110>
 800b910:	9f07      	ldr	r7, [sp, #28]
 800b912:	ebc5 030c 	rsb	r3, r5, ip
 800b916:	1aff      	subs	r7, r7, r3
 800b918:	2e08      	cmp	r6, #8
 800b91a:	9707      	str	r7, [sp, #28]
 800b91c:	d027      	beq.n	800b96e <LCD_DrawBitmap+0x106>
 800b91e:	dc0d      	bgt.n	800b93c <LCD_DrawBitmap+0xd4>
 800b920:	2e02      	cmp	r6, #2
 800b922:	d014      	beq.n	800b94e <LCD_DrawBitmap+0xe6>
 800b924:	2e04      	cmp	r6, #4
 800b926:	d01a      	beq.n	800b95e <LCD_DrawBitmap+0xf6>
 800b928:	2e01      	cmp	r6, #1
 800b92a:	d126      	bne.n	800b97a <LCD_DrawBitmap+0x112>
 800b92c:	f023 0c07 	bic.w	ip, r3, #7
 800b930:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800b934:	4465      	add	r5, ip
 800b936:	f003 0307 	and.w	r3, r3, #7
 800b93a:	e01e      	b.n	800b97a <LCD_DrawBitmap+0x112>
 800b93c:	2e18      	cmp	r6, #24
 800b93e:	d018      	beq.n	800b972 <LCD_DrawBitmap+0x10a>
 800b940:	2e20      	cmp	r6, #32
 800b942:	d016      	beq.n	800b972 <LCD_DrawBitmap+0x10a>
 800b944:	2e10      	cmp	r6, #16
 800b946:	d118      	bne.n	800b97a <LCD_DrawBitmap+0x112>
 800b948:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b94c:	e013      	b.n	800b976 <LCD_DrawBitmap+0x10e>
 800b94e:	f023 0c03 	bic.w	ip, r3, #3
 800b952:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800b956:	4465      	add	r5, ip
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	e00d      	b.n	800b97a <LCD_DrawBitmap+0x112>
 800b95e:	f023 0c01 	bic.w	ip, r3, #1
 800b962:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800b966:	4465      	add	r5, ip
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	e005      	b.n	800b97a <LCD_DrawBitmap+0x112>
 800b96e:	441c      	add	r4, r3
 800b970:	e001      	b.n	800b976 <LCD_DrawBitmap+0x10e>
 800b972:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b976:	4665      	mov	r5, ip
 800b978:	2300      	movs	r3, #0
 800b97a:	9f07      	ldr	r7, [sp, #28]
 800b97c:	2f00      	cmp	r7, #0
 800b97e:	dd76      	ble.n	800ba6e <LCD_DrawBitmap+0x206>
 800b980:	f890 e011 	ldrb.w	lr, [r0, #17]
 800b984:	483c      	ldr	r0, [pc, #240]	; (800ba78 <LCD_DrawBitmap+0x210>)
 800b986:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b988:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800b98c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800b990:	9403      	str	r4, [sp, #12]
 800b992:	e88d 0042 	stmia.w	sp, {r1, r6}
 800b996:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800b998:	9304      	str	r3, [sp, #16]
 800b99a:	9702      	str	r7, [sp, #8]
 800b99c:	9405      	str	r4, [sp, #20]
 800b99e:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	47a0      	blx	r4
 800b9a8:	e061      	b.n	800ba6e <LCD_DrawBitmap+0x206>
 800b9aa:	f1c6 0708 	rsb	r7, r6, #8
 800b9ae:	970e      	str	r7, [sp, #56]	; 0x38
 800b9b0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b9b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b9b6:	455f      	cmp	r7, fp
 800b9b8:	da59      	bge.n	800ba6e <LCD_DrawBitmap+0x206>
 800b9ba:	4b2e      	ldr	r3, [pc, #184]	; (800ba74 <LCD_DrawBitmap+0x20c>)
 800b9bc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4447      	add	r7, r8
 800b9c2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b9c6:	970c      	str	r7, [sp, #48]	; 0x30
 800b9c8:	3f01      	subs	r7, #1
 800b9ca:	4297      	cmp	r7, r2
 800b9cc:	970d      	str	r7, [sp, #52]	; 0x34
 800b9ce:	db46      	blt.n	800ba5e <LCD_DrawBitmap+0x1f6>
 800b9d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b9d4:	4598      	cmp	r8, r3
 800b9d6:	dc42      	bgt.n	800ba5e <LCD_DrawBitmap+0x1f6>
 800b9d8:	f04f 0a00 	mov.w	sl, #0
 800b9dc:	940b      	str	r4, [sp, #44]	; 0x2c
 800b9de:	46ac      	mov	ip, r5
 800b9e0:	4657      	mov	r7, sl
 800b9e2:	9807      	ldr	r0, [sp, #28]
 800b9e4:	4287      	cmp	r7, r0
 800b9e6:	da3a      	bge.n	800ba5e <LCD_DrawBitmap+0x1f6>
 800b9e8:	f1ba 0f00 	cmp.w	sl, #0
 800b9ec:	d106      	bne.n	800b9fc <LCD_DrawBitmap+0x194>
 800b9ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b9f0:	f890 9000 	ldrb.w	r9, [r0]
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9f8:	f04f 0a08 	mov.w	sl, #8
 800b9fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ba74 <LCD_DrawBitmap+0x20c>)
 800ba00:	fa49 f301 	asr.w	r3, r9, r1
 800ba04:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800ba08:	fa09 f906 	lsl.w	r9, r9, r6
 800ba0c:	fa5f f989 	uxtb.w	r9, r9
 800ba10:	ebc6 0a0a 	rsb	sl, r6, sl
 800ba14:	d103      	bne.n	800ba1e <LCD_DrawBitmap+0x1b6>
 800ba16:	6810      	ldr	r0, [r2, #0]
 800ba18:	7c00      	ldrb	r0, [r0, #16]
 800ba1a:	0780      	lsls	r0, r0, #30
 800ba1c:	d41b      	bmi.n	800ba56 <LCD_DrawBitmap+0x1ee>
 800ba1e:	6812      	ldr	r2, [r2, #0]
 800ba20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba22:	6810      	ldr	r0, [r2, #0]
 800ba24:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba26:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800ba28:	b110      	cbz	r0, 800ba30 <LCD_DrawBitmap+0x1c8>
 800ba2a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ba2e:	e000      	b.n	800ba32 <LCD_DrawBitmap+0x1ca>
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	1e4a      	subs	r2, r1, #1
 800ba38:	4462      	add	r2, ip
 800ba3a:	4660      	mov	r0, ip
 800ba3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba3e:	f8cd c020 	str.w	ip, [sp, #32]
 800ba42:	4641      	mov	r1, r8
 800ba44:	f7ff fe08 	bl	800b658 <LCD_FillRect>
 800ba48:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <LCD_DrawBitmap+0x20c>)
 800ba4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ba52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ba58:	3701      	adds	r7, #1
 800ba5a:	449c      	add	ip, r3
 800ba5c:	e7c1      	b.n	800b9e2 <LCD_DrawBitmap+0x17a>
 800ba5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ba60:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ba64:	3701      	adds	r7, #1
 800ba66:	970a      	str	r7, [sp, #40]	; 0x28
 800ba68:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ba6a:	443c      	add	r4, r7
 800ba6c:	e7a2      	b.n	800b9b4 <LCD_DrawBitmap+0x14c>
 800ba6e:	b011      	add	sp, #68	; 0x44
 800ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba74:	20000038 	.word	0x20000038
 800ba78:	20023074 	.word	0x20023074
 800ba7c:	20023048 	.word	0x20023048

0800ba80 <LCD_SetClipRectMax>:
 800ba80:	b508      	push	{r3, lr}
 800ba82:	4b05      	ldr	r3, [pc, #20]	; (800ba98 <LCD_SetClipRectMax+0x18>)
 800ba84:	6819      	ldr	r1, [r3, #0]
 800ba86:	4b05      	ldr	r3, [pc, #20]	; (800ba9c <LCD_SetClipRectMax+0x1c>)
 800ba88:	7c4a      	ldrb	r2, [r1, #17]
 800ba8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ba8e:	68c3      	ldr	r3, [r0, #12]
 800ba90:	3108      	adds	r1, #8
 800ba92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba94:	4798      	blx	r3
 800ba96:	bd08      	pop	{r3, pc}
 800ba98:	20000038 	.word	0x20000038
 800ba9c:	20023074 	.word	0x20023074

0800baa0 <emWin_LCD_Init>:
 800baa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baa2:	f7ff ffed 	bl	800ba80 <LCD_SetClipRectMax>
 800baa6:	f7ff fcb5 	bl	800b414 <LCD_InitColors>
 800baaa:	4604      	mov	r4, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	d13d      	bne.n	800bb2c <emWin_LCD_Init+0x8c>
 800bab0:	4605      	mov	r5, r0
 800bab2:	4628      	mov	r0, r5
 800bab4:	f002 fb1e 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800bab8:	9001      	str	r0, [sp, #4]
 800baba:	b148      	cbz	r0, 800bad0 <emWin_LCD_Init+0x30>
 800babc:	68c3      	ldr	r3, [r0, #12]
 800babe:	210c      	movs	r1, #12
 800bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac2:	a801      	add	r0, sp, #4
 800bac4:	4798      	blx	r3
 800bac6:	4603      	mov	r3, r0
 800bac8:	b370      	cbz	r0, 800bb28 <emWin_LCD_Init+0x88>
 800baca:	9801      	ldr	r0, [sp, #4]
 800bacc:	4798      	blx	r3
 800bace:	4304      	orrs	r4, r0
 800bad0:	3501      	adds	r5, #1
 800bad2:	2d02      	cmp	r5, #2
 800bad4:	d1ed      	bne.n	800bab2 <emWin_LCD_Init+0x12>
 800bad6:	bb4c      	cbnz	r4, 800bb2c <emWin_LCD_Init+0x8c>
 800bad8:	f7ff fcea 	bl	800b4b0 <LCD_InitLUT>
 800badc:	2401      	movs	r4, #1
 800bade:	4620      	mov	r0, r4
 800bae0:	f002 fb08 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800bae4:	9001      	str	r0, [sp, #4]
 800bae6:	b1d0      	cbz	r0, 800bb1e <emWin_LCD_Init+0x7e>
 800bae8:	4620      	mov	r0, r4
 800baea:	f001 fb89 	bl	800d200 <GUI_SelectLayer>
 800baee:	2004      	movs	r0, #4
 800baf0:	f7ff fd30 	bl	800b554 <LCD_SetDrawMode>
 800baf4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800baf8:	2000      	movs	r0, #0
 800bafa:	4601      	mov	r1, r0
 800bafc:	4613      	mov	r3, r2
 800bafe:	f7ff fdab 	bl	800b658 <LCD_FillRect>
 800bb02:	2000      	movs	r0, #0
 800bb04:	f7ff fd26 	bl	800b554 <LCD_SetDrawMode>
 800bb08:	a802      	add	r0, sp, #8
 800bb0a:	210e      	movs	r1, #14
 800bb0c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb14:	4798      	blx	r3
 800bb16:	4603      	mov	r3, r0
 800bb18:	b108      	cbz	r0, 800bb1e <emWin_LCD_Init+0x7e>
 800bb1a:	9801      	ldr	r0, [sp, #4]
 800bb1c:	4798      	blx	r3
 800bb1e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800bb22:	d2dc      	bcs.n	800bade <emWin_LCD_Init+0x3e>
 800bb24:	2000      	movs	r0, #0
 800bb26:	e002      	b.n	800bb2e <emWin_LCD_Init+0x8e>
 800bb28:	2001      	movs	r0, #1
 800bb2a:	e000      	b.n	800bb2e <emWin_LCD_Init+0x8e>
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	b003      	add	sp, #12
 800bb30:	bd30      	pop	{r4, r5, pc}
	...

0800bb34 <LCD_Color2Index>:
 800bb34:	b508      	push	{r3, lr}
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <LCD_Color2Index+0x18>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	7c5a      	ldrb	r2, [r3, #17]
 800bb3c:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <LCD_Color2Index+0x1c>)
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4798      	blx	r3
 800bb48:	bd08      	pop	{r3, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000038 	.word	0x20000038
 800bb50:	20023074 	.word	0x20023074

0800bb54 <LCD_Index2Color>:
 800bb54:	b508      	push	{r3, lr}
 800bb56:	4b05      	ldr	r3, [pc, #20]	; (800bb6c <LCD_Index2Color+0x18>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	7c5a      	ldrb	r2, [r3, #17]
 800bb5c:	4b04      	ldr	r3, [pc, #16]	; (800bb70 <LCD_Index2Color+0x1c>)
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	4798      	blx	r3
 800bb68:	bd08      	pop	{r3, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000038 	.word	0x20000038
 800bb70:	20023074 	.word	0x20023074

0800bb74 <LCD_SetColorIndex>:
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <LCD_SetColorIndex+0x14>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	7c1a      	ldrb	r2, [r3, #16]
 800bb7a:	0752      	lsls	r2, r2, #29
 800bb7c:	bf4c      	ite	mi
 800bb7e:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800bb80:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800bb82:	6018      	str	r0, [r3, #0]
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20000038 	.word	0x20000038

0800bb8c <_SetColor>:
 800bb8c:	b508      	push	{r3, lr}
 800bb8e:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <_SetColor+0x1c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bb94:	4281      	cmp	r1, r0
 800bb96:	d006      	beq.n	800bba6 <_SetColor+0x1a>
 800bb98:	6318      	str	r0, [r3, #48]	; 0x30
 800bb9a:	f7ff ffcb 	bl	800bb34 <LCD_Color2Index>
 800bb9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bba2:	f7ff bfe7 	b.w	800bb74 <LCD_SetColorIndex>
 800bba6:	bd08      	pop	{r3, pc}
 800bba8:	20000038 	.word	0x20000038

0800bbac <LCD_SetBkColorIndex>:
 800bbac:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <LCD_SetBkColorIndex+0x14>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	7c1a      	ldrb	r2, [r3, #16]
 800bbb2:	0752      	lsls	r2, r2, #29
 800bbb4:	bf4c      	ite	mi
 800bbb6:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800bbb8:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800bbba:	6018      	str	r0, [r3, #0]
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20000038 	.word	0x20000038

0800bbc4 <_SetBkColor>:
 800bbc4:	b508      	push	{r3, lr}
 800bbc6:	4b06      	ldr	r3, [pc, #24]	; (800bbe0 <_SetBkColor+0x1c>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bbcc:	4281      	cmp	r1, r0
 800bbce:	d006      	beq.n	800bbde <_SetBkColor+0x1a>
 800bbd0:	6358      	str	r0, [r3, #52]	; 0x34
 800bbd2:	f7ff ffaf 	bl	800bb34 <LCD_Color2Index>
 800bbd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bbda:	f7ff bfe7 	b.w	800bbac <LCD_SetBkColorIndex>
 800bbde:	bd08      	pop	{r3, pc}
 800bbe0:	20000038 	.word	0x20000038

0800bbe4 <LCD_SetBkColor>:
 800bbe4:	b508      	push	{r3, lr}
 800bbe6:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <LCD_SetBkColor+0xc>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	4798      	blx	r3
 800bbee:	bd08      	pop	{r3, pc}
 800bbf0:	20000018 	.word	0x20000018

0800bbf4 <LCD_SetColor>:
 800bbf4:	b508      	push	{r3, lr}
 800bbf6:	4b02      	ldr	r3, [pc, #8]	; (800bc00 <LCD_SetColor+0xc>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4798      	blx	r3
 800bbfe:	bd08      	pop	{r3, pc}
 800bc00:	20000018 	.word	0x20000018

0800bc04 <GUI__memset>:
 800bc04:	b570      	push	{r4, r5, r6, lr}
 800bc06:	b12a      	cbz	r2, 800bc14 <GUI__memset+0x10>
 800bc08:	0783      	lsls	r3, r0, #30
 800bc0a:	d003      	beq.n	800bc14 <GUI__memset+0x10>
 800bc0c:	f800 1b01 	strb.w	r1, [r0], #1
 800bc10:	3a01      	subs	r2, #1
 800bc12:	e7f8      	b.n	800bc06 <GUI__memset+0x2>
 800bc14:	0893      	lsrs	r3, r2, #2
 800bc16:	d101      	bne.n	800bc1c <GUI__memset+0x18>
 800bc18:	4402      	add	r2, r0
 800bc1a:	e017      	b.n	800bc4c <GUI__memset+0x48>
 800bc1c:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800bc20:	f002 0203 	and.w	r2, r2, #3
 800bc24:	434c      	muls	r4, r1
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	4605      	mov	r5, r0
 800bc2a:	dd06      	ble.n	800bc3a <GUI__memset+0x36>
 800bc2c:	6004      	str	r4, [r0, #0]
 800bc2e:	6044      	str	r4, [r0, #4]
 800bc30:	6084      	str	r4, [r0, #8]
 800bc32:	60c4      	str	r4, [r0, #12]
 800bc34:	3b04      	subs	r3, #4
 800bc36:	3010      	adds	r0, #16
 800bc38:	e7f5      	b.n	800bc26 <GUI__memset+0x22>
 800bc3a:	461e      	mov	r6, r3
 800bc3c:	b11b      	cbz	r3, 800bc46 <GUI__memset+0x42>
 800bc3e:	f845 4b04 	str.w	r4, [r5], #4
 800bc42:	3b01      	subs	r3, #1
 800bc44:	e7fa      	b.n	800bc3c <GUI__memset+0x38>
 800bc46:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800bc4a:	e7e5      	b.n	800bc18 <GUI__memset+0x14>
 800bc4c:	4290      	cmp	r0, r2
 800bc4e:	d002      	beq.n	800bc56 <GUI__memset+0x52>
 800bc50:	f800 1b01 	strb.w	r1, [r0], #1
 800bc54:	e7fa      	b.n	800bc4c <GUI__memset+0x48>
 800bc56:	bd70      	pop	{r4, r5, r6, pc}

0800bc58 <GUI__ManageCacheEx>:
 800bc58:	2801      	cmp	r0, #1
 800bc5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	460d      	mov	r5, r1
 800bc60:	dc65      	bgt.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bc62:	4b34      	ldr	r3, [pc, #208]	; (800bd34 <GUI__ManageCacheEx+0xdc>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <GUI__ManageCacheEx+0x12>
 800bc68:	4798      	blx	r3
 800bc6a:	2d01      	cmp	r5, #1
 800bc6c:	d004      	beq.n	800bc78 <GUI__ManageCacheEx+0x20>
 800bc6e:	2d02      	cmp	r5, #2
 800bc70:	d021      	beq.n	800bcb6 <GUI__ManageCacheEx+0x5e>
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	d15b      	bne.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bc76:	e035      	b.n	800bce4 <GUI__ManageCacheEx+0x8c>
 800bc78:	4e2f      	ldr	r6, [pc, #188]	; (800bd38 <GUI__ManageCacheEx+0xe0>)
 800bc7a:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800bc7e:	b9b7      	cbnz	r7, 800bcae <GUI__ManageCacheEx+0x56>
 800bc80:	4620      	mov	r0, r4
 800bc82:	f002 fa37 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800bc86:	9001      	str	r0, [sp, #4]
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d050      	beq.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bc8c:	68c3      	ldr	r3, [r0, #12]
 800bc8e:	210d      	movs	r1, #13
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	a801      	add	r0, sp, #4
 800bc94:	4798      	blx	r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d048      	beq.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bc9c:	9801      	ldr	r0, [sp, #4]
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4798      	blx	r3
 800bca2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800bca6:	3301      	adds	r3, #1
 800bca8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800bcac:	e018      	b.n	800bce0 <GUI__ManageCacheEx+0x88>
 800bcae:	3701      	adds	r7, #1
 800bcb0:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800bcb4:	e03b      	b.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f002 fa1c 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800bcbc:	9001      	str	r0, [sp, #4]
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d035      	beq.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bcc2:	68c3      	ldr	r3, [r0, #12]
 800bcc4:	210d      	movs	r1, #13
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	a801      	add	r0, sp, #4
 800bcca:	4798      	blx	r3
 800bccc:	4604      	mov	r4, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d02d      	beq.n	800bd2e <GUI__ManageCacheEx+0xd6>
 800bcd2:	4b1a      	ldr	r3, [pc, #104]	; (800bd3c <GUI__ManageCacheEx+0xe4>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <GUI__ManageCacheEx+0x82>
 800bcd8:	4798      	blx	r3
 800bcda:	9801      	ldr	r0, [sp, #4]
 800bcdc:	2102      	movs	r1, #2
 800bcde:	47a0      	blx	r4
 800bce0:	2000      	movs	r0, #0
 800bce2:	e025      	b.n	800bd30 <GUI__ManageCacheEx+0xd8>
 800bce4:	4d14      	ldr	r5, [pc, #80]	; (800bd38 <GUI__ManageCacheEx+0xe0>)
 800bce6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d001      	beq.n	800bcf2 <GUI__ManageCacheEx+0x9a>
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e015      	b.n	800bd1e <GUI__ManageCacheEx+0xc6>
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f002 f9fe 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800bcf8:	9001      	str	r0, [sp, #4]
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d0f7      	beq.n	800bcee <GUI__ManageCacheEx+0x96>
 800bcfe:	68c3      	ldr	r3, [r0, #12]
 800bd00:	210d      	movs	r1, #13
 800bd02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd04:	a801      	add	r0, sp, #4
 800bd06:	4798      	blx	r3
 800bd08:	4606      	mov	r6, r0
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0ef      	beq.n	800bcee <GUI__ManageCacheEx+0x96>
 800bd0e:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <GUI__ManageCacheEx+0xe4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	b103      	cbz	r3, 800bd16 <GUI__ManageCacheEx+0xbe>
 800bd14:	4798      	blx	r3
 800bd16:	9801      	ldr	r0, [sp, #4]
 800bd18:	2100      	movs	r1, #0
 800bd1a:	47b0      	blx	r6
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bf18      	it	ne
 800bd26:	3b01      	subne	r3, #1
 800bd28:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800bd2c:	e000      	b.n	800bd30 <GUI__ManageCacheEx+0xd8>
 800bd2e:	2001      	movs	r0, #1
 800bd30:	b003      	add	sp, #12
 800bd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd34:	20022a54 	.word	0x20022a54
 800bd38:	20022a4c 	.word	0x20022a4c
 800bd3c:	20022a48 	.word	0x20022a48

0800bd40 <GUI__ManageCache>:
 800bd40:	4b02      	ldr	r3, [pc, #8]	; (800bd4c <GUI__ManageCache+0xc>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4601      	mov	r1, r0
 800bd46:	7c58      	ldrb	r0, [r3, #17]
 800bd48:	f7ff bf86 	b.w	800bc58 <GUI__ManageCacheEx>
 800bd4c:	20000038 	.word	0x20000038

0800bd50 <GUI__IntersectRects>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bd56:	f9b1 4000 	ldrsh.w	r4, [r1]
 800bd5a:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800bd5e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800bd62:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800bd66:	429c      	cmp	r4, r3
 800bd68:	bfb8      	it	lt
 800bd6a:	461c      	movlt	r4, r3
 800bd6c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800bd70:	429d      	cmp	r5, r3
 800bd72:	bfa8      	it	ge
 800bd74:	462b      	movge	r3, r5
 800bd76:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800bd7a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800bd7e:	42ae      	cmp	r6, r5
 800bd80:	bfb8      	it	lt
 800bd82:	4635      	movlt	r5, r6
 800bd84:	b2a4      	uxth	r4, r4
 800bd86:	b2ad      	uxth	r5, r5
 800bd88:	4291      	cmp	r1, r2
 800bd8a:	bfb8      	it	lt
 800bd8c:	460a      	movlt	r2, r1
 800bd8e:	8004      	strh	r4, [r0, #0]
 800bd90:	8085      	strh	r5, [r0, #4]
 800bd92:	b224      	sxth	r4, r4
 800bd94:	b22d      	sxth	r5, r5
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	b292      	uxth	r2, r2
 800bd9a:	42a5      	cmp	r5, r4
 800bd9c:	8043      	strh	r3, [r0, #2]
 800bd9e:	80c2      	strh	r2, [r0, #6]
 800bda0:	db06      	blt.n	800bdb0 <GUI__IntersectRects+0x60>
 800bda2:	b210      	sxth	r0, r2
 800bda4:	b21b      	sxth	r3, r3
 800bda6:	4298      	cmp	r0, r3
 800bda8:	bfb4      	ite	lt
 800bdaa:	2000      	movlt	r0, #0
 800bdac:	2001      	movge	r0, #1
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	bd70      	pop	{r4, r5, r6, pc}

0800bdb4 <GUI__IntersectRect>:
 800bdb4:	880b      	ldrh	r3, [r1, #0]
 800bdb6:	b510      	push	{r4, lr}
 800bdb8:	f9b0 4000 	ldrsh.w	r4, [r0]
 800bdbc:	b21a      	sxth	r2, r3
 800bdbe:	4294      	cmp	r4, r2
 800bdc0:	bfb8      	it	lt
 800bdc2:	8003      	strhlt	r3, [r0, #0]
 800bdc4:	884b      	ldrh	r3, [r1, #2]
 800bdc6:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800bdca:	b21a      	sxth	r2, r3
 800bdcc:	4294      	cmp	r4, r2
 800bdce:	bfb8      	it	lt
 800bdd0:	8043      	strhlt	r3, [r0, #2]
 800bdd2:	888b      	ldrh	r3, [r1, #4]
 800bdd4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800bdd8:	b21a      	sxth	r2, r3
 800bdda:	4294      	cmp	r4, r2
 800bddc:	bfc8      	it	gt
 800bdde:	8083      	strhgt	r3, [r0, #4]
 800bde0:	88cb      	ldrh	r3, [r1, #6]
 800bde2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800bde6:	b21a      	sxth	r2, r3
 800bde8:	4291      	cmp	r1, r2
 800bdea:	bfc8      	it	gt
 800bdec:	80c3      	strhgt	r3, [r0, #6]
 800bdee:	bd10      	pop	{r4, pc}

0800bdf0 <GUI__MixColors>:
 800bdf0:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800bdf4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800bdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdfa:	d027      	beq.n	800be4c <GUI__MixColors+0x5c>
 800bdfc:	43d3      	mvns	r3, r2
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	b2cd      	uxtb	r5, r1
 800be02:	b2c6      	uxtb	r6, r0
 800be04:	435d      	muls	r5, r3
 800be06:	fb02 5506 	mla	r5, r2, r6, r5
 800be0a:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800be0e:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800be12:	435e      	muls	r6, r3
 800be14:	fb02 6604 	mla	r6, r2, r4, r6
 800be18:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800be1c:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800be20:	435c      	muls	r4, r3
 800be22:	0e09      	lsrs	r1, r1, #24
 800be24:	0e00      	lsrs	r0, r0, #24
 800be26:	fb02 4407 	mla	r4, r2, r7, r4
 800be2a:	434b      	muls	r3, r1
 800be2c:	0a36      	lsrs	r6, r6, #8
 800be2e:	fb02 3200 	mla	r2, r2, r0, r3
 800be32:	0a24      	lsrs	r4, r4, #8
 800be34:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800be38:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800be3c:	4318      	orrs	r0, r3
 800be3e:	0412      	lsls	r2, r2, #16
 800be40:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800be44:	4318      	orrs	r0, r3
 800be46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800be4a:	4310      	orrs	r0, r2
 800be4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be4e <GUI__MixColorsBulk>:
 800be4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be52:	b085      	sub	sp, #20
 800be54:	4604      	mov	r4, r0
 800be56:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800be5a:	9303      	str	r3, [sp, #12]
 800be5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	9302      	str	r3, [sp, #8]
 800be62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be64:	460d      	mov	r5, r1
 800be66:	4616      	mov	r6, r2
 800be68:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800be6c:	f04f 0900 	mov.w	r9, #0
 800be70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be72:	4599      	cmp	r9, r3
 800be74:	d024      	beq.n	800bec0 <GUI__MixColorsBulk+0x72>
 800be76:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800be7a:	4633      	mov	r3, r6
 800be7c:	46ab      	mov	fp, r5
 800be7e:	4627      	mov	r7, r4
 800be80:	f857 0b04 	ldr.w	r0, [r7], #4
 800be84:	9903      	ldr	r1, [sp, #12]
 800be86:	0e02      	lsrs	r2, r0, #24
 800be88:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800be8c:	434a      	muls	r2, r1
 800be8e:	21ff      	movs	r1, #255	; 0xff
 800be90:	fbb2 f2f1 	udiv	r2, r2, r1
 800be94:	b2d2      	uxtb	r2, r2
 800be96:	f85b 1b04 	ldr.w	r1, [fp], #4
 800be9a:	9301      	str	r3, [sp, #4]
 800be9c:	f7ff ffa8 	bl	800bdf0 <GUI__MixColors>
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800bea6:	f1b8 0801 	subs.w	r8, r8, #1
 800beaa:	f843 0b04 	str.w	r0, [r3], #4
 800beae:	d1e7      	bne.n	800be80 <GUI__MixColorsBulk+0x32>
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	4455      	add	r5, sl
 800beb4:	4454      	add	r4, sl
 800beb6:	4456      	add	r6, sl
 800beb8:	441d      	add	r5, r3
 800beba:	f109 0901 	add.w	r9, r9, #1
 800bebe:	e7d7      	b.n	800be70 <GUI__MixColorsBulk+0x22>
 800bec0:	b005      	add	sp, #20
 800bec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bec8 <_OnExit>:
 800bec8:	b570      	push	{r4, r5, r6, lr}
 800beca:	4c0a      	ldr	r4, [pc, #40]	; (800bef4 <_OnExit+0x2c>)
 800becc:	4d0a      	ldr	r5, [pc, #40]	; (800bef8 <_OnExit+0x30>)
 800bece:	6820      	ldr	r0, [r4, #0]
 800bed0:	4e0a      	ldr	r6, [pc, #40]	; (800befc <_OnExit+0x34>)
 800bed2:	f002 fdd9 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800bed6:	6828      	ldr	r0, [r5, #0]
 800bed8:	f002 fdd6 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800bedc:	6830      	ldr	r0, [r6, #0]
 800bede:	f002 fdd3 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800bee2:	4a07      	ldr	r2, [pc, #28]	; (800bf00 <_OnExit+0x38>)
 800bee4:	2300      	movs	r3, #0
 800bee6:	6013      	str	r3, [r2, #0]
 800bee8:	4a06      	ldr	r2, [pc, #24]	; (800bf04 <_OnExit+0x3c>)
 800beea:	6033      	str	r3, [r6, #0]
 800beec:	602b      	str	r3, [r5, #0]
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	20022a5c 	.word	0x20022a5c
 800bef8:	20022a58 	.word	0x20022a58
 800befc:	20022a60 	.word	0x20022a60
 800bf00:	20022a64 	.word	0x20022a64
 800bf04:	20022a74 	.word	0x20022a74

0800bf08 <GUI__GetAlphaBuffer>:
 800bf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf0c:	461c      	mov	r4, r3
 800bf0e:	4b28      	ldr	r3, [pc, #160]	; (800bfb0 <GUI__GetAlphaBuffer+0xa8>)
 800bf10:	4617      	mov	r7, r2
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	4606      	mov	r6, r0
 800bf16:	4688      	mov	r8, r1
 800bf18:	b932      	cbnz	r2, 800bf28 <GUI__GetAlphaBuffer+0x20>
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4825      	ldr	r0, [pc, #148]	; (800bfb4 <GUI__GetAlphaBuffer+0xac>)
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	4b25      	ldr	r3, [pc, #148]	; (800bfb8 <GUI__GetAlphaBuffer+0xb0>)
 800bf22:	6003      	str	r3, [r0, #0]
 800bf24:	f002 fa26 	bl	800e374 <GUI__RegisterExit>
 800bf28:	4d24      	ldr	r5, [pc, #144]	; (800bfbc <GUI__GetAlphaBuffer+0xb4>)
 800bf2a:	682b      	ldr	r3, [r5, #0]
 800bf2c:	b933      	cbnz	r3, 800bf3c <GUI__GetAlphaBuffer+0x34>
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <GUI__GetAlphaBuffer+0xb8>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	602b      	str	r3, [r5, #0]
 800bf34:	b913      	cbnz	r3, 800bf3c <GUI__GetAlphaBuffer+0x34>
 800bf36:	f7ff f9f3 	bl	800b320 <LCD_GetVXSizeMax>
 800bf3a:	6028      	str	r0, [r5, #0]
 800bf3c:	b10c      	cbz	r4, 800bf42 <GUI__GetAlphaBuffer+0x3a>
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	b196      	cbz	r6, 800bf6a <GUI__GetAlphaBuffer+0x62>
 800bf44:	4b1f      	ldr	r3, [pc, #124]	; (800bfc4 <GUI__GetAlphaBuffer+0xbc>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	4699      	mov	r9, r3
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	b94a      	cbnz	r2, 800bf62 <GUI__GetAlphaBuffer+0x5a>
 800bf4e:	6828      	ldr	r0, [r5, #0]
 800bf50:	0080      	lsls	r0, r0, #2
 800bf52:	f002 fef9 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800bf56:	f1d0 0401 	rsbs	r4, r0, #1
 800bf5a:	f8c9 0000 	str.w	r0, [r9]
 800bf5e:	bf38      	it	cc
 800bf60:	2400      	movcc	r4, #0
 800bf62:	f8d9 3000 	ldr.w	r3, [r9]
 800bf66:	6033      	str	r3, [r6, #0]
 800bf68:	e000      	b.n	800bf6c <GUI__GetAlphaBuffer+0x64>
 800bf6a:	4634      	mov	r4, r6
 800bf6c:	f1b8 0f00 	cmp.w	r8, #0
 800bf70:	d00d      	beq.n	800bf8e <GUI__GetAlphaBuffer+0x86>
 800bf72:	4e15      	ldr	r6, [pc, #84]	; (800bfc8 <GUI__GetAlphaBuffer+0xc0>)
 800bf74:	6833      	ldr	r3, [r6, #0]
 800bf76:	b93b      	cbnz	r3, 800bf88 <GUI__GetAlphaBuffer+0x80>
 800bf78:	6828      	ldr	r0, [r5, #0]
 800bf7a:	0080      	lsls	r0, r0, #2
 800bf7c:	f002 fee4 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	6030      	str	r0, [r6, #0]
 800bf84:	bf08      	it	eq
 800bf86:	2401      	moveq	r4, #1
 800bf88:	6833      	ldr	r3, [r6, #0]
 800bf8a:	f8c8 3000 	str.w	r3, [r8]
 800bf8e:	b167      	cbz	r7, 800bfaa <GUI__GetAlphaBuffer+0xa2>
 800bf90:	4e0e      	ldr	r6, [pc, #56]	; (800bfcc <GUI__GetAlphaBuffer+0xc4>)
 800bf92:	6833      	ldr	r3, [r6, #0]
 800bf94:	b93b      	cbnz	r3, 800bfa6 <GUI__GetAlphaBuffer+0x9e>
 800bf96:	6828      	ldr	r0, [r5, #0]
 800bf98:	0080      	lsls	r0, r0, #2
 800bf9a:	f002 fed5 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	6030      	str	r0, [r6, #0]
 800bfa2:	bf08      	it	eq
 800bfa4:	2401      	moveq	r4, #1
 800bfa6:	6833      	ldr	r3, [r6, #0]
 800bfa8:	603b      	str	r3, [r7, #0]
 800bfaa:	4620      	mov	r0, r4
 800bfac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb0:	20022a74 	.word	0x20022a74
 800bfb4:	20022a6c 	.word	0x20022a6c
 800bfb8:	0800bec9 	.word	0x0800bec9
 800bfbc:	20022a64 	.word	0x20022a64
 800bfc0:	2002307c 	.word	0x2002307c
 800bfc4:	20022a5c 	.word	0x20022a5c
 800bfc8:	20022a58 	.word	0x20022a58
 800bfcc:	20022a60 	.word	0x20022a60

0800bfd0 <GUI__DoAlphaBlending>:
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	b093      	sub	sp, #76	; 0x4c
 800bfd6:	2400      	movs	r4, #0
 800bfd8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bfda:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfdc:	910c      	str	r1, [sp, #48]	; 0x30
 800bfde:	4690      	mov	r8, r2
 800bfe0:	461f      	mov	r7, r3
 800bfe2:	6034      	str	r4, [r6, #0]
 800bfe4:	a80f      	add	r0, sp, #60	; 0x3c
 800bfe6:	a910      	add	r1, sp, #64	; 0x40
 800bfe8:	4622      	mov	r2, r4
 800bfea:	ab11      	add	r3, sp, #68	; 0x44
 800bfec:	f7ff ff8c 	bl	800bf08 <GUI__GetAlphaBuffer>
 800bff0:	4605      	mov	r5, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f040 80c3 	bne.w	800c17e <GUI__DoAlphaBlending+0x1ae>
 800bff8:	4c63      	ldr	r4, [pc, #396]	; (800c188 <GUI__DoAlphaBlending+0x1b8>)
 800bffa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	7c58      	ldrb	r0, [r3, #17]
 800c000:	4b62      	ldr	r3, [pc, #392]	; (800c18c <GUI__DoAlphaBlending+0x1bc>)
 800c002:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c006:	9307      	str	r3, [sp, #28]
 800c008:	4297      	cmp	r7, r2
 800c00a:	bfa8      	it	ge
 800c00c:	4617      	movge	r7, r2
 800c00e:	691a      	ldr	r2, [r3, #16]
 800c010:	920d      	str	r2, [sp, #52]	; 0x34
 800c012:	970a      	str	r7, [sp, #40]	; 0x28
 800c014:	f7ff f944 	bl	800b2a0 <GUI_GetBitsPerPixelEx>
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	9008      	str	r0, [sp, #32]
 800c01c:	7c58      	ldrb	r0, [r3, #17]
 800c01e:	f7ff f969 	bl	800b2f4 <GUI_GetpfIndex2ColorEx>
 800c022:	4b5b      	ldr	r3, [pc, #364]	; (800c190 <GUI__DoAlphaBlending+0x1c0>)
 800c024:	9004      	str	r0, [sp, #16]
 800c026:	4298      	cmp	r0, r3
 800c028:	d005      	beq.n	800c036 <GUI__DoAlphaBlending+0x66>
 800c02a:	4b5a      	ldr	r3, [pc, #360]	; (800c194 <GUI__DoAlphaBlending+0x1c4>)
 800c02c:	1ac3      	subs	r3, r0, r3
 800c02e:	bf18      	it	ne
 800c030:	2301      	movne	r3, #1
 800c032:	9306      	str	r3, [sp, #24]
 800c034:	e000      	b.n	800c038 <GUI__DoAlphaBlending+0x68>
 800c036:	9506      	str	r5, [sp, #24]
 800c038:	2500      	movs	r5, #0
 800c03a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c03c:	46ab      	mov	fp, r5
 800c03e:	4643      	mov	r3, r8
 800c040:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c042:	f853 0b04 	ldr.w	r0, [r3], #4
 800c046:	9305      	str	r3, [sp, #20]
 800c048:	4790      	blx	r2
 800c04a:	0e03      	lsrs	r3, r0, #24
 800c04c:	4681      	mov	r9, r0
 800c04e:	9309      	str	r3, [sp, #36]	; 0x24
 800c050:	f000 8085 	beq.w	800c15e <GUI__DoAlphaBlending+0x18e>
 800c054:	f1bb 0f00 	cmp.w	fp, #0
 800c058:	d13f      	bne.n	800c0da <GUI__DoAlphaBlending+0x10a>
 800c05a:	4b4b      	ldr	r3, [pc, #300]	; (800c188 <GUI__DoAlphaBlending+0x1b8>)
 800c05c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c062:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c066:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800c06a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c06c:	442f      	add	r7, r5
 800c06e:	42bb      	cmp	r3, r7
 800c070:	bfc8      	it	gt
 800c072:	ebc7 0b03 	rsbgt	fp, r7, r3
 800c076:	eb0b 0a05 	add.w	sl, fp, r5
 800c07a:	bfc8      	it	gt
 800c07c:	461f      	movgt	r7, r3
 800c07e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c080:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800c084:	4453      	add	r3, sl
 800c086:	4494      	add	ip, r2
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	9b07      	ldr	r3, [sp, #28]
 800c08c:	9301      	str	r3, [sp, #4]
 800c08e:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800c092:	4638      	mov	r0, r7
 800c094:	460b      	mov	r3, r1
 800c096:	f8cd c00c 	str.w	ip, [sp, #12]
 800c09a:	f005 f9f9 	bl	8011490 <GUI_ReadRectEx>
 800c09e:	9a08      	ldr	r2, [sp, #32]
 800c0a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c0a2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800c0a6:	2a17      	cmp	r2, #23
 800c0a8:	dc06      	bgt.n	800c0b8 <GUI__DoAlphaBlending+0xe8>
 800c0aa:	4450      	add	r0, sl
 800c0ac:	ebcb 0104 	rsb	r1, fp, r4
 800c0b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0b2:	f005 fb59 	bl	8011768 <GUI__ExpandPixelIndicesEx>
 800c0b6:	e001      	b.n	800c0bc <GUI__DoAlphaBlending+0xec>
 800c0b8:	9b06      	ldr	r3, [sp, #24]
 800c0ba:	b913      	cbnz	r3, 800c0c2 <GUI__DoAlphaBlending+0xf2>
 800c0bc:	f04f 0b01 	mov.w	fp, #1
 800c0c0:	e00b      	b.n	800c0da <GUI__DoAlphaBlending+0x10a>
 800c0c2:	ebc7 070c 	rsb	r7, r7, ip
 800c0c6:	4482      	add	sl, r0
 800c0c8:	f8da 0000 	ldr.w	r0, [sl]
 800c0cc:	9a04      	ldr	r2, [sp, #16]
 800c0ce:	4790      	blx	r2
 800c0d0:	3f01      	subs	r7, #1
 800c0d2:	f84a 0b04 	str.w	r0, [sl], #4
 800c0d6:	d1f7      	bne.n	800c0c8 <GUI__DoAlphaBlending+0xf8>
 800c0d8:	e7f0      	b.n	800c0bc <GUI__DoAlphaBlending+0xec>
 800c0da:	4b2f      	ldr	r3, [pc, #188]	; (800c198 <GUI__DoAlphaBlending+0x1c8>)
 800c0dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c0de:	f8d3 c000 	ldr.w	ip, [r3]
 800c0e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c0e4:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800c0e8:	f1bc 0f00 	cmp.w	ip, #0
 800c0ec:	d024      	beq.n	800c138 <GUI__DoAlphaBlending+0x168>
 800c0ee:	eb07 020a 	add.w	r2, r7, sl
 800c0f2:	4451      	add	r1, sl
 800c0f4:	9210      	str	r2, [sp, #64]	; 0x40
 800c0f6:	4623      	mov	r3, r4
 800c0f8:	910f      	str	r1, [sp, #60]	; 0x3c
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	47e0      	blx	ip
 800c0fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c100:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c102:	2300      	movs	r3, #0
 800c104:	f858 1003 	ldr.w	r1, [r8, r3]
 800c108:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800c10c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c110:	58e8      	ldr	r0, [r5, r3]
 800c112:	d101      	bne.n	800c118 <GUI__DoAlphaBlending+0x148>
 800c114:	50d0      	str	r0, [r2, r3]
 800c116:	e005      	b.n	800c124 <GUI__DoAlphaBlending+0x154>
 800c118:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800c11c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800c120:	bf08      	it	eq
 800c122:	50d1      	streq	r1, [r2, r3]
 800c124:	3c01      	subs	r4, #1
 800c126:	f103 0304 	add.w	r3, r3, #4
 800c12a:	d1eb      	bne.n	800c104 <GUI__DoAlphaBlending+0x134>
 800c12c:	6833      	ldr	r3, [r6, #0]
 800c12e:	9710      	str	r7, [sp, #64]	; 0x40
 800c130:	f043 0301 	orr.w	r3, r3, #1
 800c134:	6033      	str	r3, [r6, #0]
 800c136:	e020      	b.n	800c17a <GUI__DoAlphaBlending+0x1aa>
 800c138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c13a:	2bff      	cmp	r3, #255	; 0xff
 800c13c:	d104      	bne.n	800c148 <GUI__DoAlphaBlending+0x178>
 800c13e:	f851 300a 	ldr.w	r3, [r1, sl]
 800c142:	f847 300a 	str.w	r3, [r7, sl]
 800c146:	e011      	b.n	800c16c <GUI__DoAlphaBlending+0x19c>
 800c148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c14a:	f851 100a 	ldr.w	r1, [r1, sl]
 800c14e:	43da      	mvns	r2, r3
 800c150:	4648      	mov	r0, r9
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	f7ff fe4c 	bl	800bdf0 <GUI__MixColors>
 800c158:	f847 000a 	str.w	r0, [r7, sl]
 800c15c:	e002      	b.n	800c164 <GUI__DoAlphaBlending+0x194>
 800c15e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c160:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c164:	6833      	ldr	r3, [r6, #0]
 800c166:	f043 0301 	orr.w	r3, r3, #1
 800c16a:	6033      	str	r3, [r6, #0]
 800c16c:	3c01      	subs	r4, #1
 800c16e:	f105 0501 	add.w	r5, r5, #1
 800c172:	d002      	beq.n	800c17a <GUI__DoAlphaBlending+0x1aa>
 800c174:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c178:	e761      	b.n	800c03e <GUI__DoAlphaBlending+0x6e>
 800c17a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c17c:	e000      	b.n	800c180 <GUI__DoAlphaBlending+0x1b0>
 800c17e:	4620      	mov	r0, r4
 800c180:	b013      	add	sp, #76	; 0x4c
 800c182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c186:	bf00      	nop
 800c188:	20000038 	.word	0x20000038
 800c18c:	20023074 	.word	0x20023074
 800c190:	0800f13f 	.word	0x0800f13f
 800c194:	0800f13d 	.word	0x0800f13d
 800c198:	20022a68 	.word	0x20022a68

0800c19c <GUI__AllocAlphaBuffer>:
 800c19c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c19e:	b108      	cbz	r0, 800c1a4 <GUI__AllocAlphaBuffer+0x8>
 800c1a0:	aa03      	add	r2, sp, #12
 800c1a2:	e000      	b.n	800c1a6 <GUI__AllocAlphaBuffer+0xa>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	a801      	add	r0, sp, #4
 800c1a8:	a902      	add	r1, sp, #8
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	f7ff feac 	bl	800bf08 <GUI__GetAlphaBuffer>
 800c1b0:	b005      	add	sp, #20
 800c1b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c1b8 <GUI_SetFuncAlphaBlending>:
 800c1b8:	4b01      	ldr	r3, [pc, #4]	; (800c1c0 <GUI_SetFuncAlphaBlending+0x8>)
 800c1ba:	6018      	str	r0, [r3, #0]
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	20022a68 	.word	0x20022a68

0800c1c4 <GUI_SetFuncMixColors>:
 800c1c4:	4b01      	ldr	r3, [pc, #4]	; (800c1cc <GUI_SetFuncMixColors+0x8>)
 800c1c6:	6018      	str	r0, [r3, #0]
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	2000001c 	.word	0x2000001c

0800c1d0 <GUI_SetFuncMixColorsBulk>:
 800c1d0:	4b01      	ldr	r3, [pc, #4]	; (800c1d8 <GUI_SetFuncMixColorsBulk+0x8>)
 800c1d2:	6018      	str	r0, [r3, #0]
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	20000020 	.word	0x20000020

0800c1dc <GUI_SignalEvent>:
 800c1dc:	b508      	push	{r3, lr}
 800c1de:	4b02      	ldr	r3, [pc, #8]	; (800c1e8 <GUI_SignalEvent+0xc>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	b103      	cbz	r3, 800c1e6 <GUI_SignalEvent+0xa>
 800c1e4:	4798      	blx	r3
 800c1e6:	bd08      	pop	{r3, pc}
 800c1e8:	20022a78 	.word	0x20022a78

0800c1ec <_Unlink>:
 800c1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	b1f0      	cbz	r0, 800c230 <_Unlink+0x44>
 800c1f2:	f002 fc5d 	bl	800eab0 <GUI_ALLOC_LockH>
 800c1f6:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <_Unlink+0x48>)
 800c1f8:	9000      	str	r0, [sp, #0]
 800c1fa:	681c      	ldr	r4, [r3, #0]
 800c1fc:	42ac      	cmp	r4, r5
 800c1fe:	d104      	bne.n	800c20a <_Unlink+0x1e>
 800c200:	6842      	ldr	r2, [r0, #4]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e011      	b.n	800c22a <_Unlink+0x3e>
 800c206:	f002 fc61 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c20a:	b174      	cbz	r4, 800c22a <_Unlink+0x3e>
 800c20c:	4620      	mov	r0, r4
 800c20e:	f002 fc4f 	bl	800eab0 <GUI_ALLOC_LockH>
 800c212:	4603      	mov	r3, r0
 800c214:	a802      	add	r0, sp, #8
 800c216:	685c      	ldr	r4, [r3, #4]
 800c218:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c21c:	42ac      	cmp	r4, r5
 800c21e:	d1f2      	bne.n	800c206 <_Unlink+0x1a>
 800c220:	9a00      	ldr	r2, [sp, #0]
 800c222:	6852      	ldr	r2, [r2, #4]
 800c224:	605a      	str	r2, [r3, #4]
 800c226:	f002 fc51 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c22a:	4668      	mov	r0, sp
 800c22c:	f002 fc4e 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c230:	b003      	add	sp, #12
 800c232:	bd30      	pop	{r4, r5, pc}
 800c234:	20022a80 	.word	0x20022a80

0800c238 <GUI_TIMER__GetFirstTimer>:
 800c238:	2300      	movs	r3, #0
 800c23a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c23c:	6003      	str	r3, [r0, #0]
 800c23e:	4b09      	ldr	r3, [pc, #36]	; (800c264 <GUI_TIMER__GetFirstTimer+0x2c>)
 800c240:	681c      	ldr	r4, [r3, #0]
 800c242:	4605      	mov	r5, r0
 800c244:	b154      	cbz	r4, 800c25c <GUI_TIMER__GetFirstTimer+0x24>
 800c246:	4620      	mov	r0, r4
 800c248:	f002 fc32 	bl	800eab0 <GUI_ALLOC_LockH>
 800c24c:	ab02      	add	r3, sp, #8
 800c24e:	6902      	ldr	r2, [r0, #16]
 800c250:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c254:	602a      	str	r2, [r5, #0]
 800c256:	4618      	mov	r0, r3
 800c258:	f002 fc38 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c25c:	4620      	mov	r0, r4
 800c25e:	b003      	add	sp, #12
 800c260:	bd30      	pop	{r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	20022a7c 	.word	0x20022a7c

0800c268 <GUI_TIMER__GetNextTimerLin>:
 800c268:	2300      	movs	r3, #0
 800c26a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c26c:	600b      	str	r3, [r1, #0]
 800c26e:	460e      	mov	r6, r1
 800c270:	4604      	mov	r4, r0
 800c272:	b190      	cbz	r0, 800c29a <GUI_TIMER__GetNextTimerLin+0x32>
 800c274:	f002 fc1c 	bl	800eab0 <GUI_ALLOC_LockH>
 800c278:	ad02      	add	r5, sp, #8
 800c27a:	6884      	ldr	r4, [r0, #8]
 800c27c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800c280:	b144      	cbz	r4, 800c294 <GUI_TIMER__GetNextTimerLin+0x2c>
 800c282:	4628      	mov	r0, r5
 800c284:	f002 fc22 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c288:	4620      	mov	r0, r4
 800c28a:	f002 fc11 	bl	800eab0 <GUI_ALLOC_LockH>
 800c28e:	6903      	ldr	r3, [r0, #16]
 800c290:	9001      	str	r0, [sp, #4]
 800c292:	6033      	str	r3, [r6, #0]
 800c294:	4628      	mov	r0, r5
 800c296:	f002 fc19 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c29a:	4620      	mov	r0, r4
 800c29c:	b002      	add	sp, #8
 800c29e:	bd70      	pop	{r4, r5, r6, pc}

0800c2a0 <GUI_TIMER_Delete>:
 800c2a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	b358      	cbz	r0, 800c2fe <GUI_TIMER_Delete+0x5e>
 800c2a6:	4d17      	ldr	r5, [pc, #92]	; (800c304 <GUI_TIMER_Delete+0x64>)
 800c2a8:	682e      	ldr	r6, [r5, #0]
 800c2aa:	4286      	cmp	r6, r0
 800c2ac:	d10b      	bne.n	800c2c6 <GUI_TIMER_Delete+0x26>
 800c2ae:	f002 fbff 	bl	800eab0 <GUI_ALLOC_LockH>
 800c2b2:	ab02      	add	r3, sp, #8
 800c2b4:	6882      	ldr	r2, [r0, #8]
 800c2b6:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c2ba:	602a      	str	r2, [r5, #0]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	e016      	b.n	800c2ee <GUI_TIMER_Delete+0x4e>
 800c2c0:	4668      	mov	r0, sp
 800c2c2:	f002 fc03 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f002 fbf2 	bl	800eab0 <GUI_ALLOC_LockH>
 800c2cc:	6886      	ldr	r6, [r0, #8]
 800c2ce:	ad02      	add	r5, sp, #8
 800c2d0:	42a6      	cmp	r6, r4
 800c2d2:	f845 0d08 	str.w	r0, [r5, #-8]!
 800c2d6:	d1f3      	bne.n	800c2c0 <GUI_TIMER_Delete+0x20>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f002 fbe9 	bl	800eab0 <GUI_ALLOC_LockH>
 800c2de:	9b00      	ldr	r3, [sp, #0]
 800c2e0:	6882      	ldr	r2, [r0, #8]
 800c2e2:	9001      	str	r0, [sp, #4]
 800c2e4:	609a      	str	r2, [r3, #8]
 800c2e6:	a801      	add	r0, sp, #4
 800c2e8:	f002 fbf0 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c2ec:	4668      	mov	r0, sp
 800c2ee:	f002 fbed 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f7ff ff7a 	bl	800c1ec <_Unlink>
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f002 fc07 	bl	800eb0c <GUI_ALLOC_Free>
 800c2fe:	b002      	add	sp, #8
 800c300:	bd70      	pop	{r4, r5, r6, pc}
 800c302:	bf00      	nop
 800c304:	20022a7c 	.word	0x20022a7c

0800c308 <GUI_TIMER_GetFlag>:
 800c308:	b513      	push	{r0, r1, r4, lr}
 800c30a:	460c      	mov	r4, r1
 800c30c:	b168      	cbz	r0, 800c32a <GUI_TIMER_GetFlag+0x22>
 800c30e:	f002 fbcf 	bl	800eab0 <GUI_ALLOC_LockH>
 800c312:	ab02      	add	r3, sp, #8
 800c314:	8982      	ldrh	r2, [r0, #12]
 800c316:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c31a:	4214      	tst	r4, r2
 800c31c:	4618      	mov	r0, r3
 800c31e:	bf0c      	ite	eq
 800c320:	2400      	moveq	r4, #0
 800c322:	2401      	movne	r4, #1
 800c324:	f002 fbd2 	bl	800eacc <GUI_ALLOC_UnlockH>
 800c328:	e000      	b.n	800c32c <GUI_TIMER_GetFlag+0x24>
 800c32a:	2401      	movs	r4, #1
 800c32c:	4620      	mov	r0, r4
 800c32e:	b002      	add	sp, #8
 800c330:	bd10      	pop	{r4, pc}

0800c332 <GUI_Delay>:
 800c332:	b538      	push	{r3, r4, r5, lr}
 800c334:	4605      	mov	r5, r0
 800c336:	f7f8 fc05 	bl	8004b44 <GUI_X_GetTime>
 800c33a:	4405      	add	r5, r0
 800c33c:	f7f8 fc02 	bl	8004b44 <GUI_X_GetTime>
 800c340:	1a2c      	subs	r4, r5, r0
 800c342:	2c00      	cmp	r4, #0
 800c344:	dd08      	ble.n	800c358 <GUI_Delay+0x26>
 800c346:	f001 f90f 	bl	800d568 <GUI_Exec>
 800c34a:	2c05      	cmp	r4, #5
 800c34c:	bfb4      	ite	lt
 800c34e:	4620      	movlt	r0, r4
 800c350:	2005      	movge	r0, #5
 800c352:	f7f8 fc03 	bl	8004b5c <GUI_X_Delay>
 800c356:	e7f1      	b.n	800c33c <GUI_Delay+0xa>
 800c358:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c35c <GUI_TOUCH_StoreStateEx>:
 800c35c:	b530      	push	{r4, r5, lr}
 800c35e:	4d0f      	ldr	r5, [pc, #60]	; (800c39c <GUI_TOUCH_StoreStateEx+0x40>)
 800c360:	b085      	sub	sp, #20
 800c362:	4629      	mov	r1, r5
 800c364:	220c      	movs	r2, #12
 800c366:	4604      	mov	r4, r0
 800c368:	f006 faea 	bl	8012940 <memcmp>
 800c36c:	b1a0      	cbz	r0, 800c398 <GUI_TOUCH_StoreStateEx+0x3c>
 800c36e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c372:	4b0b      	ldr	r3, [pc, #44]	; (800c3a0 <GUI_TOUCH_StoreStateEx+0x44>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c37a:	b153      	cbz	r3, 800c392 <GUI_TOUCH_StoreStateEx+0x36>
 800c37c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c380:	ad01      	add	r5, sp, #4
 800c382:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c386:	4628      	mov	r0, r5
 800c388:	a902      	add	r1, sp, #8
 800c38a:	4798      	blx	r3
 800c38c:	b920      	cbnz	r0, 800c398 <GUI_TOUCH_StoreStateEx+0x3c>
 800c38e:	4628      	mov	r0, r5
 800c390:	e000      	b.n	800c394 <GUI_TOUCH_StoreStateEx+0x38>
 800c392:	4620      	mov	r0, r4
 800c394:	f000 ffba 	bl	800d30c <GUI_PID_StoreState>
 800c398:	b005      	add	sp, #20
 800c39a:	bd30      	pop	{r4, r5, pc}
 800c39c:	20022a84 	.word	0x20022a84
 800c3a0:	20022a90 	.word	0x20022a90

0800c3a4 <GUI_SetTextMode>:
 800c3a4:	4b03      	ldr	r3, [pc, #12]	; (800c3b4 <GUI_SetTextMode+0x10>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800c3ac:	8558      	strh	r0, [r3, #42]	; 0x2a
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	20000038 	.word	0x20000038

0800c3b8 <GUI_SetFont>:
 800c3b8:	4b03      	ldr	r3, [pc, #12]	; (800c3c8 <GUI_SetFont+0x10>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	69d9      	ldr	r1, [r3, #28]
 800c3be:	b100      	cbz	r0, 800c3c2 <GUI_SetFont+0xa>
 800c3c0:	61d8      	str	r0, [r3, #28]
 800c3c2:	4608      	mov	r0, r1
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000038 	.word	0x20000038

0800c3cc <GUI_SetDrawMode>:
 800c3cc:	f7ff b8c2 	b.w	800b554 <LCD_SetDrawMode>

0800c3d0 <GL_SetDefault>:
 800c3d0:	b508      	push	{r3, lr}
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	f000 f81c 	bl	800c410 <GUI_SetBkColor>
 800c3d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800c3dc:	f000 f81a 	bl	800c414 <GUI_SetColor>
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	f000 ff61 	bl	800d2a8 <GUI_SetPenSize>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	f005 fc3a 	bl	8011c60 <GUI_SetTextAlign>
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	f7ff ffd9 	bl	800c3a4 <GUI_SetTextMode>
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f7ff ffea 	bl	800c3cc <GUI_SetDrawMode>
 800c3f8:	4b04      	ldr	r3, [pc, #16]	; (800c40c <GL_SetDefault+0x3c>)
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	f7ff ffdc 	bl	800c3b8 <GUI_SetFont>
 800c400:	2000      	movs	r0, #0
 800c402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c406:	f005 bc4f 	b.w	8011ca8 <GUI_SetLineStyle>
 800c40a:	bf00      	nop
 800c40c:	2000003c 	.word	0x2000003c

0800c410 <GUI_SetBkColor>:
 800c410:	f7ff bbe8 	b.w	800bbe4 <LCD_SetBkColor>

0800c414 <GUI_SetColor>:
 800c414:	f7ff bbee 	b.w	800bbf4 <LCD_SetColor>

0800c418 <_Color2Index>:
 800c418:	b508      	push	{r3, lr}
 800c41a:	4b05      	ldr	r3, [pc, #20]	; (800c430 <_Color2Index+0x18>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	7c5a      	ldrb	r2, [r3, #17]
 800c420:	4b04      	ldr	r3, [pc, #16]	; (800c434 <_Color2Index+0x1c>)
 800c422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4798      	blx	r3
 800c42e:	bd08      	pop	{r3, pc}
 800c430:	20000038 	.word	0x20000038
 800c434:	20022aa8 	.word	0x20022aa8

0800c438 <_Index2Color>:
 800c438:	b508      	push	{r3, lr}
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <_Index2Color+0x18>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	7c5a      	ldrb	r2, [r3, #17]
 800c440:	4b04      	ldr	r3, [pc, #16]	; (800c454 <_Index2Color+0x1c>)
 800c442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4798      	blx	r3
 800c44e:	bd08      	pop	{r3, pc}
 800c450:	20000038 	.word	0x20000038
 800c454:	20022aa8 	.word	0x20022aa8

0800c458 <_GetIndexMask>:
 800c458:	b508      	push	{r3, lr}
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <_GetIndexMask+0x18>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	7c5a      	ldrb	r2, [r3, #17]
 800c460:	4b04      	ldr	r3, [pc, #16]	; (800c474 <_GetIndexMask+0x1c>)
 800c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	4798      	blx	r3
 800c46e:	bd08      	pop	{r3, pc}
 800c470:	20000038 	.word	0x20000038
 800c474:	20022aa8 	.word	0x20022aa8

0800c478 <_GetPixelIndex>:
 800c478:	b508      	push	{r3, lr}
 800c47a:	6800      	ldr	r0, [r0, #0]
 800c47c:	68c3      	ldr	r3, [r0, #12]
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	4798      	blx	r3
 800c482:	bd08      	pop	{r3, pc}

0800c484 <_GetDevData>:
 800c484:	2000      	movs	r0, #0
 800c486:	4770      	bx	lr

0800c488 <_SetOrg>:
 800c488:	b508      	push	{r3, lr}
 800c48a:	6800      	ldr	r0, [r0, #0]
 800c48c:	68c3      	ldr	r3, [r0, #12]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	4798      	blx	r3
 800c492:	bd08      	pop	{r3, pc}

0800c494 <_GetDevFunc>:
 800c494:	b508      	push	{r3, lr}
 800c496:	6803      	ldr	r3, [r0, #0]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	6003      	str	r3, [r0, #0]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a0:	4798      	blx	r3
 800c4a2:	bd08      	pop	{r3, pc}

0800c4a4 <_GetDevProp>:
 800c4a4:	b508      	push	{r3, lr}
 800c4a6:	6800      	ldr	r0, [r0, #0]
 800c4a8:	68c3      	ldr	r3, [r0, #12]
 800c4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ac:	4798      	blx	r3
 800c4ae:	bd08      	pop	{r3, pc}

0800c4b0 <_GetRect>:
 800c4b0:	b508      	push	{r3, lr}
 800c4b2:	6800      	ldr	r0, [r0, #0]
 800c4b4:	68c3      	ldr	r3, [r0, #12]
 800c4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b8:	4798      	blx	r3
 800c4ba:	bd08      	pop	{r3, pc}

0800c4bc <GUI_SetAlpha>:
 800c4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	4a3c      	ldr	r2, [pc, #240]	; (800c5b4 <GUI_SetAlpha+0xf8>)
 800c4c2:	493d      	ldr	r1, [pc, #244]	; (800c5b8 <GUI_SetAlpha+0xfc>)
 800c4c4:	6813      	ldr	r3, [r2, #0]
 800c4c6:	4d3d      	ldr	r5, [pc, #244]	; (800c5bc <GUI_SetAlpha+0x100>)
 800c4c8:	7c5b      	ldrb	r3, [r3, #17]
 800c4ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c4ce:	698e      	ldr	r6, [r1, #24]
 800c4d0:	5da9      	ldrb	r1, [r5, r6]
 800c4d2:	9101      	str	r1, [sp, #4]
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	46a8      	mov	r8, r5
 800c4d8:	b970      	cbnz	r0, 800c4f8 <GUI_SetAlpha+0x3c>
 800c4da:	4618      	mov	r0, r3
 800c4dc:	2105      	movs	r1, #5
 800c4de:	f001 fdf7 	bl	800e0d0 <GUI_DEVICE__GetpDevice>
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d061      	beq.n	800c5ac <GUI_SetAlpha+0xf0>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f7fd f8a7 	bl	800963c <GUI_MEMDEV__SetAlphaCallback>
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	f001 fe38 	bl	800e164 <GUI_DEVICE_Unlink>
 800c4f4:	55ac      	strb	r4, [r5, r6]
 800c4f6:	e059      	b.n	800c5ac <GUI_SetAlpha+0xf0>
 800c4f8:	4d31      	ldr	r5, [pc, #196]	; (800c5c0 <GUI_SetAlpha+0x104>)
 800c4fa:	682b      	ldr	r3, [r5, #0]
 800c4fc:	46aa      	mov	sl, r5
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d13f      	bne.n	800c582 <GUI_SetAlpha+0xc6>
 800c502:	4830      	ldr	r0, [pc, #192]	; (800c5c4 <GUI_SetAlpha+0x108>)
 800c504:	4b30      	ldr	r3, [pc, #192]	; (800c5c8 <GUI_SetAlpha+0x10c>)
 800c506:	6003      	str	r3, [r0, #0]
 800c508:	f001 ff34 	bl	800e374 <GUI__RegisterExit>
 800c50c:	f7fe ff08 	bl	800b320 <LCD_GetVXSizeMax>
 800c510:	ea4f 0980 	mov.w	r9, r0, lsl #2
 800c514:	4648      	mov	r0, r9
 800c516:	f002 fc17 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800c51a:	6028      	str	r0, [r5, #0]
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d045      	beq.n	800c5ac <GUI_SetAlpha+0xf0>
 800c520:	4f2a      	ldr	r7, [pc, #168]	; (800c5cc <GUI_SetAlpha+0x110>)
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	46bb      	mov	fp, r7
 800c526:	bb62      	cbnz	r2, 800c582 <GUI_SetAlpha+0xc6>
 800c528:	4648      	mov	r0, r9
 800c52a:	9200      	str	r2, [sp, #0]
 800c52c:	f002 fc0c 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800c530:	9a00      	ldr	r2, [sp, #0]
 800c532:	6038      	str	r0, [r7, #0]
 800c534:	b918      	cbnz	r0, 800c53e <GUI_SetAlpha+0x82>
 800c536:	6828      	ldr	r0, [r5, #0]
 800c538:	f002 faa6 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800c53c:	e036      	b.n	800c5ac <GUI_SetAlpha+0xf0>
 800c53e:	4f24      	ldr	r7, [pc, #144]	; (800c5d0 <GUI_SetAlpha+0x114>)
 800c540:	4615      	mov	r5, r2
 800c542:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800c546:	b9ca      	cbnz	r2, 800c57c <GUI_SetAlpha+0xc0>
 800c548:	4822      	ldr	r0, [pc, #136]	; (800c5d4 <GUI_SetAlpha+0x118>)
 800c54a:	4923      	ldr	r1, [pc, #140]	; (800c5d8 <GUI_SetAlpha+0x11c>)
 800c54c:	462b      	mov	r3, r5
 800c54e:	f001 fde3 	bl	800e118 <GUI_DEVICE_Create>
 800c552:	6038      	str	r0, [r7, #0]
 800c554:	b990      	cbnz	r0, 800c57c <GUI_SetAlpha+0xc0>
 800c556:	f8da 0000 	ldr.w	r0, [sl]
 800c55a:	f002 fa95 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800c55e:	f8db 0000 	ldr.w	r0, [fp]
 800c562:	f002 fa91 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800c566:	4b1d      	ldr	r3, [pc, #116]	; (800c5dc <GUI_SetAlpha+0x120>)
 800c568:	6818      	ldr	r0, [r3, #0]
 800c56a:	461c      	mov	r4, r3
 800c56c:	b108      	cbz	r0, 800c572 <GUI_SetAlpha+0xb6>
 800c56e:	f001 fdd1 	bl	800e114 <GUI_DEVICE_Delete>
 800c572:	6860      	ldr	r0, [r4, #4]
 800c574:	b1d0      	cbz	r0, 800c5ac <GUI_SetAlpha+0xf0>
 800c576:	f001 fdcd 	bl	800e114 <GUI_DEVICE_Delete>
 800c57a:	e017      	b.n	800c5ac <GUI_SetAlpha+0xf0>
 800c57c:	3501      	adds	r5, #1
 800c57e:	2d02      	cmp	r5, #2
 800c580:	d1df      	bne.n	800c542 <GUI_SetAlpha+0x86>
 800c582:	4a0c      	ldr	r2, [pc, #48]	; (800c5b4 <GUI_SetAlpha+0xf8>)
 800c584:	6813      	ldr	r3, [r2, #0]
 800c586:	2105      	movs	r1, #5
 800c588:	7c58      	ldrb	r0, [r3, #17]
 800c58a:	f001 fda1 	bl	800e0d0 <GUI_DEVICE__GetpDevice>
 800c58e:	b958      	cbnz	r0, 800c5a8 <GUI_SetAlpha+0xec>
 800c590:	4813      	ldr	r0, [pc, #76]	; (800c5e0 <GUI_SetAlpha+0x124>)
 800c592:	f7fd f853 	bl	800963c <GUI_MEMDEV__SetAlphaCallback>
 800c596:	4b07      	ldr	r3, [pc, #28]	; (800c5b4 <GUI_SetAlpha+0xf8>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	7c5a      	ldrb	r2, [r3, #17]
 800c59c:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <GUI_SetAlpha+0x120>)
 800c59e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c5a2:	b108      	cbz	r0, 800c5a8 <GUI_SetAlpha+0xec>
 800c5a4:	f001 fdf4 	bl	800e190 <GUI_DEVICE_Link>
 800c5a8:	f808 4006 	strb.w	r4, [r8, r6]
 800c5ac:	9801      	ldr	r0, [sp, #4]
 800c5ae:	b003      	add	sp, #12
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b4:	20000038 	.word	0x20000038
 800c5b8:	20023074 	.word	0x20023074
 800c5bc:	20022a94 	.word	0x20022a94
 800c5c0:	20022aa4 	.word	0x20022aa4
 800c5c4:	20022a98 	.word	0x20022a98
 800c5c8:	0800c5e5 	.word	0x0800c5e5
 800c5cc:	20022aa0 	.word	0x20022aa0
 800c5d0:	20022aa4 	.word	0x20022aa4
 800c5d4:	08013f3c 	.word	0x08013f3c
 800c5d8:	08013f24 	.word	0x08013f24
 800c5dc:	20022aa8 	.word	0x20022aa8
 800c5e0:	0800c4bd 	.word	0x0800c4bd

0800c5e4 <_OnExit>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	4d0c      	ldr	r5, [pc, #48]	; (800c618 <_OnExit+0x34>)
 800c5e8:	2400      	movs	r4, #0
 800c5ea:	6828      	ldr	r0, [r5, #0]
 800c5ec:	f002 fa4c 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800c5f0:	602c      	str	r4, [r5, #0]
 800c5f2:	4d0a      	ldr	r5, [pc, #40]	; (800c61c <_OnExit+0x38>)
 800c5f4:	6828      	ldr	r0, [r5, #0]
 800c5f6:	f002 fa47 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800c5fa:	602c      	str	r4, [r5, #0]
 800c5fc:	4d08      	ldr	r5, [pc, #32]	; (800c620 <_OnExit+0x3c>)
 800c5fe:	6828      	ldr	r0, [r5, #0]
 800c600:	b110      	cbz	r0, 800c608 <_OnExit+0x24>
 800c602:	f001 fd87 	bl	800e114 <GUI_DEVICE_Delete>
 800c606:	602c      	str	r4, [r5, #0]
 800c608:	6868      	ldr	r0, [r5, #4]
 800c60a:	b120      	cbz	r0, 800c616 <_OnExit+0x32>
 800c60c:	f001 fd82 	bl	800e114 <GUI_DEVICE_Delete>
 800c610:	4b03      	ldr	r3, [pc, #12]	; (800c620 <_OnExit+0x3c>)
 800c612:	2200      	movs	r2, #0
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	20022aa4 	.word	0x20022aa4
 800c61c:	20022aa0 	.word	0x20022aa0
 800c620:	20022aa8 	.word	0x20022aa8

0800c624 <_ReadRectFromMemdev>:
 800c624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	4c23      	ldr	r4, [pc, #140]	; (800c6b8 <_ReadRectFromMemdev+0x94>)
 800c62a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800c62c:	469b      	mov	fp, r3
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c632:	4691      	mov	r9, r2
 800c634:	460d      	mov	r5, r1
 800c636:	f7fc ffc5 	bl	80095c4 <GUI_MEMDEV_GetXPos>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	4607      	mov	r7, r0
 800c63e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c640:	f7fc ffd6 	bl	80095f0 <GUI_MEMDEV_GetYPos>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	4680      	mov	r8, r0
 800c648:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c64a:	f7fc ffa5 	bl	8009598 <GUI_MEMDEV_GetXSize>
 800c64e:	45c1      	cmp	r9, r8
 800c650:	4682      	mov	sl, r0
 800c652:	db2e      	blt.n	800c6b2 <_ReadRectFromMemdev+0x8e>
 800c654:	42bd      	cmp	r5, r7
 800c656:	db2c      	blt.n	800c6b2 <_ReadRectFromMemdev+0x8e>
 800c658:	6822      	ldr	r2, [r4, #0]
 800c65a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800c65c:	9401      	str	r4, [sp, #4]
 800c65e:	f7fd fe47 	bl	800a2f0 <GUI_MEMDEV_GetBitsPerPixel>
 800c662:	2808      	cmp	r0, #8
 800c664:	4604      	mov	r4, r0
 800c666:	9b01      	ldr	r3, [sp, #4]
 800c668:	dd04      	ble.n	800c674 <_ReadRectFromMemdev+0x50>
 800c66a:	2810      	cmp	r0, #16
 800c66c:	bfcc      	ite	gt
 800c66e:	2204      	movgt	r2, #4
 800c670:	2202      	movle	r2, #2
 800c672:	e000      	b.n	800c676 <_ReadRectFromMemdev+0x52>
 800c674:	2201      	movs	r2, #1
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c67a:	9201      	str	r2, [sp, #4]
 800c67c:	f7fc ffce 	bl	800961c <GUI_MEMDEV_GetDataPtr>
 800c680:	ebc5 0b0b 	rsb	fp, r5, fp
 800c684:	9a01      	ldr	r2, [sp, #4]
 800c686:	ebc8 0809 	rsb	r8, r8, r9
 800c68a:	1bed      	subs	r5, r5, r7
 800c68c:	f10b 0b01 	add.w	fp, fp, #1
 800c690:	fb0a 5a08 	mla	sl, sl, r8, r5
 800c694:	fb0a 0102 	mla	r1, sl, r2, r0
 800c698:	fb02 f20b 	mul.w	r2, r2, fp
 800c69c:	4630      	mov	r0, r6
 800c69e:	f006 f95e 	bl	801295e <memcpy>
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	4659      	mov	r1, fp
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	b003      	add	sp, #12
 800c6aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ae:	f004 bfed 	b.w	801168c <GUI__ExpandPixelIndices>
 800c6b2:	b003      	add	sp, #12
 800c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b8:	20000038 	.word	0x20000038

0800c6bc <_Color2IndexBulk>:
 800c6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800c758 <_Color2IndexBulk+0x9c>
 800c6c4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c75c <_Color2IndexBulk+0xa0>
 800c6c8:	f8d9 5000 	ldr.w	r5, [r9]
 800c6cc:	7c6d      	ldrb	r5, [r5, #17]
 800c6ce:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800c6d2:	682d      	ldr	r5, [r5, #0]
 800c6d4:	692d      	ldr	r5, [r5, #16]
 800c6d6:	692d      	ldr	r5, [r5, #16]
 800c6d8:	4607      	mov	r7, r0
 800c6da:	460e      	mov	r6, r1
 800c6dc:	4614      	mov	r4, r2
 800c6de:	b115      	cbz	r5, 800c6e6 <_Color2IndexBulk+0x2a>
 800c6e0:	47a8      	blx	r5
 800c6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d014      	beq.n	800c714 <_Color2IndexBulk+0x58>
 800c6ea:	2b04      	cmp	r3, #4
 800c6ec:	d023      	beq.n	800c736 <_Color2IndexBulk+0x7a>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d130      	bne.n	800c754 <_Color2IndexBulk+0x98>
 800c6f2:	f8d9 3000 	ldr.w	r3, [r9]
 800c6f6:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800c6fa:	7c5b      	ldrb	r3, [r3, #17]
 800c6fc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4798      	blx	r3
 800c708:	5570      	strb	r0, [r6, r5]
 800c70a:	3501      	adds	r5, #1
 800c70c:	42ac      	cmp	r4, r5
 800c70e:	d1f0      	bne.n	800c6f2 <_Color2IndexBulk+0x36>
 800c710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c714:	f8d9 3000 	ldr.w	r3, [r9]
 800c718:	f857 0b04 	ldr.w	r0, [r7], #4
 800c71c:	7c5b      	ldrb	r3, [r3, #17]
 800c71e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4798      	blx	r3
 800c72a:	3c01      	subs	r4, #1
 800c72c:	f826 0b02 	strh.w	r0, [r6], #2
 800c730:	d1f0      	bne.n	800c714 <_Color2IndexBulk+0x58>
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	f8d9 3000 	ldr.w	r3, [r9]
 800c73a:	5978      	ldr	r0, [r7, r5]
 800c73c:	7c5b      	ldrb	r3, [r3, #17]
 800c73e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4798      	blx	r3
 800c74a:	3c01      	subs	r4, #1
 800c74c:	5170      	str	r0, [r6, r5]
 800c74e:	f105 0504 	add.w	r5, r5, #4
 800c752:	d1f0      	bne.n	800c736 <_Color2IndexBulk+0x7a>
 800c754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c758:	20000038 	.word	0x20000038
 800c75c:	20022aa8 	.word	0x20022aa8

0800c760 <_Index2ColorBulk>:
 800c760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c764:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800c7fc <_Index2ColorBulk+0x9c>
 800c768:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800c800 <_Index2ColorBulk+0xa0>
 800c76c:	f8d9 5000 	ldr.w	r5, [r9]
 800c770:	7c6d      	ldrb	r5, [r5, #17]
 800c772:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800c776:	682d      	ldr	r5, [r5, #0]
 800c778:	692d      	ldr	r5, [r5, #16]
 800c77a:	696d      	ldr	r5, [r5, #20]
 800c77c:	4607      	mov	r7, r0
 800c77e:	460e      	mov	r6, r1
 800c780:	4614      	mov	r4, r2
 800c782:	b115      	cbz	r5, 800c78a <_Index2ColorBulk+0x2a>
 800c784:	47a8      	blx	r5
 800c786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d014      	beq.n	800c7b8 <_Index2ColorBulk+0x58>
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d023      	beq.n	800c7da <_Index2ColorBulk+0x7a>
 800c792:	2b01      	cmp	r3, #1
 800c794:	d130      	bne.n	800c7f8 <_Index2ColorBulk+0x98>
 800c796:	f8d9 3000 	ldr.w	r3, [r9]
 800c79a:	5d78      	ldrb	r0, [r7, r5]
 800c79c:	7c5b      	ldrb	r3, [r3, #17]
 800c79e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	4798      	blx	r3
 800c7aa:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800c7ae:	3501      	adds	r5, #1
 800c7b0:	42ac      	cmp	r4, r5
 800c7b2:	d1f0      	bne.n	800c796 <_Index2ColorBulk+0x36>
 800c7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b8:	f8d9 3000 	ldr.w	r3, [r9]
 800c7bc:	f837 0b02 	ldrh.w	r0, [r7], #2
 800c7c0:	7c5b      	ldrb	r3, [r3, #17]
 800c7c2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4798      	blx	r3
 800c7ce:	3c01      	subs	r4, #1
 800c7d0:	f846 0b04 	str.w	r0, [r6], #4
 800c7d4:	d1f0      	bne.n	800c7b8 <_Index2ColorBulk+0x58>
 800c7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7da:	f8d9 3000 	ldr.w	r3, [r9]
 800c7de:	5978      	ldr	r0, [r7, r5]
 800c7e0:	7c5b      	ldrb	r3, [r3, #17]
 800c7e2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	4798      	blx	r3
 800c7ee:	3c01      	subs	r4, #1
 800c7f0:	5170      	str	r0, [r6, r5]
 800c7f2:	f105 0504 	add.w	r5, r5, #4
 800c7f6:	d1f0      	bne.n	800c7da <_Index2ColorBulk+0x7a>
 800c7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7fc:	20000038 	.word	0x20000038
 800c800:	20022aa8 	.word	0x20022aa8

0800c804 <_MixColors>:
 800c804:	b570      	push	{r4, r5, r6, lr}
 800c806:	4b0f      	ldr	r3, [pc, #60]	; (800c844 <_MixColors+0x40>)
 800c808:	4a0f      	ldr	r2, [pc, #60]	; (800c848 <_MixColors+0x44>)
 800c80a:	781e      	ldrb	r6, [r3, #0]
 800c80c:	4c0f      	ldr	r4, [pc, #60]	; (800c84c <_MixColors+0x48>)
 800c80e:	4b10      	ldr	r3, [pc, #64]	; (800c850 <_MixColors+0x4c>)
 800c810:	b156      	cbz	r6, 800c828 <_MixColors+0x24>
 800c812:	6821      	ldr	r1, [r4, #0]
 800c814:	7c49      	ldrb	r1, [r1, #17]
 800c816:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c81a:	6992      	ldr	r2, [r2, #24]
 800c81c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
 800c820:	5c98      	ldrb	r0, [r3, r2]
 800c822:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 800c826:	bd70      	pop	{r4, r5, r6, pc}
 800c828:	6824      	ldr	r4, [r4, #0]
 800c82a:	7c64      	ldrb	r4, [r4, #17]
 800c82c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c830:	6992      	ldr	r2, [r2, #24]
 800c832:	5c9a      	ldrb	r2, [r3, r2]
 800c834:	43d2      	mvns	r2, r2
 800c836:	b2d2      	uxtb	r2, r2
 800c838:	f7ff fada 	bl	800bdf0 <GUI__MixColors>
 800c83c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c840:	bd70      	pop	{r4, r5, r6, pc}
 800c842:	bf00      	nop
 800c844:	20023065 	.word	0x20023065
 800c848:	20023074 	.word	0x20023074
 800c84c:	20000038 	.word	0x20000038
 800c850:	20022a94 	.word	0x20022a94

0800c854 <_SetPixelIndex>:
 800c854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c858:	6804      	ldr	r4, [r0, #0]
 800c85a:	68e5      	ldr	r5, [r4, #12]
 800c85c:	4698      	mov	r8, r3
 800c85e:	4620      	mov	r0, r4
 800c860:	696b      	ldr	r3, [r5, #20]
 800c862:	4616      	mov	r6, r2
 800c864:	460f      	mov	r7, r1
 800c866:	4798      	blx	r3
 800c868:	6925      	ldr	r5, [r4, #16]
 800c86a:	686b      	ldr	r3, [r5, #4]
 800c86c:	4798      	blx	r3
 800c86e:	6925      	ldr	r5, [r4, #16]
 800c870:	4681      	mov	r9, r0
 800c872:	686b      	ldr	r3, [r5, #4]
 800c874:	4640      	mov	r0, r8
 800c876:	4798      	blx	r3
 800c878:	4649      	mov	r1, r9
 800c87a:	f7ff ffc3 	bl	800c804 <_MixColors>
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4798      	blx	r3
 800c884:	68e5      	ldr	r5, [r4, #12]
 800c886:	4603      	mov	r3, r0
 800c888:	69ad      	ldr	r5, [r5, #24]
 800c88a:	4620      	mov	r0, r4
 800c88c:	4639      	mov	r1, r7
 800c88e:	4632      	mov	r2, r6
 800c890:	47a8      	blx	r5
 800c892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c896 <_XorPixel>:
 800c896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	4604      	mov	r4, r0
 800c89c:	460f      	mov	r7, r1
 800c89e:	4616      	mov	r6, r2
 800c8a0:	f7ff fdea 	bl	800c478 <_GetPixelIndex>
 800c8a4:	6825      	ldr	r5, [r4, #0]
 800c8a6:	692b      	ldr	r3, [r5, #16]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	4798      	blx	r3
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	ea80 0308 	eor.w	r3, r0, r8
 800c8b4:	4632      	mov	r2, r6
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	f7ff bfca 	b.w	800c854 <_SetPixelIndex>

0800c8c0 <_DrawVLine>:
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c4:	461d      	mov	r5, r3
 800c8c6:	4b12      	ldr	r3, [pc, #72]	; (800c910 <_DrawVLine+0x50>)
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	7c12      	ldrb	r2, [r2, #16]
 800c8ce:	f012 0f01 	tst.w	r2, #1
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460f      	mov	r7, r1
 800c8d6:	4698      	mov	r8, r3
 800c8d8:	d10e      	bne.n	800c8f8 <_DrawVLine+0x38>
 800c8da:	42ac      	cmp	r4, r5
 800c8dc:	dc0a      	bgt.n	800c8f4 <_DrawVLine+0x34>
 800c8de:	f8d8 2000 	ldr.w	r2, [r8]
 800c8e2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f7ff ffb2 	bl	800c854 <_SetPixelIndex>
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	e7f2      	b.n	800c8da <_DrawVLine+0x1a>
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	42ac      	cmp	r4, r5
 800c8fa:	dc06      	bgt.n	800c90a <_DrawVLine+0x4a>
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4630      	mov	r0, r6
 800c900:	4639      	mov	r1, r7
 800c902:	f7ff ffc8 	bl	800c896 <_XorPixel>
 800c906:	3401      	adds	r4, #1
 800c908:	e7f6      	b.n	800c8f8 <_DrawVLine+0x38>
 800c90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90e:	bf00      	nop
 800c910:	20000038 	.word	0x20000038

0800c914 <_GetLine>:
 800c914:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
 800c918:	4698      	mov	r8, r3
 800c91a:	b085      	sub	sp, #20
 800c91c:	6803      	ldr	r3, [r0, #0]
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c924:	4616      	mov	r6, r2
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	2a04      	cmp	r2, #4
 800c92a:	460c      	mov	r4, r1
 800c92c:	d006      	beq.n	800c93c <_GetLine+0x28>
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	a803      	add	r0, sp, #12
 800c932:	2101      	movs	r1, #1
 800c934:	4798      	blx	r3
 800c936:	2501      	movs	r5, #1
 800c938:	4684      	mov	ip, r0
 800c93a:	e002      	b.n	800c942 <_GetLine+0x2e>
 800c93c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c9bc <_GetLine+0xa8>
 800c940:	2500      	movs	r5, #0
 800c942:	eb04 0b08 	add.w	fp, r4, r8
 800c946:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c94a:	f1bc 0f00 	cmp.w	ip, #0
 800c94e:	d101      	bne.n	800c954 <_GetLine+0x40>
 800c950:	463d      	mov	r5, r7
 800c952:	e016      	b.n	800c982 <_GetLine+0x6e>
 800c954:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800c958:	9803      	ldr	r0, [sp, #12]
 800c95a:	4621      	mov	r1, r4
 800c95c:	4632      	mov	r2, r6
 800c95e:	465b      	mov	r3, fp
 800c960:	47e0      	blx	ip
 800c962:	b165      	cbz	r5, 800c97e <_GetLine+0x6a>
 800c964:	4b14      	ldr	r3, [pc, #80]	; (800c9b8 <_GetLine+0xa4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	7c58      	ldrb	r0, [r3, #17]
 800c96a:	f7fe fc71 	bl	800b250 <LCD_GetBitsPerPixelEx>
 800c96e:	4641      	mov	r1, r8
 800c970:	2818      	cmp	r0, #24
 800c972:	bf14      	ite	ne
 800c974:	4602      	movne	r2, r0
 800c976:	2220      	moveq	r2, #32
 800c978:	4638      	mov	r0, r7
 800c97a:	f004 fe87 	bl	801168c <GUI__ExpandPixelIndices>
 800c97e:	2400      	movs	r4, #0
 800c980:	e00b      	b.n	800c99a <_GetLine+0x86>
 800c982:	455c      	cmp	r4, fp
 800c984:	dcfb      	bgt.n	800c97e <_GetLine+0x6a>
 800c986:	9803      	ldr	r0, [sp, #12]
 800c988:	68c3      	ldr	r3, [r0, #12]
 800c98a:	4621      	mov	r1, r4
 800c98c:	695b      	ldr	r3, [r3, #20]
 800c98e:	4632      	mov	r2, r6
 800c990:	4798      	blx	r3
 800c992:	3401      	adds	r4, #1
 800c994:	f845 0b04 	str.w	r0, [r5], #4
 800c998:	e7f3      	b.n	800c982 <_GetLine+0x6e>
 800c99a:	4544      	cmp	r4, r8
 800c99c:	da08      	bge.n	800c9b0 <_GetLine+0x9c>
 800c99e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800c9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9a4:	4798      	blx	r3
 800c9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c9ac:	3401      	adds	r4, #1
 800c9ae:	e7f4      	b.n	800c99a <_GetLine+0x86>
 800c9b0:	b005      	add	sp, #20
 800c9b2:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20000038 	.word	0x20000038
 800c9bc:	0800c625 	.word	0x0800c625

0800c9c0 <_DrawBitmapLine.isra.6>:
 800c9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	461d      	mov	r5, r3
 800c9c6:	4b13      	ldr	r3, [pc, #76]	; (800ca14 <_DrawBitmapLine.isra.6+0x54>)
 800c9c8:	4e13      	ldr	r6, [pc, #76]	; (800ca18 <_DrawBitmapLine.isra.6+0x58>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	b087      	sub	sp, #28
 800c9ce:	4607      	mov	r7, r0
 800c9d0:	7c58      	ldrb	r0, [r3, #17]
 800c9d2:	4689      	mov	r9, r1
 800c9d4:	4690      	mov	r8, r2
 800c9d6:	f7fe fc3b 	bl	800b250 <LCD_GetBitsPerPixelEx>
 800c9da:	2818      	cmp	r0, #24
 800c9dc:	bf14      	ite	ne
 800c9de:	4604      	movne	r4, r0
 800c9e0:	2420      	moveq	r4, #32
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	4622      	mov	r2, r4
 800c9e6:	6830      	ldr	r0, [r6, #0]
 800c9e8:	f004 ff79 	bl	80118de <GUI__CompactPixelIndices>
 800c9ec:	6838      	ldr	r0, [r7, #0]
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	68c2      	ldr	r2, [r0, #12]
 800c9f2:	e88d 0018 	stmia.w	sp, {r3, r4}
 800c9f6:	2400      	movs	r4, #0
 800c9f8:	6833      	ldr	r3, [r6, #0]
 800c9fa:	9303      	str	r3, [sp, #12]
 800c9fc:	9402      	str	r4, [sp, #8]
 800c9fe:	9404      	str	r4, [sp, #16]
 800ca00:	9405      	str	r4, [sp, #20]
 800ca02:	6854      	ldr	r4, [r2, #4]
 800ca04:	4649      	mov	r1, r9
 800ca06:	4642      	mov	r2, r8
 800ca08:	462b      	mov	r3, r5
 800ca0a:	47a0      	blx	r4
 800ca0c:	b007      	add	sp, #28
 800ca0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca12:	bf00      	nop
 800ca14:	20000038 	.word	0x20000038
 800ca18:	20022aa4 	.word	0x20022aa4

0800ca1c <_DrawHLine>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	1a5b      	subs	r3, r3, r1
 800ca22:	1c5d      	adds	r5, r3, #1
 800ca24:	6803      	ldr	r3, [r0, #0]
 800ca26:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800caa0 <_DrawHLine+0x84>
 800ca2a:	691c      	ldr	r4, [r3, #16]
 800ca2c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800caa4 <_DrawHLine+0x88>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	b087      	sub	sp, #28
 800ca34:	4607      	mov	r7, r0
 800ca36:	9305      	str	r3, [sp, #20]
 800ca38:	f8d9 3000 	ldr.w	r3, [r9]
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	6863      	ldr	r3, [r4, #4]
 800ca46:	9302      	str	r3, [sp, #8]
 800ca48:	462b      	mov	r3, r5
 800ca4a:	460e      	mov	r6, r1
 800ca4c:	4692      	mov	sl, r2
 800ca4e:	f7ff ff61 	bl	800c914 <_GetLine>
 800ca52:	4b12      	ldr	r3, [pc, #72]	; (800ca9c <_DrawHLine+0x80>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca58:	6818      	ldr	r0, [r3, #0]
 800ca5a:	f7ff f87b 	bl	800bb54 <LCD_Index2Color>
 800ca5e:	2400      	movs	r4, #0
 800ca60:	4683      	mov	fp, r0
 800ca62:	42ac      	cmp	r4, r5
 800ca64:	da10      	bge.n	800ca88 <_DrawHLine+0x6c>
 800ca66:	f8d8 3000 	ldr.w	r3, [r8]
 800ca6a:	4658      	mov	r0, fp
 800ca6c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800ca70:	f7ff fec8 	bl	800c804 <_MixColors>
 800ca74:	f8d9 3000 	ldr.w	r3, [r9]
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	9a05      	ldr	r2, [sp, #20]
 800ca7c:	4790      	blx	r2
 800ca7e:	9b04      	ldr	r3, [sp, #16]
 800ca80:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ca84:	3401      	adds	r4, #1
 800ca86:	e7ec      	b.n	800ca62 <_DrawHLine+0x46>
 800ca88:	4638      	mov	r0, r7
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4652      	mov	r2, sl
 800ca8e:	462b      	mov	r3, r5
 800ca90:	b007      	add	sp, #28
 800ca92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca96:	f7ff bf93 	b.w	800c9c0 <_DrawBitmapLine.isra.6>
 800ca9a:	bf00      	nop
 800ca9c:	20000038 	.word	0x20000038
 800caa0:	20022aa4 	.word	0x20022aa4
 800caa4:	20022aa0 	.word	0x20022aa0

0800caa8 <_FillRect>:
 800caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caac:	9d06      	ldr	r5, [sp, #24]
 800caae:	4606      	mov	r6, r0
 800cab0:	460f      	mov	r7, r1
 800cab2:	4614      	mov	r4, r2
 800cab4:	4698      	mov	r8, r3
 800cab6:	42ac      	cmp	r4, r5
 800cab8:	dc07      	bgt.n	800caca <_FillRect+0x22>
 800caba:	4622      	mov	r2, r4
 800cabc:	4630      	mov	r0, r6
 800cabe:	4639      	mov	r1, r7
 800cac0:	4643      	mov	r3, r8
 800cac2:	f7ff ffab 	bl	800ca1c <_DrawHLine>
 800cac6:	3401      	adds	r4, #1
 800cac8:	e7f5      	b.n	800cab6 <_FillRect+0xe>
 800caca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800cad0 <_DrawBitmap>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	b08d      	sub	sp, #52	; 0x34
 800cad6:	4605      	mov	r5, r0
 800cad8:	9105      	str	r1, [sp, #20]
 800cada:	920b      	str	r2, [sp, #44]	; 0x2c
 800cadc:	461c      	mov	r4, r3
 800cade:	4616      	mov	r6, r2
 800cae0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800cae2:	1bf3      	subs	r3, r6, r7
 800cae4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800cae6:	42bb      	cmp	r3, r7
 800cae8:	f280 835d 	bge.w	800d1a6 <_DrawBitmap+0x6d6>
 800caec:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800caee:	2f04      	cmp	r7, #4
 800caf0:	f000 81b5 	beq.w	800ce5e <_DrawBitmap+0x38e>
 800caf4:	dc05      	bgt.n	800cb02 <_DrawBitmap+0x32>
 800caf6:	2f01      	cmp	r7, #1
 800caf8:	d00e      	beq.n	800cb18 <_DrawBitmap+0x48>
 800cafa:	2f02      	cmp	r7, #2
 800cafc:	f000 80e1 	beq.w	800ccc2 <_DrawBitmap+0x1f2>
 800cb00:	e34b      	b.n	800d19a <_DrawBitmap+0x6ca>
 800cb02:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800cb04:	2f10      	cmp	r7, #16
 800cb06:	f000 82d8 	beq.w	800d0ba <_DrawBitmap+0x5ea>
 800cb0a:	2f20      	cmp	r7, #32
 800cb0c:	f000 830e 	beq.w	800d12c <_DrawBitmap+0x65c>
 800cb10:	2f08      	cmp	r7, #8
 800cb12:	f040 8342 	bne.w	800d19a <_DrawBitmap+0x6ca>
 800cb16:	e268      	b.n	800cfea <_DrawBitmap+0x51a>
 800cb18:	4bb9      	ldr	r3, [pc, #740]	; (800ce00 <_DrawBitmap+0x330>)
 800cb1a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f8d7 b000 	ldr.w	fp, [r7]
 800cb22:	7c1b      	ldrb	r3, [r3, #16]
 800cb24:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800cb28:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cb2c:	9f05      	ldr	r7, [sp, #20]
 800cb2e:	f003 0303 	and.w	r3, r3, #3
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	44b8      	add	r8, r7
 800cb36:	d04c      	beq.n	800cbd2 <_DrawBitmap+0x102>
 800cb38:	2b03      	cmp	r3, #3
 800cb3a:	f000 808e 	beq.w	800cc5a <_DrawBitmap+0x18a>
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	f000 808b 	beq.w	800cc5a <_DrawBitmap+0x18a>
 800cb44:	682b      	ldr	r3, [r5, #0]
 800cb46:	691b      	ldr	r3, [r3, #16]
 800cb48:	e893 0280 	ldmia.w	r3, {r7, r9}
 800cb4c:	4bad      	ldr	r3, [pc, #692]	; (800ce04 <_DrawBitmap+0x334>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	4bad      	ldr	r3, [pc, #692]	; (800ce08 <_DrawBitmap+0x338>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	9301      	str	r3, [sp, #4]
 800cb58:	4641      	mov	r1, r8
 800cb5a:	4623      	mov	r3, r4
 800cb5c:	4632      	mov	r2, r6
 800cb5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb62:	4628      	mov	r0, r5
 800cb64:	f7ff fed6 	bl	800c914 <_GetLine>
 800cb68:	4658      	mov	r0, fp
 800cb6a:	47c8      	blx	r9
 800cb6c:	4683      	mov	fp, r0
 800cb6e:	4650      	mov	r0, sl
 800cb70:	47c8      	blx	r9
 800cb72:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800cb76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cb78:	4684      	mov	ip, r0
 800cb7a:	46a2      	mov	sl, r4
 800cb7c:	7819      	ldrb	r1, [r3, #0]
 800cb7e:	2280      	movs	r2, #128	; 0x80
 800cb80:	fa42 f209 	asr.w	r2, r2, r9
 800cb84:	4211      	tst	r1, r2
 800cb86:	49a0      	ldr	r1, [pc, #640]	; (800ce08 <_DrawBitmap+0x338>)
 800cb88:	ebca 0204 	rsb	r2, sl, r4
 800cb8c:	6809      	ldr	r1, [r1, #0]
 800cb8e:	bf0c      	ite	eq
 800cb90:	4658      	moveq	r0, fp
 800cb92:	4660      	movne	r0, ip
 800cb94:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800cb98:	9208      	str	r2, [sp, #32]
 800cb9a:	9307      	str	r3, [sp, #28]
 800cb9c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cba0:	f7ff fe30 	bl	800c804 <_MixColors>
 800cba4:	4997      	ldr	r1, [pc, #604]	; (800ce04 <_DrawBitmap+0x334>)
 800cba6:	6809      	ldr	r1, [r1, #0]
 800cba8:	9104      	str	r1, [sp, #16]
 800cbaa:	f109 0901 	add.w	r9, r9, #1
 800cbae:	47b8      	blx	r7
 800cbb0:	9b07      	ldr	r3, [sp, #28]
 800cbb2:	9a08      	ldr	r2, [sp, #32]
 800cbb4:	9904      	ldr	r1, [sp, #16]
 800cbb6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cbba:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800cbbe:	f1b9 0f08 	cmp.w	r9, #8
 800cbc2:	bf04      	itt	eq
 800cbc4:	3301      	addeq	r3, #1
 800cbc6:	f04f 0900 	moveq.w	r9, #0
 800cbca:	f1ba 0a01 	subs.w	sl, sl, #1
 800cbce:	d1d5      	bne.n	800cb7c <_DrawBitmap+0xac>
 800cbd0:	e040      	b.n	800cc54 <_DrawBitmap+0x184>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	691b      	ldr	r3, [r3, #16]
 800cbd6:	e893 0280 	ldmia.w	r3, {r7, r9}
 800cbda:	4b8a      	ldr	r3, [pc, #552]	; (800ce04 <_DrawBitmap+0x334>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	4b89      	ldr	r3, [pc, #548]	; (800ce08 <_DrawBitmap+0x338>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	4632      	mov	r2, r6
 800cbe8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cbec:	4628      	mov	r0, r5
 800cbee:	4641      	mov	r1, r8
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	f7ff fe8f 	bl	800c914 <_GetLine>
 800cbf6:	4650      	mov	r0, sl
 800cbf8:	47c8      	blx	r9
 800cbfa:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800cbfe:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800cc02:	4602      	mov	r2, r0
 800cc04:	46a2      	mov	sl, r4
 800cc06:	f89b 1000 	ldrb.w	r1, [fp]
 800cc0a:	2380      	movs	r3, #128	; 0x80
 800cc0c:	fa43 f309 	asr.w	r3, r3, r9
 800cc10:	4219      	tst	r1, r3
 800cc12:	d013      	beq.n	800cc3c <_DrawBitmap+0x16c>
 800cc14:	497c      	ldr	r1, [pc, #496]	; (800ce08 <_DrawBitmap+0x338>)
 800cc16:	ebca 0304 	rsb	r3, sl, r4
 800cc1a:	6809      	ldr	r1, [r1, #0]
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc22:	9208      	str	r2, [sp, #32]
 800cc24:	9307      	str	r3, [sp, #28]
 800cc26:	f7ff fded 	bl	800c804 <_MixColors>
 800cc2a:	4976      	ldr	r1, [pc, #472]	; (800ce04 <_DrawBitmap+0x334>)
 800cc2c:	6809      	ldr	r1, [r1, #0]
 800cc2e:	9104      	str	r1, [sp, #16]
 800cc30:	47b8      	blx	r7
 800cc32:	9b07      	ldr	r3, [sp, #28]
 800cc34:	9904      	ldr	r1, [sp, #16]
 800cc36:	9a08      	ldr	r2, [sp, #32]
 800cc38:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800cc3c:	f109 0901 	add.w	r9, r9, #1
 800cc40:	f1b9 0f08 	cmp.w	r9, #8
 800cc44:	bf04      	itt	eq
 800cc46:	f10b 0b01 	addeq.w	fp, fp, #1
 800cc4a:	f04f 0900 	moveq.w	r9, #0
 800cc4e:	f1ba 0a01 	subs.w	sl, sl, #1
 800cc52:	d1d8      	bne.n	800cc06 <_DrawBitmap+0x136>
 800cc54:	4628      	mov	r0, r5
 800cc56:	4641      	mov	r1, r8
 800cc58:	e29b      	b.n	800d192 <_DrawBitmap+0x6c2>
 800cc5a:	692b      	ldr	r3, [r5, #16]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	4798      	blx	r3
 800cc60:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800cc64:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800cc68:	4683      	mov	fp, r0
 800cc6a:	46a2      	mov	sl, r4
 800cc6c:	f89c 1000 	ldrb.w	r1, [ip]
 800cc70:	2280      	movs	r2, #128	; 0x80
 800cc72:	fa42 f209 	asr.w	r2, r2, r9
 800cc76:	eb08 0304 	add.w	r3, r8, r4
 800cc7a:	4211      	tst	r1, r2
 800cc7c:	ebca 0303 	rsb	r3, sl, r3
 800cc80:	d012      	beq.n	800cca8 <_DrawBitmap+0x1d8>
 800cc82:	4619      	mov	r1, r3
 800cc84:	4632      	mov	r2, r6
 800cc86:	4628      	mov	r0, r5
 800cc88:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cc8c:	9307      	str	r3, [sp, #28]
 800cc8e:	f7ff fbf3 	bl	800c478 <_GetPixelIndex>
 800cc92:	9b07      	ldr	r3, [sp, #28]
 800cc94:	ea80 0e0b 	eor.w	lr, r0, fp
 800cc98:	4619      	mov	r1, r3
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4673      	mov	r3, lr
 800cca0:	f7ff fdd8 	bl	800c854 <_SetPixelIndex>
 800cca4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cca8:	f109 0901 	add.w	r9, r9, #1
 800ccac:	f1b9 0f08 	cmp.w	r9, #8
 800ccb0:	bf04      	itt	eq
 800ccb2:	f10c 0c01 	addeq.w	ip, ip, #1
 800ccb6:	f04f 0900 	moveq.w	r9, #0
 800ccba:	f1ba 0a01 	subs.w	sl, sl, #1
 800ccbe:	d1d5      	bne.n	800cc6c <_DrawBitmap+0x19c>
 800ccc0:	e26b      	b.n	800d19a <_DrawBitmap+0x6ca>
 800ccc2:	4b4f      	ldr	r3, [pc, #316]	; (800ce00 <_DrawBitmap+0x330>)
 800ccc4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f897 8000 	ldrb.w	r8, [r7]
 800cccc:	7c1b      	ldrb	r3, [r3, #16]
 800ccce:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800ccd2:	9f05      	ldr	r7, [sp, #20]
 800ccd4:	f013 0303 	ands.w	r3, r3, #3
 800ccd8:	44b9      	add	r9, r7
 800ccda:	d002      	beq.n	800cce2 <_DrawBitmap+0x212>
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d05b      	beq.n	800cd98 <_DrawBitmap+0x2c8>
 800cce0:	e25b      	b.n	800d19a <_DrawBitmap+0x6ca>
 800cce2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cce4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cce8:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800ccec:	4649      	mov	r1, r9
 800ccee:	b387      	cbz	r7, 800cd52 <_DrawBitmap+0x282>
 800ccf0:	f1ca 0303 	rsb	r3, sl, #3
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	f1c3 0206 	rsb	r2, r3, #6
 800ccfa:	20c0      	movs	r0, #192	; 0xc0
 800ccfc:	fa40 f202 	asr.w	r2, r0, r2
 800cd00:	ea02 0208 	and.w	r2, r2, r8
 800cd04:	fa22 f303 	lsr.w	r3, r2, r3
 800cd08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cd0a:	f101 0c01 	add.w	ip, r1, #1
 800cd0e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800cd12:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cd16:	4628      	mov	r0, r5
 800cd18:	4632      	mov	r2, r6
 800cd1a:	f10a 0a01 	add.w	sl, sl, #1
 800cd1e:	f7ff fd99 	bl	800c854 <_SetPixelIndex>
 800cd22:	f1ba 0f04 	cmp.w	sl, #4
 800cd26:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cd2a:	d105      	bne.n	800cd38 <_DrawBitmap+0x268>
 800cd2c:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800cd30:	f04f 0a00 	mov.w	sl, #0
 800cd34:	f10b 0b01 	add.w	fp, fp, #1
 800cd38:	eb09 0304 	add.w	r3, r9, r4
 800cd3c:	4563      	cmp	r3, ip
 800cd3e:	f000 822c 	beq.w	800d19a <_DrawBitmap+0x6ca>
 800cd42:	4661      	mov	r1, ip
 800cd44:	e7d4      	b.n	800ccf0 <_DrawBitmap+0x220>
 800cd46:	eb09 0304 	add.w	r3, r9, r4
 800cd4a:	4563      	cmp	r3, ip
 800cd4c:	f000 8225 	beq.w	800d19a <_DrawBitmap+0x6ca>
 800cd50:	4661      	mov	r1, ip
 800cd52:	f1ca 0e03 	rsb	lr, sl, #3
 800cd56:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800cd5a:	f1ce 0306 	rsb	r3, lr, #6
 800cd5e:	22c0      	movs	r2, #192	; 0xc0
 800cd60:	fa42 f303 	asr.w	r3, r2, r3
 800cd64:	ea03 0308 	and.w	r3, r3, r8
 800cd68:	f101 0c01 	add.w	ip, r1, #1
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	4632      	mov	r2, r6
 800cd70:	fa23 f30e 	lsr.w	r3, r3, lr
 800cd74:	f10a 0a01 	add.w	sl, sl, #1
 800cd78:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cd7c:	f7ff fd6a 	bl	800c854 <_SetPixelIndex>
 800cd80:	f1ba 0f04 	cmp.w	sl, #4
 800cd84:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cd88:	d1dd      	bne.n	800cd46 <_DrawBitmap+0x276>
 800cd8a:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800cd8e:	f04f 0a00 	mov.w	sl, #0
 800cd92:	f10b 0b01 	add.w	fp, fp, #1
 800cd96:	e7d6      	b.n	800cd46 <_DrawBitmap+0x276>
 800cd98:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cd9a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cd9e:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800cda2:	46a3      	mov	fp, r4
 800cda4:	2f00      	cmp	r7, #0
 800cda6:	d040      	beq.n	800ce2a <_DrawBitmap+0x35a>
 800cda8:	f1ca 0303 	rsb	r3, sl, #3
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	f1c3 0206 	rsb	r2, r3, #6
 800cdb2:	20c0      	movs	r0, #192	; 0xc0
 800cdb4:	fa40 f202 	asr.w	r2, r0, r2
 800cdb8:	ea02 0208 	and.w	r2, r2, r8
 800cdbc:	eb09 0104 	add.w	r1, r9, r4
 800cdc0:	fa32 f303 	lsrs.w	r3, r2, r3
 800cdc4:	ebcb 0101 	rsb	r1, fp, r1
 800cdc8:	d00a      	beq.n	800cde0 <_DrawBitmap+0x310>
 800cdca:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cdcc:	4628      	mov	r0, r5
 800cdce:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800cdd2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cdd6:	4632      	mov	r2, r6
 800cdd8:	f7ff fd3c 	bl	800c854 <_SetPixelIndex>
 800cddc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cde0:	f10a 0a01 	add.w	sl, sl, #1
 800cde4:	f1ba 0f04 	cmp.w	sl, #4
 800cde8:	d105      	bne.n	800cdf6 <_DrawBitmap+0x326>
 800cdea:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800cdee:	f04f 0a00 	mov.w	sl, #0
 800cdf2:	f10c 0c01 	add.w	ip, ip, #1
 800cdf6:	f1bb 0b01 	subs.w	fp, fp, #1
 800cdfa:	d1d5      	bne.n	800cda8 <_DrawBitmap+0x2d8>
 800cdfc:	e1cd      	b.n	800d19a <_DrawBitmap+0x6ca>
 800cdfe:	bf00      	nop
 800ce00:	20000038 	.word	0x20000038
 800ce04:	20022aa4 	.word	0x20022aa4
 800ce08:	20022aa0 	.word	0x20022aa0
 800ce0c:	f10a 0a01 	add.w	sl, sl, #1
 800ce10:	f1ba 0f04 	cmp.w	sl, #4
 800ce14:	d105      	bne.n	800ce22 <_DrawBitmap+0x352>
 800ce16:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800ce1a:	f04f 0a00 	mov.w	sl, #0
 800ce1e:	f10c 0c01 	add.w	ip, ip, #1
 800ce22:	f1bb 0b01 	subs.w	fp, fp, #1
 800ce26:	f000 81b8 	beq.w	800d19a <_DrawBitmap+0x6ca>
 800ce2a:	f1ca 0303 	rsb	r3, sl, #3
 800ce2e:	005b      	lsls	r3, r3, #1
 800ce30:	f1c3 0206 	rsb	r2, r3, #6
 800ce34:	20c0      	movs	r0, #192	; 0xc0
 800ce36:	fa40 f202 	asr.w	r2, r0, r2
 800ce3a:	ea02 0208 	and.w	r2, r2, r8
 800ce3e:	eb09 0104 	add.w	r1, r9, r4
 800ce42:	fa32 f303 	lsrs.w	r3, r2, r3
 800ce46:	ebcb 0101 	rsb	r1, fp, r1
 800ce4a:	d0df      	beq.n	800ce0c <_DrawBitmap+0x33c>
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	4632      	mov	r2, r6
 800ce50:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ce54:	f7ff fcfe 	bl	800c854 <_SetPixelIndex>
 800ce58:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800ce5c:	e7d6      	b.n	800ce0c <_DrawBitmap+0x33c>
 800ce5e:	4bb0      	ldr	r3, [pc, #704]	; (800d120 <_DrawBitmap+0x650>)
 800ce60:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f897 8000 	ldrb.w	r8, [r7]
 800ce68:	7c1b      	ldrb	r3, [r3, #16]
 800ce6a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800ce6e:	9f05      	ldr	r7, [sp, #20]
 800ce70:	f013 0303 	ands.w	r3, r3, #3
 800ce74:	44b9      	add	r9, r7
 800ce76:	d002      	beq.n	800ce7e <_DrawBitmap+0x3ae>
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d05b      	beq.n	800cf34 <_DrawBitmap+0x464>
 800ce7c:	e18d      	b.n	800d19a <_DrawBitmap+0x6ca>
 800ce7e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ce80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ce84:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800ce88:	4649      	mov	r1, r9
 800ce8a:	b387      	cbz	r7, 800ceee <_DrawBitmap+0x41e>
 800ce8c:	f1ca 0301 	rsb	r3, sl, #1
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	f1c3 0204 	rsb	r2, r3, #4
 800ce96:	20f0      	movs	r0, #240	; 0xf0
 800ce98:	fa40 f202 	asr.w	r2, r0, r2
 800ce9c:	ea02 0208 	and.w	r2, r2, r8
 800cea0:	fa22 f303 	lsr.w	r3, r2, r3
 800cea4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cea6:	f101 0c01 	add.w	ip, r1, #1
 800ceaa:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800ceae:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	4632      	mov	r2, r6
 800ceb6:	f10a 0a01 	add.w	sl, sl, #1
 800ceba:	f7ff fccb 	bl	800c854 <_SetPixelIndex>
 800cebe:	f1ba 0f02 	cmp.w	sl, #2
 800cec2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cec6:	d105      	bne.n	800ced4 <_DrawBitmap+0x404>
 800cec8:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800cecc:	f04f 0a00 	mov.w	sl, #0
 800ced0:	f10b 0b01 	add.w	fp, fp, #1
 800ced4:	eb09 0304 	add.w	r3, r9, r4
 800ced8:	4563      	cmp	r3, ip
 800ceda:	f000 815e 	beq.w	800d19a <_DrawBitmap+0x6ca>
 800cede:	4661      	mov	r1, ip
 800cee0:	e7d4      	b.n	800ce8c <_DrawBitmap+0x3bc>
 800cee2:	eb09 0304 	add.w	r3, r9, r4
 800cee6:	4563      	cmp	r3, ip
 800cee8:	f000 8157 	beq.w	800d19a <_DrawBitmap+0x6ca>
 800ceec:	4661      	mov	r1, ip
 800ceee:	f1ca 0e01 	rsb	lr, sl, #1
 800cef2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800cef6:	f1ce 0304 	rsb	r3, lr, #4
 800cefa:	22f0      	movs	r2, #240	; 0xf0
 800cefc:	fa42 f303 	asr.w	r3, r2, r3
 800cf00:	ea03 0308 	and.w	r3, r3, r8
 800cf04:	f101 0c01 	add.w	ip, r1, #1
 800cf08:	4628      	mov	r0, r5
 800cf0a:	4632      	mov	r2, r6
 800cf0c:	fa23 f30e 	lsr.w	r3, r3, lr
 800cf10:	f10a 0a01 	add.w	sl, sl, #1
 800cf14:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cf18:	f7ff fc9c 	bl	800c854 <_SetPixelIndex>
 800cf1c:	f1ba 0f02 	cmp.w	sl, #2
 800cf20:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cf24:	d1dd      	bne.n	800cee2 <_DrawBitmap+0x412>
 800cf26:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800cf2a:	f04f 0a00 	mov.w	sl, #0
 800cf2e:	f10b 0b01 	add.w	fp, fp, #1
 800cf32:	e7d6      	b.n	800cee2 <_DrawBitmap+0x412>
 800cf34:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cf36:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cf3a:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800cf3e:	46a3      	mov	fp, r4
 800cf40:	b3cf      	cbz	r7, 800cfb6 <_DrawBitmap+0x4e6>
 800cf42:	f1ca 0301 	rsb	r3, sl, #1
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	f1c3 0204 	rsb	r2, r3, #4
 800cf4c:	20f0      	movs	r0, #240	; 0xf0
 800cf4e:	fa40 f202 	asr.w	r2, r0, r2
 800cf52:	ea02 0208 	and.w	r2, r2, r8
 800cf56:	eb09 0104 	add.w	r1, r9, r4
 800cf5a:	fa32 f303 	lsrs.w	r3, r2, r3
 800cf5e:	ebcb 0101 	rsb	r1, fp, r1
 800cf62:	d00a      	beq.n	800cf7a <_DrawBitmap+0x4aa>
 800cf64:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cf66:	4628      	mov	r0, r5
 800cf68:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800cf6c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cf70:	4632      	mov	r2, r6
 800cf72:	f7ff fc6f 	bl	800c854 <_SetPixelIndex>
 800cf76:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cf7a:	f10a 0a01 	add.w	sl, sl, #1
 800cf7e:	f1ba 0f02 	cmp.w	sl, #2
 800cf82:	d105      	bne.n	800cf90 <_DrawBitmap+0x4c0>
 800cf84:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800cf88:	f04f 0a00 	mov.w	sl, #0
 800cf8c:	f10c 0c01 	add.w	ip, ip, #1
 800cf90:	f1bb 0b01 	subs.w	fp, fp, #1
 800cf94:	d1d5      	bne.n	800cf42 <_DrawBitmap+0x472>
 800cf96:	e100      	b.n	800d19a <_DrawBitmap+0x6ca>
 800cf98:	f10a 0a01 	add.w	sl, sl, #1
 800cf9c:	f1ba 0f02 	cmp.w	sl, #2
 800cfa0:	d105      	bne.n	800cfae <_DrawBitmap+0x4de>
 800cfa2:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800cfa6:	f04f 0a00 	mov.w	sl, #0
 800cfaa:	f10c 0c01 	add.w	ip, ip, #1
 800cfae:	f1bb 0b01 	subs.w	fp, fp, #1
 800cfb2:	f000 80f2 	beq.w	800d19a <_DrawBitmap+0x6ca>
 800cfb6:	f1ca 0301 	rsb	r3, sl, #1
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	f1c3 0204 	rsb	r2, r3, #4
 800cfc0:	20f0      	movs	r0, #240	; 0xf0
 800cfc2:	fa40 f202 	asr.w	r2, r0, r2
 800cfc6:	ea02 0208 	and.w	r2, r2, r8
 800cfca:	eb09 0104 	add.w	r1, r9, r4
 800cfce:	fa32 f303 	lsrs.w	r3, r2, r3
 800cfd2:	ebcb 0101 	rsb	r1, fp, r1
 800cfd6:	d0df      	beq.n	800cf98 <_DrawBitmap+0x4c8>
 800cfd8:	4628      	mov	r0, r5
 800cfda:	4632      	mov	r2, r6
 800cfdc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800cfe0:	f7ff fc38 	bl	800c854 <_SetPixelIndex>
 800cfe4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800cfe8:	e7d6      	b.n	800cf98 <_DrawBitmap+0x4c8>
 800cfea:	4b4d      	ldr	r3, [pc, #308]	; (800d120 <_DrawBitmap+0x650>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	7c1b      	ldrb	r3, [r3, #16]
 800cff0:	f013 0303 	ands.w	r3, r3, #3
 800cff4:	d002      	beq.n	800cffc <_DrawBitmap+0x52c>
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d02f      	beq.n	800d05a <_DrawBitmap+0x58a>
 800cffa:	e0ce      	b.n	800d19a <_DrawBitmap+0x6ca>
 800cffc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800cffe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d002:	b1b7      	cbz	r7, 800d032 <_DrawBitmap+0x562>
 800d004:	9b05      	ldr	r3, [sp, #20]
 800d006:	4423      	add	r3, r4
 800d008:	ebc8 0303 	rsb	r3, r8, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f340 80c4 	ble.w	800d19a <_DrawBitmap+0x6ca>
 800d012:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d014:	9905      	ldr	r1, [sp, #20]
 800d016:	1a7b      	subs	r3, r7, r1
 800d018:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d01a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d01e:	4641      	mov	r1, r8
 800d020:	4628      	mov	r0, r5
 800d022:	4632      	mov	r2, r6
 800d024:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d028:	f7ff fc14 	bl	800c854 <_SetPixelIndex>
 800d02c:	f108 0801 	add.w	r8, r8, #1
 800d030:	e7e8      	b.n	800d004 <_DrawBitmap+0x534>
 800d032:	9b05      	ldr	r3, [sp, #20]
 800d034:	4423      	add	r3, r4
 800d036:	ebc8 0303 	rsb	r3, r8, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f340 80ad 	ble.w	800d19a <_DrawBitmap+0x6ca>
 800d040:	9905      	ldr	r1, [sp, #20]
 800d042:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d044:	1a7b      	subs	r3, r7, r1
 800d046:	4628      	mov	r0, r5
 800d048:	4641      	mov	r1, r8
 800d04a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d04e:	4632      	mov	r2, r6
 800d050:	f7ff fc00 	bl	800c854 <_SetPixelIndex>
 800d054:	f108 0801 	add.w	r8, r8, #1
 800d058:	e7eb      	b.n	800d032 <_DrawBitmap+0x562>
 800d05a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d05c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d060:	b327      	cbz	r7, 800d0ac <_DrawBitmap+0x5dc>
 800d062:	9b05      	ldr	r3, [sp, #20]
 800d064:	4423      	add	r3, r4
 800d066:	ebc8 0303 	rsb	r3, r8, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f340 8095 	ble.w	800d19a <_DrawBitmap+0x6ca>
 800d070:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d072:	9905      	ldr	r1, [sp, #20]
 800d074:	1a7b      	subs	r3, r7, r1
 800d076:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d07a:	b13b      	cbz	r3, 800d08c <_DrawBitmap+0x5bc>
 800d07c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d07e:	4628      	mov	r0, r5
 800d080:	4641      	mov	r1, r8
 800d082:	4632      	mov	r2, r6
 800d084:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d088:	f7ff fbe4 	bl	800c854 <_SetPixelIndex>
 800d08c:	f108 0801 	add.w	r8, r8, #1
 800d090:	e7e7      	b.n	800d062 <_DrawBitmap+0x592>
 800d092:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d094:	9905      	ldr	r1, [sp, #20]
 800d096:	1a7b      	subs	r3, r7, r1
 800d098:	f813 3008 	ldrb.w	r3, [r3, r8]
 800d09c:	b123      	cbz	r3, 800d0a8 <_DrawBitmap+0x5d8>
 800d09e:	4628      	mov	r0, r5
 800d0a0:	4641      	mov	r1, r8
 800d0a2:	4632      	mov	r2, r6
 800d0a4:	f7ff fbd6 	bl	800c854 <_SetPixelIndex>
 800d0a8:	f108 0801 	add.w	r8, r8, #1
 800d0ac:	9b05      	ldr	r3, [sp, #20]
 800d0ae:	4423      	add	r3, r4
 800d0b0:	ebc8 0303 	rsb	r3, r8, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	dcec      	bgt.n	800d092 <_DrawBitmap+0x5c2>
 800d0b8:	e06f      	b.n	800d19a <_DrawBitmap+0x6ca>
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800d124 <_DrawBitmap+0x654>
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d128 <_DrawBitmap+0x658>
 800d0c6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d0ca:	f8d3 a000 	ldr.w	sl, [r3]
 800d0ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	f8db 3000 	ldr.w	r3, [fp]
 800d0d8:	9301      	str	r3, [sp, #4]
 800d0da:	4632      	mov	r2, r6
 800d0dc:	4623      	mov	r3, r4
 800d0de:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	9905      	ldr	r1, [sp, #20]
 800d0e6:	f7ff fc15 	bl	800c914 <_GetLine>
 800d0ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d0ec:	f8db 3000 	ldr.w	r3, [fp]
 800d0f0:	f8d8 b000 	ldr.w	fp, [r8]
 800d0f4:	46a0      	mov	r8, r4
 800d0f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d0fa:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d0fe:	9208      	str	r2, [sp, #32]
 800d100:	9307      	str	r3, [sp, #28]
 800d102:	9109      	str	r1, [sp, #36]	; 0x24
 800d104:	47c8      	blx	r9
 800d106:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d108:	f7ff fb7c 	bl	800c804 <_MixColors>
 800d10c:	47d0      	blx	sl
 800d10e:	f1b8 0801 	subs.w	r8, r8, #1
 800d112:	f84b 0b04 	str.w	r0, [fp], #4
 800d116:	9a08      	ldr	r2, [sp, #32]
 800d118:	9b07      	ldr	r3, [sp, #28]
 800d11a:	d1ec      	bne.n	800d0f6 <_DrawBitmap+0x626>
 800d11c:	e037      	b.n	800d18e <_DrawBitmap+0x6be>
 800d11e:	bf00      	nop
 800d120:	20000038 	.word	0x20000038
 800d124:	20022aa4 	.word	0x20022aa4
 800d128:	20022aa0 	.word	0x20022aa0
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d1ac <_DrawBitmap+0x6dc>
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d1b0 <_DrawBitmap+0x6e0>
 800d138:	9905      	ldr	r1, [sp, #20]
 800d13a:	e893 0280 	ldmia.w	r3, {r7, r9}
 800d13e:	f8d8 3000 	ldr.w	r3, [r8]
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	f8db 3000 	ldr.w	r3, [fp]
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d14e:	4623      	mov	r3, r4
 800d150:	4628      	mov	r0, r5
 800d152:	4632      	mov	r2, r6
 800d154:	f7ff fbde 	bl	800c914 <_GetLine>
 800d158:	46a2      	mov	sl, r4
 800d15a:	f8db 3000 	ldr.w	r3, [fp]
 800d15e:	f8d8 b000 	ldr.w	fp, [r8]
 800d162:	f04f 0800 	mov.w	r8, #0
 800d166:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d168:	f853 1008 	ldr.w	r1, [r3, r8]
 800d16c:	f852 0008 	ldr.w	r0, [r2, r8]
 800d170:	9307      	str	r3, [sp, #28]
 800d172:	9109      	str	r1, [sp, #36]	; 0x24
 800d174:	47c8      	blx	r9
 800d176:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d178:	f7ff fb44 	bl	800c804 <_MixColors>
 800d17c:	47b8      	blx	r7
 800d17e:	f1ba 0a01 	subs.w	sl, sl, #1
 800d182:	f84b 0008 	str.w	r0, [fp, r8]
 800d186:	9b07      	ldr	r3, [sp, #28]
 800d188:	f108 0804 	add.w	r8, r8, #4
 800d18c:	d1eb      	bne.n	800d166 <_DrawBitmap+0x696>
 800d18e:	9905      	ldr	r1, [sp, #20]
 800d190:	4628      	mov	r0, r5
 800d192:	4632      	mov	r2, r6
 800d194:	4623      	mov	r3, r4
 800d196:	f7ff fc13 	bl	800c9c0 <_DrawBitmapLine.isra.6>
 800d19a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800d19c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d19e:	440f      	add	r7, r1
 800d1a0:	9719      	str	r7, [sp, #100]	; 0x64
 800d1a2:	3601      	adds	r6, #1
 800d1a4:	e49c      	b.n	800cae0 <_DrawBitmap+0x10>
 800d1a6:	b00d      	add	sp, #52	; 0x34
 800d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ac:	20022aa4 	.word	0x20022aa4
 800d1b0:	20022aa0 	.word	0x20022aa0

0800d1b4 <GUI__AlphaPreserveTrans>:
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	4b07      	ldr	r3, [pc, #28]	; (800d1d4 <GUI__AlphaPreserveTrans+0x20>)
 800d1b8:	781c      	ldrb	r4, [r3, #0]
 800d1ba:	b120      	cbz	r0, 800d1c6 <GUI__AlphaPreserveTrans+0x12>
 800d1bc:	2201      	movs	r2, #1
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1c4:	e002      	b.n	800d1cc <GUI__AlphaPreserveTrans+0x18>
 800d1c6:	7018      	strb	r0, [r3, #0]
 800d1c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d1cc:	f004 f9d6 	bl	801157c <LCD_AA_SetAndMask>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	bd10      	pop	{r4, pc}
 800d1d4:	20023065 	.word	0x20023065

0800d1d8 <GUI_GetCursorLayer>:
 800d1d8:	2801      	cmp	r0, #1
 800d1da:	bf9a      	itte	ls
 800d1dc:	4b02      	ldrls	r3, [pc, #8]	; (800d1e8 <GUI_GetCursorLayer+0x10>)
 800d1de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d1e2:	2000      	movhi	r0, #0
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop
 800d1e8:	20022ab0 	.word	0x20022ab0

0800d1ec <GUI_GetLayerPosEx>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	460d      	mov	r5, r1
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	f7fd ffd1 	bl	800b198 <LCD_GetPosEx>
 800d1f6:	b110      	cbz	r0, 800d1fe <GUI_GetLayerPosEx+0x12>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	602b      	str	r3, [r5, #0]
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	bd38      	pop	{r3, r4, r5, pc}

0800d200 <GUI_SelectLayer>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4d08      	ldr	r5, [pc, #32]	; (800d224 <GUI_SelectLayer+0x24>)
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	2801      	cmp	r0, #1
 800d208:	4604      	mov	r4, r0
 800d20a:	7c5e      	ldrb	r6, [r3, #17]
 800d20c:	d808      	bhi.n	800d220 <GUI_SelectLayer+0x20>
 800d20e:	f000 ff71 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 800d212:	b128      	cbz	r0, 800d220 <GUI_SelectLayer+0x20>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	745c      	strb	r4, [r3, #17]
 800d218:	f000 f80a 	bl	800d230 <GUI_SelectLCD>
 800d21c:	4b02      	ldr	r3, [pc, #8]	; (800d228 <GUI_SelectLayer+0x28>)
 800d21e:	601c      	str	r4, [r3, #0]
 800d220:	4630      	mov	r0, r6
 800d222:	bd70      	pop	{r4, r5, r6, pc}
 800d224:	20000038 	.word	0x20000038
 800d228:	20023014 	.word	0x20023014

0800d22c <GUI_SetLayerPosEx>:
 800d22c:	f7fd bf84 	b.w	800b138 <LCD_SetPosEx>

0800d230 <GUI_SelectLCD>:
 800d230:	b508      	push	{r3, lr}
 800d232:	f004 f819 	bl	8011268 <LCD_SelectLCD>
 800d236:	f7fd ff0f 	bl	800b058 <LCD_UpdateColorIndices>
 800d23a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d23e:	f7fb bfc1 	b.w	80091c4 <WM_Activate>
	...

0800d244 <GUI_SaveContext_W>:
 800d244:	b508      	push	{r3, lr}
 800d246:	4b03      	ldr	r3, [pc, #12]	; (800d254 <GUI_SaveContext_W+0x10>)
 800d248:	2270      	movs	r2, #112	; 0x70
 800d24a:	6819      	ldr	r1, [r3, #0]
 800d24c:	f005 fb87 	bl	801295e <memcpy>
 800d250:	bd08      	pop	{r3, pc}
 800d252:	bf00      	nop
 800d254:	20000038 	.word	0x20000038

0800d258 <GUI_RestoreContext>:
 800d258:	b508      	push	{r3, lr}
 800d25a:	4b03      	ldr	r3, [pc, #12]	; (800d268 <GUI_RestoreContext+0x10>)
 800d25c:	4601      	mov	r1, r0
 800d25e:	2270      	movs	r2, #112	; 0x70
 800d260:	6818      	ldr	r0, [r3, #0]
 800d262:	f005 fb7c 	bl	801295e <memcpy>
 800d266:	bd08      	pop	{r3, pc}
 800d268:	20000038 	.word	0x20000038

0800d26c <GUI_RectsIntersect>:
 800d26c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800d270:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800d274:	429a      	cmp	r2, r3
 800d276:	dc14      	bgt.n	800d2a2 <GUI_RectsIntersect+0x36>
 800d278:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800d27c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d280:	429a      	cmp	r2, r3
 800d282:	dc0e      	bgt.n	800d2a2 <GUI_RectsIntersect+0x36>
 800d284:	f9b0 2000 	ldrsh.w	r2, [r0]
 800d288:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	dc08      	bgt.n	800d2a2 <GUI_RectsIntersect+0x36>
 800d290:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d294:	f9b1 2000 	ldrsh.w	r2, [r1]
 800d298:	429a      	cmp	r2, r3
 800d29a:	bfcc      	ite	gt
 800d29c:	2000      	movgt	r0, #0
 800d29e:	2001      	movle	r0, #1
 800d2a0:	4770      	bx	lr
 800d2a2:	2000      	movs	r0, #0
 800d2a4:	4770      	bx	lr
	...

0800d2a8 <GUI_SetPenSize>:
 800d2a8:	4b02      	ldr	r3, [pc, #8]	; (800d2b4 <GUI_SetPenSize+0xc>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	7e1a      	ldrb	r2, [r3, #24]
 800d2ae:	7618      	strb	r0, [r3, #24]
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	4770      	bx	lr
 800d2b4:	20000038 	.word	0x20000038

0800d2b8 <GUI_PID_GetState>:
 800d2b8:	4a11      	ldr	r2, [pc, #68]	; (800d300 <GUI_PID_GetState+0x48>)
 800d2ba:	4912      	ldr	r1, [pc, #72]	; (800d304 <GUI_PID_GetState+0x4c>)
 800d2bc:	6813      	ldr	r3, [r2, #0]
 800d2be:	6809      	ldr	r1, [r1, #0]
 800d2c0:	428b      	cmp	r3, r1
 800d2c2:	b570      	push	{r4, r5, r6, lr}
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	4616      	mov	r6, r2
 800d2c8:	4d0f      	ldr	r5, [pc, #60]	; (800d308 <GUI_PID_GetState+0x50>)
 800d2ca:	d109      	bne.n	800d2e0 <GUI_PID_GetState+0x28>
 800d2cc:	42ab      	cmp	r3, r5
 800d2ce:	bf06      	itte	eq
 800d2d0:	333c      	addeq	r3, #60	; 0x3c
 800d2d2:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800d2d6:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800d2da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d2de:	e00a      	b.n	800d2f6 <GUI_PID_GetState+0x3e>
 800d2e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d2e8:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	bf18      	it	ne
 800d2f0:	f103 050c 	addne.w	r5, r3, #12
 800d2f4:	6035      	str	r5, [r6, #0]
 800d2f6:	7a20      	ldrb	r0, [r4, #8]
 800d2f8:	3000      	adds	r0, #0
 800d2fa:	bf18      	it	ne
 800d2fc:	2001      	movne	r0, #1
 800d2fe:	bd70      	pop	{r4, r5, r6, pc}
 800d300:	20000028 	.word	0x20000028
 800d304:	20000024 	.word	0x20000024
 800d308:	20022abc 	.word	0x20022abc

0800d30c <GUI_PID_StoreState>:
 800d30c:	4a21      	ldr	r2, [pc, #132]	; (800d394 <GUI_PID_StoreState+0x88>)
 800d30e:	4922      	ldr	r1, [pc, #136]	; (800d398 <GUI_PID_StoreState+0x8c>)
 800d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d314:	6011      	str	r1, [r2, #0]
 800d316:	4f21      	ldr	r7, [pc, #132]	; (800d39c <GUI_PID_StoreState+0x90>)
 800d318:	4921      	ldr	r1, [pc, #132]	; (800d3a0 <GUI_PID_StoreState+0x94>)
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	680c      	ldr	r4, [r1, #0]
 800d31e:	4603      	mov	r3, r0
 800d320:	4820      	ldr	r0, [pc, #128]	; (800d3a4 <GUI_PID_StoreState+0x98>)
 800d322:	4294      	cmp	r4, r2
 800d324:	468c      	mov	ip, r1
 800d326:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800d32a:	d017      	beq.n	800d35c <GUI_PID_StoreState+0x50>
 800d32c:	4282      	cmp	r2, r0
 800d32e:	bf14      	ite	ne
 800d330:	f1a2 010c 	subne.w	r1, r2, #12
 800d334:	4631      	moveq	r1, r6
 800d336:	7a1d      	ldrb	r5, [r3, #8]
 800d338:	f891 8008 	ldrb.w	r8, [r1, #8]
 800d33c:	45a8      	cmp	r8, r5
 800d33e:	d10d      	bne.n	800d35c <GUI_PID_StoreState+0x50>
 800d340:	428c      	cmp	r4, r1
 800d342:	d00b      	beq.n	800d35c <GUI_PID_StoreState+0x50>
 800d344:	4281      	cmp	r1, r0
 800d346:	bf14      	ite	ne
 800d348:	390c      	subne	r1, #12
 800d34a:	4917      	ldreq	r1, [pc, #92]	; (800d3a8 <GUI_PID_StoreState+0x9c>)
 800d34c:	7a09      	ldrb	r1, [r1, #8]
 800d34e:	42a9      	cmp	r1, r5
 800d350:	d104      	bne.n	800d35c <GUI_PID_StoreState+0x50>
 800d352:	4282      	cmp	r2, r0
 800d354:	bf14      	ite	ne
 800d356:	3a0c      	subne	r2, #12
 800d358:	4a13      	ldreq	r2, [pc, #76]	; (800d3a8 <GUI_PID_StoreState+0x9c>)
 800d35a:	603a      	str	r2, [r7, #0]
 800d35c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d360:	683d      	ldr	r5, [r7, #0]
 800d362:	42b5      	cmp	r5, r6
 800d364:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d368:	bf0c      	ite	eq
 800d36a:	4d0e      	ldreq	r5, [pc, #56]	; (800d3a4 <GUI_PID_StoreState+0x98>)
 800d36c:	350c      	addne	r5, #12
 800d36e:	42ac      	cmp	r4, r5
 800d370:	603d      	str	r5, [r7, #0]
 800d372:	d105      	bne.n	800d380 <GUI_PID_StoreState+0x74>
 800d374:	42b4      	cmp	r4, r6
 800d376:	bf14      	ite	ne
 800d378:	340c      	addne	r4, #12
 800d37a:	4c0a      	ldreq	r4, [pc, #40]	; (800d3a4 <GUI_PID_StoreState+0x98>)
 800d37c:	f8cc 4000 	str.w	r4, [ip]
 800d380:	4a0a      	ldr	r2, [pc, #40]	; (800d3ac <GUI_PID_StoreState+0xa0>)
 800d382:	6812      	ldr	r2, [r2, #0]
 800d384:	b10a      	cbz	r2, 800d38a <GUI_PID_StoreState+0x7e>
 800d386:	4618      	mov	r0, r3
 800d388:	4790      	blx	r2
 800d38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d38e:	f7fe bf25 	b.w	800c1dc <GUI_SignalEvent>
 800d392:	bf00      	nop
 800d394:	20023080 	.word	0x20023080
 800d398:	08010051 	.word	0x08010051
 800d39c:	20000024 	.word	0x20000024
 800d3a0:	20000028 	.word	0x20000028
 800d3a4:	20022abc 	.word	0x20022abc
 800d3a8:	20022af8 	.word	0x20022af8
 800d3ac:	20022ab8 	.word	0x20022ab8

0800d3b0 <GUI_PID_IsEmpty>:
 800d3b0:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <GUI_PID_IsEmpty+0x10>)
 800d3b2:	6818      	ldr	r0, [r3, #0]
 800d3b4:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <GUI_PID_IsEmpty+0x14>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	1ac3      	subs	r3, r0, r3
 800d3ba:	4258      	negs	r0, r3
 800d3bc:	4158      	adcs	r0, r3
 800d3be:	4770      	bx	lr
 800d3c0:	20000028 	.word	0x20000028
 800d3c4:	20000024 	.word	0x20000024

0800d3c8 <GUI_StoreKey>:
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <GUI_StoreKey+0xc>)
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	b902      	cbnz	r2, 800d3d0 <GUI_StoreKey+0x8>
 800d3ce:	6018      	str	r0, [r3, #0]
 800d3d0:	f7fe bf04 	b.w	800c1dc <GUI_SignalEvent>
 800d3d4:	20022b04 	.word	0x20022b04

0800d3d8 <GUI_PollKeyMsg>:
 800d3d8:	4a0a      	ldr	r2, [pc, #40]	; (800d404 <GUI_PollKeyMsg+0x2c>)
 800d3da:	490b      	ldr	r1, [pc, #44]	; (800d408 <GUI_PollKeyMsg+0x30>)
 800d3dc:	6813      	ldr	r3, [r2, #0]
 800d3de:	6809      	ldr	r1, [r1, #0]
 800d3e0:	428b      	cmp	r3, r1
 800d3e2:	b510      	push	{r4, lr}
 800d3e4:	d00b      	beq.n	800d3fe <GUI_PollKeyMsg+0x26>
 800d3e6:	4c09      	ldr	r4, [pc, #36]	; (800d40c <GUI_PollKeyMsg+0x34>)
 800d3e8:	42a3      	cmp	r3, r4
 800d3ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d3ee:	bf14      	ite	ne
 800d3f0:	3308      	addne	r3, #8
 800d3f2:	3b50      	subeq	r3, #80	; 0x50
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	f003 f897 	bl	8010528 <WM_OnKey>
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	2000      	movs	r0, #0
 800d400:	bd10      	pop	{r4, pc}
 800d402:	bf00      	nop
 800d404:	20000030 	.word	0x20000030
 800d408:	2000002c 	.word	0x2000002c
 800d40c:	20022b58 	.word	0x20022b58

0800d410 <GUI_MoveRect>:
 800d410:	b168      	cbz	r0, 800d42e <GUI_MoveRect+0x1e>
 800d412:	8803      	ldrh	r3, [r0, #0]
 800d414:	b289      	uxth	r1, r1
 800d416:	440b      	add	r3, r1
 800d418:	8003      	strh	r3, [r0, #0]
 800d41a:	8883      	ldrh	r3, [r0, #4]
 800d41c:	4419      	add	r1, r3
 800d41e:	8843      	ldrh	r3, [r0, #2]
 800d420:	8081      	strh	r1, [r0, #4]
 800d422:	b292      	uxth	r2, r2
 800d424:	4413      	add	r3, r2
 800d426:	8043      	strh	r3, [r0, #2]
 800d428:	88c3      	ldrh	r3, [r0, #6]
 800d42a:	441a      	add	r2, r3
 800d42c:	80c2      	strh	r2, [r0, #6]
 800d42e:	4770      	bx	lr

0800d430 <GUI_MergeRect>:
 800d430:	b510      	push	{r4, lr}
 800d432:	b338      	cbz	r0, 800d484 <GUI_MergeRect+0x54>
 800d434:	b309      	cbz	r1, 800d47a <GUI_MergeRect+0x4a>
 800d436:	b30a      	cbz	r2, 800d47c <GUI_MergeRect+0x4c>
 800d438:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d43c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d440:	429c      	cmp	r4, r3
 800d442:	bfb8      	it	lt
 800d444:	4623      	movlt	r3, r4
 800d446:	8003      	strh	r3, [r0, #0]
 800d448:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800d44c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d450:	429c      	cmp	r4, r3
 800d452:	bfb8      	it	lt
 800d454:	4623      	movlt	r3, r4
 800d456:	8043      	strh	r3, [r0, #2]
 800d458:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800d45c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800d460:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800d464:	429c      	cmp	r4, r3
 800d466:	bfa8      	it	ge
 800d468:	4623      	movge	r3, r4
 800d46a:	8083      	strh	r3, [r0, #4]
 800d46c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d470:	4299      	cmp	r1, r3
 800d472:	bfa8      	it	ge
 800d474:	460b      	movge	r3, r1
 800d476:	80c3      	strh	r3, [r0, #6]
 800d478:	bd10      	pop	{r4, pc}
 800d47a:	4611      	mov	r1, r2
 800d47c:	680b      	ldr	r3, [r1, #0]
 800d47e:	6003      	str	r3, [r0, #0]
 800d480:	684b      	ldr	r3, [r1, #4]
 800d482:	6043      	str	r3, [r0, #4]
 800d484:	bd10      	pop	{r4, pc}
	...

0800d488 <GUI_MULTIBUF_ConfirmEx>:
 800d488:	4b08      	ldr	r3, [pc, #32]	; (800d4ac <GUI_MULTIBUF_ConfirmEx+0x24>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	bf18      	it	ne
 800d490:	2000      	movne	r0, #0
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <GUI_MULTIBUF_ConfirmEx+0x28>)
 800d494:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800d498:	2a00      	cmp	r2, #0
 800d49a:	db06      	blt.n	800d4aa <GUI_MULTIBUF_ConfirmEx+0x22>
 800d49c:	4a05      	ldr	r2, [pc, #20]	; (800d4b4 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 800d49e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800d4aa:	4770      	bx	lr
 800d4ac:	20022b70 	.word	0x20022b70
 800d4b0:	20022b68 	.word	0x20022b68
 800d4b4:	20022b60 	.word	0x20022b60

0800d4b8 <GUI_GotoXY>:
 800d4b8:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <GUI_GotoXY+0xc>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	8458      	strh	r0, [r3, #34]	; 0x22
 800d4be:	8499      	strh	r1, [r3, #36]	; 0x24
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	4770      	bx	lr
 800d4c4:	20000038 	.word	0x20000038

0800d4c8 <GUI_GetOrg>:
 800d4c8:	4b04      	ldr	r3, [pc, #16]	; (800d4dc <GUI_GetOrg+0x14>)
 800d4ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4ce:	6003      	str	r3, [r0, #0]
 800d4d0:	4b03      	ldr	r3, [pc, #12]	; (800d4e0 <GUI_GetOrg+0x18>)
 800d4d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4d6:	600b      	str	r3, [r1, #0]
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	2002305c 	.word	0x2002305c
 800d4e0:	20023050 	.word	0x20023050

0800d4e4 <GUI_GetDrawMode>:
 800d4e4:	4b01      	ldr	r3, [pc, #4]	; (800d4ec <GUI_GetDrawMode+0x8>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	7c18      	ldrb	r0, [r3, #16]
 800d4ea:	4770      	bx	lr
 800d4ec:	20000038 	.word	0x20000038

0800d4f0 <GUI_FillRect>:
 800d4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4f2:	4c0f      	ldr	r4, [pc, #60]	; (800d530 <GUI_FillRect+0x40>)
 800d4f4:	6824      	ldr	r4, [r4, #0]
 800d4f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d4f8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800d4fa:	1947      	adds	r7, r0, r5
 800d4fc:	190e      	adds	r6, r1, r4
 800d4fe:	4415      	add	r5, r2
 800d500:	441c      	add	r4, r3
 800d502:	4668      	mov	r0, sp
 800d504:	f8ad 7000 	strh.w	r7, [sp]
 800d508:	f8ad 5004 	strh.w	r5, [sp, #4]
 800d50c:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d510:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d514:	f7fb fc82 	bl	8008e1c <WM__InitIVRSearch>
 800d518:	b140      	cbz	r0, 800d52c <GUI_FillRect+0x3c>
 800d51a:	4638      	mov	r0, r7
 800d51c:	4631      	mov	r1, r6
 800d51e:	462a      	mov	r2, r5
 800d520:	4623      	mov	r3, r4
 800d522:	f7fe f899 	bl	800b658 <LCD_FillRect>
 800d526:	f7fb fbb7 	bl	8008c98 <WM__GetNextIVR>
 800d52a:	e7f5      	b.n	800d518 <GUI_FillRect+0x28>
 800d52c:	b003      	add	sp, #12
 800d52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d530:	20000038 	.word	0x20000038

0800d534 <GUI_Exec1>:
 800d534:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <GUI_Exec1+0x2c>)
 800d536:	b510      	push	{r4, lr}
 800d538:	681c      	ldr	r4, [r3, #0]
 800d53a:	b11c      	cbz	r4, 800d544 <GUI_Exec1+0x10>
 800d53c:	47a0      	blx	r4
 800d53e:	1c04      	adds	r4, r0, #0
 800d540:	bf18      	it	ne
 800d542:	2401      	movne	r4, #1
 800d544:	f7fb fd90 	bl	8009068 <WM_Exec>
 800d548:	4b06      	ldr	r3, [pc, #24]	; (800d564 <GUI_Exec1+0x30>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2800      	cmp	r0, #0
 800d54e:	bf18      	it	ne
 800d550:	2401      	movne	r4, #1
 800d552:	b11b      	cbz	r3, 800d55c <GUI_Exec1+0x28>
 800d554:	4798      	blx	r3
 800d556:	2800      	cmp	r0, #0
 800d558:	bf18      	it	ne
 800d55a:	2401      	movne	r4, #1
 800d55c:	4620      	mov	r0, r4
 800d55e:	bd10      	pop	{r4, pc}
 800d560:	20023058 	.word	0x20023058
 800d564:	20023070 	.word	0x20023070

0800d568 <GUI_Exec>:
 800d568:	b510      	push	{r4, lr}
 800d56a:	2400      	movs	r4, #0
 800d56c:	f7ff ffe2 	bl	800d534 <GUI_Exec1>
 800d570:	b108      	cbz	r0, 800d576 <GUI_Exec+0xe>
 800d572:	2401      	movs	r4, #1
 800d574:	e7fa      	b.n	800d56c <GUI_Exec+0x4>
 800d576:	4620      	mov	r0, r4
 800d578:	bd10      	pop	{r4, pc}
	...

0800d57c <_Color2Index>:
 800d57c:	b508      	push	{r3, lr}
 800d57e:	4b03      	ldr	r3, [pc, #12]	; (800d58c <_Color2Index+0x10>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4798      	blx	r3
 800d58a:	bd08      	pop	{r3, pc}
 800d58c:	20022b84 	.word	0x20022b84

0800d590 <_Index2Color>:
 800d590:	b508      	push	{r3, lr}
 800d592:	4b03      	ldr	r3, [pc, #12]	; (800d5a0 <_Index2Color+0x10>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	4798      	blx	r3
 800d59e:	bd08      	pop	{r3, pc}
 800d5a0:	20022b84 	.word	0x20022b84

0800d5a4 <_GetIndexMask>:
 800d5a4:	b508      	push	{r3, lr}
 800d5a6:	4b03      	ldr	r3, [pc, #12]	; (800d5b4 <_GetIndexMask+0x10>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	4798      	blx	r3
 800d5b2:	bd08      	pop	{r3, pc}
 800d5b4:	20022b84 	.word	0x20022b84

0800d5b8 <_SwapIndices>:
 800d5b8:	4b04      	ldr	r3, [pc, #16]	; (800d5cc <_SwapIndices+0x14>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c0:	6810      	ldr	r0, [r2, #0]
 800d5c2:	6819      	ldr	r1, [r3, #0]
 800d5c4:	6011      	str	r1, [r2, #0]
 800d5c6:	6018      	str	r0, [r3, #0]
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	20000038 	.word	0x20000038

0800d5d0 <_SwapColors>:
 800d5d0:	4a03      	ldr	r2, [pc, #12]	; (800d5e0 <_SwapColors+0x10>)
 800d5d2:	4b04      	ldr	r3, [pc, #16]	; (800d5e4 <_SwapColors+0x14>)
 800d5d4:	6810      	ldr	r0, [r2, #0]
 800d5d6:	6819      	ldr	r1, [r3, #0]
 800d5d8:	6011      	str	r1, [r2, #0]
 800d5da:	6018      	str	r0, [r3, #0]
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	20022b98 	.word	0x20022b98
 800d5e4:	20000034 	.word	0x20000034

0800d5e8 <_DrawHLine>:
 800d5e8:	6800      	ldr	r0, [r0, #0]
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	b110      	cbz	r0, 800d5f4 <_DrawHLine+0xc>
 800d5ee:	68c4      	ldr	r4, [r0, #12]
 800d5f0:	68a4      	ldr	r4, [r4, #8]
 800d5f2:	47a0      	blx	r4
 800d5f4:	bd10      	pop	{r4, pc}

0800d5f6 <_DrawVLine>:
 800d5f6:	6800      	ldr	r0, [r0, #0]
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	b110      	cbz	r0, 800d602 <_DrawVLine+0xc>
 800d5fc:	68c4      	ldr	r4, [r0, #12]
 800d5fe:	68e4      	ldr	r4, [r4, #12]
 800d600:	47a0      	blx	r4
 800d602:	bd10      	pop	{r4, pc}

0800d604 <_FillRect>:
 800d604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d606:	6800      	ldr	r0, [r0, #0]
 800d608:	b120      	cbz	r0, 800d614 <_FillRect+0x10>
 800d60a:	68c5      	ldr	r5, [r0, #12]
 800d60c:	9c06      	ldr	r4, [sp, #24]
 800d60e:	9400      	str	r4, [sp, #0]
 800d610:	692c      	ldr	r4, [r5, #16]
 800d612:	47a0      	blx	r4
 800d614:	b003      	add	sp, #12
 800d616:	bd30      	pop	{r4, r5, pc}

0800d618 <_GetPixelIndex>:
 800d618:	6800      	ldr	r0, [r0, #0]
 800d61a:	b508      	push	{r3, lr}
 800d61c:	b110      	cbz	r0, 800d624 <_GetPixelIndex+0xc>
 800d61e:	68c3      	ldr	r3, [r0, #12]
 800d620:	695b      	ldr	r3, [r3, #20]
 800d622:	4798      	blx	r3
 800d624:	bd08      	pop	{r3, pc}

0800d626 <_SetPixelIndex>:
 800d626:	6800      	ldr	r0, [r0, #0]
 800d628:	b510      	push	{r4, lr}
 800d62a:	b110      	cbz	r0, 800d632 <_SetPixelIndex+0xc>
 800d62c:	68c4      	ldr	r4, [r0, #12]
 800d62e:	69a4      	ldr	r4, [r4, #24]
 800d630:	47a0      	blx	r4
 800d632:	bd10      	pop	{r4, pc}

0800d634 <_XorPixel>:
 800d634:	6800      	ldr	r0, [r0, #0]
 800d636:	b508      	push	{r3, lr}
 800d638:	b110      	cbz	r0, 800d640 <_XorPixel+0xc>
 800d63a:	68c3      	ldr	r3, [r0, #12]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	4798      	blx	r3
 800d640:	bd08      	pop	{r3, pc}

0800d642 <_GetDevData>:
 800d642:	6800      	ldr	r0, [r0, #0]
 800d644:	b508      	push	{r3, lr}
 800d646:	b110      	cbz	r0, 800d64e <_GetDevData+0xc>
 800d648:	68c3      	ldr	r3, [r0, #12]
 800d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64c:	4798      	blx	r3
 800d64e:	bd08      	pop	{r3, pc}

0800d650 <_SetOrg>:
 800d650:	6800      	ldr	r0, [r0, #0]
 800d652:	b508      	push	{r3, lr}
 800d654:	b110      	cbz	r0, 800d65c <_SetOrg+0xc>
 800d656:	68c3      	ldr	r3, [r0, #12]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	4798      	blx	r3
 800d65c:	bd08      	pop	{r3, pc}

0800d65e <_GetDevFunc>:
 800d65e:	b508      	push	{r3, lr}
 800d660:	6803      	ldr	r3, [r0, #0]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	6003      	str	r3, [r0, #0]
 800d666:	b11b      	cbz	r3, 800d670 <_GetDevFunc+0x12>
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	4798      	blx	r3
 800d66e:	bd08      	pop	{r3, pc}
 800d670:	4618      	mov	r0, r3
 800d672:	bd08      	pop	{r3, pc}

0800d674 <_GetDevProp>:
 800d674:	6800      	ldr	r0, [r0, #0]
 800d676:	b508      	push	{r3, lr}
 800d678:	b110      	cbz	r0, 800d680 <_GetDevProp+0xc>
 800d67a:	68c3      	ldr	r3, [r0, #12]
 800d67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d67e:	4798      	blx	r3
 800d680:	bd08      	pop	{r3, pc}

0800d682 <_GetRect>:
 800d682:	6800      	ldr	r0, [r0, #0]
 800d684:	b508      	push	{r3, lr}
 800d686:	b110      	cbz	r0, 800d68e <_GetRect+0xc>
 800d688:	68c3      	ldr	r3, [r0, #12]
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	4798      	blx	r3
 800d68e:	bd08      	pop	{r3, pc}

0800d690 <_ManageAlpha>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4b16      	ldr	r3, [pc, #88]	; (800d6ec <_ManageAlpha+0x5c>)
 800d694:	4d16      	ldr	r5, [pc, #88]	; (800d6f0 <_ManageAlpha+0x60>)
 800d696:	78dc      	ldrb	r4, [r3, #3]
 800d698:	4b16      	ldr	r3, [pc, #88]	; (800d6f4 <_ManageAlpha+0x64>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	b90c      	cbnz	r4, 800d6a2 <_ManageAlpha+0x12>
 800d69e:	0e1b      	lsrs	r3, r3, #24
 800d6a0:	d009      	beq.n	800d6b6 <_ManageAlpha+0x26>
 800d6a2:	682b      	ldr	r3, [r5, #0]
 800d6a4:	b97b      	cbnz	r3, 800d6c6 <_ManageAlpha+0x36>
 800d6a6:	4b14      	ldr	r3, [pc, #80]	; (800d6f8 <_ManageAlpha+0x68>)
 800d6a8:	6818      	ldr	r0, [r3, #0]
 800d6aa:	f000 fd71 	bl	800e190 <GUI_DEVICE_Link>
 800d6ae:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <_ManageAlpha+0x60>)
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	601a      	str	r2, [r3, #0]
 800d6b4:	e007      	b.n	800d6c6 <_ManageAlpha+0x36>
 800d6b6:	682b      	ldr	r3, [r5, #0]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d104      	bne.n	800d6c6 <_ManageAlpha+0x36>
 800d6bc:	4b0e      	ldr	r3, [pc, #56]	; (800d6f8 <_ManageAlpha+0x68>)
 800d6be:	6818      	ldr	r0, [r3, #0]
 800d6c0:	f000 fd50 	bl	800e164 <GUI_DEVICE_Unlink>
 800d6c4:	602c      	str	r4, [r5, #0]
 800d6c6:	4b0d      	ldr	r3, [pc, #52]	; (800d6fc <_ManageAlpha+0x6c>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	b133      	cbz	r3, 800d6da <_ManageAlpha+0x4a>
 800d6cc:	f1c4 02ff 	rsb	r2, r4, #255	; 0xff
 800d6d0:	4353      	muls	r3, r2
 800d6d2:	22ff      	movs	r2, #255	; 0xff
 800d6d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6d8:	441c      	add	r4, r3
 800d6da:	4d09      	ldr	r5, [pc, #36]	; (800d700 <_ManageAlpha+0x70>)
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	429c      	cmp	r4, r3
 800d6e0:	d003      	beq.n	800d6ea <_ManageAlpha+0x5a>
 800d6e2:	b2e0      	uxtb	r0, r4
 800d6e4:	f7fe feea 	bl	800c4bc <GUI_SetAlpha>
 800d6e8:	602c      	str	r4, [r5, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	20022b98 	.word	0x20022b98
 800d6f0:	20022b7c 	.word	0x20022b7c
 800d6f4:	20000034 	.word	0x20000034
 800d6f8:	20022b84 	.word	0x20022b84
 800d6fc:	20022b78 	.word	0x20022b78
 800d700:	20022b90 	.word	0x20022b90

0800d704 <_SetDrawMode>:
 800d704:	b510      	push	{r4, lr}
 800d706:	4b08      	ldr	r3, [pc, #32]	; (800d728 <_SetDrawMode+0x24>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	7c1b      	ldrb	r3, [r3, #16]
 800d70c:	4043      	eors	r3, r0
 800d70e:	075b      	lsls	r3, r3, #29
 800d710:	4604      	mov	r4, r0
 800d712:	d501      	bpl.n	800d718 <_SetDrawMode+0x14>
 800d714:	f7ff ff5c 	bl	800d5d0 <_SwapColors>
 800d718:	f7ff ffba 	bl	800d690 <_ManageAlpha>
 800d71c:	4b03      	ldr	r3, [pc, #12]	; (800d72c <_SetDrawMode+0x28>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4620      	mov	r0, r4
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	4798      	blx	r3
 800d726:	bd10      	pop	{r4, pc}
 800d728:	20000038 	.word	0x20000038
 800d72c:	20022b74 	.word	0x20022b74

0800d730 <_SetBkColor>:
 800d730:	b510      	push	{r4, lr}
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <_SetBkColor+0x28>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	7c1b      	ldrb	r3, [r3, #16]
 800d738:	075b      	lsls	r3, r3, #29
 800d73a:	bf4c      	ite	mi
 800d73c:	4b07      	ldrmi	r3, [pc, #28]	; (800d75c <_SetBkColor+0x2c>)
 800d73e:	4b08      	ldrpl	r3, [pc, #32]	; (800d760 <_SetBkColor+0x30>)
 800d740:	6018      	str	r0, [r3, #0]
 800d742:	4604      	mov	r4, r0
 800d744:	f7ff ffa4 	bl	800d690 <_ManageAlpha>
 800d748:	4b06      	ldr	r3, [pc, #24]	; (800d764 <_SetBkColor+0x34>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	4798      	blx	r3
 800d754:	bd10      	pop	{r4, pc}
 800d756:	bf00      	nop
 800d758:	20000038 	.word	0x20000038
 800d75c:	20022b98 	.word	0x20022b98
 800d760:	20000034 	.word	0x20000034
 800d764:	20022b74 	.word	0x20022b74

0800d768 <_SetColor>:
 800d768:	b510      	push	{r4, lr}
 800d76a:	4b09      	ldr	r3, [pc, #36]	; (800d790 <_SetColor+0x28>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	7c1b      	ldrb	r3, [r3, #16]
 800d770:	075b      	lsls	r3, r3, #29
 800d772:	bf4c      	ite	mi
 800d774:	4b07      	ldrmi	r3, [pc, #28]	; (800d794 <_SetColor+0x2c>)
 800d776:	4b08      	ldrpl	r3, [pc, #32]	; (800d798 <_SetColor+0x30>)
 800d778:	6018      	str	r0, [r3, #0]
 800d77a:	4604      	mov	r4, r0
 800d77c:	f7ff ff88 	bl	800d690 <_ManageAlpha>
 800d780:	4b06      	ldr	r3, [pc, #24]	; (800d79c <_SetColor+0x34>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4798      	blx	r3
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	bf00      	nop
 800d790:	20000038 	.word	0x20000038
 800d794:	20000034 	.word	0x20000034
 800d798:	20022b98 	.word	0x20022b98
 800d79c:	20022b74 	.word	0x20022b74

0800d7a0 <_DrawBitmap>:
 800d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a4:	b087      	sub	sp, #28
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800d7ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800d7ae:	f1bc 0f01 	cmp.w	ip, #1
 800d7b2:	4689      	mov	r9, r1
 800d7b4:	4690      	mov	r8, r2
 800d7b6:	461f      	mov	r7, r3
 800d7b8:	d163      	bne.n	800d882 <_DrawBitmap+0xe2>
 800d7ba:	483c      	ldr	r0, [pc, #240]	; (800d8ac <_DrawBitmap+0x10c>)
 800d7bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d7be:	f8d0 a000 	ldr.w	sl, [r0]
 800d7c2:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800d7c6:	4285      	cmp	r5, r0
 800d7c8:	d15b      	bne.n	800d882 <_DrawBitmap+0xe2>
 800d7ca:	f89a 0010 	ldrb.w	r0, [sl, #16]
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d157      	bne.n	800d882 <_DrawBitmap+0xe2>
 800d7d2:	2002      	movs	r0, #2
 800d7d4:	f88a 0010 	strb.w	r0, [sl, #16]
 800d7d8:	f8d6 a000 	ldr.w	sl, [r6]
 800d7dc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d7de:	f8da e00c 	ldr.w	lr, [sl, #12]
 800d7e2:	9402      	str	r4, [sp, #8]
 800d7e4:	e88d 1020 	stmia.w	sp, {r5, ip}
 800d7e8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d7ea:	9503      	str	r5, [sp, #12]
 800d7ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d7ee:	9504      	str	r5, [sp, #16]
 800d7f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d7f2:	9505      	str	r5, [sp, #20]
 800d7f4:	f8de c004 	ldr.w	ip, [lr, #4]
 800d7f8:	4650      	mov	r0, sl
 800d7fa:	47e0      	blx	ip
 800d7fc:	f7ff fee8 	bl	800d5d0 <_SwapColors>
 800d800:	f7ff feda 	bl	800d5b8 <_SwapIndices>
 800d804:	f7ff ff44 	bl	800d690 <_ManageAlpha>
 800d808:	4b29      	ldr	r3, [pc, #164]	; (800d8b0 <_DrawBitmap+0x110>)
 800d80a:	f8d6 b000 	ldr.w	fp, [r6]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	b953      	cbnz	r3, 800d828 <_DrawBitmap+0x88>
 800d812:	f7ff fedd 	bl	800d5d0 <_SwapColors>
 800d816:	f7ff fecf 	bl	800d5b8 <_SwapIndices>
 800d81a:	f7ff ff39 	bl	800d690 <_ManageAlpha>
 800d81e:	4b23      	ldr	r3, [pc, #140]	; (800d8ac <_DrawBitmap+0x10c>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2200      	movs	r2, #0
 800d824:	741a      	strb	r2, [r3, #16]
 800d826:	e03e      	b.n	800d8a6 <_DrawBitmap+0x106>
 800d828:	4b22      	ldr	r3, [pc, #136]	; (800d8b4 <_DrawBitmap+0x114>)
 800d82a:	681e      	ldr	r6, [r3, #0]
 800d82c:	42b4      	cmp	r4, r6
 800d82e:	bfcc      	ite	gt
 800d830:	00f7      	lslgt	r7, r6, #3
 800d832:	4626      	movle	r6, r4
 800d834:	4642      	mov	r2, r8
 800d836:	4b1e      	ldr	r3, [pc, #120]	; (800d8b0 <_DrawBitmap+0x110>)
 800d838:	6819      	ldr	r1, [r3, #0]
 800d83a:	2300      	movs	r3, #0
 800d83c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d83e:	5ce8      	ldrb	r0, [r5, r3]
 800d840:	43c0      	mvns	r0, r0
 800d842:	54c8      	strb	r0, [r1, r3]
 800d844:	3301      	adds	r3, #1
 800d846:	42b3      	cmp	r3, r6
 800d848:	d1f8      	bne.n	800d83c <_DrawBitmap+0x9c>
 800d84a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d84c:	f8db 000c 	ldr.w	r0, [fp, #12]
 800d850:	9504      	str	r5, [sp, #16]
 800d852:	2301      	movs	r3, #1
 800d854:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	9103      	str	r1, [sp, #12]
 800d85c:	9505      	str	r5, [sp, #20]
 800d85e:	9402      	str	r4, [sp, #8]
 800d860:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800d864:	463b      	mov	r3, r7
 800d866:	4658      	mov	r0, fp
 800d868:	4649      	mov	r1, r9
 800d86a:	f102 0a01 	add.w	sl, r2, #1
 800d86e:	47e0      	blx	ip
 800d870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d872:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d874:	4443      	add	r3, r8
 800d876:	4425      	add	r5, r4
 800d878:	4553      	cmp	r3, sl
 800d87a:	9513      	str	r5, [sp, #76]	; 0x4c
 800d87c:	d0c9      	beq.n	800d812 <_DrawBitmap+0x72>
 800d87e:	4652      	mov	r2, sl
 800d880:	e7d9      	b.n	800d836 <_DrawBitmap+0x96>
 800d882:	6830      	ldr	r0, [r6, #0]
 800d884:	b178      	cbz	r0, 800d8a6 <_DrawBitmap+0x106>
 800d886:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d888:	68c3      	ldr	r3, [r0, #12]
 800d88a:	9402      	str	r4, [sp, #8]
 800d88c:	e88d 1020 	stmia.w	sp, {r5, ip}
 800d890:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d892:	9503      	str	r5, [sp, #12]
 800d894:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d896:	9504      	str	r5, [sp, #16]
 800d898:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d89a:	9505      	str	r5, [sp, #20]
 800d89c:	685c      	ldr	r4, [r3, #4]
 800d89e:	4649      	mov	r1, r9
 800d8a0:	4642      	mov	r2, r8
 800d8a2:	463b      	mov	r3, r7
 800d8a4:	47a0      	blx	r4
 800d8a6:	b007      	add	sp, #28
 800d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ac:	20000038 	.word	0x20000038
 800d8b0:	20022b80 	.word	0x20022b80
 800d8b4:	20022b94 	.word	0x20022b94

0800d8b8 <_OnExit>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4c06      	ldr	r4, [pc, #24]	; (800d8d4 <_OnExit+0x1c>)
 800d8bc:	2500      	movs	r5, #0
 800d8be:	6820      	ldr	r0, [r4, #0]
 800d8c0:	f001 f8e2 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800d8c4:	6025      	str	r5, [r4, #0]
 800d8c6:	4c04      	ldr	r4, [pc, #16]	; (800d8d8 <_OnExit+0x20>)
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	f001 f8dd 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800d8ce:	6025      	str	r5, [r4, #0]
 800d8d0:	bd38      	pop	{r3, r4, r5, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20022b84 	.word	0x20022b84
 800d8d8:	20022b80 	.word	0x20022b80

0800d8dc <_Color2IndexBulk>:
 800d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800d95c <_Color2IndexBulk+0x80>
 800d8e4:	f8d8 5000 	ldr.w	r5, [r8]
 800d8e8:	682d      	ldr	r5, [r5, #0]
 800d8ea:	692d      	ldr	r5, [r5, #16]
 800d8ec:	692d      	ldr	r5, [r5, #16]
 800d8ee:	4607      	mov	r7, r0
 800d8f0:	460e      	mov	r6, r1
 800d8f2:	4614      	mov	r4, r2
 800d8f4:	b115      	cbz	r5, 800d8fc <_Color2IndexBulk+0x20>
 800d8f6:	47a8      	blx	r5
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d011      	beq.n	800d924 <_Color2IndexBulk+0x48>
 800d900:	2b04      	cmp	r3, #4
 800d902:	d01d      	beq.n	800d940 <_Color2IndexBulk+0x64>
 800d904:	2b01      	cmp	r3, #1
 800d906:	d127      	bne.n	800d958 <_Color2IndexBulk+0x7c>
 800d908:	f8d8 3000 	ldr.w	r3, [r8]
 800d90c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4798      	blx	r3
 800d918:	5570      	strb	r0, [r6, r5]
 800d91a:	3501      	adds	r5, #1
 800d91c:	42ac      	cmp	r4, r5
 800d91e:	d1f3      	bne.n	800d908 <_Color2IndexBulk+0x2c>
 800d920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d924:	f8d8 3000 	ldr.w	r3, [r8]
 800d928:	f857 0b04 	ldr.w	r0, [r7], #4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	691b      	ldr	r3, [r3, #16]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4798      	blx	r3
 800d934:	3c01      	subs	r4, #1
 800d936:	f826 0b02 	strh.w	r0, [r6], #2
 800d93a:	d1f3      	bne.n	800d924 <_Color2IndexBulk+0x48>
 800d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d940:	f8d8 3000 	ldr.w	r3, [r8]
 800d944:	5978      	ldr	r0, [r7, r5]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4798      	blx	r3
 800d94e:	3c01      	subs	r4, #1
 800d950:	5170      	str	r0, [r6, r5]
 800d952:	f105 0504 	add.w	r5, r5, #4
 800d956:	d1f3      	bne.n	800d940 <_Color2IndexBulk+0x64>
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d95c:	20022b84 	.word	0x20022b84

0800d960 <_Index2ColorBulk>:
 800d960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d964:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800d9e0 <_Index2ColorBulk+0x80>
 800d968:	f8d8 5000 	ldr.w	r5, [r8]
 800d96c:	682d      	ldr	r5, [r5, #0]
 800d96e:	692d      	ldr	r5, [r5, #16]
 800d970:	696d      	ldr	r5, [r5, #20]
 800d972:	4607      	mov	r7, r0
 800d974:	460e      	mov	r6, r1
 800d976:	4614      	mov	r4, r2
 800d978:	b115      	cbz	r5, 800d980 <_Index2ColorBulk+0x20>
 800d97a:	47a8      	blx	r5
 800d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d980:	2b02      	cmp	r3, #2
 800d982:	d011      	beq.n	800d9a8 <_Index2ColorBulk+0x48>
 800d984:	2b04      	cmp	r3, #4
 800d986:	d01d      	beq.n	800d9c4 <_Index2ColorBulk+0x64>
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d127      	bne.n	800d9dc <_Index2ColorBulk+0x7c>
 800d98c:	f8d8 3000 	ldr.w	r3, [r8]
 800d990:	5d78      	ldrb	r0, [r7, r5]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4798      	blx	r3
 800d99a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800d99e:	3501      	adds	r5, #1
 800d9a0:	42ac      	cmp	r4, r5
 800d9a2:	d1f3      	bne.n	800d98c <_Index2ColorBulk+0x2c>
 800d9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a8:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ac:	f837 0b02 	ldrh.w	r0, [r7], #2
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	4798      	blx	r3
 800d9b8:	3c01      	subs	r4, #1
 800d9ba:	f846 0b04 	str.w	r0, [r6], #4
 800d9be:	d1f3      	bne.n	800d9a8 <_Index2ColorBulk+0x48>
 800d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c4:	f8d8 3000 	ldr.w	r3, [r8]
 800d9c8:	5978      	ldr	r0, [r7, r5]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4798      	blx	r3
 800d9d2:	3c01      	subs	r4, #1
 800d9d4:	5170      	str	r0, [r6, r5]
 800d9d6:	f105 0504 	add.w	r5, r5, #4
 800d9da:	d1f3      	bne.n	800d9c4 <_Index2ColorBulk+0x64>
 800d9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e0:	20022b84 	.word	0x20022b84

0800d9e4 <GUI_EnableAlpha>:
 800d9e4:	b570      	push	{r4, r5, r6, lr}
 800d9e6:	4d19      	ldr	r5, [pc, #100]	; (800da4c <GUI_EnableAlpha+0x68>)
 800d9e8:	682e      	ldr	r6, [r5, #0]
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	b9de      	cbnz	r6, 800da26 <GUI_EnableAlpha+0x42>
 800d9ee:	4818      	ldr	r0, [pc, #96]	; (800da50 <GUI_EnableAlpha+0x6c>)
 800d9f0:	4b18      	ldr	r3, [pc, #96]	; (800da54 <GUI_EnableAlpha+0x70>)
 800d9f2:	6003      	str	r3, [r0, #0]
 800d9f4:	f000 fcbe 	bl	800e374 <GUI__RegisterExit>
 800d9f8:	2001      	movs	r0, #1
 800d9fa:	f7fe fd5f 	bl	800c4bc <GUI_SetAlpha>
 800d9fe:	b2c0      	uxtb	r0, r0
 800da00:	f7fe fd5c 	bl	800c4bc <GUI_SetAlpha>
 800da04:	4914      	ldr	r1, [pc, #80]	; (800da58 <GUI_EnableAlpha+0x74>)
 800da06:	4815      	ldr	r0, [pc, #84]	; (800da5c <GUI_EnableAlpha+0x78>)
 800da08:	4632      	mov	r2, r6
 800da0a:	4633      	mov	r3, r6
 800da0c:	f000 fb84 	bl	800e118 <GUI_DEVICE_Create>
 800da10:	6028      	str	r0, [r5, #0]
 800da12:	f7fd fc85 	bl	800b320 <LCD_GetVXSizeMax>
 800da16:	4b12      	ldr	r3, [pc, #72]	; (800da60 <GUI_EnableAlpha+0x7c>)
 800da18:	3007      	adds	r0, #7
 800da1a:	08c0      	lsrs	r0, r0, #3
 800da1c:	6018      	str	r0, [r3, #0]
 800da1e:	f001 f993 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800da22:	4b10      	ldr	r3, [pc, #64]	; (800da64 <GUI_EnableAlpha+0x80>)
 800da24:	6018      	str	r0, [r3, #0]
 800da26:	4b10      	ldr	r3, [pc, #64]	; (800da68 <GUI_EnableAlpha+0x84>)
 800da28:	b13c      	cbz	r4, 800da3a <GUI_EnableAlpha+0x56>
 800da2a:	6818      	ldr	r0, [r3, #0]
 800da2c:	b950      	cbnz	r0, 800da44 <GUI_EnableAlpha+0x60>
 800da2e:	4a0f      	ldr	r2, [pc, #60]	; (800da6c <GUI_EnableAlpha+0x88>)
 800da30:	6811      	ldr	r1, [r2, #0]
 800da32:	6019      	str	r1, [r3, #0]
 800da34:	4b0e      	ldr	r3, [pc, #56]	; (800da70 <GUI_EnableAlpha+0x8c>)
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	bd70      	pop	{r4, r5, r6, pc}
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	b122      	cbz	r2, 800da48 <GUI_EnableAlpha+0x64>
 800da3e:	490b      	ldr	r1, [pc, #44]	; (800da6c <GUI_EnableAlpha+0x88>)
 800da40:	601c      	str	r4, [r3, #0]
 800da42:	600a      	str	r2, [r1, #0]
 800da44:	2001      	movs	r0, #1
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	4620      	mov	r0, r4
 800da4a:	bd70      	pop	{r4, r5, r6, pc}
 800da4c:	20022b84 	.word	0x20022b84
 800da50:	20022b88 	.word	0x20022b88
 800da54:	0800d8b9 	.word	0x0800d8b9
 800da58:	08013f7c 	.word	0x08013f7c
 800da5c:	08013f94 	.word	0x08013f94
 800da60:	20022b94 	.word	0x20022b94
 800da64:	20022b80 	.word	0x20022b80
 800da68:	20022b74 	.word	0x20022b74
 800da6c:	20000018 	.word	0x20000018
 800da70:	08013f70 	.word	0x08013f70

0800da74 <_SetLineColor>:
 800da74:	4b1e      	ldr	r3, [pc, #120]	; (800daf0 <_SetLineColor+0x7c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	7e9b      	ldrb	r3, [r3, #26]
 800da7a:	3b01      	subs	r3, #1
 800da7c:	2b03      	cmp	r3, #3
 800da7e:	d832      	bhi.n	800dae6 <_SetLineColor+0x72>
 800da80:	e8df f003 	tbb	[pc, r3]
 800da84:	221a0d02 	.word	0x221a0d02
 800da88:	4b1a      	ldr	r3, [pc, #104]	; (800daf4 <_SetLineColor+0x80>)
 800da8a:	3006      	adds	r0, #6
 800da8c:	4003      	ands	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	da03      	bge.n	800da9a <_SetLineColor+0x26>
 800da92:	3b01      	subs	r3, #1
 800da94:	f063 030f 	orn	r3, r3, #15
 800da98:	3301      	adds	r3, #1
 800da9a:	2b0b      	cmp	r3, #11
 800da9c:	e008      	b.n	800dab0 <_SetLineColor+0x3c>
 800da9e:	4b16      	ldr	r3, [pc, #88]	; (800daf8 <_SetLineColor+0x84>)
 800daa0:	4003      	ands	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	da03      	bge.n	800daae <_SetLineColor+0x3a>
 800daa6:	3b01      	subs	r3, #1
 800daa8:	f063 0303 	orn	r3, r3, #3
 800daac:	3301      	adds	r3, #1
 800daae:	2b01      	cmp	r3, #1
 800dab0:	bfcc      	ite	gt
 800dab2:	2000      	movgt	r0, #0
 800dab4:	2001      	movle	r0, #1
 800dab6:	4770      	bx	lr
 800dab8:	2314      	movs	r3, #20
 800daba:	fb90 f2f3 	sdiv	r2, r0, r3
 800dabe:	fb03 0012 	mls	r0, r3, r2, r0
 800dac2:	280b      	cmp	r0, #11
 800dac4:	dc09      	bgt.n	800dada <_SetLineColor+0x66>
 800dac6:	e010      	b.n	800daea <_SetLineColor+0x76>
 800dac8:	2318      	movs	r3, #24
 800daca:	fb90 f2f3 	sdiv	r2, r0, r3
 800dace:	fb03 0012 	mls	r0, r3, r2, r0
 800dad2:	280b      	cmp	r0, #11
 800dad4:	dd09      	ble.n	800daea <_SetLineColor+0x76>
 800dad6:	f020 0004 	bic.w	r0, r0, #4
 800dada:	3810      	subs	r0, #16
 800dadc:	2801      	cmp	r0, #1
 800dade:	bf8c      	ite	hi
 800dae0:	2000      	movhi	r0, #0
 800dae2:	2001      	movls	r0, #1
 800dae4:	4770      	bx	lr
 800dae6:	2000      	movs	r0, #0
 800dae8:	4770      	bx	lr
 800daea:	2001      	movs	r0, #1
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	20000038 	.word	0x20000038
 800daf4:	8000000f 	.word	0x8000000f
 800daf8:	80000003 	.word	0x80000003

0800dafc <GUI_sin>:
 800dafc:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800db00:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800db04:	bfc6      	itte	gt
 800db06:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 800db0a:	2101      	movgt	r1, #1
 800db0c:	2100      	movle	r1, #0
 800db0e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800db12:	bfc8      	it	gt
 800db14:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 800db18:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800db1c:	b510      	push	{r4, lr}
 800db1e:	1182      	asrs	r2, r0, #6
 800db20:	4c0b      	ldr	r4, [pc, #44]	; (800db50 <GUI_sin+0x54>)
 800db22:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800db26:	b29b      	uxth	r3, r3
 800db28:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 800db2c:	2b40      	cmp	r3, #64	; 0x40
 800db2e:	fb00 f003 	mul.w	r0, r0, r3
 800db32:	d008      	beq.n	800db46 <GUI_sin+0x4a>
 800db34:	2a10      	cmp	r2, #16
 800db36:	d006      	beq.n	800db46 <GUI_sin+0x4a>
 800db38:	3201      	adds	r2, #1
 800db3a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800db3e:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 800db42:	fb03 0002 	mla	r0, r3, r2, r0
 800db46:	3020      	adds	r0, #32
 800db48:	0980      	lsrs	r0, r0, #6
 800db4a:	b101      	cbz	r1, 800db4e <GUI_sin+0x52>
 800db4c:	4240      	negs	r0, r0
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	08013fc8 	.word	0x08013fc8

0800db54 <GUI_cos>:
 800db54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800db58:	f7ff bfd0 	b.w	800dafc <GUI_sin>

0800db5c <GL_DrawLine1Ex>:
 800db5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800db64:	1a17      	subs	r7, r2, r0
 800db66:	1a5c      	subs	r4, r3, r1
 800db68:	ea54 0c07 	orrs.w	ip, r4, r7
 800db6c:	4605      	mov	r5, r0
 800db6e:	460e      	mov	r6, r1
 800db70:	f8d8 b000 	ldr.w	fp, [r8]
 800db74:	d104      	bne.n	800db80 <GL_DrawLine1Ex+0x24>
 800db76:	b003      	add	sp, #12
 800db78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	f004 b9a0 	b.w	8011ec0 <GL_DrawPoint>
 800db80:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 800db84:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 800db88:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800db8c:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800db90:	4288      	cmp	r0, r1
 800db92:	db04      	blt.n	800db9e <GL_DrawLine1Ex+0x42>
 800db94:	4621      	mov	r1, r4
 800db96:	463c      	mov	r4, r7
 800db98:	460f      	mov	r7, r1
 800db9a:	2100      	movs	r1, #0
 800db9c:	e006      	b.n	800dbac <GL_DrawLine1Ex+0x50>
 800db9e:	4611      	mov	r1, r2
 800dba0:	461a      	mov	r2, r3
 800dba2:	460b      	mov	r3, r1
 800dba4:	4629      	mov	r1, r5
 800dba6:	4635      	mov	r5, r6
 800dba8:	460e      	mov	r6, r1
 800dbaa:	2101      	movs	r1, #1
 800dbac:	9100      	str	r1, [sp, #0]
 800dbae:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800dbb2:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800dbb6:	428c      	cmp	r4, r1
 800dbb8:	d008      	beq.n	800dbcc <GL_DrawLine1Ex+0x70>
 800dbba:	461e      	mov	r6, r3
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	4264      	negs	r4, r4
 800dbc0:	4615      	mov	r5, r2
 800dbc2:	427f      	negs	r7, r7
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dbca:	e001      	b.n	800dbd0 <GL_DrawLine1Ex+0x74>
 800dbcc:	f04f 0a01 	mov.w	sl, #1
 800dbd0:	2f00      	cmp	r7, #0
 800dbd2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800dd1c <GL_DrawLine1Ex+0x1c0>
 800dbd6:	d13e      	bne.n	800dc56 <GL_DrawLine1Ex+0xfa>
 800dbd8:	9b00      	ldr	r3, [sp, #0]
 800dbda:	b1d3      	cbz	r3, 800dc12 <GL_DrawLine1Ex+0xb6>
 800dbdc:	f8d9 3000 	ldr.w	r3, [r9]
 800dbe0:	7e9b      	ldrb	r3, [r3, #26]
 800dbe2:	b98b      	cbnz	r3, 800dc08 <GL_DrawLine1Ex+0xac>
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	b003      	add	sp, #12
 800dbea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbee:	f7fd bd0d 	b.w	800b60c <LCD_DrawVLine>
 800dbf2:	f7ff ff3f 	bl	800da74 <_SetLineColor>
 800dbf6:	b930      	cbnz	r0, 800dc06 <GL_DrawLine1Ex+0xaa>
 800dbf8:	f8d9 3000 	ldr.w	r3, [r9]
 800dbfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbfe:	4630      	mov	r0, r6
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	1979      	adds	r1, r7, r5
 800dc04:	4798      	blx	r3
 800dc06:	3701      	adds	r7, #1
 800dc08:	42a7      	cmp	r7, r4
 800dc0a:	eb07 000b 	add.w	r0, r7, fp
 800dc0e:	ddf0      	ble.n	800dbf2 <GL_DrawLine1Ex+0x96>
 800dc10:	e01d      	b.n	800dc4e <GL_DrawLine1Ex+0xf2>
 800dc12:	f8d9 3000 	ldr.w	r3, [r9]
 800dc16:	7e99      	ldrb	r1, [r3, #26]
 800dc18:	b111      	cbz	r1, 800dc20 <GL_DrawLine1Ex+0xc4>
 800dc1a:	f8dd a000 	ldr.w	sl, [sp]
 800dc1e:	e012      	b.n	800dc46 <GL_DrawLine1Ex+0xea>
 800dc20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc22:	4628      	mov	r0, r5
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4631      	mov	r1, r6
 800dc28:	4798      	blx	r3
 800dc2a:	e074      	b.n	800dd16 <GL_DrawLine1Ex+0x1ba>
 800dc2c:	f7ff ff22 	bl	800da74 <_SetLineColor>
 800dc30:	b938      	cbnz	r0, 800dc42 <GL_DrawLine1Ex+0xe6>
 800dc32:	f8d9 3000 	ldr.w	r3, [r9]
 800dc36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc38:	eb0a 0005 	add.w	r0, sl, r5
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	4631      	mov	r1, r6
 800dc40:	4798      	blx	r3
 800dc42:	f10a 0a01 	add.w	sl, sl, #1
 800dc46:	45a2      	cmp	sl, r4
 800dc48:	eb0a 000b 	add.w	r0, sl, fp
 800dc4c:	ddee      	ble.n	800dc2c <GL_DrawLine1Ex+0xd0>
 800dc4e:	3801      	subs	r0, #1
 800dc50:	f8c8 0000 	str.w	r0, [r8]
 800dc54:	e05f      	b.n	800dd16 <GL_DrawLine1Ex+0x1ba>
 800dc56:	f8d9 1000 	ldr.w	r1, [r9]
 800dc5a:	f04f 0202 	mov.w	r2, #2
 800dc5e:	7e89      	ldrb	r1, [r1, #26]
 800dc60:	fb94 f2f2 	sdiv	r2, r4, r2
 800dc64:	bfb8      	it	lt
 800dc66:	4252      	neglt	r2, r2
 800dc68:	b9d9      	cbnz	r1, 800dca2 <GL_DrawLine1Ex+0x146>
 800dc6a:	4693      	mov	fp, r2
 800dc6c:	46a8      	mov	r8, r5
 800dc6e:	ebc5 0308 	rsb	r3, r5, r8
 800dc72:	42a3      	cmp	r3, r4
 800dc74:	dc4f      	bgt.n	800dd16 <GL_DrawLine1Ex+0x1ba>
 800dc76:	9b00      	ldr	r3, [sp, #0]
 800dc78:	fb9b f1f4 	sdiv	r1, fp, r4
 800dc7c:	4431      	add	r1, r6
 800dc7e:	b92b      	cbnz	r3, 800dc8c <GL_DrawLine1Ex+0x130>
 800dc80:	f8d9 3000 	ldr.w	r3, [r9]
 800dc84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc86:	4640      	mov	r0, r8
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	e005      	b.n	800dc98 <GL_DrawLine1Ex+0x13c>
 800dc8c:	f8d9 3000 	ldr.w	r3, [r9]
 800dc90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	4608      	mov	r0, r1
 800dc96:	4641      	mov	r1, r8
 800dc98:	4798      	blx	r3
 800dc9a:	f108 0801 	add.w	r8, r8, #1
 800dc9e:	44bb      	add	fp, r7
 800dca0:	e7e5      	b.n	800dc6e <GL_DrawLine1Ex+0x112>
 800dca2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800dca6:	bf04      	itt	eq
 800dca8:	eb04 010b 	addeq.w	r1, r4, fp
 800dcac:	f8c8 1000 	streq.w	r1, [r8]
 800dcb0:	9201      	str	r2, [sp, #4]
 800dcb2:	46ab      	mov	fp, r5
 800dcb4:	ebc5 010b 	rsb	r1, r5, fp
 800dcb8:	42a1      	cmp	r1, r4
 800dcba:	f8d8 0000 	ldr.w	r0, [r8]
 800dcbe:	dc1e      	bgt.n	800dcfe <GL_DrawLine1Ex+0x1a2>
 800dcc0:	4450      	add	r0, sl
 800dcc2:	f8c8 0000 	str.w	r0, [r8]
 800dcc6:	f7ff fed5 	bl	800da74 <_SetLineColor>
 800dcca:	b980      	cbnz	r0, 800dcee <GL_DrawLine1Ex+0x192>
 800dccc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800dcd0:	f8d9 0000 	ldr.w	r0, [r9]
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800dcd8:	fb9c f1f4 	sdiv	r1, ip, r4
 800dcdc:	4431      	add	r1, r6
 800dcde:	b913      	cbnz	r3, 800dce6 <GL_DrawLine1Ex+0x18a>
 800dce0:	6843      	ldr	r3, [r0, #4]
 800dce2:	4658      	mov	r0, fp
 800dce4:	e002      	b.n	800dcec <GL_DrawLine1Ex+0x190>
 800dce6:	6843      	ldr	r3, [r0, #4]
 800dce8:	4608      	mov	r0, r1
 800dcea:	4659      	mov	r1, fp
 800dcec:	4798      	blx	r3
 800dcee:	f8dd c004 	ldr.w	ip, [sp, #4]
 800dcf2:	44bc      	add	ip, r7
 800dcf4:	f10b 0b01 	add.w	fp, fp, #1
 800dcf8:	f8cd c004 	str.w	ip, [sp, #4]
 800dcfc:	e7da      	b.n	800dcb4 <GL_DrawLine1Ex+0x158>
 800dcfe:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800dd02:	bf04      	itt	eq
 800dd04:	1824      	addeq	r4, r4, r0
 800dd06:	f8c8 4000 	streq.w	r4, [r8]
 800dd0a:	f8d8 2000 	ldr.w	r2, [r8]
 800dd0e:	ebca 0302 	rsb	r3, sl, r2
 800dd12:	f8c8 3000 	str.w	r3, [r8]
 800dd16:	b003      	add	sp, #12
 800dd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd1c:	20000038 	.word	0x20000038

0800dd20 <GL_DrawLineEx>:
 800dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	4d67      	ldr	r5, [pc, #412]	; (800dec4 <GL_DrawLineEx+0x1a4>)
 800dd26:	682c      	ldr	r4, [r5, #0]
 800dd28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dd2c:	f1bb 0f01 	cmp.w	fp, #1
 800dd30:	b087      	sub	sp, #28
 800dd32:	4681      	mov	r9, r0
 800dd34:	4688      	mov	r8, r1
 800dd36:	4617      	mov	r7, r2
 800dd38:	461e      	mov	r6, r3
 800dd3a:	46aa      	mov	sl, r5
 800dd3c:	d104      	bne.n	800dd48 <GL_DrawLineEx+0x28>
 800dd3e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800dd40:	9400      	str	r4, [sp, #0]
 800dd42:	f7ff ff0b 	bl	800db5c <GL_DrawLine1Ex>
 800dd46:	e0ba      	b.n	800debe <GL_DrawLineEx+0x19e>
 800dd48:	1a84      	subs	r4, r0, r2
 800dd4a:	1acd      	subs	r5, r1, r3
 800dd4c:	ea54 0305 	orrs.w	r3, r4, r5
 800dd50:	f000 80b5 	beq.w	800debe <GL_DrawLineEx+0x19e>
 800dd54:	2c00      	cmp	r4, #0
 800dd56:	bfba      	itte	lt
 800dd58:	4264      	neglt	r4, r4
 800dd5a:	2301      	movlt	r3, #1
 800dd5c:	2300      	movge	r3, #0
 800dd5e:	2d00      	cmp	r5, #0
 800dd60:	bfbc      	itt	lt
 800dd62:	426d      	neglt	r5, r5
 800dd64:	f043 0302 	orrlt.w	r3, r3, #2
 800dd68:	42a5      	cmp	r5, r4
 800dd6a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dd6e:	dd04      	ble.n	800dd7a <GL_DrawLineEx+0x5a>
 800dd70:	4622      	mov	r2, r4
 800dd72:	f043 0304 	orr.w	r3, r3, #4
 800dd76:	462c      	mov	r4, r5
 800dd78:	4615      	mov	r5, r2
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	fb94 f2f2 	sdiv	r2, r4, r2
 800dd80:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 800dd84:	fb95 f4f4 	sdiv	r4, r5, r4
 800dd88:	11a1      	asrs	r1, r4, #6
 800dd8a:	4a4f      	ldr	r2, [pc, #316]	; (800dec8 <GL_DrawLineEx+0x1a8>)
 800dd8c:	f3c4 0483 	ubfx	r4, r4, #2, #4
 800dd90:	f1c4 0510 	rsb	r5, r4, #16
 800dd94:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 800dd98:	2d10      	cmp	r5, #16
 800dd9a:	fb05 f000 	mul.w	r0, r5, r0
 800dd9e:	d004      	beq.n	800ddaa <GL_DrawLineEx+0x8a>
 800dda0:	3101      	adds	r1, #1
 800dda2:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800dda6:	fb04 0002 	mla	r0, r4, r2, r0
 800ddaa:	2210      	movs	r2, #16
 800ddac:	3008      	adds	r0, #8
 800ddae:	fb90 f0f2 	sdiv	r0, r0, r2
 800ddb2:	0759      	lsls	r1, r3, #29
 800ddb4:	bf48      	it	mi
 800ddb6:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 800ddba:	07da      	lsls	r2, r3, #31
 800ddbc:	bf48      	it	mi
 800ddbe:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 800ddc2:	079b      	lsls	r3, r3, #30
 800ddc4:	bf48      	it	mi
 800ddc6:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 800ddca:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f7ff fec0 	bl	800db54 <GUI_cos>
 800ddd4:	fb00 f40b 	mul.w	r4, r0, fp
 800ddd8:	4628      	mov	r0, r5
 800ddda:	f7ff fe8f 	bl	800dafc <GUI_sin>
 800ddde:	2c00      	cmp	r4, #0
 800dde0:	fb00 f00b 	mul.w	r0, r0, fp
 800dde4:	da04      	bge.n	800ddf0 <GL_DrawLineEx+0xd0>
 800dde6:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800ddea:	129b      	asrs	r3, r3, #10
 800ddec:	425b      	negs	r3, r3
 800ddee:	e002      	b.n	800ddf6 <GL_DrawLineEx+0xd6>
 800ddf0:	f504 7300 	add.w	r3, r4, #512	; 0x200
 800ddf4:	129b      	asrs	r3, r3, #10
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	da06      	bge.n	800de08 <GL_DrawLineEx+0xe8>
 800ddfa:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 800ddfe:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800de02:	f1cb 0b00 	rsb	fp, fp, #0
 800de06:	e003      	b.n	800de10 <GL_DrawLineEx+0xf0>
 800de08:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 800de0c:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800de10:	2b00      	cmp	r3, #0
 800de12:	dd03      	ble.n	800de1c <GL_DrawLineEx+0xfc>
 800de14:	1c58      	adds	r0, r3, #1
 800de16:	1040      	asrs	r0, r0, #1
 800de18:	105b      	asrs	r3, r3, #1
 800de1a:	e005      	b.n	800de28 <GL_DrawLineEx+0x108>
 800de1c:	2202      	movs	r2, #2
 800de1e:	fb93 f0f2 	sdiv	r0, r3, r2
 800de22:	3b01      	subs	r3, #1
 800de24:	fb93 f3f2 	sdiv	r3, r3, r2
 800de28:	f1bb 0f00 	cmp.w	fp, #0
 800de2c:	dd05      	ble.n	800de3a <GL_DrawLineEx+0x11a>
 800de2e:	f10b 0201 	add.w	r2, fp, #1
 800de32:	1052      	asrs	r2, r2, #1
 800de34:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800de38:	e006      	b.n	800de48 <GL_DrawLineEx+0x128>
 800de3a:	2102      	movs	r1, #2
 800de3c:	fb9b f2f1 	sdiv	r2, fp, r1
 800de40:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800de44:	fb9b fbf1 	sdiv	fp, fp, r1
 800de48:	b280      	uxth	r0, r0
 800de4a:	fa1f f489 	uxth.w	r4, r9
 800de4e:	1901      	adds	r1, r0, r4
 800de50:	b292      	uxth	r2, r2
 800de52:	f8ad 1008 	strh.w	r1, [sp, #8]
 800de56:	fa1f fb8b 	uxth.w	fp, fp
 800de5a:	fa1f f188 	uxth.w	r1, r8
 800de5e:	1855      	adds	r5, r2, r1
 800de60:	ebcb 0101 	rsb	r1, fp, r1
 800de64:	b29b      	uxth	r3, r3
 800de66:	f8ad 100e 	strh.w	r1, [sp, #14]
 800de6a:	b2b9      	uxth	r1, r7
 800de6c:	1ae4      	subs	r4, r4, r3
 800de6e:	1acb      	subs	r3, r1, r3
 800de70:	f8ad 3010 	strh.w	r3, [sp, #16]
 800de74:	b2b3      	uxth	r3, r6
 800de76:	4401      	add	r1, r0
 800de78:	ebcb 0b03 	rsb	fp, fp, r3
 800de7c:	4413      	add	r3, r2
 800de7e:	2200      	movs	r2, #0
 800de80:	f8ad 1014 	strh.w	r1, [sp, #20]
 800de84:	f8ad 3016 	strh.w	r3, [sp, #22]
 800de88:	a802      	add	r0, sp, #8
 800de8a:	4613      	mov	r3, r2
 800de8c:	2104      	movs	r1, #4
 800de8e:	f8ad 500a 	strh.w	r5, [sp, #10]
 800de92:	f8ad 400c 	strh.w	r4, [sp, #12]
 800de96:	f8ad b012 	strh.w	fp, [sp, #18]
 800de9a:	f003 ff2f 	bl	8011cfc <GL_FillPolygon>
 800de9e:	f8da 3000 	ldr.w	r3, [sl]
 800dea2:	7e5b      	ldrb	r3, [r3, #25]
 800dea4:	b91b      	cbnz	r3, 800deae <GL_DrawLineEx+0x18e>
 800dea6:	4648      	mov	r0, r9
 800dea8:	4641      	mov	r1, r8
 800deaa:	f004 f809 	bl	8011ec0 <GL_DrawPoint>
 800deae:	f8da 3000 	ldr.w	r3, [sl]
 800deb2:	7e5b      	ldrb	r3, [r3, #25]
 800deb4:	b91b      	cbnz	r3, 800debe <GL_DrawLineEx+0x19e>
 800deb6:	4638      	mov	r0, r7
 800deb8:	4631      	mov	r1, r6
 800deba:	f004 f801 	bl	8011ec0 <GL_DrawPoint>
 800debe:	b007      	add	sp, #28
 800dec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec4:	20000038 	.word	0x20000038
 800dec8:	08013fea 	.word	0x08013fea

0800decc <GL_DrawLine>:
 800decc:	b530      	push	{r4, r5, lr}
 800dece:	b085      	sub	sp, #20
 800ded0:	ac04      	add	r4, sp, #16
 800ded2:	2500      	movs	r5, #0
 800ded4:	f844 5d04 	str.w	r5, [r4, #-4]!
 800ded8:	9400      	str	r4, [sp, #0]
 800deda:	f7ff ff21 	bl	800dd20 <GL_DrawLineEx>
 800dede:	b005      	add	sp, #20
 800dee0:	bd30      	pop	{r4, r5, pc}
	...

0800dee4 <GUI_DrawLine>:
 800dee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee8:	461e      	mov	r6, r3
 800deea:	4b0c      	ldr	r3, [pc, #48]	; (800df1c <GUI_DrawLine+0x38>)
 800deec:	681c      	ldr	r4, [r3, #0]
 800deee:	4681      	mov	r9, r0
 800def0:	2000      	movs	r0, #0
 800def2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800def4:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800def6:	4688      	mov	r8, r1
 800def8:	4617      	mov	r7, r2
 800defa:	f7fa ff8f 	bl	8008e1c <WM__InitIVRSearch>
 800defe:	b150      	cbz	r0, 800df16 <GUI_DrawLine+0x32>
 800df00:	eb09 0005 	add.w	r0, r9, r5
 800df04:	eb08 0104 	add.w	r1, r8, r4
 800df08:	197a      	adds	r2, r7, r5
 800df0a:	1933      	adds	r3, r6, r4
 800df0c:	f7ff ffde 	bl	800decc <GL_DrawLine>
 800df10:	f7fa fec2 	bl	8008c98 <WM__GetNextIVR>
 800df14:	e7f3      	b.n	800defe <GUI_DrawLine+0x1a>
 800df16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df1a:	bf00      	nop
 800df1c:	20000038 	.word	0x20000038

0800df20 <GUI_DispStringAt>:
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <GUI_DispStringAt+0xc>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	8459      	strh	r1, [r3, #34]	; 0x22
 800df26:	849a      	strh	r2, [r3, #36]	; 0x24
 800df28:	f000 b802 	b.w	800df30 <GUI_DispString>
 800df2c:	20000038 	.word	0x20000038

0800df30 <GUI_DispString>:
 800df30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	4604      	mov	r4, r0
 800df36:	2800      	cmp	r0, #0
 800df38:	d079      	beq.n	800e02e <GUI_DispString+0xfe>
 800df3a:	4d3e      	ldr	r5, [pc, #248]	; (800e034 <GUI_DispString+0x104>)
 800df3c:	f000 fc74 	bl	800e828 <GUI_GetFontDistY>
 800df40:	682b      	ldr	r3, [r5, #0]
 800df42:	4680      	mov	r8, r0
 800df44:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800df48:	f000 fc56 	bl	800e7f8 <GUI_GetYAdjust>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800df50:	b287      	uxth	r7, r0
 800df52:	1bd2      	subs	r2, r2, r7
 800df54:	849a      	strh	r2, [r3, #36]	; 0x24
 800df56:	7823      	ldrb	r3, [r4, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d05d      	beq.n	800e018 <GUI_DispString+0xe8>
 800df5c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800df60:	4620      	mov	r0, r4
 800df62:	f000 fb97 	bl	800e694 <GUI__GetLineNumChars>
 800df66:	4606      	mov	r6, r0
 800df68:	4631      	mov	r1, r6
 800df6a:	4620      	mov	r0, r4
 800df6c:	f000 fbc0 	bl	800e6f0 <GUI__GetLineDistX>
 800df70:	682b      	ldr	r3, [r5, #0]
 800df72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800df74:	f002 0203 	and.w	r2, r2, #3
 800df78:	2a01      	cmp	r2, #1
 800df7a:	d005      	beq.n	800df88 <GUI_DispString+0x58>
 800df7c:	2a02      	cmp	r2, #2
 800df7e:	bf14      	ite	ne
 800df80:	2200      	movne	r2, #0
 800df82:	fb90 f2f2 	sdiveq	r2, r0, r2
 800df86:	e000      	b.n	800df8a <GUI_DispString+0x5a>
 800df88:	4602      	mov	r2, r0
 800df8a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800df8c:	1a8a      	subs	r2, r1, r2
 800df8e:	b292      	uxth	r2, r2
 800df90:	b291      	uxth	r1, r2
 800df92:	8459      	strh	r1, [r3, #34]	; 0x22
 800df94:	fa1f fa80 	uxth.w	sl, r0
 800df98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df9a:	f8ad 1000 	strh.w	r1, [sp]
 800df9e:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800dfa2:	440a      	add	r2, r1
 800dfa4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dfa8:	fa1f fb88 	uxth.w	fp, r8
 800dfac:	3b01      	subs	r3, #1
 800dfae:	445b      	add	r3, fp
 800dfb0:	f8ad 2004 	strh.w	r2, [sp, #4]
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	4631      	mov	r1, r6
 800dfb8:	466a      	mov	r2, sp
 800dfba:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dfbe:	f000 fbc7 	bl	800e750 <GUI__DispLine>
 800dfc2:	682b      	ldr	r3, [r5, #0]
 800dfc4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dfc8:	849a      	strh	r2, [r3, #36]	; 0x24
 800dfca:	4620      	mov	r0, r4
 800dfcc:	4631      	mov	r1, r6
 800dfce:	f003 fe35 	bl	8011c3c <GUI_UC__NumChars2NumBytes>
 800dfd2:	5c23      	ldrb	r3, [r4, r0]
 800dfd4:	2b0a      	cmp	r3, #10
 800dfd6:	eb04 0200 	add.w	r2, r4, r0
 800dfda:	d001      	beq.n	800dfe0 <GUI_DispString+0xb0>
 800dfdc:	2b0d      	cmp	r3, #13
 800dfde:	d112      	bne.n	800e006 <GUI_DispString+0xd6>
 800dfe0:	682b      	ldr	r3, [r5, #0]
 800dfe2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800dfe4:	f001 0103 	and.w	r1, r1, #3
 800dfe8:	3901      	subs	r1, #1
 800dfea:	2901      	cmp	r1, #1
 800dfec:	bf8a      	itet	hi
 800dfee:	8c19      	ldrhhi	r1, [r3, #32]
 800dff0:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 800dff4:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800dff6:	7811      	ldrb	r1, [r2, #0]
 800dff8:	290a      	cmp	r1, #10
 800dffa:	d10b      	bne.n	800e014 <GUI_DispString+0xe4>
 800dffc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800dffe:	448b      	add	fp, r1
 800e000:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800e004:	e006      	b.n	800e014 <GUI_DispString+0xe4>
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <GUI_DispString+0x104>)
 800e008:	f8bd 0000 	ldrh.w	r0, [sp]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4482      	add	sl, r0
 800e010:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800e014:	7813      	ldrb	r3, [r2, #0]
 800e016:	b943      	cbnz	r3, 800e02a <GUI_DispString+0xfa>
 800e018:	682b      	ldr	r3, [r5, #0]
 800e01a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800e01c:	4417      	add	r7, r2
 800e01e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e020:	849f      	strh	r7, [r3, #36]	; 0x24
 800e022:	f022 0203 	bic.w	r2, r2, #3
 800e026:	859a      	strh	r2, [r3, #44]	; 0x2c
 800e028:	e001      	b.n	800e02e <GUI_DispString+0xfe>
 800e02a:	1c54      	adds	r4, r2, #1
 800e02c:	e793      	b.n	800df56 <GUI_DispString+0x26>
 800e02e:	b003      	add	sp, #12
 800e030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e034:	20000038 	.word	0x20000038

0800e038 <CL_DispChar>:
 800e038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e03a:	4d20      	ldr	r5, [pc, #128]	; (800e0bc <CL_DispChar+0x84>)
 800e03c:	682b      	ldr	r3, [r5, #0]
 800e03e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e040:	8c5e      	ldrh	r6, [r3, #34]	; 0x22
 800e042:	8c9f      	ldrh	r7, [r3, #36]	; 0x24
 800e044:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e046:	4416      	add	r6, r2
 800e048:	b2b6      	uxth	r6, r6
 800e04a:	b2b2      	uxth	r2, r6
 800e04c:	4439      	add	r1, r7
 800e04e:	845a      	strh	r2, [r3, #34]	; 0x22
 800e050:	8499      	strh	r1, [r3, #36]	; 0x24
 800e052:	f8ad 2000 	strh.w	r2, [sp]
 800e056:	4604      	mov	r4, r0
 800e058:	f000 fc16 	bl	800e888 <GUI_GetCharDistX>
 800e05c:	4607      	mov	r7, r0
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 fb36 	bl	800e6d0 <GUI__GetOverlap>
 800e064:	3e01      	subs	r6, #1
 800e066:	682b      	ldr	r3, [r5, #0]
 800e068:	4437      	add	r7, r6
 800e06a:	4438      	add	r0, r7
 800e06c:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800e06e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e072:	f8ad 0004 	strh.w	r0, [sp, #4]
 800e076:	f003 fe1f 	bl	8011cb8 <GUI_GetFontSizeY>
 800e07a:	3e01      	subs	r6, #1
 800e07c:	4430      	add	r0, r6
 800e07e:	f8ad 0006 	strh.w	r0, [sp, #6]
 800e082:	4668      	mov	r0, sp
 800e084:	f7fa feca 	bl	8008e1c <WM__InitIVRSearch>
 800e088:	b938      	cbnz	r0, 800e09a <CL_DispChar+0x62>
 800e08a:	2c0a      	cmp	r4, #10
 800e08c:	d00b      	beq.n	800e0a6 <CL_DispChar+0x6e>
 800e08e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e092:	682b      	ldr	r3, [r5, #0]
 800e094:	3201      	adds	r2, #1
 800e096:	845a      	strh	r2, [r3, #34]	; 0x22
 800e098:	e005      	b.n	800e0a6 <CL_DispChar+0x6e>
 800e09a:	4620      	mov	r0, r4
 800e09c:	f000 fbda 	bl	800e854 <GL_DispChar>
 800e0a0:	f7fa fdfa 	bl	8008c98 <WM__GetNextIVR>
 800e0a4:	e7f0      	b.n	800e088 <CL_DispChar+0x50>
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e0aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0ac:	1a8a      	subs	r2, r1, r2
 800e0ae:	845a      	strh	r2, [r3, #34]	; 0x22
 800e0b0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e0b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0b4:	1a8a      	subs	r2, r1, r2
 800e0b6:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0b8:	b003      	add	sp, #12
 800e0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0bc:	20000038 	.word	0x20000038

0800e0c0 <GUI_DispCharAt>:
 800e0c0:	4b02      	ldr	r3, [pc, #8]	; (800e0cc <GUI_DispCharAt+0xc>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	8459      	strh	r1, [r3, #34]	; 0x22
 800e0c6:	849a      	strh	r2, [r3, #36]	; 0x24
 800e0c8:	f7ff bfb6 	b.w	800e038 <CL_DispChar>
 800e0cc:	20000038 	.word	0x20000038

0800e0d0 <GUI_DEVICE__GetpDevice>:
 800e0d0:	2801      	cmp	r0, #1
 800e0d2:	dc0a      	bgt.n	800e0ea <GUI_DEVICE__GetpDevice+0x1a>
 800e0d4:	4b06      	ldr	r3, [pc, #24]	; (800e0f0 <GUI_DEVICE__GetpDevice+0x20>)
 800e0d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e0da:	b128      	cbz	r0, 800e0e8 <GUI_DEVICE__GetpDevice+0x18>
 800e0dc:	68c3      	ldr	r3, [r0, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	428b      	cmp	r3, r1
 800e0e2:	d003      	beq.n	800e0ec <GUI_DEVICE__GetpDevice+0x1c>
 800e0e4:	6800      	ldr	r0, [r0, #0]
 800e0e6:	e7f8      	b.n	800e0da <GUI_DEVICE__GetpDevice+0xa>
 800e0e8:	4770      	bx	lr
 800e0ea:	2000      	movs	r0, #0
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20023074 	.word	0x20023074

0800e0f4 <GUI_DEVICE__GetpDriver>:
 800e0f4:	2801      	cmp	r0, #1
 800e0f6:	dc09      	bgt.n	800e10c <GUI_DEVICE__GetpDriver+0x18>
 800e0f8:	4b05      	ldr	r3, [pc, #20]	; (800e110 <GUI_DEVICE__GetpDriver+0x1c>)
 800e0fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800e0fe:	b120      	cbz	r0, 800e10a <GUI_DEVICE__GetpDriver+0x16>
 800e100:	68c3      	ldr	r3, [r0, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	b11b      	cbz	r3, 800e10e <GUI_DEVICE__GetpDriver+0x1a>
 800e106:	6800      	ldr	r0, [r0, #0]
 800e108:	e7f9      	b.n	800e0fe <GUI_DEVICE__GetpDriver+0xa>
 800e10a:	4770      	bx	lr
 800e10c:	2000      	movs	r0, #0
 800e10e:	4770      	bx	lr
 800e110:	20023074 	.word	0x20023074

0800e114 <GUI_DEVICE_Delete>:
 800e114:	f000 bcb8 	b.w	800ea88 <GUI_ALLOC_FreeFixedBlock>

0800e118 <GUI_DEVICE_Create>:
 800e118:	2b01      	cmp	r3, #1
 800e11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11c:	4606      	mov	r6, r0
 800e11e:	460d      	mov	r5, r1
 800e120:	4617      	mov	r7, r2
 800e122:	461c      	mov	r4, r3
 800e124:	dd01      	ble.n	800e12a <GUI_DEVICE_Create+0x12>
 800e126:	2000      	movs	r0, #0
 800e128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e12a:	201c      	movs	r0, #28
 800e12c:	f000 fe0c 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800e130:	2800      	cmp	r0, #0
 800e132:	d0f8      	beq.n	800e126 <GUI_DEVICE_Create+0xe>
 800e134:	b10d      	cbz	r5, 800e13a <GUI_DEVICE_Create+0x22>
 800e136:	6105      	str	r5, [r0, #16]
 800e138:	e009      	b.n	800e14e <GUI_DEVICE_Create+0x36>
 800e13a:	4b09      	ldr	r3, [pc, #36]	; (800e160 <GUI_DEVICE_Create+0x48>)
 800e13c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800e140:	b129      	cbz	r1, 800e14e <GUI_DEVICE_Create+0x36>
 800e142:	680b      	ldr	r3, [r1, #0]
 800e144:	b10b      	cbz	r3, 800e14a <GUI_DEVICE_Create+0x32>
 800e146:	4619      	mov	r1, r3
 800e148:	e7fb      	b.n	800e142 <GUI_DEVICE_Create+0x2a>
 800e14a:	690b      	ldr	r3, [r1, #16]
 800e14c:	6103      	str	r3, [r0, #16]
 800e14e:	2300      	movs	r3, #0
 800e150:	6083      	str	r3, [r0, #8]
 800e152:	6184      	str	r4, [r0, #24]
 800e154:	8287      	strh	r7, [r0, #20]
 800e156:	60c6      	str	r6, [r0, #12]
 800e158:	6003      	str	r3, [r0, #0]
 800e15a:	6043      	str	r3, [r0, #4]
 800e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e15e:	bf00      	nop
 800e160:	20023074 	.word	0x20023074

0800e164 <GUI_DEVICE_Unlink>:
 800e164:	4b09      	ldr	r3, [pc, #36]	; (800e18c <GUI_DEVICE_Unlink+0x28>)
 800e166:	6982      	ldr	r2, [r0, #24]
 800e168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e16c:	4281      	cmp	r1, r0
 800e16e:	bf04      	itt	eq
 800e170:	6801      	ldreq	r1, [r0, #0]
 800e172:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800e176:	6843      	ldr	r3, [r0, #4]
 800e178:	b10b      	cbz	r3, 800e17e <GUI_DEVICE_Unlink+0x1a>
 800e17a:	6802      	ldr	r2, [r0, #0]
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	6802      	ldr	r2, [r0, #0]
 800e180:	b102      	cbz	r2, 800e184 <GUI_DEVICE_Unlink+0x20>
 800e182:	6053      	str	r3, [r2, #4]
 800e184:	2300      	movs	r3, #0
 800e186:	6003      	str	r3, [r0, #0]
 800e188:	6043      	str	r3, [r0, #4]
 800e18a:	4770      	bx	lr
 800e18c:	20023074 	.word	0x20023074

0800e190 <GUI_DEVICE_Link>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	b338      	cbz	r0, 800e1e4 <GUI_DEVICE_Link+0x54>
 800e194:	6982      	ldr	r2, [r0, #24]
 800e196:	2a01      	cmp	r2, #1
 800e198:	dc24      	bgt.n	800e1e4 <GUI_DEVICE_Link+0x54>
 800e19a:	4919      	ldr	r1, [pc, #100]	; (800e200 <GUI_DEVICE_Link+0x70>)
 800e19c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	b913      	cbnz	r3, 800e1aa <GUI_DEVICE_Link+0x1a>
 800e1a4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800e1a8:	e01a      	b.n	800e1e0 <GUI_DEVICE_Link+0x50>
 800e1aa:	6859      	ldr	r1, [r3, #4]
 800e1ac:	b109      	cbz	r1, 800e1b2 <GUI_DEVICE_Link+0x22>
 800e1ae:	460b      	mov	r3, r1
 800e1b0:	e7fb      	b.n	800e1aa <GUI_DEVICE_Link+0x1a>
 800e1b2:	68c1      	ldr	r1, [r0, #12]
 800e1b4:	680e      	ldr	r6, [r1, #0]
 800e1b6:	68d9      	ldr	r1, [r3, #12]
 800e1b8:	680c      	ldr	r4, [r1, #0]
 800e1ba:	42b4      	cmp	r4, r6
 800e1bc:	dd03      	ble.n	800e1c6 <GUI_DEVICE_Link+0x36>
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1f8      	bne.n	800e1b6 <GUI_DEVICE_Link+0x26>
 800e1c4:	e00e      	b.n	800e1e4 <GUI_DEVICE_Link+0x54>
 800e1c6:	d102      	bne.n	800e1ce <GUI_DEVICE_Link+0x3e>
 800e1c8:	8a81      	ldrh	r1, [r0, #20]
 800e1ca:	2901      	cmp	r1, #1
 800e1cc:	d011      	beq.n	800e1f2 <GUI_DEVICE_Link+0x62>
 800e1ce:	6859      	ldr	r1, [r3, #4]
 800e1d0:	b199      	cbz	r1, 800e1fa <GUI_DEVICE_Link+0x6a>
 800e1d2:	6008      	str	r0, [r1, #0]
 800e1d4:	6041      	str	r1, [r0, #4]
 800e1d6:	6058      	str	r0, [r3, #4]
 800e1d8:	4298      	cmp	r0, r3
 800e1da:	bf08      	it	eq
 800e1dc:	2300      	moveq	r3, #0
 800e1de:	6003      	str	r3, [r0, #0]
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}
 800e1e4:	2001      	movs	r0, #1
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	68cb      	ldr	r3, [r1, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	42a3      	cmp	r3, r4
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	dbed      	blt.n	800e1ce <GUI_DEVICE_Link+0x3e>
 800e1f2:	6819      	ldr	r1, [r3, #0]
 800e1f4:	2900      	cmp	r1, #0
 800e1f6:	d1f7      	bne.n	800e1e8 <GUI_DEVICE_Link+0x58>
 800e1f8:	e7e9      	b.n	800e1ce <GUI_DEVICE_Link+0x3e>
 800e1fa:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800e1fe:	e7ea      	b.n	800e1d6 <GUI_DEVICE_Link+0x46>
 800e200:	20023074 	.word	0x20023074

0800e204 <GUI_DEVICE_CreateAndLink>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	461d      	mov	r5, r3
 800e208:	f7ff ff86 	bl	800e118 <GUI_DEVICE_Create>
 800e20c:	4604      	mov	r4, r0
 800e20e:	b148      	cbz	r0, 800e224 <GUI_DEVICE_CreateAndLink+0x20>
 800e210:	f7ff ffbe 	bl	800e190 <GUI_DEVICE_Link>
 800e214:	68e3      	ldr	r3, [r4, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	b923      	cbnz	r3, 800e224 <GUI_DEVICE_CreateAndLink+0x20>
 800e21a:	4b03      	ldr	r3, [pc, #12]	; (800e228 <GUI_DEVICE_CreateAndLink+0x24>)
 800e21c:	3516      	adds	r5, #22
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800e224:	4620      	mov	r0, r4
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	20000038 	.word	0x20000038

0800e22c <_OnExit>:
 800e22c:	b510      	push	{r4, lr}
 800e22e:	4b07      	ldr	r3, [pc, #28]	; (800e24c <_OnExit+0x20>)
 800e230:	4807      	ldr	r0, [pc, #28]	; (800e250 <_OnExit+0x24>)
 800e232:	2400      	movs	r4, #0
 800e234:	4621      	mov	r1, r4
 800e236:	2270      	movs	r2, #112	; 0x70
 800e238:	601c      	str	r4, [r3, #0]
 800e23a:	f7fd fce3 	bl	800bc04 <GUI__memset>
 800e23e:	4621      	mov	r1, r4
 800e240:	4804      	ldr	r0, [pc, #16]	; (800e254 <_OnExit+0x28>)
 800e242:	2208      	movs	r2, #8
 800e244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e248:	f7fd bcdc 	b.w	800bc04 <GUI__memset>
 800e24c:	20022c18 	.word	0x20022c18
 800e250:	20022ba0 	.word	0x20022ba0
 800e254:	20023074 	.word	0x20023074

0800e258 <_InitContext>:
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	4d19      	ldr	r5, [pc, #100]	; (800e2c0 <_InitContext+0x68>)
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	1d1a      	adds	r2, r3, #4
 800e260:	63da      	str	r2, [r3, #60]	; 0x3c
 800e262:	f103 0208 	add.w	r2, r3, #8
 800e266:	639b      	str	r3, [r3, #56]	; 0x38
 800e268:	641b      	str	r3, [r3, #64]	; 0x40
 800e26a:	6142      	str	r2, [r0, #20]
 800e26c:	7c5a      	ldrb	r2, [r3, #17]
 800e26e:	4b15      	ldr	r3, [pc, #84]	; (800e2c4 <_InitContext+0x6c>)
 800e270:	4604      	mov	r4, r0
 800e272:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e276:	68c3      	ldr	r3, [r0, #12]
 800e278:	f104 0108 	add.w	r1, r4, #8
 800e27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27e:	4798      	blx	r3
 800e280:	4b11      	ldr	r3, [pc, #68]	; (800e2c8 <_InitContext+0x70>)
 800e282:	6663      	str	r3, [r4, #100]	; 0x64
 800e284:	4b11      	ldr	r3, [pc, #68]	; (800e2cc <_InitContext+0x74>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	61e3      	str	r3, [r4, #28]
 800e28a:	682b      	ldr	r3, [r5, #0]
 800e28c:	3308      	adds	r3, #8
 800e28e:	6163      	str	r3, [r4, #20]
 800e290:	2301      	movs	r3, #1
 800e292:	7623      	strb	r3, [r4, #24]
 800e294:	f7f9 fee8 	bl	8008068 <WM_GetDesktopWindow>
 800e298:	2303      	movs	r3, #3
 800e29a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800e29e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800e2a2:	6323      	str	r3, [r4, #48]	; 0x30
 800e2a4:	6363      	str	r3, [r4, #52]	; 0x34
 800e2a6:	64a0      	str	r0, [r4, #72]	; 0x48
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	f7fd fc9b 	bl	800bbe4 <LCD_SetBkColor>
 800e2ae:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e2b2:	f7fd fc9f 	bl	800bbf4 <LCD_SetColor>
 800e2b6:	4b06      	ldr	r3, [pc, #24]	; (800e2d0 <_InitContext+0x78>)
 800e2b8:	4a06      	ldr	r2, [pc, #24]	; (800e2d4 <_InitContext+0x7c>)
 800e2ba:	601a      	str	r2, [r3, #0]
 800e2bc:	bd38      	pop	{r3, r4, r5, pc}
 800e2be:	bf00      	nop
 800e2c0:	20000038 	.word	0x20000038
 800e2c4:	20023074 	.word	0x20023074
 800e2c8:	0801400c 	.word	0x0801400c
 800e2cc:	2000003c 	.word	0x2000003c
 800e2d0:	2002306c 	.word	0x2002306c
 800e2d4:	080144a4 	.word	0x080144a4

0800e2d8 <GUI_SetFuncGetpPalConvTable>:
 800e2d8:	4b01      	ldr	r3, [pc, #4]	; (800e2e0 <GUI_SetFuncGetpPalConvTable+0x8>)
 800e2da:	6018      	str	r0, [r3, #0]
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	20000040 	.word	0x20000040

0800e2e4 <GUI_SetDefaultFont>:
 800e2e4:	4b01      	ldr	r3, [pc, #4]	; (800e2ec <GUI_SetDefaultFont+0x8>)
 800e2e6:	6018      	str	r0, [r3, #0]
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop
 800e2ec:	2000003c 	.word	0x2000003c

0800e2f0 <GUI_ClearRect>:
 800e2f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	2004      	movs	r0, #4
 800e2f8:	469a      	mov	sl, r3
 800e2fa:	460e      	mov	r6, r1
 800e2fc:	4691      	mov	r9, r2
 800e2fe:	f7fd f929 	bl	800b554 <LCD_SetDrawMode>
 800e302:	4b13      	ldr	r3, [pc, #76]	; (800e350 <GUI_ClearRect+0x60>)
 800e304:	681c      	ldr	r4, [r3, #0]
 800e306:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800e308:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800e30a:	442f      	add	r7, r5
 800e30c:	4426      	add	r6, r4
 800e30e:	4680      	mov	r8, r0
 800e310:	444d      	add	r5, r9
 800e312:	4454      	add	r4, sl
 800e314:	4668      	mov	r0, sp
 800e316:	f8ad 7000 	strh.w	r7, [sp]
 800e31a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800e31e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e322:	f8ad 4006 	strh.w	r4, [sp, #6]
 800e326:	f7fa fd79 	bl	8008e1c <WM__InitIVRSearch>
 800e32a:	b928      	cbnz	r0, 800e338 <GUI_ClearRect+0x48>
 800e32c:	4640      	mov	r0, r8
 800e32e:	f7fd f911 	bl	800b554 <LCD_SetDrawMode>
 800e332:	b002      	add	sp, #8
 800e334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e338:	4638      	mov	r0, r7
 800e33a:	4631      	mov	r1, r6
 800e33c:	462a      	mov	r2, r5
 800e33e:	4623      	mov	r3, r4
 800e340:	f7fd f98a 	bl	800b658 <LCD_FillRect>
 800e344:	f7fa fca8 	bl	8008c98 <WM__GetNextIVR>
 800e348:	2800      	cmp	r0, #0
 800e34a:	d1f5      	bne.n	800e338 <GUI_ClearRect+0x48>
 800e34c:	e7ee      	b.n	800e32c <GUI_ClearRect+0x3c>
 800e34e:	bf00      	nop
 800e350:	20000038 	.word	0x20000038

0800e354 <GUI_Clear>:
 800e354:	b510      	push	{r4, lr}
 800e356:	2000      	movs	r0, #0
 800e358:	4601      	mov	r1, r0
 800e35a:	f7ff f8ad 	bl	800d4b8 <GUI_GotoXY>
 800e35e:	4804      	ldr	r0, [pc, #16]	; (800e370 <GUI_Clear+0x1c>)
 800e360:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800e364:	4601      	mov	r1, r0
 800e366:	4613      	mov	r3, r2
 800e368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e36c:	f7ff bfc0 	b.w	800e2f0 <GUI_ClearRect>
 800e370:	ffffc001 	.word	0xffffc001

0800e374 <GUI__RegisterExit>:
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	4b05      	ldr	r3, [pc, #20]	; (800e394 <GUI__RegisterExit+0x20>)
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	605a      	str	r2, [r3, #4]
 800e384:	4b03      	ldr	r3, [pc, #12]	; (800e394 <GUI__RegisterExit+0x20>)
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	20022b9c 	.word	0x20022b9c

0800e398 <GUI__Config>:
 800e398:	b508      	push	{r3, lr}
 800e39a:	4b08      	ldr	r3, [pc, #32]	; (800e3bc <GUI__Config+0x24>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	b962      	cbnz	r2, 800e3ba <GUI__Config+0x22>
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	f7f6 fbbe 	bl	8004b24 <GUI_X_Config>
 800e3a8:	f7f6 fd3c 	bl	8004e24 <LCD_X_Config>
 800e3ac:	4804      	ldr	r0, [pc, #16]	; (800e3c0 <GUI__Config+0x28>)
 800e3ae:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <GUI__Config+0x2c>)
 800e3b0:	6003      	str	r3, [r0, #0]
 800e3b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e3b6:	f7ff bfdd 	b.w	800e374 <GUI__RegisterExit>
 800e3ba:	bd08      	pop	{r3, pc}
 800e3bc:	20022c18 	.word	0x20022c18
 800e3c0:	20022c10 	.word	0x20022c10
 800e3c4:	0800e22d 	.word	0x0800e22d

0800e3c8 <GUI_Init>:
 800e3c8:	b590      	push	{r4, r7, lr}
 800e3ca:	b083      	sub	sp, #12
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	4b20      	ldr	r3, [pc, #128]	; (800e450 <GUI_Init+0x88>)
 800e3d0:	4a1f      	ldr	r2, [pc, #124]	; (800e450 <GUI_Init+0x88>)
 800e3d2:	6812      	ldr	r2, [r2, #0]
 800e3d4:	f022 0201 	bic.w	r2, r2, #1
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	4b1e      	ldr	r3, [pc, #120]	; (800e454 <GUI_Init+0x8c>)
 800e3dc:	2201      	movs	r2, #1
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	4b1d      	ldr	r3, [pc, #116]	; (800e458 <GUI_Init+0x90>)
 800e3e2:	4a1e      	ldr	r2, [pc, #120]	; (800e45c <GUI_Init+0x94>)
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	4b1c      	ldr	r3, [pc, #112]	; (800e458 <GUI_Init+0x90>)
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	4b1d      	ldr	r3, [pc, #116]	; (800e460 <GUI_Init+0x98>)
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d000      	beq.n	800e3f2 <GUI_Init+0x2a>
 800e3f0:	e7fe      	b.n	800e3f0 <GUI_Init+0x28>
 800e3f2:	f7ff ffd1 	bl	800e398 <GUI__Config>
 800e3f6:	4b1b      	ldr	r3, [pc, #108]	; (800e464 <GUI_Init+0x9c>)
 800e3f8:	222e      	movs	r2, #46	; 0x2e
 800e3fa:	701a      	strb	r2, [r3, #0]
 800e3fc:	f7f6 fbc6 	bl	8004b8c <GUI_X_Init>
 800e400:	4819      	ldr	r0, [pc, #100]	; (800e468 <GUI_Init+0xa0>)
 800e402:	f7ff ff29 	bl	800e258 <_InitContext>
 800e406:	f7fd fb4b 	bl	800baa0 <emWin_LCD_Init>
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	f7fc ff96 	bl	800b33c <LCD_GetXSizeDisplay>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d004      	beq.n	800e420 <GUI_Init+0x58>
 800e416:	f7fc ff97 	bl	800b348 <LCD_GetYSizeDisplay>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d109      	bne.n	800e434 <GUI_Init+0x6c>
 800e420:	f7fc ff78 	bl	800b314 <LCD_GetXSizeMax>
 800e424:	4604      	mov	r4, r0
 800e426:	f7fc ff78 	bl	800b31a <LCD_GetYSizeMax>
 800e42a:	4603      	mov	r3, r0
 800e42c:	4620      	mov	r0, r4
 800e42e:	4619      	mov	r1, r3
 800e430:	f7fc ff7a 	bl	800b328 <LCD_SetDisplaySize>
 800e434:	2000      	movs	r0, #0
 800e436:	2100      	movs	r1, #0
 800e438:	f003 fc1c 	bl	8011c74 <GUI_SetOrg>
 800e43c:	f7fa ff2c 	bl	8009298 <WM_Init>
 800e440:	4b0a      	ldr	r3, [pc, #40]	; (800e46c <GUI_Init+0xa4>)
 800e442:	2201      	movs	r2, #1
 800e444:	701a      	strb	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd90      	pop	{r4, r7, pc}
 800e450:	e0002000 	.word	0xe0002000
 800e454:	40023008 	.word	0x40023008
 800e458:	40023000 	.word	0x40023000
 800e45c:	f407a5c2 	.word	0xf407a5c2
 800e460:	b5e8b5cd 	.word	0xb5e8b5cd
 800e464:	20023046 	.word	0x20023046
 800e468:	20022ba0 	.word	0x20022ba0
 800e46c:	20023064 	.word	0x20023064

0800e470 <GUIMONO_DispChar>:
 800e470:	4b52      	ldr	r3, [pc, #328]	; (800e5bc <GUIMONO_DispChar+0x14c>)
 800e472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	69d9      	ldr	r1, [r3, #28]
 800e47a:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800e47c:	69cc      	ldr	r4, [r1, #28]
 800e47e:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800e480:	89a2      	ldrh	r2, [r4, #12]
 800e482:	4290      	cmp	r0, r2
 800e484:	b08b      	sub	sp, #44	; 0x2c
 800e486:	d308      	bcc.n	800e49a <GUIMONO_DispChar+0x2a>
 800e488:	89e6      	ldrh	r6, [r4, #14]
 800e48a:	4286      	cmp	r6, r0
 800e48c:	d305      	bcc.n	800e49a <GUIMONO_DispChar+0x2a>
 800e48e:	f8d4 9000 	ldr.w	r9, [r4]
 800e492:	1a82      	subs	r2, r0, r2
 800e494:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e498:	e015      	b.n	800e4c6 <GUIMONO_DispChar+0x56>
 800e49a:	68a2      	ldr	r2, [r4, #8]
 800e49c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e4a0:	2a00      	cmp	r2, #0
 800e4a2:	f000 8081 	beq.w	800e5a8 <GUIMONO_DispChar+0x138>
 800e4a6:	8816      	ldrh	r6, [r2, #0]
 800e4a8:	42b0      	cmp	r0, r6
 800e4aa:	d37d      	bcc.n	800e5a8 <GUIMONO_DispChar+0x138>
 800e4ac:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800e4b0:	4584      	cmp	ip, r0
 800e4b2:	d379      	bcc.n	800e5a8 <GUIMONO_DispChar+0x138>
 800e4b4:	6852      	ldr	r2, [r2, #4]
 800e4b6:	1b80      	subs	r0, r0, r6
 800e4b8:	b280      	uxth	r0, r0
 800e4ba:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800e4be:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800e4c2:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800e4c6:	1c50      	adds	r0, r2, #1
 800e4c8:	d06e      	beq.n	800e5a8 <GUIMONO_DispChar+0x138>
 800e4ca:	f891 8018 	ldrb.w	r8, [r1, #24]
 800e4ce:	7ca1      	ldrb	r1, [r4, #18]
 800e4d0:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800e4d4:	7c26      	ldrb	r6, [r4, #16]
 800e4d6:	9206      	str	r2, [sp, #24]
 800e4d8:	fb18 f101 	smulbb	r1, r8, r1
 800e4dc:	9107      	str	r1, [sp, #28]
 800e4de:	fa0f f18a 	sxth.w	r1, sl
 800e4e2:	4608      	mov	r0, r1
 800e4e4:	9108      	str	r1, [sp, #32]
 800e4e6:	f7fd f835 	bl	800b554 <LCD_SetDrawMode>
 800e4ea:	4934      	ldr	r1, [pc, #208]	; (800e5bc <GUIMONO_DispChar+0x14c>)
 800e4ec:	9009      	str	r0, [sp, #36]	; 0x24
 800e4ee:	680b      	ldr	r3, [r1, #0]
 800e4f0:	9a06      	ldr	r2, [sp, #24]
 800e4f2:	69d9      	ldr	r1, [r3, #28]
 800e4f4:	7e88      	ldrb	r0, [r1, #26]
 800e4f6:	9000      	str	r0, [sp, #0]
 800e4f8:	7ec9      	ldrb	r1, [r1, #27]
 800e4fa:	9101      	str	r1, [sp, #4]
 800e4fc:	2101      	movs	r1, #1
 800e4fe:	9102      	str	r1, [sp, #8]
 800e500:	7ca1      	ldrb	r1, [r4, #18]
 800e502:	9103      	str	r1, [sp, #12]
 800e504:	9907      	ldr	r1, [sp, #28]
 800e506:	fb01 9202 	mla	r2, r1, r2, r9
 800e50a:	9204      	str	r2, [sp, #16]
 800e50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e50e:	9305      	str	r3, [sp, #20]
 800e510:	b23f      	sxth	r7, r7
 800e512:	b22d      	sxth	r5, r5
 800e514:	4638      	mov	r0, r7
 800e516:	4629      	mov	r1, r5
 800e518:	4632      	mov	r2, r6
 800e51a:	4643      	mov	r3, r8
 800e51c:	f7fd f9a4 	bl	800b868 <LCD_DrawBitmap>
 800e520:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800e524:	d01b      	beq.n	800e55e <GUIMONO_DispChar+0xee>
 800e526:	f04a 0002 	orr.w	r0, sl, #2
 800e52a:	b200      	sxth	r0, r0
 800e52c:	f7fd f812 	bl	800b554 <LCD_SetDrawMode>
 800e530:	4a22      	ldr	r2, [pc, #136]	; (800e5bc <GUIMONO_DispChar+0x14c>)
 800e532:	6813      	ldr	r3, [r2, #0]
 800e534:	69da      	ldr	r2, [r3, #28]
 800e536:	7e91      	ldrb	r1, [r2, #26]
 800e538:	9100      	str	r1, [sp, #0]
 800e53a:	7ed2      	ldrb	r2, [r2, #27]
 800e53c:	9201      	str	r2, [sp, #4]
 800e53e:	2101      	movs	r1, #1
 800e540:	9102      	str	r1, [sp, #8]
 800e542:	9907      	ldr	r1, [sp, #28]
 800e544:	7ca2      	ldrb	r2, [r4, #18]
 800e546:	9203      	str	r2, [sp, #12]
 800e548:	fb01 920b 	mla	r2, r1, fp, r9
 800e54c:	9204      	str	r2, [sp, #16]
 800e54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e550:	9305      	str	r3, [sp, #20]
 800e552:	4638      	mov	r0, r7
 800e554:	4629      	mov	r1, r5
 800e556:	4632      	mov	r2, r6
 800e558:	4643      	mov	r3, r8
 800e55a:	f7fd f985 	bl	800b868 <LCD_DrawBitmap>
 800e55e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800e5bc <GUIMONO_DispChar+0x14c>
 800e562:	f8d8 3000 	ldr.w	r3, [r8]
 800e566:	69db      	ldr	r3, [r3, #28]
 800e568:	7e5a      	ldrb	r2, [r3, #25]
 800e56a:	7e1b      	ldrb	r3, [r3, #24]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d917      	bls.n	800e5a0 <GUIMONO_DispChar+0x130>
 800e570:	9a08      	ldr	r2, [sp, #32]
 800e572:	2a02      	cmp	r2, #2
 800e574:	d014      	beq.n	800e5a0 <GUIMONO_DispChar+0x130>
 800e576:	f08a 0004 	eor.w	r0, sl, #4
 800e57a:	b200      	sxth	r0, r0
 800e57c:	f7fc ffea 	bl	800b554 <LCD_SetDrawMode>
 800e580:	f8d8 3000 	ldr.w	r3, [r8]
 800e584:	69db      	ldr	r3, [r3, #28]
 800e586:	f893 e018 	ldrb.w	lr, [r3, #24]
 800e58a:	7ed9      	ldrb	r1, [r3, #27]
 800e58c:	7e9a      	ldrb	r2, [r3, #26]
 800e58e:	7e5b      	ldrb	r3, [r3, #25]
 800e590:	4638      	mov	r0, r7
 800e592:	fb0e 5101 	mla	r1, lr, r1, r5
 800e596:	fb06 7202 	mla	r2, r6, r2, r7
 800e59a:	442b      	add	r3, r5
 800e59c:	f7fd f85c 	bl	800b658 <LCD_FillRect>
 800e5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5a2:	b2d8      	uxtb	r0, r3
 800e5a4:	f7fc ffd6 	bl	800b554 <LCD_SetDrawMode>
 800e5a8:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <GUIMONO_DispChar+0x14c>)
 800e5aa:	7c61      	ldrb	r1, [r4, #17]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800e5b0:	440a      	add	r2, r1
 800e5b2:	845a      	strh	r2, [r3, #34]	; 0x22
 800e5b4:	b00b      	add	sp, #44	; 0x2c
 800e5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20000038 	.word	0x20000038

0800e5c0 <GUIMONO_GetCharDistX>:
 800e5c0:	4b04      	ldr	r3, [pc, #16]	; (800e5d4 <GUIMONO_GetCharDistX+0x14>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	69db      	ldr	r3, [r3, #28]
 800e5c6:	69db      	ldr	r3, [r3, #28]
 800e5c8:	b109      	cbz	r1, 800e5ce <GUIMONO_GetCharDistX+0xe>
 800e5ca:	7c1a      	ldrb	r2, [r3, #16]
 800e5cc:	600a      	str	r2, [r1, #0]
 800e5ce:	7c58      	ldrb	r0, [r3, #17]
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	20000038 	.word	0x20000038

0800e5d8 <GUIMONO_GetFontInfo>:
 800e5d8:	2302      	movs	r3, #2
 800e5da:	800b      	strh	r3, [r1, #0]
 800e5dc:	4770      	bx	lr

0800e5de <GUIMONO_IsInFont>:
 800e5de:	69c3      	ldr	r3, [r0, #28]
 800e5e0:	899a      	ldrh	r2, [r3, #12]
 800e5e2:	428a      	cmp	r2, r1
 800e5e4:	d802      	bhi.n	800e5ec <GUIMONO_IsInFont+0xe>
 800e5e6:	89da      	ldrh	r2, [r3, #14]
 800e5e8:	428a      	cmp	r2, r1
 800e5ea:	d20f      	bcs.n	800e60c <GUIMONO_IsInFont+0x2e>
 800e5ec:	6898      	ldr	r0, [r3, #8]
 800e5ee:	b180      	cbz	r0, 800e612 <GUIMONO_IsInFont+0x34>
 800e5f0:	8803      	ldrh	r3, [r0, #0]
 800e5f2:	4299      	cmp	r1, r3
 800e5f4:	d30c      	bcc.n	800e610 <GUIMONO_IsInFont+0x32>
 800e5f6:	8842      	ldrh	r2, [r0, #2]
 800e5f8:	428a      	cmp	r2, r1
 800e5fa:	d309      	bcc.n	800e610 <GUIMONO_IsInFont+0x32>
 800e5fc:	1ac9      	subs	r1, r1, r3
 800e5fe:	6842      	ldr	r2, [r0, #4]
 800e600:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800e604:	43c0      	mvns	r0, r0
 800e606:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800e60a:	4770      	bx	lr
 800e60c:	2001      	movs	r0, #1
 800e60e:	4770      	bx	lr
 800e610:	2000      	movs	r0, #0
 800e612:	4770      	bx	lr

0800e614 <_Log2VisBuffered>:
 800e614:	4770      	bx	lr
	...

0800e618 <_DispLine>:
 800e618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e61a:	4615      	mov	r5, r2
 800e61c:	ab02      	add	r3, sp, #8
 800e61e:	4a1a      	ldr	r2, [pc, #104]	; (800e688 <_DispLine+0x70>)
 800e620:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e624:	9001      	str	r0, [sp, #4]
 800e626:	6812      	ldr	r2, [r2, #0]
 800e628:	4c18      	ldr	r4, [pc, #96]	; (800e68c <_DispLine+0x74>)
 800e62a:	4669      	mov	r1, sp
 800e62c:	4790      	blx	r2
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	9001      	str	r0, [sp, #4]
 800e632:	6958      	ldr	r0, [r3, #20]
 800e634:	b958      	cbnz	r0, 800e64e <_DispLine+0x36>
 800e636:	2001      	movs	r0, #1
 800e638:	f7fd fb82 	bl	800bd40 <GUI__ManageCache>
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	695b      	ldr	r3, [r3, #20]
 800e642:	b1bb      	cbz	r3, 800e674 <_DispLine+0x5c>
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	9801      	ldr	r0, [sp, #4]
 800e648:	9900      	ldr	r1, [sp, #0]
 800e64a:	4798      	blx	r3
 800e64c:	e017      	b.n	800e67e <_DispLine+0x66>
 800e64e:	4629      	mov	r1, r5
 800e650:	f7fe fe0c 	bl	800d26c <GUI_RectsIntersect>
 800e654:	2800      	cmp	r0, #0
 800e656:	d1ee      	bne.n	800e636 <_DispLine+0x1e>
 800e658:	e014      	b.n	800e684 <_DispLine+0x6c>
 800e65a:	a801      	add	r0, sp, #4
 800e65c:	f003 fada 	bl	8011c14 <GUI_UC__GetCharCodeInc>
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	4605      	mov	r5, r0
 800e668:	4798      	blx	r3
 800e66a:	4b09      	ldr	r3, [pc, #36]	; (800e690 <_DispLine+0x78>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	b10b      	cbz	r3, 800e674 <_DispLine+0x5c>
 800e670:	4628      	mov	r0, r5
 800e672:	4798      	blx	r3
 800e674:	9b00      	ldr	r3, [sp, #0]
 800e676:	3b01      	subs	r3, #1
 800e678:	2b00      	cmp	r3, #0
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	daed      	bge.n	800e65a <_DispLine+0x42>
 800e67e:	2000      	movs	r0, #0
 800e680:	f7fd fb5e 	bl	800bd40 <GUI__ManageCache>
 800e684:	b003      	add	sp, #12
 800e686:	bd30      	pop	{r4, r5, pc}
 800e688:	20000044 	.word	0x20000044
 800e68c:	20000038 	.word	0x20000038
 800e690:	20023060 	.word	0x20023060

0800e694 <GUI__GetLineNumChars>:
 800e694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e696:	460d      	mov	r5, r1
 800e698:	9001      	str	r0, [sp, #4]
 800e69a:	4604      	mov	r4, r0
 800e69c:	b198      	cbz	r0, 800e6c6 <GUI__GetLineNumChars+0x32>
 800e69e:	4b0b      	ldr	r3, [pc, #44]	; (800e6cc <GUI__GetLineNumChars+0x38>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	69db      	ldr	r3, [r3, #28]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	b10b      	cbz	r3, 800e6ac <GUI__GetLineNumChars+0x18>
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	b90b      	cbnz	r3, 800e6b0 <GUI__GetLineNumChars+0x1c>
 800e6ac:	2400      	movs	r4, #0
 800e6ae:	e008      	b.n	800e6c2 <GUI__GetLineNumChars+0x2e>
 800e6b0:	4798      	blx	r3
 800e6b2:	e009      	b.n	800e6c8 <GUI__GetLineNumChars+0x34>
 800e6b4:	a801      	add	r0, sp, #4
 800e6b6:	f003 faad 	bl	8011c14 <GUI_UC__GetCharCodeInc>
 800e6ba:	b120      	cbz	r0, 800e6c6 <GUI__GetLineNumChars+0x32>
 800e6bc:	280a      	cmp	r0, #10
 800e6be:	d002      	beq.n	800e6c6 <GUI__GetLineNumChars+0x32>
 800e6c0:	3401      	adds	r4, #1
 800e6c2:	42ac      	cmp	r4, r5
 800e6c4:	dbf6      	blt.n	800e6b4 <GUI__GetLineNumChars+0x20>
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	b003      	add	sp, #12
 800e6ca:	bd30      	pop	{r4, r5, pc}
 800e6cc:	20000038 	.word	0x20000038

0800e6d0 <GUI__GetOverlap>:
 800e6d0:	b513      	push	{r0, r1, r4, lr}
 800e6d2:	a902      	add	r1, sp, #8
 800e6d4:	2400      	movs	r4, #0
 800e6d6:	f841 4d04 	str.w	r4, [r1, #-4]!
 800e6da:	f000 f8df 	bl	800e89c <GUI_GetCharDistXEx>
 800e6de:	9b01      	ldr	r3, [sp, #4]
 800e6e0:	4283      	cmp	r3, r0
 800e6e2:	bfcc      	ite	gt
 800e6e4:	ebc0 0003 	rsbgt	r0, r0, r3
 800e6e8:	4620      	movle	r0, r4
 800e6ea:	b002      	add	sp, #8
 800e6ec:	bd10      	pop	{r4, pc}
	...

0800e6f0 <GUI__GetLineDistX>:
 800e6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6f2:	4a15      	ldr	r2, [pc, #84]	; (800e748 <GUI__GetLineDistX+0x58>)
 800e6f4:	9001      	str	r0, [sp, #4]
 800e6f6:	ab02      	add	r3, sp, #8
 800e6f8:	6812      	ldr	r2, [r2, #0]
 800e6fa:	f843 1d08 	str.w	r1, [r3, #-8]!
 800e6fe:	4669      	mov	r1, sp
 800e700:	4790      	blx	r2
 800e702:	9001      	str	r0, [sp, #4]
 800e704:	b1f0      	cbz	r0, 800e744 <GUI__GetLineDistX+0x54>
 800e706:	4b11      	ldr	r3, [pc, #68]	; (800e74c <GUI__GetLineDistX+0x5c>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	69db      	ldr	r3, [r3, #28]
 800e70c:	695b      	ldr	r3, [r3, #20]
 800e70e:	b10b      	cbz	r3, 800e714 <GUI__GetLineDistX+0x24>
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	b913      	cbnz	r3, 800e71a <GUI__GetLineDistX+0x2a>
 800e714:	2500      	movs	r5, #0
 800e716:	462c      	mov	r4, r5
 800e718:	e002      	b.n	800e720 <GUI__GetLineDistX+0x30>
 800e71a:	9900      	ldr	r1, [sp, #0]
 800e71c:	4798      	blx	r3
 800e71e:	e011      	b.n	800e744 <GUI__GetLineDistX+0x54>
 800e720:	9b00      	ldr	r3, [sp, #0]
 800e722:	3b01      	subs	r3, #1
 800e724:	2b00      	cmp	r3, #0
 800e726:	9300      	str	r3, [sp, #0]
 800e728:	db07      	blt.n	800e73a <GUI__GetLineDistX+0x4a>
 800e72a:	a801      	add	r0, sp, #4
 800e72c:	f003 fa72 	bl	8011c14 <GUI_UC__GetCharCodeInc>
 800e730:	4605      	mov	r5, r0
 800e732:	f000 f8a9 	bl	800e888 <GUI_GetCharDistX>
 800e736:	4404      	add	r4, r0
 800e738:	e7f2      	b.n	800e720 <GUI__GetLineDistX+0x30>
 800e73a:	4628      	mov	r0, r5
 800e73c:	f7ff ffc8 	bl	800e6d0 <GUI__GetOverlap>
 800e740:	4420      	add	r0, r4
 800e742:	e7ff      	b.n	800e744 <GUI__GetLineDistX+0x54>
 800e744:	b003      	add	sp, #12
 800e746:	bd30      	pop	{r4, r5, pc}
 800e748:	20000044 	.word	0x20000044
 800e74c:	20000038 	.word	0x20000038

0800e750 <GUI__DispLine>:
 800e750:	4b27      	ldr	r3, [pc, #156]	; (800e7f0 <GUI__DispLine+0xa0>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e756:	4605      	mov	r5, r0
 800e758:	460c      	mov	r4, r1
 800e75a:	b163      	cbz	r3, 800e776 <GUI__DispLine+0x26>
 800e75c:	2000      	movs	r0, #0
 800e75e:	f7fa fb5d 	bl	8008e1c <WM__InitIVRSearch>
 800e762:	2800      	cmp	r0, #0
 800e764:	d041      	beq.n	800e7ea <GUI__DispLine+0x9a>
 800e766:	4628      	mov	r0, r5
 800e768:	4621      	mov	r1, r4
 800e76a:	466a      	mov	r2, sp
 800e76c:	f7ff ff54 	bl	800e618 <_DispLine>
 800e770:	f7fa fa92 	bl	8008c98 <WM__GetNextIVR>
 800e774:	e7f5      	b.n	800e762 <GUI__DispLine+0x12>
 800e776:	6810      	ldr	r0, [r2, #0]
 800e778:	6851      	ldr	r1, [r2, #4]
 800e77a:	4e1e      	ldr	r6, [pc, #120]	; (800e7f4 <GUI__DispLine+0xa4>)
 800e77c:	466b      	mov	r3, sp
 800e77e:	c303      	stmia	r3!, {r0, r1}
 800e780:	6833      	ldr	r3, [r6, #0]
 800e782:	f8bd 1000 	ldrh.w	r1, [sp]
 800e786:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800e78a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e78e:	4411      	add	r1, r2
 800e790:	f8ad 1000 	strh.w	r1, [sp]
 800e794:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800e798:	4419      	add	r1, r3
 800e79a:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e79e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e7a2:	440a      	add	r2, r1
 800e7a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e7a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e7ac:	4668      	mov	r0, sp
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e7b4:	f7fa fb32 	bl	8008e1c <WM__InitIVRSearch>
 800e7b8:	6833      	ldr	r3, [r6, #0]
 800e7ba:	b940      	cbnz	r0, 800e7ce <GUI__DispLine+0x7e>
 800e7bc:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800e7be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7c0:	1a8a      	subs	r2, r1, r2
 800e7c2:	845a      	strh	r2, [r3, #34]	; 0x22
 800e7c4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800e7c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7c8:	1a8a      	subs	r2, r1, r2
 800e7ca:	849a      	strh	r2, [r3, #36]	; 0x24
 800e7cc:	e00d      	b.n	800e7ea <GUI__DispLine+0x9a>
 800e7ce:	f8bd 2000 	ldrh.w	r2, [sp]
 800e7d2:	845a      	strh	r2, [r3, #34]	; 0x22
 800e7d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e7d8:	849a      	strh	r2, [r3, #36]	; 0x24
 800e7da:	4628      	mov	r0, r5
 800e7dc:	4621      	mov	r1, r4
 800e7de:	466a      	mov	r2, sp
 800e7e0:	f7ff ff1a 	bl	800e618 <_DispLine>
 800e7e4:	f7fa fa58 	bl	8008c98 <WM__GetNextIVR>
 800e7e8:	e7e6      	b.n	800e7b8 <GUI__DispLine+0x68>
 800e7ea:	b002      	add	sp, #8
 800e7ec:	bd70      	pop	{r4, r5, r6, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20023048 	.word	0x20023048
 800e7f4:	20000038 	.word	0x20000038

0800e7f8 <GUI_GetYAdjust>:
 800e7f8:	4b0a      	ldr	r3, [pc, #40]	; (800e824 <GUI_GetYAdjust+0x2c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e7fe:	f002 020c 	and.w	r2, r2, #12
 800e802:	2a08      	cmp	r2, #8
 800e804:	d007      	beq.n	800e816 <GUI_GetYAdjust+0x1e>
 800e806:	2a0c      	cmp	r2, #12
 800e808:	d005      	beq.n	800e816 <GUI_GetYAdjust+0x1e>
 800e80a:	2a04      	cmp	r2, #4
 800e80c:	d107      	bne.n	800e81e <GUI_GetYAdjust+0x26>
 800e80e:	69db      	ldr	r3, [r3, #28]
 800e810:	7e18      	ldrb	r0, [r3, #24]
 800e812:	3801      	subs	r0, #1
 800e814:	4770      	bx	lr
 800e816:	69db      	ldr	r3, [r3, #28]
 800e818:	7e18      	ldrb	r0, [r3, #24]
 800e81a:	0840      	lsrs	r0, r0, #1
 800e81c:	4770      	bx	lr
 800e81e:	2000      	movs	r0, #0
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	20000038 	.word	0x20000038

0800e828 <GUI_GetFontDistY>:
 800e828:	4b02      	ldr	r3, [pc, #8]	; (800e834 <GUI_GetFontDistY+0xc>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	69db      	ldr	r3, [r3, #28]
 800e82e:	7e58      	ldrb	r0, [r3, #25]
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	20000038 	.word	0x20000038

0800e838 <GUI_DispNextLine>:
 800e838:	4b05      	ldr	r3, [pc, #20]	; (800e850 <GUI_DispNextLine+0x18>)
 800e83a:	b510      	push	{r4, lr}
 800e83c:	681c      	ldr	r4, [r3, #0]
 800e83e:	f7ff fff3 	bl	800e828 <GUI_GetFontDistY>
 800e842:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800e844:	4418      	add	r0, r3
 800e846:	8c23      	ldrh	r3, [r4, #32]
 800e848:	84a0      	strh	r0, [r4, #36]	; 0x24
 800e84a:	8463      	strh	r3, [r4, #34]	; 0x22
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop
 800e850:	20000038 	.word	0x20000038

0800e854 <GL_DispChar>:
 800e854:	280a      	cmp	r0, #10
 800e856:	b510      	push	{r4, lr}
 800e858:	4604      	mov	r4, r0
 800e85a:	d103      	bne.n	800e864 <GL_DispChar+0x10>
 800e85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e860:	f7ff bfea 	b.w	800e838 <GUI_DispNextLine>
 800e864:	280d      	cmp	r0, #13
 800e866:	d009      	beq.n	800e87c <GL_DispChar+0x28>
 800e868:	4b05      	ldr	r3, [pc, #20]	; (800e880 <GL_DispChar+0x2c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4798      	blx	r3
 800e872:	4b04      	ldr	r3, [pc, #16]	; (800e884 <GL_DispChar+0x30>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	b10b      	cbz	r3, 800e87c <GL_DispChar+0x28>
 800e878:	4620      	mov	r0, r4
 800e87a:	4798      	blx	r3
 800e87c:	bd10      	pop	{r4, pc}
 800e87e:	bf00      	nop
 800e880:	20000038 	.word	0x20000038
 800e884:	20023060 	.word	0x20023060

0800e888 <GUI_GetCharDistX>:
 800e888:	b508      	push	{r3, lr}
 800e88a:	4b03      	ldr	r3, [pc, #12]	; (800e898 <GUI_GetCharDistX+0x10>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	69db      	ldr	r3, [r3, #28]
 800e890:	2100      	movs	r1, #0
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	4798      	blx	r3
 800e896:	bd08      	pop	{r3, pc}
 800e898:	20000038 	.word	0x20000038

0800e89c <GUI_GetCharDistXEx>:
 800e89c:	b508      	push	{r3, lr}
 800e89e:	4b03      	ldr	r3, [pc, #12]	; (800e8ac <GUI_GetCharDistXEx+0x10>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69db      	ldr	r3, [r3, #28]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	4798      	blx	r3
 800e8a8:	bd08      	pop	{r3, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20000038 	.word	0x20000038

0800e8b0 <_PushFreeBlock>:
 800e8b0:	4b07      	ldr	r3, [pc, #28]	; (800e8d0 <_PushFreeBlock+0x20>)
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e8b6:	3201      	adds	r2, #1
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	605a      	str	r2, [r3, #4]
 800e8bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8be:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800e8c2:	6061      	str	r1, [r4, #4]
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800e8ca:	6258      	str	r0, [r3, #36]	; 0x24
 800e8cc:	bd10      	pop	{r4, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20023084 	.word	0x20023084

0800e8d4 <_OnExit>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	4d0b      	ldr	r5, [pc, #44]	; (800e904 <_OnExit+0x30>)
 800e8d8:	2400      	movs	r4, #0
 800e8da:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800e8de:	4621      	mov	r1, r4
 800e8e0:	2280      	movs	r2, #128	; 0x80
 800e8e2:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 800e8e6:	f7fd f98d 	bl	800bc04 <GUI__memset>
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	22c0      	movs	r2, #192	; 0xc0
 800e8f0:	f7fd f988 	bl	800bc04 <GUI__memset>
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4804      	ldr	r0, [pc, #16]	; (800e908 <_OnExit+0x34>)
 800e8f8:	220c      	movs	r2, #12
 800e8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8fe:	f7fd b981 	b.w	800bc04 <GUI__memset>
 800e902:	bf00      	nop
 800e904:	20023084 	.word	0x20023084
 800e908:	20022c1c 	.word	0x20022c1c

0800e90c <_RemoveFreeBlock>:
 800e90c:	b510      	push	{r4, lr}
 800e90e:	6842      	ldr	r2, [r0, #4]
 800e910:	230f      	movs	r3, #15
 800e912:	490d      	ldr	r1, [pc, #52]	; (800e948 <_RemoveFreeBlock+0x3c>)
 800e914:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800e918:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800e91a:	42a2      	cmp	r2, r4
 800e91c:	d203      	bcs.n	800e926 <_RemoveFreeBlock+0x1a>
 800e91e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e922:	d2f6      	bcs.n	800e912 <_RemoveFreeBlock+0x6>
 800e924:	bd10      	pop	{r4, pc}
 800e926:	2b0f      	cmp	r3, #15
 800e928:	d80c      	bhi.n	800e944 <_RemoveFreeBlock+0x38>
 800e92a:	680c      	ldr	r4, [r1, #0]
 800e92c:	1aa2      	subs	r2, r4, r2
 800e92e:	600a      	str	r2, [r1, #0]
 800e930:	6882      	ldr	r2, [r0, #8]
 800e932:	68c0      	ldr	r0, [r0, #12]
 800e934:	b102      	cbz	r2, 800e938 <_RemoveFreeBlock+0x2c>
 800e936:	6050      	str	r0, [r2, #4]
 800e938:	b108      	cbz	r0, 800e93e <_RemoveFreeBlock+0x32>
 800e93a:	6002      	str	r2, [r0, #0]
 800e93c:	bd10      	pop	{r4, pc}
 800e93e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e942:	645a      	str	r2, [r3, #68]	; 0x44
 800e944:	bd10      	pop	{r4, pc}
 800e946:	bf00      	nop
 800e948:	20023084 	.word	0x20023084

0800e94c <_AddFreeMemory>:
 800e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e94e:	4e26      	ldr	r6, [pc, #152]	; (800e9e8 <_AddFreeMemory+0x9c>)
 800e950:	68f3      	ldr	r3, [r6, #12]
 800e952:	1e5a      	subs	r2, r3, #1
 800e954:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e956:	4605      	mov	r5, r0
 800e958:	4413      	add	r3, r2
 800e95a:	1808      	adds	r0, r1, r0
 800e95c:	4298      	cmp	r0, r3
 800e95e:	460c      	mov	r4, r1
 800e960:	d805      	bhi.n	800e96e <_AddFreeMemory+0x22>
 800e962:	594b      	ldr	r3, [r1, r5]
 800e964:	b91b      	cbnz	r3, 800e96e <_AddFreeMemory+0x22>
 800e966:	6843      	ldr	r3, [r0, #4]
 800e968:	441d      	add	r5, r3
 800e96a:	f7ff ffcf 	bl	800e90c <_RemoveFreeBlock>
 800e96e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800e970:	429c      	cmp	r4, r3
 800e972:	d90a      	bls.n	800e98a <_AddFreeMemory+0x3e>
 800e974:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800e978:	1be7      	subs	r7, r4, r7
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	b92b      	cbnz	r3, 800e98a <_AddFreeMemory+0x3e>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4638      	mov	r0, r7
 800e982:	441d      	add	r5, r3
 800e984:	f7ff ffc2 	bl	800e90c <_RemoveFreeBlock>
 800e988:	463c      	mov	r4, r7
 800e98a:	230f      	movs	r3, #15
 800e98c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e992:	4295      	cmp	r5, r2
 800e994:	d203      	bcs.n	800e99e <_AddFreeMemory+0x52>
 800e996:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800e99a:	d2f7      	bcs.n	800e98c <_AddFreeMemory+0x40>
 800e99c:	e022      	b.n	800e9e4 <_AddFreeMemory+0x98>
 800e99e:	2b0f      	cmp	r3, #15
 800e9a0:	d820      	bhi.n	800e9e4 <_AddFreeMemory+0x98>
 800e9a2:	3308      	adds	r3, #8
 800e9a4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800e9a8:	1961      	adds	r1, r4, r5
 800e9aa:	6852      	ldr	r2, [r2, #4]
 800e9ac:	60a2      	str	r2, [r4, #8]
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	e884 0021 	stmia.w	r4, {r0, r5}
 800e9b4:	6124      	str	r4, [r4, #16]
 800e9b6:	f841 5c04 	str.w	r5, [r1, #-4]
 800e9ba:	f104 0108 	add.w	r1, r4, #8
 800e9be:	b102      	cbz	r2, 800e9c2 <_AddFreeMemory+0x76>
 800e9c0:	6051      	str	r1, [r2, #4]
 800e9c2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e9c6:	60e0      	str	r0, [r4, #12]
 800e9c8:	6059      	str	r1, [r3, #4]
 800e9ca:	6833      	ldr	r3, [r6, #0]
 800e9cc:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800e9d0:	4a05      	ldr	r2, [pc, #20]	; (800e9e8 <_AddFreeMemory+0x9c>)
 800e9d2:	442b      	add	r3, r5
 800e9d4:	6033      	str	r3, [r6, #0]
 800e9d6:	b929      	cbnz	r1, 800e9e4 <_AddFreeMemory+0x98>
 800e9d8:	68d1      	ldr	r1, [r2, #12]
 800e9da:	1acb      	subs	r3, r1, r3
 800e9dc:	6891      	ldr	r1, [r2, #8]
 800e9de:	4299      	cmp	r1, r3
 800e9e0:	bf38      	it	cc
 800e9e2:	6093      	strcc	r3, [r2, #8]
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e8:	20023084 	.word	0x20023084

0800e9ec <_RemoveHoles>:
 800e9ec:	4b25      	ldr	r3, [pc, #148]	; (800ea84 <_RemoveHoles+0x98>)
 800e9ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f2:	68da      	ldr	r2, [r3, #12]
 800e9f4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800e9f6:	3a01      	subs	r2, #1
 800e9f8:	4682      	mov	sl, r0
 800e9fa:	eb02 0904 	add.w	r9, r2, r4
 800e9fe:	469b      	mov	fp, r3
 800ea00:	e894 0028 	ldmia.w	r4, {r3, r5}
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d133      	bne.n	800ea70 <_RemoveHoles+0x84>
 800ea08:	eb04 0805 	add.w	r8, r4, r5
 800ea0c:	45c8      	cmp	r8, r9
 800ea0e:	d22f      	bcs.n	800ea70 <_RemoveHoles+0x84>
 800ea10:	f854 c005 	ldr.w	ip, [r4, r5]
 800ea14:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800ea18:	f1bc 0f00 	cmp.w	ip, #0
 800ea1c:	d028      	beq.n	800ea70 <_RemoveHoles+0x84>
 800ea1e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800ea22:	4f18      	ldr	r7, [pc, #96]	; (800ea84 <_RemoveHoles+0x98>)
 800ea24:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d121      	bne.n	800ea70 <_RemoveHoles+0x84>
 800ea2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2e:	4620      	mov	r0, r4
 800ea30:	e88d 1008 	stmia.w	sp, {r3, ip}
 800ea34:	f7ff ff6a 	bl	800e90c <_RemoveFreeBlock>
 800ea38:	f8d8 1000 	ldr.w	r1, [r8]
 800ea3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ea42:	4620      	mov	r0, r4
 800ea44:	6054      	str	r4, [r2, #4]
 800ea46:	4641      	mov	r1, r8
 800ea48:	4632      	mov	r2, r6
 800ea4a:	f003 ff93 	bl	8012974 <memmove>
 800ea4e:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800ea52:	459c      	cmp	ip, r3
 800ea54:	d102      	bne.n	800ea5c <_RemoveHoles+0x70>
 800ea56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea58:	1b5b      	subs	r3, r3, r5
 800ea5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	19a1      	adds	r1, r4, r6
 800ea60:	f7ff ff74 	bl	800e94c <_AddFreeMemory>
 800ea64:	f1ba 0f00 	cmp.w	sl, #0
 800ea68:	d001      	beq.n	800ea6e <_RemoveHoles+0x82>
 800ea6a:	4582      	cmp	sl, r0
 800ea6c:	d905      	bls.n	800ea7a <_RemoveHoles+0x8e>
 800ea6e:	4635      	mov	r5, r6
 800ea70:	442c      	add	r4, r5
 800ea72:	454c      	cmp	r4, r9
 800ea74:	d3c4      	bcc.n	800ea00 <_RemoveHoles+0x14>
 800ea76:	2001      	movs	r0, #1
 800ea78:	e000      	b.n	800ea7c <_RemoveHoles+0x90>
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	b003      	add	sp, #12
 800ea7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea82:	bf00      	nop
 800ea84:	20023084 	.word	0x20023084

0800ea88 <GUI_ALLOC_FreeFixedBlock>:
 800ea88:	b128      	cbz	r0, 800ea96 <GUI_ALLOC_FreeFixedBlock+0xe>
 800ea8a:	4a03      	ldr	r2, [pc, #12]	; (800ea98 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800ea8c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ea8e:	6003      	str	r3, [r0, #0]
 800ea90:	b103      	cbz	r3, 800ea94 <GUI_ALLOC_FreeFixedBlock+0xc>
 800ea92:	6058      	str	r0, [r3, #4]
 800ea94:	63d0      	str	r0, [r2, #60]	; 0x3c
 800ea96:	4770      	bx	lr
 800ea98:	20023084 	.word	0x20023084

0800ea9c <GUI_ALLOC_h2p>:
 800ea9c:	b128      	cbz	r0, 800eaaa <GUI_ALLOC_h2p+0xe>
 800ea9e:	4b03      	ldr	r3, [pc, #12]	; (800eaac <GUI_ALLOC_h2p+0x10>)
 800eaa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800eaa6:	6840      	ldr	r0, [r0, #4]
 800eaa8:	3008      	adds	r0, #8
 800eaaa:	4770      	bx	lr
 800eaac:	20023084 	.word	0x20023084

0800eab0 <GUI_ALLOC_LockH>:
 800eab0:	4b05      	ldr	r3, [pc, #20]	; (800eac8 <GUI_ALLOC_LockH+0x18>)
 800eab2:	69d9      	ldr	r1, [r3, #28]
 800eab4:	3101      	adds	r1, #1
 800eab6:	61d9      	str	r1, [r3, #28]
 800eab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaba:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800eabe:	3101      	adds	r1, #1
 800eac0:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800eac4:	f7ff bfea 	b.w	800ea9c <GUI_ALLOC_h2p>
 800eac8:	20023084 	.word	0x20023084

0800eacc <GUI_ALLOC_UnlockH>:
 800eacc:	b530      	push	{r4, r5, lr}
 800eace:	6802      	ldr	r2, [r0, #0]
 800ead0:	4b09      	ldr	r3, [pc, #36]	; (800eaf8 <GUI_ALLOC_UnlockH+0x2c>)
 800ead2:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800ead6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ead8:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800eadc:	2c01      	cmp	r4, #1
 800eade:	d903      	bls.n	800eae8 <GUI_ALLOC_UnlockH+0x1c>
 800eae0:	69dd      	ldr	r5, [r3, #28]
 800eae2:	b10d      	cbz	r5, 800eae8 <GUI_ALLOC_UnlockH+0x1c>
 800eae4:	3d01      	subs	r5, #1
 800eae6:	61dd      	str	r5, [r3, #28]
 800eae8:	3c01      	subs	r4, #1
 800eaea:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800eaee:	2300      	movs	r3, #0
 800eaf0:	6003      	str	r3, [r0, #0]
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	bd30      	pop	{r4, r5, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20023084 	.word	0x20023084

0800eafc <GUI_ALLOC_AssignMemory>:
 800eafc:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <GUI_ALLOC_AssignMemory+0xc>)
 800eafe:	f021 0103 	bic.w	r1, r1, #3
 800eb02:	6018      	str	r0, [r3, #0]
 800eb04:	6059      	str	r1, [r3, #4]
 800eb06:	4770      	bx	lr
 800eb08:	20022c1c 	.word	0x20022c1c

0800eb0c <GUI_ALLOC_Free>:
 800eb0c:	b510      	push	{r4, lr}
 800eb0e:	4604      	mov	r4, r0
 800eb10:	b180      	cbz	r0, 800eb34 <GUI_ALLOC_Free+0x28>
 800eb12:	4b09      	ldr	r3, [pc, #36]	; (800eb38 <GUI_ALLOC_Free+0x2c>)
 800eb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb16:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800eb1a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 800eb1e:	2b01      	cmp	r3, #1
 800eb20:	d108      	bne.n	800eb34 <GUI_ALLOC_Free+0x28>
 800eb22:	6851      	ldr	r1, [r2, #4]
 800eb24:	6848      	ldr	r0, [r1, #4]
 800eb26:	f7ff ff11 	bl	800e94c <_AddFreeMemory>
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb30:	f7ff bebe 	b.w	800e8b0 <_PushFreeBlock>
 800eb34:	bd10      	pop	{r4, pc}
 800eb36:	bf00      	nop
 800eb38:	20023084 	.word	0x20023084

0800eb3c <_EnlargeBlocks>:
 800eb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb40:	4c22      	ldr	r4, [pc, #136]	; (800ebcc <_EnlargeBlocks+0x90>)
 800eb42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800eb44:	b93b      	cbnz	r3, 800eb56 <_EnlargeBlocks+0x1a>
 800eb46:	4b22      	ldr	r3, [pc, #136]	; (800ebd0 <_EnlargeBlocks+0x94>)
 800eb48:	689d      	ldr	r5, [r3, #8]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	3508      	adds	r5, #8
 800eb4e:	fbb3 f5f5 	udiv	r5, r3, r5
 800eb52:	3502      	adds	r5, #2
 800eb54:	e003      	b.n	800eb5e <_EnlargeBlocks+0x22>
 800eb56:	6923      	ldr	r3, [r4, #16]
 800eb58:	1d1d      	adds	r5, r3, #4
 800eb5a:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800eb5e:	00e8      	lsls	r0, r5, #3
 800eb60:	f000 f978 	bl	800ee54 <_Alloc>
 800eb64:	4680      	mov	r8, r0
 800eb66:	b360      	cbz	r0, 800ebc2 <_EnlargeBlocks+0x86>
 800eb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6a:	6922      	ldr	r2, [r4, #16]
 800eb6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800eb6e:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800eb72:	00d2      	lsls	r2, r2, #3
 800eb74:	685e      	ldr	r6, [r3, #4]
 800eb76:	3608      	adds	r6, #8
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f003 fef0 	bl	801295e <memcpy>
 800eb7e:	6922      	ldr	r2, [r4, #16]
 800eb80:	6366      	str	r6, [r4, #52]	; 0x34
 800eb82:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800eb86:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800eb8a:	3104      	adds	r1, #4
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	1e68      	subs	r0, r5, #1
 800eb90:	4283      	cmp	r3, r0
 800eb92:	f101 0108 	add.w	r1, r1, #8
 800eb96:	d203      	bcs.n	800eba0 <_EnlargeBlocks+0x64>
 800eb98:	3301      	adds	r3, #1
 800eb9a:	f841 3c08 	str.w	r3, [r1, #-8]
 800eb9e:	e7f6      	b.n	800eb8e <_EnlargeBlocks+0x52>
 800eba0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800eba4:	2600      	movs	r6, #0
 800eba6:	605e      	str	r6, [r3, #4]
 800eba8:	6863      	ldr	r3, [r4, #4]
 800ebaa:	6262      	str	r2, [r4, #36]	; 0x24
 800ebac:	1a9b      	subs	r3, r3, r2
 800ebae:	442b      	add	r3, r5
 800ebb0:	6063      	str	r3, [r4, #4]
 800ebb2:	6125      	str	r5, [r4, #16]
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	b13f      	cbz	r7, 800ebc8 <_EnlargeBlocks+0x8c>
 800ebb8:	f7ff ffa8 	bl	800eb0c <GUI_ALLOC_Free>
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc2:	2001      	movs	r0, #1
 800ebc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebcc:	20023084 	.word	0x20023084
 800ebd0:	20022c1c 	.word	0x20022c1c

0800ebd4 <_InitOnce>:
 800ebd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd6:	4e58      	ldr	r6, [pc, #352]	; (800ed38 <_InitOnce+0x164>)
 800ebd8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800ebdc:	2900      	cmp	r1, #0
 800ebde:	f040 80aa 	bne.w	800ed36 <_InitOnce+0x162>
 800ebe2:	4d56      	ldr	r5, [pc, #344]	; (800ed3c <_InitOnce+0x168>)
 800ebe4:	686a      	ldr	r2, [r5, #4]
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 800ebec:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800ebf0:	bf28      	it	cs
 800ebf2:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 800ebf6:	682b      	ldr	r3, [r5, #0]
 800ebf8:	0894      	lsrs	r4, r2, #2
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	42a0      	cmp	r0, r4
 800ebfe:	d00c      	beq.n	800ec1a <_InitOnce+0x46>
 800ec00:	1847      	adds	r7, r0, r1
 800ec02:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ec06:	fbb7 fefe 	udiv	lr, r7, lr
 800ec0a:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ec0e:	ebce 0707 	rsb	r7, lr, r7
 800ec12:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 800ec16:	3001      	adds	r0, #1
 800ec18:	e7f0      	b.n	800ebfc <_InitOnce+0x28>
 800ec1a:	2000      	movs	r0, #0
 800ec1c:	42a0      	cmp	r0, r4
 800ec1e:	d016      	beq.n	800ec4e <_InitOnce+0x7a>
 800ec20:	1847      	adds	r7, r0, r1
 800ec22:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ec26:	fbb7 fefe 	udiv	lr, r7, lr
 800ec2a:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ec2e:	ebce 0e07 	rsb	lr, lr, r7
 800ec32:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800ec36:	4577      	cmp	r7, lr
 800ec38:	d007      	beq.n	800ec4a <_InitOnce+0x76>
 800ec3a:	68aa      	ldr	r2, [r5, #8]
 800ec3c:	4b3f      	ldr	r3, [pc, #252]	; (800ed3c <_InitOnce+0x168>)
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	d155      	bne.n	800ecee <_InitOnce+0x11a>
 800ec42:	685a      	ldr	r2, [r3, #4]
 800ec44:	0892      	lsrs	r2, r2, #2
 800ec46:	609a      	str	r2, [r3, #8]
 800ec48:	e051      	b.n	800ecee <_InitOnce+0x11a>
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	e7e6      	b.n	800ec1c <_InitOnce+0x48>
 800ec4e:	3101      	adds	r1, #1
 800ec50:	2902      	cmp	r1, #2
 800ec52:	d1d2      	bne.n	800ebfa <_InitOnce+0x26>
 800ec54:	0854      	lsrs	r4, r2, #1
 800ec56:	2100      	movs	r1, #0
 800ec58:	2000      	movs	r0, #0
 800ec5a:	42a0      	cmp	r0, r4
 800ec5c:	d00c      	beq.n	800ec78 <_InitOnce+0xa4>
 800ec5e:	1847      	adds	r7, r0, r1
 800ec60:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ec64:	fbb7 fefe 	udiv	lr, r7, lr
 800ec68:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ec6c:	ebce 0707 	rsb	r7, lr, r7
 800ec70:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 800ec74:	3001      	adds	r0, #1
 800ec76:	e7f0      	b.n	800ec5a <_InitOnce+0x86>
 800ec78:	2000      	movs	r0, #0
 800ec7a:	42a0      	cmp	r0, r4
 800ec7c:	d00f      	beq.n	800ec9e <_InitOnce+0xca>
 800ec7e:	1847      	adds	r7, r0, r1
 800ec80:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800ec84:	fbb7 fefe 	udiv	lr, r7, lr
 800ec88:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800ec8c:	ebce 0707 	rsb	r7, lr, r7
 800ec90:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 800ec94:	b2bf      	uxth	r7, r7
 800ec96:	45bc      	cmp	ip, r7
 800ec98:	d1cf      	bne.n	800ec3a <_InitOnce+0x66>
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	e7ed      	b.n	800ec7a <_InitOnce+0xa6>
 800ec9e:	3101      	adds	r1, #1
 800eca0:	2902      	cmp	r1, #2
 800eca2:	d1d9      	bne.n	800ec58 <_InitOnce+0x84>
 800eca4:	2100      	movs	r1, #0
 800eca6:	2000      	movs	r0, #0
 800eca8:	4290      	cmp	r0, r2
 800ecaa:	d007      	beq.n	800ecbc <_InitOnce+0xe8>
 800ecac:	1844      	adds	r4, r0, r1
 800ecae:	27ff      	movs	r7, #255	; 0xff
 800ecb0:	fbb4 f7f7 	udiv	r7, r4, r7
 800ecb4:	443c      	add	r4, r7
 800ecb6:	541c      	strb	r4, [r3, r0]
 800ecb8:	3001      	adds	r0, #1
 800ecba:	e7f5      	b.n	800eca8 <_InitOnce+0xd4>
 800ecbc:	2000      	movs	r0, #0
 800ecbe:	4290      	cmp	r0, r2
 800ecc0:	d00b      	beq.n	800ecda <_InitOnce+0x106>
 800ecc2:	1844      	adds	r4, r0, r1
 800ecc4:	27ff      	movs	r7, #255	; 0xff
 800ecc6:	fbb4 f7f7 	udiv	r7, r4, r7
 800ecca:	443c      	add	r4, r7
 800eccc:	5c1f      	ldrb	r7, [r3, r0]
 800ecce:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 800ecd2:	42a7      	cmp	r7, r4
 800ecd4:	d1b1      	bne.n	800ec3a <_InitOnce+0x66>
 800ecd6:	3001      	adds	r0, #1
 800ecd8:	e7f1      	b.n	800ecbe <_InitOnce+0xea>
 800ecda:	3101      	adds	r1, #1
 800ecdc:	2902      	cmp	r1, #2
 800ecde:	d1e2      	bne.n	800eca6 <_InitOnce+0xd2>
 800ece0:	2100      	movs	r1, #0
 800ece2:	4291      	cmp	r1, r2
 800ece4:	d0a9      	beq.n	800ec3a <_InitOnce+0x66>
 800ece6:	2000      	movs	r0, #0
 800ece8:	5458      	strb	r0, [r3, r1]
 800ecea:	3101      	adds	r1, #1
 800ecec:	e7f9      	b.n	800ece2 <_InitOnce+0x10e>
 800ecee:	4814      	ldr	r0, [pc, #80]	; (800ed40 <_InitOnce+0x16c>)
 800ecf0:	4b14      	ldr	r3, [pc, #80]	; (800ed44 <_InitOnce+0x170>)
 800ecf2:	6003      	str	r3, [r0, #0]
 800ecf4:	f7ff fb3e 	bl	800e374 <GUI__RegisterExit>
 800ecf8:	235a      	movs	r3, #90	; 0x5a
 800ecfa:	6233      	str	r3, [r6, #32]
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	2110      	movs	r1, #16
 800ed00:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800ed04:	4099      	lsls	r1, r3
 800ed06:	3301      	adds	r3, #1
 800ed08:	2b10      	cmp	r3, #16
 800ed0a:	4c0b      	ldr	r4, [pc, #44]	; (800ed38 <_InitOnce+0x164>)
 800ed0c:	6411      	str	r1, [r2, #64]	; 0x40
 800ed0e:	d1f6      	bne.n	800ecfe <_InitOnce+0x12a>
 800ed10:	6868      	ldr	r0, [r5, #4]
 800ed12:	6829      	ldr	r1, [r5, #0]
 800ed14:	63a1      	str	r1, [r4, #56]	; 0x38
 800ed16:	2302      	movs	r3, #2
 800ed18:	6123      	str	r3, [r4, #16]
 800ed1a:	f1a0 0314 	sub.w	r3, r0, #20
 800ed1e:	440b      	add	r3, r1
 800ed20:	2501      	movs	r5, #1
 800ed22:	6363      	str	r3, [r4, #52]	; 0x34
 800ed24:	60e0      	str	r0, [r4, #12]
 800ed26:	605d      	str	r5, [r3, #4]
 800ed28:	6265      	str	r5, [r4, #36]	; 0x24
 800ed2a:	6065      	str	r5, [r4, #4]
 800ed2c:	f7ff fe0e 	bl	800e94c <_AddFreeMemory>
 800ed30:	f7ff ff04 	bl	800eb3c <_EnlargeBlocks>
 800ed34:	6325      	str	r5, [r4, #48]	; 0x30
 800ed36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed38:	20023084 	.word	0x20023084
 800ed3c:	20022c1c 	.word	0x20022c1c
 800ed40:	20022c28 	.word	0x20022c28
 800ed44:	0800e8d5 	.word	0x0800e8d5

0800ed48 <GUI_ALLOC_GetFixedBlock>:
 800ed48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	4e26      	ldr	r6, [pc, #152]	; (800ede8 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800ed50:	3503      	adds	r5, #3
 800ed52:	f7ff ff3f 	bl	800ebd4 <_InitOnce>
 800ed56:	f025 0503 	bic.w	r5, r5, #3
 800ed5a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800ed5c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800ed5e:	3504      	adds	r5, #4
 800ed60:	429d      	cmp	r5, r3
 800ed62:	bf38      	it	cc
 800ed64:	461d      	movcc	r5, r3
 800ed66:	4614      	mov	r4, r2
 800ed68:	b12c      	cbz	r4, 800ed76 <GUI_ALLOC_GetFixedBlock+0x2e>
 800ed6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ed6e:	42ab      	cmp	r3, r5
 800ed70:	d02c      	beq.n	800edcc <GUI_ALLOC_GetFixedBlock+0x84>
 800ed72:	6824      	ldr	r4, [r4, #0]
 800ed74:	e7f8      	b.n	800ed68 <GUI_ALLOC_GetFixedBlock+0x20>
 800ed76:	68f3      	ldr	r3, [r6, #12]
 800ed78:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800ed7a:	eb02 0803 	add.w	r8, r2, r3
 800ed7e:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800ed82:	ebc7 0708 	rsb	r7, r7, r8
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	b133      	cbz	r3, 800ed98 <GUI_ALLOC_GetFixedBlock+0x50>
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f7ff fe2e 	bl	800e9ec <_RemoveHoles>
 800ed90:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800ed94:	ebc7 0708 	rsb	r7, r7, r8
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	bb13      	cbnz	r3, 800ede2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	42ab      	cmp	r3, r5
 800eda0:	db1f      	blt.n	800ede2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800eda2:	4638      	mov	r0, r7
 800eda4:	1d1c      	adds	r4, r3, #4
 800eda6:	f7ff fdb1 	bl	800e90c <_RemoveFreeBlock>
 800edaa:	68f3      	ldr	r3, [r6, #12]
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	1b5b      	subs	r3, r3, r5
 800edb0:	60f3      	str	r3, [r6, #12]
 800edb2:	6973      	ldr	r3, [r6, #20]
 800edb4:	1b64      	subs	r4, r4, r5
 800edb6:	442b      	add	r3, r5
 800edb8:	1b40      	subs	r0, r0, r5
 800edba:	443c      	add	r4, r7
 800edbc:	6173      	str	r3, [r6, #20]
 800edbe:	d002      	beq.n	800edc6 <GUI_ALLOC_GetFixedBlock+0x7e>
 800edc0:	4639      	mov	r1, r7
 800edc2:	f7ff fdc3 	bl	800e94c <_AddFreeMemory>
 800edc6:	f844 5c04 	str.w	r5, [r4, #-4]
 800edca:	e00a      	b.n	800ede2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	b10b      	cbz	r3, 800edd4 <GUI_ALLOC_GetFixedBlock+0x8c>
 800edd0:	6861      	ldr	r1, [r4, #4]
 800edd2:	6059      	str	r1, [r3, #4]
 800edd4:	6861      	ldr	r1, [r4, #4]
 800edd6:	b101      	cbz	r1, 800edda <GUI_ALLOC_GetFixedBlock+0x92>
 800edd8:	600b      	str	r3, [r1, #0]
 800edda:	42a2      	cmp	r2, r4
 800eddc:	d101      	bne.n	800ede2 <GUI_ALLOC_GetFixedBlock+0x9a>
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	63f3      	str	r3, [r6, #60]	; 0x3c
 800ede2:	4620      	mov	r0, r4
 800ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede8:	20023084 	.word	0x20023084

0800edec <GUI_ALLOC_GetMaxSize>:
 800edec:	b508      	push	{r3, lr}
 800edee:	f7ff fef1 	bl	800ebd4 <_InitOnce>
 800edf2:	2200      	movs	r2, #0
 800edf4:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <GUI_ALLOC_GetMaxSize+0x38>)
 800edf6:	4413      	add	r3, r2
 800edf8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800edfc:	b113      	cbz	r3, 800ee04 <GUI_ALLOC_GetMaxSize+0x18>
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	2000      	movs	r0, #0
 800ee02:	e00b      	b.n	800ee1c <GUI_ALLOC_GetMaxSize+0x30>
 800ee04:	3a08      	subs	r2, #8
 800ee06:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800ee0a:	d1f3      	bne.n	800edf4 <GUI_ALLOC_GetMaxSize+0x8>
 800ee0c:	e7f8      	b.n	800ee00 <GUI_ALLOC_GetMaxSize+0x14>
 800ee0e:	685a      	ldr	r2, [r3, #4]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	4290      	cmp	r0, r2
 800ee14:	bf38      	it	cc
 800ee16:	4610      	movcc	r0, r2
 800ee18:	b113      	cbz	r3, 800ee20 <GUI_ALLOC_GetMaxSize+0x34>
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1f6      	bne.n	800ee0e <GUI_ALLOC_GetMaxSize+0x22>
 800ee20:	380c      	subs	r0, #12
 800ee22:	bd08      	pop	{r3, pc}
 800ee24:	20023084 	.word	0x20023084

0800ee28 <GUI_ALLOC_RequestSize>:
 800ee28:	b508      	push	{r3, lr}
 800ee2a:	f7ff ffdf 	bl	800edec <GUI_ALLOC_GetMaxSize>
 800ee2e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800ee32:	f04f 0364 	mov.w	r3, #100	; 0x64
 800ee36:	4a06      	ldr	r2, [pc, #24]	; (800ee50 <GUI_ALLOC_RequestSize+0x28>)
 800ee38:	d904      	bls.n	800ee44 <GUI_ALLOC_RequestSize+0x1c>
 800ee3a:	fb90 f0f3 	sdiv	r0, r0, r3
 800ee3e:	6a13      	ldr	r3, [r2, #32]
 800ee40:	4358      	muls	r0, r3
 800ee42:	bd08      	pop	{r3, pc}
 800ee44:	6a12      	ldr	r2, [r2, #32]
 800ee46:	4350      	muls	r0, r2
 800ee48:	fbb0 f0f3 	udiv	r0, r0, r3
 800ee4c:	bd08      	pop	{r3, pc}
 800ee4e:	bf00      	nop
 800ee50:	20023084 	.word	0x20023084

0800ee54 <_Alloc>:
 800ee54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee58:	4d38      	ldr	r5, [pc, #224]	; (800ef3c <_Alloc+0xe8>)
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	f7ff feba 	bl	800ebd4 <_InitOnce>
 800ee60:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800ee62:	682b      	ldr	r3, [r5, #0]
 800ee64:	42bc      	cmp	r4, r7
 800ee66:	bf24      	itt	cs
 800ee68:	1ce7      	addcs	r7, r4, #3
 800ee6a:	f027 0703 	biccs.w	r7, r7, #3
 800ee6e:	370c      	adds	r7, #12
 800ee70:	429f      	cmp	r7, r3
 800ee72:	4c32      	ldr	r4, [pc, #200]	; (800ef3c <_Alloc+0xe8>)
 800ee74:	d83e      	bhi.n	800eef4 <_Alloc+0xa0>
 800ee76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ee78:	6862      	ldr	r2, [r4, #4]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d90f      	bls.n	800ee9e <_Alloc+0x4a>
 800ee7e:	686b      	ldr	r3, [r5, #4]
 800ee80:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800ee82:	3b01      	subs	r3, #1
 800ee84:	606b      	str	r3, [r5, #4]
 800ee86:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ee88:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800ee8c:	eb03 0209 	add.w	r2, r3, r9
 800ee90:	6852      	ldr	r2, [r2, #4]
 800ee92:	626a      	str	r2, [r5, #36]	; 0x24
 800ee94:	2201      	movs	r2, #1
 800ee96:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800ee9a:	b956      	cbnz	r6, 800eeb2 <_Alloc+0x5e>
 800ee9c:	e02a      	b.n	800eef4 <_Alloc+0xa0>
 800ee9e:	3b01      	subs	r3, #1
 800eea0:	6323      	str	r3, [r4, #48]	; 0x30
 800eea2:	f7ff fe4b 	bl	800eb3c <_EnlargeBlocks>
 800eea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eea8:	3301      	adds	r3, #1
 800eeaa:	6323      	str	r3, [r4, #48]	; 0x30
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d0e6      	beq.n	800ee7e <_Alloc+0x2a>
 800eeb0:	e020      	b.n	800eef4 <_Alloc+0xa0>
 800eeb2:	230f      	movs	r3, #15
 800eeb4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800eeb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800eeba:	4297      	cmp	r7, r2
 800eebc:	d20c      	bcs.n	800eed8 <_Alloc+0x84>
 800eebe:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800eec2:	d2f7      	bcs.n	800eeb4 <_Alloc+0x60>
 800eec4:	e008      	b.n	800eed8 <_Alloc+0x84>
 800eec6:	6894      	ldr	r4, [r2, #8]
 800eec8:	b12c      	cbz	r4, 800eed6 <_Alloc+0x82>
 800eeca:	6862      	ldr	r2, [r4, #4]
 800eecc:	4297      	cmp	r7, r2
 800eece:	d914      	bls.n	800eefa <_Alloc+0xa6>
 800eed0:	68a2      	ldr	r2, [r4, #8]
 800eed2:	2a00      	cmp	r2, #0
 800eed4:	d1f7      	bne.n	800eec6 <_Alloc+0x72>
 800eed6:	3301      	adds	r3, #1
 800eed8:	2b0f      	cmp	r3, #15
 800eeda:	d803      	bhi.n	800eee4 <_Alloc+0x90>
 800eedc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800eee0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800eee2:	e7f6      	b.n	800eed2 <_Alloc+0x7e>
 800eee4:	4638      	mov	r0, r7
 800eee6:	f7ff fd81 	bl	800e9ec <_RemoveHoles>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d0e1      	beq.n	800eeb2 <_Alloc+0x5e>
 800eeee:	4630      	mov	r0, r6
 800eef0:	f7ff fcde 	bl	800e8b0 <_PushFreeBlock>
 800eef4:	2000      	movs	r0, #0
 800eef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eefa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800eefe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800ef00:	ebc7 0208 	rsb	r2, r7, r8
 800ef04:	330c      	adds	r3, #12
 800ef06:	4620      	mov	r0, r4
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	bf38      	it	cc
 800ef0c:	4647      	movcc	r7, r8
 800ef0e:	f7ff fcfd 	bl	800e90c <_RemoveFreeBlock>
 800ef12:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ef14:	444b      	add	r3, r9
 800ef16:	19e1      	adds	r1, r4, r7
 800ef18:	605c      	str	r4, [r3, #4]
 800ef1a:	45b8      	cmp	r8, r7
 800ef1c:	f04f 0300 	mov.w	r3, #0
 800ef20:	e884 00c0 	stmia.w	r4, {r6, r7}
 800ef24:	60a3      	str	r3, [r4, #8]
 800ef26:	6124      	str	r4, [r4, #16]
 800ef28:	f841 7c04 	str.w	r7, [r1, #-4]
 800ef2c:	dd03      	ble.n	800ef36 <_Alloc+0xe2>
 800ef2e:	ebc7 0008 	rsb	r0, r7, r8
 800ef32:	f7ff fd0b 	bl	800e94c <_AddFreeMemory>
 800ef36:	4630      	mov	r0, r6
 800ef38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef3c:	20023084 	.word	0x20023084

0800ef40 <GUI_ALLOC_AllocNoInit>:
 800ef40:	b108      	cbz	r0, 800ef46 <GUI_ALLOC_AllocNoInit+0x6>
 800ef42:	f7ff bf87 	b.w	800ee54 <_Alloc>
 800ef46:	4770      	bx	lr

0800ef48 <GUI_ALLOC_AllocZero>:
 800ef48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	f7ff fff8 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 800ef50:	4606      	mov	r6, r0
 800ef52:	b158      	cbz	r0, 800ef6c <GUI_ALLOC_AllocZero+0x24>
 800ef54:	f7ff fdac 	bl	800eab0 <GUI_ALLOC_LockH>
 800ef58:	ac02      	add	r4, sp, #8
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ef60:	462a      	mov	r2, r5
 800ef62:	f7fc fe4f 	bl	800bc04 <GUI__memset>
 800ef66:	4620      	mov	r0, r4
 800ef68:	f7ff fdb0 	bl	800eacc <GUI_ALLOC_UnlockH>
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	b002      	add	sp, #8
 800ef70:	bd70      	pop	{r4, r5, r6, pc}

0800ef72 <LCD_Index2Color_M8888I>:
 800ef72:	43c3      	mvns	r3, r0
 800ef74:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800ef78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	b2c2      	uxtb	r2, r0
 800ef80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef84:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800ef88:	4318      	orrs	r0, r3
 800ef8a:	4770      	bx	lr

0800ef8c <_Color2Index_M888>:
 800ef8c:	b2c2      	uxtb	r2, r0
 800ef8e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ef92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef96:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800ef9a:	4318      	orrs	r0, r3
 800ef9c:	4770      	bx	lr

0800ef9e <_GetIndexMask_M888>:
 800ef9e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800efa2:	4770      	bx	lr

0800efa4 <_Color2IndexBulk>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	4f0c      	ldr	r7, [pc, #48]	; (800efd8 <_Color2IndexBulk+0x34>)
 800efa8:	683f      	ldr	r7, [r7, #0]
 800efaa:	4606      	mov	r6, r0
 800efac:	460d      	mov	r5, r1
 800efae:	4614      	mov	r4, r2
 800efb0:	469c      	mov	ip, r3
 800efb2:	b10f      	cbz	r7, 800efb8 <_Color2IndexBulk+0x14>
 800efb4:	47b8      	blx	r7
 800efb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efb8:	f856 2b04 	ldr.w	r2, [r6], #4
 800efbc:	b2d1      	uxtb	r1, r2
 800efbe:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800efc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800efc6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800efca:	431a      	orrs	r2, r3
 800efcc:	3c01      	subs	r4, #1
 800efce:	602a      	str	r2, [r5, #0]
 800efd0:	4465      	add	r5, ip
 800efd2:	d1f1      	bne.n	800efb8 <_Color2IndexBulk+0x14>
 800efd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20022c34 	.word	0x20022c34

0800efdc <_Index2ColorBulk>:
 800efdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efde:	4f0c      	ldr	r7, [pc, #48]	; (800f010 <_Index2ColorBulk+0x34>)
 800efe0:	683f      	ldr	r7, [r7, #0]
 800efe2:	4605      	mov	r5, r0
 800efe4:	460e      	mov	r6, r1
 800efe6:	4614      	mov	r4, r2
 800efe8:	469c      	mov	ip, r3
 800efea:	b10f      	cbz	r7, 800eff0 <_Index2ColorBulk+0x14>
 800efec:	47b8      	blx	r7
 800efee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff0:	682a      	ldr	r2, [r5, #0]
 800eff2:	b2d1      	uxtb	r1, r2
 800eff4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800eff8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800effc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800f000:	431a      	orrs	r2, r3
 800f002:	3c01      	subs	r4, #1
 800f004:	f846 2b04 	str.w	r2, [r6], #4
 800f008:	4465      	add	r5, ip
 800f00a:	d1f1      	bne.n	800eff0 <_Index2ColorBulk+0x14>
 800f00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f00e:	bf00      	nop
 800f010:	20022c30 	.word	0x20022c30

0800f014 <GUICC_M888_SetCustColorConv>:
 800f014:	4b02      	ldr	r3, [pc, #8]	; (800f020 <GUICC_M888_SetCustColorConv+0xc>)
 800f016:	6018      	str	r0, [r3, #0]
 800f018:	4b02      	ldr	r3, [pc, #8]	; (800f024 <GUICC_M888_SetCustColorConv+0x10>)
 800f01a:	6019      	str	r1, [r3, #0]
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	20022c34 	.word	0x20022c34
 800f024:	20022c30 	.word	0x20022c30

0800f028 <LCD_Index2Color_M565>:
 800f028:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 800f02c:	4b06      	ldr	r3, [pc, #24]	; (800f048 <LCD_Index2Color_M565+0x20>)
 800f02e:	f000 021f 	and.w	r2, r0, #31
 800f032:	f3c0 1045 	ubfx	r0, r0, #5, #6
 800f036:	5c9a      	ldrb	r2, [r3, r2]
 800f038:	5c5b      	ldrb	r3, [r3, r1]
 800f03a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800f03e:	4a03      	ldr	r2, [pc, #12]	; (800f04c <LCD_Index2Color_M565+0x24>)
 800f040:	5c10      	ldrb	r0, [r2, r0]
 800f042:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800f046:	4770      	bx	lr
 800f048:	08014174 	.word	0x08014174
 800f04c:	08014134 	.word	0x08014134

0800f050 <_Color2Index_M565>:
 800f050:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f054:	4b06      	ldr	r3, [pc, #24]	; (800f070 <_Color2Index_M565+0x20>)
 800f056:	b2c2      	uxtb	r2, r0
 800f058:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f05c:	5c9a      	ldrb	r2, [r3, r2]
 800f05e:	5c5b      	ldrb	r3, [r3, r1]
 800f060:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 800f064:	4a03      	ldr	r2, [pc, #12]	; (800f074 <_Color2Index_M565+0x24>)
 800f066:	5c10      	ldrb	r0, [r2, r0]
 800f068:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop
 800f070:	08014294 	.word	0x08014294
 800f074:	08014194 	.word	0x08014194

0800f078 <_GetIndexMask_M565>:
 800f078:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f07c:	4770      	bx	lr
	...

0800f080 <_Color2IndexBulk>:
 800f080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f082:	4f0f      	ldr	r7, [pc, #60]	; (800f0c0 <_Color2IndexBulk+0x40>)
 800f084:	683f      	ldr	r7, [r7, #0]
 800f086:	4606      	mov	r6, r0
 800f088:	460d      	mov	r5, r1
 800f08a:	4614      	mov	r4, r2
 800f08c:	469c      	mov	ip, r3
 800f08e:	b10f      	cbz	r7, 800f094 <_Color2IndexBulk+0x14>
 800f090:	47b8      	blx	r7
 800f092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f094:	f856 2b04 	ldr.w	r2, [r6], #4
 800f098:	490a      	ldr	r1, [pc, #40]	; (800f0c4 <_Color2IndexBulk+0x44>)
 800f09a:	b2d3      	uxtb	r3, r2
 800f09c:	3c01      	subs	r4, #1
 800f09e:	5cc8      	ldrb	r0, [r1, r3]
 800f0a0:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800f0a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800f0a8:	5ccb      	ldrb	r3, [r1, r3]
 800f0aa:	4907      	ldr	r1, [pc, #28]	; (800f0c8 <_Color2IndexBulk+0x48>)
 800f0ac:	5c8a      	ldrb	r2, [r1, r2]
 800f0ae:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 800f0b2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f0b6:	802b      	strh	r3, [r5, #0]
 800f0b8:	4465      	add	r5, ip
 800f0ba:	d1eb      	bne.n	800f094 <_Color2IndexBulk+0x14>
 800f0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	20022c3c 	.word	0x20022c3c
 800f0c4:	08014294 	.word	0x08014294
 800f0c8:	08014194 	.word	0x08014194

0800f0cc <_Index2ColorBulk>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	4e13      	ldr	r6, [pc, #76]	; (800f11c <_Index2ColorBulk+0x50>)
 800f0d0:	6836      	ldr	r6, [r6, #0]
 800f0d2:	4684      	mov	ip, r0
 800f0d4:	4614      	mov	r4, r2
 800f0d6:	461d      	mov	r5, r3
 800f0d8:	b10e      	cbz	r6, 800f0de <_Index2ColorBulk+0x12>
 800f0da:	47b0      	blx	r6
 800f0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0de:	1e50      	subs	r0, r2, #1
 800f0e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f0e4:	3a01      	subs	r2, #1
 800f0e6:	fb03 c000 	mla	r0, r3, r0, ip
 800f0ea:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f0ee:	8802      	ldrh	r2, [r0, #0]
 800f0f0:	4b0b      	ldr	r3, [pc, #44]	; (800f120 <_Index2ColorBulk+0x54>)
 800f0f2:	f002 061f 	and.w	r6, r2, #31
 800f0f6:	0ad7      	lsrs	r7, r2, #11
 800f0f8:	5d9e      	ldrb	r6, [r3, r6]
 800f0fa:	5ddb      	ldrb	r3, [r3, r7]
 800f0fc:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800f100:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800f104:	4e07      	ldr	r6, [pc, #28]	; (800f124 <_Index2ColorBulk+0x58>)
 800f106:	5cb2      	ldrb	r2, [r6, r2]
 800f108:	3c01      	subs	r4, #1
 800f10a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f10e:	f841 3904 	str.w	r3, [r1], #-4
 800f112:	ebc5 0000 	rsb	r0, r5, r0
 800f116:	d1ea      	bne.n	800f0ee <_Index2ColorBulk+0x22>
 800f118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f11a:	bf00      	nop
 800f11c:	20022c38 	.word	0x20022c38
 800f120:	08014174 	.word	0x08014174
 800f124:	08014134 	.word	0x08014134

0800f128 <GUICC_M565_SetCustColorConv>:
 800f128:	4b02      	ldr	r3, [pc, #8]	; (800f134 <GUICC_M565_SetCustColorConv+0xc>)
 800f12a:	6018      	str	r0, [r3, #0]
 800f12c:	4b02      	ldr	r3, [pc, #8]	; (800f138 <GUICC_M565_SetCustColorConv+0x10>)
 800f12e:	6019      	str	r1, [r3, #0]
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	20022c3c 	.word	0x20022c3c
 800f138:	20022c38 	.word	0x20022c38

0800f13c <LCD_Index2Color_888>:
 800f13c:	4770      	bx	lr

0800f13e <LCD_Index2Color_8888>:
 800f13e:	4770      	bx	lr

0800f140 <_Color2Index_8888>:
 800f140:	4770      	bx	lr

0800f142 <_GetIndexMask_8888>:
 800f142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f146:	4770      	bx	lr

0800f148 <_Color2IndexBulk>:
 800f148:	b510      	push	{r4, lr}
 800f14a:	f850 4b04 	ldr.w	r4, [r0], #4
 800f14e:	600c      	str	r4, [r1, #0]
 800f150:	3a01      	subs	r2, #1
 800f152:	4419      	add	r1, r3
 800f154:	d1f9      	bne.n	800f14a <_Color2IndexBulk+0x2>
 800f156:	bd10      	pop	{r4, pc}

0800f158 <_Index2ColorBulk>:
 800f158:	b510      	push	{r4, lr}
 800f15a:	6804      	ldr	r4, [r0, #0]
 800f15c:	f841 4b04 	str.w	r4, [r1], #4
 800f160:	3a01      	subs	r2, #1
 800f162:	4418      	add	r0, r3
 800f164:	d1f9      	bne.n	800f15a <_Index2ColorBulk+0x2>
 800f166:	bd10      	pop	{r4, pc}

0800f168 <_GetIndexMask_0>:
 800f168:	b508      	push	{r3, lr}
 800f16a:	f7fc f891 	bl	800b290 <LCD_GetNumColors>
 800f16e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f172:	d010      	beq.n	800f196 <_GetIndexMask_0+0x2e>
 800f174:	287f      	cmp	r0, #127	; 0x7f
 800f176:	d810      	bhi.n	800f19a <_GetIndexMask_0+0x32>
 800f178:	283f      	cmp	r0, #63	; 0x3f
 800f17a:	d810      	bhi.n	800f19e <_GetIndexMask_0+0x36>
 800f17c:	281f      	cmp	r0, #31
 800f17e:	d810      	bhi.n	800f1a2 <_GetIndexMask_0+0x3a>
 800f180:	280f      	cmp	r0, #15
 800f182:	d810      	bhi.n	800f1a6 <_GetIndexMask_0+0x3e>
 800f184:	2807      	cmp	r0, #7
 800f186:	d810      	bhi.n	800f1aa <_GetIndexMask_0+0x42>
 800f188:	2803      	cmp	r0, #3
 800f18a:	d810      	bhi.n	800f1ae <_GetIndexMask_0+0x46>
 800f18c:	2801      	cmp	r0, #1
 800f18e:	bf94      	ite	ls
 800f190:	2000      	movls	r0, #0
 800f192:	2001      	movhi	r0, #1
 800f194:	e00c      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f196:	2008      	movs	r0, #8
 800f198:	e00a      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f19a:	2007      	movs	r0, #7
 800f19c:	e008      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f19e:	2006      	movs	r0, #6
 800f1a0:	e006      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f1a2:	2005      	movs	r0, #5
 800f1a4:	e004      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f1a6:	2004      	movs	r0, #4
 800f1a8:	e002      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f1aa:	2003      	movs	r0, #3
 800f1ac:	e000      	b.n	800f1b0 <_GetIndexMask_0+0x48>
 800f1ae:	2002      	movs	r0, #2
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	fa03 f000 	lsl.w	r0, r3, r0
 800f1b6:	3801      	subs	r0, #1
 800f1b8:	bd08      	pop	{r3, pc}

0800f1ba <_Index2Color_0>:
 800f1ba:	b538      	push	{r3, r4, r5, lr}
 800f1bc:	4604      	mov	r4, r0
 800f1be:	f7fc f867 	bl	800b290 <LCD_GetNumColors>
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	f7fc f88e 	bl	800b2e4 <LCD_GetPalette>
 800f1c8:	42ac      	cmp	r4, r5
 800f1ca:	d203      	bcs.n	800f1d4 <_Index2Color_0+0x1a>
 800f1cc:	b118      	cbz	r0, 800f1d6 <_Index2Color_0+0x1c>
 800f1ce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}

0800f1d8 <_Color2Index_0>:
 800f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	4681      	mov	r9, r0
 800f1de:	f7fc f857 	bl	800b290 <LCD_GetNumColors>
 800f1e2:	4680      	mov	r8, r0
 800f1e4:	f7fc f87e 	bl	800b2e4 <LCD_GetPalette>
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	b1d8      	cbz	r0, 800f224 <_Color2Index_0+0x4c>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 800f1f2:	4591      	cmp	r9, r2
 800f1f4:	d01a      	beq.n	800f22c <_Color2Index_0+0x54>
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	4543      	cmp	r3, r8
 800f1fa:	dbf8      	blt.n	800f1ee <_Color2Index_0+0x16>
 800f1fc:	2500      	movs	r5, #0
 800f1fe:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 800f202:	462c      	mov	r4, r5
 800f204:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800f208:	4648      	mov	r0, r9
 800f20a:	f002 ff03 	bl	8012014 <GUI_CalcColorDist>
 800f20e:	42b8      	cmp	r0, r7
 800f210:	bf38      	it	cc
 800f212:	4625      	movcc	r5, r4
 800f214:	f104 0401 	add.w	r4, r4, #1
 800f218:	bf28      	it	cs
 800f21a:	4638      	movcs	r0, r7
 800f21c:	4544      	cmp	r4, r8
 800f21e:	da02      	bge.n	800f226 <_Color2Index_0+0x4e>
 800f220:	4607      	mov	r7, r0
 800f222:	e7ef      	b.n	800f204 <_Color2Index_0+0x2c>
 800f224:	4605      	mov	r5, r0
 800f226:	4628      	mov	r0, r5
 800f228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f22c:	4618      	mov	r0, r3
 800f22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f232 <_Color2Index_M8888I>:
 800f232:	43c3      	mvns	r3, r0
 800f234:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f238:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f23c:	4313      	orrs	r3, r2
 800f23e:	b2c2      	uxtb	r2, r0
 800f240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f244:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800f248:	4318      	orrs	r0, r3
 800f24a:	4770      	bx	lr

0800f24c <_GetIndexMask_M8888I>:
 800f24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f250:	4770      	bx	lr
	...

0800f254 <_Color2IndexBulk_M8888I>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	4c0e      	ldr	r4, [pc, #56]	; (800f290 <_Color2IndexBulk_M8888I+0x3c>)
 800f258:	6824      	ldr	r4, [r4, #0]
 800f25a:	4607      	mov	r7, r0
 800f25c:	460e      	mov	r6, r1
 800f25e:	4615      	mov	r5, r2
 800f260:	469c      	mov	ip, r3
 800f262:	b10c      	cbz	r4, 800f268 <_Color2IndexBulk_M8888I+0x14>
 800f264:	47a0      	blx	r4
 800f266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f268:	f857 4b04 	ldr.w	r4, [r7], #4
 800f26c:	43e3      	mvns	r3, r4
 800f26e:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800f272:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f276:	4313      	orrs	r3, r2
 800f278:	b2e2      	uxtb	r2, r4
 800f27a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f27e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800f282:	431c      	orrs	r4, r3
 800f284:	3d01      	subs	r5, #1
 800f286:	6034      	str	r4, [r6, #0]
 800f288:	4466      	add	r6, ip
 800f28a:	d1ed      	bne.n	800f268 <_Color2IndexBulk_M8888I+0x14>
 800f28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28e:	bf00      	nop
 800f290:	20022c44 	.word	0x20022c44

0800f294 <_Index2ColorBulk_M8888I>:
 800f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f296:	4c0e      	ldr	r4, [pc, #56]	; (800f2d0 <_Index2ColorBulk_M8888I+0x3c>)
 800f298:	6824      	ldr	r4, [r4, #0]
 800f29a:	4606      	mov	r6, r0
 800f29c:	460f      	mov	r7, r1
 800f29e:	4615      	mov	r5, r2
 800f2a0:	469c      	mov	ip, r3
 800f2a2:	b10c      	cbz	r4, 800f2a8 <_Index2ColorBulk_M8888I+0x14>
 800f2a4:	47a0      	blx	r4
 800f2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a8:	6834      	ldr	r4, [r6, #0]
 800f2aa:	43e3      	mvns	r3, r4
 800f2ac:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800f2b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	b2e2      	uxtb	r2, r4
 800f2b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2bc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800f2c0:	431c      	orrs	r4, r3
 800f2c2:	3d01      	subs	r5, #1
 800f2c4:	f847 4b04 	str.w	r4, [r7], #4
 800f2c8:	4466      	add	r6, ip
 800f2ca:	d1ed      	bne.n	800f2a8 <_Index2ColorBulk_M8888I+0x14>
 800f2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20022c40 	.word	0x20022c40

0800f2d4 <GUICC_M8888I_SetCustColorConv>:
 800f2d4:	4b02      	ldr	r3, [pc, #8]	; (800f2e0 <GUICC_M8888I_SetCustColorConv+0xc>)
 800f2d6:	6018      	str	r0, [r3, #0]
 800f2d8:	4b02      	ldr	r3, [pc, #8]	; (800f2e4 <GUICC_M8888I_SetCustColorConv+0x10>)
 800f2da:	6019      	str	r1, [r3, #0]
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	20022c44 	.word	0x20022c44
 800f2e4:	20022c40 	.word	0x20022c40

0800f2e8 <_Color2Index_M4444I>:
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	f240 1307 	movw	r3, #263	; 0x107
 800f2ee:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800f2f2:	b2c2      	uxtb	r2, r0
 800f2f4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f2f8:	3408      	adds	r4, #8
 800f2fa:	eba3 6010 	sub.w	r0, r3, r0, lsr #24
 800f2fe:	2311      	movs	r3, #17
 800f300:	fbb4 f4f3 	udiv	r4, r4, r3
 800f304:	fbb0 f0f3 	udiv	r0, r0, r3
 800f308:	3208      	adds	r2, #8
 800f30a:	fbb2 f2f3 	udiv	r2, r2, r3
 800f30e:	3108      	adds	r1, #8
 800f310:	eb04 3000 	add.w	r0, r4, r0, lsl #12
 800f314:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800f318:	fbb1 f3f3 	udiv	r3, r1, r3
 800f31c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 800f320:	bd10      	pop	{r4, pc}
	...

0800f324 <_Index2Color_M4444I>:
 800f324:	4b0a      	ldr	r3, [pc, #40]	; (800f350 <_Index2Color_M4444I+0x2c>)
 800f326:	f000 020f 	and.w	r2, r0, #15
 800f32a:	5c99      	ldrb	r1, [r3, r2]
 800f32c:	f3c0 2203 	ubfx	r2, r0, #8, #4
 800f330:	5c9a      	ldrb	r2, [r3, r2]
 800f332:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800f336:	f3c0 1103 	ubfx	r1, r0, #4, #4
 800f33a:	f3c0 3003 	ubfx	r0, r0, #12, #4
 800f33e:	5c59      	ldrb	r1, [r3, r1]
 800f340:	5c18      	ldrb	r0, [r3, r0]
 800f342:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800f346:	43c0      	mvns	r0, r0
 800f348:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	08014494 	.word	0x08014494

0800f354 <_GetIndexMask_M4444I>:
 800f354:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f358:	4770      	bx	lr
	...

0800f35c <_Color2IndexBulk_M4444I>:
 800f35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f360:	4c16      	ldr	r4, [pc, #88]	; (800f3bc <_Color2IndexBulk_M4444I+0x60>)
 800f362:	6824      	ldr	r4, [r4, #0]
 800f364:	4684      	mov	ip, r0
 800f366:	460f      	mov	r7, r1
 800f368:	4616      	mov	r6, r2
 800f36a:	4698      	mov	r8, r3
 800f36c:	b114      	cbz	r4, 800f374 <_Color2IndexBulk_M4444I+0x18>
 800f36e:	47a0      	blx	r4
 800f370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f374:	f85c 5b04 	ldr.w	r5, [ip], #4
 800f378:	b2e9      	uxtb	r1, r5
 800f37a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800f37e:	f3c5 4207 	ubfx	r2, r5, #16, #8
 800f382:	0e2d      	lsrs	r5, r5, #24
 800f384:	f5c5 7583 	rsb	r5, r5, #262	; 0x106
 800f388:	2411      	movs	r4, #17
 800f38a:	3501      	adds	r5, #1
 800f38c:	fbb5 f5f4 	udiv	r5, r5, r4
 800f390:	3108      	adds	r1, #8
 800f392:	fbb1 f1f4 	udiv	r1, r1, r4
 800f396:	3208      	adds	r2, #8
 800f398:	032d      	lsls	r5, r5, #12
 800f39a:	fbb2 f2f4 	udiv	r2, r2, r4
 800f39e:	3308      	adds	r3, #8
 800f3a0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
 800f3a4:	4415      	add	r5, r2
 800f3a6:	fbb3 f4f4 	udiv	r4, r3, r4
 800f3aa:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800f3ae:	3e01      	subs	r6, #1
 800f3b0:	803c      	strh	r4, [r7, #0]
 800f3b2:	4447      	add	r7, r8
 800f3b4:	d1de      	bne.n	800f374 <_Color2IndexBulk_M4444I+0x18>
 800f3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20022c4c 	.word	0x20022c4c

0800f3c0 <_Index2ColorBulk_M4444I>:
 800f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c2:	4d16      	ldr	r5, [pc, #88]	; (800f41c <_Index2ColorBulk_M4444I+0x5c>)
 800f3c4:	682d      	ldr	r5, [r5, #0]
 800f3c6:	4684      	mov	ip, r0
 800f3c8:	4614      	mov	r4, r2
 800f3ca:	461e      	mov	r6, r3
 800f3cc:	b10d      	cbz	r5, 800f3d2 <_Index2ColorBulk_M4444I+0x12>
 800f3ce:	47a8      	blx	r5
 800f3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d2:	1e50      	subs	r0, r2, #1
 800f3d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f3d8:	3a01      	subs	r2, #1
 800f3da:	fb03 c000 	mla	r0, r3, r0, ip
 800f3de:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f3e2:	8805      	ldrh	r5, [r0, #0]
 800f3e4:	4a0e      	ldr	r2, [pc, #56]	; (800f420 <_Index2ColorBulk_M4444I+0x60>)
 800f3e6:	f005 030f 	and.w	r3, r5, #15
 800f3ea:	3c01      	subs	r4, #1
 800f3ec:	5cd7      	ldrb	r7, [r2, r3]
 800f3ee:	f3c5 2303 	ubfx	r3, r5, #8, #4
 800f3f2:	ebc6 0000 	rsb	r0, r6, r0
 800f3f6:	5cd3      	ldrb	r3, [r2, r3]
 800f3f8:	eb03 4707 	add.w	r7, r3, r7, lsl #16
 800f3fc:	ea4f 3315 	mov.w	r3, r5, lsr #12
 800f400:	f3c5 1503 	ubfx	r5, r5, #4, #4
 800f404:	5cd3      	ldrb	r3, [r2, r3]
 800f406:	5d52      	ldrb	r2, [r2, r5]
 800f408:	ea6f 0303 	mvn.w	r3, r3
 800f40c:	eb07 6303 	add.w	r3, r7, r3, lsl #24
 800f410:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f414:	f841 3904 	str.w	r3, [r1], #-4
 800f418:	d1e3      	bne.n	800f3e2 <_Index2ColorBulk_M4444I+0x22>
 800f41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f41c:	20022c48 	.word	0x20022c48
 800f420:	08014494 	.word	0x08014494

0800f424 <GUICC_M4444I_SetCustColorConv>:
 800f424:	4b02      	ldr	r3, [pc, #8]	; (800f430 <GUICC_M4444I_SetCustColorConv+0xc>)
 800f426:	6018      	str	r0, [r3, #0]
 800f428:	4b02      	ldr	r3, [pc, #8]	; (800f434 <GUICC_M4444I_SetCustColorConv+0x10>)
 800f42a:	6019      	str	r1, [r3, #0]
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	20022c4c 	.word	0x20022c4c
 800f434:	20022c48 	.word	0x20022c48

0800f438 <_Color2Index_M1555I>:
 800f438:	4b08      	ldr	r3, [pc, #32]	; (800f45c <_Color2Index_M1555I+0x24>)
 800f43a:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800f43e:	b2c1      	uxtb	r1, r0
 800f440:	5c9a      	ldrb	r2, [r3, r2]
 800f442:	5c59      	ldrb	r1, [r3, r1]
 800f444:	eb02 2281 	add.w	r2, r2, r1, lsl #10
 800f448:	43c1      	mvns	r1, r0
 800f44a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f44e:	0fc9      	lsrs	r1, r1, #31
 800f450:	5c18      	ldrb	r0, [r3, r0]
 800f452:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 800f456:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 800f45a:	4770      	bx	lr
 800f45c:	08014294 	.word	0x08014294

0800f460 <_Index2Color_M1555I>:
 800f460:	4b0b      	ldr	r3, [pc, #44]	; (800f490 <_Index2Color_M1555I+0x30>)
 800f462:	f000 021f 	and.w	r2, r0, #31
 800f466:	b510      	push	{r4, lr}
 800f468:	5c99      	ldrb	r1, [r3, r2]
 800f46a:	f3c0 2484 	ubfx	r4, r0, #10, #5
 800f46e:	f3c0 1244 	ubfx	r2, r0, #5, #5
 800f472:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800f476:	5c9a      	ldrb	r2, [r3, r2]
 800f478:	5d1b      	ldrb	r3, [r3, r4]
 800f47a:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 800f47e:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800f482:	bf0c      	ite	eq
 800f484:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 800f488:	2300      	movne	r3, #0
 800f48a:	4418      	add	r0, r3
 800f48c:	bd10      	pop	{r4, pc}
 800f48e:	bf00      	nop
 800f490:	08014174 	.word	0x08014174

0800f494 <_GetIndexMask_M1555I>:
 800f494:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f498:	4770      	bx	lr
	...

0800f49c <_Color2IndexBulk_M1555I>:
 800f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49e:	4c11      	ldr	r4, [pc, #68]	; (800f4e4 <_Color2IndexBulk_M1555I+0x48>)
 800f4a0:	6824      	ldr	r4, [r4, #0]
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	460e      	mov	r6, r1
 800f4a6:	4615      	mov	r5, r2
 800f4a8:	469c      	mov	ip, r3
 800f4aa:	b10c      	cbz	r4, 800f4b0 <_Color2IndexBulk_M1555I+0x14>
 800f4ac:	47a0      	blx	r4
 800f4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4b0:	f857 4b04 	ldr.w	r4, [r7], #4
 800f4b4:	4a0c      	ldr	r2, [pc, #48]	; (800f4e8 <_Color2IndexBulk_M1555I+0x4c>)
 800f4b6:	b2e3      	uxtb	r3, r4
 800f4b8:	3d01      	subs	r5, #1
 800f4ba:	5cd1      	ldrb	r1, [r2, r3]
 800f4bc:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f4c0:	5cd3      	ldrb	r3, [r2, r3]
 800f4c2:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 800f4c6:	ea6f 0104 	mvn.w	r1, r4
 800f4ca:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800f4ce:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 800f4d2:	5d12      	ldrb	r2, [r2, r4]
 800f4d4:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 800f4d8:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f4dc:	8033      	strh	r3, [r6, #0]
 800f4de:	4466      	add	r6, ip
 800f4e0:	d1e6      	bne.n	800f4b0 <_Color2IndexBulk_M1555I+0x14>
 800f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e4:	20022c54 	.word	0x20022c54
 800f4e8:	08014294 	.word	0x08014294

0800f4ec <_Index2ColorBulk_M1555I>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	4d17      	ldr	r5, [pc, #92]	; (800f54c <_Index2ColorBulk_M1555I+0x60>)
 800f4f0:	682d      	ldr	r5, [r5, #0]
 800f4f2:	4684      	mov	ip, r0
 800f4f4:	4614      	mov	r4, r2
 800f4f6:	461e      	mov	r6, r3
 800f4f8:	b10d      	cbz	r5, 800f4fe <_Index2ColorBulk_M1555I+0x12>
 800f4fa:	47a8      	blx	r5
 800f4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4fe:	1e50      	subs	r0, r2, #1
 800f500:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f504:	3a01      	subs	r2, #1
 800f506:	fb03 c000 	mla	r0, r3, r0, ip
 800f50a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f50e:	8802      	ldrh	r2, [r0, #0]
 800f510:	4d0f      	ldr	r5, [pc, #60]	; (800f550 <_Index2ColorBulk_M1555I+0x64>)
 800f512:	f002 031f 	and.w	r3, r2, #31
 800f516:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800f51a:	f815 c003 	ldrb.w	ip, [r5, r3]
 800f51e:	f3c2 1344 	ubfx	r3, r2, #5, #5
 800f522:	ebc6 0000 	rsb	r0, r6, r0
 800f526:	5cef      	ldrb	r7, [r5, r3]
 800f528:	f3c2 2384 	ubfx	r3, r2, #10, #5
 800f52c:	bf0c      	ite	eq
 800f52e:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 800f532:	2200      	movne	r2, #0
 800f534:	5ceb      	ldrb	r3, [r5, r3]
 800f536:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800f53a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800f53e:	4413      	add	r3, r2
 800f540:	3c01      	subs	r4, #1
 800f542:	f841 3904 	str.w	r3, [r1], #-4
 800f546:	d1e2      	bne.n	800f50e <_Index2ColorBulk_M1555I+0x22>
 800f548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f54a:	bf00      	nop
 800f54c:	20022c50 	.word	0x20022c50
 800f550:	08014174 	.word	0x08014174

0800f554 <GUICC_M1555I_SetCustColorConv>:
 800f554:	4b02      	ldr	r3, [pc, #8]	; (800f560 <GUICC_M1555I_SetCustColorConv+0xc>)
 800f556:	6018      	str	r0, [r3, #0]
 800f558:	4b02      	ldr	r3, [pc, #8]	; (800f564 <GUICC_M1555I_SetCustColorConv+0x10>)
 800f55a:	6019      	str	r1, [r3, #0]
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	20022c54 	.word	0x20022c54
 800f564:	20022c50 	.word	0x20022c50

0800f568 <_Color2Index_88666I>:
 800f568:	4b06      	ldr	r3, [pc, #24]	; (800f584 <_Color2Index_88666I+0x1c>)
 800f56a:	b510      	push	{r4, lr}
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	4604      	mov	r4, r0
 800f570:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800f574:	4798      	blx	r3
 800f576:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 800f57a:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 800f57e:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 800f582:	bd10      	pop	{r4, pc}
 800f584:	080140d4 	.word	0x080140d4

0800f588 <_Index2Color_88666I>:
 800f588:	4b06      	ldr	r3, [pc, #24]	; (800f5a4 <_Index2Color_88666I+0x1c>)
 800f58a:	b510      	push	{r4, lr}
 800f58c:	685b      	ldr	r3, [r3, #4]
 800f58e:	4604      	mov	r4, r0
 800f590:	b2c0      	uxtb	r0, r0
 800f592:	4798      	blx	r3
 800f594:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 800f598:	0424      	lsls	r4, r4, #16
 800f59a:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 800f59e:	4320      	orrs	r0, r4
 800f5a0:	bd10      	pop	{r4, pc}
 800f5a2:	bf00      	nop
 800f5a4:	080140d4 	.word	0x080140d4

0800f5a8 <_GetIndexMask_88666I>:
 800f5a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f5ac:	4770      	bx	lr
	...

0800f5b0 <_Color2IndexBulk_88666I>:
 800f5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b4:	4606      	mov	r6, r0
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	4615      	mov	r5, r2
 800f5ba:	4698      	mov	r8, r3
 800f5bc:	f856 7b04 	ldr.w	r7, [r6], #4
 800f5c0:	4b08      	ldr	r3, [pc, #32]	; (800f5e4 <_Color2IndexBulk_88666I+0x34>)
 800f5c2:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	4790      	blx	r2
 800f5ca:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
 800f5ce:	f087 477f 	eor.w	r7, r7, #4278190080	; 0xff000000
 800f5d2:	ea40 4017 	orr.w	r0, r0, r7, lsr #16
 800f5d6:	3d01      	subs	r5, #1
 800f5d8:	8020      	strh	r0, [r4, #0]
 800f5da:	4444      	add	r4, r8
 800f5dc:	d1ee      	bne.n	800f5bc <_Color2IndexBulk_88666I+0xc>
 800f5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e2:	bf00      	nop
 800f5e4:	080140d4 	.word	0x080140d4

0800f5e8 <_Index2ColorBulk_88666I>:
 800f5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ec:	1e55      	subs	r5, r2, #1
 800f5ee:	4614      	mov	r4, r2
 800f5f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f5f4:	3a01      	subs	r2, #1
 800f5f6:	461e      	mov	r6, r3
 800f5f8:	fb03 0505 	mla	r5, r3, r5, r0
 800f5fc:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800f600:	f8b5 8000 	ldrh.w	r8, [r5]
 800f604:	4b0a      	ldr	r3, [pc, #40]	; (800f630 <_Index2ColorBulk_88666I+0x48>)
 800f606:	fa5f f088 	uxtb.w	r0, r8
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	4798      	blx	r3
 800f60e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 800f612:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800f616:	f088 487f 	eor.w	r8, r8, #4278190080	; 0xff000000
 800f61a:	ea48 0000 	orr.w	r0, r8, r0
 800f61e:	3c01      	subs	r4, #1
 800f620:	f847 0904 	str.w	r0, [r7], #-4
 800f624:	ebc6 0505 	rsb	r5, r6, r5
 800f628:	d1ea      	bne.n	800f600 <_Index2ColorBulk_88666I+0x18>
 800f62a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62e:	bf00      	nop
 800f630:	080140d4 	.word	0x080140d4

0800f634 <LCD_Color2Index_8666>:
 800f634:	b510      	push	{r4, lr}
 800f636:	b2c3      	uxtb	r3, r0
 800f638:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800f63c:	42a3      	cmp	r3, r4
 800f63e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800f642:	d108      	bne.n	800f656 <LCD_Color2Index_8666+0x22>
 800f644:	428b      	cmp	r3, r1
 800f646:	d106      	bne.n	800f656 <LCD_Color2Index_8666+0x22>
 800f648:	f103 0008 	add.w	r0, r3, #8
 800f64c:	2211      	movs	r2, #17
 800f64e:	fbb0 f0f2 	udiv	r0, r0, r2
 800f652:	3078      	adds	r0, #120	; 0x78
 800f654:	bd10      	pop	{r4, pc}
 800f656:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800f65a:	22ff      	movs	r2, #255	; 0xff
 800f65c:	347f      	adds	r4, #127	; 0x7f
 800f65e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f662:	fbb4 f4f2 	udiv	r4, r4, r2
 800f666:	2006      	movs	r0, #6
 800f668:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f66c:	317f      	adds	r1, #127	; 0x7f
 800f66e:	fbb1 f1f2 	udiv	r1, r1, r2
 800f672:	4344      	muls	r4, r0
 800f674:	337f      	adds	r3, #127	; 0x7f
 800f676:	2024      	movs	r0, #36	; 0x24
 800f678:	fb00 4001 	mla	r0, r0, r1, r4
 800f67c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f680:	4410      	add	r0, r2
 800f682:	286b      	cmp	r0, #107	; 0x6b
 800f684:	bf88      	it	hi
 800f686:	3028      	addhi	r0, #40	; 0x28
 800f688:	bd10      	pop	{r4, pc}

0800f68a <_GetIndexMask_8666>:
 800f68a:	20ff      	movs	r0, #255	; 0xff
 800f68c:	4770      	bx	lr
	...

0800f690 <LCD_Index2Color_8666>:
 800f690:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800f694:	2b0f      	cmp	r3, #15
 800f696:	b510      	push	{r4, lr}
 800f698:	d805      	bhi.n	800f6a6 <LCD_Index2Color_8666+0x16>
 800f69a:	4b11      	ldr	r3, [pc, #68]	; (800f6e0 <LCD_Index2Color_8666+0x50>)
 800f69c:	4358      	muls	r0, r3
 800f69e:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800f6a2:	3008      	adds	r0, #8
 800f6a4:	bd10      	pop	{r4, pc}
 800f6a6:	286b      	cmp	r0, #107	; 0x6b
 800f6a8:	d902      	bls.n	800f6b0 <LCD_Index2Color_8666+0x20>
 800f6aa:	2893      	cmp	r0, #147	; 0x93
 800f6ac:	d915      	bls.n	800f6da <LCD_Index2Color_8666+0x4a>
 800f6ae:	3828      	subs	r0, #40	; 0x28
 800f6b0:	2306      	movs	r3, #6
 800f6b2:	fbb0 f1f3 	udiv	r1, r0, r3
 800f6b6:	2424      	movs	r4, #36	; 0x24
 800f6b8:	2233      	movs	r2, #51	; 0x33
 800f6ba:	fbb0 f4f4 	udiv	r4, r0, r4
 800f6be:	fb03 0011 	mls	r0, r3, r1, r0
 800f6c2:	4350      	muls	r0, r2
 800f6c4:	4354      	muls	r4, r2
 800f6c6:	eb00 4404 	add.w	r4, r0, r4, lsl #16
 800f6ca:	fbb1 f0f3 	udiv	r0, r1, r3
 800f6ce:	fb03 1010 	mls	r0, r3, r0, r1
 800f6d2:	4350      	muls	r0, r2
 800f6d4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 800f6d8:	bd10      	pop	{r4, pc}
 800f6da:	2000      	movs	r0, #0
 800f6dc:	bd10      	pop	{r4, pc}
 800f6de:	bf00      	nop
 800f6e0:	00111111 	.word	0x00111111

0800f6e4 <_Color2Index_1616I>:
 800f6e4:	4b07      	ldr	r3, [pc, #28]	; (800f704 <_Color2Index_1616I+0x20>)
 800f6e6:	b510      	push	{r4, lr}
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800f6f0:	4798      	blx	r3
 800f6f2:	0e24      	lsrs	r4, r4, #24
 800f6f4:	4b04      	ldr	r3, [pc, #16]	; (800f708 <_Color2Index_1616I+0x24>)
 800f6f6:	5d1b      	ldrb	r3, [r3, r4]
 800f6f8:	f1c3 030f 	rsb	r3, r3, #15
 800f6fc:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800f700:	bd10      	pop	{r4, pc}
 800f702:	bf00      	nop
 800f704:	08014104 	.word	0x08014104
 800f708:	08014394 	.word	0x08014394

0800f70c <_Index2Color_1616I>:
 800f70c:	4b06      	ldr	r3, [pc, #24]	; (800f728 <_Index2Color_1616I+0x1c>)
 800f70e:	b510      	push	{r4, lr}
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	4604      	mov	r4, r0
 800f714:	b2c0      	uxtb	r0, r0
 800f716:	4798      	blx	r3
 800f718:	0924      	lsrs	r4, r4, #4
 800f71a:	4b04      	ldr	r3, [pc, #16]	; (800f72c <_Index2Color_1616I+0x20>)
 800f71c:	5d1b      	ldrb	r3, [r3, r4]
 800f71e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f722:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800f726:	bd10      	pop	{r4, pc}
 800f728:	08014104 	.word	0x08014104
 800f72c:	08014494 	.word	0x08014494

0800f730 <_GetIndexMask_1616I>:
 800f730:	20ff      	movs	r0, #255	; 0xff
 800f732:	4770      	bx	lr

0800f734 <_Color2IndexBulk_1616I>:
 800f734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f738:	4606      	mov	r6, r0
 800f73a:	460c      	mov	r4, r1
 800f73c:	4615      	mov	r5, r2
 800f73e:	4698      	mov	r8, r3
 800f740:	f856 7b04 	ldr.w	r7, [r6], #4
 800f744:	4b08      	ldr	r3, [pc, #32]	; (800f768 <_Color2IndexBulk_1616I+0x34>)
 800f746:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	4790      	blx	r2
 800f74e:	0e3f      	lsrs	r7, r7, #24
 800f750:	4b06      	ldr	r3, [pc, #24]	; (800f76c <_Color2IndexBulk_1616I+0x38>)
 800f752:	5ddb      	ldrb	r3, [r3, r7]
 800f754:	f1c3 030f 	rsb	r3, r3, #15
 800f758:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 800f75c:	3d01      	subs	r5, #1
 800f75e:	7020      	strb	r0, [r4, #0]
 800f760:	4444      	add	r4, r8
 800f762:	d1ed      	bne.n	800f740 <_Color2IndexBulk_1616I+0xc>
 800f764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f768:	08014104 	.word	0x08014104
 800f76c:	08014394 	.word	0x08014394

0800f770 <_Index2ColorBulk_1616I>:
 800f770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f774:	1e55      	subs	r5, r2, #1
 800f776:	4614      	mov	r4, r2
 800f778:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800f77c:	3a01      	subs	r2, #1
 800f77e:	461e      	mov	r6, r3
 800f780:	fb03 0505 	mla	r5, r3, r5, r0
 800f784:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 800f788:	f895 8000 	ldrb.w	r8, [r5]
 800f78c:	4b0a      	ldr	r3, [pc, #40]	; (800f7b8 <_Index2ColorBulk_1616I+0x48>)
 800f78e:	4640      	mov	r0, r8
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	4798      	blx	r3
 800f794:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800f798:	4b08      	ldr	r3, [pc, #32]	; (800f7bc <_Index2ColorBulk_1616I+0x4c>)
 800f79a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800f79e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f7a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800f7a6:	3c01      	subs	r4, #1
 800f7a8:	f847 0904 	str.w	r0, [r7], #-4
 800f7ac:	ebc6 0505 	rsb	r5, r6, r5
 800f7b0:	d1ea      	bne.n	800f788 <_Index2ColorBulk_1616I+0x18>
 800f7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b6:	bf00      	nop
 800f7b8:	08014104 	.word	0x08014104
 800f7bc:	08014494 	.word	0x08014494

0800f7c0 <_Color2Index_16>:
 800f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c2:	b2c5      	uxtb	r5, r0
 800f7c4:	1c6c      	adds	r4, r5, #1
 800f7c6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f7ca:	1c59      	adds	r1, r3, #1
 800f7cc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800f7d0:	2c54      	cmp	r4, #84	; 0x54
 800f7d2:	f100 0201 	add.w	r2, r0, #1
 800f7d6:	bf94      	ite	ls
 800f7d8:	2400      	movls	r4, #0
 800f7da:	2401      	movhi	r4, #1
 800f7dc:	2954      	cmp	r1, #84	; 0x54
 800f7de:	bf94      	ite	ls
 800f7e0:	2100      	movls	r1, #0
 800f7e2:	2101      	movhi	r1, #1
 800f7e4:	2a54      	cmp	r2, #84	; 0x54
 800f7e6:	bf94      	ite	ls
 800f7e8:	2200      	movls	r2, #0
 800f7ea:	2201      	movhi	r2, #1
 800f7ec:	4606      	mov	r6, r0
 800f7ee:	00d0      	lsls	r0, r2, #3
 800f7f0:	461f      	mov	r7, r3
 800f7f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f7f6:	188b      	adds	r3, r1, r2
 800f7f8:	4423      	add	r3, r4
 800f7fa:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 800f7fe:	b90c      	cbnz	r4, 800f804 <_Color2Index_16+0x44>
 800f800:	b901      	cbnz	r1, 800f804 <_Color2Index_16+0x44>
 800f802:	b152      	cbz	r2, 800f81a <_Color2Index_16+0x5a>
 800f804:	19ba      	adds	r2, r7, r6
 800f806:	4415      	add	r5, r2
 800f808:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 800f80c:	4415      	add	r5, r2
 800f80e:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 800f812:	fbb5 f3f3 	udiv	r3, r5, r3
 800f816:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800f81a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f81c <_Index2Color_16>:
 800f81c:	b530      	push	{r4, r5, lr}
 800f81e:	f3c0 0240 	ubfx	r2, r0, #1, #1
 800f822:	f3c0 0580 	ubfx	r5, r0, #2, #1
 800f826:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 800f82a:	ea02 0300 	and.w	r3, r2, r0
 800f82e:	ea05 0400 	and.w	r4, r5, r0
 800f832:	4008      	ands	r0, r1
 800f834:	ebc0 11c1 	rsb	r1, r0, r1, lsl #7
 800f838:	ebc4 15c5 	rsb	r5, r4, r5, lsl #7
 800f83c:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
 800f840:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 800f844:	ebc3 12c2 	rsb	r2, r3, r2, lsl #7
 800f848:	0400      	lsls	r0, r0, #16
 800f84a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800f84e:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 800f852:	4318      	orrs	r0, r3
 800f854:	bd30      	pop	{r4, r5, pc}

0800f856 <_GetIndexMask_16>:
 800f856:	200f      	movs	r0, #15
 800f858:	4770      	bx	lr
	...

0800f85c <_CalcClipRectHL>:
 800f85c:	4b0b      	ldr	r3, [pc, #44]	; (800f88c <_CalcClipRectHL+0x30>)
 800f85e:	490c      	ldr	r1, [pc, #48]	; (800f890 <_CalcClipRectHL+0x34>)
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
 800f866:	8910      	ldrh	r0, [r2, #8]
 800f868:	4358      	muls	r0, r3
 800f86a:	8008      	strh	r0, [r1, #0]
 800f86c:	8950      	ldrh	r0, [r2, #10]
 800f86e:	4358      	muls	r0, r3
 800f870:	8048      	strh	r0, [r1, #2]
 800f872:	f9b2 000c 	ldrsh.w	r0, [r2, #12]
 800f876:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800f87a:	fb00 3003 	mla	r0, r0, r3, r3
 800f87e:	fb02 3303 	mla	r3, r2, r3, r3
 800f882:	3801      	subs	r0, #1
 800f884:	3b01      	subs	r3, #1
 800f886:	8088      	strh	r0, [r1, #4]
 800f888:	80cb      	strh	r3, [r1, #6]
 800f88a:	4770      	bx	lr
 800f88c:	20000038 	.word	0x20000038
 800f890:	20022c88 	.word	0x20022c88

0800f894 <_OnExit>:
 800f894:	b510      	push	{r4, lr}
 800f896:	4c03      	ldr	r4, [pc, #12]	; (800f8a4 <_OnExit+0x10>)
 800f898:	6820      	ldr	r0, [r4, #0]
 800f89a:	f7ff f8f5 	bl	800ea88 <GUI_ALLOC_FreeFixedBlock>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	bd10      	pop	{r4, pc}
 800f8a4:	20022c80 	.word	0x20022c80

0800f8a8 <_CleanLine>:
 800f8a8:	b508      	push	{r3, lr}
 800f8aa:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <_CleanLine+0x2c>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <_CleanLine+0x30>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	1ad2      	subs	r2, r2, r3
 800f8b4:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <_CleanLine+0x34>)
 800f8b6:	2100      	movs	r1, #0
 800f8b8:	6818      	ldr	r0, [r3, #0]
 800f8ba:	3201      	adds	r2, #1
 800f8bc:	f7fc f9a2 	bl	800bc04 <GUI__memset>
 800f8c0:	4a07      	ldr	r2, [pc, #28]	; (800f8e0 <_CleanLine+0x38>)
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <_CleanLine+0x3c>)
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	4a08      	ldr	r2, [pc, #32]	; (800f8e8 <_CleanLine+0x40>)
 800f8c8:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800f8cc:	6011      	str	r1, [r2, #0]
 800f8ce:	4a07      	ldr	r2, [pc, #28]	; (800f8ec <_CleanLine+0x44>)
 800f8d0:	6013      	str	r3, [r2, #0]
 800f8d2:	bd08      	pop	{r3, pc}
 800f8d4:	20022c70 	.word	0x20022c70
 800f8d8:	20022c6c 	.word	0x20022c6c
 800f8dc:	20022c7c 	.word	0x20022c7c
 800f8e0:	20022c74 	.word	0x20022c74
 800f8e4:	ffffc001 	.word	0xffffc001
 800f8e8:	20022c90 	.word	0x20022c90
 800f8ec:	20022c78 	.word	0x20022c78

0800f8f0 <_FlushLine>:
 800f8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f4:	4b2c      	ldr	r3, [pc, #176]	; (800f9a8 <_FlushLine+0xb8>)
 800f8f6:	4c2d      	ldr	r4, [pc, #180]	; (800f9ac <_FlushLine+0xbc>)
 800f8f8:	492d      	ldr	r1, [pc, #180]	; (800f9b0 <_FlushLine+0xc0>)
 800f8fa:	681e      	ldr	r6, [r3, #0]
 800f8fc:	482d      	ldr	r0, [pc, #180]	; (800f9b4 <_FlushLine+0xc4>)
 800f8fe:	6822      	ldr	r2, [r4, #0]
 800f900:	6809      	ldr	r1, [r1, #0]
 800f902:	6803      	ldr	r3, [r0, #0]
 800f904:	1ab6      	subs	r6, r6, r2
 800f906:	42b1      	cmp	r1, r6
 800f908:	f893 7068 	ldrb.w	r7, [r3, #104]	; 0x68
 800f90c:	bfd8      	it	le
 800f90e:	f101 36ff 	addle.w	r6, r1, #4294967295	; 0xffffffff
 800f912:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f914:	fb17 f707 	smulbb	r7, r7, r7
 800f918:	46a0      	mov	r8, r4
 800f91a:	4681      	mov	r9, r0
 800f91c:	b909      	cbnz	r1, 800f922 <_FlushLine+0x32>
 800f91e:	4926      	ldr	r1, [pc, #152]	; (800f9b8 <_FlushLine+0xc8>)
 800f920:	66d9      	str	r1, [r3, #108]	; 0x6c
 800f922:	4b26      	ldr	r3, [pc, #152]	; (800f9bc <_FlushLine+0xcc>)
 800f924:	681c      	ldr	r4, [r3, #0]
 800f926:	ea4f 0a67 	mov.w	sl, r7, asr #1
 800f92a:	1aa4      	subs	r4, r4, r2
 800f92c:	42b4      	cmp	r4, r6
 800f92e:	dc36      	bgt.n	800f99e <_FlushLine+0xae>
 800f930:	4b23      	ldr	r3, [pc, #140]	; (800f9c0 <_FlushLine+0xd0>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	5d13      	ldrb	r3, [r2, r4]
 800f936:	b383      	cbz	r3, 800f99a <_FlushLine+0xaa>
 800f938:	42bb      	cmp	r3, r7
 800f93a:	d121      	bne.n	800f980 <_FlushLine+0x90>
 800f93c:	4625      	mov	r5, r4
 800f93e:	42b5      	cmp	r5, r6
 800f940:	d003      	beq.n	800f94a <_FlushLine+0x5a>
 800f942:	1953      	adds	r3, r2, r5
 800f944:	785b      	ldrb	r3, [r3, #1]
 800f946:	42bb      	cmp	r3, r7
 800f948:	d00e      	beq.n	800f968 <_FlushLine+0x78>
 800f94a:	42a5      	cmp	r5, r4
 800f94c:	4b1d      	ldr	r3, [pc, #116]	; (800f9c4 <_FlushLine+0xd4>)
 800f94e:	d00d      	beq.n	800f96c <_FlushLine+0x7c>
 800f950:	491d      	ldr	r1, [pc, #116]	; (800f9c8 <_FlushLine+0xd8>)
 800f952:	f8d8 2000 	ldr.w	r2, [r8]
 800f956:	6809      	ldr	r1, [r1, #0]
 800f958:	1910      	adds	r0, r2, r4
 800f95a:	f8d1 c000 	ldr.w	ip, [r1]
 800f95e:	6819      	ldr	r1, [r3, #0]
 800f960:	442a      	add	r2, r5
 800f962:	47e0      	blx	ip
 800f964:	462c      	mov	r4, r5
 800f966:	e018      	b.n	800f99a <_FlushLine+0xaa>
 800f968:	3501      	adds	r5, #1
 800f96a:	e7e8      	b.n	800f93e <_FlushLine+0x4e>
 800f96c:	f8d9 2000 	ldr.w	r2, [r9]
 800f970:	f8d8 0000 	ldr.w	r0, [r8]
 800f974:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800f976:	6819      	ldr	r1, [r3, #0]
 800f978:	6852      	ldr	r2, [r2, #4]
 800f97a:	4420      	add	r0, r4
 800f97c:	4790      	blx	r2
 800f97e:	e00c      	b.n	800f99a <_FlushLine+0xaa>
 800f980:	220f      	movs	r2, #15
 800f982:	fb12 a303 	smlabb	r3, r2, r3, sl
 800f986:	fb93 f2f7 	sdiv	r2, r3, r7
 800f98a:	f8d8 0000 	ldr.w	r0, [r8]
 800f98e:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <_FlushLine+0xd4>)
 800f990:	4420      	add	r0, r4
 800f992:	6819      	ldr	r1, [r3, #0]
 800f994:	b2d2      	uxtb	r2, r2
 800f996:	f001 fe2d 	bl	80115f4 <LCD_SetPixelAA4_Trans>
 800f99a:	3401      	adds	r4, #1
 800f99c:	e7c6      	b.n	800f92c <_FlushLine+0x3c>
 800f99e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9a2:	f7ff bf81 	b.w	800f8a8 <_CleanLine>
 800f9a6:	bf00      	nop
 800f9a8:	20022c78 	.word	0x20022c78
 800f9ac:	20022c6c 	.word	0x20022c6c
 800f9b0:	20022c84 	.word	0x20022c84
 800f9b4:	20000038 	.word	0x20000038
 800f9b8:	080115f5 	.word	0x080115f5
 800f9bc:	20022c90 	.word	0x20022c90
 800f9c0:	20022c7c 	.word	0x20022c7c
 800f9c4:	20022c74 	.word	0x20022c74
 800f9c8:	20022c58 	.word	0x20022c58

0800f9cc <_DrawHLine>:
 800f9cc:	4282      	cmp	r2, r0
 800f9ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	460f      	mov	r7, r1
 800f9d6:	4615      	mov	r5, r2
 800f9d8:	db77      	blt.n	800faca <_DrawHLine+0xfe>
 800f9da:	4e3d      	ldr	r6, [pc, #244]	; (800fad0 <_DrawHLine+0x104>)
 800f9dc:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800fae8 <_DrawHLine+0x11c>
 800f9e0:	6833      	ldr	r3, [r6, #0]
 800f9e2:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 800f9e6:	f8d8 3000 	ldr.w	r3, [r8]
 800f9ea:	fb91 f2f2 	sdiv	r2, r1, r2
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d008      	beq.n	800fa04 <_DrawHLine+0x38>
 800f9f2:	f7ff ff7d 	bl	800f8f0 <_FlushLine>
 800f9f6:	6833      	ldr	r3, [r6, #0]
 800f9f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800f9fc:	fb97 f7f3 	sdiv	r7, r7, r3
 800fa00:	f8c8 7000 	str.w	r7, [r8]
 800fa04:	6833      	ldr	r3, [r6, #0]
 800fa06:	4833      	ldr	r0, [pc, #204]	; (800fad4 <_DrawHLine+0x108>)
 800fa08:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fa0c:	6807      	ldr	r7, [r0, #0]
 800fa0e:	fb94 f1f3 	sdiv	r1, r4, r3
 800fa12:	42b9      	cmp	r1, r7
 800fa14:	bfb8      	it	lt
 800fa16:	6001      	strlt	r1, [r0, #0]
 800fa18:	482f      	ldr	r0, [pc, #188]	; (800fad8 <_DrawHLine+0x10c>)
 800fa1a:	6807      	ldr	r7, [r0, #0]
 800fa1c:	fb95 f2f3 	sdiv	r2, r5, r3
 800fa20:	42ba      	cmp	r2, r7
 800fa22:	bfc8      	it	gt
 800fa24:	6002      	strgt	r2, [r0, #0]
 800fa26:	482d      	ldr	r0, [pc, #180]	; (800fadc <_DrawHLine+0x110>)
 800fa28:	6800      	ldr	r0, [r0, #0]
 800fa2a:	4281      	cmp	r1, r0
 800fa2c:	492c      	ldr	r1, [pc, #176]	; (800fae0 <_DrawHLine+0x114>)
 800fa2e:	6809      	ldr	r1, [r1, #0]
 800fa30:	bfb8      	it	lt
 800fa32:	fb03 f400 	mullt.w	r4, r3, r0
 800fa36:	428a      	cmp	r2, r1
 800fa38:	bfc4      	itt	gt
 800fa3a:	fb01 3503 	mlagt	r5, r1, r3, r3
 800fa3e:	f105 35ff 	addgt.w	r5, r5, #4294967295	; 0xffffffff
 800fa42:	42a5      	cmp	r5, r4
 800fa44:	db41      	blt.n	800faca <_DrawHLine+0xfe>
 800fa46:	4927      	ldr	r1, [pc, #156]	; (800fae4 <_DrawHLine+0x118>)
 800fa48:	fb94 f8f3 	sdiv	r8, r4, r3
 800fa4c:	ebc0 0708 	rsb	r7, r0, r8
 800fa50:	f8d1 c000 	ldr.w	ip, [r1]
 800fa54:	fb95 f2f3 	sdiv	r2, r5, r3
 800fa58:	ebb2 0a08 	subs.w	sl, r2, r8
 800fa5c:	eb0c 0107 	add.w	r1, ip, r7
 800fa60:	f81c 9007 	ldrb.w	r9, [ip, r7]
 800fa64:	d107      	bne.n	800fa76 <_DrawHLine+0xaa>
 800fa66:	f1c4 0401 	rsb	r4, r4, #1
 800fa6a:	44a1      	add	r9, r4
 800fa6c:	444d      	add	r5, r9
 800fa6e:	f80c 5007 	strb.w	r5, [ip, r7]
 800fa72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa76:	fb08 3303 	mla	r3, r8, r3, r3
 800fa7a:	1b1c      	subs	r4, r3, r4
 800fa7c:	44a1      	add	r9, r4
 800fa7e:	3101      	adds	r1, #1
 800fa80:	f80c 9007 	strb.w	r9, [ip, r7]
 800fa84:	460c      	mov	r4, r1
 800fa86:	eb04 030a 	add.w	r3, r4, sl
 800fa8a:	1a5b      	subs	r3, r3, r1
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	dd08      	ble.n	800faa2 <_DrawHLine+0xd6>
 800fa90:	6833      	ldr	r3, [r6, #0]
 800fa92:	f811 7b01 	ldrb.w	r7, [r1], #1
 800fa96:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fa9a:	443b      	add	r3, r7
 800fa9c:	f801 3c01 	strb.w	r3, [r1, #-1]
 800faa0:	e7f1      	b.n	800fa86 <_DrawHLine+0xba>
 800faa2:	2800      	cmp	r0, #0
 800faa4:	f105 0501 	add.w	r5, r5, #1
 800faa8:	780b      	ldrb	r3, [r1, #0]
 800faaa:	db05      	blt.n	800fab8 <_DrawHLine+0xec>
 800faac:	6830      	ldr	r0, [r6, #0]
 800faae:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 800fab2:	fb02 5510 	mls	r5, r2, r0, r5
 800fab6:	e006      	b.n	800fac6 <_DrawHLine+0xfa>
 800fab8:	6830      	ldr	r0, [r6, #0]
 800faba:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 800fabe:	f1c2 0201 	rsb	r2, r2, #1
 800fac2:	fb02 5500 	mla	r5, r2, r0, r5
 800fac6:	442b      	add	r3, r5
 800fac8:	700b      	strb	r3, [r1, #0]
 800faca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800face:	bf00      	nop
 800fad0:	20000038 	.word	0x20000038
 800fad4:	20022c90 	.word	0x20022c90
 800fad8:	20022c78 	.word	0x20022c78
 800fadc:	20022c6c 	.word	0x20022c6c
 800fae0:	20022c70 	.word	0x20022c70
 800fae4:	20022c7c 	.word	0x20022c7c
 800fae8:	20022c74 	.word	0x20022c74

0800faec <GUI_AA_Init>:
 800faec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faf0:	4f27      	ldr	r7, [pc, #156]	; (800fb90 <GUI_AA_Init+0xa4>)
 800faf2:	4d28      	ldr	r5, [pc, #160]	; (800fb94 <GUI_AA_Init+0xa8>)
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	4680      	mov	r8, r0
 800faf8:	460c      	mov	r4, r1
 800fafa:	b983      	cbnz	r3, 800fb1e <GUI_AA_Init+0x32>
 800fafc:	4b26      	ldr	r3, [pc, #152]	; (800fb98 <GUI_AA_Init+0xac>)
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	602a      	str	r2, [r5, #0]
 800fb02:	b912      	cbnz	r2, 800fb0a <GUI_AA_Init+0x1e>
 800fb04:	f7fb fc0c 	bl	800b320 <LCD_GetVXSizeMax>
 800fb08:	6028      	str	r0, [r5, #0]
 800fb0a:	6828      	ldr	r0, [r5, #0]
 800fb0c:	f7ff f91c 	bl	800ed48 <GUI_ALLOC_GetFixedBlock>
 800fb10:	6038      	str	r0, [r7, #0]
 800fb12:	b130      	cbz	r0, 800fb22 <GUI_AA_Init+0x36>
 800fb14:	4821      	ldr	r0, [pc, #132]	; (800fb9c <GUI_AA_Init+0xb0>)
 800fb16:	4b22      	ldr	r3, [pc, #136]	; (800fba0 <GUI_AA_Init+0xb4>)
 800fb18:	6003      	str	r3, [r0, #0]
 800fb1a:	f7fe fc2b 	bl	800e374 <GUI__RegisterExit>
 800fb1e:	2600      	movs	r6, #0
 800fb20:	e000      	b.n	800fb24 <GUI_AA_Init+0x38>
 800fb22:	2601      	movs	r6, #1
 800fb24:	4b1f      	ldr	r3, [pc, #124]	; (800fba4 <GUI_AA_Init+0xb8>)
 800fb26:	682a      	ldr	r2, [r5, #0]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4598      	cmp	r8, r3
 800fb2c:	bfa8      	it	ge
 800fb2e:	4643      	movge	r3, r8
 800fb30:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800fbc4 <GUI_AA_Init+0xd8>
 800fb34:	f8d8 e000 	ldr.w	lr, [r8]
 800fb38:	f8de 5064 	ldr.w	r5, [lr, #100]	; 0x64
 800fb3c:	1ae1      	subs	r1, r4, r3
 800fb3e:	428a      	cmp	r2, r1
 800fb40:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb44:	bfd8      	it	le
 800fb46:	189c      	addle	r4, r3, r2
 800fb48:	4a17      	ldr	r2, [pc, #92]	; (800fba8 <GUI_AA_Init+0xbc>)
 800fb4a:	f8ce 2064 	str.w	r2, [lr, #100]	; 0x64
 800fb4e:	e882 0003 	stmia.w	r2, {r0, r1}
 800fb52:	4916      	ldr	r1, [pc, #88]	; (800fbac <GUI_AA_Init+0xc0>)
 800fb54:	600d      	str	r5, [r1, #0]
 800fb56:	4916      	ldr	r1, [pc, #88]	; (800fbb0 <GUI_AA_Init+0xc4>)
 800fb58:	6011      	str	r1, [r2, #0]
 800fb5a:	4a16      	ldr	r2, [pc, #88]	; (800fbb4 <GUI_AA_Init+0xc8>)
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6011      	str	r1, [r2, #0]
 800fb60:	bfd8      	it	le
 800fb62:	f104 34ff 	addle.w	r4, r4, #4294967295	; 0xffffffff
 800fb66:	4a14      	ldr	r2, [pc, #80]	; (800fbb8 <GUI_AA_Init+0xcc>)
 800fb68:	429c      	cmp	r4, r3
 800fb6a:	bfb8      	it	lt
 800fb6c:	461c      	movlt	r4, r3
 800fb6e:	6013      	str	r3, [r2, #0]
 800fb70:	4b12      	ldr	r3, [pc, #72]	; (800fbbc <GUI_AA_Init+0xd0>)
 800fb72:	bfb8      	it	lt
 800fb74:	2601      	movlt	r6, #1
 800fb76:	601c      	str	r4, [r3, #0]
 800fb78:	f7ff fe96 	bl	800f8a8 <_CleanLine>
 800fb7c:	f7ff fe6e 	bl	800f85c <_CalcClipRectHL>
 800fb80:	f8d8 3000 	ldr.w	r3, [r8]
 800fb84:	4a0e      	ldr	r2, [pc, #56]	; (800fbc0 <GUI_AA_Init+0xd4>)
 800fb86:	615a      	str	r2, [r3, #20]
 800fb88:	4630      	mov	r0, r6
 800fb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb8e:	bf00      	nop
 800fb90:	20022c80 	.word	0x20022c80
 800fb94:	20022c84 	.word	0x20022c84
 800fb98:	2002307c 	.word	0x2002307c
 800fb9c:	20022c5c 	.word	0x20022c5c
 800fba0:	0800f895 	.word	0x0800f895
 800fba4:	2002304c 	.word	0x2002304c
 800fba8:	20022c64 	.word	0x20022c64
 800fbac:	20022c58 	.word	0x20022c58
 800fbb0:	0800f9cd 	.word	0x0800f9cd
 800fbb4:	20022c7c 	.word	0x20022c7c
 800fbb8:	20022c6c 	.word	0x20022c6c
 800fbbc:	20022c70 	.word	0x20022c70
 800fbc0:	20022c88 	.word	0x20022c88
 800fbc4:	20000038 	.word	0x20000038

0800fbc8 <GUI_AA_Init_HiRes>:
 800fbc8:	4b04      	ldr	r3, [pc, #16]	; (800fbdc <GUI_AA_Init_HiRes+0x14>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fbd0:	fb90 f0f3 	sdiv	r0, r0, r3
 800fbd4:	fb91 f1f3 	sdiv	r1, r1, r3
 800fbd8:	f7ff bf88 	b.w	800faec <GUI_AA_Init>
 800fbdc:	20000038 	.word	0x20000038

0800fbe0 <GUI_AA_HiRes2Pixel>:
 800fbe0:	4b04      	ldr	r3, [pc, #16]	; (800fbf4 <GUI_AA_HiRes2Pixel+0x14>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800fbe8:	b10b      	cbz	r3, 800fbee <GUI_AA_HiRes2Pixel+0xe>
 800fbea:	fb90 f0f3 	sdiv	r0, r0, r3
 800fbee:	b280      	uxth	r0, r0
 800fbf0:	b200      	sxth	r0, r0
 800fbf2:	4770      	bx	lr
 800fbf4:	20000038 	.word	0x20000038

0800fbf8 <GUI_AA_Exit>:
 800fbf8:	b508      	push	{r3, lr}
 800fbfa:	f7ff fe79 	bl	800f8f0 <_FlushLine>
 800fbfe:	4b04      	ldr	r3, [pc, #16]	; (800fc10 <GUI_AA_Exit+0x18>)
 800fc00:	4a04      	ldr	r2, [pc, #16]	; (800fc14 <GUI_AA_Exit+0x1c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6812      	ldr	r2, [r2, #0]
 800fc06:	665a      	str	r2, [r3, #100]	; 0x64
 800fc08:	f103 0208 	add.w	r2, r3, #8
 800fc0c:	615a      	str	r2, [r3, #20]
 800fc0e:	bd08      	pop	{r3, pc}
 800fc10:	20000038 	.word	0x20000038
 800fc14:	20022c58 	.word	0x20022c58

0800fc18 <GUI_AA_FillRoundedRect>:
 800fc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc1c:	b089      	sub	sp, #36	; 0x24
 800fc1e:	4617      	mov	r7, r2
 800fc20:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800fc22:	1a12      	subs	r2, r2, r0
 800fc24:	ebb2 0244 	subs.w	r2, r2, r4, lsl #1
 800fc28:	469b      	mov	fp, r3
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	468a      	mov	sl, r1
 800fc2e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800fc32:	f100 80d8 	bmi.w	800fde6 <GUI_AA_FillRoundedRect+0x1ce>
 800fc36:	ebc1 020b 	rsb	r2, r1, fp
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f2c0 80d2 	blt.w	800fde6 <GUI_AA_FillRoundedRect+0x1ce>
 800fc42:	4b6a      	ldr	r3, [pc, #424]	; (800fdec <GUI_AA_FillRoundedRect+0x1d4>)
 800fc44:	681e      	ldr	r6, [r3, #0]
 800fc46:	f896 2069 	ldrb.w	r2, [r6, #105]	; 0x69
 800fc4a:	4698      	mov	r8, r3
 800fc4c:	b932      	cbnz	r2, 800fc5c <GUI_AA_FillRoundedRect+0x44>
 800fc4e:	f896 3068 	ldrb.w	r3, [r6, #104]	; 0x68
 800fc52:	9304      	str	r3, [sp, #16]
 800fc54:	2304      	movs	r3, #4
 800fc56:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
 800fc5a:	e001      	b.n	800fc60 <GUI_AA_FillRoundedRect+0x48>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	9304      	str	r3, [sp, #16]
 800fc60:	f000 f968 	bl	800ff34 <WM__GetOrgX_AA>
 800fc64:	4405      	add	r5, r0
 800fc66:	f000 f971 	bl	800ff4c <WM__GetOrgY_AA>
 800fc6a:	4482      	add	sl, r0
 800fc6c:	f000 f962 	bl	800ff34 <WM__GetOrgX_AA>
 800fc70:	4407      	add	r7, r0
 800fc72:	f000 f96b 	bl	800ff4c <WM__GetOrgY_AA>
 800fc76:	f8d8 3000 	ldr.w	r3, [r8]
 800fc7a:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800fc7e:	f893 6068 	ldrb.w	r6, [r3, #104]	; 0x68
 800fc82:	4458      	add	r0, fp
 800fc84:	b92a      	cbnz	r2, 800fc92 <GUI_AA_FillRoundedRect+0x7a>
 800fc86:	4375      	muls	r5, r6
 800fc88:	fb06 fa0a 	mul.w	sl, r6, sl
 800fc8c:	4377      	muls	r7, r6
 800fc8e:	4370      	muls	r0, r6
 800fc90:	4374      	muls	r4, r6
 800fc92:	eb00 0b06 	add.w	fp, r0, r6
 800fc96:	4628      	mov	r0, r5
 800fc98:	f7ff ffa2 	bl	800fbe0 <GUI_AA_HiRes2Pixel>
 800fc9c:	4437      	add	r7, r6
 800fc9e:	3f01      	subs	r7, #1
 800fca0:	f8ad 0018 	strh.w	r0, [sp, #24]
 800fca4:	4638      	mov	r0, r7
 800fca6:	f7ff ff9b 	bl	800fbe0 <GUI_AA_HiRes2Pixel>
 800fcaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fcae:	f8ad 001c 	strh.w	r0, [sp, #28]
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7ff ff94 	bl	800fbe0 <GUI_AA_HiRes2Pixel>
 800fcb8:	f8ad 001a 	strh.w	r0, [sp, #26]
 800fcbc:	4658      	mov	r0, fp
 800fcbe:	f7ff ff8f 	bl	800fbe0 <GUI_AA_HiRes2Pixel>
 800fcc2:	f8ad 001e 	strh.w	r0, [sp, #30]
 800fcc6:	a806      	add	r0, sp, #24
 800fcc8:	f7f9 f8a8 	bl	8008e1c <WM__InitIVRSearch>
 800fccc:	b950      	cbnz	r0, 800fce4 <GUI_AA_FillRoundedRect+0xcc>
 800fcce:	4b47      	ldr	r3, [pc, #284]	; (800fdec <GUI_AA_FillRoundedRect+0x1d4>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800fcd6:	2a00      	cmp	r2, #0
 800fcd8:	f040 8085 	bne.w	800fde6 <GUI_AA_FillRoundedRect+0x1ce>
 800fcdc:	9904      	ldr	r1, [sp, #16]
 800fcde:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
 800fce2:	e080      	b.n	800fde6 <GUI_AA_FillRoundedRect+0x1ce>
 800fce4:	2302      	movs	r3, #2
 800fce6:	fb94 f3f3 	sdiv	r3, r4, r3
 800fcea:	fb04 3304 	mla	r3, r4, r4, r3
 800fcee:	9305      	str	r3, [sp, #20]
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	f7ff ff68 	bl	800fbc8 <GUI_AA_Init_HiRes>
 800fcf8:	4b3c      	ldr	r3, [pc, #240]	; (800fdec <GUI_AA_FillRoundedRect+0x1d4>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	695b      	ldr	r3, [r3, #20]
 800fcfe:	b163      	cbz	r3, 800fd1a <GUI_AA_FillRoundedRect+0x102>
 800fd00:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800fd04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fd08:	4593      	cmp	fp, r2
 800fd0a:	bfb8      	it	lt
 800fd0c:	465a      	movlt	r2, fp
 800fd0e:	459a      	cmp	sl, r3
 800fd10:	bfa8      	it	ge
 800fd12:	4653      	movge	r3, sl
 800fd14:	9203      	str	r2, [sp, #12]
 800fd16:	9302      	str	r3, [sp, #8]
 800fd18:	e003      	b.n	800fd22 <GUI_AA_FillRoundedRect+0x10a>
 800fd1a:	f8cd b00c 	str.w	fp, [sp, #12]
 800fd1e:	f8cd a008 	str.w	sl, [sp, #8]
 800fd22:	eb0a 0304 	add.w	r3, sl, r4
 800fd26:	4699      	mov	r9, r3
 800fd28:	4626      	mov	r6, r4
 800fd2a:	f04f 0800 	mov.w	r8, #0
 800fd2e:	45a0      	cmp	r8, r4
 800fd30:	da20      	bge.n	800fd74 <GUI_AA_FillRoundedRect+0x15c>
 800fd32:	9802      	ldr	r0, [sp, #8]
 800fd34:	4581      	cmp	r9, r0
 800fd36:	db18      	blt.n	800fd6a <GUI_AA_FillRoundedRect+0x152>
 800fd38:	9903      	ldr	r1, [sp, #12]
 800fd3a:	4589      	cmp	r9, r1
 800fd3c:	dc15      	bgt.n	800fd6a <GUI_AA_FillRoundedRect+0x152>
 800fd3e:	fb08 f108 	mul.w	r1, r8, r8
 800fd42:	9805      	ldr	r0, [sp, #20]
 800fd44:	fb06 1206 	mla	r2, r6, r6, r1
 800fd48:	4282      	cmp	r2, r0
 800fd4a:	dd01      	ble.n	800fd50 <GUI_AA_FillRoundedRect+0x138>
 800fd4c:	3e01      	subs	r6, #1
 800fd4e:	e7f8      	b.n	800fd42 <GUI_AA_FillRoundedRect+0x12a>
 800fd50:	4a26      	ldr	r2, [pc, #152]	; (800fdec <GUI_AA_FillRoundedRect+0x1d4>)
 800fd52:	6812      	ldr	r2, [r2, #0]
 800fd54:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800fd56:	1928      	adds	r0, r5, r4
 800fd58:	1b3a      	subs	r2, r7, r4
 800fd5a:	f8d1 c000 	ldr.w	ip, [r1]
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	1b80      	subs	r0, r0, r6
 800fd62:	4649      	mov	r1, r9
 800fd64:	4432      	add	r2, r6
 800fd66:	47e0      	blx	ip
 800fd68:	9b01      	ldr	r3, [sp, #4]
 800fd6a:	f108 0801 	add.w	r8, r8, #1
 800fd6e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fd72:	e7dc      	b.n	800fd2e <GUI_AA_FillRoundedRect+0x116>
 800fd74:	1c5e      	adds	r6, r3, #1
 800fd76:	ebc4 090b 	rsb	r9, r4, fp
 800fd7a:	454e      	cmp	r6, r9
 800fd7c:	da09      	bge.n	800fd92 <GUI_AA_FillRoundedRect+0x17a>
 800fd7e:	4b1b      	ldr	r3, [pc, #108]	; (800fdec <GUI_AA_FillRoundedRect+0x1d4>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd84:	4631      	mov	r1, r6
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4628      	mov	r0, r5
 800fd8a:	463a      	mov	r2, r7
 800fd8c:	4798      	blx	r3
 800fd8e:	3601      	adds	r6, #1
 800fd90:	e7f1      	b.n	800fd76 <GUI_AA_FillRoundedRect+0x15e>
 800fd92:	4626      	mov	r6, r4
 800fd94:	f04f 0800 	mov.w	r8, #0
 800fd98:	45a0      	cmp	r8, r4
 800fd9a:	da1d      	bge.n	800fdd8 <GUI_AA_FillRoundedRect+0x1c0>
 800fd9c:	9b02      	ldr	r3, [sp, #8]
 800fd9e:	4599      	cmp	r9, r3
 800fda0:	db15      	blt.n	800fdce <GUI_AA_FillRoundedRect+0x1b6>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	4599      	cmp	r9, r3
 800fda6:	dc12      	bgt.n	800fdce <GUI_AA_FillRoundedRect+0x1b6>
 800fda8:	fb08 f208 	mul.w	r2, r8, r8
 800fdac:	9805      	ldr	r0, [sp, #20]
 800fdae:	fb06 2306 	mla	r3, r6, r6, r2
 800fdb2:	4283      	cmp	r3, r0
 800fdb4:	dd01      	ble.n	800fdba <GUI_AA_FillRoundedRect+0x1a2>
 800fdb6:	3e01      	subs	r6, #1
 800fdb8:	e7f8      	b.n	800fdac <GUI_AA_FillRoundedRect+0x194>
 800fdba:	4b0c      	ldr	r3, [pc, #48]	; (800fdec <GUI_AA_FillRoundedRect+0x1d4>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdc0:	1928      	adds	r0, r5, r4
 800fdc2:	1b3a      	subs	r2, r7, r4
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	1b80      	subs	r0, r0, r6
 800fdc8:	4649      	mov	r1, r9
 800fdca:	4432      	add	r2, r6
 800fdcc:	4798      	blx	r3
 800fdce:	f108 0801 	add.w	r8, r8, #1
 800fdd2:	f109 0901 	add.w	r9, r9, #1
 800fdd6:	e7df      	b.n	800fd98 <GUI_AA_FillRoundedRect+0x180>
 800fdd8:	f7ff ff0e 	bl	800fbf8 <GUI_AA_Exit>
 800fddc:	f7f8 ff5c 	bl	8008c98 <WM__GetNextIVR>
 800fde0:	2800      	cmp	r0, #0
 800fde2:	d185      	bne.n	800fcf0 <GUI_AA_FillRoundedRect+0xd8>
 800fde4:	e773      	b.n	800fcce <GUI_AA_FillRoundedRect+0xb6>
 800fde6:	b009      	add	sp, #36	; 0x24
 800fde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdec:	20000038 	.word	0x20000038

0800fdf0 <WM__UpdateChildPositions>:
 800fdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf4:	b087      	sub	sp, #28
 800fdf6:	69c4      	ldr	r4, [r0, #28]
 800fdf8:	9303      	str	r3, [sp, #12]
 800fdfa:	468a      	mov	sl, r1
 800fdfc:	4693      	mov	fp, r2
 800fdfe:	2c00      	cmp	r4, #0
 800fe00:	d06d      	beq.n	800fede <WM__UpdateChildPositions+0xee>
 800fe02:	4620      	mov	r0, r4
 800fe04:	f7fe fe54 	bl	800eab0 <GUI_ALLOC_LockH>
 800fe08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800fe0a:	9005      	str	r0, [sp, #20]
 800fe0c:	f401 7320 	and.w	r3, r1, #640	; 0x280
 800fe10:	2b80      	cmp	r3, #128	; 0x80
 800fe12:	f8b0 8000 	ldrh.w	r8, [r0]
 800fe16:	8842      	ldrh	r2, [r0, #2]
 800fe18:	8886      	ldrh	r6, [r0, #4]
 800fe1a:	88c5      	ldrh	r5, [r0, #6]
 800fe1c:	d008      	beq.n	800fe30 <WM__UpdateChildPositions+0x40>
 800fe1e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fe22:	d108      	bne.n	800fe36 <WM__UpdateChildPositions+0x46>
 800fe24:	eb08 090a 	add.w	r9, r8, sl
 800fe28:	fa1f f989 	uxth.w	r9, r9
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	e008      	b.n	800fe42 <WM__UpdateChildPositions+0x52>
 800fe30:	9803      	ldr	r0, [sp, #12]
 800fe32:	b283      	uxth	r3, r0
 800fe34:	e001      	b.n	800fe3a <WM__UpdateChildPositions+0x4a>
 800fe36:	fa1f f38a 	uxth.w	r3, sl
 800fe3a:	eb03 0908 	add.w	r9, r3, r8
 800fe3e:	fa1f f989 	uxth.w	r9, r9
 800fe42:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 800fe46:	4433      	add	r3, r6
 800fe48:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	d008      	beq.n	800fe62 <WM__UpdateChildPositions+0x72>
 800fe50:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 800fe54:	d108      	bne.n	800fe68 <WM__UpdateChildPositions+0x78>
 800fe56:	eb02 0c0b 	add.w	ip, r2, fp
 800fe5a:	fa1f fc8c 	uxth.w	ip, ip
 800fe5e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800fe60:	e008      	b.n	800fe74 <WM__UpdateChildPositions+0x84>
 800fe62:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fe64:	b28f      	uxth	r7, r1
 800fe66:	e001      	b.n	800fe6c <WM__UpdateChildPositions+0x7c>
 800fe68:	fa1f f78b 	uxth.w	r7, fp
 800fe6c:	eb07 0c02 	add.w	ip, r7, r2
 800fe70:	fa1f fc8c 	uxth.w	ip, ip
 800fe74:	fa0f f989 	sxth.w	r9, r9
 800fe78:	fa0f f888 	sxth.w	r8, r8
 800fe7c:	b212      	sxth	r2, r2
 800fe7e:	442f      	add	r7, r5
 800fe80:	fa0f fc8c 	sxth.w	ip, ip
 800fe84:	ebb9 0108 	subs.w	r1, r9, r8
 800fe88:	9202      	str	r2, [sp, #8]
 800fe8a:	b2bf      	uxth	r7, r7
 800fe8c:	ebc2 020c 	rsb	r2, r2, ip
 800fe90:	d100      	bne.n	800fe94 <WM__UpdateChildPositions+0xa4>
 800fe92:	b142      	cbz	r2, 800fea6 <WM__UpdateChildPositions+0xb6>
 800fe94:	4620      	mov	r0, r4
 800fe96:	9301      	str	r3, [sp, #4]
 800fe98:	f8cd c000 	str.w	ip, [sp]
 800fe9c:	f7f8 f8cf 	bl	800803e <WM_MoveWindow>
 800fea0:	f8dd c000 	ldr.w	ip, [sp]
 800fea4:	9b01      	ldr	r3, [sp, #4]
 800fea6:	b21b      	sxth	r3, r3
 800fea8:	ebc9 0903 	rsb	r9, r9, r3
 800feac:	b236      	sxth	r6, r6
 800feae:	9b02      	ldr	r3, [sp, #8]
 800feb0:	ebc6 0808 	rsb	r8, r6, r8
 800feb4:	b23f      	sxth	r7, r7
 800feb6:	b22d      	sxth	r5, r5
 800feb8:	ebcc 0c07 	rsb	ip, ip, r7
 800febc:	1b5d      	subs	r5, r3, r5
 800febe:	eb19 0108 	adds.w	r1, r9, r8
 800fec2:	eb0c 0205 	add.w	r2, ip, r5
 800fec6:	d100      	bne.n	800feca <WM__UpdateChildPositions+0xda>
 800fec8:	b112      	cbz	r2, 800fed0 <WM__UpdateChildPositions+0xe0>
 800feca:	4620      	mov	r0, r4
 800fecc:	f7f7 ffa8 	bl	8007e20 <WM_ResizeWindow>
 800fed0:	a806      	add	r0, sp, #24
 800fed2:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800fed6:	6a1c      	ldr	r4, [r3, #32]
 800fed8:	f7fe fdf8 	bl	800eacc <GUI_ALLOC_UnlockH>
 800fedc:	e78f      	b.n	800fdfe <WM__UpdateChildPositions+0xe>
 800fede:	b007      	add	sp, #28
 800fee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fee4 <WM__SendMessageNoPara>:
 800fee4:	b530      	push	{r4, r5, lr}
 800fee6:	b085      	sub	sp, #20
 800fee8:	4604      	mov	r4, r0
 800feea:	2210      	movs	r2, #16
 800feec:	460d      	mov	r5, r1
 800feee:	4668      	mov	r0, sp
 800fef0:	2100      	movs	r1, #0
 800fef2:	f002 fd59 	bl	80129a8 <memset>
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7fe fdd0 	bl	800ea9c <GUI_ALLOC_h2p>
 800fefc:	6903      	ldr	r3, [r0, #16]
 800fefe:	b11b      	cbz	r3, 800ff08 <WM__SendMessageNoPara+0x24>
 800ff00:	9401      	str	r4, [sp, #4]
 800ff02:	9500      	str	r5, [sp, #0]
 800ff04:	4668      	mov	r0, sp
 800ff06:	4798      	blx	r3
 800ff08:	b005      	add	sp, #20
 800ff0a:	bd30      	pop	{r4, r5, pc}

0800ff0c <WM__GetPrevSibling>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	4605      	mov	r5, r0
 800ff10:	f000 f828 	bl	800ff64 <WM__GetFirstSibling>
 800ff14:	4604      	mov	r4, r0
 800ff16:	b154      	cbz	r4, 800ff2e <WM__GetPrevSibling+0x22>
 800ff18:	42ac      	cmp	r4, r5
 800ff1a:	d007      	beq.n	800ff2c <WM__GetPrevSibling+0x20>
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f7fe fdbd 	bl	800ea9c <GUI_ALLOC_h2p>
 800ff22:	6a03      	ldr	r3, [r0, #32]
 800ff24:	42ab      	cmp	r3, r5
 800ff26:	d002      	beq.n	800ff2e <WM__GetPrevSibling+0x22>
 800ff28:	461c      	mov	r4, r3
 800ff2a:	e7f4      	b.n	800ff16 <WM__GetPrevSibling+0xa>
 800ff2c:	2400      	movs	r4, #0
 800ff2e:	4620      	mov	r0, r4
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ff34 <WM__GetOrgX_AA>:
 800ff34:	4b04      	ldr	r3, [pc, #16]	; (800ff48 <WM__GetOrgX_AA+0x14>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800ff3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ff3e:	b112      	cbz	r2, 800ff46 <WM__GetOrgX_AA+0x12>
 800ff40:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ff44:	4358      	muls	r0, r3
 800ff46:	4770      	bx	lr
 800ff48:	20000038 	.word	0x20000038

0800ff4c <WM__GetOrgY_AA>:
 800ff4c:	4b04      	ldr	r3, [pc, #16]	; (800ff60 <WM__GetOrgY_AA+0x14>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
 800ff54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ff56:	b112      	cbz	r2, 800ff5e <WM__GetOrgY_AA+0x12>
 800ff58:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800ff5c:	4358      	muls	r0, r3
 800ff5e:	4770      	bx	lr
 800ff60:	20000038 	.word	0x20000038

0800ff64 <WM__GetFirstSibling>:
 800ff64:	b508      	push	{r3, lr}
 800ff66:	f7f8 f86e 	bl	8008046 <WM_GetParent>
 800ff6a:	b118      	cbz	r0, 800ff74 <WM__GetFirstSibling+0x10>
 800ff6c:	f7fe fd96 	bl	800ea9c <GUI_ALLOC_h2p>
 800ff70:	69c0      	ldr	r0, [r0, #28]
 800ff72:	bd08      	pop	{r3, pc}
 800ff74:	bd08      	pop	{r3, pc}
	...

0800ff78 <WM__IsInModalArea>:
 800ff78:	4b12      	ldr	r3, [pc, #72]	; (800ffc4 <WM__IsInModalArea+0x4c>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	b570      	push	{r4, r5, r6, lr}
 800ff80:	4604      	mov	r4, r0
 800ff82:	da0f      	bge.n	800ffa4 <WM__IsInModalArea+0x2c>
 800ff84:	4e10      	ldr	r6, [pc, #64]	; (800ffc8 <WM__IsInModalArea+0x50>)
 800ff86:	4d11      	ldr	r5, [pc, #68]	; (800ffcc <WM__IsInModalArea+0x54>)
 800ff88:	6833      	ldr	r3, [r6, #0]
 800ff8a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800ff8e:	4620      	mov	r0, r4
 800ff90:	6859      	ldr	r1, [r3, #4]
 800ff92:	f7f7 fef2 	bl	8007d7a <WM__IsAncestor>
 800ff96:	6833      	ldr	r3, [r6, #0]
 800ff98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ff9c:	686a      	ldr	r2, [r5, #4]
 800ff9e:	686b      	ldr	r3, [r5, #4]
 800ffa0:	b942      	cbnz	r2, 800ffb4 <WM__IsInModalArea+0x3c>
 800ffa2:	e00c      	b.n	800ffbe <WM__IsInModalArea+0x46>
 800ffa4:	4a0a      	ldr	r2, [pc, #40]	; (800ffd0 <WM__IsInModalArea+0x58>)
 800ffa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ffaa:	f7f7 fee6 	bl	8007d7a <WM__IsAncestor>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d1e8      	bne.n	800ff84 <WM__IsInModalArea+0xc>
 800ffb2:	bd70      	pop	{r4, r5, r6, pc}
 800ffb4:	b918      	cbnz	r0, 800ffbe <WM__IsInModalArea+0x46>
 800ffb6:	1ae3      	subs	r3, r4, r3
 800ffb8:	4258      	negs	r0, r3
 800ffba:	4158      	adcs	r0, r3
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	2001      	movs	r0, #1
 800ffc0:	bd70      	pop	{r4, r5, r6, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20000048 	.word	0x20000048
 800ffc8:	20023014 	.word	0x20023014
 800ffcc:	20023164 	.word	0x20023164
 800ffd0:	20022ff4 	.word	0x20022ff4

0800ffd4 <WM__SendPIDMessage>:
 800ffd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	460c      	mov	r4, r1
 800ffda:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800ffdc:	b085      	sub	sp, #20
 800ffde:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ffe2:	230d      	movs	r3, #13
 800ffe4:	9602      	str	r6, [sp, #8]
 800ffe6:	9300      	str	r3, [sp, #0]
 800ffe8:	4637      	mov	r7, r6
 800ffea:	4638      	mov	r0, r7
 800ffec:	f7f8 f829 	bl	8008042 <WM_IsWindow>
 800fff0:	b150      	cbz	r0, 8010008 <WM__SendPIDMessage+0x34>
 800fff2:	4638      	mov	r0, r7
 800fff4:	f7f8 f827 	bl	8008046 <WM_GetParent>
 800fff8:	4607      	mov	r7, r0
 800fffa:	2800      	cmp	r0, #0
 800fffc:	d0f5      	beq.n	800ffea <WM__SendPIDMessage+0x16>
 800fffe:	4669      	mov	r1, sp
 8010000:	9403      	str	r4, [sp, #12]
 8010002:	f002 f838 	bl	8012076 <WM__SendMessageIfEnabled>
 8010006:	e7f0      	b.n	800ffea <WM__SendPIDMessage+0x16>
 8010008:	4630      	mov	r0, r6
 801000a:	4621      	mov	r1, r4
 801000c:	f002 f833 	bl	8012076 <WM__SendMessageIfEnabled>
 8010010:	b005      	add	sp, #20
 8010012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010014 <WM__SendTouchMessage>:
 8010014:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010016:	68cc      	ldr	r4, [r1, #12]
 8010018:	4606      	mov	r6, r0
 801001a:	460d      	mov	r5, r1
 801001c:	b194      	cbz	r4, 8010044 <WM__SendTouchMessage+0x30>
 801001e:	f7fe fd47 	bl	800eab0 <GUI_ALLOC_LockH>
 8010022:	ab02      	add	r3, sp, #8
 8010024:	4602      	mov	r2, r0
 8010026:	f843 0d04 	str.w	r0, [r3, #-4]!
 801002a:	6821      	ldr	r1, [r4, #0]
 801002c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010030:	1a09      	subs	r1, r1, r0
 8010032:	6021      	str	r1, [r4, #0]
 8010034:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8010038:	6862      	ldr	r2, [r4, #4]
 801003a:	1a52      	subs	r2, r2, r1
 801003c:	6062      	str	r2, [r4, #4]
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe fd44 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010044:	4630      	mov	r0, r6
 8010046:	4629      	mov	r1, r5
 8010048:	f7ff ffc4 	bl	800ffd4 <WM__SendPIDMessage>
 801004c:	b002      	add	sp, #8
 801004e:	bd70      	pop	{r4, r5, r6, pc}

08010050 <WM_HandlePID>:
 8010050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	b097      	sub	sp, #92	; 0x5c
 8010056:	ae06      	add	r6, sp, #24
 8010058:	f04f 080c 	mov.w	r8, #12
 801005c:	2100      	movs	r1, #0
 801005e:	4642      	mov	r2, r8
 8010060:	4630      	mov	r0, r6
 8010062:	f002 fca1 	bl	80129a8 <memset>
 8010066:	f7fd f9a3 	bl	800d3b0 <GUI_PID_IsEmpty>
 801006a:	b108      	cbz	r0, 8010070 <WM_HandlePID+0x20>
 801006c:	2000      	movs	r0, #0
 801006e:	e1aa      	b.n	80103c6 <WM_HandlePID+0x376>
 8010070:	ac09      	add	r4, sp, #36	; 0x24
 8010072:	4620      	mov	r0, r4
 8010074:	f7fd f920 	bl	800d2b8 <GUI_PID_GetState>
 8010078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801007a:	4dad      	ldr	r5, [pc, #692]	; (8010330 <WM_HandlePID+0x2e0>)
 801007c:	4fad      	ldr	r7, [pc, #692]	; (8010334 <WM_HandlePID+0x2e4>)
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	d112      	bne.n	80100a8 <WM_HandlePID+0x58>
 8010082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010084:	3301      	adds	r3, #1
 8010086:	d11e      	bne.n	80100c6 <WM_HandlePID+0x76>
 8010088:	682b      	ldr	r3, [r5, #0]
 801008a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801008e:	fb08 f803 	mul.w	r8, r8, r3
 8010092:	eb07 0308 	add.w	r3, r7, r8
 8010096:	7a19      	ldrb	r1, [r3, #8]
 8010098:	4291      	cmp	r1, r2
 801009a:	d0e7      	beq.n	801006c <WM_HandlePID+0x1c>
 801009c:	f857 2008 	ldr.w	r2, [r7, r8]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	9209      	str	r2, [sp, #36]	; 0x24
 80100a4:	930a      	str	r3, [sp, #40]	; 0x28
 80100a6:	e00e      	b.n	80100c6 <WM_HandlePID+0x76>
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	db0c      	blt.n	80100c6 <WM_HandlePID+0x76>
 80100ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100ae:	2a00      	cmp	r2, #0
 80100b0:	db09      	blt.n	80100c6 <WM_HandlePID+0x76>
 80100b2:	49a1      	ldr	r1, [pc, #644]	; (8010338 <WM_HandlePID+0x2e8>)
 80100b4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80100b8:	440b      	add	r3, r1
 80100ba:	9309      	str	r3, [sp, #36]	; 0x24
 80100bc:	4b9f      	ldr	r3, [pc, #636]	; (801033c <WM_HandlePID+0x2ec>)
 80100be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100c2:	441a      	add	r2, r3
 80100c4:	920a      	str	r2, [sp, #40]	; 0x28
 80100c6:	a804      	add	r0, sp, #16
 80100c8:	f000 fa6c 	bl	80105a4 <WM__AddCriticalHandle>
 80100cc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	bf98      	it	ls
 80100d4:	602b      	strls	r3, [r5, #0]
 80100d6:	6828      	ldr	r0, [r5, #0]
 80100d8:	a901      	add	r1, sp, #4
 80100da:	aa02      	add	r2, sp, #8
 80100dc:	f7fd f886 	bl	800d1ec <GUI_GetLayerPosEx>
 80100e0:	9b01      	ldr	r3, [sp, #4]
 80100e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80100e6:	1ac0      	subs	r0, r0, r3
 80100e8:	9b02      	ldr	r3, [sp, #8]
 80100ea:	9009      	str	r0, [sp, #36]	; 0x24
 80100ec:	1ac9      	subs	r1, r1, r3
 80100ee:	682b      	ldr	r3, [r5, #0]
 80100f0:	910a      	str	r1, [sp, #40]	; 0x28
 80100f2:	220c      	movs	r2, #12
 80100f4:	435a      	muls	r2, r3
 80100f6:	18bb      	adds	r3, r7, r2
 80100f8:	58ba      	ldr	r2, [r7, r2]
 80100fa:	4282      	cmp	r2, r0
 80100fc:	d108      	bne.n	8010110 <WM_HandlePID+0xc0>
 80100fe:	685a      	ldr	r2, [r3, #4]
 8010100:	428a      	cmp	r2, r1
 8010102:	d105      	bne.n	8010110 <WM_HandlePID+0xc0>
 8010104:	7a1a      	ldrb	r2, [r3, #8]
 8010106:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801010a:	429a      	cmp	r2, r3
 801010c:	f000 8156 	beq.w	80103bc <WM_HandlePID+0x36c>
 8010110:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8010114:	f001 fee8 	bl	8011ee8 <GUI_CURSOR_SetPositionEx>
 8010118:	4b89      	ldr	r3, [pc, #548]	; (8010340 <WM_HandlePID+0x2f0>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	b113      	cbz	r3, 8010124 <WM_HandlePID+0xd4>
 801011e:	4620      	mov	r0, r4
 8010120:	2100      	movs	r1, #0
 8010122:	4798      	blx	r3
 8010124:	682b      	ldr	r3, [r5, #0]
 8010126:	4a87      	ldr	r2, [pc, #540]	; (8010344 <WM_HandlePID+0x2f4>)
 8010128:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801012c:	b918      	cbnz	r0, 8010136 <WM_HandlePID+0xe6>
 801012e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010130:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010132:	f000 f9df 	bl	80104f4 <WM_Screen2hWin>
 8010136:	4b84      	ldr	r3, [pc, #528]	; (8010348 <WM_HandlePID+0x2f8>)
 8010138:	9005      	str	r0, [sp, #20]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	b113      	cbz	r3, 8010144 <WM_HandlePID+0xf4>
 801013e:	9905      	ldr	r1, [sp, #20]
 8010140:	4620      	mov	r0, r4
 8010142:	4798      	blx	r3
 8010144:	4981      	ldr	r1, [pc, #516]	; (801034c <WM_HandlePID+0x2fc>)
 8010146:	682b      	ldr	r3, [r5, #0]
 8010148:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8010330 <WM_HandlePID+0x2e0>
 801014c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010150:	4688      	mov	r8, r1
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	9805      	ldr	r0, [sp, #20]
 8010156:	b312      	cbz	r2, 801019e <WM_HandlePID+0x14e>
 8010158:	4282      	cmp	r2, r0
 801015a:	d020      	beq.n	801019e <WM_HandlePID+0x14e>
 801015c:	6858      	ldr	r0, [r3, #4]
 801015e:	f7ff ff0b 	bl	800ff78 <WM__IsInModalArea>
 8010162:	b1e0      	cbz	r0, 801019e <WM_HandlePID+0x14e>
 8010164:	f8d9 3000 	ldr.w	r3, [r9]
 8010168:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801016c:	6858      	ldr	r0, [r3, #4]
 801016e:	f7f7 fdfb 	bl	8007d68 <WM__IsEnabled>
 8010172:	b1a0      	cbz	r0, 801019e <WM_HandlePID+0x14e>
 8010174:	2312      	movs	r3, #18
 8010176:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801017a:	9312      	str	r3, [sp, #72]	; 0x48
 801017c:	f8d9 3000 	ldr.w	r3, [r9]
 8010180:	9615      	str	r6, [sp, #84]	; 0x54
 8010182:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010186:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801018a:	6858      	ldr	r0, [r3, #4]
 801018c:	a912      	add	r1, sp, #72	; 0x48
 801018e:	f7ff ff41 	bl	8010014 <WM__SendTouchMessage>
 8010192:	f8d9 3000 	ldr.w	r3, [r9]
 8010196:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801019a:	2200      	movs	r2, #0
 801019c:	605a      	str	r2, [r3, #4]
 801019e:	9805      	ldr	r0, [sp, #20]
 80101a0:	f7ff feea 	bl	800ff78 <WM__IsInModalArea>
 80101a4:	b908      	cbnz	r0, 80101aa <WM_HandlePID+0x15a>
 80101a6:	2600      	movs	r6, #0
 80101a8:	e0fb      	b.n	80103a2 <WM_HandlePID+0x352>
 80101aa:	682b      	ldr	r3, [r5, #0]
 80101ac:	9905      	ldr	r1, [sp, #20]
 80101ae:	f8df a180 	ldr.w	sl, [pc, #384]	; 8010330 <WM_HandlePID+0x2e0>
 80101b2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8010334 <WM_HandlePID+0x2e4>
 80101b6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80101ba:	f04f 080c 	mov.w	r8, #12
 80101be:	fb08 7303 	mla	r3, r8, r3, r7
 80101c2:	6051      	str	r1, [r2, #4]
 80101c4:	7a1a      	ldrb	r2, [r3, #8]
 80101c6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d062      	beq.n	8010294 <WM_HandlePID+0x244>
 80101ce:	9b05      	ldr	r3, [sp, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d05f      	beq.n	8010294 <WM_HandlePID+0x244>
 80101d4:	9805      	ldr	r0, [sp, #20]
 80101d6:	f7fe fc6b 	bl	800eab0 <GUI_ALLOC_LockH>
 80101da:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80101de:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80101e2:	f8da 3000 	ldr.w	r3, [sl]
 80101e6:	9003      	str	r0, [sp, #12]
 80101e8:	fb08 9303 	mla	r3, r8, r3, r9
 80101ec:	7a1b      	ldrb	r3, [r3, #8]
 80101ee:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 80101f2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80101f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101f8:	1a9b      	subs	r3, r3, r2
 80101fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80101fc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010202:	eb0d 0008 	add.w	r0, sp, r8
 8010206:	1a9b      	subs	r3, r3, r2
 8010208:	9310      	str	r3, [sp, #64]	; 0x40
 801020a:	f7fe fc5f 	bl	800eacc <GUI_ALLOC_UnlockH>
 801020e:	f8da e000 	ldr.w	lr, [sl]
 8010212:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8010350 <WM_HandlePID+0x300>
 8010216:	ab0f      	add	r3, sp, #60	; 0x3c
 8010218:	9315      	str	r3, [sp, #84]	; 0x54
 801021a:	2311      	movs	r3, #17
 801021c:	9312      	str	r3, [sp, #72]	; 0x48
 801021e:	fb08 930e 	mla	r3, r8, lr, r9
 8010222:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010226:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801022a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801022e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8010232:	721a      	strb	r2, [r3, #8]
 8010234:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010238:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801023c:	b133      	cbz	r3, 801024c <WM_HandlePID+0x1fc>
 801023e:	eb0a 030e 	add.w	r3, sl, lr
 8010242:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010246:	9a05      	ldr	r2, [sp, #20]
 8010248:	605a      	str	r2, [r3, #4]
 801024a:	e000      	b.n	801024e <WM_HandlePID+0x1fe>
 801024c:	4699      	mov	r9, r3
 801024e:	eb0a 030e 	add.w	r3, sl, lr
 8010252:	a912      	add	r1, sp, #72	; 0x48
 8010254:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8010258:	9805      	ldr	r0, [sp, #20]
 801025a:	f001 ff0c 	bl	8012076 <WM__SendMessageIfEnabled>
 801025e:	682b      	ldr	r3, [r5, #0]
 8010260:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 8010264:	6851      	ldr	r1, [r2, #4]
 8010266:	458b      	cmp	fp, r1
 8010268:	bf1c      	itt	ne
 801026a:	6852      	ldrne	r2, [r2, #4]
 801026c:	9205      	strne	r2, [sp, #20]
 801026e:	220c      	movs	r2, #12
 8010270:	fb02 7303 	mla	r3, r2, r3, r7
 8010274:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8010278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801027c:	f1b9 0f00 	cmp.w	r9, #0
 8010280:	d008      	beq.n	8010294 <WM_HandlePID+0x244>
 8010282:	4648      	mov	r0, r9
 8010284:	f7f7 fedd 	bl	8008042 <WM_IsWindow>
 8010288:	b120      	cbz	r0, 8010294 <WM_HandlePID+0x244>
 801028a:	682b      	ldr	r3, [r5, #0]
 801028c:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8010290:	f8c3 9004 	str.w	r9, [r3, #4]
 8010294:	682a      	ldr	r2, [r5, #0]
 8010296:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801029a:	210c      	movs	r1, #12
 801029c:	4351      	muls	r1, r2
 801029e:	1878      	adds	r0, r7, r1
 80102a0:	f890 8008 	ldrb.w	r8, [r0, #8]
 80102a4:	ea53 0808 	orrs.w	r8, r3, r8
 80102a8:	d064      	beq.n	8010374 <WM_HandlePID+0x324>
 80102aa:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8010350 <WM_HandlePID+0x300>
 80102ae:	f44f 7e10 	mov.w	lr, #576	; 0x240
 80102b2:	00d2      	lsls	r2, r2, #3
 80102b4:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80102b8:	eb08 0e02 	add.w	lr, r8, r2
 80102bc:	f8de 9004 	ldr.w	r9, [lr, #4]
 80102c0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80102c4:	45e1      	cmp	r9, ip
 80102c6:	d01c      	beq.n	8010302 <WM_HandlePID+0x2b2>
 80102c8:	f8de e004 	ldr.w	lr, [lr, #4]
 80102cc:	f1be 0f00 	cmp.w	lr, #0
 80102d0:	d017      	beq.n	8010302 <WM_HandlePID+0x2b2>
 80102d2:	b113      	cbz	r3, 80102da <WM_HandlePID+0x28a>
 80102d4:	2300      	movs	r3, #0
 80102d6:	9315      	str	r3, [sp, #84]	; 0x54
 80102d8:	e009      	b.n	80102ee <WM_HandlePID+0x29e>
 80102da:	f8df e058 	ldr.w	lr, [pc, #88]	; 8010334 <WM_HandlePID+0x2e4>
 80102de:	f88d 3020 	strb.w	r3, [sp, #32]
 80102e2:	f85e 1001 	ldr.w	r1, [lr, r1]
 80102e6:	9106      	str	r1, [sp, #24]
 80102e8:	6841      	ldr	r1, [r0, #4]
 80102ea:	9107      	str	r1, [sp, #28]
 80102ec:	9615      	str	r6, [sp, #84]	; 0x54
 80102ee:	4442      	add	r2, r8
 80102f0:	a912      	add	r1, sp, #72	; 0x48
 80102f2:	6850      	ldr	r0, [r2, #4]
 80102f4:	f7ff fe8e 	bl	8010014 <WM__SendTouchMessage>
 80102f8:	682b      	ldr	r3, [r5, #0]
 80102fa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80102fe:	2200      	movs	r2, #0
 8010300:	605a      	str	r2, [r3, #4]
 8010302:	682b      	ldr	r3, [r5, #0]
 8010304:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 8010308:	220c      	movs	r2, #12
 801030a:	fb02 7203 	mla	r2, r2, r3, r7
 801030e:	f882 e008 	strb.w	lr, [r2, #8]
 8010312:	9a05      	ldr	r2, [sp, #20]
 8010314:	2a00      	cmp	r2, #0
 8010316:	d043      	beq.n	80103a0 <WM_HandlePID+0x350>
 8010318:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801031c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010320:	f1be 0f00 	cmp.w	lr, #0
 8010324:	d016      	beq.n	8010354 <WM_HandlePID+0x304>
 8010326:	9a05      	ldr	r2, [sp, #20]
 8010328:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801032c:	e01b      	b.n	8010366 <WM_HandlePID+0x316>
 801032e:	bf00      	nop
 8010330:	20023014 	.word	0x20023014
 8010334:	20022c9c 	.word	0x20022c9c
 8010338:	2002305c 	.word	0x2002305c
 801033c:	20023050 	.word	0x20023050
 8010340:	20022c94 	.word	0x20022c94
 8010344:	20023030 	.word	0x20023030
 8010348:	20022c98 	.word	0x20022c98
 801034c:	20023144 	.word	0x20023144
 8010350:	20023154 	.word	0x20023154
 8010354:	4b1d      	ldr	r3, [pc, #116]	; (80103cc <WM_HandlePID+0x37c>)
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	b10b      	cbz	r3, 801035e <WM_HandlePID+0x30e>
 801035a:	f7f7 fd5d 	bl	8007e18 <WM_ReleaseCapture>
 801035e:	682b      	ldr	r3, [r5, #0]
 8010360:	2200      	movs	r2, #0
 8010362:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8010366:	605a      	str	r2, [r3, #4]
 8010368:	9805      	ldr	r0, [sp, #20]
 801036a:	9615      	str	r6, [sp, #84]	; 0x54
 801036c:	a912      	add	r1, sp, #72	; 0x48
 801036e:	f7ff fe51 	bl	8010014 <WM__SendTouchMessage>
 8010372:	e015      	b.n	80103a0 <WM_HandlePID+0x350>
 8010374:	9b05      	ldr	r3, [sp, #20]
 8010376:	2b00      	cmp	r3, #0
 8010378:	f43f af15 	beq.w	80101a6 <WM_HandlePID+0x156>
 801037c:	9805      	ldr	r0, [sp, #20]
 801037e:	f7f7 fcf3 	bl	8007d68 <WM__IsEnabled>
 8010382:	2800      	cmp	r0, #0
 8010384:	f43f af0f 	beq.w	80101a6 <WM_HandlePID+0x156>
 8010388:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801038c:	2310      	movs	r3, #16
 801038e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010392:	9805      	ldr	r0, [sp, #20]
 8010394:	9312      	str	r3, [sp, #72]	; 0x48
 8010396:	a912      	add	r1, sp, #72	; 0x48
 8010398:	9615      	str	r6, [sp, #84]	; 0x54
 801039a:	f7ff fe3b 	bl	8010014 <WM__SendTouchMessage>
 801039e:	e702      	b.n	80101a6 <WM_HandlePID+0x156>
 80103a0:	2601      	movs	r6, #1
 80103a2:	682b      	ldr	r3, [r5, #0]
 80103a4:	220c      	movs	r2, #12
 80103a6:	fb02 7703 	mla	r7, r2, r3, r7
 80103aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80103ae:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80103b2:	4620      	mov	r0, r4
 80103b4:	4619      	mov	r1, r3
 80103b6:	f000 f8ad 	bl	8010514 <WM_PID__SetPrevState>
 80103ba:	e000      	b.n	80103be <WM_HandlePID+0x36e>
 80103bc:	2600      	movs	r6, #0
 80103be:	a804      	add	r0, sp, #16
 80103c0:	f000 f8f8 	bl	80105b4 <WM__RemoveCriticalHandle>
 80103c4:	4630      	mov	r0, r6
 80103c6:	b017      	add	sp, #92	; 0x5c
 80103c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103cc:	20023018 	.word	0x20023018

080103d0 <WM_DeleteTimer>:
 80103d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103d2:	4605      	mov	r5, r0
 80103d4:	b168      	cbz	r0, 80103f2 <WM_DeleteTimer+0x22>
 80103d6:	f7fe fb6b 	bl	800eab0 <GUI_ALLOC_LockH>
 80103da:	ac02      	add	r4, sp, #8
 80103dc:	f844 0d04 	str.w	r0, [r4, #-4]!
 80103e0:	6800      	ldr	r0, [r0, #0]
 80103e2:	f7fb ff5d 	bl	800c2a0 <GUI_TIMER_Delete>
 80103e6:	4620      	mov	r0, r4
 80103e8:	f7fe fb70 	bl	800eacc <GUI_ALLOC_UnlockH>
 80103ec:	4628      	mov	r0, r5
 80103ee:	f7fe fb8d 	bl	800eb0c <GUI_ALLOC_Free>
 80103f2:	b003      	add	sp, #12
 80103f4:	bd30      	pop	{r4, r5, pc}

080103f6 <WM__DeleteAssocTimer>:
 80103f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103f8:	4605      	mov	r5, r0
 80103fa:	a801      	add	r0, sp, #4
 80103fc:	f7fb ff1c 	bl	800c238 <GUI_TIMER__GetFirstTimer>
 8010400:	4604      	mov	r4, r0
 8010402:	b1dc      	cbz	r4, 801043c <WM__DeleteAssocTimer+0x46>
 8010404:	4620      	mov	r0, r4
 8010406:	2101      	movs	r1, #1
 8010408:	f7fb ff7e 	bl	800c308 <GUI_TIMER_GetFlag>
 801040c:	9b01      	ldr	r3, [sp, #4]
 801040e:	b183      	cbz	r3, 8010432 <WM__DeleteAssocTimer+0x3c>
 8010410:	b178      	cbz	r0, 8010432 <WM__DeleteAssocTimer+0x3c>
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe fb42 	bl	800ea9c <GUI_ALLOC_h2p>
 8010418:	6843      	ldr	r3, [r0, #4]
 801041a:	42ab      	cmp	r3, r5
 801041c:	d109      	bne.n	8010432 <WM__DeleteAssocTimer+0x3c>
 801041e:	4620      	mov	r0, r4
 8010420:	a901      	add	r1, sp, #4
 8010422:	9e01      	ldr	r6, [sp, #4]
 8010424:	f7fb ff20 	bl	800c268 <GUI_TIMER__GetNextTimerLin>
 8010428:	4604      	mov	r4, r0
 801042a:	4630      	mov	r0, r6
 801042c:	f7ff ffd0 	bl	80103d0 <WM_DeleteTimer>
 8010430:	e7e7      	b.n	8010402 <WM__DeleteAssocTimer+0xc>
 8010432:	4620      	mov	r0, r4
 8010434:	a901      	add	r1, sp, #4
 8010436:	f7fb ff17 	bl	800c268 <GUI_TIMER__GetNextTimerLin>
 801043a:	e7e1      	b.n	8010400 <WM__DeleteAssocTimer+0xa>
 801043c:	b002      	add	sp, #8
 801043e:	bd70      	pop	{r4, r5, r6, pc}

08010440 <WM_SendToParent>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4605      	mov	r5, r0
 8010444:	460c      	mov	r4, r1
 8010446:	b141      	cbz	r1, 801045a <WM_SendToParent+0x1a>
 8010448:	f7f7 fdfd 	bl	8008046 <WM_GetParent>
 801044c:	b128      	cbz	r0, 801045a <WM_SendToParent+0x1a>
 801044e:	60a5      	str	r5, [r4, #8]
 8010450:	4621      	mov	r1, r4
 8010452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010456:	f7f7 bc69 	b.w	8007d2c <WM__SendMessage>
 801045a:	bd38      	pop	{r3, r4, r5, pc}

0801045c <WM__IsInWindow>:
 801045c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801045e:	f013 0302 	ands.w	r3, r3, #2
 8010462:	d012      	beq.n	801048a <WM__IsInWindow+0x2e>
 8010464:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010468:	4299      	cmp	r1, r3
 801046a:	db10      	blt.n	801048e <WM__IsInWindow+0x32>
 801046c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8010470:	4299      	cmp	r1, r3
 8010472:	dc0c      	bgt.n	801048e <WM__IsInWindow+0x32>
 8010474:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010478:	429a      	cmp	r2, r3
 801047a:	db08      	blt.n	801048e <WM__IsInWindow+0x32>
 801047c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010480:	4282      	cmp	r2, r0
 8010482:	bfcc      	ite	gt
 8010484:	2000      	movgt	r0, #0
 8010486:	2001      	movle	r0, #1
 8010488:	4770      	bx	lr
 801048a:	4618      	mov	r0, r3
 801048c:	4770      	bx	lr
 801048e:	2000      	movs	r0, #0
 8010490:	4770      	bx	lr

08010492 <_Screen2hWin>:
 8010492:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010496:	460e      	mov	r6, r1
 8010498:	4617      	mov	r7, r2
 801049a:	4698      	mov	r8, r3
 801049c:	4605      	mov	r5, r0
 801049e:	b320      	cbz	r0, 80104ea <_Screen2hWin+0x58>
 80104a0:	f7fe fb06 	bl	800eab0 <GUI_ALLOC_LockH>
 80104a4:	4639      	mov	r1, r7
 80104a6:	4642      	mov	r2, r8
 80104a8:	4604      	mov	r4, r0
 80104aa:	9001      	str	r0, [sp, #4]
 80104ac:	f7ff ffd6 	bl	801045c <WM__IsInWindow>
 80104b0:	4681      	mov	r9, r0
 80104b2:	b920      	cbnz	r0, 80104be <_Screen2hWin+0x2c>
 80104b4:	a801      	add	r0, sp, #4
 80104b6:	f7fe fb09 	bl	800eacc <GUI_ALLOC_UnlockH>
 80104ba:	4648      	mov	r0, r9
 80104bc:	e016      	b.n	80104ec <_Screen2hWin+0x5a>
 80104be:	69e4      	ldr	r4, [r4, #28]
 80104c0:	b91c      	cbnz	r4, 80104ca <_Screen2hWin+0x38>
 80104c2:	a801      	add	r0, sp, #4
 80104c4:	f7fe fb02 	bl	800eacc <GUI_ALLOC_UnlockH>
 80104c8:	e00f      	b.n	80104ea <_Screen2hWin+0x58>
 80104ca:	42b4      	cmp	r4, r6
 80104cc:	d0f9      	beq.n	80104c2 <_Screen2hWin+0x30>
 80104ce:	4620      	mov	r0, r4
 80104d0:	4631      	mov	r1, r6
 80104d2:	463a      	mov	r2, r7
 80104d4:	4643      	mov	r3, r8
 80104d6:	f7ff ffdc 	bl	8010492 <_Screen2hWin>
 80104da:	2800      	cmp	r0, #0
 80104dc:	bf18      	it	ne
 80104de:	4605      	movne	r5, r0
 80104e0:	4620      	mov	r0, r4
 80104e2:	f7fe fadb 	bl	800ea9c <GUI_ALLOC_h2p>
 80104e6:	6a04      	ldr	r4, [r0, #32]
 80104e8:	e7ea      	b.n	80104c0 <_Screen2hWin+0x2e>
 80104ea:	4628      	mov	r0, r5
 80104ec:	b003      	add	sp, #12
 80104ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080104f4 <WM_Screen2hWin>:
 80104f4:	b570      	push	{r4, r5, r6, lr}
 80104f6:	4b06      	ldr	r3, [pc, #24]	; (8010510 <WM_Screen2hWin+0x1c>)
 80104f8:	460c      	mov	r4, r1
 80104fa:	4605      	mov	r5, r0
 80104fc:	6818      	ldr	r0, [r3, #0]
 80104fe:	f000 f835 	bl	801056c <WM_GetDesktopWindowEx>
 8010502:	462a      	mov	r2, r5
 8010504:	4623      	mov	r3, r4
 8010506:	2100      	movs	r1, #0
 8010508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801050c:	f7ff bfc1 	b.w	8010492 <_Screen2hWin>
 8010510:	20023014 	.word	0x20023014

08010514 <WM_PID__SetPrevState>:
 8010514:	4b03      	ldr	r3, [pc, #12]	; (8010524 <WM_PID__SetPrevState+0x10>)
 8010516:	220c      	movs	r2, #12
 8010518:	fb02 3301 	mla	r3, r2, r1, r3
 801051c:	c807      	ldmia	r0, {r0, r1, r2}
 801051e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010522:	4770      	bx	lr
 8010524:	20022cb4 	.word	0x20022cb4

08010528 <WM_OnKey>:
 8010528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801052a:	4a0a      	ldr	r2, [pc, #40]	; (8010554 <WM_OnKey+0x2c>)
 801052c:	4603      	mov	r3, r0
 801052e:	6810      	ldr	r0, [r2, #0]
 8010530:	4a09      	ldr	r2, [pc, #36]	; (8010558 <WM_OnKey+0x30>)
 8010532:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8010536:	b148      	cbz	r0, 801054c <WM_OnKey+0x24>
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	230e      	movs	r3, #14
 801053c:	9101      	str	r1, [sp, #4]
 801053e:	9302      	str	r3, [sp, #8]
 8010540:	a902      	add	r1, sp, #8
 8010542:	ab00      	add	r3, sp, #0
 8010544:	9305      	str	r3, [sp, #20]
 8010546:	f7f7 fbf1 	bl	8007d2c <WM__SendMessage>
 801054a:	2001      	movs	r0, #1
 801054c:	b007      	add	sp, #28
 801054e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010552:	bf00      	nop
 8010554:	20023014 	.word	0x20023014
 8010558:	20023004 	.word	0x20023004

0801055c <WM_GetWindowOrgX>:
 801055c:	b508      	push	{r3, lr}
 801055e:	b120      	cbz	r0, 801056a <WM_GetWindowOrgX+0xe>
 8010560:	f7fe fa9c 	bl	800ea9c <GUI_ALLOC_h2p>
 8010564:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010568:	bd08      	pop	{r3, pc}
 801056a:	bd08      	pop	{r3, pc}

0801056c <WM_GetDesktopWindowEx>:
 801056c:	2801      	cmp	r0, #1
 801056e:	bf9a      	itte	ls
 8010570:	4b02      	ldrls	r3, [pc, #8]	; (801057c <WM_GetDesktopWindowEx+0x10>)
 8010572:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010576:	2000      	movhi	r0, #0
 8010578:	4770      	bx	lr
 801057a:	bf00      	nop
 801057c:	20022ff4 	.word	0x20022ff4

08010580 <WM__GetClientRectEx>:
 8010580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010582:	460d      	mov	r5, r1
 8010584:	b158      	cbz	r0, 801059e <WM__GetClientRectEx+0x1e>
 8010586:	b151      	cbz	r1, 801059e <WM__GetClientRectEx+0x1e>
 8010588:	f7fe fa92 	bl	800eab0 <GUI_ALLOC_LockH>
 801058c:	ac02      	add	r4, sp, #8
 801058e:	4629      	mov	r1, r5
 8010590:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010594:	f7f8 f9c3 	bl	800891e <WM__GetClientRectWin>
 8010598:	4620      	mov	r0, r4
 801059a:	f7fe fa97 	bl	800eacc <GUI_ALLOC_UnlockH>
 801059e:	b003      	add	sp, #12
 80105a0:	bd30      	pop	{r4, r5, pc}
	...

080105a4 <WM__AddCriticalHandle>:
 80105a4:	4b02      	ldr	r3, [pc, #8]	; (80105b0 <WM__AddCriticalHandle+0xc>)
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	6002      	str	r2, [r0, #0]
 80105aa:	6018      	str	r0, [r3, #0]
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop
 80105b0:	20023028 	.word	0x20023028

080105b4 <WM__RemoveCriticalHandle>:
 80105b4:	4a09      	ldr	r2, [pc, #36]	; (80105dc <WM__RemoveCriticalHandle+0x28>)
 80105b6:	6813      	ldr	r3, [r2, #0]
 80105b8:	b510      	push	{r4, lr}
 80105ba:	4614      	mov	r4, r2
 80105bc:	b16b      	cbz	r3, 80105da <WM__RemoveCriticalHandle+0x26>
 80105be:	2200      	movs	r2, #0
 80105c0:	4283      	cmp	r3, r0
 80105c2:	d105      	bne.n	80105d0 <WM__RemoveCriticalHandle+0x1c>
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	b10a      	cbz	r2, 80105cc <WM__RemoveCriticalHandle+0x18>
 80105c8:	6013      	str	r3, [r2, #0]
 80105ca:	bd10      	pop	{r4, pc}
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd10      	pop	{r4, pc}
 80105d0:	6819      	ldr	r1, [r3, #0]
 80105d2:	b111      	cbz	r1, 80105da <WM__RemoveCriticalHandle+0x26>
 80105d4:	461a      	mov	r2, r3
 80105d6:	460b      	mov	r3, r1
 80105d8:	e7f2      	b.n	80105c0 <WM__RemoveCriticalHandle+0xc>
 80105da:	bd10      	pop	{r4, pc}
 80105dc:	20023028 	.word	0x20023028

080105e0 <WM_BringToBottom>:
 80105e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105e4:	4604      	mov	r4, r0
 80105e6:	b087      	sub	sp, #28
 80105e8:	2800      	cmp	r0, #0
 80105ea:	d039      	beq.n	8010660 <WM_BringToBottom+0x80>
 80105ec:	f7fe fa60 	bl	800eab0 <GUI_ALLOC_LockH>
 80105f0:	4603      	mov	r3, r0
 80105f2:	9001      	str	r0, [sp, #4]
 80105f4:	c803      	ldmia	r0, {r0, r1}
 80105f6:	ad04      	add	r5, sp, #16
 80105f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80105fc:	a801      	add	r0, sp, #4
 80105fe:	6a1e      	ldr	r6, [r3, #32]
 8010600:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8010604:	f7fe fa62 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010608:	4620      	mov	r0, r4
 801060a:	f7ff fc7f 	bl	800ff0c <WM__GetPrevSibling>
 801060e:	4607      	mov	r7, r0
 8010610:	b330      	cbz	r0, 8010660 <WM_BringToBottom+0x80>
 8010612:	4620      	mov	r0, r4
 8010614:	f7f7 fd17 	bl	8008046 <WM_GetParent>
 8010618:	f019 0f02 	tst.w	r9, #2
 801061c:	4680      	mov	r8, r0
 801061e:	d004      	beq.n	801062a <WM_BringToBottom+0x4a>
 8010620:	4628      	mov	r0, r5
 8010622:	4641      	mov	r1, r8
 8010624:	4632      	mov	r2, r6
 8010626:	f7f8 f957 	bl	80088d8 <WM__InvalidateRectEx>
 801062a:	4620      	mov	r0, r4
 801062c:	f7fe fa40 	bl	800eab0 <GUI_ALLOC_LockH>
 8010630:	9001      	str	r0, [sp, #4]
 8010632:	4640      	mov	r0, r8
 8010634:	f7fe fa3c 	bl	800eab0 <GUI_ALLOC_LockH>
 8010638:	9003      	str	r0, [sp, #12]
 801063a:	4638      	mov	r0, r7
 801063c:	f7fe fa38 	bl	800eab0 <GUI_ALLOC_LockH>
 8010640:	9b03      	ldr	r3, [sp, #12]
 8010642:	9a01      	ldr	r2, [sp, #4]
 8010644:	69d9      	ldr	r1, [r3, #28]
 8010646:	6206      	str	r6, [r0, #32]
 8010648:	9002      	str	r0, [sp, #8]
 801064a:	6211      	str	r1, [r2, #32]
 801064c:	a801      	add	r0, sp, #4
 801064e:	61dc      	str	r4, [r3, #28]
 8010650:	f7fe fa3c 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010654:	a803      	add	r0, sp, #12
 8010656:	f7fe fa39 	bl	800eacc <GUI_ALLOC_UnlockH>
 801065a:	a802      	add	r0, sp, #8
 801065c:	f7fe fa36 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010660:	b007      	add	sp, #28
 8010662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010666 <_Convert16>:
 8010666:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801066e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8010672:	4605      	mov	r5, r0
 8010674:	460e      	mov	r6, r1
 8010676:	4690      	mov	r8, r2
 8010678:	461f      	mov	r7, r3
 801067a:	4614      	mov	r4, r2
 801067c:	4689      	mov	r9, r1
 801067e:	f835 0b02 	ldrh.w	r0, [r5], #2
 8010682:	47d8      	blx	fp
 8010684:	47d0      	blx	sl
 8010686:	3c01      	subs	r4, #1
 8010688:	f849 0b04 	str.w	r0, [r9], #4
 801068c:	d1f7      	bne.n	801067e <_Convert16+0x18>
 801068e:	2f1f      	cmp	r7, #31
 8010690:	d806      	bhi.n	80106a0 <_Convert16+0x3a>
 8010692:	4630      	mov	r0, r6
 8010694:	4641      	mov	r1, r8
 8010696:	463a      	mov	r2, r7
 8010698:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801069c:	f001 b91f 	b.w	80118de <GUI__CompactPixelIndices>
 80106a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106a4 <_Convert8>:
 80106a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80106ac:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80106b0:	4605      	mov	r5, r0
 80106b2:	460e      	mov	r6, r1
 80106b4:	4690      	mov	r8, r2
 80106b6:	461f      	mov	r7, r3
 80106b8:	4689      	mov	r9, r1
 80106ba:	4604      	mov	r4, r0
 80106bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80106c0:	47d8      	blx	fp
 80106c2:	47d0      	blx	sl
 80106c4:	1b2b      	subs	r3, r5, r4
 80106c6:	4443      	add	r3, r8
 80106c8:	f849 0b04 	str.w	r0, [r9], #4
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d1f5      	bne.n	80106bc <_Convert8+0x18>
 80106d0:	2f1f      	cmp	r7, #31
 80106d2:	d806      	bhi.n	80106e2 <_Convert8+0x3e>
 80106d4:	4630      	mov	r0, r6
 80106d6:	4641      	mov	r1, r8
 80106d8:	463a      	mov	r2, r7
 80106da:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106de:	f001 b8fe 	b.w	80118de <GUI__CompactPixelIndices>
 80106e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080106e8 <GUI_MEMDEV__WriteToActiveOpaque>:
 80106e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ec:	b09d      	sub	sp, #116	; 0x74
 80106ee:	4606      	mov	r6, r0
 80106f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80106f2:	920d      	str	r2, [sp, #52]	; 0x34
 80106f4:	2800      	cmp	r0, #0
 80106f6:	f000 8386 	beq.w	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80106fa:	f7fe f9d9 	bl	800eab0 <GUI_ALLOC_LockH>
 80106fe:	ab1c      	add	r3, sp, #112	; 0x70
 8010700:	6944      	ldr	r4, [r0, #20]
 8010702:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe f9e0 	bl	800eacc <GUI_ALLOC_UnlockH>
 801070c:	4630      	mov	r0, r6
 801070e:	f7f9 fdef 	bl	800a2f0 <GUI_MEMDEV_GetBitsPerPixel>
 8010712:	2808      	cmp	r0, #8
 8010714:	4601      	mov	r1, r0
 8010716:	dd02      	ble.n	801071e <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 8010718:	2c00      	cmp	r4, #0
 801071a:	f000 81c3 	beq.w	8010aa4 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 801071e:	2201      	movs	r2, #1
 8010720:	f04f 0800 	mov.w	r8, #0
 8010724:	4630      	mov	r0, r6
 8010726:	921b      	str	r2, [sp, #108]	; 0x6c
 8010728:	920b      	str	r2, [sp, #44]	; 0x2c
 801072a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801072e:	f7fe f9bf 	bl	800eab0 <GUI_ALLOC_LockH>
 8010732:	6803      	ldr	r3, [r0, #0]
 8010734:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 8010d44 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 8010738:	691b      	ldr	r3, [r3, #16]
 801073a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	930e      	str	r3, [sp, #56]	; 0x38
 8010742:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8010746:	f8da 3000 	ldr.w	r3, [sl]
 801074a:	f84b 0d14 	str.w	r0, [fp, #-20]!
 801074e:	6904      	ldr	r4, [r0, #16]
 8010750:	6945      	ldr	r5, [r0, #20]
 8010752:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010756:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801075a:	7c58      	ldrb	r0, [r3, #17]
 801075c:	9112      	str	r1, [sp, #72]	; 0x48
 801075e:	f7fa fd9f 	bl	800b2a0 <GUI_GetBitsPerPixelEx>
 8010762:	f8da 3000 	ldr.w	r3, [sl]
 8010766:	9010      	str	r0, [sp, #64]	; 0x40
 8010768:	7c58      	ldrb	r0, [r3, #17]
 801076a:	f7fa fdc3 	bl	800b2f4 <GUI_GetpfIndex2ColorEx>
 801076e:	4603      	mov	r3, r0
 8010770:	4658      	mov	r0, fp
 8010772:	9309      	str	r3, [sp, #36]	; 0x24
 8010774:	f7fe f9aa 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010778:	2c08      	cmp	r4, #8
 801077a:	4651      	mov	r1, sl
 801077c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801077e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010780:	d904      	bls.n	801078c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8010782:	2c10      	cmp	r4, #16
 8010784:	bf8c      	ite	hi
 8010786:	2204      	movhi	r2, #4
 8010788:	2202      	movls	r2, #2
 801078a:	e005      	b.n	8010798 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 801078c:	2c01      	cmp	r4, #1
 801078e:	d103      	bne.n	8010798 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 8010790:	9411      	str	r4, [sp, #68]	; 0x44
 8010792:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 8010796:	e000      	b.n	801079a <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 8010798:	9211      	str	r2, [sp, #68]	; 0x44
 801079a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801079c:	4298      	cmp	r0, r3
 801079e:	f000 80e2 	beq.w	8010966 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 80107a2:	680b      	ldr	r3, [r1, #0]
 80107a4:	7c58      	ldrb	r0, [r3, #17]
 80107a6:	f7fa fdad 	bl	800b304 <GUI_GetpfColor2IndexEx>
 80107aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80107ac:	00b8      	lsls	r0, r7, #2
 80107ae:	f7fe fbc7 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 80107b2:	900c      	str	r0, [sp, #48]	; 0x30
 80107b4:	2800      	cmp	r0, #0
 80107b6:	f000 8326 	beq.w	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 80107ba:	4630      	mov	r0, r6
 80107bc:	f7f8 ff2e 	bl	800961c <GUI_MEMDEV_GetDataPtr>
 80107c0:	4606      	mov	r6, r0
 80107c2:	2d00      	cmp	r5, #0
 80107c4:	f000 80be 	beq.w	8010944 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7fe f971 	bl	800eab0 <GUI_ALLOC_LockH>
 80107ce:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80107d2:	9018      	str	r0, [sp, #96]	; 0x60
 80107d4:	f04f 0a00 	mov.w	sl, #0
 80107d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107da:	4592      	cmp	sl, r2
 80107dc:	f280 80ae 	bge.w	801093c <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 80107e0:	9818      	ldr	r0, [sp, #96]	; 0x60
 80107e2:	2300      	movs	r3, #0
 80107e4:	9319      	str	r3, [sp, #100]	; 0x64
 80107e6:	6883      	ldr	r3, [r0, #8]
 80107e8:	a919      	add	r1, sp, #100	; 0x64
 80107ea:	695b      	ldr	r3, [r3, #20]
 80107ec:	4652      	mov	r2, sl
 80107ee:	4798      	blx	r3
 80107f0:	42b8      	cmp	r0, r7
 80107f2:	4605      	mov	r5, r0
 80107f4:	d12f      	bne.n	8010856 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 80107f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80107f8:	f7fe f95a 	bl	800eab0 <GUI_ALLOC_LockH>
 80107fc:	2c08      	cmp	r4, #8
 80107fe:	4601      	mov	r1, r0
 8010800:	9016      	str	r0, [sp, #88]	; 0x58
 8010802:	d909      	bls.n	8010818 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 8010804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010806:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010808:	9200      	str	r2, [sp, #0]
 801080a:	9301      	str	r3, [sp, #4]
 801080c:	4630      	mov	r0, r6
 801080e:	463a      	mov	r2, r7
 8010810:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010812:	f7ff ff28 	bl	8010666 <_Convert16>
 8010816:	e008      	b.n	801082a <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 8010818:	980e      	ldr	r0, [sp, #56]	; 0x38
 801081a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801081c:	9000      	str	r0, [sp, #0]
 801081e:	9201      	str	r2, [sp, #4]
 8010820:	4630      	mov	r0, r6
 8010822:	463a      	mov	r2, r7
 8010824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010826:	f7ff ff3d 	bl	80106a4 <_Convert8>
 801082a:	2301      	movs	r3, #1
 801082c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801082e:	9002      	str	r0, [sp, #8]
 8010830:	ad1c      	add	r5, sp, #112	; 0x70
 8010832:	2200      	movs	r2, #0
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	9203      	str	r2, [sp, #12]
 801083a:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 801083e:	9204      	str	r2, [sp, #16]
 8010840:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010842:	f8cd 8014 	str.w	r8, [sp, #20]
 8010846:	4659      	mov	r1, fp
 8010848:	463a      	mov	r2, r7
 801084a:	f7fb f80d 	bl	800b868 <LCD_DrawBitmap>
 801084e:	4628      	mov	r0, r5
 8010850:	f7fe f93c 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010854:	e060      	b.n	8010918 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 8010856:	2c01      	cmp	r4, #1
 8010858:	d15c      	bne.n	8010914 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 801085a:	2d00      	cmp	r5, #0
 801085c:	d05c      	beq.n	8010918 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 801085e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010860:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010862:	f8cd 900c 	str.w	r9, [sp, #12]
 8010866:	2208      	movs	r2, #8
 8010868:	fb90 f2f2 	sdiv	r2, r0, r2
 801086c:	4432      	add	r2, r6
 801086e:	2301      	movs	r3, #1
 8010870:	9204      	str	r2, [sp, #16]
 8010872:	f000 0207 	and.w	r2, r0, #7
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	4408      	add	r0, r1
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	9302      	str	r3, [sp, #8]
 801087e:	9206      	str	r2, [sp, #24]
 8010880:	4659      	mov	r1, fp
 8010882:	462a      	mov	r2, r5
 8010884:	f8cd 8014 	str.w	r8, [sp, #20]
 8010888:	f7fa ff12 	bl	800b6b0 <LCD__DrawBitmap_1bpp>
 801088c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801088e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010890:	441d      	add	r5, r3
 8010892:	6883      	ldr	r3, [r0, #8]
 8010894:	9519      	str	r5, [sp, #100]	; 0x64
 8010896:	695b      	ldr	r3, [r3, #20]
 8010898:	a919      	add	r1, sp, #100	; 0x64
 801089a:	4652      	mov	r2, sl
 801089c:	4798      	blx	r3
 801089e:	4605      	mov	r5, r0
 80108a0:	e7db      	b.n	801085a <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 80108a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80108a4:	f7fe f904 	bl	800eab0 <GUI_ALLOC_LockH>
 80108a8:	2c08      	cmp	r4, #8
 80108aa:	4601      	mov	r1, r0
 80108ac:	9016      	str	r0, [sp, #88]	; 0x58
 80108ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80108b0:	d938      	bls.n	8010924 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 80108b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108b4:	9200      	str	r2, [sp, #0]
 80108b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80108b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108ba:	9301      	str	r3, [sp, #4]
 80108bc:	fb00 6002 	mla	r0, r0, r2, r6
 80108c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108c2:	462a      	mov	r2, r5
 80108c4:	f7ff fecf 	bl	8010666 <_Convert16>
 80108c8:	2301      	movs	r3, #1
 80108ca:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 80108ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80108d0:	9300      	str	r3, [sp, #0]
 80108d2:	2200      	movs	r2, #0
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	9002      	str	r0, [sp, #8]
 80108d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80108da:	9203      	str	r2, [sp, #12]
 80108dc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80108de:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 80108e2:	9204      	str	r2, [sp, #16]
 80108e4:	4408      	add	r0, r1
 80108e6:	462a      	mov	r2, r5
 80108e8:	4659      	mov	r1, fp
 80108ea:	f8cd 8014 	str.w	r8, [sp, #20]
 80108ee:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80108f2:	f7fa ffb9 	bl	800b868 <LCD_DrawBitmap>
 80108f6:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80108fa:	4660      	mov	r0, ip
 80108fc:	f7fe f8e6 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010900:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010902:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010904:	441d      	add	r5, r3
 8010906:	6883      	ldr	r3, [r0, #8]
 8010908:	9519      	str	r5, [sp, #100]	; 0x64
 801090a:	695b      	ldr	r3, [r3, #20]
 801090c:	a919      	add	r1, sp, #100	; 0x64
 801090e:	4652      	mov	r2, sl
 8010910:	4798      	blx	r3
 8010912:	4605      	mov	r5, r0
 8010914:	2d00      	cmp	r5, #0
 8010916:	d1c4      	bne.n	80108a2 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 8010918:	444e      	add	r6, r9
 801091a:	f10a 0a01 	add.w	sl, sl, #1
 801091e:	f10b 0b01 	add.w	fp, fp, #1
 8010922:	e759      	b.n	80107d8 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 8010924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801092a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801092c:	9201      	str	r2, [sp, #4]
 801092e:	fb00 6003 	mla	r0, r0, r3, r6
 8010932:	462a      	mov	r2, r5
 8010934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010936:	f7ff feb5 	bl	80106a4 <_Convert8>
 801093a:	e7c5      	b.n	80108c8 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 801093c:	a818      	add	r0, sp, #96	; 0x60
 801093e:	f7fe f8c5 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010942:	e00e      	b.n	8010962 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 8010944:	2301      	movs	r3, #1
 8010946:	9300      	str	r3, [sp, #0]
 8010948:	9301      	str	r3, [sp, #4]
 801094a:	9004      	str	r0, [sp, #16]
 801094c:	9402      	str	r4, [sp, #8]
 801094e:	f8cd 900c 	str.w	r9, [sp, #12]
 8010952:	f8cd 8014 	str.w	r8, [sp, #20]
 8010956:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010958:	990d      	ldr	r1, [sp, #52]	; 0x34
 801095a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801095c:	463a      	mov	r2, r7
 801095e:	f7fa ff83 	bl	800b868 <LCD_DrawBitmap>
 8010962:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010964:	e24d      	b.n	8010e02 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010966:	4630      	mov	r0, r6
 8010968:	f7f8 fe58 	bl	800961c <GUI_MEMDEV_GetDataPtr>
 801096c:	4606      	mov	r6, r0
 801096e:	2d00      	cmp	r5, #0
 8010970:	f000 808a 	beq.w	8010a88 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 8010974:	4628      	mov	r0, r5
 8010976:	f7fe f89b 	bl	800eab0 <GUI_ALLOC_LockH>
 801097a:	2500      	movs	r5, #0
 801097c:	9018      	str	r0, [sp, #96]	; 0x60
 801097e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010980:	429d      	cmp	r5, r3
 8010982:	da7d      	bge.n	8010a80 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 8010984:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010986:	2300      	movs	r3, #0
 8010988:	9319      	str	r3, [sp, #100]	; 0x64
 801098a:	6883      	ldr	r3, [r0, #8]
 801098c:	a919      	add	r1, sp, #100	; 0x64
 801098e:	695b      	ldr	r3, [r3, #20]
 8010990:	462a      	mov	r2, r5
 8010992:	4798      	blx	r3
 8010994:	42b8      	cmp	r0, r7
 8010996:	4682      	mov	sl, r0
 8010998:	d124      	bne.n	80109e4 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 801099a:	46aa      	mov	sl, r5
 801099c:	9818      	ldr	r0, [sp, #96]	; 0x60
 801099e:	6883      	ldr	r3, [r0, #8]
 80109a0:	f10a 0b01 	add.w	fp, sl, #1
 80109a4:	695b      	ldr	r3, [r3, #20]
 80109a6:	a919      	add	r1, sp, #100	; 0x64
 80109a8:	465a      	mov	r2, fp
 80109aa:	4798      	blx	r3
 80109ac:	42b8      	cmp	r0, r7
 80109ae:	d101      	bne.n	80109b4 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 80109b0:	46da      	mov	sl, fp
 80109b2:	e7f3      	b.n	801099c <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 80109b4:	ebc5 0b0a 	rsb	fp, r5, sl
 80109b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80109ba:	9604      	str	r6, [sp, #16]
 80109bc:	2301      	movs	r3, #1
 80109be:	f10b 0b01 	add.w	fp, fp, #1
 80109c2:	9300      	str	r3, [sp, #0]
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	4429      	add	r1, r5
 80109c8:	9402      	str	r4, [sp, #8]
 80109ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80109ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80109d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80109d4:	463a      	mov	r2, r7
 80109d6:	465b      	mov	r3, fp
 80109d8:	f7fa ff46 	bl	800b868 <LCD_DrawBitmap>
 80109dc:	fb09 660b 	mla	r6, r9, fp, r6
 80109e0:	4655      	mov	r5, sl
 80109e2:	e04b      	b.n	8010a7c <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 80109e4:	2c01      	cmp	r4, #1
 80109e6:	d127      	bne.n	8010a38 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 80109e8:	f1ba 0f00 	cmp.w	sl, #0
 80109ec:	d022      	beq.n	8010a34 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 80109ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80109f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80109f2:	f8cd 900c 	str.w	r9, [sp, #12]
 80109f6:	2208      	movs	r2, #8
 80109f8:	fb90 f2f2 	sdiv	r2, r0, r2
 80109fc:	4432      	add	r2, r6
 80109fe:	9204      	str	r2, [sp, #16]
 8010a00:	f000 0207 	and.w	r2, r0, #7
 8010a04:	4408      	add	r0, r1
 8010a06:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a08:	9206      	str	r2, [sp, #24]
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	4652      	mov	r2, sl
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	9302      	str	r3, [sp, #8]
 8010a14:	4429      	add	r1, r5
 8010a16:	f8cd 8014 	str.w	r8, [sp, #20]
 8010a1a:	f7fa fe49 	bl	800b6b0 <LCD__DrawBitmap_1bpp>
 8010a1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a20:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010a22:	4453      	add	r3, sl
 8010a24:	9319      	str	r3, [sp, #100]	; 0x64
 8010a26:	6883      	ldr	r3, [r0, #8]
 8010a28:	a919      	add	r1, sp, #100	; 0x64
 8010a2a:	695b      	ldr	r3, [r3, #20]
 8010a2c:	462a      	mov	r2, r5
 8010a2e:	4798      	blx	r3
 8010a30:	4682      	mov	sl, r0
 8010a32:	e7d9      	b.n	80109e8 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 8010a34:	444e      	add	r6, r9
 8010a36:	e021      	b.n	8010a7c <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 8010a38:	f1ba 0f00 	cmp.w	sl, #0
 8010a3c:	d0fa      	beq.n	8010a34 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 8010a3e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010a40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010a42:	9402      	str	r4, [sp, #8]
 8010a44:	fb00 6201 	mla	r2, r0, r1, r6
 8010a48:	9204      	str	r2, [sp, #16]
 8010a4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a52:	2301      	movs	r3, #1
 8010a54:	4410      	add	r0, r2
 8010a56:	9300      	str	r3, [sp, #0]
 8010a58:	4652      	mov	r2, sl
 8010a5a:	9301      	str	r3, [sp, #4]
 8010a5c:	4429      	add	r1, r5
 8010a5e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010a62:	f7fa ff01 	bl	800b868 <LCD_DrawBitmap>
 8010a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010a68:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010a6a:	4453      	add	r3, sl
 8010a6c:	9319      	str	r3, [sp, #100]	; 0x64
 8010a6e:	6883      	ldr	r3, [r0, #8]
 8010a70:	a919      	add	r1, sp, #100	; 0x64
 8010a72:	695b      	ldr	r3, [r3, #20]
 8010a74:	462a      	mov	r2, r5
 8010a76:	4798      	blx	r3
 8010a78:	4682      	mov	sl, r0
 8010a7a:	e7dd      	b.n	8010a38 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 8010a7c:	3501      	adds	r5, #1
 8010a7e:	e77e      	b.n	801097e <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 8010a80:	a818      	add	r0, sp, #96	; 0x60
 8010a82:	f7fe f823 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010a86:	e1be      	b.n	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010a88:	2301      	movs	r3, #1
 8010a8a:	9300      	str	r3, [sp, #0]
 8010a8c:	9301      	str	r3, [sp, #4]
 8010a8e:	9004      	str	r0, [sp, #16]
 8010a90:	9402      	str	r4, [sp, #8]
 8010a92:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a96:	f8cd 8014 	str.w	r8, [sp, #20]
 8010a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010a9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010aa0:	463a      	mov	r2, r7
 8010aa2:	e041      	b.n	8010b28 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	910a      	str	r1, [sp, #40]	; 0x28
 8010aa8:	f7fe f802 	bl	800eab0 <GUI_ALLOC_LockH>
 8010aac:	4682      	mov	sl, r0
 8010aae:	a81c      	add	r0, sp, #112	; 0x70
 8010ab0:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8010ab4:	f840 ad10 	str.w	sl, [r0, #-16]!
 8010ab8:	f8da 4000 	ldr.w	r4, [sl]
 8010abc:	9210      	str	r2, [sp, #64]	; 0x40
 8010abe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010ac2:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 8010ac6:	4c9e      	ldr	r4, [pc, #632]	; (8010d40 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 8010ac8:	b213      	sxth	r3, r2
 8010aca:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010ace:	920b      	str	r2, [sp, #44]	; 0x2c
 8010ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad2:	f7fd fffb 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010ad6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8010ada:	900e      	str	r0, [sp, #56]	; 0x38
 8010adc:	4899      	ldr	r0, [pc, #612]	; (8010d44 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	7c40      	ldrb	r0, [r0, #17]
 8010ae2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8010ae6:	6925      	ldr	r5, [r4, #16]
 8010ae8:	f8d5 8000 	ldr.w	r8, [r5]
 8010aec:	f7fa fbd8 	bl	800b2a0 <GUI_GetBitsPerPixelEx>
 8010af0:	2808      	cmp	r0, #8
 8010af2:	fa0f fb87 	sxth.w	fp, r7
 8010af6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010afc:	d904      	bls.n	8010b08 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 8010afe:	2810      	cmp	r0, #16
 8010b00:	bf8c      	ite	hi
 8010b02:	2404      	movhi	r4, #4
 8010b04:	2402      	movls	r4, #2
 8010b06:	e000      	b.n	8010b0a <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 8010b08:	2401      	movs	r4, #1
 8010b0a:	45a9      	cmp	r9, r5
 8010b0c:	d10f      	bne.n	8010b2e <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 8010b0e:	2001      	movs	r0, #1
 8010b10:	9203      	str	r2, [sp, #12]
 8010b12:	f10a 0218 	add.w	r2, sl, #24
 8010b16:	9000      	str	r0, [sp, #0]
 8010b18:	9001      	str	r0, [sp, #4]
 8010b1a:	9102      	str	r1, [sp, #8]
 8010b1c:	9204      	str	r2, [sp, #16]
 8010b1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010b20:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010b22:	2200      	movs	r2, #0
 8010b24:	9205      	str	r2, [sp, #20]
 8010b26:	465a      	mov	r2, fp
 8010b28:	f7fa fe9e 	bl	800b868 <LCD_DrawBitmap>
 8010b2c:	e16b      	b.n	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010b2e:	2920      	cmp	r1, #32
 8010b30:	f040 808e 	bne.w	8010c50 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 8010b34:	fb0b f004 	mul.w	r0, fp, r4
 8010b38:	f7fe fa02 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 8010b3c:	900e      	str	r0, [sp, #56]	; 0x38
 8010b3e:	2800      	cmp	r0, #0
 8010b40:	f000 8161 	beq.w	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010b44:	f7fd ffb4 	bl	800eab0 <GUI_ALLOC_LockH>
 8010b48:	901a      	str	r0, [sp, #104]	; 0x68
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	f7fd ffb0 	bl	800eab0 <GUI_ALLOC_LockH>
 8010b50:	9018      	str	r0, [sp, #96]	; 0x60
 8010b52:	692b      	ldr	r3, [r5, #16]
 8010b54:	f100 0a18 	add.w	sl, r0, #24
 8010b58:	ea4f 068b 	mov.w	r6, fp, lsl #2
 8010b5c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d02f      	beq.n	8010bc4 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 8010b64:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8010b68:	2c02      	cmp	r4, #2
 8010b6a:	d003      	beq.n	8010b74 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8010b6c:	2c04      	cmp	r4, #4
 8010b6e:	d001      	beq.n	8010b74 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 8010b70:	2c01      	cmp	r4, #1
 8010b72:	d106      	bne.n	8010b82 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 8010b74:	4650      	mov	r0, sl
 8010b76:	692f      	ldr	r7, [r5, #16]
 8010b78:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010b7a:	465a      	mov	r2, fp
 8010b7c:	4623      	mov	r3, r4
 8010b7e:	47b8      	blx	r7
 8010b80:	44b2      	add	sl, r6
 8010b82:	2301      	movs	r3, #1
 8010b84:	2200      	movs	r2, #0
 8010b86:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010b88:	9300      	str	r3, [sp, #0]
 8010b8a:	9301      	str	r3, [sp, #4]
 8010b8c:	9203      	str	r2, [sp, #12]
 8010b8e:	9104      	str	r1, [sp, #16]
 8010b90:	9205      	str	r2, [sp, #20]
 8010b92:	4641      	mov	r1, r8
 8010b94:	465a      	mov	r2, fp
 8010b96:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010b9c:	f7fa fe64 	bl	800b868 <LCD_DrawBitmap>
 8010ba0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010ba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010ba4:	f108 0701 	add.w	r7, r8, #1
 8010ba8:	fa02 f381 	sxtah	r3, r2, r1
 8010bac:	42bb      	cmp	r3, r7
 8010bae:	d107      	bne.n	8010bc0 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 8010bb0:	a818      	add	r0, sp, #96	; 0x60
 8010bb2:	f7fd ff8b 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010bb6:	a81a      	add	r0, sp, #104	; 0x68
 8010bb8:	f7fd ff88 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010bbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010bbe:	e120      	b.n	8010e02 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 8010bc0:	46b8      	mov	r8, r7
 8010bc2:	e7d1      	b.n	8010b68 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 8010bc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010bc6:	2c02      	cmp	r4, #2
 8010bc8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8010bca:	d00e      	beq.n	8010bea <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 8010bcc:	2c04      	cmp	r4, #4
 8010bce:	d018      	beq.n	8010c02 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 8010bd0:	2c01      	cmp	r4, #1
 8010bd2:	d125      	bne.n	8010c20 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010bda:	9309      	str	r3, [sp, #36]	; 0x24
 8010bdc:	47c0      	blx	r8
 8010bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010be0:	54f8      	strb	r0, [r7, r3]
 8010be2:	3301      	adds	r3, #1
 8010be4:	459b      	cmp	fp, r3
 8010be6:	d1f6      	bne.n	8010bd6 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 8010be8:	e019      	b.n	8010c1e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8010bea:	2300      	movs	r3, #0
 8010bec:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8010bf2:	47c0      	blx	r8
 8010bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bf6:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	459b      	cmp	fp, r3
 8010bfe:	d1f5      	bne.n	8010bec <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 8010c00:	e00d      	b.n	8010c1e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 8010c02:	465a      	mov	r2, fp
 8010c04:	2300      	movs	r3, #0
 8010c06:	f85a 0003 	ldr.w	r0, [sl, r3]
 8010c0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8010c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c0e:	47c0      	blx	r8
 8010c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c14:	3a01      	subs	r2, #1
 8010c16:	50f8      	str	r0, [r7, r3]
 8010c18:	f103 0304 	add.w	r3, r3, #4
 8010c1c:	d1f3      	bne.n	8010c06 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 8010c1e:	44b2      	add	sl, r6
 8010c20:	2301      	movs	r3, #1
 8010c22:	2200      	movs	r2, #0
 8010c24:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	9301      	str	r3, [sp, #4]
 8010c2a:	9203      	str	r2, [sp, #12]
 8010c2c:	9104      	str	r1, [sp, #16]
 8010c2e:	9205      	str	r2, [sp, #20]
 8010c30:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010c32:	f8cd 9008 	str.w	r9, [sp, #8]
 8010c36:	4629      	mov	r1, r5
 8010c38:	465a      	mov	r2, fp
 8010c3a:	f7fa fe15 	bl	800b868 <LCD_DrawBitmap>
 8010c3e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010c40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010c42:	1c6f      	adds	r7, r5, #1
 8010c44:	fa01 f380 	sxtah	r3, r1, r0
 8010c48:	42bb      	cmp	r3, r7
 8010c4a:	d0b1      	beq.n	8010bb0 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 8010c4c:	463d      	mov	r5, r7
 8010c4e:	e7ba      	b.n	8010bc6 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 8010c50:	2910      	cmp	r1, #16
 8010c52:	f040 80d8 	bne.w	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010c56:	fa0f fa87 	sxth.w	sl, r7
 8010c5a:	fb0a f004 	mul.w	r0, sl, r4
 8010c5e:	f7fe f96f 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 8010c62:	9012      	str	r0, [sp, #72]	; 0x48
 8010c64:	2800      	cmp	r0, #0
 8010c66:	f000 80ce 	beq.w	8010e06 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 8010c6a:	f7fd ff21 	bl	800eab0 <GUI_ALLOC_LockH>
 8010c6e:	901a      	str	r0, [sp, #104]	; 0x68
 8010c70:	4630      	mov	r0, r6
 8010c72:	f7fd ff1d 	bl	800eab0 <GUI_ALLOC_LockH>
 8010c76:	9018      	str	r0, [sp, #96]	; 0x60
 8010c78:	692b      	ldr	r3, [r5, #16]
 8010c7a:	f100 0618 	add.w	r6, r0, #24
 8010c7e:	b113      	cbz	r3, 8010c86 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 8010c80:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010c84:	b92b      	cbnz	r3, 8010c92 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 8010c86:	00e2      	lsls	r2, r4, #3
 8010c88:	b23f      	sxth	r7, r7
 8010c8a:	9211      	str	r2, [sp, #68]	; 0x44
 8010c8c:	007f      	lsls	r7, r7, #1
 8010c8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010c90:	e088      	b.n	8010da4 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 8010c92:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8010c96:	0080      	lsls	r0, r0, #2
 8010c98:	f7fe f952 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 8010c9c:	9011      	str	r0, [sp, #68]	; 0x44
 8010c9e:	b118      	cbz	r0, 8010ca8 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 8010ca0:	f7fd ff06 	bl	800eab0 <GUI_ALLOC_LockH>
 8010ca4:	9019      	str	r0, [sp, #100]	; 0x64
 8010ca6:	e001      	b.n	8010cac <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 8010ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010caa:	9319      	str	r3, [sp, #100]	; 0x64
 8010cac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f000 80a0 	beq.w	8010df4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8010cb4:	b23f      	sxth	r7, r7
 8010cb6:	007f      	lsls	r7, r7, #1
 8010cb8:	970e      	str	r7, [sp, #56]	; 0x38
 8010cba:	00e7      	lsls	r7, r4, #3
 8010cbc:	9713      	str	r7, [sp, #76]	; 0x4c
 8010cbe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010cc0:	970c      	str	r7, [sp, #48]	; 0x30
 8010cc2:	2c02      	cmp	r4, #2
 8010cc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8010cc8:	d004      	beq.n	8010cd4 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 8010cca:	2c04      	cmp	r4, #4
 8010ccc:	d007      	beq.n	8010cde <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8010cce:	2c01      	cmp	r4, #1
 8010cd0:	d114      	bne.n	8010cfc <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 8010cd2:	e004      	b.n	8010cde <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010cd8:	4652      	mov	r2, sl
 8010cda:	4623      	mov	r3, r4
 8010cdc:	e003      	b.n	8010ce6 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 8010cde:	9919      	ldr	r1, [sp, #100]	; 0x64
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	4652      	mov	r2, sl
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8010cea:	47b8      	blx	r7
 8010cec:	692f      	ldr	r7, [r5, #16]
 8010cee:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010cf0:	4641      	mov	r1, r8
 8010cf2:	4652      	mov	r2, sl
 8010cf4:	4623      	mov	r3, r4
 8010cf6:	47b8      	blx	r7
 8010cf8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010cfa:	443e      	add	r6, r7
 8010cfc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8010cfe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010d00:	9104      	str	r1, [sp, #16]
 8010d02:	2301      	movs	r3, #1
 8010d04:	2200      	movs	r2, #0
 8010d06:	f107 0801 	add.w	r8, r7, #1
 8010d0a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	9702      	str	r7, [sp, #8]
 8010d12:	9203      	str	r2, [sp, #12]
 8010d14:	9205      	str	r2, [sp, #20]
 8010d16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010d18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d1a:	465a      	mov	r2, fp
 8010d1c:	f7fa fda4 	bl	800b868 <LCD_DrawBitmap>
 8010d20:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010d22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010d24:	fa00 f387 	sxtah	r3, r0, r7
 8010d28:	4543      	cmp	r3, r8
 8010d2a:	d002      	beq.n	8010d32 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 8010d2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010d30:	e7c7      	b.n	8010cc2 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 8010d32:	a819      	add	r0, sp, #100	; 0x64
 8010d34:	f7fd feca 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010d38:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010d3a:	f7fd fee7 	bl	800eb0c <GUI_ALLOC_Free>
 8010d3e:	e059      	b.n	8010df4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8010d40:	20023074 	.word	0x20023074
 8010d44:	20000038 	.word	0x20000038
 8010d48:	2c04      	cmp	r4, #4
 8010d4a:	d041      	beq.n	8010dd0 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 8010d4c:	2c01      	cmp	r4, #1
 8010d4e:	d111      	bne.n	8010d74 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 8010d50:	464a      	mov	r2, r9
 8010d52:	4631      	mov	r1, r6
 8010d54:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010d58:	910a      	str	r1, [sp, #40]	; 0x28
 8010d5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d5e:	4798      	blx	r3
 8010d60:	47c0      	blx	r8
 8010d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d64:	f802 0b01 	strb.w	r0, [r2], #1
 8010d68:	eb09 000a 	add.w	r0, r9, sl
 8010d6c:	4282      	cmp	r2, r0
 8010d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d70:	d1f0      	bne.n	8010d54 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 8010d72:	443e      	add	r6, r7
 8010d74:	2301      	movs	r3, #1
 8010d76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010d78:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010d7a:	9300      	str	r3, [sp, #0]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	9002      	str	r0, [sp, #8]
 8010d82:	9203      	str	r2, [sp, #12]
 8010d84:	9104      	str	r1, [sp, #16]
 8010d86:	9205      	str	r2, [sp, #20]
 8010d88:	4629      	mov	r1, r5
 8010d8a:	465a      	mov	r2, fp
 8010d8c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010d8e:	f7fa fd6b 	bl	800b868 <LCD_DrawBitmap>
 8010d92:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d96:	f105 0901 	add.w	r9, r5, #1
 8010d9a:	fa02 f381 	sxtah	r3, r2, r1
 8010d9e:	454b      	cmp	r3, r9
 8010da0:	d028      	beq.n	8010df4 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 8010da2:	464d      	mov	r5, r9
 8010da4:	2c02      	cmp	r4, #2
 8010da6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 8010daa:	d1cd      	bne.n	8010d48 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 8010dac:	464b      	mov	r3, r9
 8010dae:	4631      	mov	r1, r6
 8010db0:	46d9      	mov	r9, fp
 8010db2:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010db6:	910a      	str	r1, [sp, #40]	; 0x28
 8010db8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dbc:	4790      	blx	r2
 8010dbe:	47c0      	blx	r8
 8010dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010dc4:	f823 0b02 	strh.w	r0, [r3], #2
 8010dc8:	f1b9 0901 	subs.w	r9, r9, #1
 8010dcc:	d1f1      	bne.n	8010db2 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 8010dce:	e7d0      	b.n	8010d72 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8010dd0:	464b      	mov	r3, r9
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	46d9      	mov	r9, fp
 8010dd6:	f831 0b02 	ldrh.w	r0, [r1], #2
 8010dda:	910a      	str	r1, [sp, #40]	; 0x28
 8010ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8010dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010de0:	4790      	blx	r2
 8010de2:	47c0      	blx	r8
 8010de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010de6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010de8:	f843 0b04 	str.w	r0, [r3], #4
 8010dec:	f1b9 0901 	subs.w	r9, r9, #1
 8010df0:	d1f1      	bne.n	8010dd6 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 8010df2:	e7be      	b.n	8010d72 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 8010df4:	a818      	add	r0, sp, #96	; 0x60
 8010df6:	f7fd fe69 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010dfa:	a81a      	add	r0, sp, #104	; 0x68
 8010dfc:	f7fd fe66 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010e00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010e02:	f7fd fe83 	bl	800eb0c <GUI_ALLOC_Free>
 8010e06:	b01d      	add	sp, #116	; 0x74
 8010e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e0c <GUI_MEMDEV__WriteToActiveAlpha>:
 8010e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e10:	b091      	sub	sp, #68	; 0x44
 8010e12:	460e      	mov	r6, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	900d      	str	r0, [sp, #52]	; 0x34
 8010e18:	f7fd fe4a 	bl	800eab0 <GUI_ALLOC_LockH>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	a810      	add	r0, sp, #64	; 0x40
 8010e20:	6813      	ldr	r3, [r2, #0]
 8010e22:	4d5b      	ldr	r5, [pc, #364]	; (8010f90 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	f840 2d08 	str.w	r2, [r0, #-8]!
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 8010e30:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8010e34:	9309      	str	r3, [sp, #36]	; 0x24
 8010e36:	f7fd fe49 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010e3a:	682b      	ldr	r3, [r5, #0]
 8010e3c:	4f55      	ldr	r7, [pc, #340]	; (8010f94 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 8010e3e:	7c5b      	ldrb	r3, [r3, #17]
 8010e40:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8010e44:	68c3      	ldr	r3, [r0, #12]
 8010e46:	2108      	movs	r1, #8
 8010e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e4a:	4798      	blx	r3
 8010e4c:	682b      	ldr	r3, [r5, #0]
 8010e4e:	7c5b      	ldrb	r3, [r3, #17]
 8010e50:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8010e54:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010e58:	2817      	cmp	r0, #23
 8010e5a:	bf88      	it	hi
 8010e5c:	2020      	movhi	r0, #32
 8010e5e:	9008      	str	r0, [sp, #32]
 8010e60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e64:	f8d8 2000 	ldr.w	r2, [r8]
 8010e68:	910a      	str	r1, [sp, #40]	; 0x28
 8010e6a:	2000      	movs	r0, #0
 8010e6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010e6e:	f7fb f995 	bl	800c19c <GUI__AllocAlphaBuffer>
 8010e72:	2800      	cmp	r0, #0
 8010e74:	f040 8089 	bne.w	8010f8a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010e78:	682a      	ldr	r2, [r5, #0]
 8010e7a:	fa0f f78b 	sxth.w	r7, fp
 8010e7e:	19f5      	adds	r5, r6, r7
 8010e80:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8010e84:	3d01      	subs	r5, #1
 8010e86:	1aed      	subs	r5, r5, r3
 8010e88:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8010e8c:	2d00      	cmp	r5, #0
 8010e8e:	bfcc      	ite	gt
 8010e90:	ebc5 0507 	rsbgt	r5, r5, r7
 8010e94:	463d      	movle	r5, r7
 8010e96:	42b3      	cmp	r3, r6
 8010e98:	bfc3      	ittte	gt
 8010e9a:	ebc6 0103 	rsbgt	r1, r6, r3
 8010e9e:	ebc1 0505 	rsbgt	r5, r1, r5
 8010ea2:	461e      	movgt	r6, r3
 8010ea4:	2100      	movle	r1, #0
 8010ea6:	2d00      	cmp	r5, #0
 8010ea8:	dd6f      	ble.n	8010f8a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010eaa:	fa0f f389 	sxth.w	r3, r9
 8010eae:	18e0      	adds	r0, r4, r3
 8010eb0:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8010eb4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8010eb8:	3801      	subs	r0, #1
 8010eba:	ebcc 0000 	rsb	r0, ip, r0
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	bfc8      	it	gt
 8010ec2:	ebc0 0303 	rsbgt	r3, r0, r3
 8010ec6:	4294      	cmp	r4, r2
 8010ec8:	bfbd      	ittte	lt
 8010eca:	ebc4 0a02 	rsblt	sl, r4, r2
 8010ece:	ebca 0303 	rsblt	r3, sl, r3
 8010ed2:	4614      	movlt	r4, r2
 8010ed4:	f04f 0a00 	movge.w	sl, #0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	dd56      	ble.n	8010f8a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010edc:	fb07 1a0a 	mla	sl, r7, sl, r1
 8010ee0:	18e3      	adds	r3, r4, r3
 8010ee2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8010ee8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010eea:	f7f8 fb97 	bl	800961c <GUI_MEMDEV_GetDataPtr>
 8010eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	ab0f      	add	r3, sp, #60	; 0x3c
 8010ef4:	eb00 020a 	add.w	r2, r0, sl
 8010ef8:	9301      	str	r3, [sp, #4]
 8010efa:	4630      	mov	r0, r6
 8010efc:	4621      	mov	r1, r4
 8010efe:	462b      	mov	r3, r5
 8010f00:	f7fb f866 	bl	800bfd0 <GUI__DoAlphaBlending>
 8010f04:	4681      	mov	r9, r0
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d03f      	beq.n	8010f8a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010f0a:	4b23      	ldr	r3, [pc, #140]	; (8010f98 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 8010f0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f0e:	4299      	cmp	r1, r3
 8010f10:	d01e      	beq.n	8010f50 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010f12:	4629      	mov	r1, r5
 8010f14:	9a08      	ldr	r2, [sp, #32]
 8010f16:	4643      	mov	r3, r8
 8010f18:	f000 fe6b 	bl	8011bf2 <GUI__CompactPixelIndicesEx>
 8010f1c:	b9c0      	cbnz	r0, 8010f50 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010f1e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8010f22:	f1bc 0f00 	cmp.w	ip, #0
 8010f26:	d006      	beq.n	8010f36 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 8010f28:	4648      	mov	r0, r9
 8010f2a:	4649      	mov	r1, r9
 8010f2c:	fa0f f28b 	sxth.w	r2, fp
 8010f30:	2304      	movs	r3, #4
 8010f32:	47e0      	blx	ip
 8010f34:	e00c      	b.n	8010f50 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 8010f36:	464a      	mov	r2, r9
 8010f38:	463b      	mov	r3, r7
 8010f3a:	6810      	ldr	r0, [r2, #0]
 8010f3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010f3e:	9206      	str	r2, [sp, #24]
 8010f40:	9307      	str	r3, [sp, #28]
 8010f42:	4788      	blx	r1
 8010f44:	9b07      	ldr	r3, [sp, #28]
 8010f46:	9a06      	ldr	r2, [sp, #24]
 8010f48:	3b01      	subs	r3, #1
 8010f4a:	f842 0b04 	str.w	r0, [r2], #4
 8010f4e:	d1f4      	bne.n	8010f3a <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8010f50:	9a08      	ldr	r2, [sp, #32]
 8010f52:	9202      	str	r2, [sp, #8]
 8010f54:	2301      	movs	r3, #1
 8010f56:	2200      	movs	r2, #0
 8010f58:	f104 0c01 	add.w	ip, r4, #1
 8010f5c:	9300      	str	r3, [sp, #0]
 8010f5e:	9301      	str	r3, [sp, #4]
 8010f60:	9203      	str	r2, [sp, #12]
 8010f62:	9205      	str	r2, [sp, #20]
 8010f64:	f8cd 9010 	str.w	r9, [sp, #16]
 8010f68:	4630      	mov	r0, r6
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	462a      	mov	r2, r5
 8010f6e:	f8cd c01c 	str.w	ip, [sp, #28]
 8010f72:	f7fa fc79 	bl	800b868 <LCD_DrawBitmap>
 8010f76:	2304      	movs	r3, #4
 8010f78:	fb1b aa03 	smlabb	sl, fp, r3, sl
 8010f7c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f82:	459c      	cmp	ip, r3
 8010f84:	d001      	beq.n	8010f8a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8010f86:	4664      	mov	r4, ip
 8010f88:	e7ae      	b.n	8010ee8 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 8010f8a:	b011      	add	sp, #68	; 0x44
 8010f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f90:	20000038 	.word	0x20000038
 8010f94:	20023074 	.word	0x20023074
 8010f98:	0800f13f 	.word	0x0800f13f

08010f9c <GUI_MEMDEV_WriteAt>:
 8010f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	4615      	mov	r5, r2
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	b330      	cbz	r0, 8010ff4 <GUI_MEMDEV_WriteAt+0x58>
 8010fa6:	f7fd fd83 	bl	800eab0 <GUI_ALLOC_LockH>
 8010faa:	4a13      	ldr	r2, [pc, #76]	; (8010ff8 <GUI_MEMDEV_WriteAt+0x5c>)
 8010fac:	8943      	ldrh	r3, [r0, #10]
 8010fae:	9001      	str	r0, [sp, #4]
 8010fb0:	4294      	cmp	r4, r2
 8010fb2:	8902      	ldrh	r2, [r0, #8]
 8010fb4:	bf04      	itt	eq
 8010fb6:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 8010fba:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 8010fbe:	f8ad 4008 	strh.w	r4, [sp, #8]
 8010fc2:	3a01      	subs	r2, #1
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	4422      	add	r2, r4
 8010fc8:	442b      	add	r3, r5
 8010fca:	a801      	add	r0, sp, #4
 8010fcc:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010fd0:	f8ad 500a 	strh.w	r5, [sp, #10]
 8010fd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010fd8:	f7fd fd78 	bl	800eacc <GUI_ALLOC_UnlockH>
 8010fdc:	a802      	add	r0, sp, #8
 8010fde:	f7f7 ff1d 	bl	8008e1c <WM__InitIVRSearch>
 8010fe2:	b138      	cbz	r0, 8010ff4 <GUI_MEMDEV_WriteAt+0x58>
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	462a      	mov	r2, r5
 8010fea:	f7f9 f8e3 	bl	800a1b4 <GUI_MEMDEV__WriteToActiveAt>
 8010fee:	f7f7 fe53 	bl	8008c98 <WM__GetNextIVR>
 8010ff2:	e7f6      	b.n	8010fe2 <GUI_MEMDEV_WriteAt+0x46>
 8010ff4:	b004      	add	sp, #16
 8010ff6:	bd70      	pop	{r4, r5, r6, pc}
 8010ff8:	fffff001 	.word	0xfffff001

08010ffc <GUI_MEMDEV_Write>:
 8010ffc:	4901      	ldr	r1, [pc, #4]	; (8011004 <GUI_MEMDEV_Write+0x8>)
 8010ffe:	460a      	mov	r2, r1
 8011000:	f7ff bfcc 	b.w	8010f9c <GUI_MEMDEV_WriteAt>
 8011004:	fffff001 	.word	0xfffff001

08011008 <GUI_USAGE_BM_AddPixel>:
 8011008:	4603      	mov	r3, r0
 801100a:	b510      	push	{r4, lr}
 801100c:	f933 4b14 	ldrsh.w	r4, [r3], #20
 8011010:	1b09      	subs	r1, r1, r4
 8011012:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011016:	6900      	ldr	r0, [r0, #16]
 8011018:	1b12      	subs	r2, r2, r4
 801101a:	fb00 3302 	mla	r3, r0, r2, r3
 801101e:	10c8      	asrs	r0, r1, #3
 8011020:	2280      	movs	r2, #128	; 0x80
 8011022:	f001 0107 	and.w	r1, r1, #7
 8011026:	fa42 f101 	asr.w	r1, r2, r1
 801102a:	5c1a      	ldrb	r2, [r3, r0]
 801102c:	4311      	orrs	r1, r2
 801102e:	5419      	strb	r1, [r3, r0]
 8011030:	bd10      	pop	{r4, pc}

08011032 <GUI_USAGE_BM_GetNextDirty>:
 8011032:	b570      	push	{r4, r5, r6, lr}
 8011034:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8011038:	680b      	ldr	r3, [r1, #0]
 801103a:	8886      	ldrh	r6, [r0, #4]
 801103c:	42a2      	cmp	r2, r4
 801103e:	da41      	bge.n	80110c4 <GUI_USAGE_BM_GetNextDirty+0x92>
 8011040:	b236      	sxth	r6, r6
 8011042:	42b3      	cmp	r3, r6
 8011044:	6904      	ldr	r4, [r0, #16]
 8011046:	da3d      	bge.n	80110c4 <GUI_USAGE_BM_GetNextDirty+0x92>
 8011048:	3014      	adds	r0, #20
 801104a:	fb04 0202 	mla	r2, r4, r2, r0
 801104e:	10dd      	asrs	r5, r3, #3
 8011050:	1e70      	subs	r0, r6, #1
 8011052:	1954      	adds	r4, r2, r5
 8011054:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 8011058:	5d55      	ldrb	r5, [r2, r5]
 801105a:	f003 0207 	and.w	r2, r3, #7
 801105e:	fa05 f202 	lsl.w	r2, r5, r2
 8011062:	3401      	adds	r4, #1
 8011064:	b2d2      	uxtb	r2, r2
 8011066:	b93a      	cbnz	r2, 8011078 <GUI_USAGE_BM_GetNextDirty+0x46>
 8011068:	b368      	cbz	r0, 80110c6 <GUI_USAGE_BM_GetNextDirty+0x94>
 801106a:	3308      	adds	r3, #8
 801106c:	f814 2b01 	ldrb.w	r2, [r4], #1
 8011070:	3801      	subs	r0, #1
 8011072:	f023 0307 	bic.w	r3, r3, #7
 8011076:	e7f6      	b.n	8011066 <GUI_USAGE_BM_GetNextDirty+0x34>
 8011078:	0615      	lsls	r5, r2, #24
 801107a:	d403      	bmi.n	8011084 <GUI_USAGE_BM_GetNextDirty+0x52>
 801107c:	0052      	lsls	r2, r2, #1
 801107e:	b2d2      	uxtb	r2, r2
 8011080:	3301      	adds	r3, #1
 8011082:	e7f9      	b.n	8011078 <GUI_USAGE_BM_GetNextDirty+0x46>
 8011084:	2aff      	cmp	r2, #255	; 0xff
 8011086:	461d      	mov	r5, r3
 8011088:	d005      	beq.n	8011096 <GUI_USAGE_BM_GetNextDirty+0x64>
 801108a:	0656      	lsls	r6, r2, #25
 801108c:	d504      	bpl.n	8011098 <GUI_USAGE_BM_GetNextDirty+0x66>
 801108e:	0052      	lsls	r2, r2, #1
 8011090:	b2d2      	uxtb	r2, r2
 8011092:	3301      	adds	r3, #1
 8011094:	e7f9      	b.n	801108a <GUI_USAGE_BM_GetNextDirty+0x58>
 8011096:	3307      	adds	r3, #7
 8011098:	f003 0207 	and.w	r2, r3, #7
 801109c:	2a07      	cmp	r2, #7
 801109e:	d10d      	bne.n	80110bc <GUI_USAGE_BM_GetNextDirty+0x8a>
 80110a0:	3801      	subs	r0, #1
 80110a2:	d40b      	bmi.n	80110bc <GUI_USAGE_BM_GetNextDirty+0x8a>
 80110a4:	f814 2b01 	ldrb.w	r2, [r4], #1
 80110a8:	2aff      	cmp	r2, #255	; 0xff
 80110aa:	d101      	bne.n	80110b0 <GUI_USAGE_BM_GetNextDirty+0x7e>
 80110ac:	3308      	adds	r3, #8
 80110ae:	e7f7      	b.n	80110a0 <GUI_USAGE_BM_GetNextDirty+0x6e>
 80110b0:	0610      	lsls	r0, r2, #24
 80110b2:	d503      	bpl.n	80110bc <GUI_USAGE_BM_GetNextDirty+0x8a>
 80110b4:	0052      	lsls	r2, r2, #1
 80110b6:	b2d2      	uxtb	r2, r2
 80110b8:	3301      	adds	r3, #1
 80110ba:	e7f9      	b.n	80110b0 <GUI_USAGE_BM_GetNextDirty+0x7e>
 80110bc:	1b58      	subs	r0, r3, r5
 80110be:	600d      	str	r5, [r1, #0]
 80110c0:	3001      	adds	r0, #1
 80110c2:	bd70      	pop	{r4, r5, r6, pc}
 80110c4:	2000      	movs	r0, #0
 80110c6:	bd70      	pop	{r4, r5, r6, pc}

080110c8 <_GUI_USAGE_BM_Delete>:
 80110c8:	f7fd bd20 	b.w	800eb0c <GUI_ALLOC_Free>

080110cc <GUI_USAGE_BM_Clear>:
 80110cc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80110d0:	6902      	ldr	r2, [r0, #16]
 80110d2:	2100      	movs	r1, #0
 80110d4:	3014      	adds	r0, #20
 80110d6:	435a      	muls	r2, r3
 80110d8:	f001 bc66 	b.w	80129a8 <memset>

080110dc <GUI_USAGE_BM_AddHLine>:
 80110dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110de:	f9b0 4000 	ldrsh.w	r4, [r0]
 80110e2:	1b09      	subs	r1, r1, r4
 80110e4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80110e8:	42a1      	cmp	r1, r4
 80110ea:	da2f      	bge.n	801114c <GUI_USAGE_BM_AddHLine+0x70>
 80110ec:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 80110f0:	440b      	add	r3, r1
 80110f2:	f100 0414 	add.w	r4, r0, #20
 80110f6:	3b01      	subs	r3, #1
 80110f8:	6900      	ldr	r0, [r0, #16]
 80110fa:	1b52      	subs	r2, r2, r5
 80110fc:	43de      	mvns	r6, r3
 80110fe:	fb00 4202 	mla	r2, r0, r2, r4
 8011102:	f001 0707 	and.w	r7, r1, #7
 8011106:	10cc      	asrs	r4, r1, #3
 8011108:	f006 0607 	and.w	r6, r6, #7
 801110c:	21ff      	movs	r1, #255	; 0xff
 801110e:	fa41 f707 	asr.w	r7, r1, r7
 8011112:	fa01 f606 	lsl.w	r6, r1, r6
 8011116:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 801111a:	eb02 0504 	add.w	r5, r2, r4
 801111e:	b2ff      	uxtb	r7, r7
 8011120:	b2f6      	uxtb	r6, r6
 8011122:	5d10      	ldrb	r0, [r2, r4]
 8011124:	d103      	bne.n	801112e <GUI_USAGE_BM_AddHLine+0x52>
 8011126:	403e      	ands	r6, r7
 8011128:	4330      	orrs	r0, r6
 801112a:	5510      	strb	r0, [r2, r4]
 801112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801112e:	4338      	orrs	r0, r7
 8011130:	5510      	strb	r0, [r2, r4]
 8011132:	1e5c      	subs	r4, r3, #1
 8011134:	2c00      	cmp	r4, #0
 8011136:	f105 0501 	add.w	r5, r5, #1
 801113a:	dd04      	ble.n	8011146 <GUI_USAGE_BM_AddHLine+0x6a>
 801113c:	4628      	mov	r0, r5
 801113e:	4622      	mov	r2, r4
 8011140:	f001 fc32 	bl	80129a8 <memset>
 8011144:	4425      	add	r5, r4
 8011146:	782b      	ldrb	r3, [r5, #0]
 8011148:	431e      	orrs	r6, r3
 801114a:	702e      	strb	r6, [r5, #0]
 801114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011150 <GUI_USAGE_BM_Create>:
 8011150:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 8011154:	f102 060f 	add.w	r6, r2, #15
 8011158:	1136      	asrs	r6, r6, #4
 801115a:	0076      	lsls	r6, r6, #1
 801115c:	4682      	mov	sl, r0
 801115e:	fb06 f003 	mul.w	r0, r6, r3
 8011162:	3014      	adds	r0, #20
 8011164:	4689      	mov	r9, r1
 8011166:	4690      	mov	r8, r2
 8011168:	461f      	mov	r7, r3
 801116a:	f7fd feed 	bl	800ef48 <GUI_ALLOC_AllocZero>
 801116e:	4683      	mov	fp, r0
 8011170:	b198      	cbz	r0, 801119a <GUI_USAGE_BM_Create+0x4a>
 8011172:	f7fd fc9d 	bl	800eab0 <GUI_ALLOC_LockH>
 8011176:	4604      	mov	r4, r0
 8011178:	4b0a      	ldr	r3, [pc, #40]	; (80111a4 <GUI_USAGE_BM_Create+0x54>)
 801117a:	60a3      	str	r3, [r4, #8]
 801117c:	a802      	add	r0, sp, #8
 801117e:	2301      	movs	r3, #1
 8011180:	f840 4d04 	str.w	r4, [r0, #-4]!
 8011184:	f8a4 8004 	strh.w	r8, [r4, #4]
 8011188:	f8a4 a000 	strh.w	sl, [r4]
 801118c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8011190:	80e7      	strh	r7, [r4, #6]
 8011192:	81a3      	strh	r3, [r4, #12]
 8011194:	6126      	str	r6, [r4, #16]
 8011196:	f7fd fc99 	bl	800eacc <GUI_ALLOC_UnlockH>
 801119a:	4658      	mov	r0, fp
 801119c:	b002      	add	sp, #8
 801119e:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 80111a2:	bf00      	nop
 80111a4:	0801411c 	.word	0x0801411c

080111a8 <GUI_USAGE_DecUseCnt>:
 80111a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111aa:	4605      	mov	r5, r0
 80111ac:	f7fd fc80 	bl	800eab0 <GUI_ALLOC_LockH>
 80111b0:	4602      	mov	r2, r0
 80111b2:	a802      	add	r0, sp, #8
 80111b4:	8994      	ldrh	r4, [r2, #12]
 80111b6:	f840 2d04 	str.w	r2, [r0, #-4]!
 80111ba:	3c01      	subs	r4, #1
 80111bc:	b2a4      	uxth	r4, r4
 80111be:	8194      	strh	r4, [r2, #12]
 80111c0:	f7fd fc84 	bl	800eacc <GUI_ALLOC_UnlockH>
 80111c4:	b914      	cbnz	r4, 80111cc <GUI_USAGE_DecUseCnt+0x24>
 80111c6:	4628      	mov	r0, r5
 80111c8:	f7fd fca0 	bl	800eb0c <GUI_ALLOC_Free>
 80111cc:	b003      	add	sp, #12
 80111ce:	bd30      	pop	{r4, r5, pc}

080111d0 <GUI_USAGE_AddRect>:
 80111d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111d4:	4605      	mov	r5, r0
 80111d6:	4688      	mov	r8, r1
 80111d8:	4617      	mov	r7, r2
 80111da:	4699      	mov	r9, r3
 80111dc:	68a8      	ldr	r0, [r5, #8]
 80111de:	464b      	mov	r3, r9
 80111e0:	6846      	ldr	r6, [r0, #4]
 80111e2:	4641      	mov	r1, r8
 80111e4:	4628      	mov	r0, r5
 80111e6:	1c54      	adds	r4, r2, #1
 80111e8:	47b0      	blx	r6
 80111ea:	9b08      	ldr	r3, [sp, #32]
 80111ec:	443b      	add	r3, r7
 80111ee:	42a3      	cmp	r3, r4
 80111f0:	d001      	beq.n	80111f6 <GUI_USAGE_AddRect+0x26>
 80111f2:	4622      	mov	r2, r4
 80111f4:	e7f2      	b.n	80111dc <GUI_USAGE_AddRect+0xc>
 80111f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080111fc <GUI_MEMDEV_ReduceYSize>:
 80111fc:	b513      	push	{r0, r1, r4, lr}
 80111fe:	460c      	mov	r4, r1
 8011200:	b918      	cbnz	r0, 801120a <GUI_MEMDEV_ReduceYSize+0xe>
 8011202:	4b08      	ldr	r3, [pc, #32]	; (8011224 <GUI_MEMDEV_ReduceYSize+0x28>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011208:	b150      	cbz	r0, 8011220 <GUI_MEMDEV_ReduceYSize+0x24>
 801120a:	f7fd fc51 	bl	800eab0 <GUI_ALLOC_LockH>
 801120e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011212:	9001      	str	r0, [sp, #4]
 8011214:	429c      	cmp	r4, r3
 8011216:	bfb8      	it	lt
 8011218:	8144      	strhlt	r4, [r0, #10]
 801121a:	a801      	add	r0, sp, #4
 801121c:	f7fd fc56 	bl	800eacc <GUI_ALLOC_UnlockH>
 8011220:	b002      	add	sp, #8
 8011222:	bd10      	pop	{r4, pc}
 8011224:	20000038 	.word	0x20000038

08011228 <GUI_MEMDEV_Clear>:
 8011228:	b513      	push	{r0, r1, r4, lr}
 801122a:	b918      	cbnz	r0, 8011234 <GUI_MEMDEV_Clear+0xc>
 801122c:	4b0d      	ldr	r3, [pc, #52]	; (8011264 <GUI_MEMDEV_Clear+0x3c>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011232:	b1a8      	cbz	r0, 8011260 <GUI_MEMDEV_Clear+0x38>
 8011234:	f7fd fc3c 	bl	800eab0 <GUI_ALLOC_LockH>
 8011238:	ab02      	add	r3, sp, #8
 801123a:	6944      	ldr	r4, [r0, #20]
 801123c:	f843 0d08 	str.w	r0, [r3, #-8]!
 8011240:	4668      	mov	r0, sp
 8011242:	f7fd fc43 	bl	800eacc <GUI_ALLOC_UnlockH>
 8011246:	b15c      	cbz	r4, 8011260 <GUI_MEMDEV_Clear+0x38>
 8011248:	4620      	mov	r0, r4
 801124a:	f7fd fc31 	bl	800eab0 <GUI_ALLOC_LockH>
 801124e:	ac02      	add	r4, sp, #8
 8011250:	6883      	ldr	r3, [r0, #8]
 8011252:	f844 0d04 	str.w	r0, [r4, #-4]!
 8011256:	689b      	ldr	r3, [r3, #8]
 8011258:	4798      	blx	r3
 801125a:	4620      	mov	r0, r4
 801125c:	f7fd fc36 	bl	800eacc <GUI_ALLOC_UnlockH>
 8011260:	b002      	add	sp, #8
 8011262:	bd10      	pop	{r4, pc}
 8011264:	20000038 	.word	0x20000038

08011268 <LCD_SelectLCD>:
 8011268:	b510      	push	{r4, lr}
 801126a:	4b0d      	ldr	r3, [pc, #52]	; (80112a0 <LCD_SelectLCD+0x38>)
 801126c:	681a      	ldr	r2, [r3, #0]
 801126e:	7c51      	ldrb	r1, [r2, #17]
 8011270:	4a0c      	ldr	r2, [pc, #48]	; (80112a4 <LCD_SelectLCD+0x3c>)
 8011272:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8011276:	461c      	mov	r4, r3
 8011278:	b140      	cbz	r0, 801128c <LCD_SelectLCD+0x24>
 801127a:	68c3      	ldr	r3, [r0, #12]
 801127c:	b113      	cbz	r3, 8011284 <LCD_SelectLCD+0x1c>
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b04      	cmp	r3, #4
 8011282:	d001      	beq.n	8011288 <LCD_SelectLCD+0x20>
 8011284:	6800      	ldr	r0, [r0, #0]
 8011286:	e7f7      	b.n	8011278 <LCD_SelectLCD+0x10>
 8011288:	f7fc ff6c 	bl	800e164 <GUI_DEVICE_Unlink>
 801128c:	6823      	ldr	r3, [r4, #0]
 801128e:	2200      	movs	r2, #0
 8011290:	661a      	str	r2, [r3, #96]	; 0x60
 8011292:	f103 0208 	add.w	r2, r3, #8
 8011296:	615a      	str	r2, [r3, #20]
 8011298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801129c:	f7fa bbf0 	b.w	800ba80 <LCD_SetClipRectMax>
 80112a0:	20000038 	.word	0x20000038
 80112a4:	20023074 	.word	0x20023074

080112a8 <LCD_ReadRectEx>:
 80112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	b087      	sub	sp, #28
 80112ae:	4617      	mov	r7, r2
 80112b0:	9304      	str	r3, [sp, #16]
 80112b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80112b6:	68da      	ldr	r2, [r3, #12]
 80112b8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80112ba:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80112be:	4606      	mov	r6, r0
 80112c0:	460d      	mov	r5, r1
 80112c2:	b973      	cbnz	r3, 80112e2 <LCD_ReadRectEx+0x3a>
 80112c4:	4b71      	ldr	r3, [pc, #452]	; (801148c <LCD_ReadRectEx+0x1e4>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	7c58      	ldrb	r0, [r3, #17]
 80112ca:	f7f9 ffe9 	bl	800b2a0 <GUI_GetBitsPerPixelEx>
 80112ce:	2808      	cmp	r0, #8
 80112d0:	4682      	mov	sl, r0
 80112d2:	dd15      	ble.n	8011300 <LCD_ReadRectEx+0x58>
 80112d4:	2810      	cmp	r0, #16
 80112d6:	bfcc      	ite	gt
 80112d8:	f04f 0904 	movgt.w	r9, #4
 80112dc:	f04f 0902 	movle.w	r9, #2
 80112e0:	e010      	b.n	8011304 <LCD_ReadRectEx+0x5c>
 80112e2:	a811      	add	r0, sp, #68	; 0x44
 80112e4:	2101      	movs	r1, #1
 80112e6:	4798      	blx	r3
 80112e8:	4684      	mov	ip, r0
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d0ea      	beq.n	80112c4 <LCD_ReadRectEx+0x1c>
 80112ee:	9b04      	ldr	r3, [sp, #16]
 80112f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80112f2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80112f6:	4631      	mov	r1, r6
 80112f8:	462a      	mov	r2, r5
 80112fa:	463b      	mov	r3, r7
 80112fc:	47e0      	blx	ip
 80112fe:	e0c1      	b.n	8011484 <LCD_ReadRectEx+0x1dc>
 8011300:	f04f 0901 	mov.w	r9, #1
 8011304:	f04f 0b00 	mov.w	fp, #0
 8011308:	9b04      	ldr	r3, [sp, #16]
 801130a:	429d      	cmp	r5, r3
 801130c:	f300 80ba 	bgt.w	8011484 <LCD_ReadRectEx+0x1dc>
 8011310:	f1b9 0f02 	cmp.w	r9, #2
 8011314:	d009      	beq.n	801132a <LCD_ReadRectEx+0x82>
 8011316:	f1b9 0f04 	cmp.w	r9, #4
 801131a:	d004      	beq.n	8011326 <LCD_ReadRectEx+0x7e>
 801131c:	f1b9 0f01 	cmp.w	r9, #1
 8011320:	f040 80ae 	bne.w	8011480 <LCD_ReadRectEx+0x1d8>
 8011324:	e003      	b.n	801132e <LCD_ReadRectEx+0x86>
 8011326:	46b4      	mov	ip, r6
 8011328:	e09b      	b.n	8011462 <LCD_ReadRectEx+0x1ba>
 801132a:	46b4      	mov	ip, r6
 801132c:	e08a      	b.n	8011444 <LCD_ReadRectEx+0x19c>
 801132e:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8011332:	2a07      	cmp	r2, #7
 8011334:	f200 80a4 	bhi.w	8011480 <LCD_ReadRectEx+0x1d8>
 8011338:	e8df f002 	tbb	[pc, r2]
 801133c:	0606080a 	.word	0x0606080a
 8011340:	04040404 	.word	0x04040404
 8011344:	46b4      	mov	ip, r6
 8011346:	e066      	b.n	8011416 <LCD_ReadRectEx+0x16e>
 8011348:	46b4      	mov	ip, r6
 801134a:	e047      	b.n	80113dc <LCD_ReadRectEx+0x134>
 801134c:	46b4      	mov	ip, r6
 801134e:	e022      	b.n	8011396 <LCD_ReadRectEx+0xee>
 8011350:	46b4      	mov	ip, r6
 8011352:	45bc      	cmp	ip, r7
 8011354:	f300 8094 	bgt.w	8011480 <LCD_ReadRectEx+0x1d8>
 8011358:	4661      	mov	r1, ip
 801135a:	462a      	mov	r2, r5
 801135c:	f8cd c00c 	str.w	ip, [sp, #12]
 8011360:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011362:	47c0      	blx	r8
 8011364:	f1cb 0207 	rsb	r2, fp, #7
 8011368:	fa00 f202 	lsl.w	r2, r0, r2
 801136c:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8011370:	7820      	ldrb	r0, [r4, #0]
 8011372:	fa41 f10b 	asr.w	r1, r1, fp
 8011376:	4001      	ands	r1, r0
 8011378:	430a      	orrs	r2, r1
 801137a:	7022      	strb	r2, [r4, #0]
 801137c:	f10b 0301 	add.w	r3, fp, #1
 8011380:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011384:	f023 0207 	bic.w	r2, r3, #7
 8011388:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 801138c:	fa43 fb02 	asr.w	fp, r3, r2
 8011390:	f10c 0c01 	add.w	ip, ip, #1
 8011394:	e7dd      	b.n	8011352 <LCD_ReadRectEx+0xaa>
 8011396:	45bc      	cmp	ip, r7
 8011398:	dc72      	bgt.n	8011480 <LCD_ReadRectEx+0x1d8>
 801139a:	4661      	mov	r1, ip
 801139c:	462a      	mov	r2, r5
 801139e:	f8cd c00c 	str.w	ip, [sp, #12]
 80113a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80113a4:	47c0      	blx	r8
 80113a6:	ea4f 024b 	mov.w	r2, fp, lsl #1
 80113aa:	f1c2 0106 	rsb	r1, r2, #6
 80113ae:	fa00 f101 	lsl.w	r1, r0, r1
 80113b2:	f64f 703f 	movw	r0, #65343	; 0xff3f
 80113b6:	fa40 f202 	asr.w	r2, r0, r2
 80113ba:	7820      	ldrb	r0, [r4, #0]
 80113bc:	4002      	ands	r2, r0
 80113be:	4311      	orrs	r1, r2
 80113c0:	7021      	strb	r1, [r4, #0]
 80113c2:	f10b 0301 	add.w	r3, fp, #1
 80113c6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80113ca:	f023 0203 	bic.w	r2, r3, #3
 80113ce:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80113d2:	fa43 fb02 	asr.w	fp, r3, r2
 80113d6:	f10c 0c01 	add.w	ip, ip, #1
 80113da:	e7dc      	b.n	8011396 <LCD_ReadRectEx+0xee>
 80113dc:	45bc      	cmp	ip, r7
 80113de:	dc4f      	bgt.n	8011480 <LCD_ReadRectEx+0x1d8>
 80113e0:	4661      	mov	r1, ip
 80113e2:	462a      	mov	r2, r5
 80113e4:	f8cd c00c 	str.w	ip, [sp, #12]
 80113e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80113ea:	47c0      	blx	r8
 80113ec:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80113f0:	f1c2 0104 	rsb	r1, r2, #4
 80113f4:	fa00 f101 	lsl.w	r1, r0, r1
 80113f8:	200f      	movs	r0, #15
 80113fa:	fa00 f202 	lsl.w	r2, r0, r2
 80113fe:	7820      	ldrb	r0, [r4, #0]
 8011400:	4002      	ands	r2, r0
 8011402:	4311      	orrs	r1, r2
 8011404:	7021      	strb	r1, [r4, #0]
 8011406:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801140a:	445c      	add	r4, fp
 801140c:	f10c 0c01 	add.w	ip, ip, #1
 8011410:	f08b 0b01 	eor.w	fp, fp, #1
 8011414:	e7e2      	b.n	80113dc <LCD_ReadRectEx+0x134>
 8011416:	4273      	negs	r3, r6
 8011418:	1ba2      	subs	r2, r4, r6
 801141a:	45bc      	cmp	ip, r7
 801141c:	9305      	str	r3, [sp, #20]
 801141e:	4462      	add	r2, ip
 8011420:	dc0e      	bgt.n	8011440 <LCD_ReadRectEx+0x198>
 8011422:	4661      	mov	r1, ip
 8011424:	462a      	mov	r2, r5
 8011426:	f8cd c00c 	str.w	ip, [sp, #12]
 801142a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801142c:	47c0      	blx	r8
 801142e:	9a05      	ldr	r2, [sp, #20]
 8011430:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011434:	4422      	add	r2, r4
 8011436:	f802 000c 	strb.w	r0, [r2, ip]
 801143a:	f10c 0c01 	add.w	ip, ip, #1
 801143e:	e7ea      	b.n	8011416 <LCD_ReadRectEx+0x16e>
 8011440:	4614      	mov	r4, r2
 8011442:	e01d      	b.n	8011480 <LCD_ReadRectEx+0x1d8>
 8011444:	45bc      	cmp	ip, r7
 8011446:	dc1b      	bgt.n	8011480 <LCD_ReadRectEx+0x1d8>
 8011448:	4661      	mov	r1, ip
 801144a:	f8cd c00c 	str.w	ip, [sp, #12]
 801144e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011450:	462a      	mov	r2, r5
 8011452:	47c0      	blx	r8
 8011454:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011458:	f824 0b02 	strh.w	r0, [r4], #2
 801145c:	f10c 0c01 	add.w	ip, ip, #1
 8011460:	e7f0      	b.n	8011444 <LCD_ReadRectEx+0x19c>
 8011462:	45bc      	cmp	ip, r7
 8011464:	dc0c      	bgt.n	8011480 <LCD_ReadRectEx+0x1d8>
 8011466:	4661      	mov	r1, ip
 8011468:	f8cd c00c 	str.w	ip, [sp, #12]
 801146c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801146e:	462a      	mov	r2, r5
 8011470:	47c0      	blx	r8
 8011472:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011476:	f844 0b04 	str.w	r0, [r4], #4
 801147a:	f10c 0c01 	add.w	ip, ip, #1
 801147e:	e7f0      	b.n	8011462 <LCD_ReadRectEx+0x1ba>
 8011480:	3501      	adds	r5, #1
 8011482:	e741      	b.n	8011308 <LCD_ReadRectEx+0x60>
 8011484:	b007      	add	sp, #28
 8011486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801148a:	bf00      	nop
 801148c:	20000038 	.word	0x20000038

08011490 <GUI_ReadRectEx>:
 8011490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011492:	4d16      	ldr	r5, [pc, #88]	; (80114ec <GUI_ReadRectEx+0x5c>)
 8011494:	9e05      	ldr	r6, [sp, #20]
 8011496:	682d      	ldr	r5, [r5, #0]
 8011498:	9c06      	ldr	r4, [sp, #24]
 801149a:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 801149e:	42b8      	cmp	r0, r7
 80114a0:	bfb8      	it	lt
 80114a2:	4638      	movlt	r0, r7
 80114a4:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 80114a8:	42ba      	cmp	r2, r7
 80114aa:	bfa8      	it	ge
 80114ac:	463a      	movge	r2, r7
 80114ae:	4282      	cmp	r2, r0
 80114b0:	db1b      	blt.n	80114ea <GUI_ReadRectEx+0x5a>
 80114b2:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 80114b6:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 80114ba:	42b9      	cmp	r1, r7
 80114bc:	bfb8      	it	lt
 80114be:	4639      	movlt	r1, r7
 80114c0:	42ab      	cmp	r3, r5
 80114c2:	bfa8      	it	ge
 80114c4:	462b      	movge	r3, r5
 80114c6:	428b      	cmp	r3, r1
 80114c8:	db0f      	blt.n	80114ea <GUI_ReadRectEx+0x5a>
 80114ca:	68e5      	ldr	r5, [r4, #12]
 80114cc:	682d      	ldr	r5, [r5, #0]
 80114ce:	f035 0704 	bics.w	r7, r5, #4
 80114d2:	d105      	bne.n	80114e0 <GUI_ReadRectEx+0x50>
 80114d4:	9605      	str	r6, [sp, #20]
 80114d6:	9406      	str	r4, [sp, #24]
 80114d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80114dc:	f7ff bee4 	b.w	80112a8 <LCD_ReadRectEx>
 80114e0:	6825      	ldr	r5, [r4, #0]
 80114e2:	2d00      	cmp	r5, #0
 80114e4:	d0f6      	beq.n	80114d4 <GUI_ReadRectEx+0x44>
 80114e6:	462c      	mov	r4, r5
 80114e8:	e7ef      	b.n	80114ca <GUI_ReadRectEx+0x3a>
 80114ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114ec:	20000038 	.word	0x20000038

080114f0 <LCD_GetPixelColor>:
 80114f0:	b508      	push	{r3, lr}
 80114f2:	f000 f805 	bl	8011500 <LCD_GetPixelIndex>
 80114f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80114fa:	f7fa bb2b 	b.w	800bb54 <LCD_Index2Color>
	...

08011500 <LCD_GetPixelIndex>:
 8011500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011502:	4f14      	ldr	r7, [pc, #80]	; (8011554 <LCD_GetPixelIndex+0x54>)
 8011504:	4e14      	ldr	r6, [pc, #80]	; (8011558 <LCD_GetPixelIndex+0x58>)
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	7c5b      	ldrb	r3, [r3, #17]
 801150a:	4605      	mov	r5, r0
 801150c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8011510:	68c3      	ldr	r3, [r0, #12]
 8011512:	460c      	mov	r4, r1
 8011514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011516:	4669      	mov	r1, sp
 8011518:	4798      	blx	r3
 801151a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801151e:	429d      	cmp	r5, r3
 8011520:	db15      	blt.n	801154e <LCD_GetPixelIndex+0x4e>
 8011522:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011526:	429d      	cmp	r5, r3
 8011528:	dc11      	bgt.n	801154e <LCD_GetPixelIndex+0x4e>
 801152a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801152e:	429c      	cmp	r4, r3
 8011530:	db0d      	blt.n	801154e <LCD_GetPixelIndex+0x4e>
 8011532:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011536:	429c      	cmp	r4, r3
 8011538:	dc09      	bgt.n	801154e <LCD_GetPixelIndex+0x4e>
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	7c5b      	ldrb	r3, [r3, #17]
 801153e:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8011542:	68c3      	ldr	r3, [r0, #12]
 8011544:	4629      	mov	r1, r5
 8011546:	695b      	ldr	r3, [r3, #20]
 8011548:	4622      	mov	r2, r4
 801154a:	4798      	blx	r3
 801154c:	e000      	b.n	8011550 <LCD_GetPixelIndex+0x50>
 801154e:	2000      	movs	r0, #0
 8011550:	b003      	add	sp, #12
 8011552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011554:	20000038 	.word	0x20000038
 8011558:	20023074 	.word	0x20023074

0801155c <LCD_GetNumLayers>:
 801155c:	b510      	push	{r4, lr}
 801155e:	2000      	movs	r0, #0
 8011560:	f7fc fdc8 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 8011564:	1c04      	adds	r4, r0, #0
 8011566:	f04f 0001 	mov.w	r0, #1
 801156a:	bf18      	it	ne
 801156c:	2401      	movne	r4, #1
 801156e:	f7fc fdc1 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 8011572:	b100      	cbz	r0, 8011576 <LCD_GetNumLayers+0x1a>
 8011574:	3401      	adds	r4, #1
 8011576:	4620      	mov	r0, r4
 8011578:	bd10      	pop	{r4, pc}
	...

0801157c <LCD_AA_SetAndMask>:
 801157c:	4b02      	ldr	r3, [pc, #8]	; (8011588 <LCD_AA_SetAndMask+0xc>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	6018      	str	r0, [r3, #0]
 8011582:	4610      	mov	r0, r2
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop
 8011588:	2000004c 	.word	0x2000004c

0801158c <LCD_AA_MixColors16>:
 801158c:	b538      	push	{r3, r4, r5, lr}
 801158e:	0e0d      	lsrs	r5, r1, #24
 8011590:	2dff      	cmp	r5, #255	; 0xff
 8011592:	460b      	mov	r3, r1
 8011594:	d11e      	bne.n	80115d4 <LCD_AA_MixColors16+0x48>
 8011596:	0e01      	lsrs	r1, r0, #24
 8011598:	d109      	bne.n	80115ae <LCD_AA_MixColors16+0x22>
 801159a:	f06f 0310 	mvn.w	r3, #16
 801159e:	4353      	muls	r3, r2
 80115a0:	4a12      	ldr	r2, [pc, #72]	; (80115ec <LCD_AA_MixColors16+0x60>)
 80115a2:	33ff      	adds	r3, #255	; 0xff
 80115a4:	6811      	ldr	r1, [r2, #0]
 80115a6:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 80115aa:	400b      	ands	r3, r1
 80115ac:	e01b      	b.n	80115e6 <LCD_AA_MixColors16+0x5a>
 80115ae:	29fe      	cmp	r1, #254	; 0xfe
 80115b0:	d819      	bhi.n	80115e6 <LCD_AA_MixColors16+0x5a>
 80115b2:	f06f 0310 	mvn.w	r3, #16
 80115b6:	435a      	muls	r2, r3
 80115b8:	32ff      	adds	r2, #255	; 0xff
 80115ba:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 80115be:	434b      	muls	r3, r1
 80115c0:	fbb3 f3f5 	udiv	r3, r3, r5
 80115c4:	4413      	add	r3, r2
 80115c6:	4a09      	ldr	r2, [pc, #36]	; (80115ec <LCD_AA_MixColors16+0x60>)
 80115c8:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
 80115cc:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
 80115d0:	6810      	ldr	r0, [r2, #0]
 80115d2:	e007      	b.n	80115e4 <LCD_AA_MixColors16+0x58>
 80115d4:	4b06      	ldr	r3, [pc, #24]	; (80115f0 <LCD_AA_MixColors16+0x64>)
 80115d6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80115da:	681d      	ldr	r5, [r3, #0]
 80115dc:	b2d2      	uxtb	r2, r2
 80115de:	47a8      	blx	r5
 80115e0:	4b02      	ldr	r3, [pc, #8]	; (80115ec <LCD_AA_MixColors16+0x60>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	4003      	ands	r3, r0
 80115e6:	4618      	mov	r0, r3
 80115e8:	bd38      	pop	{r3, r4, r5, pc}
 80115ea:	bf00      	nop
 80115ec:	2000004c 	.word	0x2000004c
 80115f0:	2000001c 	.word	0x2000001c

080115f4 <LCD_SetPixelAA4_Trans>:
 80115f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f8:	4605      	mov	r5, r0
 80115fa:	460c      	mov	r4, r1
 80115fc:	4616      	mov	r6, r2
 80115fe:	2a00      	cmp	r2, #0
 8011600:	d03d      	beq.n	801167e <LCD_SetPixelAA4_Trans+0x8a>
 8011602:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8011688 <LCD_SetPixelAA4_Trans+0x94>
 8011606:	f8d8 3000 	ldr.w	r3, [r8]
 801160a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 801160e:	4291      	cmp	r1, r2
 8011610:	db35      	blt.n	801167e <LCD_SetPixelAA4_Trans+0x8a>
 8011612:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8011616:	4291      	cmp	r1, r2
 8011618:	dc31      	bgt.n	801167e <LCD_SetPixelAA4_Trans+0x8a>
 801161a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801161e:	4290      	cmp	r0, r2
 8011620:	db2d      	blt.n	801167e <LCD_SetPixelAA4_Trans+0x8a>
 8011622:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8011626:	4290      	cmp	r0, r2
 8011628:	dc29      	bgt.n	801167e <LCD_SetPixelAA4_Trans+0x8a>
 801162a:	2e0e      	cmp	r6, #14
 801162c:	4f15      	ldr	r7, [pc, #84]	; (8011684 <LCD_SetPixelAA4_Trans+0x90>)
 801162e:	f8d3 e03c 	ldr.w	lr, [r3, #60]	; 0x3c
 8011632:	d909      	bls.n	8011648 <LCD_SetPixelAA4_Trans+0x54>
 8011634:	7c5b      	ldrb	r3, [r3, #17]
 8011636:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 801163a:	68c3      	ldr	r3, [r0, #12]
 801163c:	4629      	mov	r1, r5
 801163e:	699e      	ldr	r6, [r3, #24]
 8011640:	f8de 3000 	ldr.w	r3, [lr]
 8011644:	4622      	mov	r2, r4
 8011646:	e019      	b.n	801167c <LCD_SetPixelAA4_Trans+0x88>
 8011648:	f8de 0000 	ldr.w	r0, [lr]
 801164c:	f7fa fa82 	bl	800bb54 <LCD_Index2Color>
 8011650:	4621      	mov	r1, r4
 8011652:	4681      	mov	r9, r0
 8011654:	4628      	mov	r0, r5
 8011656:	f7ff ff4b 	bl	80114f0 <LCD_GetPixelColor>
 801165a:	4632      	mov	r2, r6
 801165c:	4601      	mov	r1, r0
 801165e:	4648      	mov	r0, r9
 8011660:	f7ff ff94 	bl	801158c <LCD_AA_MixColors16>
 8011664:	f7fa fa66 	bl	800bb34 <LCD_Color2Index>
 8011668:	f8d8 2000 	ldr.w	r2, [r8]
 801166c:	7c52      	ldrb	r2, [r2, #17]
 801166e:	4603      	mov	r3, r0
 8011670:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8011674:	68c1      	ldr	r1, [r0, #12]
 8011676:	4622      	mov	r2, r4
 8011678:	698e      	ldr	r6, [r1, #24]
 801167a:	4629      	mov	r1, r5
 801167c:	47b0      	blx	r6
 801167e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011682:	bf00      	nop
 8011684:	20023074 	.word	0x20023074
 8011688:	20000038 	.word	0x20000038

0801168c <GUI__ExpandPixelIndices>:
 801168c:	2a08      	cmp	r2, #8
 801168e:	b570      	push	{r4, r5, r6, lr}
 8011690:	dd0d      	ble.n	80116ae <GUI__ExpandPixelIndices+0x22>
 8011692:	2a10      	cmp	r2, #16
 8011694:	dd00      	ble.n	8011698 <GUI__ExpandPixelIndices+0xc>
 8011696:	bd70      	pop	{r4, r5, r6, pc}
 8011698:	0049      	lsls	r1, r1, #1
 801169a:	4408      	add	r0, r1
 801169c:	1843      	adds	r3, r0, r1
 801169e:	1a41      	subs	r1, r0, r1
 80116a0:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
 80116a4:	f843 2d04 	str.w	r2, [r3, #-4]!
 80116a8:	4288      	cmp	r0, r1
 80116aa:	d1f9      	bne.n	80116a0 <GUI__ExpandPixelIndices+0x14>
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
 80116ae:	3a01      	subs	r2, #1
 80116b0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80116b4:	2a07      	cmp	r2, #7
 80116b6:	d856      	bhi.n	8011766 <GUI__ExpandPixelIndices+0xda>
 80116b8:	e8df f002 	tbb	[pc, r2]
 80116bc:	34341b04 	.word	0x34341b04
 80116c0:	4c4c4c4c 	.word	0x4c4c4c4c
 80116c4:	424a      	negs	r2, r1
 80116c6:	1e4c      	subs	r4, r1, #1
 80116c8:	f002 0207 	and.w	r2, r2, #7
 80116cc:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 80116d0:	7805      	ldrb	r5, [r0, #0]
 80116d2:	2401      	movs	r4, #1
 80116d4:	4094      	lsls	r4, r2
 80116d6:	402c      	ands	r4, r5
 80116d8:	4114      	asrs	r4, r2
 80116da:	3201      	adds	r2, #1
 80116dc:	f843 4d04 	str.w	r4, [r3, #-4]!
 80116e0:	3901      	subs	r1, #1
 80116e2:	f022 0407 	bic.w	r4, r2, #7
 80116e6:	eba0 00e2 	sub.w	r0, r0, r2, asr #3
 80116ea:	fa42 f204 	asr.w	r2, r2, r4
 80116ee:	d1ef      	bne.n	80116d0 <GUI__ExpandPixelIndices+0x44>
 80116f0:	bd70      	pop	{r4, r5, r6, pc}
 80116f2:	424a      	negs	r2, r1
 80116f4:	1e4c      	subs	r4, r1, #1
 80116f6:	f002 0203 	and.w	r2, r2, #3
 80116fa:	eb00 00a4 	add.w	r0, r0, r4, asr #2
 80116fe:	0054      	lsls	r4, r2, #1
 8011700:	7806      	ldrb	r6, [r0, #0]
 8011702:	2503      	movs	r5, #3
 8011704:	40a5      	lsls	r5, r4
 8011706:	4035      	ands	r5, r6
 8011708:	3201      	adds	r2, #1
 801170a:	fa45 f404 	asr.w	r4, r5, r4
 801170e:	f843 4d04 	str.w	r4, [r3, #-4]!
 8011712:	3901      	subs	r1, #1
 8011714:	f022 0403 	bic.w	r4, r2, #3
 8011718:	eba0 00a2 	sub.w	r0, r0, r2, asr #2
 801171c:	fa42 f204 	asr.w	r2, r2, r4
 8011720:	d1ed      	bne.n	80116fe <GUI__ExpandPixelIndices+0x72>
 8011722:	bd70      	pop	{r4, r5, r6, pc}
 8011724:	1e4c      	subs	r4, r1, #1
 8011726:	f001 0201 	and.w	r2, r1, #1
 801172a:	eb00 0064 	add.w	r0, r0, r4, asr #1
 801172e:	0094      	lsls	r4, r2, #2
 8011730:	7806      	ldrb	r6, [r0, #0]
 8011732:	250f      	movs	r5, #15
 8011734:	40a5      	lsls	r5, r4
 8011736:	4035      	ands	r5, r6
 8011738:	3201      	adds	r2, #1
 801173a:	fa45 f404 	asr.w	r4, r5, r4
 801173e:	f843 4d04 	str.w	r4, [r3, #-4]!
 8011742:	3901      	subs	r1, #1
 8011744:	f022 0401 	bic.w	r4, r2, #1
 8011748:	eba0 0062 	sub.w	r0, r0, r2, asr #1
 801174c:	fa42 f204 	asr.w	r2, r2, r4
 8011750:	d1ed      	bne.n	801172e <GUI__ExpandPixelIndices+0xa2>
 8011752:	bd70      	pop	{r4, r5, r6, pc}
 8011754:	4408      	add	r0, r1
 8011756:	1a41      	subs	r1, r0, r1
 8011758:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 801175c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8011760:	4288      	cmp	r0, r1
 8011762:	d1f9      	bne.n	8011758 <GUI__ExpandPixelIndices+0xcc>
 8011764:	bd70      	pop	{r4, r5, r6, pc}
 8011766:	bd70      	pop	{r4, r5, r6, pc}

08011768 <GUI__ExpandPixelIndicesEx>:
 8011768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801176c:	1e0c      	subs	r4, r1, #0
 801176e:	4605      	mov	r5, r0
 8011770:	f340 80b3 	ble.w	80118da <GUI__ExpandPixelIndicesEx+0x172>
 8011774:	2a08      	cmp	r2, #8
 8011776:	685f      	ldr	r7, [r3, #4]
 8011778:	dd04      	ble.n	8011784 <GUI__ExpandPixelIndicesEx+0x1c>
 801177a:	2a10      	cmp	r2, #16
 801177c:	f340 8098 	ble.w	80118b0 <GUI__ExpandPixelIndicesEx+0x148>
 8011780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011784:	3a01      	subs	r2, #1
 8011786:	2a07      	cmp	r2, #7
 8011788:	f200 80a7 	bhi.w	80118da <GUI__ExpandPixelIndicesEx+0x172>
 801178c:	e8df f002 	tbb	[pc, r2]
 8011790:	58a52d04 	.word	0x58a52d04
 8011794:	83a5a5a5 	.word	0x83a5a5a5
 8011798:	1e66      	subs	r6, r4, #1
 801179a:	10f2      	asrs	r2, r6, #3
 801179c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80117a0:	3b01      	subs	r3, #1
 80117a2:	eb05 0802 	add.w	r8, r5, r2
 80117a6:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80117aa:	f006 0607 	and.w	r6, r6, #7
 80117ae:	f815 a002 	ldrb.w	sl, [r5, r2]
 80117b2:	2580      	movs	r5, #128	; 0x80
 80117b4:	4135      	asrs	r5, r6
 80117b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80117ba:	b2ed      	uxtb	r5, r5
 80117bc:	f1c6 0307 	rsb	r3, r6, #7
 80117c0:	ea0a 0005 	and.w	r0, sl, r5
 80117c4:	4118      	asrs	r0, r3
 80117c6:	47b8      	blx	r7
 80117c8:	f849 0904 	str.w	r0, [r9], #-4
 80117cc:	b936      	cbnz	r6, 80117dc <GUI__ExpandPixelIndicesEx+0x74>
 80117ce:	f898 a000 	ldrb.w	sl, [r8]
 80117d2:	2501      	movs	r5, #1
 80117d4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80117d8:	2607      	movs	r6, #7
 80117da:	e002      	b.n	80117e2 <GUI__ExpandPixelIndicesEx+0x7a>
 80117dc:	006d      	lsls	r5, r5, #1
 80117de:	3e01      	subs	r6, #1
 80117e0:	b2ed      	uxtb	r5, r5
 80117e2:	3c01      	subs	r4, #1
 80117e4:	d1ea      	bne.n	80117bc <GUI__ExpandPixelIndicesEx+0x54>
 80117e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ea:	1e66      	subs	r6, r4, #1
 80117ec:	10b2      	asrs	r2, r6, #2
 80117ee:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80117f2:	3b01      	subs	r3, #1
 80117f4:	f006 0603 	and.w	r6, r6, #3
 80117f8:	eb05 0802 	add.w	r8, r5, r2
 80117fc:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011800:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011804:	0073      	lsls	r3, r6, #1
 8011806:	25c0      	movs	r5, #192	; 0xc0
 8011808:	411d      	asrs	r5, r3
 801180a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801180e:	b2ed      	uxtb	r5, r5
 8011810:	0073      	lsls	r3, r6, #1
 8011812:	f1c3 0306 	rsb	r3, r3, #6
 8011816:	ea0a 0005 	and.w	r0, sl, r5
 801181a:	4118      	asrs	r0, r3
 801181c:	47b8      	blx	r7
 801181e:	f849 0904 	str.w	r0, [r9], #-4
 8011822:	b936      	cbnz	r6, 8011832 <GUI__ExpandPixelIndicesEx+0xca>
 8011824:	2503      	movs	r5, #3
 8011826:	f898 a000 	ldrb.w	sl, [r8]
 801182a:	462e      	mov	r6, r5
 801182c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011830:	e002      	b.n	8011838 <GUI__ExpandPixelIndicesEx+0xd0>
 8011832:	00ad      	lsls	r5, r5, #2
 8011834:	3e01      	subs	r6, #1
 8011836:	b2ed      	uxtb	r5, r5
 8011838:	3c01      	subs	r4, #1
 801183a:	d1e9      	bne.n	8011810 <GUI__ExpandPixelIndicesEx+0xa8>
 801183c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011840:	1e66      	subs	r6, r4, #1
 8011842:	1072      	asrs	r2, r6, #1
 8011844:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011848:	3b01      	subs	r3, #1
 801184a:	f006 0601 	and.w	r6, r6, #1
 801184e:	eb05 0802 	add.w	r8, r5, r2
 8011852:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011856:	f815 a002 	ldrb.w	sl, [r5, r2]
 801185a:	00b3      	lsls	r3, r6, #2
 801185c:	25f0      	movs	r5, #240	; 0xf0
 801185e:	411d      	asrs	r5, r3
 8011860:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011864:	b2ed      	uxtb	r5, r5
 8011866:	00b3      	lsls	r3, r6, #2
 8011868:	f1c3 0304 	rsb	r3, r3, #4
 801186c:	ea0a 0005 	and.w	r0, sl, r5
 8011870:	4118      	asrs	r0, r3
 8011872:	47b8      	blx	r7
 8011874:	f849 0904 	str.w	r0, [r9], #-4
 8011878:	b936      	cbnz	r6, 8011888 <GUI__ExpandPixelIndicesEx+0x120>
 801187a:	f898 a000 	ldrb.w	sl, [r8]
 801187e:	250f      	movs	r5, #15
 8011880:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011884:	2601      	movs	r6, #1
 8011886:	e002      	b.n	801188e <GUI__ExpandPixelIndicesEx+0x126>
 8011888:	012d      	lsls	r5, r5, #4
 801188a:	b2ed      	uxtb	r5, r5
 801188c:	2600      	movs	r6, #0
 801188e:	3c01      	subs	r4, #1
 8011890:	d1e9      	bne.n	8011866 <GUI__ExpandPixelIndicesEx+0xfe>
 8011892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011896:	192e      	adds	r6, r5, r4
 8011898:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 801189c:	1b34      	subs	r4, r6, r4
 801189e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80118a2:	47b8      	blx	r7
 80118a4:	42a6      	cmp	r6, r4
 80118a6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80118aa:	d1f8      	bne.n	801189e <GUI__ExpandPixelIndicesEx+0x136>
 80118ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118b0:	695e      	ldr	r6, [r3, #20]
 80118b2:	b12e      	cbz	r6, 80118c0 <GUI__ExpandPixelIndicesEx+0x158>
 80118b4:	4629      	mov	r1, r5
 80118b6:	4622      	mov	r2, r4
 80118b8:	2302      	movs	r3, #2
 80118ba:	47b0      	blx	r6
 80118bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118c0:	0064      	lsls	r4, r4, #1
 80118c2:	4425      	add	r5, r4
 80118c4:	192e      	adds	r6, r5, r4
 80118c6:	1b2c      	subs	r4, r5, r4
 80118c8:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 80118cc:	47b8      	blx	r7
 80118ce:	42a5      	cmp	r5, r4
 80118d0:	f846 0d04 	str.w	r0, [r6, #-4]!
 80118d4:	d1f8      	bne.n	80118c8 <GUI__ExpandPixelIndicesEx+0x160>
 80118d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080118de <GUI__CompactPixelIndices>:
 80118de:	2a08      	cmp	r2, #8
 80118e0:	b510      	push	{r4, lr}
 80118e2:	dd0e      	ble.n	8011902 <GUI__CompactPixelIndices+0x24>
 80118e4:	2a10      	cmp	r2, #16
 80118e6:	dc0a      	bgt.n	80118fe <GUI__CompactPixelIndices+0x20>
 80118e8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80118ec:	4603      	mov	r3, r0
 80118ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80118f2:	f823 2b02 	strh.w	r2, [r3], #2
 80118f6:	428b      	cmp	r3, r1
 80118f8:	d1f9      	bne.n	80118ee <GUI__CompactPixelIndices+0x10>
 80118fa:	2001      	movs	r0, #1
 80118fc:	bd10      	pop	{r4, pc}
 80118fe:	2000      	movs	r0, #0
 8011900:	bd10      	pop	{r4, pc}
 8011902:	2a02      	cmp	r2, #2
 8011904:	d06d      	beq.n	80119e2 <GUI__CompactPixelIndices+0x104>
 8011906:	2a04      	cmp	r2, #4
 8011908:	d054      	beq.n	80119b4 <GUI__CompactPixelIndices+0xd6>
 801190a:	2a01      	cmp	r2, #1
 801190c:	f040 8095 	bne.w	8011a3a <GUI__CompactPixelIndices+0x15c>
 8011910:	4604      	mov	r4, r0
 8011912:	6803      	ldr	r3, [r0, #0]
 8011914:	2901      	cmp	r1, #1
 8011916:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801191a:	b2db      	uxtb	r3, r3
 801191c:	d047      	beq.n	80119ae <GUI__CompactPixelIndices+0xd0>
 801191e:	6842      	ldr	r2, [r0, #4]
 8011920:	2902      	cmp	r1, #2
 8011922:	f002 0201 	and.w	r2, r2, #1
 8011926:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801192a:	d102      	bne.n	8011932 <GUI__CompactPixelIndices+0x54>
 801192c:	f100 0208 	add.w	r2, r0, #8
 8011930:	e03e      	b.n	80119b0 <GUI__CompactPixelIndices+0xd2>
 8011932:	6882      	ldr	r2, [r0, #8]
 8011934:	2903      	cmp	r1, #3
 8011936:	f002 0201 	and.w	r2, r2, #1
 801193a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801193e:	d102      	bne.n	8011946 <GUI__CompactPixelIndices+0x68>
 8011940:	f100 020c 	add.w	r2, r0, #12
 8011944:	e034      	b.n	80119b0 <GUI__CompactPixelIndices+0xd2>
 8011946:	68c2      	ldr	r2, [r0, #12]
 8011948:	2904      	cmp	r1, #4
 801194a:	f002 0201 	and.w	r2, r2, #1
 801194e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011952:	d102      	bne.n	801195a <GUI__CompactPixelIndices+0x7c>
 8011954:	f100 0210 	add.w	r2, r0, #16
 8011958:	e02a      	b.n	80119b0 <GUI__CompactPixelIndices+0xd2>
 801195a:	6902      	ldr	r2, [r0, #16]
 801195c:	2905      	cmp	r1, #5
 801195e:	f002 0201 	and.w	r2, r2, #1
 8011962:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011966:	d102      	bne.n	801196e <GUI__CompactPixelIndices+0x90>
 8011968:	f100 0214 	add.w	r2, r0, #20
 801196c:	e020      	b.n	80119b0 <GUI__CompactPixelIndices+0xd2>
 801196e:	6942      	ldr	r2, [r0, #20]
 8011970:	2906      	cmp	r1, #6
 8011972:	f002 0201 	and.w	r2, r2, #1
 8011976:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801197a:	d102      	bne.n	8011982 <GUI__CompactPixelIndices+0xa4>
 801197c:	f100 0218 	add.w	r2, r0, #24
 8011980:	e016      	b.n	80119b0 <GUI__CompactPixelIndices+0xd2>
 8011982:	6982      	ldr	r2, [r0, #24]
 8011984:	3907      	subs	r1, #7
 8011986:	f002 0201 	and.w	r2, r2, #1
 801198a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 801198e:	d102      	bne.n	8011996 <GUI__CompactPixelIndices+0xb8>
 8011990:	f100 021c 	add.w	r2, r0, #28
 8011994:	e005      	b.n	80119a2 <GUI__CompactPixelIndices+0xc4>
 8011996:	f100 0220 	add.w	r2, r0, #32
 801199a:	69c0      	ldr	r0, [r0, #28]
 801199c:	f000 0001 	and.w	r0, r0, #1
 80119a0:	4303      	orrs	r3, r0
 80119a2:	f804 3b01 	strb.w	r3, [r4], #1
 80119a6:	2900      	cmp	r1, #0
 80119a8:	d0a7      	beq.n	80118fa <GUI__CompactPixelIndices+0x1c>
 80119aa:	4610      	mov	r0, r2
 80119ac:	e7b1      	b.n	8011912 <GUI__CompactPixelIndices+0x34>
 80119ae:	1d02      	adds	r2, r0, #4
 80119b0:	2100      	movs	r1, #0
 80119b2:	e7f6      	b.n	80119a2 <GUI__CompactPixelIndices+0xc4>
 80119b4:	4602      	mov	r2, r0
 80119b6:	6803      	ldr	r3, [r0, #0]
 80119b8:	2901      	cmp	r1, #1
 80119ba:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	d102      	bne.n	80119c8 <GUI__CompactPixelIndices+0xea>
 80119c2:	1d04      	adds	r4, r0, #4
 80119c4:	2100      	movs	r1, #0
 80119c6:	e006      	b.n	80119d6 <GUI__CompactPixelIndices+0xf8>
 80119c8:	f100 0408 	add.w	r4, r0, #8
 80119cc:	6840      	ldr	r0, [r0, #4]
 80119ce:	f000 000f 	and.w	r0, r0, #15
 80119d2:	4303      	orrs	r3, r0
 80119d4:	3902      	subs	r1, #2
 80119d6:	f802 3b01 	strb.w	r3, [r2], #1
 80119da:	2900      	cmp	r1, #0
 80119dc:	d08d      	beq.n	80118fa <GUI__CompactPixelIndices+0x1c>
 80119de:	4620      	mov	r0, r4
 80119e0:	e7e9      	b.n	80119b6 <GUI__CompactPixelIndices+0xd8>
 80119e2:	4604      	mov	r4, r0
 80119e4:	6803      	ldr	r3, [r0, #0]
 80119e6:	2901      	cmp	r1, #1
 80119e8:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	d021      	beq.n	8011a34 <GUI__CompactPixelIndices+0x156>
 80119f0:	6842      	ldr	r2, [r0, #4]
 80119f2:	2902      	cmp	r1, #2
 80119f4:	f002 0203 	and.w	r2, r2, #3
 80119f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80119fc:	d102      	bne.n	8011a04 <GUI__CompactPixelIndices+0x126>
 80119fe:	f100 0208 	add.w	r2, r0, #8
 8011a02:	e018      	b.n	8011a36 <GUI__CompactPixelIndices+0x158>
 8011a04:	6882      	ldr	r2, [r0, #8]
 8011a06:	2903      	cmp	r1, #3
 8011a08:	f002 0203 	and.w	r2, r2, #3
 8011a0c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011a10:	d102      	bne.n	8011a18 <GUI__CompactPixelIndices+0x13a>
 8011a12:	f100 020c 	add.w	r2, r0, #12
 8011a16:	e00e      	b.n	8011a36 <GUI__CompactPixelIndices+0x158>
 8011a18:	f100 0210 	add.w	r2, r0, #16
 8011a1c:	68c0      	ldr	r0, [r0, #12]
 8011a1e:	f000 0003 	and.w	r0, r0, #3
 8011a22:	4303      	orrs	r3, r0
 8011a24:	3904      	subs	r1, #4
 8011a26:	f804 3b01 	strb.w	r3, [r4], #1
 8011a2a:	2900      	cmp	r1, #0
 8011a2c:	f43f af65 	beq.w	80118fa <GUI__CompactPixelIndices+0x1c>
 8011a30:	4610      	mov	r0, r2
 8011a32:	e7d7      	b.n	80119e4 <GUI__CompactPixelIndices+0x106>
 8011a34:	1d02      	adds	r2, r0, #4
 8011a36:	2100      	movs	r1, #0
 8011a38:	e7f5      	b.n	8011a26 <GUI__CompactPixelIndices+0x148>
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8011a40:	54c2      	strb	r2, [r0, r3]
 8011a42:	3301      	adds	r3, #1
 8011a44:	428b      	cmp	r3, r1
 8011a46:	d1f9      	bne.n	8011a3c <GUI__CompactPixelIndices+0x15e>
 8011a48:	e757      	b.n	80118fa <GUI__CompactPixelIndices+0x1c>

08011a4a <GUI__ConvertColor2Index>:
 8011a4a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a52:	681e      	ldr	r6, [r3, #0]
 8011a54:	f1b8 0f00 	cmp.w	r8, #0
 8011a58:	bf08      	it	eq
 8011a5a:	4680      	moveq	r8, r0
 8011a5c:	2a08      	cmp	r2, #8
 8011a5e:	4604      	mov	r4, r0
 8011a60:	460d      	mov	r5, r1
 8011a62:	dd05      	ble.n	8011a70 <GUI__ConvertColor2Index+0x26>
 8011a64:	2a10      	cmp	r2, #16
 8011a66:	f340 80b6 	ble.w	8011bd6 <GUI__ConvertColor2Index+0x18c>
 8011a6a:	2000      	movs	r0, #0
 8011a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a70:	3a01      	subs	r2, #1
 8011a72:	2a07      	cmp	r2, #7
 8011a74:	f200 80a4 	bhi.w	8011bc0 <GUI__ConvertColor2Index+0x176>
 8011a78:	e8df f002 	tbb	[pc, r2]
 8011a7c:	87a26111 	.word	0x87a26111
 8011a80:	92a2a2a2 	.word	0x92a2a2a2
 8011a84:	69e0      	ldr	r0, [r4, #28]
 8011a86:	47b0      	blx	r6
 8011a88:	4338      	orrs	r0, r7
 8011a8a:	f104 0920 	add.w	r9, r4, #32
 8011a8e:	b2c7      	uxtb	r7, r0
 8011a90:	3d08      	subs	r5, #8
 8011a92:	f808 7b01 	strb.w	r7, [r8], #1
 8011a96:	2d00      	cmp	r5, #0
 8011a98:	f000 8092 	beq.w	8011bc0 <GUI__ConvertColor2Index+0x176>
 8011a9c:	464c      	mov	r4, r9
 8011a9e:	6820      	ldr	r0, [r4, #0]
 8011aa0:	47b0      	blx	r6
 8011aa2:	2d01      	cmp	r5, #1
 8011aa4:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8011aa8:	b2c7      	uxtb	r7, r0
 8011aaa:	f000 808c 	beq.w	8011bc6 <GUI__ConvertColor2Index+0x17c>
 8011aae:	6860      	ldr	r0, [r4, #4]
 8011ab0:	47b0      	blx	r6
 8011ab2:	2d02      	cmp	r5, #2
 8011ab4:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8011ab8:	b2c7      	uxtb	r7, r0
 8011aba:	d102      	bne.n	8011ac2 <GUI__ConvertColor2Index+0x78>
 8011abc:	f104 0908 	add.w	r9, r4, #8
 8011ac0:	e083      	b.n	8011bca <GUI__ConvertColor2Index+0x180>
 8011ac2:	68a0      	ldr	r0, [r4, #8]
 8011ac4:	47b0      	blx	r6
 8011ac6:	2d03      	cmp	r5, #3
 8011ac8:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8011acc:	b2c7      	uxtb	r7, r0
 8011ace:	d102      	bne.n	8011ad6 <GUI__ConvertColor2Index+0x8c>
 8011ad0:	f104 090c 	add.w	r9, r4, #12
 8011ad4:	e079      	b.n	8011bca <GUI__ConvertColor2Index+0x180>
 8011ad6:	68e0      	ldr	r0, [r4, #12]
 8011ad8:	47b0      	blx	r6
 8011ada:	2d04      	cmp	r5, #4
 8011adc:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011ae0:	b2c7      	uxtb	r7, r0
 8011ae2:	d102      	bne.n	8011aea <GUI__ConvertColor2Index+0xa0>
 8011ae4:	f104 0910 	add.w	r9, r4, #16
 8011ae8:	e06f      	b.n	8011bca <GUI__ConvertColor2Index+0x180>
 8011aea:	6920      	ldr	r0, [r4, #16]
 8011aec:	47b0      	blx	r6
 8011aee:	2d05      	cmp	r5, #5
 8011af0:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8011af4:	b2c7      	uxtb	r7, r0
 8011af6:	d102      	bne.n	8011afe <GUI__ConvertColor2Index+0xb4>
 8011af8:	f104 0914 	add.w	r9, r4, #20
 8011afc:	e065      	b.n	8011bca <GUI__ConvertColor2Index+0x180>
 8011afe:	6960      	ldr	r0, [r4, #20]
 8011b00:	47b0      	blx	r6
 8011b02:	2d06      	cmp	r5, #6
 8011b04:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011b08:	b2c7      	uxtb	r7, r0
 8011b0a:	d102      	bne.n	8011b12 <GUI__ConvertColor2Index+0xc8>
 8011b0c:	f104 0918 	add.w	r9, r4, #24
 8011b10:	e05b      	b.n	8011bca <GUI__ConvertColor2Index+0x180>
 8011b12:	69a0      	ldr	r0, [r4, #24]
 8011b14:	47b0      	blx	r6
 8011b16:	2d07      	cmp	r5, #7
 8011b18:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8011b1c:	b2c7      	uxtb	r7, r0
 8011b1e:	d1b1      	bne.n	8011a84 <GUI__ConvertColor2Index+0x3a>
 8011b20:	f104 091c 	add.w	r9, r4, #28
 8011b24:	e051      	b.n	8011bca <GUI__ConvertColor2Index+0x180>
 8011b26:	68e0      	ldr	r0, [r4, #12]
 8011b28:	47b0      	blx	r6
 8011b2a:	4338      	orrs	r0, r7
 8011b2c:	f104 0910 	add.w	r9, r4, #16
 8011b30:	b2c7      	uxtb	r7, r0
 8011b32:	3d04      	subs	r5, #4
 8011b34:	f808 7b01 	strb.w	r7, [r8], #1
 8011b38:	2d00      	cmp	r5, #0
 8011b3a:	d041      	beq.n	8011bc0 <GUI__ConvertColor2Index+0x176>
 8011b3c:	464c      	mov	r4, r9
 8011b3e:	6820      	ldr	r0, [r4, #0]
 8011b40:	47b0      	blx	r6
 8011b42:	2d01      	cmp	r5, #1
 8011b44:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8011b48:	b2c7      	uxtb	r7, r0
 8011b4a:	d040      	beq.n	8011bce <GUI__ConvertColor2Index+0x184>
 8011b4c:	6860      	ldr	r0, [r4, #4]
 8011b4e:	47b0      	blx	r6
 8011b50:	2d02      	cmp	r5, #2
 8011b52:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011b56:	b2c7      	uxtb	r7, r0
 8011b58:	d102      	bne.n	8011b60 <GUI__ConvertColor2Index+0x116>
 8011b5a:	f104 0908 	add.w	r9, r4, #8
 8011b5e:	e038      	b.n	8011bd2 <GUI__ConvertColor2Index+0x188>
 8011b60:	68a0      	ldr	r0, [r4, #8]
 8011b62:	47b0      	blx	r6
 8011b64:	2d03      	cmp	r5, #3
 8011b66:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011b6a:	b2c7      	uxtb	r7, r0
 8011b6c:	d1db      	bne.n	8011b26 <GUI__ConvertColor2Index+0xdc>
 8011b6e:	f104 090c 	add.w	r9, r4, #12
 8011b72:	e02e      	b.n	8011bd2 <GUI__ConvertColor2Index+0x188>
 8011b74:	6860      	ldr	r0, [r4, #4]
 8011b76:	47b0      	blx	r6
 8011b78:	4338      	orrs	r0, r7
 8011b7a:	f104 0908 	add.w	r9, r4, #8
 8011b7e:	b2c7      	uxtb	r7, r0
 8011b80:	3d02      	subs	r5, #2
 8011b82:	f808 7b01 	strb.w	r7, [r8], #1
 8011b86:	b1dd      	cbz	r5, 8011bc0 <GUI__ConvertColor2Index+0x176>
 8011b88:	464c      	mov	r4, r9
 8011b8a:	6820      	ldr	r0, [r4, #0]
 8011b8c:	47b0      	blx	r6
 8011b8e:	2d01      	cmp	r5, #1
 8011b90:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011b94:	b2c7      	uxtb	r7, r0
 8011b96:	d1ed      	bne.n	8011b74 <GUI__ConvertColor2Index+0x12a>
 8011b98:	f104 0904 	add.w	r9, r4, #4
 8011b9c:	2500      	movs	r5, #0
 8011b9e:	e7f0      	b.n	8011b82 <GUI__ConvertColor2Index+0x138>
 8011ba0:	691f      	ldr	r7, [r3, #16]
 8011ba2:	b12f      	cbz	r7, 8011bb0 <GUI__ConvertColor2Index+0x166>
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	4641      	mov	r1, r8
 8011ba8:	462a      	mov	r2, r5
 8011baa:	2301      	movs	r3, #1
 8011bac:	47b8      	blx	r7
 8011bae:	e007      	b.n	8011bc0 <GUI__ConvertColor2Index+0x176>
 8011bb0:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8011bb4:	47b0      	blx	r6
 8011bb6:	f808 0007 	strb.w	r0, [r8, r7]
 8011bba:	3701      	adds	r7, #1
 8011bbc:	42bd      	cmp	r5, r7
 8011bbe:	d1f7      	bne.n	8011bb0 <GUI__ConvertColor2Index+0x166>
 8011bc0:	2001      	movs	r0, #1
 8011bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bc6:	f104 0904 	add.w	r9, r4, #4
 8011bca:	2500      	movs	r5, #0
 8011bcc:	e761      	b.n	8011a92 <GUI__ConvertColor2Index+0x48>
 8011bce:	f104 0904 	add.w	r9, r4, #4
 8011bd2:	2500      	movs	r5, #0
 8011bd4:	e7ae      	b.n	8011b34 <GUI__ConvertColor2Index+0xea>
 8011bd6:	691f      	ldr	r7, [r3, #16]
 8011bd8:	b11f      	cbz	r7, 8011be2 <GUI__ConvertColor2Index+0x198>
 8011bda:	4641      	mov	r1, r8
 8011bdc:	462a      	mov	r2, r5
 8011bde:	2302      	movs	r3, #2
 8011be0:	e7e4      	b.n	8011bac <GUI__ConvertColor2Index+0x162>
 8011be2:	f854 0b04 	ldr.w	r0, [r4], #4
 8011be6:	47b0      	blx	r6
 8011be8:	3d01      	subs	r5, #1
 8011bea:	f828 0b02 	strh.w	r0, [r8], #2
 8011bee:	d1f8      	bne.n	8011be2 <GUI__ConvertColor2Index+0x198>
 8011bf0:	e7e6      	b.n	8011bc0 <GUI__ConvertColor2Index+0x176>

08011bf2 <GUI__CompactPixelIndicesEx>:
 8011bf2:	b513      	push	{r0, r1, r4, lr}
 8011bf4:	2400      	movs	r4, #0
 8011bf6:	9400      	str	r4, [sp, #0]
 8011bf8:	f7ff ff27 	bl	8011a4a <GUI__ConvertColor2Index>
 8011bfc:	b002      	add	sp, #8
 8011bfe:	bd10      	pop	{r4, pc}

08011c00 <_GetCharCode>:
 8011c00:	7800      	ldrb	r0, [r0, #0]
 8011c02:	4770      	bx	lr

08011c04 <_GetCharSize>:
 8011c04:	2001      	movs	r0, #1
 8011c06:	4770      	bx	lr

08011c08 <_CalcSizeOfChar>:
 8011c08:	2001      	movs	r0, #1
 8011c0a:	4770      	bx	lr

08011c0c <_Encode>:
 8011c0c:	7001      	strb	r1, [r0, #0]
 8011c0e:	2001      	movs	r0, #1
 8011c10:	4770      	bx	lr
	...

08011c14 <GUI_UC__GetCharCodeInc>:
 8011c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c16:	4e08      	ldr	r6, [pc, #32]	; (8011c38 <GUI_UC__GetCharCodeInc+0x24>)
 8011c18:	6804      	ldr	r4, [r0, #0]
 8011c1a:	6833      	ldr	r3, [r6, #0]
 8011c1c:	4605      	mov	r5, r0
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	4620      	mov	r0, r4
 8011c22:	4798      	blx	r3
 8011c24:	6833      	ldr	r3, [r6, #0]
 8011c26:	4607      	mov	r7, r0
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	4798      	blx	r3
 8011c2e:	4420      	add	r0, r4
 8011c30:	6028      	str	r0, [r5, #0]
 8011c32:	4638      	mov	r0, r7
 8011c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c36:	bf00      	nop
 8011c38:	2002306c 	.word	0x2002306c

08011c3c <GUI_UC__NumChars2NumBytes>:
 8011c3c:	b570      	push	{r4, r5, r6, lr}
 8011c3e:	4604      	mov	r4, r0
 8011c40:	460e      	mov	r6, r1
 8011c42:	2500      	movs	r5, #0
 8011c44:	b146      	cbz	r6, 8011c58 <GUI_UC__NumChars2NumBytes+0x1c>
 8011c46:	4b05      	ldr	r3, [pc, #20]	; (8011c5c <GUI_UC__NumChars2NumBytes+0x20>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	4798      	blx	r3
 8011c50:	3e01      	subs	r6, #1
 8011c52:	4404      	add	r4, r0
 8011c54:	4405      	add	r5, r0
 8011c56:	e7f5      	b.n	8011c44 <GUI_UC__NumChars2NumBytes+0x8>
 8011c58:	4628      	mov	r0, r5
 8011c5a:	bd70      	pop	{r4, r5, r6, pc}
 8011c5c:	2002306c 	.word	0x2002306c

08011c60 <GUI_SetTextAlign>:
 8011c60:	4b03      	ldr	r3, [pc, #12]	; (8011c70 <GUI_SetTextAlign+0x10>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8011c68:	8598      	strh	r0, [r3, #44]	; 0x2c
 8011c6a:	4610      	mov	r0, r2
 8011c6c:	4770      	bx	lr
 8011c6e:	bf00      	nop
 8011c70:	20000038 	.word	0x20000038

08011c74 <GUI_SetOrg>:
 8011c74:	460a      	mov	r2, r1
 8011c76:	4908      	ldr	r1, [pc, #32]	; (8011c98 <GUI_SetOrg+0x24>)
 8011c78:	b510      	push	{r4, lr}
 8011c7a:	8008      	strh	r0, [r1, #0]
 8011c7c:	4907      	ldr	r1, [pc, #28]	; (8011c9c <GUI_SetOrg+0x28>)
 8011c7e:	800a      	strh	r2, [r1, #0]
 8011c80:	4907      	ldr	r1, [pc, #28]	; (8011ca0 <GUI_SetOrg+0x2c>)
 8011c82:	6809      	ldr	r1, [r1, #0]
 8011c84:	4603      	mov	r3, r0
 8011c86:	7c48      	ldrb	r0, [r1, #17]
 8011c88:	4906      	ldr	r1, [pc, #24]	; (8011ca4 <GUI_SetOrg+0x30>)
 8011c8a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8011c8e:	68c1      	ldr	r1, [r0, #12]
 8011c90:	6a0c      	ldr	r4, [r1, #32]
 8011c92:	4619      	mov	r1, r3
 8011c94:	47a0      	blx	r4
 8011c96:	bd10      	pop	{r4, pc}
 8011c98:	2002305c 	.word	0x2002305c
 8011c9c:	20023050 	.word	0x20023050
 8011ca0:	20000038 	.word	0x20000038
 8011ca4:	20023074 	.word	0x20023074

08011ca8 <GUI_SetLineStyle>:
 8011ca8:	4b02      	ldr	r3, [pc, #8]	; (8011cb4 <GUI_SetLineStyle+0xc>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	7e9a      	ldrb	r2, [r3, #26]
 8011cae:	7698      	strb	r0, [r3, #26]
 8011cb0:	4610      	mov	r0, r2
 8011cb2:	4770      	bx	lr
 8011cb4:	20000038 	.word	0x20000038

08011cb8 <GUI_GetFontSizeY>:
 8011cb8:	f000 b9ea 	b.w	8012090 <GUI__GetFontSizeY>

08011cbc <_Add>:
 8011cbc:	4a0d      	ldr	r2, [pc, #52]	; (8011cf4 <_Add+0x38>)
 8011cbe:	6813      	ldr	r3, [r2, #0]
 8011cc0:	2b0b      	cmp	r3, #11
 8011cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cc4:	4615      	mov	r5, r2
 8011cc6:	dc14      	bgt.n	8011cf2 <_Add+0x36>
 8011cc8:	4c0b      	ldr	r4, [pc, #44]	; (8011cf8 <_Add+0x3c>)
 8011cca:	461a      	mov	r2, r3
 8011ccc:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8011cd0:	4626      	mov	r6, r4
 8011cd2:	b152      	cbz	r2, 8011cea <_Add+0x2e>
 8011cd4:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 8011cd8:	fa0f fc84 	sxth.w	ip, r4
 8011cdc:	4584      	cmp	ip, r0
 8011cde:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 8011ce2:	db02      	blt.n	8011cea <_Add+0x2e>
 8011ce4:	804c      	strh	r4, [r1, #2]
 8011ce6:	463a      	mov	r2, r7
 8011ce8:	e7f3      	b.n	8011cd2 <_Add+0x16>
 8011cea:	3301      	adds	r3, #1
 8011cec:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 8011cf0:	602b      	str	r3, [r5, #0]
 8011cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cf4:	20022ccc 	.word	0x20022ccc
 8011cf8:	20022cd0 	.word	0x20022cd0

08011cfc <GL_FillPolygon>:
 8011cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8011ebc <GL_FillPolygon+0x1c0>
 8011d04:	9101      	str	r1, [sp, #4]
 8011d06:	4692      	mov	sl, r2
 8011d08:	4606      	mov	r6, r0
 8011d0a:	f643 74ff 	movw	r4, #16383	; 0x3fff
 8011d0e:	2200      	movs	r2, #0
 8011d10:	9901      	ldr	r1, [sp, #4]
 8011d12:	428a      	cmp	r2, r1
 8011d14:	da0b      	bge.n	8011d2e <GL_FillPolygon+0x32>
 8011d16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8011d1a:	3201      	adds	r2, #1
 8011d1c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8011d20:	428c      	cmp	r4, r1
 8011d22:	bfa8      	it	ge
 8011d24:	460c      	movge	r4, r1
 8011d26:	4589      	cmp	r9, r1
 8011d28:	bfb8      	it	lt
 8011d2a:	4689      	movlt	r9, r1
 8011d2c:	e7f0      	b.n	8011d10 <GL_FillPolygon+0x14>
 8011d2e:	4960      	ldr	r1, [pc, #384]	; (8011eb0 <GL_FillPolygon+0x1b4>)
 8011d30:	680a      	ldr	r2, [r1, #0]
 8011d32:	6952      	ldr	r2, [r2, #20]
 8011d34:	468b      	mov	fp, r1
 8011d36:	b15a      	cbz	r2, 8011d50 <GL_FillPolygon+0x54>
 8011d38:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8011d3c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8011d40:	1ac9      	subs	r1, r1, r3
 8011d42:	1ad2      	subs	r2, r2, r3
 8011d44:	4589      	cmp	r9, r1
 8011d46:	bfa8      	it	ge
 8011d48:	4689      	movge	r9, r1
 8011d4a:	4294      	cmp	r4, r2
 8011d4c:	bfb8      	it	lt
 8011d4e:	4614      	movlt	r4, r2
 8011d50:	eb04 0803 	add.w	r8, r4, r3
 8011d54:	454c      	cmp	r4, r9
 8011d56:	f300 80a7 	bgt.w	8011ea8 <GL_FillPolygon+0x1ac>
 8011d5a:	4b56      	ldr	r3, [pc, #344]	; (8011eb4 <GL_FillPolygon+0x1b8>)
 8011d5c:	2700      	movs	r7, #0
 8011d5e:	601f      	str	r7, [r3, #0]
 8011d60:	4635      	mov	r5, r6
 8011d62:	9901      	ldr	r1, [sp, #4]
 8011d64:	428f      	cmp	r7, r1
 8011d66:	da55      	bge.n	8011e14 <GL_FillPolygon+0x118>
 8011d68:	9b01      	ldr	r3, [sp, #4]
 8011d6a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011d6e:	1e59      	subs	r1, r3, #1
 8011d70:	428f      	cmp	r7, r1
 8011d72:	bfb4      	ite	lt
 8011d74:	f107 0c01 	addlt.w	ip, r7, #1
 8011d78:	f04f 0c00 	movge.w	ip, #0
 8011d7c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8011d80:	eb06 030c 	add.w	r3, r6, ip
 8011d84:	42a2      	cmp	r2, r4
 8011d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011d8a:	d136      	bne.n	8011dfa <GL_FillPolygon+0xfe>
 8011d8c:	42a3      	cmp	r3, r4
 8011d8e:	d002      	beq.n	8011d96 <GL_FillPolygon+0x9a>
 8011d90:	463a      	mov	r2, r7
 8011d92:	2000      	movs	r0, #0
 8011d94:	e01b      	b.n	8011dce <GL_FillPolygon+0xd2>
 8011d96:	f9b5 e000 	ldrsh.w	lr, [r5]
 8011d9a:	f936 200c 	ldrsh.w	r2, [r6, ip]
 8011d9e:	f8db 3000 	ldr.w	r3, [fp]
 8011da2:	44d6      	add	lr, sl
 8011da4:	4452      	add	r2, sl
 8011da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011da8:	4596      	cmp	lr, r2
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	da02      	bge.n	8011db4 <GL_FillPolygon+0xb8>
 8011dae:	4670      	mov	r0, lr
 8011db0:	4641      	mov	r1, r8
 8011db2:	e020      	b.n	8011df6 <GL_FillPolygon+0xfa>
 8011db4:	4610      	mov	r0, r2
 8011db6:	4641      	mov	r1, r8
 8011db8:	4672      	mov	r2, lr
 8011dba:	e01c      	b.n	8011df6 <GL_FillPolygon+0xfa>
 8011dbc:	b152      	cbz	r2, 8011dd4 <GL_FillPolygon+0xd8>
 8011dbe:	3a01      	subs	r2, #1
 8011dc0:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 8011dc4:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 8011dc8:	45a4      	cmp	ip, r4
 8011dca:	d105      	bne.n	8011dd8 <GL_FillPolygon+0xdc>
 8011dcc:	3001      	adds	r0, #1
 8011dce:	4288      	cmp	r0, r1
 8011dd0:	dbf4      	blt.n	8011dbc <GL_FillPolygon+0xc0>
 8011dd2:	e01c      	b.n	8011e0e <GL_FillPolygon+0x112>
 8011dd4:	460a      	mov	r2, r1
 8011dd6:	e7f3      	b.n	8011dc0 <GL_FillPolygon+0xc4>
 8011dd8:	ebc4 0c0c 	rsb	ip, r4, ip
 8011ddc:	1b1b      	subs	r3, r3, r4
 8011dde:	ea9c 0f03 	teq	ip, r3
 8011de2:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011de6:	d44d      	bmi.n	8011e84 <GL_FillPolygon+0x188>
 8011de8:	f8db 3000 	ldr.w	r3, [fp]
 8011dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dee:	4450      	add	r0, sl
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	4641      	mov	r1, r8
 8011df4:	4602      	mov	r2, r0
 8011df6:	4798      	blx	r3
 8011df8:	e009      	b.n	8011e0e <GL_FillPolygon+0x112>
 8011dfa:	42a3      	cmp	r3, r4
 8011dfc:	d007      	beq.n	8011e0e <GL_FillPolygon+0x112>
 8011dfe:	db44      	blt.n	8011e8a <GL_FillPolygon+0x18e>
 8011e00:	42a2      	cmp	r2, r4
 8011e02:	dd27      	ble.n	8011e54 <GL_FillPolygon+0x158>
 8011e04:	42a3      	cmp	r3, r4
 8011e06:	dd42      	ble.n	8011e8e <GL_FillPolygon+0x192>
 8011e08:	e001      	b.n	8011e0e <GL_FillPolygon+0x112>
 8011e0a:	42a3      	cmp	r3, r4
 8011e0c:	dd49      	ble.n	8011ea2 <GL_FillPolygon+0x1a6>
 8011e0e:	3701      	adds	r7, #1
 8011e10:	3504      	adds	r5, #4
 8011e12:	e7a6      	b.n	8011d62 <GL_FillPolygon+0x66>
 8011e14:	2500      	movs	r5, #0
 8011e16:	4628      	mov	r0, r5
 8011e18:	462f      	mov	r7, r5
 8011e1a:	4b26      	ldr	r3, [pc, #152]	; (8011eb4 <GL_FillPolygon+0x1b8>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	429f      	cmp	r7, r3
 8011e20:	da14      	bge.n	8011e4c <GL_FillPolygon+0x150>
 8011e22:	4b25      	ldr	r3, [pc, #148]	; (8011eb8 <GL_FillPolygon+0x1bc>)
 8011e24:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 8011e28:	b15d      	cbz	r5, 8011e42 <GL_FillPolygon+0x146>
 8011e2a:	f8db 2000 	ldr.w	r2, [fp]
 8011e2e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011e30:	4450      	add	r0, sl
 8011e32:	f8d2 c000 	ldr.w	ip, [r2]
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	eb0a 0203 	add.w	r2, sl, r3
 8011e3c:	4641      	mov	r1, r8
 8011e3e:	47e0      	blx	ip
 8011e40:	9b00      	ldr	r3, [sp, #0]
 8011e42:	f085 0501 	eor.w	r5, r5, #1
 8011e46:	3701      	adds	r7, #1
 8011e48:	4618      	mov	r0, r3
 8011e4a:	e7e6      	b.n	8011e1a <GL_FillPolygon+0x11e>
 8011e4c:	3401      	adds	r4, #1
 8011e4e:	f108 0801 	add.w	r8, r8, #1
 8011e52:	e77f      	b.n	8011d54 <GL_FillPolygon+0x58>
 8011e54:	429a      	cmp	r2, r3
 8011e56:	dcd8      	bgt.n	8011e0a <GL_FillPolygon+0x10e>
 8011e58:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011e5c:	f936 000c 	ldrsh.w	r0, [r6, ip]
 8011e60:	ebc2 0e04 	rsb	lr, r2, r4
 8011e64:	1a40      	subs	r0, r0, r1
 8011e66:	fb0e f000 	mul.w	r0, lr, r0
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	ebc2 0303 	rsb	r3, r2, r3
 8011e70:	bfdb      	ittet	le
 8011e72:	105a      	asrle	r2, r3, #1
 8011e74:	f1c2 0201 	rsble	r2, r2, #1
 8011e78:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 8011e7c:	1880      	addle	r0, r0, r2
 8011e7e:	fb90 f0f3 	sdiv	r0, r0, r3
 8011e82:	4408      	add	r0, r1
 8011e84:	f7ff ff1a 	bl	8011cbc <_Add>
 8011e88:	e7c1      	b.n	8011e0e <GL_FillPolygon+0x112>
 8011e8a:	42a2      	cmp	r2, r4
 8011e8c:	dbbf      	blt.n	8011e0e <GL_FillPolygon+0x112>
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	ddbd      	ble.n	8011e0e <GL_FillPolygon+0x112>
 8011e92:	4696      	mov	lr, r2
 8011e94:	f936 100c 	ldrsh.w	r1, [r6, ip]
 8011e98:	f9b5 0000 	ldrsh.w	r0, [r5]
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	4673      	mov	r3, lr
 8011ea0:	e7de      	b.n	8011e60 <GL_FillPolygon+0x164>
 8011ea2:	42a2      	cmp	r2, r4
 8011ea4:	daf5      	bge.n	8011e92 <GL_FillPolygon+0x196>
 8011ea6:	e7b2      	b.n	8011e0e <GL_FillPolygon+0x112>
 8011ea8:	b003      	add	sp, #12
 8011eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eae:	bf00      	nop
 8011eb0:	20000038 	.word	0x20000038
 8011eb4:	20022ccc 	.word	0x20022ccc
 8011eb8:	20022cd0 	.word	0x20022cd0
 8011ebc:	ffffc001 	.word	0xffffc001

08011ec0 <GL_DrawPoint>:
 8011ec0:	b508      	push	{r3, lr}
 8011ec2:	4b08      	ldr	r3, [pc, #32]	; (8011ee4 <GL_DrawPoint+0x24>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	7e1a      	ldrb	r2, [r3, #24]
 8011ec8:	2a01      	cmp	r2, #1
 8011eca:	d103      	bne.n	8011ed4 <GL_DrawPoint+0x14>
 8011ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	4798      	blx	r3
 8011ed2:	bd08      	pop	{r3, pc}
 8011ed4:	2302      	movs	r3, #2
 8011ed6:	3a01      	subs	r2, #1
 8011ed8:	fb92 f2f3 	sdiv	r2, r2, r3
 8011edc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011ee0:	f000 b836 	b.w	8011f50 <GL_FillCircle>
 8011ee4:	20000038 	.word	0x20000038

08011ee8 <GUI_CURSOR_SetPositionEx>:
 8011ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eea:	4606      	mov	r6, r0
 8011eec:	4610      	mov	r0, r2
 8011eee:	460d      	mov	r5, r1
 8011ef0:	4614      	mov	r4, r2
 8011ef2:	f7fb f971 	bl	800d1d8 <GUI_GetCursorLayer>
 8011ef6:	4f15      	ldr	r7, [pc, #84]	; (8011f4c <GUI_CURSOR_SetPositionEx+0x64>)
 8011ef8:	2314      	movs	r3, #20
 8011efa:	b148      	cbz	r0, 8011f10 <GUI_CURSOR_SetPositionEx+0x28>
 8011efc:	435c      	muls	r4, r3
 8011efe:	593b      	ldr	r3, [r7, r4]
 8011f00:	6859      	ldr	r1, [r3, #4]
 8011f02:	689a      	ldr	r2, [r3, #8]
 8011f04:	1a71      	subs	r1, r6, r1
 8011f06:	1aaa      	subs	r2, r5, r2
 8011f08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011f0c:	f7fb b98e 	b.w	800d22c <GUI_SetLayerPosEx>
 8011f10:	fb03 7304 	mla	r3, r3, r4, r7
 8011f14:	f103 0208 	add.w	r2, r3, #8
 8011f18:	689b      	ldr	r3, [r3, #8]
 8011f1a:	42b3      	cmp	r3, r6
 8011f1c:	d102      	bne.n	8011f24 <GUI_CURSOR_SetPositionEx+0x3c>
 8011f1e:	6853      	ldr	r3, [r2, #4]
 8011f20:	42ab      	cmp	r3, r5
 8011f22:	d011      	beq.n	8011f48 <GUI_CURSOR_SetPositionEx+0x60>
 8011f24:	2314      	movs	r3, #20
 8011f26:	4363      	muls	r3, r4
 8011f28:	18fa      	adds	r2, r7, r3
 8011f2a:	6910      	ldr	r0, [r2, #16]
 8011f2c:	b138      	cbz	r0, 8011f3e <GUI_CURSOR_SetPositionEx+0x56>
 8011f2e:	4a07      	ldr	r2, [pc, #28]	; (8011f4c <GUI_CURSOR_SetPositionEx+0x64>)
 8011f30:	58d3      	ldr	r3, [r2, r3]
 8011f32:	6859      	ldr	r1, [r3, #4]
 8011f34:	689a      	ldr	r2, [r3, #8]
 8011f36:	1a71      	subs	r1, r6, r1
 8011f38:	1aaa      	subs	r2, r5, r2
 8011f3a:	f000 fa09 	bl	8012350 <GUI_SPRITE_SetPosition>
 8011f3e:	2314      	movs	r3, #20
 8011f40:	fb03 7404 	mla	r4, r3, r4, r7
 8011f44:	60a6      	str	r6, [r4, #8]
 8011f46:	60e5      	str	r5, [r4, #12]
 8011f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20022ce8 	.word	0x20022ce8

08011f50 <GL_FillCircle>:
 8011f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	f240 29c3 	movw	r9, #707	; 0x2c3
 8011f58:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8012010 <GL_FillCircle+0xc0>
 8011f5c:	fb09 f902 	mul.w	r9, r9, r2
 8011f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011f64:	fb99 f9f3 	sdiv	r9, r9, r3
 8011f68:	f8d8 3000 	ldr.w	r3, [r8]
 8011f6c:	f04f 0b02 	mov.w	fp, #2
 8011f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f72:	4606      	mov	r6, r0
 8011f74:	fb92 fbfb 	sdiv	fp, r2, fp
 8011f78:	1a80      	subs	r0, r0, r2
 8011f7a:	4614      	mov	r4, r2
 8011f7c:	fb02 bb02 	mla	fp, r2, r2, fp
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	18b2      	adds	r2, r6, r2
 8011f84:	460f      	mov	r7, r1
 8011f86:	4798      	blx	r3
 8011f88:	f109 0901 	add.w	r9, r9, #1
 8011f8c:	2501      	movs	r5, #1
 8011f8e:	454d      	cmp	r5, r9
 8011f90:	dc3a      	bgt.n	8012008 <GL_FillCircle+0xb8>
 8011f92:	fb04 f304 	mul.w	r3, r4, r4
 8011f96:	fb05 3305 	mla	r3, r5, r5, r3
 8011f9a:	455b      	cmp	r3, fp
 8011f9c:	dd1b      	ble.n	8011fd6 <GL_FillCircle+0x86>
 8011f9e:	454c      	cmp	r4, r9
 8011fa0:	dd18      	ble.n	8011fd4 <GL_FillCircle+0x84>
 8011fa2:	f8d8 2000 	ldr.w	r2, [r8]
 8011fa6:	1c73      	adds	r3, r6, #1
 8011fa8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011faa:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
 8011fae:	1b5b      	subs	r3, r3, r5
 8011fb0:	44aa      	add	sl, r5
 8011fb2:	f8d2 c000 	ldr.w	ip, [r2]
 8011fb6:	9301      	str	r3, [sp, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	1939      	adds	r1, r7, r4
 8011fbc:	4652      	mov	r2, sl
 8011fbe:	47e0      	blx	ip
 8011fc0:	f8d8 2000 	ldr.w	r2, [r8]
 8011fc4:	9b01      	ldr	r3, [sp, #4]
 8011fc6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f8d2 c000 	ldr.w	ip, [r2]
 8011fce:	1b39      	subs	r1, r7, r4
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	47e0      	blx	ip
 8011fd4:	3c01      	subs	r4, #1
 8011fd6:	f8d8 2000 	ldr.w	r2, [r8]
 8011fda:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011fdc:	1b33      	subs	r3, r6, r4
 8011fde:	eb06 0a04 	add.w	sl, r6, r4
 8011fe2:	f8d2 c000 	ldr.w	ip, [r2]
 8011fe6:	9301      	str	r3, [sp, #4]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	19e9      	adds	r1, r5, r7
 8011fec:	4652      	mov	r2, sl
 8011fee:	47e0      	blx	ip
 8011ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8011ff4:	9b01      	ldr	r3, [sp, #4]
 8011ff6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011ff8:	1b79      	subs	r1, r7, r5
 8011ffa:	f8d2 c000 	ldr.w	ip, [r2]
 8011ffe:	4618      	mov	r0, r3
 8012000:	4652      	mov	r2, sl
 8012002:	47e0      	blx	ip
 8012004:	3501      	adds	r5, #1
 8012006:	e7c2      	b.n	8011f8e <GL_FillCircle+0x3e>
 8012008:	b003      	add	sp, #12
 801200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200e:	bf00      	nop
 8012010:	20000038 	.word	0x20000038

08012014 <GUI_CalcColorDist>:
 8012014:	b2cb      	uxtb	r3, r1
 8012016:	b2c2      	uxtb	r2, r0
 8012018:	1ad2      	subs	r2, r2, r3
 801201a:	b292      	uxth	r2, r2
 801201c:	b293      	uxth	r3, r2
 801201e:	b530      	push	{r4, r5, lr}
 8012020:	041c      	lsls	r4, r3, #16
 8012022:	bf48      	it	mi
 8012024:	4253      	negmi	r3, r2
 8012026:	f3c1 2507 	ubfx	r5, r1, #8, #8
 801202a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 801202e:	ebc5 0202 	rsb	r2, r5, r2
 8012032:	bf48      	it	mi
 8012034:	b29b      	uxthmi	r3, r3
 8012036:	b292      	uxth	r2, r2
 8012038:	0c09      	lsrs	r1, r1, #16
 801203a:	fb13 f403 	smulbb	r4, r3, r3
 801203e:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8012042:	b293      	uxth	r3, r2
 8012044:	041d      	lsls	r5, r3, #16
 8012046:	b289      	uxth	r1, r1
 8012048:	b288      	uxth	r0, r1
 801204a:	bf44      	itt	mi
 801204c:	4253      	negmi	r3, r2
 801204e:	b29b      	uxthmi	r3, r3
 8012050:	0402      	lsls	r2, r0, #16
 8012052:	bf48      	it	mi
 8012054:	4248      	negmi	r0, r1
 8012056:	fb13 4303 	smlabb	r3, r3, r3, r4
 801205a:	bf48      	it	mi
 801205c:	b280      	uxthmi	r0, r0
 801205e:	fb00 3000 	mla	r0, r0, r0, r3
 8012062:	bd30      	pop	{r4, r5, pc}

08012064 <LCD_Index2Color_M888>:
 8012064:	b2c2      	uxtb	r2, r0
 8012066:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801206a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801206e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8012072:	4318      	orrs	r0, r3
 8012074:	4770      	bx	lr

08012076 <WM__SendMessageIfEnabled>:
 8012076:	b538      	push	{r3, r4, r5, lr}
 8012078:	4604      	mov	r4, r0
 801207a:	460d      	mov	r5, r1
 801207c:	f7f5 fe74 	bl	8007d68 <WM__IsEnabled>
 8012080:	b128      	cbz	r0, 801208e <WM__SendMessageIfEnabled+0x18>
 8012082:	4620      	mov	r0, r4
 8012084:	4629      	mov	r1, r5
 8012086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801208a:	f7f5 be4f 	b.w	8007d2c <WM__SendMessage>
 801208e:	bd38      	pop	{r3, r4, r5, pc}

08012090 <GUI__GetFontSizeY>:
 8012090:	4b03      	ldr	r3, [pc, #12]	; (80120a0 <GUI__GetFontSizeY+0x10>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	69db      	ldr	r3, [r3, #28]
 8012096:	7e18      	ldrb	r0, [r3, #24]
 8012098:	7edb      	ldrb	r3, [r3, #27]
 801209a:	4358      	muls	r0, r3
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	20000038 	.word	0x20000038

080120a4 <_CreateBuffer>:
 80120a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a6:	6943      	ldr	r3, [r0, #20]
 80120a8:	4605      	mov	r5, r0
 80120aa:	8818      	ldrh	r0, [r3, #0]
 80120ac:	300d      	adds	r0, #13
 80120ae:	0080      	lsls	r0, r0, #2
 80120b0:	460e      	mov	r6, r1
 80120b2:	f7fc ff45 	bl	800ef40 <GUI_ALLOC_AllocNoInit>
 80120b6:	4607      	mov	r7, r0
 80120b8:	b908      	cbnz	r0, 80120be <_CreateBuffer+0x1a>
 80120ba:	2000      	movs	r0, #0
 80120bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120be:	f7fc fcf7 	bl	800eab0 <GUI_ALLOC_LockH>
 80120c2:	682b      	ldr	r3, [r5, #0]
 80120c4:	4604      	mov	r4, r0
 80120c6:	6998      	ldr	r0, [r3, #24]
 80120c8:	f7fc f814 	bl	800e0f4 <GUI_DEVICE__GetpDriver>
 80120cc:	2800      	cmp	r0, #0
 80120ce:	d0f4      	beq.n	80120ba <_CreateBuffer+0x16>
 80120d0:	68c3      	ldr	r3, [r0, #12]
 80120d2:	2108      	movs	r1, #8
 80120d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120d6:	4798      	blx	r3
 80120d8:	2802      	cmp	r0, #2
 80120da:	dd0b      	ble.n	80120f4 <_CreateBuffer+0x50>
 80120dc:	2804      	cmp	r0, #4
 80120de:	dd06      	ble.n	80120ee <_CreateBuffer+0x4a>
 80120e0:	2808      	cmp	r0, #8
 80120e2:	dd06      	ble.n	80120f2 <_CreateBuffer+0x4e>
 80120e4:	2811      	cmp	r0, #17
 80120e6:	bfb4      	ite	lt
 80120e8:	2010      	movlt	r0, #16
 80120ea:	2020      	movge	r0, #32
 80120ec:	e002      	b.n	80120f4 <_CreateBuffer+0x50>
 80120ee:	2004      	movs	r0, #4
 80120f0:	e000      	b.n	80120f4 <_CreateBuffer+0x50>
 80120f2:	2008      	movs	r0, #8
 80120f4:	2808      	cmp	r0, #8
 80120f6:	61a0      	str	r0, [r4, #24]
 80120f8:	dd04      	ble.n	8012104 <_CreateBuffer+0x60>
 80120fa:	2810      	cmp	r0, #16
 80120fc:	bfcc      	ite	gt
 80120fe:	2304      	movgt	r3, #4
 8012100:	2302      	movle	r3, #2
 8012102:	e000      	b.n	8012106 <_CreateBuffer+0x62>
 8012104:	2301      	movs	r3, #1
 8012106:	696a      	ldr	r2, [r5, #20]
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	8812      	ldrh	r2, [r2, #0]
 801210c:	61e2      	str	r2, [r4, #28]
 801210e:	4353      	muls	r3, r2
 8012110:	6163      	str	r3, [r4, #20]
 8012112:	f7fc fe6b 	bl	800edec <GUI_ALLOC_GetMaxSize>
 8012116:	6963      	ldr	r3, [r4, #20]
 8012118:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 801211c:	4283      	cmp	r3, r0
 801211e:	f04f 0200 	mov.w	r2, #0
 8012122:	bfc8      	it	gt
 8012124:	6160      	strgt	r0, [r4, #20]
 8012126:	2e01      	cmp	r6, #1
 8012128:	60e2      	str	r2, [r4, #12]
 801212a:	bf18      	it	ne
 801212c:	69e2      	ldrne	r2, [r4, #28]
 801212e:	60a7      	str	r7, [r4, #8]
 8012130:	bf18      	it	ne
 8012132:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 8012136:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801213a:	bf18      	it	ne
 801213c:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 8012140:	6023      	str	r3, [r4, #0]
 8012142:	bf18      	it	ne
 8012144:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 8012148:	6063      	str	r3, [r4, #4]
 801214a:	4620      	mov	r0, r4
 801214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801214e <_GetBkIndex.isra.0>:
 801214e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012152:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8012156:	4540      	cmp	r0, r8
 8012158:	4606      	mov	r6, r0
 801215a:	460d      	mov	r5, r1
 801215c:	4691      	mov	r9, r2
 801215e:	461c      	mov	r4, r3
 8012160:	da04      	bge.n	801216c <_GetBkIndex.isra.0+0x1e>
 8012162:	f8d9 0000 	ldr.w	r0, [r9]
 8012166:	bb28      	cbnz	r0, 80121b4 <_GetBkIndex.isra.0+0x66>
 8012168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801216c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012170:	4298      	cmp	r0, r3
 8012172:	dcf6      	bgt.n	8012162 <_GetBkIndex.isra.0+0x14>
 8012174:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8012178:	42b9      	cmp	r1, r7
 801217a:	dbf2      	blt.n	8012162 <_GetBkIndex.isra.0+0x14>
 801217c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012180:	4299      	cmp	r1, r3
 8012182:	dcee      	bgt.n	8012162 <_GetBkIndex.isra.0+0x14>
 8012184:	ebc8 0800 	rsb	r8, r8, r0
 8012188:	1bcf      	subs	r7, r1, r7
 801218a:	6960      	ldr	r0, [r4, #20]
 801218c:	4641      	mov	r1, r8
 801218e:	463a      	mov	r2, r7
 8012190:	f000 fba4 	bl	80128dc <GUI_GetBitmapPixelIndex>
 8012194:	2800      	cmp	r0, #0
 8012196:	d0e4      	beq.n	8012162 <_GetBkIndex.isra.0+0x14>
 8012198:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801219c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80121a0:	1a8a      	subs	r2, r1, r2
 80121a2:	fb02 7707 	mla	r7, r2, r7, r7
 80121a6:	f104 0320 	add.w	r3, r4, #32
 80121aa:	44b8      	add	r8, r7
 80121ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80121b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b4:	68c3      	ldr	r3, [r0, #12]
 80121b6:	4631      	mov	r1, r6
 80121b8:	695b      	ldr	r3, [r3, #20]
 80121ba:	462a      	mov	r2, r5
 80121bc:	4798      	blx	r3
 80121be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080121c2 <_GetBkIndexAlpha.isra.2>:
 80121c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121c6:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 80121ca:	42b0      	cmp	r0, r6
 80121cc:	4680      	mov	r8, r0
 80121ce:	460f      	mov	r7, r1
 80121d0:	4691      	mov	r9, r2
 80121d2:	461d      	mov	r5, r3
 80121d4:	db14      	blt.n	8012200 <_GetBkIndexAlpha.isra.2+0x3e>
 80121d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80121da:	4298      	cmp	r0, r3
 80121dc:	dc10      	bgt.n	8012200 <_GetBkIndexAlpha.isra.2+0x3e>
 80121de:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 80121e2:	42a1      	cmp	r1, r4
 80121e4:	db0c      	blt.n	8012200 <_GetBkIndexAlpha.isra.2+0x3e>
 80121e6:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80121ea:	4299      	cmp	r1, r3
 80121ec:	dc08      	bgt.n	8012200 <_GetBkIndexAlpha.isra.2+0x3e>
 80121ee:	1b86      	subs	r6, r0, r6
 80121f0:	6968      	ldr	r0, [r5, #20]
 80121f2:	1b0c      	subs	r4, r1, r4
 80121f4:	b130      	cbz	r0, 8012204 <_GetBkIndexAlpha.isra.2+0x42>
 80121f6:	4631      	mov	r1, r6
 80121f8:	4622      	mov	r2, r4
 80121fa:	f000 fb6f 	bl	80128dc <GUI_GetBitmapPixelIndex>
 80121fe:	e003      	b.n	8012208 <_GetBkIndexAlpha.isra.2+0x46>
 8012200:	2400      	movs	r4, #0
 8012202:	4626      	mov	r6, r4
 8012204:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8012208:	0e00      	lsrs	r0, r0, #24
 801220a:	28ff      	cmp	r0, #255	; 0xff
 801220c:	d109      	bne.n	8012222 <_GetBkIndexAlpha.isra.2+0x60>
 801220e:	f8d9 0000 	ldr.w	r0, [r9]
 8012212:	b190      	cbz	r0, 801223a <_GetBkIndexAlpha.isra.2+0x78>
 8012214:	68c3      	ldr	r3, [r0, #12]
 8012216:	4641      	mov	r1, r8
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	463a      	mov	r2, r7
 801221c:	4798      	blx	r3
 801221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012222:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012226:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801222a:	1a8a      	subs	r2, r1, r2
 801222c:	fb02 4404 	mla	r4, r2, r4, r4
 8012230:	f105 0320 	add.w	r3, r5, #32
 8012234:	4426      	add	r6, r4
 8012236:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801223a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012240 <_GetDeviceRect>:
 8012240:	b538      	push	{r3, r4, r5, lr}
 8012242:	4a0c      	ldr	r2, [pc, #48]	; (8012274 <_GetDeviceRect+0x34>)
 8012244:	6983      	ldr	r3, [r0, #24]
 8012246:	56d2      	ldrsb	r2, [r2, r3]
 8012248:	2a01      	cmp	r2, #1
 801224a:	4605      	mov	r5, r0
 801224c:	460c      	mov	r4, r1
 801224e:	dd0d      	ble.n	801226c <_GetDeviceRect+0x2c>
 8012250:	2200      	movs	r2, #0
 8012252:	804a      	strh	r2, [r1, #2]
 8012254:	800a      	strh	r2, [r1, #0]
 8012256:	4618      	mov	r0, r3
 8012258:	f7f8 ffee 	bl	800b238 <LCD_GetXSizeEx>
 801225c:	3801      	subs	r0, #1
 801225e:	80a0      	strh	r0, [r4, #4]
 8012260:	69a8      	ldr	r0, [r5, #24]
 8012262:	f7f8 ffec 	bl	800b23e <LCD_GetYSizeEx>
 8012266:	3801      	subs	r0, #1
 8012268:	80e0      	strh	r0, [r4, #6]
 801226a:	bd38      	pop	{r3, r4, r5, pc}
 801226c:	68c3      	ldr	r3, [r0, #12]
 801226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012270:	4798      	blx	r3
 8012272:	bd38      	pop	{r3, r4, r5, pc}
 8012274:	20023044 	.word	0x20023044

08012278 <_FlushBuffer.isra.5>:
 8012278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227a:	460c      	mov	r4, r1
 801227c:	68c9      	ldr	r1, [r1, #12]
 801227e:	b087      	sub	sp, #28
 8012280:	2900      	cmp	r1, #0
 8012282:	d030      	beq.n	80122e6 <_FlushBuffer.isra.5+0x6e>
 8012284:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8012288:	6822      	ldr	r2, [r4, #0]
 801228a:	2b01      	cmp	r3, #1
 801228c:	d103      	bne.n	8012296 <_FlushBuffer.isra.5+0x1e>
 801228e:	4615      	mov	r5, r2
 8012290:	6062      	str	r2, [r4, #4]
 8012292:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8012294:	e009      	b.n	80122aa <_FlushBuffer.isra.5+0x32>
 8012296:	69e3      	ldr	r3, [r4, #28]
 8012298:	6865      	ldr	r5, [r4, #4]
 801229a:	6a27      	ldr	r7, [r4, #32]
 801229c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80122a0:	3b01      	subs	r3, #1
 80122a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80122a6:	3504      	adds	r5, #4
 80122a8:	6063      	str	r3, [r4, #4]
 80122aa:	6806      	ldr	r6, [r0, #0]
 80122ac:	b1b6      	cbz	r6, 80122dc <_FlushBuffer.isra.5+0x64>
 80122ae:	69a2      	ldr	r2, [r4, #24]
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7ff fb14 	bl	80118de <GUI__CompactPixelIndices>
 80122b6:	2301      	movs	r3, #1
 80122b8:	68f2      	ldr	r2, [r6, #12]
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	69a3      	ldr	r3, [r4, #24]
 80122be:	9301      	str	r3, [sp, #4]
 80122c0:	9503      	str	r5, [sp, #12]
 80122c2:	6963      	ldr	r3, [r4, #20]
 80122c4:	9302      	str	r3, [sp, #8]
 80122c6:	2500      	movs	r5, #0
 80122c8:	9504      	str	r5, [sp, #16]
 80122ca:	9505      	str	r5, [sp, #20]
 80122cc:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80122d0:	68e3      	ldr	r3, [r4, #12]
 80122d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80122d4:	4630      	mov	r0, r6
 80122d6:	4639      	mov	r1, r7
 80122d8:	47e0      	blx	ip
 80122da:	e000      	b.n	80122de <_FlushBuffer.isra.5+0x66>
 80122dc:	2501      	movs	r5, #1
 80122de:	2300      	movs	r3, #0
 80122e0:	60e3      	str	r3, [r4, #12]
 80122e2:	b2e8      	uxtb	r0, r5
 80122e4:	e000      	b.n	80122e8 <_FlushBuffer.isra.5+0x70>
 80122e6:	4608      	mov	r0, r1
 80122e8:	b007      	add	sp, #28
 80122ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122ec <_SetBkIndexBuffered>:
 80122ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ee:	9c06      	ldr	r4, [sp, #24]
 80122f0:	460d      	mov	r5, r1
 80122f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80122f4:	428d      	cmp	r5, r1
 80122f6:	4606      	mov	r6, r0
 80122f8:	4617      	mov	r7, r2
 80122fa:	d105      	bne.n	8012308 <_SetBkIndexBuffered+0x1c>
 80122fc:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8012300:	6a21      	ldr	r1, [r4, #32]
 8012302:	4411      	add	r1, r2
 8012304:	4288      	cmp	r0, r1
 8012306:	d003      	beq.n	8012310 <_SetBkIndexBuffered+0x24>
 8012308:	4618      	mov	r0, r3
 801230a:	4621      	mov	r1, r4
 801230c:	f7ff ffb4 	bl	8012278 <_FlushBuffer.isra.5>
 8012310:	6863      	ldr	r3, [r4, #4]
 8012312:	601f      	str	r7, [r3, #0]
 8012314:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8012318:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801231c:	6063      	str	r3, [r4, #4]
 801231e:	68e3      	ldr	r3, [r4, #12]
 8012320:	b90b      	cbnz	r3, 8012326 <_SetBkIndexBuffered+0x3a>
 8012322:	62a6      	str	r6, [r4, #40]	; 0x28
 8012324:	62e5      	str	r5, [r4, #44]	; 0x2c
 8012326:	3301      	adds	r3, #1
 8012328:	60e3      	str	r3, [r4, #12]
 801232a:	6226      	str	r6, [r4, #32]
 801232c:	6265      	str	r5, [r4, #36]	; 0x24
 801232e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012330 <_ReleaseBuffer.isra.6>:
 8012330:	b513      	push	{r0, r1, r4, lr}
 8012332:	9101      	str	r1, [sp, #4]
 8012334:	f7ff ffa0 	bl	8012278 <_FlushBuffer.isra.5>
 8012338:	a802      	add	r0, sp, #8
 801233a:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 801233e:	6894      	ldr	r4, [r2, #8]
 8012340:	f7fc fbc4 	bl	800eacc <GUI_ALLOC_UnlockH>
 8012344:	4620      	mov	r0, r4
 8012346:	f7fc fbe1 	bl	800eb0c <GUI_ALLOC_Free>
 801234a:	b002      	add	sp, #8
 801234c:	bd10      	pop	{r4, pc}
	...

08012350 <GUI_SPRITE_SetPosition>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	b0a7      	sub	sp, #156	; 0x9c
 8012356:	9116      	str	r1, [sp, #88]	; 0x58
 8012358:	9217      	str	r2, [sp, #92]	; 0x5c
 801235a:	2800      	cmp	r0, #0
 801235c:	f000 8275 	beq.w	801284a <GUI_SPRITE_SetPosition+0x4fa>
 8012360:	f7fc fba6 	bl	800eab0 <GUI_ALLOC_LockH>
 8012364:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012366:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801236a:	6801      	ldr	r1, [r0, #0]
 801236c:	9023      	str	r0, [sp, #140]	; 0x8c
 801236e:	429a      	cmp	r2, r3
 8012370:	9106      	str	r1, [sp, #24]
 8012372:	d106      	bne.n	8012382 <GUI_SPRITE_SetPosition+0x32>
 8012374:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012378:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 801237c:	459e      	cmp	lr, r3
 801237e:	f000 8239 	beq.w	80127f4 <GUI_SPRITE_SetPosition+0x4a4>
 8012382:	2000      	movs	r0, #0
 8012384:	f7f8 f828 	bl	800a3d8 <GUI_MEMDEV_Select>
 8012388:	4ba0      	ldr	r3, [pc, #640]	; (801260c <GUI_SPRITE_SetPosition+0x2bc>)
 801238a:	9906      	ldr	r1, [sp, #24]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	6989      	ldr	r1, [r1, #24]
 8012390:	7c5a      	ldrb	r2, [r3, #17]
 8012392:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8012394:	9108      	str	r1, [sp, #32]
 8012396:	4291      	cmp	r1, r2
 8012398:	bf18      	it	ne
 801239a:	7459      	strbne	r1, [r3, #17]
 801239c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80123a0:	9310      	str	r3, [sp, #64]	; 0x40
 80123a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80123a6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80123aa:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80123ae:	921a      	str	r2, [sp, #104]	; 0x68
 80123b0:	ebce 0303 	rsb	r3, lr, r3
 80123b4:	1c59      	adds	r1, r3, #1
 80123b6:	9307      	str	r3, [sp, #28]
 80123b8:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80123bc:	901f      	str	r0, [sp, #124]	; 0x7c
 80123be:	1b9b      	subs	r3, r3, r6
 80123c0:	1c5a      	adds	r2, r3, #1
 80123c2:	930e      	str	r3, [sp, #56]	; 0x38
 80123c4:	8a2b      	ldrh	r3, [r5, #16]
 80123c6:	910d      	str	r1, [sp, #52]	; 0x34
 80123c8:	079b      	lsls	r3, r3, #30
 80123ca:	921e      	str	r2, [sp, #120]	; 0x78
 80123cc:	f140 81f7 	bpl.w	80127be <GUI_SPRITE_SetPosition+0x46e>
 80123d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80123d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80123d4:	696b      	ldr	r3, [r5, #20]
 80123d6:	9311      	str	r3, [sp, #68]	; 0x44
 80123d8:	ebce 0a01 	rsb	sl, lr, r1
 80123dc:	f1ba 0f00 	cmp.w	sl, #0
 80123e0:	ebc6 0902 	rsb	r9, r6, r2
 80123e4:	dc0c      	bgt.n	8012400 <GUI_SPRITE_SetPosition+0xb0>
 80123e6:	9b07      	ldr	r3, [sp, #28]
 80123e8:	930a      	str	r3, [sp, #40]	; 0x28
 80123ea:	469e      	mov	lr, r3
 80123ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123f0:	44d6      	add	lr, sl
 80123f2:	2100      	movs	r1, #0
 80123f4:	f8cd e01c 	str.w	lr, [sp, #28]
 80123f8:	911c      	str	r1, [sp, #112]	; 0x70
 80123fa:	9214      	str	r2, [sp, #80]	; 0x50
 80123fc:	9204      	str	r2, [sp, #16]
 80123fe:	e009      	b.n	8012414 <GUI_SPRITE_SetPosition+0xc4>
 8012400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012402:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 8012406:	f04f 0e01 	mov.w	lr, #1
 801240a:	2100      	movs	r1, #0
 801240c:	9314      	str	r3, [sp, #80]	; 0x50
 801240e:	f8cd e010 	str.w	lr, [sp, #16]
 8012412:	910a      	str	r1, [sp, #40]	; 0x28
 8012414:	f1b9 0f00 	cmp.w	r9, #0
 8012418:	dc0c      	bgt.n	8012434 <GUI_SPRITE_SetPosition+0xe4>
 801241a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801241c:	4622      	mov	r2, r4
 801241e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8012422:	444a      	add	r2, r9
 8012424:	2300      	movs	r3, #0
 8012426:	920e      	str	r2, [sp, #56]	; 0x38
 8012428:	931b      	str	r3, [sp, #108]	; 0x6c
 801242a:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 801242e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8012432:	e006      	b.n	8012442 <GUI_SPRITE_SetPosition+0xf2>
 8012434:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012436:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 801243a:	2301      	movs	r3, #1
 801243c:	9215      	str	r2, [sp, #84]	; 0x54
 801243e:	9309      	str	r3, [sp, #36]	; 0x24
 8012440:	2400      	movs	r4, #0
 8012442:	9806      	ldr	r0, [sp, #24]
 8012444:	a924      	add	r1, sp, #144	; 0x90
 8012446:	f7ff fefb 	bl	8012240 <_GetDeviceRect>
 801244a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801244c:	9904      	ldr	r1, [sp, #16]
 801244e:	f7ff fe29 	bl	80120a4 <_CreateBuffer>
 8012452:	9012      	str	r0, [sp, #72]	; 0x48
 8012454:	2800      	cmp	r0, #0
 8012456:	f000 81b2 	beq.w	80127be <GUI_SPRITE_SetPosition+0x46e>
 801245a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801245c:	9904      	ldr	r1, [sp, #16]
 801245e:	f7ff fe21 	bl	80120a4 <_CreateBuffer>
 8012462:	9013      	str	r0, [sp, #76]	; 0x4c
 8012464:	2800      	cmp	r0, #0
 8012466:	f000 81a5 	beq.w	80127b4 <GUI_SPRITE_SetPosition+0x464>
 801246a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801246c:	68d8      	ldr	r0, [r3, #12]
 801246e:	4426      	add	r6, r4
 8012470:	b990      	cbnz	r0, 8012498 <GUI_SPRITE_SetPosition+0x148>
 8012472:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8012476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801247a:	9019      	str	r0, [sp, #100]	; 0x64
 801247c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8012480:	434b      	muls	r3, r1
 8012482:	9321      	str	r3, [sp, #132]	; 0x84
 8012484:	fb0e 2304 	mla	r3, lr, r4, r2
 8012488:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801248c:	930c      	str	r3, [sp, #48]	; 0x30
 801248e:	9b04      	ldr	r3, [sp, #16]
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	444e      	add	r6, r9
 8012494:	9320      	str	r3, [sp, #128]	; 0x80
 8012496:	e0db      	b.n	8012650 <GUI_SPRITE_SetPosition+0x300>
 8012498:	f7fc fb0a 	bl	800eab0 <GUI_ALLOC_LockH>
 801249c:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80124a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124a4:	9022      	str	r0, [sp, #136]	; 0x88
 80124a6:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80124aa:	434b      	muls	r3, r1
 80124ac:	9319      	str	r3, [sp, #100]	; 0x64
 80124ae:	fb0e 2304 	mla	r3, lr, r4, r2
 80124b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80124b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80124b8:	9b04      	ldr	r3, [sp, #16]
 80124ba:	009b      	lsls	r3, r3, #2
 80124bc:	444e      	add	r6, r9
 80124be:	931d      	str	r3, [sp, #116]	; 0x74
 80124c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80124c2:	428c      	cmp	r4, r1
 80124c4:	f000 809e 	beq.w	8012604 <GUI_SPRITE_SetPosition+0x2b4>
 80124c8:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80124cc:	4574      	cmp	r4, lr
 80124ce:	db05      	blt.n	80124dc <GUI_SPRITE_SetPosition+0x18c>
 80124d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80124d2:	428c      	cmp	r4, r1
 80124d4:	bfcc      	ite	gt
 80124d6:	2300      	movgt	r3, #0
 80124d8:	2301      	movle	r3, #1
 80124da:	e000      	b.n	80124de <GUI_SPRITE_SetPosition+0x18e>
 80124dc:	2300      	movs	r3, #0
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	9318      	str	r3, [sp, #96]	; 0x60
 80124e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80124e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80124e8:	9105      	str	r1, [sp, #20]
 80124ea:	ebc9 0206 	rsb	r2, r9, r6
 80124ee:	441f      	add	r7, r3
 80124f0:	920c      	str	r2, [sp, #48]	; 0x30
 80124f2:	4457      	add	r7, sl
 80124f4:	461d      	mov	r5, r3
 80124f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80124f8:	428d      	cmp	r5, r1
 80124fa:	d07a      	beq.n	80125f2 <GUI_SPRITE_SetPosition+0x2a2>
 80124fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80124fe:	4629      	mov	r1, r5
 8012500:	4622      	mov	r2, r4
 8012502:	f000 f9eb 	bl	80128dc <GUI_GetBitmapPixelIndex>
 8012506:	900f      	str	r0, [sp, #60]	; 0x3c
 8012508:	2800      	cmp	r0, #0
 801250a:	d069      	beq.n	80125e0 <GUI_SPRITE_SetPosition+0x290>
 801250c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801250e:	4295      	cmp	r5, r2
 8012510:	ebca 0c07 	rsb	ip, sl, r7
 8012514:	db07      	blt.n	8012526 <GUI_SPRITE_SetPosition+0x1d6>
 8012516:	9b07      	ldr	r3, [sp, #28]
 8012518:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801251c:	429d      	cmp	r5, r3
 801251e:	bfc8      	it	gt
 8012520:	f04f 0b00 	movgt.w	fp, #0
 8012524:	e001      	b.n	801252a <GUI_SPRITE_SetPosition+0x1da>
 8012526:	f04f 0b00 	mov.w	fp, #0
 801252a:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801252e:	429f      	cmp	r7, r3
 8012530:	fa5f fb8b 	uxtb.w	fp, fp
 8012534:	db17      	blt.n	8012566 <GUI_SPRITE_SetPosition+0x216>
 8012536:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801253a:	429e      	cmp	r6, r3
 801253c:	db13      	blt.n	8012566 <GUI_SPRITE_SetPosition+0x216>
 801253e:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012542:	429f      	cmp	r7, r3
 8012544:	dc0f      	bgt.n	8012566 <GUI_SPRITE_SetPosition+0x216>
 8012546:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801254a:	429e      	cmp	r6, r3
 801254c:	dc0b      	bgt.n	8012566 <GUI_SPRITE_SetPosition+0x216>
 801254e:	4638      	mov	r0, r7
 8012550:	4631      	mov	r1, r6
 8012552:	9a06      	ldr	r2, [sp, #24]
 8012554:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012556:	f8cd c00c 	str.w	ip, [sp, #12]
 801255a:	f7ff fdf8 	bl	801214e <_GetBkIndex.isra.0>
 801255e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012562:	4680      	mov	r8, r0
 8012564:	e001      	b.n	801256a <GUI_SPRITE_SetPosition+0x21a>
 8012566:	f04f 0800 	mov.w	r8, #0
 801256a:	f1bb 0f00 	cmp.w	fp, #0
 801256e:	d00d      	beq.n	801258c <GUI_SPRITE_SetPosition+0x23c>
 8012570:	ebb5 010a 	subs.w	r1, r5, sl
 8012574:	d415      	bmi.n	80125a2 <GUI_SPRITE_SetPosition+0x252>
 8012576:	ebb4 0209 	subs.w	r2, r4, r9
 801257a:	d412      	bmi.n	80125a2 <GUI_SPRITE_SetPosition+0x252>
 801257c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801257e:	f8cd c00c 	str.w	ip, [sp, #12]
 8012582:	f000 f9ab 	bl	80128dc <GUI_GetBitmapPixelIndex>
 8012586:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801258a:	b950      	cbnz	r0, 80125a2 <GUI_SPRITE_SetPosition+0x252>
 801258c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012590:	459c      	cmp	ip, r3
 8012592:	db06      	blt.n	80125a2 <GUI_SPRITE_SetPosition+0x252>
 8012594:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012598:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 801259c:	459e      	cmp	lr, r3
 801259e:	f280 812d 	bge.w	80127fc <GUI_SPRITE_SetPosition+0x4ac>
 80125a2:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80125a6:	429f      	cmp	r7, r3
 80125a8:	db17      	blt.n	80125da <GUI_SPRITE_SetPosition+0x28a>
 80125aa:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80125ae:	429e      	cmp	r6, r3
 80125b0:	db13      	blt.n	80125da <GUI_SPRITE_SetPosition+0x28a>
 80125b2:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80125b6:	429f      	cmp	r7, r3
 80125b8:	dc0f      	bgt.n	80125da <GUI_SPRITE_SetPosition+0x28a>
 80125ba:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80125be:	429e      	cmp	r6, r3
 80125c0:	dc0b      	bgt.n	80125da <GUI_SPRITE_SetPosition+0x28a>
 80125c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80125c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80125c6:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 80125ca:	9100      	str	r1, [sp, #0]
 80125cc:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 80125d0:	9b06      	ldr	r3, [sp, #24]
 80125d2:	4638      	mov	r0, r7
 80125d4:	4631      	mov	r1, r6
 80125d6:	f7ff fe89 	bl	80122ec <_SetBkIndexBuffered>
 80125da:	9905      	ldr	r1, [sp, #20]
 80125dc:	f8c1 8020 	str.w	r8, [r1, #32]
 80125e0:	9b05      	ldr	r3, [sp, #20]
 80125e2:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 80125e6:	9a04      	ldr	r2, [sp, #16]
 80125e8:	4473      	add	r3, lr
 80125ea:	4415      	add	r5, r2
 80125ec:	9305      	str	r3, [sp, #20]
 80125ee:	4417      	add	r7, r2
 80125f0:	e781      	b.n	80124f6 <GUI_SPRITE_SetPosition+0x1a6>
 80125f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125f4:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 80125f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125fa:	4473      	add	r3, lr
 80125fc:	4414      	add	r4, r2
 80125fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012600:	4416      	add	r6, r2
 8012602:	e75d      	b.n	80124c0 <GUI_SPRITE_SetPosition+0x170>
 8012604:	a822      	add	r0, sp, #136	; 0x88
 8012606:	f7fc fa61 	bl	800eacc <GUI_ALLOC_UnlockH>
 801260a:	e0ce      	b.n	80127aa <GUI_SPRITE_SetPosition+0x45a>
 801260c:	20000038 	.word	0x20000038
 8012610:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012612:	4294      	cmp	r4, r2
 8012614:	db20      	blt.n	8012658 <GUI_SPRITE_SetPosition+0x308>
 8012616:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 801261a:	4574      	cmp	r4, lr
 801261c:	bfcc      	ite	gt
 801261e:	2300      	movgt	r3, #0
 8012620:	2301      	movle	r3, #1
 8012622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012624:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012626:	b2db      	uxtb	r3, r3
 8012628:	931d      	str	r3, [sp, #116]	; 0x74
 801262a:	ebc9 0106 	rsb	r1, r9, r6
 801262e:	4417      	add	r7, r2
 8012630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012632:	910f      	str	r1, [sp, #60]	; 0x3c
 8012634:	4457      	add	r7, sl
 8012636:	9305      	str	r3, [sp, #20]
 8012638:	4615      	mov	r5, r2
 801263a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801263c:	428d      	cmp	r5, r1
 801263e:	d10d      	bne.n	801265c <GUI_SPRITE_SetPosition+0x30c>
 8012640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012642:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 8012646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012648:	4473      	add	r3, lr
 801264a:	4414      	add	r4, r2
 801264c:	930c      	str	r3, [sp, #48]	; 0x30
 801264e:	4416      	add	r6, r2
 8012650:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012652:	428c      	cmp	r4, r1
 8012654:	d1dc      	bne.n	8012610 <GUI_SPRITE_SetPosition+0x2c0>
 8012656:	e0a8      	b.n	80127aa <GUI_SPRITE_SetPosition+0x45a>
 8012658:	2300      	movs	r3, #0
 801265a:	e7e2      	b.n	8012622 <GUI_SPRITE_SetPosition+0x2d2>
 801265c:	4629      	mov	r1, r5
 801265e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012660:	4622      	mov	r2, r4
 8012662:	f000 f93b 	bl	80128dc <GUI_GetBitmapPixelIndex>
 8012666:	0e01      	lsrs	r1, r0, #24
 8012668:	29ff      	cmp	r1, #255	; 0xff
 801266a:	9018      	str	r0, [sp, #96]	; 0x60
 801266c:	910b      	str	r1, [sp, #44]	; 0x2c
 801266e:	f000 8093 	beq.w	8012798 <GUI_SPRITE_SetPosition+0x448>
 8012672:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012674:	4295      	cmp	r5, r2
 8012676:	ebca 0c07 	rsb	ip, sl, r7
 801267a:	db07      	blt.n	801268c <GUI_SPRITE_SetPosition+0x33c>
 801267c:	9b07      	ldr	r3, [sp, #28]
 801267e:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8012682:	429d      	cmp	r5, r3
 8012684:	bfc8      	it	gt
 8012686:	f04f 0b00 	movgt.w	fp, #0
 801268a:	e001      	b.n	8012690 <GUI_SPRITE_SetPosition+0x340>
 801268c:	f04f 0b00 	mov.w	fp, #0
 8012690:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012694:	429f      	cmp	r7, r3
 8012696:	fa5f fb8b 	uxtb.w	fp, fp
 801269a:	db22      	blt.n	80126e2 <GUI_SPRITE_SetPosition+0x392>
 801269c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80126a0:	429e      	cmp	r6, r3
 80126a2:	db1e      	blt.n	80126e2 <GUI_SPRITE_SetPosition+0x392>
 80126a4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80126a8:	429f      	cmp	r7, r3
 80126aa:	dc1a      	bgt.n	80126e2 <GUI_SPRITE_SetPosition+0x392>
 80126ac:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80126b0:	429e      	cmp	r6, r3
 80126b2:	dc16      	bgt.n	80126e2 <GUI_SPRITE_SetPosition+0x392>
 80126b4:	4631      	mov	r1, r6
 80126b6:	9a06      	ldr	r2, [sp, #24]
 80126b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80126ba:	f8cd c00c 	str.w	ip, [sp, #12]
 80126be:	4638      	mov	r0, r7
 80126c0:	f7ff fd7f 	bl	80121c2 <_GetBkIndexAlpha.isra.2>
 80126c4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80126c8:	4b61      	ldr	r3, [pc, #388]	; (8012850 <GUI_SPRITE_SetPosition+0x500>)
 80126ca:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 80126ce:	691b      	ldr	r3, [r3, #16]
 80126d0:	4680      	mov	r8, r0
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80126d8:	4798      	blx	r3
 80126da:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80126de:	9019      	str	r0, [sp, #100]	; 0x64
 80126e0:	e001      	b.n	80126e6 <GUI_SPRITE_SetPosition+0x396>
 80126e2:	f04f 0800 	mov.w	r8, #0
 80126e6:	f1bb 0f00 	cmp.w	fp, #0
 80126ea:	d00f      	beq.n	801270c <GUI_SPRITE_SetPosition+0x3bc>
 80126ec:	ebb5 010a 	subs.w	r1, r5, sl
 80126f0:	d416      	bmi.n	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 80126f2:	ebb4 0209 	subs.w	r2, r4, r9
 80126f6:	d413      	bmi.n	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 80126f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80126fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80126fe:	f000 f8ed 	bl	80128dc <GUI_GetBitmapPixelIndex>
 8012702:	0e00      	lsrs	r0, r0, #24
 8012704:	28ff      	cmp	r0, #255	; 0xff
 8012706:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801270a:	d109      	bne.n	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 801270c:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012710:	459c      	cmp	ip, r3
 8012712:	db05      	blt.n	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 8012714:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012718:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801271a:	4299      	cmp	r1, r3
 801271c:	f280 8082 	bge.w	8012824 <GUI_SPRITE_SetPosition+0x4d4>
 8012720:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012724:	429f      	cmp	r7, r3
 8012726:	db34      	blt.n	8012792 <GUI_SPRITE_SetPosition+0x442>
 8012728:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 801272c:	429e      	cmp	r6, r3
 801272e:	db30      	blt.n	8012792 <GUI_SPRITE_SetPosition+0x442>
 8012730:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012734:	429f      	cmp	r7, r3
 8012736:	dc2c      	bgt.n	8012792 <GUI_SPRITE_SetPosition+0x442>
 8012738:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801273c:	429e      	cmp	r6, r3
 801273e:	dc28      	bgt.n	8012792 <GUI_SPRITE_SetPosition+0x442>
 8012740:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8012744:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012746:	f8df b108 	ldr.w	fp, [pc, #264]	; 8012850 <GUI_SPRITE_SetPosition+0x500>
 801274a:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 801274e:	b191      	cbz	r1, 8012776 <GUI_SPRITE_SetPosition+0x426>
 8012750:	9a08      	ldr	r2, [sp, #32]
 8012752:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 8012756:	691b      	ldr	r3, [r3, #16]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	4798      	blx	r3
 801275c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801275e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012760:	43da      	mvns	r2, r3
 8012762:	b2d2      	uxtb	r2, r2
 8012764:	f7f9 fb44 	bl	800bdf0 <GUI__MixColors>
 8012768:	f8dd e020 	ldr.w	lr, [sp, #32]
 801276c:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 8012770:	691b      	ldr	r3, [r3, #16]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	e004      	b.n	8012780 <GUI_SPRITE_SetPosition+0x430>
 8012776:	9908      	ldr	r1, [sp, #32]
 8012778:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 801277c:	691b      	ldr	r3, [r3, #16]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	4798      	blx	r3
 8012782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012784:	9300      	str	r3, [sp, #0]
 8012786:	4602      	mov	r2, r0
 8012788:	4631      	mov	r1, r6
 801278a:	4638      	mov	r0, r7
 801278c:	9b06      	ldr	r3, [sp, #24]
 801278e:	f7ff fdad 	bl	80122ec <_SetBkIndexBuffered>
 8012792:	9905      	ldr	r1, [sp, #20]
 8012794:	f8c1 8020 	str.w	r8, [r1, #32]
 8012798:	9b05      	ldr	r3, [sp, #20]
 801279a:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 801279e:	9a04      	ldr	r2, [sp, #16]
 80127a0:	4473      	add	r3, lr
 80127a2:	4415      	add	r5, r2
 80127a4:	9305      	str	r3, [sp, #20]
 80127a6:	4417      	add	r7, r2
 80127a8:	e747      	b.n	801263a <GUI_SPRITE_SetPosition+0x2ea>
 80127aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80127ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80127ae:	6818      	ldr	r0, [r3, #0]
 80127b0:	f7ff fdbe 	bl	8012330 <_ReleaseBuffer.isra.6>
 80127b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80127b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80127b8:	6818      	ldr	r0, [r3, #0]
 80127ba:	f7ff fdb9 	bl	8012330 <_ReleaseBuffer.isra.6>
 80127be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80127c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80127c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80127c4:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80127c8:	809a      	strh	r2, [r3, #4]
 80127ca:	440a      	add	r2, r1
 80127cc:	3a01      	subs	r2, #1
 80127ce:	f8a3 e006 	strh.w	lr, [r3, #6]
 80127d2:	811a      	strh	r2, [r3, #8]
 80127d4:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 80127d8:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 80127dc:	9908      	ldr	r1, [sp, #32]
 80127de:	4472      	add	r2, lr
 80127e0:	815a      	strh	r2, [r3, #10]
 80127e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80127e4:	4291      	cmp	r1, r2
 80127e6:	d002      	beq.n	80127ee <GUI_SPRITE_SetPosition+0x49e>
 80127e8:	4b1a      	ldr	r3, [pc, #104]	; (8012854 <GUI_SPRITE_SetPosition+0x504>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	745a      	strb	r2, [r3, #17]
 80127ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80127f0:	f7f7 fdf2 	bl	800a3d8 <GUI_MEMDEV_Select>
 80127f4:	a823      	add	r0, sp, #140	; 0x8c
 80127f6:	f7fc f969 	bl	800eacc <GUI_ALLOC_UnlockH>
 80127fa:	e026      	b.n	801284a <GUI_SPRITE_SetPosition+0x4fa>
 80127fc:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012800:	459c      	cmp	ip, r3
 8012802:	f73f aece 	bgt.w	80125a2 <GUI_SPRITE_SetPosition+0x252>
 8012806:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 801280a:	459e      	cmp	lr, r3
 801280c:	f73f aec9 	bgt.w	80125a2 <GUI_SPRITE_SetPosition+0x252>
 8012810:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012812:	9b05      	ldr	r3, [sp, #20]
 8012814:	9100      	str	r1, [sp, #0]
 8012816:	6a1a      	ldr	r2, [r3, #32]
 8012818:	9b06      	ldr	r3, [sp, #24]
 801281a:	4660      	mov	r0, ip
 801281c:	4671      	mov	r1, lr
 801281e:	f7ff fd65 	bl	80122ec <_SetBkIndexBuffered>
 8012822:	e6be      	b.n	80125a2 <GUI_SPRITE_SetPosition+0x252>
 8012824:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012828:	459c      	cmp	ip, r3
 801282a:	f73f af79 	bgt.w	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 801282e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012832:	4299      	cmp	r1, r3
 8012834:	f73f af74 	bgt.w	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 8012838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801283a:	9b05      	ldr	r3, [sp, #20]
 801283c:	9200      	str	r2, [sp, #0]
 801283e:	6a1a      	ldr	r2, [r3, #32]
 8012840:	9b06      	ldr	r3, [sp, #24]
 8012842:	4660      	mov	r0, ip
 8012844:	f7ff fd52 	bl	80122ec <_SetBkIndexBuffered>
 8012848:	e76a      	b.n	8012720 <GUI_SPRITE_SetPosition+0x3d0>
 801284a:	b027      	add	sp, #156	; 0x9c
 801284c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012850:	20023074 	.word	0x20023074
 8012854:	20000038 	.word	0x20000038

08012858 <GUI_GetBitmapPixelIndexEx>:
 8012858:	b510      	push	{r4, lr}
 801285a:	2804      	cmp	r0, #4
 801285c:	9c02      	ldr	r4, [sp, #8]
 801285e:	d025      	beq.n	80128ac <GUI_GetBitmapPixelIndexEx+0x54>
 8012860:	dc0f      	bgt.n	8012882 <GUI_GetBitmapPixelIndexEx+0x2a>
 8012862:	2801      	cmp	r0, #1
 8012864:	d017      	beq.n	8012896 <GUI_GetBitmapPixelIndexEx+0x3e>
 8012866:	2802      	cmp	r0, #2
 8012868:	d136      	bne.n	80128d8 <GUI_GetBitmapPixelIndexEx+0x80>
 801286a:	0898      	lsrs	r0, r3, #2
 801286c:	fb04 2101 	mla	r1, r4, r1, r2
 8012870:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8012874:	5c08      	ldrb	r0, [r1, r0]
 8012876:	f003 0306 	and.w	r3, r3, #6
 801287a:	40d8      	lsrs	r0, r3
 801287c:	f000 0003 	and.w	r0, r0, #3
 8012880:	bd10      	pop	{r4, pc}
 8012882:	2810      	cmp	r0, #16
 8012884:	d01c      	beq.n	80128c0 <GUI_GetBitmapPixelIndexEx+0x68>
 8012886:	2820      	cmp	r0, #32
 8012888:	d020      	beq.n	80128cc <GUI_GetBitmapPixelIndexEx+0x74>
 801288a:	2808      	cmp	r0, #8
 801288c:	d124      	bne.n	80128d8 <GUI_GetBitmapPixelIndexEx+0x80>
 801288e:	fb04 2101 	mla	r1, r4, r1, r2
 8012892:	5cc8      	ldrb	r0, [r1, r3]
 8012894:	bd10      	pop	{r4, pc}
 8012896:	08d8      	lsrs	r0, r3, #3
 8012898:	fb04 2101 	mla	r1, r4, r1, r2
 801289c:	43db      	mvns	r3, r3
 801289e:	5c08      	ldrb	r0, [r1, r0]
 80128a0:	f003 0307 	and.w	r3, r3, #7
 80128a4:	40d8      	lsrs	r0, r3
 80128a6:	f000 0001 	and.w	r0, r0, #1
 80128aa:	bd10      	pop	{r4, pc}
 80128ac:	0858      	lsrs	r0, r3, #1
 80128ae:	fb04 2101 	mla	r1, r4, r1, r2
 80128b2:	07db      	lsls	r3, r3, #31
 80128b4:	5c08      	ldrb	r0, [r1, r0]
 80128b6:	bf4c      	ite	mi
 80128b8:	f000 000f 	andmi.w	r0, r0, #15
 80128bc:	0900      	lsrpl	r0, r0, #4
 80128be:	bd10      	pop	{r4, pc}
 80128c0:	1049      	asrs	r1, r1, #1
 80128c2:	fb04 3301 	mla	r3, r4, r1, r3
 80128c6:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80128ca:	bd10      	pop	{r4, pc}
 80128cc:	1089      	asrs	r1, r1, #2
 80128ce:	fb04 3301 	mla	r3, r4, r1, r3
 80128d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80128d6:	bd10      	pop	{r4, pc}
 80128d8:	2000      	movs	r0, #0
 80128da:	bd10      	pop	{r4, pc}

080128dc <GUI_GetBitmapPixelIndex>:
 80128dc:	b513      	push	{r0, r1, r4, lr}
 80128de:	460b      	mov	r3, r1
 80128e0:	4604      	mov	r4, r0
 80128e2:	b130      	cbz	r0, 80128f2 <GUI_GetBitmapPixelIndex+0x16>
 80128e4:	88c0      	ldrh	r0, [r0, #6]
 80128e6:	88a1      	ldrh	r1, [r4, #4]
 80128e8:	9200      	str	r2, [sp, #0]
 80128ea:	68a2      	ldr	r2, [r4, #8]
 80128ec:	f7ff ffb4 	bl	8012858 <GUI_GetBitmapPixelIndexEx>
 80128f0:	e7ff      	b.n	80128f2 <GUI_GetBitmapPixelIndex+0x16>
 80128f2:	b002      	add	sp, #8
 80128f4:	bd10      	pop	{r4, pc}
	...

080128f8 <__libc_init_array>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	4e0d      	ldr	r6, [pc, #52]	; (8012930 <__libc_init_array+0x38>)
 80128fc:	4c0d      	ldr	r4, [pc, #52]	; (8012934 <__libc_init_array+0x3c>)
 80128fe:	1ba4      	subs	r4, r4, r6
 8012900:	10a4      	asrs	r4, r4, #2
 8012902:	2500      	movs	r5, #0
 8012904:	42a5      	cmp	r5, r4
 8012906:	d109      	bne.n	801291c <__libc_init_array+0x24>
 8012908:	4e0b      	ldr	r6, [pc, #44]	; (8012938 <__libc_init_array+0x40>)
 801290a:	4c0c      	ldr	r4, [pc, #48]	; (801293c <__libc_init_array+0x44>)
 801290c:	f000 f854 	bl	80129b8 <_init>
 8012910:	1ba4      	subs	r4, r4, r6
 8012912:	10a4      	asrs	r4, r4, #2
 8012914:	2500      	movs	r5, #0
 8012916:	42a5      	cmp	r5, r4
 8012918:	d105      	bne.n	8012926 <__libc_init_array+0x2e>
 801291a:	bd70      	pop	{r4, r5, r6, pc}
 801291c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012920:	4798      	blx	r3
 8012922:	3501      	adds	r5, #1
 8012924:	e7ee      	b.n	8012904 <__libc_init_array+0xc>
 8012926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801292a:	4798      	blx	r3
 801292c:	3501      	adds	r5, #1
 801292e:	e7f2      	b.n	8012916 <__libc_init_array+0x1e>
 8012930:	080144bc 	.word	0x080144bc
 8012934:	080144bc 	.word	0x080144bc
 8012938:	080144bc 	.word	0x080144bc
 801293c:	080144c0 	.word	0x080144c0

08012940 <memcmp>:
 8012940:	b510      	push	{r4, lr}
 8012942:	3901      	subs	r1, #1
 8012944:	4402      	add	r2, r0
 8012946:	4290      	cmp	r0, r2
 8012948:	d101      	bne.n	801294e <memcmp+0xe>
 801294a:	2000      	movs	r0, #0
 801294c:	bd10      	pop	{r4, pc}
 801294e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012952:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012956:	42a3      	cmp	r3, r4
 8012958:	d0f5      	beq.n	8012946 <memcmp+0x6>
 801295a:	1b18      	subs	r0, r3, r4
 801295c:	bd10      	pop	{r4, pc}

0801295e <memcpy>:
 801295e:	b510      	push	{r4, lr}
 8012960:	1e43      	subs	r3, r0, #1
 8012962:	440a      	add	r2, r1
 8012964:	4291      	cmp	r1, r2
 8012966:	d100      	bne.n	801296a <memcpy+0xc>
 8012968:	bd10      	pop	{r4, pc}
 801296a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801296e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012972:	e7f7      	b.n	8012964 <memcpy+0x6>

08012974 <memmove>:
 8012974:	4288      	cmp	r0, r1
 8012976:	b510      	push	{r4, lr}
 8012978:	eb01 0302 	add.w	r3, r1, r2
 801297c:	d803      	bhi.n	8012986 <memmove+0x12>
 801297e:	1e42      	subs	r2, r0, #1
 8012980:	4299      	cmp	r1, r3
 8012982:	d10c      	bne.n	801299e <memmove+0x2a>
 8012984:	bd10      	pop	{r4, pc}
 8012986:	4298      	cmp	r0, r3
 8012988:	d2f9      	bcs.n	801297e <memmove+0xa>
 801298a:	1881      	adds	r1, r0, r2
 801298c:	1ad2      	subs	r2, r2, r3
 801298e:	42d3      	cmn	r3, r2
 8012990:	d100      	bne.n	8012994 <memmove+0x20>
 8012992:	bd10      	pop	{r4, pc}
 8012994:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012998:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801299c:	e7f7      	b.n	801298e <memmove+0x1a>
 801299e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80129a6:	e7eb      	b.n	8012980 <memmove+0xc>

080129a8 <memset>:
 80129a8:	4402      	add	r2, r0
 80129aa:	4603      	mov	r3, r0
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d100      	bne.n	80129b2 <memset+0xa>
 80129b0:	4770      	bx	lr
 80129b2:	f803 1b01 	strb.w	r1, [r3], #1
 80129b6:	e7f9      	b.n	80129ac <memset+0x4>

080129b8 <_init>:
 80129b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ba:	bf00      	nop
 80129bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129be:	bc08      	pop	{r3}
 80129c0:	469e      	mov	lr, r3
 80129c2:	4770      	bx	lr

080129c4 <_fini>:
 80129c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c6:	bf00      	nop
 80129c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ca:	bc08      	pop	{r3}
 80129cc:	469e      	mov	lr, r3
 80129ce:	4770      	bx	lr
