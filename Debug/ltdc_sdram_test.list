
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001afc  08012cd8  08012cd8  00022cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080147d4  080147d4  000247d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080147dc  080147dc  000247dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080147e0  080147e0  000247e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000048  20000000  080147e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030048  2**0
                  CONTENTS
  8 .bss          00026dfc  20000048  20000048  00030048  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20026e44  20026e44  00030048  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030048  2**0
                  CONTENTS, READONLY
 11 .debug_info   000379d7  00000000  00000000  00030076  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004f43  00000000  00000000  00067a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001af0  00000000  00000000  0006c990  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000018e8  00000000  00000000  0006e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d106  00000000  00000000  0006fd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a469  00000000  00000000  0007ce6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000fe  00000000  00000000  000872d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000712c  00000000  00000000  000873d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000048 	.word	0x20000048
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012cc0 	.word	0x08012cc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000004c 	.word	0x2000004c
 80001ec:	08012cc0 	.word	0x08012cc0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f961 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	200f      	movs	r0, #15
 8000530:	f000 f808 	bl	8000544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f009 f97c 	bl	8009830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <HAL_InitTick+0x54>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x58>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4619      	mov	r1, r3
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	fbb3 f3f1 	udiv	r3, r3, r1
 800055e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f987 	bl	8000876 <HAL_SYSTICK_Config>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
 8000570:	e00e      	b.n	8000590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d80a      	bhi.n	800058e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000580:	f000 f941 	bl	8000806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_InitTick+0x5c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	e000      	b.n	8000590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000014 	.word	0x20000014
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000000 	.word	0x20000000

080005a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x20>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x24>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_IncTick+0x24>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004
 80005c8:	200269d8 	.word	0x200269d8

080005cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <HAL_GetTick+0x14>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200269d8 	.word	0x200269d8

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005ec:	f7ff ffee 	bl	80005cc <HAL_GetTick>
 80005f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005fc:	d005      	beq.n	800060a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_Delay+0x40>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	4413      	add	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060a:	bf00      	nop
 800060c:	f7ff ffde 	bl	80005cc <HAL_GetTick>
 8000610:	4602      	mov	r2, r0
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3f7      	bcc.n	800060c <HAL_Delay+0x28>
  {
  }
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000004 	.word	0x20000004

08000628 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000696:	4909      	ldr	r1, [pc, #36]	; (80006bc <NVIC_EnableIRQ+0x30>)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	095b      	lsrs	r3, r3, #5
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	f002 021f 	and.w	r2, r2, #31
 80006a4:	2001      	movs	r0, #1
 80006a6:	fa00 f202 	lsl.w	r2, r0, r2
 80006aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <NVIC_DisableIRQ+0x30>)
 80006cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d0:	095b      	lsrs	r3, r3, #5
 80006d2:	79fa      	ldrb	r2, [r7, #7]
 80006d4:	f002 021f 	and.w	r2, r2, #31
 80006d8:	2001      	movs	r0, #1
 80006da:	fa00 f202 	lsl.w	r2, r0, r2
 80006de:	3320      	adds	r3, #32
 80006e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	da0b      	bge.n	8000720 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	490d      	ldr	r1, [pc, #52]	; (8000740 <NVIC_SetPriority+0x4c>)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	3b04      	subs	r3, #4
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071e:	e009      	b.n	8000734 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	4908      	ldr	r1, [pc, #32]	; (8000744 <NVIC_SetPriority+0x50>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00
 8000744:	e000e100 	.word	0xe000e100

08000748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000748:	b480      	push	{r7}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	f1c3 0307 	rsb	r3, r3, #7
 8000762:	2b04      	cmp	r3, #4
 8000764:	bf28      	it	cs
 8000766:	2304      	movcs	r3, #4
 8000768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3304      	adds	r3, #4
 800076e:	2b06      	cmp	r3, #6
 8000770:	d902      	bls.n	8000778 <NVIC_EncodePriority+0x30>
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3b03      	subs	r3, #3
 8000776:	e000      	b.n	800077a <NVIC_EncodePriority+0x32>
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	2201      	movs	r2, #1
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	401a      	ands	r2, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078e:	2101      	movs	r1, #1
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	1e59      	subs	r1, r3, #1
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4313      	orrs	r3, r2
         );
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	; 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007bc:	d301      	bcc.n	80007c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007be:	2301      	movs	r3, #1
 80007c0:	e00f      	b.n	80007e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <SysTick_Config+0x40>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ca:	210f      	movs	r1, #15
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SysTick_Config+0x40>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <SysTick_Config+0x40>)
 80007dc:	2207      	movs	r2, #7
 80007de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	e000e010 	.word	0xe000e010

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff15 	bl	8000628 <NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff2a 	bl	8000670 <NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ff90 	bl	8000748 <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff5f 	bl	80006f4 <NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff1d 	bl	800068c <NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff29 	bl	80006c0 <NVIC_DisableIRQ>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff94 	bl	80007ac <SysTick_Config>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800089c:	f7ff fe96 	bl	80005cc <HAL_GetTick>
 80008a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e099      	b.n	80009e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2202      	movs	r2, #2
 80008b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	f022 0201 	bic.w	r2, r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008cc:	e00f      	b.n	80008ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008ce:	f7ff fe7d 	bl	80005cc <HAL_GetTick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	1ad3      	subs	r3, r2, r3
 80008d8:	2b05      	cmp	r3, #5
 80008da:	d908      	bls.n	80008ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2220      	movs	r2, #32
 80008e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2203      	movs	r2, #3
 80008e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008ea:	2303      	movs	r3, #3
 80008ec:	e078      	b.n	80009e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1e8      	bne.n	80008ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <HAL_DMA_Init+0x158>)
 8000908:	4013      	ands	r3, r2
 800090a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800091a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a1b      	ldr	r3, [r3, #32]
 8000938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4313      	orrs	r3, r2
 800093e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000944:	2b04      	cmp	r3, #4
 8000946:	d107      	bne.n	8000958 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4313      	orrs	r3, r2
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	4313      	orrs	r3, r2
 8000956:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f023 0307 	bic.w	r3, r3, #7
 800096e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	4313      	orrs	r3, r2
 8000978:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097e:	2b04      	cmp	r3, #4
 8000980:	d117      	bne.n	80009b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	4313      	orrs	r3, r2
 800098a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000990:	2b00      	cmp	r3, #0
 8000992:	d00e      	beq.n	80009b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f9e9 	bl	8000d6c <DMA_CheckFifoParam>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009ae:	2301      	movs	r3, #1
 80009b0:	e016      	b.n	80009e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	697a      	ldr	r2, [r7, #20]
 80009b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f9a0 	bl	8000d00 <DMA_CalcBaseAndBitshift>
 80009c0:	4603      	mov	r3, r0
 80009c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c8:	223f      	movs	r2, #63	; 0x3f
 80009ca:	409a      	lsls	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	f010803f 	.word	0xf010803f

080009ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80009f8:	4b92      	ldr	r3, [pc, #584]	; (8000c44 <HAL_DMA_IRQHandler+0x258>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a92      	ldr	r2, [pc, #584]	; (8000c48 <HAL_DMA_IRQHandler+0x25c>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0a9b      	lsrs	r3, r3, #10
 8000a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a16:	2208      	movs	r2, #8
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d01a      	beq.n	8000a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d013      	beq.n	8000a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	f022 0204 	bic.w	r2, r2, #4
 8000a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a44:	2208      	movs	r2, #8
 8000a46:	409a      	lsls	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d012      	beq.n	8000a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00b      	beq.n	8000a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a86:	f043 0202 	orr.w	r2, r3, #2
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a92:	2204      	movs	r2, #4
 8000a94:	409a      	lsls	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d012      	beq.n	8000ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00b      	beq.n	8000ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000abc:	f043 0204 	orr.w	r2, r3, #4
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac8:	2210      	movs	r2, #16
 8000aca:	409a      	lsls	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d043      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d03c      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d018      	beq.n	8000b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d108      	bne.n	8000b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d024      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	4798      	blx	r3
 8000b1a:	e01f      	b.n	8000b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d01b      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	4798      	blx	r3
 8000b2c:	e016      	b.n	8000b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d107      	bne.n	8000b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	f022 0208 	bic.w	r2, r2, #8
 8000b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b60:	2220      	movs	r2, #32
 8000b62:	409a      	lsls	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 808e 	beq.w	8000c8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 8086 	beq.w	8000c8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b82:	2220      	movs	r2, #32
 8000b84:	409a      	lsls	r2, r3
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	d136      	bne.n	8000c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	6812      	ldr	r2, [r2, #0]
 8000ba0:	f022 0216 	bic.w	r2, r2, #22
 8000ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	6952      	ldr	r2, [r2, #20]
 8000bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <HAL_DMA_IRQHandler+0x1da>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	6812      	ldr	r2, [r2, #0]
 8000bd0:	f022 0208 	bic.w	r2, r2, #8
 8000bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bda:	223f      	movs	r2, #63	; 0x3f
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d07d      	beq.n	8000cf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	4798      	blx	r3
        }
        return;
 8000c02:	e078      	b.n	8000cf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01c      	beq.n	8000c4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d108      	bne.n	8000c32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d030      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	4798      	blx	r3
 8000c30:	e02b      	b.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d027      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	4798      	blx	r3
 8000c42:	e022      	b.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
 8000c44:	20000014 	.word	0x20000014
 8000c48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10f      	bne.n	8000c7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	6812      	ldr	r2, [r2, #0]
 8000c62:	6812      	ldr	r2, [r2, #0]
 8000c64:	f022 0210 	bic.w	r2, r2, #16
 8000c68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d032      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d022      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d807      	bhi.n	8000cd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1f2      	bne.n	8000cb6 <HAL_DMA_IRQHandler+0x2ca>
 8000cd0:	e000      	b.n	8000cd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000cd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d005      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	4798      	blx	r3
 8000cf4:	e000      	b.n	8000cf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000cf6:	bf00      	nop
    }
  }
}
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop

08000d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3b10      	subs	r3, #16
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <DMA_CalcBaseAndBitshift+0x64>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000d1a:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <DMA_CalcBaseAndBitshift+0x68>)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d909      	bls.n	8000d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	1d1a      	adds	r2, r3, #4
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8000d40:	e007      	b.n	8000d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000d4a:	f023 0303 	bic.w	r3, r3, #3
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	aaaaaaab 	.word	0xaaaaaaab
 8000d68:	08012d58 	.word	0x08012d58

08000d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11f      	bne.n	8000dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d855      	bhi.n	8000e38 <DMA_CheckFifoParam+0xcc>
 8000d8c:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <DMA_CheckFifoParam+0x28>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000da5 	.word	0x08000da5
 8000d98:	08000db7 	.word	0x08000db7
 8000d9c:	08000da5 	.word	0x08000da5
 8000da0:	08000e39 	.word	0x08000e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d045      	beq.n	8000e3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000db4:	e042      	b.n	8000e3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000dbe:	d13f      	bne.n	8000e40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dc4:	e03c      	b.n	8000e40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dce:	d121      	bne.n	8000e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d836      	bhi.n	8000e44 <DMA_CheckFifoParam+0xd8>
 8000dd6:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <DMA_CheckFifoParam+0x70>)
 8000dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ddc:	08000ded 	.word	0x08000ded
 8000de0:	08000df3 	.word	0x08000df3
 8000de4:	08000ded 	.word	0x08000ded
 8000de8:	08000e05 	.word	0x08000e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
      break;
 8000df0:	e02f      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d024      	beq.n	8000e48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e02:	e021      	b.n	8000e48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e0c:	d11e      	bne.n	8000e4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000e12:	e01b      	b.n	8000e4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d902      	bls.n	8000e20 <DMA_CheckFifoParam+0xb4>
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d003      	beq.n	8000e26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000e1e:	e018      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
      break;
 8000e24:	e015      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00e      	beq.n	8000e50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
      break;
 8000e36:	e00b      	b.n	8000e50 <DMA_CheckFifoParam+0xe4>
      break;
 8000e38:	bf00      	nop
 8000e3a:	e00a      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      break;
 8000e3c:	bf00      	nop
 8000e3e:	e008      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      break;
 8000e40:	bf00      	nop
 8000e42:	e006      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      break;
 8000e44:	bf00      	nop
 8000e46:	e004      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      break;
 8000e48:	bf00      	nop
 8000e4a:	e002      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      break;   
 8000e4c:	bf00      	nop
 8000e4e:	e000      	b.n	8000e52 <DMA_CheckFifoParam+0xe6>
      break;
 8000e50:	bf00      	nop
    }
  } 
  
  return status; 
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e03b      	b.n	8000eea <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d106      	bne.n	8000e8c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f008 fcfe 	bl	8009888 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6852      	ldr	r2, [r2, #4]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000eb4:	f022 0107 	bic.w	r1, r2, #7
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6892      	ldr	r2, [r2, #8]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ece:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	68c9      	ldr	r1, [r1, #12]
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d026      	beq.n	8000f62 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d021      	beq.n	8000f62 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	6812      	ldr	r2, [r2, #0]
 8000f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f2c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f003 0320 	and.w	r3, r3, #32
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d026      	beq.n	8000fba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d021      	beq.n	8000fba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	6812      	ldr	r2, [r2, #0]
 8000f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f84:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f92:	f043 0202 	orr.w	r2, r3, #2
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d026      	beq.n	8001012 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d021      	beq.n	8001012 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fdc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fea:	f043 0204 	orr.w	r2, r3, #4
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00e      	beq.n	8001044 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001034:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2204      	movs	r2, #4
 800103c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f853 	bl	80010ea <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d024      	beq.n	8001098 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01f      	beq.n	8001098 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001066:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2202      	movs	r2, #2
 800106e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01f      	beq.n	80010e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d01a      	beq.n	80010e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	6812      	ldr	r2, [r2, #0]
 80010b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2210      	movs	r2, #16
 80010c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f80e 	bl	80010fe <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	3318      	adds	r3, #24
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_DMA2D_ConfigLayer+0x30>
 8001140:	2302      	movs	r3, #2
 8001142:	e070      	b.n	8001226 <HAL_DMA2D_ConfigLayer+0x112>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b0a      	cmp	r3, #10
 800115a:	d003      	beq.n	8001164 <HAL_DMA2D_ConfigLayer+0x50>
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d10c      	bne.n	800117e <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	041b      	lsls	r3, r3, #16
 800116e:	431a      	orrs	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001178:	4313      	orrs	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e00a      	b.n	8001194 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	041b      	lsls	r3, r3, #16
 8001188:	431a      	orrs	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	061b      	lsls	r3, r3, #24
 8001190:	4313      	orrs	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d11e      	bne.n	80011d8 <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_DMA2D_ConfigLayer+0x120>)
 80011a6:	400b      	ands	r3, r1
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	430b      	orrs	r3, r1
 80011ac:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	d003      	beq.n	80011c8 <HAL_DMA2D_ConfigLayer+0xb4>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d125      	bne.n	8001214 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	68d2      	ldr	r2, [r2, #12]
 80011d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
 80011d6:	e01d      	b.n	8001214 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	69d9      	ldr	r1, [r3, #28]
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_DMA2D_ConfigLayer+0x120>)
 80011e4:	400b      	ands	r3, r1
 80011e6:	68f9      	ldr	r1, [r7, #12]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d003      	beq.n	8001206 <HAL_DMA2D_ConfigLayer+0xf2>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b09      	cmp	r3, #9
 8001204:	d106      	bne.n	8001214 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	68d2      	ldr	r2, [r2, #12]
 800120e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001212:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	00fcfff0 	.word	0x00fcfff0

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e177      	b.n	8001544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8166 	bne.w	800153e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x4a>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b12      	cmp	r3, #18
 8001280:	d123      	bne.n	80012ca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	08da      	lsrs	r2, r3, #3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3208      	adds	r2, #8
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	220f      	movs	r2, #15
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	08da      	lsrs	r2, r3, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3208      	adds	r2, #8
 80012c4:	69b9      	ldr	r1, [r7, #24]
 80012c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 0203 	and.w	r2, r3, #3
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d00b      	beq.n	800131e <HAL_GPIO_Init+0xe6>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001312:	2b11      	cmp	r3, #17
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b12      	cmp	r3, #18
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80c0 	beq.w	800153e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4a65      	ldr	r2, [pc, #404]	; (8001558 <HAL_GPIO_Init+0x320>)
 80013c4:	4b64      	ldr	r3, [pc, #400]	; (8001558 <HAL_GPIO_Init+0x320>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b62      	ldr	r3, [pc, #392]	; (8001558 <HAL_GPIO_Init+0x320>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a60      	ldr	r2, [pc, #384]	; (800155c <HAL_GPIO_Init+0x324>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_GPIO_Init+0x328>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d037      	beq.n	8001476 <HAL_GPIO_Init+0x23e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a56      	ldr	r2, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x32c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d031      	beq.n	8001472 <HAL_GPIO_Init+0x23a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a55      	ldr	r2, [pc, #340]	; (8001568 <HAL_GPIO_Init+0x330>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x236>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_GPIO_Init+0x334>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x232>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a53      	ldr	r2, [pc, #332]	; (8001570 <HAL_GPIO_Init+0x338>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x22e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_GPIO_Init+0x33c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x22a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a51      	ldr	r2, [pc, #324]	; (8001578 <HAL_GPIO_Init+0x340>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x226>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a50      	ldr	r2, [pc, #320]	; (800157c <HAL_GPIO_Init+0x344>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x222>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4f      	ldr	r2, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x348>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x21e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <HAL_GPIO_Init+0x34c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x21a>
 800144e:	2309      	movs	r3, #9
 8001450:	e012      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001452:	230a      	movs	r3, #10
 8001454:	e010      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001456:	2308      	movs	r3, #8
 8001458:	e00e      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800145a:	2307      	movs	r3, #7
 800145c:	e00c      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800145e:	2306      	movs	r3, #6
 8001460:	e00a      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001462:	2305      	movs	r3, #5
 8001464:	e008      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001466:	2304      	movs	r3, #4
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800146a:	2303      	movs	r3, #3
 800146c:	e004      	b.n	8001478 <HAL_GPIO_Init+0x240>
 800146e:	2302      	movs	r3, #2
 8001470:	e002      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x240>
 8001476:	2300      	movs	r3, #0
 8001478:	69fa      	ldr	r2, [r7, #28]
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	0092      	lsls	r2, r2, #2
 8001480:	4093      	lsls	r3, r2
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001488:	4934      	ldr	r1, [pc, #208]	; (800155c <HAL_GPIO_Init+0x324>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <HAL_GPIO_Init+0x350>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ba:	4a33      	ldr	r2, [pc, #204]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014c0:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e4:	4a28      	ldr	r2, [pc, #160]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_GPIO_Init+0x350>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150e:	4a1e      	ldr	r2, [pc, #120]	; (8001588 <HAL_GPIO_Init+0x350>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_GPIO_Init+0x350>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001538:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_GPIO_Init+0x350>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	f67f ae84 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800154c:	bf00      	nop
 800154e:	3724      	adds	r7, #36	; 0x24
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40021c00 	.word	0x40021c00
 8001580:	40022000 	.word	0x40022000
 8001584:	40022400 	.word	0x40022400
 8001588:	40013c00 	.word	0x40013c00

0800158c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	e0da      	b.n	800175e <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	429a      	cmp	r2, r3
 80015c0:	f040 80ca 	bne.w	8001758 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2103      	movs	r1, #3
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08d9      	lsrs	r1, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3108      	adds	r1, #8
 80015e6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	200f      	movs	r0, #15
 80015f4:	fa00 f303 	lsl.w	r3, r0, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	4019      	ands	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2103      	movs	r1, #3
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	401a      	ands	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	2101      	movs	r1, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2103      	movs	r1, #3
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001644:	4a4b      	ldr	r2, [pc, #300]	; (8001774 <HAL_GPIO_DeInit+0x1e8>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	4013      	ands	r3, r2
 8001664:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a43      	ldr	r2, [pc, #268]	; (8001778 <HAL_GPIO_DeInit+0x1ec>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d037      	beq.n	80016de <HAL_GPIO_DeInit+0x152>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_GPIO_DeInit+0x1f0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d031      	beq.n	80016da <HAL_GPIO_DeInit+0x14e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a41      	ldr	r2, [pc, #260]	; (8001780 <HAL_GPIO_DeInit+0x1f4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d02b      	beq.n	80016d6 <HAL_GPIO_DeInit+0x14a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a40      	ldr	r2, [pc, #256]	; (8001784 <HAL_GPIO_DeInit+0x1f8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_DeInit+0x146>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a3f      	ldr	r2, [pc, #252]	; (8001788 <HAL_GPIO_DeInit+0x1fc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_DeInit+0x142>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a3e      	ldr	r2, [pc, #248]	; (800178c <HAL_GPIO_DeInit+0x200>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_DeInit+0x13e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_GPIO_DeInit+0x204>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_DeInit+0x13a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a3c      	ldr	r2, [pc, #240]	; (8001794 <HAL_GPIO_DeInit+0x208>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_DeInit+0x136>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <HAL_GPIO_DeInit+0x20c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_DeInit+0x132>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a3a      	ldr	r2, [pc, #232]	; (800179c <HAL_GPIO_DeInit+0x210>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_DeInit+0x12e>
 80016b6:	2309      	movs	r3, #9
 80016b8:	e012      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016ba:	230a      	movs	r3, #10
 80016bc:	e010      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016be:	2308      	movs	r3, #8
 80016c0:	e00e      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e00c      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e00a      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_DeInit+0x154>
 80016de:	2300      	movs	r3, #0
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	fa03 f202 	lsl.w	r2, r3, r2
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d132      	bne.n	8001758 <HAL_GPIO_DeInit+0x1cc>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001702:	481c      	ldr	r0, [pc, #112]	; (8001774 <HAL_GPIO_DeInit+0x1e8>)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	491a      	ldr	r1, [pc, #104]	; (8001774 <HAL_GPIO_DeInit+0x1e8>)
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	0892      	lsrs	r2, r2, #2
 800170e:	3202      	adds	r2, #2
 8001710:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	43d2      	mvns	r2, r2
 8001718:	400a      	ands	r2, r1
 800171a:	3302      	adds	r3, #2
 800171c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001720:	491f      	ldr	r1, [pc, #124]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	4013      	ands	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800172e:	491c      	ldr	r1, [pc, #112]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 8001730:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	4013      	ands	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800173c:	4918      	ldr	r1, [pc, #96]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	4013      	ands	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800174a:	4915      	ldr	r1, [pc, #84]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_GPIO_DeInit+0x214>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	f67f af21 	bls.w	80015a8 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 8001766:	bf00      	nop
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40013800 	.word	0x40013800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020800 	.word	0x40020800
 8001784:	40020c00 	.word	0x40020c00
 8001788:	40021000 	.word	0x40021000
 800178c:	40021400 	.word	0x40021400
 8001790:	40021800 	.word	0x40021800
 8001794:	40021c00 	.word	0x40021c00
 8001798:	40022000 	.word	0x40022000
 800179c:	40022400 	.word	0x40022400
 80017a0:	40013c00 	.word	0x40013c00

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017c0:	e003      	b.n	80017ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	041a      	lsls	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0c8      	b.n	8001984 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f008 f866 	bl	80098d8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001824:	f002 f97a 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8001828:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_I2C_Init+0x1b4>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4952      	ldr	r1, [pc, #328]	; (8001990 <HAL_I2C_Init+0x1b8>)
 8001848:	428b      	cmp	r3, r1
 800184a:	d802      	bhi.n	8001852 <HAL_I2C_Init+0x7a>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3301      	adds	r3, #1
 8001850:	e009      	b.n	8001866 <HAL_I2C_Init+0x8e>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_I2C_Init+0x1bc>)
 800185e:	fba1 1303 	umull	r1, r3, r1, r3
 8001862:	099b      	lsrs	r3, r3, #6
 8001864:	3301      	adds	r3, #1
 8001866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_I2C_Init+0x1b8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d812      	bhi.n	800189c <HAL_I2C_Init+0xc4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001886:	2b03      	cmp	r3, #3
 8001888:	d906      	bls.n	8001898 <HAL_I2C_Init+0xc0>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	e045      	b.n	8001924 <HAL_I2C_Init+0x14c>
 8001898:	2304      	movs	r3, #4
 800189a:	e043      	b.n	8001924 <HAL_I2C_Init+0x14c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10f      	bne.n	80018c4 <HAL_I2C_Init+0xec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	e010      	b.n	80018e6 <HAL_I2C_Init+0x10e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	009a      	lsls	r2, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Init+0x116>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01a      	b.n	8001924 <HAL_I2C_Init+0x14c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <HAL_I2C_Init+0x134>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190a:	e00b      	b.n	8001924 <HAL_I2C_Init+0x14c>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	009a      	lsls	r2, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001924:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	69d1      	ldr	r1, [r2, #28]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a12      	ldr	r2, [r2, #32]
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6911      	ldr	r1, [r2, #16]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68d2      	ldr	r2, [r2, #12]
 8001942:	430a      	orrs	r2, r1
 8001944:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6951      	ldr	r1, [r2, #20]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6992      	ldr	r2, [r2, #24]
 8001952:	430a      	orrs	r2, r1
 8001954:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	431bde83 	.word	0x431bde83
 8001990:	000186a0 	.word	0x000186a0
 8001994:	10624dd3 	.word	0x10624dd3

08001998 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	460b      	mov	r3, r1
 80019a6:	817b      	strh	r3, [r7, #10]
 80019a8:	4613      	mov	r3, r2
 80019aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019b0:	f7fe fe0c 	bl	80005cc <HAL_GetTick>
 80019b4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b20      	cmp	r3, #32
 80019c0:	f040 80ee 	bne.w	8001ba0 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2319      	movs	r3, #25
 80019ca:	2201      	movs	r2, #1
 80019cc:	4977      	ldr	r1, [pc, #476]	; (8001bac <HAL_I2C_Master_Transmit+0x214>)
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fc6c 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80019da:	2302      	movs	r3, #2
 80019dc:	e0e1      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_I2C_Master_Transmit+0x54>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e0da      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d007      	beq.n	8001a12 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a20:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2221      	movs	r2, #33	; 0x21
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	893a      	ldrh	r2, [r7, #8]
 8001a42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a5a      	ldr	r2, [pc, #360]	; (8001bb0 <HAL_I2C_Master_Transmit+0x218>)
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a54:	8979      	ldrh	r1, [r7, #10]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fadc 	bl	8002018 <I2C_MasterRequestWrite>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00f      	beq.n	8001a86 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d105      	bne.n	8001a7a <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e093      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e08d      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001a9c:	e066      	b.n	8001b6c <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	6a39      	ldr	r1, [r7, #32]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fcc1 	bl	800242a <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00f      	beq.n	8001ace <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d109      	bne.n	8001aca <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e06b      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e069      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	1c58      	adds	r0, r3, #1
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	6248      	str	r0, [r1, #36]	; 0x24
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d119      	bne.n	8001b3c <HAL_I2C_Master_Transmit+0x1a4>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d015      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	1c58      	adds	r0, r3, #1
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	6248      	str	r0, [r1, #36]	; 0x24
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	6a39      	ldr	r1, [r7, #32]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fcaf 	bl	80024a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00f      	beq.n	8001b6c <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d109      	bne.n	8001b68 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e01c      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e01a      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d194      	bne.n	8001a9e <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	00100002 	.word	0x00100002
 8001bb0:	ffff0000 	.word	0xffff0000

08001bb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	817b      	strh	r3, [r7, #10]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bcc:	f7fe fcfe 	bl	80005cc <HAL_GetTick>
 8001bd0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	f040 8215 	bne.w	800200a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2319      	movs	r3, #25
 8001be6:	2201      	movs	r2, #1
 8001be8:	4985      	ldr	r1, [pc, #532]	; (8001e00 <HAL_I2C_Master_Receive+0x24c>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fb5e 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e208      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_I2C_Master_Receive+0x54>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e201      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d007      	beq.n	8001c2e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2222      	movs	r2, #34	; 0x22
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2210      	movs	r2, #16
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	893a      	ldrh	r2, [r7, #8]
 8001c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4a68      	ldr	r2, [pc, #416]	; (8001e04 <HAL_I2C_Master_Receive+0x250>)
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fa50 	bl	800211c <I2C_MasterRequestRead>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00f      	beq.n	8001ca2 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d105      	bne.n	8001c96 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1ba      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1b4      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d113      	bne.n	8001cd2 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	623b      	str	r3, [r7, #32]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e188      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d11b      	bne.n	8001d12 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e168      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d11b      	bne.n	8001d52 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	e148      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001d78:	e134      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	f200 80eb 	bhi.w	8001f5a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d127      	bne.n	8001ddc <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fbc4 	bl	800251e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d101      	bne.n	8001da8 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e131      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e12f      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	1c59      	adds	r1, r3, #1
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6251      	str	r1, [r2, #36]	; 0x24
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	6912      	ldr	r2, [r2, #16]
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dda:	e103      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d14a      	bne.n	8001e7a <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	2200      	movs	r2, #0
 8001dec:	4906      	ldr	r1, [pc, #24]	; (8001e08 <HAL_I2C_Master_Receive+0x254>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa5c 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e106      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
 8001dfe:	bf00      	nop
 8001e00:	00100002 	.word	0x00100002
 8001e04:	ffff0000 	.word	0xffff0000
 8001e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	1c59      	adds	r1, r3, #1
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6251      	str	r1, [r2, #36]	; 0x24
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	6912      	ldr	r2, [r2, #16]
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	6251      	str	r1, [r2, #36]	; 0x24
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	6912      	ldr	r2, [r2, #16]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e78:	e0b4      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	2200      	movs	r2, #0
 8001e82:	4964      	ldr	r1, [pc, #400]	; (8002014 <HAL_I2C_Master_Receive+0x460>)
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fa11 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0bb      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	1c59      	adds	r1, r3, #1
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6251      	str	r1, [r2, #36]	; 0x24
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	6912      	ldr	r2, [r2, #16]
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	2200      	movs	r2, #0
 8001eda:	494e      	ldr	r1, [pc, #312]	; (8002014 <HAL_I2C_Master_Receive+0x460>)
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f9e5 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e08f      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	1c59      	adds	r1, r3, #1
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	6251      	str	r1, [r2, #36]	; 0x24
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	6912      	ldr	r2, [r2, #16]
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	1c59      	adds	r1, r3, #1
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	6251      	str	r1, [r2, #36]	; 0x24
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	6912      	ldr	r2, [r2, #16]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f58:	e044      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fadd 	bl	800251e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e04a      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e048      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	1c59      	adds	r1, r3, #1
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6251      	str	r1, [r2, #36]	; 0x24
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	6912      	ldr	r2, [r2, #16]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d116      	bne.n	8001fe4 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	1c59      	adds	r1, r3, #1
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6251      	str	r1, [r2, #36]	; 0x24
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	6912      	ldr	r2, [r2, #16]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f aec6 	bne.w	8001d7a <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
  }
}
 800200c:	4618      	mov	r0, r3
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	00010004 	.word	0x00010004

08002018 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	460b      	mov	r3, r1
 8002026:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d006      	beq.n	8002042 <I2C_MasterRequestWrite+0x2a>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d003      	beq.n	8002042 <I2C_MasterRequestWrite+0x2a>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002040:	d108      	bne.n	8002054 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e00b      	b.n	800206c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	2b12      	cmp	r3, #18
 800205a:	d107      	bne.n	800206c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800206a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f917 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e040      	b.n	800210a <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002090:	d107      	bne.n	80020a2 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	897a      	ldrh	r2, [r7, #10]
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	e021      	b.n	80020e6 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	897a      	ldrh	r2, [r7, #10]
 80020a8:	11d2      	asrs	r2, r2, #7
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 0206 	and.w	r2, r2, #6
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f062 020f 	orn	r2, r2, #15
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4915      	ldr	r1, [pc, #84]	; (8002114 <I2C_MasterRequestWrite+0xfc>)
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f944 	bl	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d007      	beq.n	80020dc <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d101      	bne.n	80020d8 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e018      	b.n	800210a <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e016      	b.n	800210a <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	897a      	ldrh	r2, [r7, #10]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	490b      	ldr	r1, [pc, #44]	; (8002118 <I2C_MasterRequestWrite+0x100>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f92e 	bl	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d101      	bne.n	8002104 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e002      	b.n	800210a <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e000      	b.n	800210a <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	00010008 	.word	0x00010008
 8002118:	00010002 	.word	0x00010002

0800211c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002140:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d006      	beq.n	8002156 <I2C_MasterRequestRead+0x3a>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d003      	beq.n	8002156 <I2C_MasterRequestRead+0x3a>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002154:	d108      	bne.n	8002168 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e00b      	b.n	8002180 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2b11      	cmp	r3, #17
 800216e:	d107      	bne.n	8002180 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f88d 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e07f      	b.n	800229c <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021a4:	d108      	bne.n	80021b8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	897a      	ldrh	r2, [r7, #10]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	e05f      	b.n	8002278 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	897a      	ldrh	r2, [r7, #10]
 80021be:	11d2      	asrs	r2, r2, #7
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 0206 	and.w	r2, r2, #6
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f062 020f 	orn	r2, r2, #15
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4933      	ldr	r1, [pc, #204]	; (80022a4 <I2C_MasterRequestRead+0x188>)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f8b9 	bl	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d101      	bne.n	80021ee <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e056      	b.n	800229c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e054      	b.n	800229c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	897a      	ldrh	r2, [r7, #10]
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4929      	ldr	r1, [pc, #164]	; (80022a8 <I2C_MasterRequestRead+0x18c>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8a3 	bl	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d101      	bne.n	800221a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e040      	b.n	800229c <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e03e      	b.n	800229c <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002242:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f82b 	bl	80022ac <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e01d      	b.n	800229c <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	897a      	ldrh	r2, [r7, #10]
 8002266:	11d2      	asrs	r2, r2, #7
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	f002 0206 	and.w	r2, r2, #6
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	f062 020e 	orn	r2, r2, #14
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	490a      	ldr	r1, [pc, #40]	; (80022a8 <I2C_MasterRequestRead+0x18c>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f865 	bl	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d101      	bne.n	8002296 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e002      	b.n	800229c <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e000      	b.n	800229c <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	00010008 	.word	0x00010008
 80022a8:	00010002 	.word	0x00010002

080022ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022bc:	e01f      	b.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c4:	d01b      	beq.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80022cc:	f7fe f97e 	bl	80005cc <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad2      	subs	r2, r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d910      	bls.n	80022fe <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e023      	b.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10d      	bne.n	8002324 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	e00c      	b.n	800233e <I2C_WaitOnFlagUntilTimeout+0x92>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4013      	ands	r3, r2
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf0c      	ite	eq
 8002336:	2301      	moveq	r3, #1
 8002338:	2300      	movne	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	429a      	cmp	r2, r3
 8002342:	d0bc      	beq.n	80022be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800235c:	e040      	b.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	d11c      	bne.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002386:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2204      	movs	r2, #4
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e03c      	b.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023ae:	d017      	beq.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80023b6:	f7fe f909 	bl	80005cc <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d90c      	bls.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e020      	b.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10c      	bne.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e00b      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4013      	ands	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d19e      	bne.n	800235e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002436:	e029      	b.n	800248c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f8ba 	bl	80025b2 <I2C_IsAcknowledgeFailed>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e029      	b.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800244e:	d01d      	beq.n	800248c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002456:	f7fe f8b9 	bl	80005cc <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d912      	bls.n	800248c <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e007      	b.n	800249c <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	2b80      	cmp	r3, #128	; 0x80
 8002498:	d1ce      	bne.n	8002438 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024b0:	e029      	b.n	8002506 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f87d 	bl	80025b2 <I2C_IsAcknowledgeFailed>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e029      	b.n	8002516 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c8:	d01d      	beq.n	8002506 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024d0:	f7fe f87c 	bl	80005cc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	1ad2      	subs	r2, r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d912      	bls.n	8002506 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e007      	b.n	8002516 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b04      	cmp	r3, #4
 8002512:	d1ce      	bne.n	80024b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800252a:	e036      	b.n	800259a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b10      	cmp	r3, #16
 8002538:	d114      	bne.n	8002564 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 0210 	mvn.w	r2, #16
 8002542:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e022      	b.n	80025aa <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800256a:	f7fe f82f 	bl	80005cc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	429a      	cmp	r2, r3
 8002578:	d90f      	bls.n	800259a <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e007      	b.n	80025aa <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d1c1      	bne.n	800252c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c8:	d114      	bne.n	80025f4 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d2:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b20      	cmp	r3, #32
 8002616:	d129      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263a:	f022 0210 	bic.w	r2, r2, #16
 800263e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b20      	cmp	r3, #32
 8002692:	d12a      	bne.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2224      	movs	r2, #36	; 0x24
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026b4:	89fb      	ldrh	r3, [r7, #14]
 80026b6:	f023 030f 	bic.w	r3, r3, #15
 80026ba:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	89fb      	ldrh	r3, [r7, #14]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	89fa      	ldrh	r2, [r7, #14]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f042 0201 	orr.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 80026e6:	2300      	movs	r3, #0
 80026e8:	e000      	b.n	80026ec <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 80026ea:	2302      	movs	r3, #2
  }
}  
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0bf      	b.n	8002892 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f007 f9a4 	bl	8009a74 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	6992      	ldr	r2, [r2, #24]
 800273e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002742:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	6991      	ldr	r1, [r2, #24]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6850      	ldr	r0, [r2, #4]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800275c:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6912      	ldr	r2, [r2, #16]
 8002762:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002764:	430a      	orrs	r2, r1
 8002766:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_LTDC_Init+0x1a4>)
 8002774:	400b      	ands	r3, r1
 8002776:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	6891      	ldr	r1, [r2, #8]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6990      	ldr	r0, [r2, #24]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4302      	orrs	r2, r0
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_LTDC_Init+0x1a4>)
 80027a2:	400b      	ands	r3, r1
 80027a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	68d1      	ldr	r1, [r2, #12]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6a10      	ldr	r0, [r2, #32]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4302      	orrs	r2, r0
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6919      	ldr	r1, [r3, #16]
 80027ce:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_LTDC_Init+0x1a4>)
 80027d0:	400b      	ands	r3, r1
 80027d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	6911      	ldr	r1, [r2, #16]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4302      	orrs	r2, r0
 80027ee:	430a      	orrs	r2, r1
 80027f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6959      	ldr	r1, [r3, #20]
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_LTDC_Init+0x1a4>)
 80027fe:	400b      	ands	r3, r1
 8002800:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	6951      	ldr	r1, [r2, #20]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4302      	orrs	r2, r0
 800281c:	430a      	orrs	r2, r1
 800281e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800283e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800284e:	68b8      	ldr	r0, [r7, #8]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4302      	orrs	r2, r0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800285a:	4302      	orrs	r2, r0
 800285c:	430a      	orrs	r2, r1
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800286a:	f042 0206 	orr.w	r2, r2, #6
 800286e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	6992      	ldr	r2, [r2, #24]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	f000f800 	.word	0xf000f800

080028a0 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc); 
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f007 f9f9 	bl	8009ca0 <HAL_LTDC_MspDeInit>

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	60bb      	str	r3, [r7, #8]
  
  /* Transfer Error Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_TERRIF) != RESET) && ((itsources & LTDC_IER_TERRIE) != RESET))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d023      	beq.n	800293a <HAL_LTDC_IRQHandler+0x6a>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01e      	beq.n	800293a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002906:	f022 0204 	bic.w	r2, r2, #4
 800290a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2204      	movs	r2, #4
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2204      	movs	r2, #4
 8002928:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f86f 	bl	8002a18 <HAL_LTDC_ErrorCallback>
  }

  /* FIFO underrun Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_FUIF) != RESET) && ((itsources & LTDC_IER_FUIE) != RESET))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_LTDC_IRQHandler+0xbc>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01e      	beq.n	800298c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002958:	f022 0202 	bic.w	r2, r2, #2
 800295c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800296c:	f043 0202 	orr.w	r2, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2204      	movs	r2, #4
 800297a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Transfer error Callback */
    HAL_LTDC_ErrorCallback(hltdc);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f846 	bl	8002a18 <HAL_LTDC_ErrorCallback>
  }

  /* Line Interrupt management ************************************************/
  if(((isrflags & LTDC_ISR_LIF) != RESET) && ((itsources & LTDC_IER_LIE) != RESET))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01b      	beq.n	80029ce <HAL_LTDC_IRQHandler+0xfe>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */  
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2201      	movs	r2, #1
 80029b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

    /* Line interrupt Callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f003 fb03 	bl	8005fd4 <HAL_LTDC_LineEventCallback>
  }

  /* Register reload Interrupt management ***************************************/
  if(((isrflags & LTDC_ISR_RRIF) != RESET) && ((itsources & LTDC_IER_RRIE) != RESET))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_LTDC_IRQHandler+0x140>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
      
    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2208      	movs	r2, #8
 80029f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
    /* Register reload interrupt Callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f80e 	bl	8002a2c <HAL_LTDC_ReloadEventCallback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_LTDC_ConfigLayer+0x1a>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e02c      	b.n	8002ab4 <HAL_LTDC_ConfigLayer+0x74>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2134      	movs	r1, #52	; 0x34
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4614      	mov	r4, r2
 8002a7e:	461d      	mov	r5, r3
 8002a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fa63 	bl	8002f60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}

08002abc <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_LTDC_ConfigColorKeying+0x1a>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e031      	b.n	8002b3a <HAL_LTDC_ConfigColorKeying+0x7e>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	01db      	lsls	r3, r3, #7
 8002af0:	4413      	add	r3, r2
 8002af2:	3384      	adds	r3, #132	; 0x84
 8002af4:	461a      	mov	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	01db      	lsls	r3, r3, #7
 8002b00:	440b      	add	r3, r1
 8002b02:	3384      	adds	r3, #132	; 0x84
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b0a:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	01db      	lsls	r3, r3, #7
 8002b16:	4413      	add	r3, r2
 8002b18:	3384      	adds	r3, #132	; 0x84
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2201      	movs	r2, #1
 8002b26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b089      	sub	sp, #36	; 0x24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_LTDC_ConfigCLUT+0x28>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e059      	b.n	8002c22 <HAL_LTDC_ConfigCLUT+0xdc>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e041      	b.n	8002c08 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2134      	movs	r1, #52	; 0x34
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3348      	adds	r3, #72	; 0x48
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d114      	bne.n	8002bc2 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4413      	add	r3, r2
 8002ba0:	061a      	lsls	r2, r3, #24
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e010      	b.n	8002be4 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	061a      	lsls	r2, r3, #24
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	3304      	adds	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3384      	adds	r3, #132	; 0x84
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3b9      	bcc.n	8002b84 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{  
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_LTDC_EnableColorKeying+0x18>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e027      	b.n	8002c96 <HAL_LTDC_EnableColorKeying+0x68>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	01db      	lsls	r3, r3, #7
 8002c60:	4413      	add	r3, r2
 8002c62:	3384      	adds	r3, #132	; 0x84
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	01db      	lsls	r3, r3, #7
 8002c70:	440b      	add	r3, r1
 8002c72:	3384      	adds	r3, #132	; 0x84
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f043 0302 	orr.w	r3, r3, #2
 8002c7a:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;  
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_LTDC_DisableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_DisableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_LTDC_DisableColorKeying+0x18>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e027      	b.n	8002d0a <HAL_LTDC_DisableColorKeying+0x68>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	01db      	lsls	r3, r3, #7
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3384      	adds	r3, #132	; 0x84
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	01db      	lsls	r3, r3, #7
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3384      	adds	r3, #132	; 0x84
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0302 	bic.w	r3, r3, #2
 8002cee:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_LTDC_EnableCLUT+0x18>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e027      	b.n	8002d7e <HAL_LTDC_EnableCLUT+0x68>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	01db      	lsls	r3, r3, #7
 8002d48:	4413      	add	r3, r2
 8002d4a:	3384      	adds	r3, #132	; 0x84
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	01db      	lsls	r3, r3, #7
 8002d58:	440b      	add	r3, r1
 8002d5a:	3384      	adds	r3, #132	; 0x84
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f043 0310 	orr.w	r3, r3, #16
 8002d62:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_LTDC_SetWindowPosition>:
  *                         This parameter can be one of the following values:
  *                         LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetWindowPosition(LTDC_HandleTypeDef *hltdc, uint32_t X0, uint32_t Y0, uint32_t LayerIdx)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	603b      	str	r3, [r7, #0]
  assert_param(IS_LTDC_LAYER(LayerIdx));
  assert_param(IS_LTDC_CFBLL(X0));
  assert_param(IS_LTDC_CFBLNBR(Y0));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_LTDC_SetWindowPosition+0x1c>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e033      	b.n	8002e0e <HAL_LTDC_SetWindowPosition+0x84>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2234      	movs	r2, #52	; 0x34
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	3338      	adds	r3, #56	; 0x38
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* update horizontal start/stop */
  pLayerCfg->WindowX0 = X0;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	601a      	str	r2, [r3, #0]
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	441a      	add	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* update vertical start/stop */
  pLayerCfg->WindowY0 = Y0;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	441a      	add	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	60da      	str	r2, [r3, #12]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f8b6 	bl	8002f60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_LTDC_SetAlpha+0x1a>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e024      	b.n	8002e7a <HAL_LTDC_SetAlpha+0x64>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2234      	movs	r2, #52	; 0x34
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	3338      	adds	r3, #56	; 0x38
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6979      	ldr	r1, [r7, #20]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f880 	bl	8002f60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_LTDC_SetAddress+0x1a>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e024      	b.n	8002ee6 <HAL_LTDC_SetAddress+0x64>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2234      	movs	r2, #52	; 0x34
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
 8002eb4:	3338      	adds	r3, #56	; 0x38
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6979      	ldr	r1, [r7, #20]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f84a 	bl	8002f60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_LTDC_ProgramLineEvent+0x18>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e023      	b.n	8002f50 <HAL_LTDC_ProgramLineEvent+0x60>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8002f28:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40016800 	.word	0x40016800

08002f60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	4413      	add	r3, r2
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	01db      	lsls	r3, r3, #7
 8002f98:	4413      	add	r3, r2
 8002f9a:	3384      	adds	r3, #132	; 0x84
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	440b      	add	r3, r1
 8002faa:	3384      	adds	r3, #132	; 0x84
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002fb2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	01db      	lsls	r3, r3, #7
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3384      	adds	r3, #132	; 0x84
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	4413      	add	r3, r2
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fec:	4413      	add	r3, r2
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	01db      	lsls	r3, r3, #7
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3384      	adds	r3, #132	; 0x84
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4619      	mov	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	01db      	lsls	r3, r3, #7
 800300c:	440b      	add	r3, r1
 800300e:	3384      	adds	r3, #132	; 0x84
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003016:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	01db      	lsls	r3, r3, #7
 8003022:	4413      	add	r3, r2
 8003024:	3384      	adds	r3, #132	; 0x84
 8003026:	4619      	mov	r1, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003036:	4413      	add	r3, r2
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	01db      	lsls	r3, r3, #7
 800304a:	4413      	add	r3, r2
 800304c:	3384      	adds	r3, #132	; 0x84
 800304e:	461a      	mov	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	01db      	lsls	r3, r3, #7
 800305a:	440b      	add	r3, r1
 800305c:	3384      	adds	r3, #132	; 0x84
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f023 0307 	bic.w	r3, r3, #7
 8003064:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	01db      	lsls	r3, r3, #7
 8003070:	4413      	add	r3, r2
 8003072:	3384      	adds	r3, #132	; 0x84
 8003074:	461a      	mov	r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	01db      	lsls	r3, r3, #7
 80030a2:	4413      	add	r3, r2
 80030a4:	3384      	adds	r3, #132	; 0x84
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	01db      	lsls	r3, r3, #7
 80030b2:	4413      	add	r3, r2
 80030b4:	3384      	adds	r3, #132	; 0x84
 80030b6:	461a      	mov	r2, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	01db      	lsls	r3, r3, #7
 80030c6:	4413      	add	r3, r2
 80030c8:	3384      	adds	r3, #132	; 0x84
 80030ca:	4619      	mov	r1, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030d2:	461a      	mov	r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	431a      	orrs	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	01db      	lsls	r3, r3, #7
 80030ec:	4413      	add	r3, r2
 80030ee:	3384      	adds	r3, #132	; 0x84
 80030f0:	461a      	mov	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	01db      	lsls	r3, r3, #7
 80030fc:	440b      	add	r3, r1
 80030fe:	3384      	adds	r3, #132	; 0x84
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003106:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4413      	add	r3, r2
 8003114:	3384      	adds	r3, #132	; 0x84
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	01db      	lsls	r3, r3, #7
 8003128:	4413      	add	r3, r2
 800312a:	3384      	adds	r3, #132	; 0x84
 800312c:	461a      	mov	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	440b      	add	r3, r1
 800313a:	3384      	adds	r3, #132	; 0x84
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003142:	f023 0307 	bic.w	r3, r3, #7
 8003146:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	01db      	lsls	r3, r3, #7
 8003152:	4413      	add	r3, r2
 8003154:	3384      	adds	r3, #132	; 0x84
 8003156:	4619      	mov	r1, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	69da      	ldr	r2, [r3, #28]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4313      	orrs	r3, r2
 8003162:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	01db      	lsls	r3, r3, #7
 800316e:	4413      	add	r3, r2
 8003170:	3384      	adds	r3, #132	; 0x84
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4413      	add	r3, r2
 8003180:	3384      	adds	r3, #132	; 0x84
 8003182:	461a      	mov	r2, r3
 8003184:	2300      	movs	r3, #0
 8003186:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	01db      	lsls	r3, r3, #7
 8003192:	4413      	add	r3, r2
 8003194:	3384      	adds	r3, #132	; 0x84
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d102      	bne.n	80031ac <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 80031a6:	2304      	movs	r3, #4
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e01b      	b.n	80031e4 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d102      	bne.n	80031ba <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 80031b4:	2303      	movs	r3, #3
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	e014      	b.n	80031e4 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d00b      	beq.n	80031da <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d007      	beq.n	80031da <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d003      	beq.n	80031da <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80031d6:	2b07      	cmp	r3, #7
 80031d8:	d102      	bne.n	80031e0 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 80031da:	2302      	movs	r3, #2
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e001      	b.n	80031e4 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 80031e0:	2301      	movs	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	01db      	lsls	r3, r3, #7
 80031ee:	4413      	add	r3, r2
 80031f0:	3384      	adds	r3, #132	; 0x84
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	01db      	lsls	r3, r3, #7
 80031fe:	440b      	add	r3, r1
 8003200:	3384      	adds	r3, #132	; 0x84
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003208:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	01db      	lsls	r3, r3, #7
 8003214:	4413      	add	r3, r2
 8003216:	3384      	adds	r3, #132	; 0x84
 8003218:	4618      	mov	r0, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	1acb      	subs	r3, r1, r3
 8003230:	69f9      	ldr	r1, [r7, #28]
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	3303      	adds	r3, #3
 8003238:	4313      	orrs	r3, r2
 800323a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	01db      	lsls	r3, r3, #7
 8003246:	4413      	add	r3, r2
 8003248:	3384      	adds	r3, #132	; 0x84
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	01db      	lsls	r3, r3, #7
 8003256:	440b      	add	r3, r1
 8003258:	3384      	adds	r3, #132	; 0x84
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003260:	f023 0307 	bic.w	r3, r3, #7
 8003264:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	01db      	lsls	r3, r3, #7
 8003270:	4413      	add	r3, r2
 8003272:	3384      	adds	r3, #132	; 0x84
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	01db      	lsls	r3, r3, #7
 8003286:	4413      	add	r3, r2
 8003288:	3384      	adds	r3, #132	; 0x84
 800328a:	461a      	mov	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4619      	mov	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	01db      	lsls	r3, r3, #7
 8003296:	440b      	add	r3, r1
 8003298:	3384      	adds	r3, #132	; 0x84
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6013      	str	r3, [r2, #0]
}
 80032a2:	bf00      	nop
 80032a4:	3724      	adds	r7, #36	; 0x24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4a20      	ldr	r2, [pc, #128]	; (8003340 <HAL_PWREx_EnableOverDrive+0x90>)
 80032c0:	4b1f      	ldr	r3, [pc, #124]	; (8003340 <HAL_PWREx_EnableOverDrive+0x90>)
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_PWREx_EnableOverDrive+0x90>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_PWREx_EnableOverDrive+0x94>)
 80032d8:	2201      	movs	r2, #1
 80032da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032dc:	f7fd f976 	bl	80005cc <HAL_GetTick>
 80032e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032e2:	e009      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e4:	f7fd f972 	bl	80005cc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f2:	d901      	bls.n	80032f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e01f      	b.n	8003338 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_PWREx_EnableOverDrive+0x98>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d1ee      	bne.n	80032e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800330c:	f7fd f95e 	bl	80005cc <HAL_GetTick>
 8003310:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003312:	e009      	b.n	8003328 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003314:	f7fd f95a 	bl	80005cc <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003322:	d901      	bls.n	8003328 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e007      	b.n	8003338 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_PWREx_EnableOverDrive+0x98>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003334:	d1ee      	bne.n	8003314 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	420e0040 	.word	0x420e0040
 8003348:	40007000 	.word	0x40007000
 800334c:	420e0044 	.word	0x420e0044

08003350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e22d      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d075      	beq.n	800345a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800336e:	4ba3      	ldr	r3, [pc, #652]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d00c      	beq.n	8003394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4ba0      	ldr	r3, [pc, #640]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d112      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003386:	4b9d      	ldr	r3, [pc, #628]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003392:	d10b      	bne.n	80033ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	4b99      	ldr	r3, [pc, #612]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05b      	beq.n	8003458 <HAL_RCC_OscConfig+0x108>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d157      	bne.n	8003458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e208      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_OscConfig+0x74>
 80033b6:	4a91      	ldr	r2, [pc, #580]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	4b90      	ldr	r3, [pc, #576]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e01d      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4a8b      	ldr	r2, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	4b8a      	ldr	r3, [pc, #552]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4a88      	ldr	r2, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	4b87      	ldr	r3, [pc, #540]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0xb0>
 80033e8:	4a84      	ldr	r2, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	4b84      	ldr	r3, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	4a81      	ldr	r2, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fd f8e0 	bl	80005cc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fd f8dc 	bl	80005cc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1cd      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0xc0>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fd f8cc 	bl	80005cc <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fd f8c8 	bl	80005cc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1b9      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xe8>
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b62      	ldr	r3, [pc, #392]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d11c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e18d      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a2:	4956      	ldr	r1, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	e03a      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d020      	beq.n	8003502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_RCC_OscConfig+0x2b0>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd f881 	bl	80005cc <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fd f87d 	bl	80005cc <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e16e      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	4b46      	ldr	r3, [pc, #280]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4943      	ldr	r1, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034ee:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e015      	b.n	800352e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCC_OscConfig+0x2b0>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fd f860 	bl	80005cc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003510:	f7fd f85c 	bl	80005cc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e14d      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d030      	beq.n	800359c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x2b4>)
 8003544:	2201      	movs	r2, #1
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd f840 	bl	80005cc <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003550:	f7fd f83c 	bl	80005cc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e12d      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0f0      	beq.n	8003550 <HAL_RCC_OscConfig+0x200>
 800356e:	e015      	b.n	800359c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x2b4>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fd f829 	bl	80005cc <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357e:	f7fd f825 	bl	80005cc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e116      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a0 	beq.w	80036ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <HAL_RCC_OscConfig+0x2b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d121      	bne.n	800362a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4a08      	ldr	r2, [pc, #32]	; (8003608 <HAL_RCC_OscConfig+0x2b8>)
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <HAL_RCC_OscConfig+0x2b8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fc ffeb 	bl	80005cc <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e011      	b.n	800361e <HAL_RCC_OscConfig+0x2ce>
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	42470000 	.word	0x42470000
 8003604:	42470e80 	.word	0x42470e80
 8003608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fc ffde 	bl	80005cc <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0cf      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_OscConfig+0x478>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x2f0>
 8003632:	4a66      	ldr	r2, [pc, #408]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003634:	4b65      	ldr	r3, [pc, #404]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	e01c      	b.n	800367a <HAL_RCC_OscConfig+0x32a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d10c      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003648:	4a60      	ldr	r2, [pc, #384]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 800364a:	4b60      	ldr	r3, [pc, #384]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f043 0304 	orr.w	r3, r3, #4
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	4a5d      	ldr	r2, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003656:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	e00b      	b.n	800367a <HAL_RCC_OscConfig+0x32a>
 8003662:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	4a57      	ldr	r2, [pc, #348]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003670:	4b56      	ldr	r3, [pc, #344]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d015      	beq.n	80036ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fc ffa3 	bl	80005cc <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368a:	f7fc ff9f 	bl	80005cc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	f241 3288 	movw	r2, #5000	; 0x1388
 8003698:	4293      	cmp	r3, r2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e08e      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0ee      	beq.n	800368a <HAL_RCC_OscConfig+0x33a>
 80036ac:	e014      	b.n	80036d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fc ff8d 	bl	80005cc <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fc ff89 	bl	80005cc <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e078      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ee      	bne.n	80036b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d105      	bne.n	80036ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036de:	4a3b      	ldr	r2, [pc, #236]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 80036e0:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d064      	beq.n	80037bc <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d05c      	beq.n	80037b8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d141      	bne.n	800378a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b32      	ldr	r3, [pc, #200]	; (80037d0 <HAL_RCC_OscConfig+0x480>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fc ff5e 	bl	80005cc <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003714:	f7fc ff5a 	bl	80005cc <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e04b      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003732:	4926      	ldr	r1, [pc, #152]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	019b      	lsls	r3, r3, #6
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	3b01      	subs	r3, #1
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_RCC_OscConfig+0x480>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fc ff33 	bl	80005cc <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fc ff2f 	bl	80005cc <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e020      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377c:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x41a>
 8003788:	e018      	b.n	80037bc <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_RCC_OscConfig+0x480>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fc ff1c 	bl	80005cc <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003798:	f7fc ff18 	bl	80005cc <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e009      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_RCC_OscConfig+0x47c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x448>
 80037b6:	e001      	b.n	80037bc <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40007000 	.word	0x40007000
 80037cc:	40023800 	.word	0x40023800
 80037d0:	42470060 	.word	0x42470060

080037d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0ca      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_ClockConfig+0x1b4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d20c      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b64      	ldr	r3, [pc, #400]	; (8003988 <HAL_RCC_ClockConfig+0x1b4>)
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b62      	ldr	r3, [pc, #392]	; (8003988 <HAL_RCC_ClockConfig+0x1b4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b6      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4a58      	ldr	r2, [pc, #352]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4a52      	ldr	r2, [pc, #328]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	4b52      	ldr	r3, [pc, #328]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800384a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	494f      	ldr	r1, [pc, #316]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	4b4f      	ldr	r3, [pc, #316]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d044      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d119      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07d      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b3e      	ldr	r3, [pc, #248]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e06d      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e065      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4936      	ldr	r1, [pc, #216]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	4b35      	ldr	r3, [pc, #212]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 0203 	bic.w	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fc fe82 	bl	80005cc <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fc fe7e 	bl	80005cc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04d      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_RCC_ClockConfig+0x1b4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d90c      	bls.n	800391c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b21      	ldr	r3, [pc, #132]	; (8003988 <HAL_RCC_ClockConfig+0x1b4>)
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <HAL_RCC_ClockConfig+0x1b4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e030      	b.n	800397e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4918      	ldr	r1, [pc, #96]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003946:	4911      	ldr	r1, [pc, #68]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f81d 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 800395e:	4601      	mov	r1, r0
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	5cd3      	ldrb	r3, [r2, r3]
 800396e:	fa21 f303 	lsr.w	r3, r1, r3
 8003972:	4a08      	ldr	r2, [pc, #32]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003976:	200f      	movs	r0, #15
 8003978:	f7fc fde4 	bl	8000544 <HAL_InitTick>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40023c00 	.word	0x40023c00
 800398c:	40023800 	.word	0x40023800
 8003990:	08012d60 	.word	0x08012d60
 8003994:	20000014 	.word	0x20000014

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a0:	2200      	movs	r2, #0
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	617a      	str	r2, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80039ac:	2200      	movs	r2, #0
 80039ae:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b0:	4a51      	ldr	r2, [pc, #324]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80039b2:	6892      	ldr	r2, [r2, #8]
 80039b4:	f002 020c 	and.w	r2, r2, #12
 80039b8:	2a04      	cmp	r2, #4
 80039ba:	d007      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x34>
 80039bc:	2a08      	cmp	r2, #8
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	f040 8090 	bne.w	8003ae6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <HAL_RCC_GetSysClockFreq+0x164>)
 80039c8:	613b      	str	r3, [r7, #16]
       break;
 80039ca:	e08f      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039cc:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x168>)
 80039ce:	613b      	str	r3, [r7, #16]
      break;
 80039d0:	e08c      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d2:	4a49      	ldr	r2, [pc, #292]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80039d4:	6852      	ldr	r2, [r2, #4]
 80039d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039da:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039dc:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80039de:	6852      	ldr	r2, [r2, #4]
 80039e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	d023      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e8:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	f04f 0400 	mov.w	r4, #0
 80039f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	ea03 0301 	and.w	r3, r3, r1
 80039fe:	ea04 0402 	and.w	r4, r4, r2
 8003a02:	4a3f      	ldr	r2, [pc, #252]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a04:	fb02 f104 	mul.w	r1, r2, r4
 8003a08:	2200      	movs	r2, #0
 8003a0a:	fb02 f203 	mul.w	r2, r2, r3
 8003a0e:	440a      	add	r2, r1
 8003a10:	493b      	ldr	r1, [pc, #236]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a12:	fba3 0101 	umull	r0, r1, r3, r1
 8003a16:	1853      	adds	r3, r2, r1
 8003a18:	4619      	mov	r1, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	f7fc fbe4 	bl	80001f0 <__aeabi_uldivmod>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e04c      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a30:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a32:	6852      	ldr	r2, [r2, #4]
 8003a34:	0992      	lsrs	r2, r2, #6
 8003a36:	4611      	mov	r1, r2
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003a40:	f04f 0600 	mov.w	r6, #0
 8003a44:	ea05 0501 	and.w	r5, r5, r1
 8003a48:	ea06 0602 	and.w	r6, r6, r2
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4632      	mov	r2, r6
 8003a50:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003a54:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003a58:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	465a      	mov	r2, fp
 8003a60:	46aa      	mov	sl, r5
 8003a62:	46b3      	mov	fp, r6
 8003a64:	4655      	mov	r5, sl
 8003a66:	465e      	mov	r6, fp
 8003a68:	1b4d      	subs	r5, r1, r5
 8003a6a:	eb62 0606 	sbc.w	r6, r2, r6
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4632      	mov	r2, r6
 8003a72:	0194      	lsls	r4, r2, #6
 8003a74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a78:	018b      	lsls	r3, r1, #6
 8003a7a:	1a5b      	subs	r3, r3, r1
 8003a7c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a80:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003a84:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003a88:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003a8c:	4643      	mov	r3, r8
 8003a8e:	464c      	mov	r4, r9
 8003a90:	4655      	mov	r5, sl
 8003a92:	465e      	mov	r6, fp
 8003a94:	18ed      	adds	r5, r5, r3
 8003a96:	eb46 0604 	adc.w	r6, r6, r4
 8003a9a:	462b      	mov	r3, r5
 8003a9c:	4634      	mov	r4, r6
 8003a9e:	02a2      	lsls	r2, r4, #10
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	029b      	lsls	r3, r3, #10
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4623      	mov	r3, r4
 8003ac0:	f7fc fb96 	bl	80001f0 <__aeabi_uldivmod>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	613b      	str	r3, [r7, #16]
      break;
 8003ae4:	e002      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x164>)
 8003ae8:	613b      	str	r3, [r7, #16]
      break;
 8003aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aec:	693b      	ldr	r3, [r7, #16]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	017d7840 	.word	0x017d7840

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000014 	.word	0x20000014

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4601      	mov	r1, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4a03      	ldr	r2, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08012d70 	.word	0x08012d70

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d061      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b6c:	4ba3      	ldr	r3, [pc, #652]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b72:	f7fc fd2b 	bl	80005cc <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b7a:	f7fc fd27 	bl	80005cc <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e177      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b8c:	4b9c      	ldr	r3, [pc, #624]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba4:	4996      	ldr	r1, [pc, #600]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	019a      	lsls	r2, r3, #6
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bc4:	4b8e      	ldr	r3, [pc, #568]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bca:	0f1b      	lsrs	r3, r3, #28
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003bd2:	498b      	ldr	r1, [pc, #556]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	019a      	lsls	r2, r3, #6
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	431a      	orrs	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bec:	4984      	ldr	r1, [pc, #528]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bee:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf4:	f023 021f 	bic.w	r2, r3, #31
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c04:	4b7d      	ldr	r3, [pc, #500]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0a:	f7fc fcdf 	bl	80005cc <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c12:	f7fc fcdb 	bl	80005cc <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e12b      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c24:	4b76      	ldr	r3, [pc, #472]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d079      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c48:	4b6e      	ldr	r3, [pc, #440]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4e:	f7fc fcbd 	bl	80005cc <HAL_GetTick>
 8003c52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c56:	f7fc fcb9 	bl	80005cc <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e109      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c68:	4b65      	ldr	r3, [pc, #404]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c74:	d0ef      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d020      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c82:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	0f1b      	lsrs	r3, r3, #28
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c90:	495b      	ldr	r1, [pc, #364]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	019a      	lsls	r2, r3, #6
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003caa:	4955      	ldr	r1, [pc, #340]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cac:	4b54      	ldr	r3, [pc, #336]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	0e1b      	lsrs	r3, r3, #24
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cde:	4948      	ldr	r1, [pc, #288]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	019a      	lsls	r2, r3, #6
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	071b      	lsls	r3, r3, #28
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cf8:	4941      	ldr	r1, [pc, #260]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cfa:	4b41      	ldr	r3, [pc, #260]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d14:	f7fc fc5a 	bl	80005cc <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d1c:	f7fc fc56 	bl	80005cc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0a6      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d2e:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d1ef      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 808d 	beq.w	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d66:	4a28      	ldr	r2, [pc, #160]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d68:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d72:	f7fc fc2b 	bl	80005cc <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fc fc27 	bl	80005cc <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e077      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d039      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d032      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc0:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fc fbf5 	bl	80005cc <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fc fbf1 	bl	80005cc <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d90b      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e03f      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
 8003dfc:	42470068 	.word	0x42470068
 8003e00:	40023800 	.word	0x40023800
 8003e04:	42470070 	.word	0x42470070
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0e4      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e28:	d10d      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8003e2a:	4916      	ldr	r1, [pc, #88]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
 8003e44:	e005      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003e46:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	490c      	ldr	r1, [pc, #48]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	4313      	orrs	r3, r2
 8003e62:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e78:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	424711e0 	.word	0x424711e0

08003e8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e025      	b.n	8003eec <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f006 f833 	bl	8009f20 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f000 fcea 	bl	80048a6 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6839      	ldr	r1, [r7, #0]
 8003ede:	f000 fd55 	bl	800498c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d101      	bne.n	8003f10 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e018      	b.n	8003f42 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fdb2 	bl	8004a8a <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d104      	bne.n	8003f38 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2205      	movs	r2, #5
 8003f32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003f36:	e003      	b.n	8003f40 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d101      	bne.n	8003f64 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	e00e      	b.n	8003f82 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fdc5 	bl	8004b02 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e055      	b.n	8004048 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f005 feb6 	bl	8009d28 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6851      	ldr	r1, [r2, #4]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6892      	ldr	r2, [r2, #8]
 8003fe0:	4311      	orrs	r1, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	4311      	orrs	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6912      	ldr	r2, [r2, #16]
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6952      	ldr	r2, [r2, #20]
 8003ff2:	4311      	orrs	r1, r2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6992      	ldr	r2, [r2, #24]
 8003ff8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	69d2      	ldr	r2, [r2, #28]
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6a12      	ldr	r2, [r2, #32]
 8004008:	4311      	orrs	r1, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800400e:	430a      	orrs	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6992      	ldr	r2, [r2, #24]
 800401a:	0c12      	lsrs	r2, r2, #16
 800401c:	f002 0104 	and.w	r1, r2, #4
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	69d2      	ldr	r2, [r2, #28]
 8004032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004036:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08a      	sub	sp, #40	; 0x28
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_SPI_Transmit+0x26>
 8004072:	2302      	movs	r3, #2
 8004074:	e123      	b.n	80042be <HAL_SPI_Transmit+0x26e>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407e:	f7fc faa5 	bl	80005cc <HAL_GetTick>
 8004082:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d002      	beq.n	8004096 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004090:	2302      	movs	r3, #2
 8004092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004094:	e10a      	b.n	80042ac <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_Transmit+0x52>
 800409c:	88fb      	ldrh	r3, [r7, #6]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d102      	bne.n	80040a8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040a6:	e101      	b.n	80042ac <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ee:	d107      	bne.n	8004100 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d007      	beq.n	800411e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004126:	d147      	bne.n	80041b8 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <HAL_SPI_Transmit+0xea>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d138      	bne.n	80041ac <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	8812      	ldrh	r2, [r2, #0]
 8004142:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3302      	adds	r3, #2
 8004148:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004158:	e028      	b.n	80041ac <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	d10f      	bne.n	8004188 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	8812      	ldrh	r2, [r2, #0]
 8004170:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	3302      	adds	r3, #2
 8004176:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	86da      	strh	r2, [r3, #54]	; 0x36
 8004186:	e011      	b.n	80041ac <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_SPI_Transmit+0x156>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004194:	d00a      	beq.n	80041ac <HAL_SPI_Transmit+0x15c>
 8004196:	f7fc fa19 	bl	80005cc <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041aa:	e07f      	b.n	80042ac <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d1      	bne.n	800415a <HAL_SPI_Transmit+0x10a>
 80041b6:	e048      	b.n	800424a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <HAL_SPI_Transmit+0x17a>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d13a      	bne.n	8004240 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041ea:	e029      	b.n	8004240 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d110      	bne.n	800421c <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	86da      	strh	r2, [r3, #54]	; 0x36
 800421a:	e011      	b.n	8004240 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_SPI_Transmit+0x1ea>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004228:	d00a      	beq.n	8004240 <HAL_SPI_Transmit+0x1f0>
 800422a:	f7fc f9cf 	bl	80005cc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800423e:	e035      	b.n	80042ac <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1d0      	bne.n	80041ec <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	2102      	movs	r1, #2
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f836 	bl	80042c6 <SPI_WaitFlagStateUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004264:	e022      	b.n	80042ac <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f894 	bl	8004398 <SPI_CheckFlag_BSY>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004280:	e014      	b.n	80042ac <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10a      	bne.n	80042a0 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80042d4:	e04d      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042dc:	d049      	beq.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80042e4:	f7fc f972 	bl	80005cc <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d33e      	bcc.n	8004372 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	6852      	ldr	r2, [r2, #4]
 80042fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004302:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800430c:	d111      	bne.n	8004332 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004316:	d004      	beq.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004320:	d107      	bne.n	8004332 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004330:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433a:	d110      	bne.n	800435e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6819      	ldr	r1, [r3, #0]
 8004346:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800434a:	400b      	ands	r3, r1
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800435c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e00e      	b.n	8004390 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	401a      	ands	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	429a      	cmp	r2, r3
 8004380:	d101      	bne.n	8004386 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8004382:	2201      	movs	r2, #1
 8004384:	e000      	b.n	8004388 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8004386:	2200      	movs	r2, #0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	429a      	cmp	r2, r3
 800438c:	d1a3      	bne.n	80042d6 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2200      	movs	r2, #0
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff89 	bl	80042c6 <SPI_WaitFlagStateUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e000      	b.n	80043cc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e01d      	b.n	8004422 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f005 fcdc 	bl	8009db8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 f944 	bl	80046a0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d122      	bne.n	8004486 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d11b      	bne.n	8004486 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f06f 0202 	mvn.w	r2, #2
 8004456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8f8 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 8004472:	e005      	b.n	8004480 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f8ea 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8fb 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d122      	bne.n	80044da <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d11b      	bne.n	80044da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f06f 0204 	mvn.w	r2, #4
 80044aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8ce 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 80044c6:	e005      	b.n	80044d4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f8c0 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8d1 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d122      	bne.n	800452e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d11b      	bne.n	800452e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0208 	mvn.w	r2, #8
 80044fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2204      	movs	r2, #4
 8004504:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8a4 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 800451a:	e005      	b.n	8004528 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f896 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8a7 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d122      	bne.n	8004582 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d11b      	bne.n	8004582 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f06f 0210 	mvn.w	r2, #16
 8004552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2208      	movs	r2, #8
 8004558:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f87a 	bl	8004662 <HAL_TIM_IC_CaptureCallback>
 800456e:	e005      	b.n	800457c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f86c 	bl	800464e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f87d 	bl	8004676 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d10e      	bne.n	80045ae <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f06f 0201 	mvn.w	r2, #1
 80045a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f846 	bl	800463a <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f95c 	bl	8004892 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d10e      	bne.n	8004606 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d107      	bne.n	8004606 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f842 	bl	800468a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d10e      	bne.n	8004632 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b20      	cmp	r3, #32
 8004620:	d107      	bne.n	8004632 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0220 	mvn.w	r2, #32
 800462a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f926 	bl	800487e <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a44      	ldr	r2, [pc, #272]	; (80047c8 <TIM_Base_SetConfig+0x128>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x44>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x44>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a41      	ldr	r2, [pc, #260]	; (80047cc <TIM_Base_SetConfig+0x12c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x44>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a40      	ldr	r2, [pc, #256]	; (80047d0 <TIM_Base_SetConfig+0x130>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x44>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3f      	ldr	r2, [pc, #252]	; (80047d4 <TIM_Base_SetConfig+0x134>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x44>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3e      	ldr	r2, [pc, #248]	; (80047d8 <TIM_Base_SetConfig+0x138>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <TIM_Base_SetConfig+0x48>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <TIM_Base_SetConfig+0x4a>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a31      	ldr	r2, [pc, #196]	; (80047c8 <TIM_Base_SetConfig+0x128>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02b      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470e:	d027      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <TIM_Base_SetConfig+0x12c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d023      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a2d      	ldr	r2, [pc, #180]	; (80047d0 <TIM_Base_SetConfig+0x130>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d01f      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2c      	ldr	r2, [pc, #176]	; (80047d4 <TIM_Base_SetConfig+0x134>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01b      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a2b      	ldr	r2, [pc, #172]	; (80047d8 <TIM_Base_SetConfig+0x138>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d017      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2a      	ldr	r2, [pc, #168]	; (80047dc <TIM_Base_SetConfig+0x13c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a29      	ldr	r2, [pc, #164]	; (80047e0 <TIM_Base_SetConfig+0x140>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00f      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a28      	ldr	r2, [pc, #160]	; (80047e4 <TIM_Base_SetConfig+0x144>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00b      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <TIM_Base_SetConfig+0x148>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d007      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a26      	ldr	r2, [pc, #152]	; (80047ec <TIM_Base_SetConfig+0x14c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d003      	beq.n	8004760 <TIM_Base_SetConfig+0xc0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a25      	ldr	r2, [pc, #148]	; (80047f0 <TIM_Base_SetConfig+0x150>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d101      	bne.n	8004764 <TIM_Base_SetConfig+0xc4>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <TIM_Base_SetConfig+0xc6>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <TIM_Base_SetConfig+0x128>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x102>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <TIM_Base_SetConfig+0x138>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <TIM_Base_SetConfig+0x106>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <TIM_Base_SetConfig+0x108>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	615a      	str	r2, [r3, #20]
}
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800
 80047e8:	40001800 	.word	0x40001800
 80047ec:	40001c00 	.word	0x40001c00
 80047f0:	40002000 	.word	0x40002000

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e032      	b.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800482a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	6851      	ldr	r1, [r2, #4]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800484c:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	6891      	ldr	r1, [r2, #8]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	6852      	ldr	r2, [r2, #4]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
} 
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d029      	beq.n	8004914 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048d0:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048da:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80048e0:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80048e6:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80048ec:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80048f2:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80048f8:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80048fe:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8004904:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e034      	b.n	800497e <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004920:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800492a:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004930:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004948:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004952:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8004958:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800495e:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004964:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800496a:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	4313      	orrs	r3, r2
 8004970:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d02e      	beq.n	8004a04 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049b2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049c2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049cc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049d6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	3b01      	subs	r3, #1
 80049de:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049e0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049ea:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049f4:	4313      	orrs	r3, r2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	e03b      	b.n	8004a7c <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a14:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a26:	4313      	orrs	r3, r2
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a3a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a4a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a54:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a5e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004aa6:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8004ab0:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004ac2:	f7fb fd83 	bl	80005cc <HAL_GetTick>
 8004ac6:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004ac8:	e010      	b.n	8004aec <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad0:	d00c      	beq.n	8004aec <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <FMC_SDRAM_SendCommand+0x5e>
 8004ad8:	f7fb fd78 	bl	80005cc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad2      	subs	r2, r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d901      	bls.n	8004aec <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e8      	bne.n	8004aca <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3a:	2b84      	cmp	r3, #132	; 0x84
 8004b3c:	d005      	beq.n	8004b4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	3303      	adds	r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b5c:	f000 fe06 	bl	800576c <vTaskStartScheduler>
  
  return osOK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685c      	ldr	r4, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b7c:	b29e      	uxth	r6, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ffcf 	bl	8004b28 <makeFreeRtosPriority>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f107 030c 	add.w	r3, r7, #12
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	9200      	str	r2, [sp, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4632      	mov	r2, r6
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fc88 	bl	80054b0 <xTaskCreate>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d001      	beq.n	8004baa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e000      	b.n	8004bac <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bb4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <osDelay+0x16>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	e000      	b.n	8004bcc <osDelay+0x18>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fd99 	bl	8005704 <vTaskDelay>
  
  return osOK;
 8004bd2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004be0:	f001 f894 	bl	8005d0c <xTaskGetSchedulerState>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8004bea:	f000 fa45 	bl	8005078 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f103 0208 	add.w	r2, r3, #8
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c0a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f103 0208 	add.w	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f103 0208 	add.w	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004caa:	d103      	bne.n	8004cb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e00c      	b.n	8004cce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3308      	adds	r3, #8
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	e002      	b.n	8004cc2 <vListInsert+0x2e>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d9f6      	bls.n	8004cbc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	6852      	ldr	r2, [r2, #4]
 8004d26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d103      	bne.n	8004d3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <pxPortInitialiseStack+0x64>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b14      	subs	r3, #20
 8004d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b04      	subs	r3, #4
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f06f 0202 	mvn.w	r2, #2
 8004daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3b20      	subs	r3, #32
 8004db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	08004dc5 	.word	0x08004dc5

08004dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <prvTaskExitError+0x38>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd2:	d009      	beq.n	8004de8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	e7fe      	b.n	8004de6 <prvTaskExitError+0x22>
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004dfa:	e7fe      	b.n	8004dfa <prvTaskExitError+0x36>
 8004dfc:	20000008 	.word	0x20000008

08004e00 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <pxCurrentTCBConst2>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f380 8809 	msr	PSP, r0
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8811 	msr	BASEPRI, r0
 8004e1a:	4770      	bx	lr
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst2>:
 8004e20:	20003c84 	.word	0x20003c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e28:	4806      	ldr	r0, [pc, #24]	; (8004e44 <prvPortStartFirstTask+0x1c>)
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f380 8808 	msr	MSP, r0
 8004e32:	b662      	cpsie	i
 8004e34:	b661      	cpsie	f
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	df00      	svc	0
 8004e40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e42:	bf00      	nop
 8004e44:	e000ed08 	.word	0xe000ed08

08004e48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <xPortStartScheduler+0xf4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <xPortStartScheduler+0xf8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d109      	bne.n	8004e6c <xPortStartScheduler+0x24>
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e7fe      	b.n	8004e6a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <xPortStartScheduler+0xf4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a34      	ldr	r2, [pc, #208]	; (8004f44 <xPortStartScheduler+0xfc>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d109      	bne.n	8004e8a <xPortStartScheduler+0x42>
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	e7fe      	b.n	8004e88 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e8a:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <xPortStartScheduler+0x100>)
 8004e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	22ff      	movs	r2, #255	; 0xff
 8004e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <xPortStartScheduler+0x104>)
 8004eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eb2:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <xPortStartScheduler+0x108>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb8:	e009      	b.n	8004ece <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004eba:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <xPortStartScheduler+0x108>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	4a23      	ldr	r2, [pc, #140]	; (8004f50 <xPortStartScheduler+0x108>)
 8004ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d0ef      	beq.n	8004eba <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eda:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <xPortStartScheduler+0x108>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <xPortStartScheduler+0x108>)
 8004ee2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <xPortStartScheduler+0x108>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <xPortStartScheduler+0x108>)
 8004eee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ef8:	4a16      	ldr	r2, [pc, #88]	; (8004f54 <xPortStartScheduler+0x10c>)
 8004efa:	4b16      	ldr	r3, [pc, #88]	; (8004f54 <xPortStartScheduler+0x10c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <xPortStartScheduler+0x10c>)
 8004f06:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <xPortStartScheduler+0x10c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f0e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f10:	f000 f8d2 	bl	80050b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f14:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <xPortStartScheduler+0x110>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f1a:	f000 f8e9 	bl	80050f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <xPortStartScheduler+0x114>)
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <xPortStartScheduler+0x114>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f28:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f2a:	f7ff ff7d 	bl	8004e28 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8004f2e:	f7ff ff49 	bl	8004dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	e000ed00 	.word	0xe000ed00
 8004f40:	410fc271 	.word	0x410fc271
 8004f44:	410fc270 	.word	0x410fc270
 8004f48:	e000e400 	.word	0xe000e400
 8004f4c:	20000064 	.word	0x20000064
 8004f50:	20000068 	.word	0x20000068
 8004f54:	e000ed20 	.word	0xe000ed20
 8004f58:	20000008 	.word	0x20000008
 8004f5c:	e000ef34 	.word	0xe000ef34

08004f60 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <vPortEnterCritical+0x54>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	4a0d      	ldr	r2, [pc, #52]	; (8004fb4 <vPortEnterCritical+0x54>)
 8004f80:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <vPortEnterCritical+0x54>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10e      	bne.n	8004fa8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <vPortEnterCritical+0x58>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <vPortEnterCritical+0x48>
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	e7fe      	b.n	8004fa6 <vPortEnterCritical+0x46>
	}
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20000008 	.word	0x20000008
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <vPortExitCritical+0x4c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <vPortExitCritical+0x22>
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	e7fe      	b.n	8004fdc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004fde:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <vPortExitCritical+0x4c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <vPortExitCritical+0x4c>)
 8004fe6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <vPortExitCritical+0x4c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <vPortExitCritical+0x3e>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000008 	.word	0x20000008
 800500c:	00000000 	.word	0x00000000

08005010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005010:	f3ef 8009 	mrs	r0, PSP
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <pxCurrentTCBConst>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f01e 0f10 	tst.w	lr, #16
 8005020:	bf08      	it	eq
 8005022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502a:	6010      	str	r0, [r2, #0]
 800502c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005030:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005034:	f380 8811 	msr	BASEPRI, r0
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f000 fd40 	bl	8005ac4 <vTaskSwitchContext>
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	f380 8811 	msr	BASEPRI, r0
 800504c:	bc08      	pop	{r3}
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	6808      	ldr	r0, [r1, #0]
 8005052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005056:	f01e 0f10 	tst.w	lr, #16
 800505a:	bf08      	it	eq
 800505c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005060:	f380 8809 	msr	PSP, r0
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	f3af 8000 	nop.w

08005070 <pxCurrentTCBConst>:
 8005070:	20003c84 	.word	0x20003c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop

08005078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005090:	f000 fc5c 	bl	800594c <xTaskIncrementTick>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <xPortSysTickHandler+0x3c>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	e000ed04 	.word	0xe000ed04

080050b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <vPortSetupTimerInterrupt+0x28>)
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <vPortSetupTimerInterrupt+0x2c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4909      	ldr	r1, [pc, #36]	; (80050e8 <vPortSetupTimerInterrupt+0x30>)
 80050c4:	fba1 1303 	umull	r1, r3, r1, r3
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b07      	ldr	r3, [pc, #28]	; (80050ec <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e014 	.word	0xe000e014
 80050e4:	20000014 	.word	0x20000014
 80050e8:	10624dd3 	.word	0x10624dd3
 80050ec:	e000e010 	.word	0xe000e010

080050f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005100 <vPortEnableVFP+0x10>
 80050f4:	6801      	ldr	r1, [r0, #0]
 80050f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fa:	6001      	str	r1, [r0, #0]
 80050fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050fe:	bf00      	nop
 8005100:	e000ed88 	.word	0xe000ed88

08005104 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005110:	f000 fb72 	bl	80057f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005114:	4b57      	ldr	r3, [pc, #348]	; (8005274 <pvPortMalloc+0x170>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800511c:	f000 f90c 	bl	8005338 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005120:	4b55      	ldr	r3, [pc, #340]	; (8005278 <pvPortMalloc+0x174>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	f040 808c 	bne.w	8005246 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005134:	2208      	movs	r2, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b00      	cmp	r3, #0
 8005144:	d013      	beq.n	800516e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f023 0307 	bic.w	r3, r3, #7
 800514c:	3308      	adds	r3, #8
 800514e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d009      	beq.n	800516e <pvPortMalloc+0x6a>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	e7fe      	b.n	800516c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d068      	beq.n	8005246 <pvPortMalloc+0x142>
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <pvPortMalloc+0x178>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d863      	bhi.n	8005246 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800517e:	4b40      	ldr	r3, [pc, #256]	; (8005280 <pvPortMalloc+0x17c>)
 8005180:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005182:	4b3f      	ldr	r3, [pc, #252]	; (8005280 <pvPortMalloc+0x17c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005188:	e004      	b.n	8005194 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	429a      	cmp	r2, r3
 800519c:	d203      	bcs.n	80051a6 <pvPortMalloc+0xa2>
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f1      	bne.n	800518a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051a6:	4b33      	ldr	r3, [pc, #204]	; (8005274 <pvPortMalloc+0x170>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d04a      	beq.n	8005246 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	4413      	add	r3, r2
 80051b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	2308      	movs	r3, #8
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d91e      	bls.n	8005210 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <pvPortMalloc+0xf4>
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	e7fe      	b.n	80051f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800520a:	69b8      	ldr	r0, [r7, #24]
 800520c:	f000 f8f6 	bl	80053fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <pvPortMalloc+0x178>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	4a18      	ldr	r2, [pc, #96]	; (800527c <pvPortMalloc+0x178>)
 800521c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <pvPortMalloc+0x178>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <pvPortMalloc+0x180>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d203      	bcs.n	8005232 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800522a:	4b14      	ldr	r3, [pc, #80]	; (800527c <pvPortMalloc+0x178>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <pvPortMalloc+0x180>)
 8005230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <pvPortMalloc+0x174>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	431a      	orrs	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005246:	f000 fae5 	bl	8005814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <pvPortMalloc+0x164>
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	e7fe      	b.n	8005266 <pvPortMalloc+0x162>
	return pvReturn;
 8005268:	69fb      	ldr	r3, [r7, #28]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	; 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20003c74 	.word	0x20003c74
 8005278:	20003c80 	.word	0x20003c80
 800527c:	20003c78 	.word	0x20003c78
 8005280:	20003c6c 	.word	0x20003c6c
 8005284:	20003c7c 	.word	0x20003c7c

08005288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d046      	beq.n	8005328 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800529a:	2308      	movs	r3, #8
 800529c:	425b      	negs	r3, r3
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4413      	add	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <vPortFree+0xa8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <vPortFree+0x42>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e7fe      	b.n	80052c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <vPortFree+0x5e>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	e7fe      	b.n	80052e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <vPortFree+0xa8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d019      	beq.n	8005328 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d115      	bne.n	8005328 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <vPortFree+0xa8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	43db      	mvns	r3, r3
 8005306:	401a      	ands	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800530c:	f000 fa74 	bl	80057f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4b07      	ldr	r3, [pc, #28]	; (8005334 <vPortFree+0xac>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4413      	add	r3, r2
 800531a:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vPortFree+0xac>)
 800531c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f000 f86c 	bl	80053fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005324:	f000 fa76 	bl	8005814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005328:	bf00      	nop
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20003c80 	.word	0x20003c80
 8005334:	20003c78 	.word	0x20003c78

08005338 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800533e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005342:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <prvHeapInit+0xac>)
 8005346:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3307      	adds	r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <prvHeapInit+0xac>)
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <prvHeapInit+0xb0>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <prvHeapInit+0xb0>)
 8005378:	2200      	movs	r2, #0
 800537a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	4413      	add	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005384:	2208      	movs	r2, #8
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a15      	ldr	r2, [pc, #84]	; (80053ec <prvHeapInit+0xb4>)
 8005398:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800539a:	4b14      	ldr	r3, [pc, #80]	; (80053ec <prvHeapInit+0xb4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <prvHeapInit+0xb4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <prvHeapInit+0xb4>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a0a      	ldr	r2, [pc, #40]	; (80053f0 <prvHeapInit+0xb8>)
 80053c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <prvHeapInit+0xbc>)
 80053ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053d0:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <prvHeapInit+0xc0>)
 80053d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	2000006c 	.word	0x2000006c
 80053e8:	20003c6c 	.word	0x20003c6c
 80053ec:	20003c74 	.word	0x20003c74
 80053f0:	20003c7c 	.word	0x20003c7c
 80053f4:	20003c78 	.word	0x20003c78
 80053f8:	20003c80 	.word	0x20003c80

080053fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005404:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <prvInsertBlockIntoFreeList+0xac>)
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e002      	b.n	8005410 <prvInsertBlockIntoFreeList+0x14>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3f7      	bcc.n	800540a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d108      	bne.n	800543e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	441a      	add	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	441a      	add	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d118      	bne.n	8005484 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <prvInsertBlockIntoFreeList+0xb0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d00d      	beq.n	800547a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	441a      	add	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e008      	b.n	800548c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <prvInsertBlockIntoFreeList+0xb0>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e003      	b.n	800548c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d002      	beq.n	800549a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20003c6c 	.word	0x20003c6c
 80054ac:	20003c74 	.word	0x20003c74

080054b0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af04      	add	r7, sp, #16
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fe1d 	bl	8005104 <pvPortMalloc>
 80054ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80054d2:	2054      	movs	r0, #84	; 0x54
 80054d4:	f7ff fe16 	bl	8005104 <pvPortMalloc>
 80054d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
 80054e6:	e005      	b.n	80054f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f7ff fecd 	bl	8005288 <vPortFree>
 80054ee:	e001      	b.n	80054f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d013      	beq.n	8005522 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	2300      	movs	r3, #0
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f80e 	bl	8005532 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005516:	69f8      	ldr	r0, [r7, #28]
 8005518:	f000 f88a 	bl	8005630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e002      	b.n	8005528 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005526:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005528:	69bb      	ldr	r3, [r7, #24]
	}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b088      	sub	sp, #32
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800554a:	3b01      	subs	r3, #1
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	2b00      	cmp	r3, #0
 8005562:	d009      	beq.n	8005578 <prvInitialiseNewTask+0x46>
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e7fe      	b.n	8005576 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e012      	b.n	80055a4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	7819      	ldrb	r1, [r3, #0]
 8005586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	3334      	adds	r3, #52	; 0x34
 800558e:	460a      	mov	r2, r1
 8005590:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d006      	beq.n	80055ac <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b0f      	cmp	r3, #15
 80055a8:	d9e9      	bls.n	800557e <prvInitialiseNewTask+0x4c>
 80055aa:	e000      	b.n	80055ae <prvInitialiseNewTask+0x7c>
		{
			break;
 80055ac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d901      	bls.n	80055c0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055bc:	2306      	movs	r3, #6
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2200      	movs	r2, #0
 80055d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fb2b 	bl	8004c32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	3318      	adds	r3, #24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fb26 	bl	8004c32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f1c3 0207 	rsb	r2, r3, #7
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	2200      	movs	r2, #0
 8005600:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68f9      	ldr	r1, [r7, #12]
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f7ff fba4 	bl	8004d5c <pxPortInitialiseStack>
 8005614:	4602      	mov	r2, r0
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3720      	adds	r7, #32
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005638:	f7ff fc92 	bl	8004f60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800563c:	4b2a      	ldr	r3, [pc, #168]	; (80056e8 <prvAddNewTaskToReadyList+0xb8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <prvAddNewTaskToReadyList+0xb8>)
 8005644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005646:	4b29      	ldr	r3, [pc, #164]	; (80056ec <prvAddNewTaskToReadyList+0xbc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800564e:	4a27      	ldr	r2, [pc, #156]	; (80056ec <prvAddNewTaskToReadyList+0xbc>)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <prvAddNewTaskToReadyList+0xb8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d110      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800565c:	f000 faa4 	bl	8005ba8 <prvInitialiseTaskLists>
 8005660:	e00d      	b.n	800567e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005662:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <prvAddNewTaskToReadyList+0xc0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <prvAddNewTaskToReadyList+0xbc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	429a      	cmp	r2, r3
 8005676:	d802      	bhi.n	800567e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005678:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <prvAddNewTaskToReadyList+0xbc>)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	4a1b      	ldr	r2, [pc, #108]	; (80056f4 <prvAddNewTaskToReadyList+0xc4>)
 8005686:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	2201      	movs	r2, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4313      	orrs	r3, r2
 8005696:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <prvAddNewTaskToReadyList+0xc8>)
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <prvAddNewTaskToReadyList+0xcc>)
 80056a8:	441a      	add	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7ff facb 	bl	8004c4c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056b6:	f7ff fc81 	bl	8004fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <prvAddNewTaskToReadyList+0xc0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00e      	beq.n	80056e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056c2:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <prvAddNewTaskToReadyList+0xbc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d207      	bcs.n	80056e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <prvAddNewTaskToReadyList+0xd0>)
 80056d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20003d84 	.word	0x20003d84
 80056ec:	20003c84 	.word	0x20003c84
 80056f0:	20003d90 	.word	0x20003d90
 80056f4:	20003da0 	.word	0x20003da0
 80056f8:	20003d8c 	.word	0x20003d8c
 80056fc:	20003c88 	.word	0x20003c88
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005716:	4b13      	ldr	r3, [pc, #76]	; (8005764 <vTaskDelay+0x60>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <vTaskDelay+0x2e>
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	e7fe      	b.n	8005730 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005732:	f000 f861 	bl	80057f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005736:	2100      	movs	r1, #0
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fb05 	bl	8005d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800573e:	f000 f869 	bl	8005814 <xTaskResumeAll>
 8005742:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d107      	bne.n	800575a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <vTaskDelay+0x64>)
 800574c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20003dac 	.word	0x20003dac
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <vTaskStartScheduler+0x74>)
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	2300      	movs	r3, #0
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	2300      	movs	r3, #0
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	4919      	ldr	r1, [pc, #100]	; (80057e4 <vTaskStartScheduler+0x78>)
 8005780:	4819      	ldr	r0, [pc, #100]	; (80057e8 <vTaskStartScheduler+0x7c>)
 8005782:	f7ff fe95 	bl	80054b0 <xTaskCreate>
 8005786:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d115      	bne.n	80057ba <vTaskStartScheduler+0x4e>
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <vTaskStartScheduler+0x80>)
 80057a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <vTaskStartScheduler+0x84>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <vTaskStartScheduler+0x88>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057b4:	f7ff fb48 	bl	8004e48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057b8:	e00d      	b.n	80057d6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c0:	d109      	bne.n	80057d6 <vTaskStartScheduler+0x6a>
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	e7fe      	b.n	80057d4 <vTaskStartScheduler+0x68>
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20003da8 	.word	0x20003da8
 80057e4:	08012cd8 	.word	0x08012cd8
 80057e8:	08005b79 	.word	0x08005b79
 80057ec:	20003da4 	.word	0x20003da4
 80057f0:	20003d90 	.word	0x20003d90
 80057f4:	20003d88 	.word	0x20003d88

080057f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <vTaskSuspendAll+0x18>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a03      	ldr	r2, [pc, #12]	; (8005810 <vTaskSuspendAll+0x18>)
 8005804:	6013      	str	r3, [r2, #0]
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	20003dac 	.word	0x20003dac

08005814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005822:	4b41      	ldr	r3, [pc, #260]	; (8005928 <xTaskResumeAll+0x114>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <xTaskResumeAll+0x2a>
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	e7fe      	b.n	800583c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800583e:	f7ff fb8f 	bl	8004f60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <xTaskResumeAll+0x114>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3b01      	subs	r3, #1
 8005848:	4a37      	ldr	r2, [pc, #220]	; (8005928 <xTaskResumeAll+0x114>)
 800584a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <xTaskResumeAll+0x114>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d161      	bne.n	8005918 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005854:	4b35      	ldr	r3, [pc, #212]	; (800592c <xTaskResumeAll+0x118>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05d      	beq.n	8005918 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800585c:	e02e      	b.n	80058bc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800585e:	4b34      	ldr	r3, [pc, #208]	; (8005930 <xTaskResumeAll+0x11c>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3318      	adds	r3, #24
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fa4b 	bl	8004d06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fa46 	bl	8004d06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	2201      	movs	r2, #1
 8005880:	409a      	lsls	r2, r3
 8005882:	4b2c      	ldr	r3, [pc, #176]	; (8005934 <xTaskResumeAll+0x120>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	4a2a      	ldr	r2, [pc, #168]	; (8005934 <xTaskResumeAll+0x120>)
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4a27      	ldr	r2, [pc, #156]	; (8005938 <xTaskResumeAll+0x124>)
 800589a:	441a      	add	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3304      	adds	r3, #4
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f7ff f9d2 	bl	8004c4c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ac:	4b23      	ldr	r3, [pc, #140]	; (800593c <xTaskResumeAll+0x128>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <xTaskResumeAll+0x12c>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058bc:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <xTaskResumeAll+0x11c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1cc      	bne.n	800585e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ca:	f000 f9f9 	bl	8005cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <xTaskResumeAll+0x130>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058da:	f000 f837 	bl	800594c <xTaskIncrementTick>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80058e4:	4b16      	ldr	r3, [pc, #88]	; (8005940 <xTaskResumeAll+0x12c>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80058f6:	4b13      	ldr	r3, [pc, #76]	; (8005944 <xTaskResumeAll+0x130>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058fc:	4b10      	ldr	r3, [pc, #64]	; (8005940 <xTaskResumeAll+0x12c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005904:	2301      	movs	r3, #1
 8005906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <xTaskResumeAll+0x134>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005918:	f7ff fb50 	bl	8004fbc <vPortExitCritical>

	return xAlreadyYielded;
 800591c:	68bb      	ldr	r3, [r7, #8]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20003dac 	.word	0x20003dac
 800592c:	20003d84 	.word	0x20003d84
 8005930:	20003d44 	.word	0x20003d44
 8005934:	20003d8c 	.word	0x20003d8c
 8005938:	20003c88 	.word	0x20003c88
 800593c:	20003c84 	.word	0x20003c84
 8005940:	20003d98 	.word	0x20003d98
 8005944:	20003d94 	.word	0x20003d94
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <xTaskIncrementTick+0x14c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 808c 	bne.w	8005a78 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8005960:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <xTaskIncrementTick+0x150>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005968:	4a4c      	ldr	r2, [pc, #304]	; (8005a9c <xTaskIncrementTick+0x150>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11f      	bne.n	80059b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005974:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <xTaskIncrementTick+0x154>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <xTaskIncrementTick+0x46>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	e7fe      	b.n	8005990 <xTaskIncrementTick+0x44>
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <xTaskIncrementTick+0x154>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <xTaskIncrementTick+0x158>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <xTaskIncrementTick+0x154>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4a40      	ldr	r2, [pc, #256]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b40      	ldr	r3, [pc, #256]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	4a3e      	ldr	r2, [pc, #248]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	f000 f986 	bl	8005cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059b4:	4b3d      	ldr	r3, [pc, #244]	; (8005aac <xTaskIncrementTick+0x160>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d34d      	bcc.n	8005a5a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059be:	4b38      	ldr	r3, [pc, #224]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <xTaskIncrementTick+0x80>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <xTaskIncrementTick+0x82>
 80059cc:	2300      	movs	r3, #0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d2:	4b36      	ldr	r3, [pc, #216]	; (8005aac <xTaskIncrementTick+0x160>)
 80059d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059d8:	601a      	str	r2, [r3, #0]
					break;
 80059da:	e03e      	b.n	8005a5a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059dc:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d203      	bcs.n	80059fc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059f4:	4a2d      	ldr	r2, [pc, #180]	; (8005aac <xTaskIncrementTick+0x160>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
						break;
 80059fa:	e02e      	b.n	8005a5a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f980 	bl	8004d06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff f977 	bl	8004d06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a38:	441a      	add	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7ff f903 	bl	8004c4c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3b4      	bcc.n	80059be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a58:	e7b1      	b.n	80059be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4914      	ldr	r1, [pc, #80]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d907      	bls.n	8005a82 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e004      	b.n	8005a82 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a78:	4b10      	ldr	r3, [pc, #64]	; (8005abc <xTaskIncrementTick+0x170>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	4a0f      	ldr	r2, [pc, #60]	; (8005abc <xTaskIncrementTick+0x170>)
 8005a80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a82:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <xTaskIncrementTick+0x174>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a8e:	697b      	ldr	r3, [r7, #20]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20003dac 	.word	0x20003dac
 8005a9c:	20003d88 	.word	0x20003d88
 8005aa0:	20003d3c 	.word	0x20003d3c
 8005aa4:	20003d40 	.word	0x20003d40
 8005aa8:	20003d9c 	.word	0x20003d9c
 8005aac:	20003da4 	.word	0x20003da4
 8005ab0:	20003d8c 	.word	0x20003d8c
 8005ab4:	20003c88 	.word	0x20003c88
 8005ab8:	20003c84 	.word	0x20003c84
 8005abc:	20003d94 	.word	0x20003d94
 8005ac0:	20003d98 	.word	0x20003d98

08005ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aca:	4b26      	ldr	r3, [pc, #152]	; (8005b64 <vTaskSwitchContext+0xa0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ad2:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <vTaskSwitchContext+0xa4>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ad8:	e03e      	b.n	8005b58 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005ada:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <vTaskSwitchContext+0xa4>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005ae0:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <vTaskSwitchContext+0xa8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	fab3 f383 	clz	r3, r3
 8005aec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	f1c3 031f 	rsb	r3, r3, #31
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	491e      	ldr	r1, [pc, #120]	; (8005b70 <vTaskSwitchContext+0xac>)
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <vTaskSwitchContext+0x5a>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	e7fe      	b.n	8005b1c <vTaskSwitchContext+0x58>
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a11      	ldr	r2, [pc, #68]	; (8005b70 <vTaskSwitchContext+0xac>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d104      	bne.n	8005b4e <vTaskSwitchContext+0x8a>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4a07      	ldr	r2, [pc, #28]	; (8005b74 <vTaskSwitchContext+0xb0>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20003dac 	.word	0x20003dac
 8005b68:	20003d98 	.word	0x20003d98
 8005b6c:	20003d8c 	.word	0x20003d8c
 8005b70:	20003c88 	.word	0x20003c88
 8005b74:	20003c84 	.word	0x20003c84

08005b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b80:	f000 f852 	bl	8005c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <prvIdleTask+0x28>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d9f9      	bls.n	8005b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <prvIdleTask+0x2c>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b9c:	e7f0      	b.n	8005b80 <prvIdleTask+0x8>
 8005b9e:	bf00      	nop
 8005ba0:	20003c88 	.word	0x20003c88
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e00c      	b.n	8005bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <prvInitialiseTaskLists+0x60>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff f815 	bl	8004bf2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d9ef      	bls.n	8005bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bd4:	480d      	ldr	r0, [pc, #52]	; (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bd6:	f7ff f80c 	bl	8004bf2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bda:	480d      	ldr	r0, [pc, #52]	; (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bdc:	f7ff f809 	bl	8004bf2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005be0:	480c      	ldr	r0, [pc, #48]	; (8005c14 <prvInitialiseTaskLists+0x6c>)
 8005be2:	f7ff f806 	bl	8004bf2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005be6:	480c      	ldr	r0, [pc, #48]	; (8005c18 <prvInitialiseTaskLists+0x70>)
 8005be8:	f7ff f803 	bl	8004bf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bec:	480b      	ldr	r0, [pc, #44]	; (8005c1c <prvInitialiseTaskLists+0x74>)
 8005bee:	f7ff f800 	bl	8004bf2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <prvInitialiseTaskLists+0x78>)
 8005bf4:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <prvInitialiseTaskLists+0x7c>)
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20003c88 	.word	0x20003c88
 8005c0c:	20003d14 	.word	0x20003d14
 8005c10:	20003d28 	.word	0x20003d28
 8005c14:	20003d44 	.word	0x20003d44
 8005c18:	20003d58 	.word	0x20003d58
 8005c1c:	20003d70 	.word	0x20003d70
 8005c20:	20003d3c 	.word	0x20003d3c
 8005c24:	20003d40 	.word	0x20003d40

08005c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2e:	e028      	b.n	8005c82 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8005c30:	f7ff fde2 	bl	80057f8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8005c34:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <prvCheckTasksWaitingTermination+0x6c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8005c44:	f7ff fde6 	bl	8005814 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d119      	bne.n	8005c82 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8005c4e:	f7ff f987 	bl	8004f60 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005c52:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <prvCheckTasksWaitingTermination+0x6c>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f851 	bl	8004d06 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8005c64:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <prvCheckTasksWaitingTermination+0x70>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	4a0b      	ldr	r2, [pc, #44]	; (8005c98 <prvCheckTasksWaitingTermination+0x70>)
 8005c6c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <prvCheckTasksWaitingTermination+0x74>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <prvCheckTasksWaitingTermination+0x74>)
 8005c76:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8005c78:	f7ff f9a0 	bl	8004fbc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8005c7c:	6838      	ldr	r0, [r7, #0]
 8005c7e:	f000 f80f 	bl	8005ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <prvCheckTasksWaitingTermination+0x74>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1d2      	bne.n	8005c30 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20003d58 	.word	0x20003d58
 8005c98:	20003d84 	.word	0x20003d84
 8005c9c:	20003d6c 	.word	0x20003d6c

08005ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff faeb 	bl	8005288 <vPortFree>
			vPortFree( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fae8 	bl	8005288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <prvResetNextTaskUnblockTime+0x44>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <prvResetNextTaskUnblockTime+0x14>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <prvResetNextTaskUnblockTime+0x16>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <prvResetNextTaskUnblockTime+0x48>)
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ce2:	e008      	b.n	8005cf6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <prvResetNextTaskUnblockTime+0x44>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <prvResetNextTaskUnblockTime+0x48>)
 8005cf4:	6013      	str	r3, [r2, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20003d3c 	.word	0x20003d3c
 8005d08:	20003da4 	.word	0x20003da4

08005d0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <xTaskGetSchedulerState+0x34>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e008      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <xTaskGetSchedulerState+0x38>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	e001      	b.n	8005d32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d32:	687b      	ldr	r3, [r7, #4]
	}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	20003d90 	.word	0x20003d90
 8005d44:	20003dac 	.word	0x20003dac

08005d48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d58:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe ffd1 	bl	8004d06 <uxListRemove>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	2201      	movs	r2, #1
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43da      	mvns	r2, r3
 8005d78:	4b21      	ldr	r3, [pc, #132]	; (8005e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	4a20      	ldr	r2, [pc, #128]	; (8005e00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d88:	d10a      	bne.n	8005da0 <prvAddCurrentTaskToDelayedList+0x58>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d90:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	481a      	ldr	r0, [pc, #104]	; (8005e04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d9a:	f7fe ff57 	bl	8004c4c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d9e:	e026      	b.n	8005dee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005da8:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d209      	bcs.n	8005dcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db8:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7fe ff65 	bl	8004c94 <vListInsert>
}
 8005dca:	e010      	b.n	8005dee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7fe ff5b 	bl	8004c94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dde:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d202      	bcs.n	8005dee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6013      	str	r3, [r2, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20003d88 	.word	0x20003d88
 8005dfc:	20003c84 	.word	0x20003c84
 8005e00:	20003d8c 	.word	0x20003d8c
 8005e04:	20003d70 	.word	0x20003d70
 8005e08:	20003d40 	.word	0x20003d40
 8005e0c:	20003d3c 	.word	0x20003d3c
 8005e10:	20003da4 	.word	0x20003da4

08005e14 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8005e18:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 8005e1c:	4803      	ldr	r0, [pc, #12]	; (8005e2c <GUI_X_Config+0x18>)
 8005e1e:	f00a fa15 	bl	801024c <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8005e22:	4803      	ldr	r0, [pc, #12]	; (8005e30 <GUI_X_Config+0x1c>)
 8005e24:	f009 fd8a 	bl	800f93c <GUI_SetDefaultFont>
}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20003db0 	.word	0x20003db0
 8005e30:	08013a30 	.word	0x08013a30

08005e34 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <Color2IndexBulk_M8888IDMA2D>:
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems);
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex);
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens);

DEFINEDMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b086      	sub	sp, #24
 8005e46:	af02      	add	r7, sp, #8
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	607a      	str	r2, [r7, #4]
 8005e4e:	70fb      	strb	r3, [r7, #3]
 8005e50:	78fa      	ldrb	r2, [r7, #3]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4613      	mov	r3, r2
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f001 f8b7 	bl	8006fd0 <DMA2D_Color2IndexBulk>
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <Index2ColorBulk_M8888IDMA2D>:
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af02      	add	r7, sp, #8
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	70fb      	strb	r3, [r7, #3]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f001 f889 	bl	8006f9c <DMA2D_Index2ColorBulk>
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <Color2IndexBulk_M888DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888)
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af02      	add	r7, sp, #8
 8005e98:	60f8      	str	r0, [r7, #12]
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	70fb      	strb	r3, [r7, #3]
 8005ea0:	78fa      	ldrb	r2, [r7, #3]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f001 f88f 	bl	8006fd0 <DMA2D_Color2IndexBulk>
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <Index2ColorBulk_M888DMA2D>:
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b086      	sub	sp, #24
 8005ebe:	af02      	add	r7, sp, #8
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	70fb      	strb	r3, [r7, #3]
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f001 f861 	bl	8006f9c <DMA2D_Index2ColorBulk>
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <Color2IndexBulk_M565DMA2D>:
DEFINEDMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af02      	add	r7, sp, #8
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	70fb      	strb	r3, [r7, #3]
 8005ef0:	78fa      	ldrb	r2, [r7, #3]
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f001 f867 	bl	8006fd0 <DMA2D_Color2IndexBulk>
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <Index2ColorBulk_M565DMA2D>:
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af02      	add	r7, sp, #8
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	70fb      	strb	r3, [r7, #3]
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f001 f839 	bl	8006f9c <DMA2D_Index2ColorBulk>
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <Color2IndexBulk_M1555IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b086      	sub	sp, #24
 8005f36:	af02      	add	r7, sp, #8
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	70fb      	strb	r3, [r7, #3]
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	2303      	movs	r3, #3
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f001 f83f 	bl	8006fd0 <DMA2D_Color2IndexBulk>
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <Index2ColorBulk_M1555IDMA2D>:
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b086      	sub	sp, #24
 8005f5e:	af02      	add	r7, sp, #8
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
 8005f66:	70fb      	strb	r3, [r7, #3]
 8005f68:	78fa      	ldrb	r2, [r7, #3]
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f001 f811 	bl	8006f9c <DMA2D_Index2ColorBulk>
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <Color2IndexBulk_M4444IDMA2D>:
DEFINEDMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af02      	add	r7, sp, #8
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	70fb      	strb	r3, [r7, #3]
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	2304      	movs	r3, #4
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f001 f817 	bl	8006fd0 <DMA2D_Color2IndexBulk>
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <Index2ColorBulk_M4444IDMA2D>:
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af02      	add	r7, sp, #8
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	70fb      	strb	r3, [r7, #3]
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	2304      	movs	r3, #4
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 ffe9 	bl	8006f9c <DMA2D_Index2ColorBulk>
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the specified LTDC.
  * @retval None
  */
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t Addr;
  uint32_t layer;

  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e066      	b.n	80060b0 <HAL_LTDC_LineEventCallback+0xdc>
  {
    if (layer_prop[layer].pending_buffer >= 0)
 8005fe2:	4939      	ldr	r1, [pc, #228]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	db58      	blt.n	80060aa <HAL_LTDC_LineEventCallback+0xd6>
    {
      /* Calculate address of buffer to be used  as visible frame buffer */
      Addr = layer_prop[layer].address + layer_prop[layer].xSize * layer_prop[layer].ySize * layer_prop[layer].pending_buffer * layer_prop[layer].BytesPerPixel;
 8005ff8:	4933      	ldr	r1, [pc, #204]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	6819      	ldr	r1, [r3, #0]
 8006008:	482f      	ldr	r0, [pc, #188]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	4613      	mov	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	1a9b      	subs	r3, r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4403      	add	r3, r0
 8006016:	330c      	adds	r3, #12
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	4c2b      	ldr	r4, [pc, #172]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4613      	mov	r3, r2
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4423      	add	r3, r4
 8006028:	3310      	adds	r3, #16
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	fb03 f000 	mul.w	r0, r3, r0
 8006030:	4c25      	ldr	r4, [pc, #148]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4613      	mov	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4423      	add	r3, r4
 800603e:	3304      	adds	r3, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	fb03 f000 	mul.w	r0, r3, r0
 8006046:	4c20      	ldr	r4, [pc, #128]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4423      	add	r3, r4
 8006054:	3314      	adds	r3, #20
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	fb03 f300 	mul.w	r3, r3, r0
 800605c:	440b      	add	r3, r1
 800605e:	60bb      	str	r3, [r7, #8]
      HAL_LTDC_SetAddress(hltdc, Addr, layer);
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fc ff0c 	bl	8002e82 <HAL_LTDC_SetAddress>

	  __HAL_LTDC_RELOAD_CONFIG(hltdc);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Notify STemWin that buffer is used */
      GUI_MULTIBUF_ConfirmEx(layer, layer_prop[layer].pending_buffer);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	4912      	ldr	r1, [pc, #72]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4613      	mov	r3, r2
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3304      	adds	r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	f008 fcf4 	bl	800ea7c <GUI_MULTIBUF_ConfirmEx>

      /* Clear pending buffer flag of layer */
      layer_prop[layer].pending_buffer = -1;
 8006094:	490c      	ldr	r1, [pc, #48]	; (80060c8 <HAL_LTDC_LineEventCallback+0xf4>)
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4613      	mov	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	3304      	adds	r3, #4
 80060a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060a8:	601a      	str	r2, [r3, #0]
  for (layer = 0; layer < GUI_NUM_LAYERS; layer++)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d995      	bls.n	8005fe2 <HAL_LTDC_LineEventCallback+0xe>
    }
  }

  HAL_LTDC_ProgramLineEvent(hltdc, 0);
 80060b6:	2100      	movs	r1, #0
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fc ff19 	bl	8002ef0 <HAL_LTDC_ProgramLineEvent>
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd90      	pop	{r4, r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200235f0 	.word	0x200235f0

080060cc <LCD_X_Config>:
  *          display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
  uint32_t i;

  LCD_LL_Init();
 80060d2:	f000 faa9 	bl	8006628 <LCD_LL_Init>
      GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
    }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 80060d6:	2300      	movs	r3, #0
 80060d8:	2200      	movs	r2, #0
 80060da:	496c      	ldr	r1, [pc, #432]	; (800628c <LCD_X_Config+0x1c0>)
 80060dc:	486c      	ldr	r0, [pc, #432]	; (8006290 <LCD_X_Config+0x1c4>)
 80060de:	f009 fbbd 	bl	800f85c <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 80060e2:	2000      	movs	r0, #0
 80060e4:	f006 fdd2 	bl	800cc8c <LCD_GetSwapXYEx>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <LCD_X_Config+0x3c>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 80060ee:	22f0      	movs	r2, #240	; 0xf0
 80060f0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80060f4:	2000      	movs	r0, #0
 80060f6:	f006 fd1f 	bl	800cb38 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 80060fa:	22f0      	movs	r2, #240	; 0xf0
 80060fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006100:	2000      	movs	r0, #0
 8006102:	f006 fd01 	bl	800cb08 <LCD_SetVSizeEx>
 8006106:	e00b      	b.n	8006120 <LCD_X_Config+0x54>
  } else {
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 8006108:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800610c:	21f0      	movs	r1, #240	; 0xf0
 800610e:	2000      	movs	r0, #0
 8006110:	f006 fd12 	bl	800cb38 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8006114:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006118:	21f0      	movs	r1, #240	; 0xf0
 800611a:	2000      	movs	r0, #0
 800611c:	f006 fcf4 	bl	800cb08 <LCD_SetVSizeEx>
  }

#if (GUI_NUM_LAYERS > 1)
    /* Set display driver and color conversion for 2nd layer */
    GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_1, COLOR_CONVERSION_1, 0, 1);
 8006120:	2301      	movs	r3, #1
 8006122:	2200      	movs	r2, #0
 8006124:	4959      	ldr	r1, [pc, #356]	; (800628c <LCD_X_Config+0x1c0>)
 8006126:	485a      	ldr	r0, [pc, #360]	; (8006290 <LCD_X_Config+0x1c4>)
 8006128:	f009 fb98 	bl	800f85c <GUI_DEVICE_CreateAndLink>
    /* Set size of 2nd layer */
    if (LCD_GetSwapXYEx(1)) {
 800612c:	2001      	movs	r0, #1
 800612e:	f006 fdad 	bl	800cc8c <LCD_GetSwapXYEx>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00c      	beq.n	8006152 <LCD_X_Config+0x86>
      LCD_SetSizeEx (1, YSIZE_PHYS, XSIZE_PHYS);
 8006138:	22f0      	movs	r2, #240	; 0xf0
 800613a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800613e:	2001      	movs	r0, #1
 8006140:	f006 fcfa 	bl	800cb38 <LCD_SetSizeEx>
      LCD_SetVSizeEx(1, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8006144:	22f0      	movs	r2, #240	; 0xf0
 8006146:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800614a:	2001      	movs	r0, #1
 800614c:	f006 fcdc 	bl	800cb08 <LCD_SetVSizeEx>
 8006150:	e00b      	b.n	800616a <LCD_X_Config+0x9e>
    } else {
      LCD_SetSizeEx (1, XSIZE_PHYS, YSIZE_PHYS);
 8006152:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006156:	21f0      	movs	r1, #240	; 0xf0
 8006158:	2001      	movs	r0, #1
 800615a:	f006 fced 	bl	800cb38 <LCD_SetSizeEx>
      LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800615e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006162:	21f0      	movs	r1, #240	; 0xf0
 8006164:	2001      	movs	r0, #1
 8006166:	f006 fccf 	bl	800cb08 <LCD_SetVSizeEx>
    }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800616a:	4b4a      	ldr	r3, [pc, #296]	; (8006294 <LCD_X_Config+0x1c8>)
 800616c:	4a4a      	ldr	r2, [pc, #296]	; (8006298 <LCD_X_Config+0x1cc>)
 800616e:	601a      	str	r2, [r3, #0]
#if (GUI_NUM_LAYERS > 1)
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER;
 8006170:	4b48      	ldr	r3, [pc, #288]	; (8006294 <LCD_X_Config+0x1c8>)
 8006172:	4a4a      	ldr	r2, [pc, #296]	; (800629c <LCD_X_Config+0x1d0>)
 8006174:	61da      	str	r2, [r3, #28]
#endif

   /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8006176:	2300      	movs	r3, #0
 8006178:	607b      	str	r3, [r7, #4]
 800617a:	e07f      	b.n	800627c <LCD_X_Config+0x1b0>
  {
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800617c:	4a48      	ldr	r2, [pc, #288]	; (80062a0 <LCD_X_Config+0x1d4>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006184:	4843      	ldr	r0, [pc, #268]	; (8006294 <LCD_X_Config+0x1c8>)
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4403      	add	r3, r0
 8006192:	3318      	adds	r3, #24
 8006194:	6019      	str	r1, [r3, #0]

    layer_prop[i].pending_buffer = -1;
 8006196:	493f      	ldr	r1, [pc, #252]	; (8006294 <LCD_X_Config+0x1c8>)
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	3304      	adds	r3, #4
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061aa:	601a      	str	r2, [r3, #0]

    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4939      	ldr	r1, [pc, #228]	; (8006294 <LCD_X_Config+0x1c8>)
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4619      	mov	r1, r3
 80061c0:	f006 fc8c 	bl	800cadc <LCD_SetVRAMAddrEx>

    /* Remember color depth for further operations */
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f006 fd54 	bl	800cc74 <LCD_GetBitsPerPixelEx>
 80061cc:	4603      	mov	r3, r0
 80061ce:	10d9      	asrs	r1, r3, #3
 80061d0:	4830      	ldr	r0, [pc, #192]	; (8006294 <LCD_X_Config+0x1c8>)
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4403      	add	r3, r0
 80061de:	3314      	adds	r3, #20
 80061e0:	6019      	str	r1, [r3, #0]

    /* Set custom functions for several operations */
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))CUSTOM_CopyBuffer);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <LCD_X_Config+0x1d8>)
 80061e6:	2121      	movs	r1, #33	; 0x21
 80061e8:	4618      	mov	r0, r3
 80061ea:	f006 fd05 	bl	800cbf8 <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))CUSTOM_CopyRect);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2d      	ldr	r2, [pc, #180]	; (80062a8 <LCD_X_Config+0x1dc>)
 80061f2:	2123      	movs	r1, #35	; 0x23
 80061f4:	4618      	mov	r0, r3
 80061f6:	f006 fcff 	bl	800cbf8 <LCD_SetDevFunc>

    /* Filling via DMA2D does only work with 16bpp or more */
    if (LCD_LL_GetPixelformat(i) <= LTDC_PIXEL_FORMAT_ARGB4444)
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa8a 	bl	8006714 <LCD_LL_GetPixelformat>
 8006200:	4603      	mov	r3, r0
 8006202:	2b04      	cmp	r3, #4
 8006204:	d80b      	bhi.n	800621e <LCD_X_Config+0x152>
    {
      LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a28      	ldr	r2, [pc, #160]	; (80062ac <LCD_X_Config+0x1e0>)
 800620a:	2119      	movs	r1, #25
 800620c:	4618      	mov	r0, r3
 800620e:	f006 fcf3 	bl	800cbf8 <LCD_SetDevFunc>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))BSP_LCD_DrawBitmap8bpp);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a26      	ldr	r2, [pc, #152]	; (80062b0 <LCD_X_Config+0x1e4>)
 8006216:	2125      	movs	r1, #37	; 0x25
 8006218:	4618      	mov	r0, r3
 800621a:	f006 fced 	bl	800cbf8 <LCD_SetDevFunc>
    }

    /* Set up drawing routine for 16bpp bitmap using DMA2D */
    if (LCD_LL_GetPixelformat(i) == LTDC_PIXEL_FORMAT_RGB565) {
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa78 	bl	8006714 <LCD_LL_GetPixelformat>
 8006224:	4603      	mov	r3, r0
 8006226:	2b02      	cmp	r3, #2
 8006228:	d105      	bne.n	8006236 <LCD_X_Config+0x16a>
      LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))BSP_LCD_DrawBitmap16bpp);     /* Set up drawing routine for 16bpp bitmap using DMA2D. Makes only sense with RGB565 */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <LCD_X_Config+0x1e8>)
 800622e:	2124      	movs	r1, #36	; 0x24
 8006230:	4618      	mov	r0, r3
 8006232:	f006 fce1 	bl	800cbf8 <LCD_SetDevFunc>
    }

    /* Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination */
    GUICC_M1555I_SetCustColorConv(Color2IndexBulk_M1555IDMA2D, Index2ColorBulk_M1555IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB1555 */
 8006236:	4920      	ldr	r1, [pc, #128]	; (80062b8 <LCD_X_Config+0x1ec>)
 8006238:	4820      	ldr	r0, [pc, #128]	; (80062bc <LCD_X_Config+0x1f0>)
 800623a:	f00a fd09 	bl	8010c50 <GUICC_M1555I_SetCustColorConv>
    GUICC_M565_SetCustColorConv  (Color2IndexBulk_M565DMA2D,   Index2ColorBulk_M565DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB565 */
 800623e:	4920      	ldr	r1, [pc, #128]	; (80062c0 <LCD_X_Config+0x1f4>)
 8006240:	4820      	ldr	r0, [pc, #128]	; (80062c4 <LCD_X_Config+0x1f8>)
 8006242:	f00a fb03 	bl	801084c <GUICC_M565_SetCustColorConv>
    GUICC_M4444I_SetCustColorConv(Color2IndexBulk_M4444IDMA2D, Index2ColorBulk_M4444IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB4444 */
 8006246:	4920      	ldr	r1, [pc, #128]	; (80062c8 <LCD_X_Config+0x1fc>)
 8006248:	4820      	ldr	r0, [pc, #128]	; (80062cc <LCD_X_Config+0x200>)
 800624a:	f00a fc69 	bl	8010b20 <GUICC_M4444I_SetCustColorConv>
    GUICC_M888_SetCustColorConv  (Color2IndexBulk_M888DMA2D,   Index2ColorBulk_M888DMA2D);   /* Set up custom bulk color conversion using DMA2D for RGB888 */
 800624e:	4920      	ldr	r1, [pc, #128]	; (80062d0 <LCD_X_Config+0x204>)
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <LCD_X_Config+0x208>)
 8006252:	f00a fa71 	bl	8010738 <GUICC_M888_SetCustColorConv>
    GUICC_M8888I_SetCustColorConv(Color2IndexBulk_M8888IDMA2D, Index2ColorBulk_M8888IDMA2D); /* Set up custom bulk color conversion using DMA2D for ARGB8888 */
 8006256:	4920      	ldr	r1, [pc, #128]	; (80062d8 <LCD_X_Config+0x20c>)
 8006258:	4820      	ldr	r0, [pc, #128]	; (80062dc <LCD_X_Config+0x210>)
 800625a:	f00a fbb9 	bl	80109d0 <GUICC_M8888I_SetCustColorConv>

    /* Set up custom alpha blending function using DMA2D */
    GUI_SetFuncAlphaBlending(DMA2D_AlphaBlending);                                                /* Set up custom alpha blending function using DMA2D */
 800625e:	4820      	ldr	r0, [pc, #128]	; (80062e0 <LCD_X_Config+0x214>)
 8006260:	f007 fbc8 	bl	800d9f4 <GUI_SetFuncAlphaBlending>

    /* Set up custom function for translating a bitmap palette into index values.
    Required to load a bitmap palette into DMA2D CLUT in case of a 8bpp indexed bitmap */
    GUI_SetFuncGetpPalConvTable(_LCD_GetpPalConvTable);
 8006264:	481f      	ldr	r0, [pc, #124]	; (80062e4 <LCD_X_Config+0x218>)
 8006266:	f009 fb63 	bl	800f930 <GUI_SetFuncGetpPalConvTable>

    /* Set up a custom function for mixing up single colors using DMA2D */
    GUI_SetFuncMixColors(DMA2D_MixColors);
 800626a:	481f      	ldr	r0, [pc, #124]	; (80062e8 <LCD_X_Config+0x21c>)
 800626c:	f007 fbc8 	bl	800da00 <GUI_SetFuncMixColors>

    /* Set up a custom function for mixing up arrays of colors using DMA2D */
    GUI_SetFuncMixColorsBulk(LCD_MixColorsBulk);
 8006270:	481e      	ldr	r0, [pc, #120]	; (80062ec <LCD_X_Config+0x220>)
 8006272:	f007 fbcb 	bl	800da0c <GUI_SetFuncMixColorsBulk>
  for (i = 0; i < GUI_NUM_LAYERS; i++)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	3301      	adds	r3, #1
 800627a:	607b      	str	r3, [r7, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b01      	cmp	r3, #1
 8006280:	f67f af7c 	bls.w	800617c <LCD_X_Config+0xb0>
  }
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	080143ac 	.word	0x080143ac
 8006290:	08014134 	.word	0x08014134
 8006294:	200235f0 	.word	0x200235f0
 8006298:	d0200000 	.word	0xd0200000
 800629c:	d0400000 	.word	0xd0400000
 80062a0:	2000000c 	.word	0x2000000c
 80062a4:	08006905 	.word	0x08006905
 80062a8:	080069b9 	.word	0x080069b9
 80062ac:	08006ad9 	.word	0x08006ad9
 80062b0:	080071d9 	.word	0x080071d9
 80062b4:	08007109 	.word	0x08007109
 80062b8:	08005f5b 	.word	0x08005f5b
 80062bc:	08005f33 	.word	0x08005f33
 80062c0:	08005f0b 	.word	0x08005f0b
 80062c4:	08005ee3 	.word	0x08005ee3
 80062c8:	08005fab 	.word	0x08005fab
 80062cc:	08005f83 	.word	0x08005f83
 80062d0:	08005ebb 	.word	0x08005ebb
 80062d4:	08005e93 	.word	0x08005e93
 80062d8:	08005e6b 	.word	0x08005e6b
 80062dc:	08005e43 	.word	0x08005e43
 80062e0:	08006f51 	.word	0x08006f51
 80062e4:	08006e45 	.word	0x08006e45
 80062e8:	08006d2d 	.word	0x08006d2d
 80062ec:	08007005 	.word	0x08007005

080062f0 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData)
{
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b08b      	sub	sp, #44	; 0x2c
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  int32_t r = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t addr;
  int32_t xPos, yPos;
  uint32_t Color;

  switch (Cmd)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	3b01      	subs	r3, #1
 8006304:	2b0d      	cmp	r3, #13
 8006306:	f200 8102 	bhi.w	800650e <LCD_X_DisplayDriver+0x21e>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <LCD_X_DisplayDriver+0x20>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006349 	.word	0x08006349
 8006314:	0800650f 	.word	0x0800650f
 8006318:	08006351 	.word	0x08006351
 800631c:	080063b9 	.word	0x080063b9
 8006320:	080063c7 	.word	0x080063c7
 8006324:	080063d9 	.word	0x080063d9
 8006328:	08006469 	.word	0x08006469
 800632c:	08006453 	.word	0x08006453
 8006330:	080063eb 	.word	0x080063eb
 8006334:	080064b7 	.word	0x080064b7
 8006338:	0800650f 	.word	0x0800650f
 800633c:	080064c7 	.word	0x080064c7
 8006340:	080064e3 	.word	0x080064e3
 8006344:	080063a1 	.word	0x080063a1
  {
  case LCD_X_INITCONTROLLER:
    LCD_LL_LayerInit(LayerIndex);
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f8ed 	bl	8006528 <LCD_LL_LayerInit>
    break;
 800634e:	e0e1      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETORG:
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 8006350:	4973      	ldr	r1, [pc, #460]	; (8006520 <LCD_X_DisplayDriver+0x230>)
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6858      	ldr	r0, [r3, #4]
 8006364:	4c6e      	ldr	r4, [pc, #440]	; (8006520 <LCD_X_DisplayDriver+0x230>)
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	1a9b      	subs	r3, r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4423      	add	r3, r4
 8006372:	330c      	adds	r3, #12
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	fb03 f000 	mul.w	r0, r3, r0
 800637a:	4c69      	ldr	r4, [pc, #420]	; (8006520 <LCD_X_DisplayDriver+0x230>)
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4423      	add	r3, r4
 8006388:	3314      	adds	r3, #20
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	fb03 f300 	mul.w	r3, r3, r0
 8006390:	440b      	add	r3, r1
 8006392:	623b      	str	r3, [r7, #32]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	6a39      	ldr	r1, [r7, #32]
 8006398:	4862      	ldr	r0, [pc, #392]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 800639a:	f7fc fd72 	bl	8002e82 <HAL_LTDC_SetAddress>
    break;
 800639e:	e0b9      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SHOWBUFFER:
    layer_prop[LayerIndex].pending_buffer = ((LCD_X_SHOWBUFFER_INFO *)pData)->Index;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	485e      	ldr	r0, [pc, #376]	; (8006520 <LCD_X_DisplayDriver+0x230>)
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4403      	add	r3, r0
 80063b2:	3304      	adds	r3, #4
 80063b4:	6019      	str	r1, [r3, #0]
    break;
 80063b6:	e0ad      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETLUTENTRY:
    HAL_LTDC_ConfigCLUT(&hltdc, (uint32_t *)&(((LCD_X_SETLUTENTRY_INFO *)pData)->Color), 1, LayerIndex);
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	4859      	ldr	r0, [pc, #356]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80063c0:	f7fc fbc1 	bl	8002b46 <HAL_LTDC_ConfigCLUT>
    break;
 80063c4:	e0a6      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_ON:
    __HAL_LTDC_ENABLE(&hltdc);
 80063c6:	4b57      	ldr	r3, [pc, #348]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a56      	ldr	r2, [pc, #344]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	6992      	ldr	r2, [r2, #24]
 80063d0:	f042 0201 	orr.w	r2, r2, #1
 80063d4:	619a      	str	r2, [r3, #24]
    break;
 80063d6:	e09d      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_OFF:
    __HAL_LTDC_DISABLE(&hltdc);
 80063d8:	4b52      	ldr	r3, [pc, #328]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a51      	ldr	r2, [pc, #324]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	6992      	ldr	r2, [r2, #24]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	619a      	str	r2, [r3, #24]
    break;
 80063e8:	e094      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETVIS:
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d113      	bne.n	800641a <LCD_X_DisplayDriver+0x12a>
    {
      __HAL_LTDC_LAYER_ENABLE(&hltdc, LayerIndex);
 80063f2:	4b4c      	ldr	r3, [pc, #304]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	01db      	lsls	r3, r3, #7
 80063fc:	4413      	add	r3, r2
 80063fe:	3384      	adds	r3, #132	; 0x84
 8006400:	461a      	mov	r2, r3
 8006402:	4b48      	ldr	r3, [pc, #288]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	01db      	lsls	r3, r3, #7
 800640c:	440b      	add	r3, r1
 800640e:	3384      	adds	r3, #132	; 0x84
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e012      	b.n	8006440 <LCD_X_DisplayDriver+0x150>
    }
    else
    {
      __HAL_LTDC_LAYER_DISABLE(&hltdc, LayerIndex);
 800641a:	4b42      	ldr	r3, [pc, #264]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	01db      	lsls	r3, r3, #7
 8006424:	4413      	add	r3, r2
 8006426:	3384      	adds	r3, #132	; 0x84
 8006428:	461a      	mov	r2, r3
 800642a:	4b3e      	ldr	r3, [pc, #248]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	440b      	add	r3, r1
 8006436:	3384      	adds	r3, #132	; 0x84
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 8006440:	4b38      	ldr	r3, [pc, #224]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a37      	ldr	r2, [pc, #220]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	625a      	str	r2, [r3, #36]	; 0x24
    break;
 8006450:	e060      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETPOS:
    HAL_LTDC_SetWindowPosition(&hltdc,
                               ((LCD_X_SETPOS_INFO *)pData)->xPos,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc,
 8006456:	4619      	mov	r1, r3
                               ((LCD_X_SETPOS_INFO *)pData)->yPos,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
    HAL_LTDC_SetWindowPosition(&hltdc,
 800645c:	461a      	mov	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4830      	ldr	r0, [pc, #192]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 8006462:	f7fc fc92 	bl	8002d8a <HAL_LTDC_SetWindowPosition>
                               LayerIndex);
    break;
 8006466:	e055      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETSIZE:
    GUI_GetLayerPosEx(LayerIndex, (int*)&xPos, (int*)&yPos);
 8006468:	f107 0214 	add.w	r2, r7, #20
 800646c:	f107 0318 	add.w	r3, r7, #24
 8006470:	4619      	mov	r1, r3
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f008 f9ee 	bl	800e854 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6819      	ldr	r1, [r3, #0]
 800647c:	4828      	ldr	r0, [pc, #160]	; (8006520 <LCD_X_DisplayDriver+0x230>)
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4403      	add	r3, r0
 800648a:	330c      	adds	r3, #12
 800648c:	6019      	str	r1, [r3, #0]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6859      	ldr	r1, [r3, #4]
 8006492:	4823      	ldr	r0, [pc, #140]	; (8006520 <LCD_X_DisplayDriver+0x230>)
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4613      	mov	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4403      	add	r3, r0
 80064a0:	3310      	adds	r3, #16
 80064a2:	6019      	str	r1, [r3, #0]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	4619      	mov	r1, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	461a      	mov	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	481d      	ldr	r0, [pc, #116]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80064b0:	f7fc fc6b 	bl	8002d8a <HAL_LTDC_SetWindowPosition>
    break;
 80064b4:	e02e      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETALPHA:
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4619      	mov	r1, r3
 80064be:	4819      	ldr	r0, [pc, #100]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80064c0:	f7fc fca9 	bl	8002e16 <HAL_LTDC_SetAlpha>
    break;
 80064c4:	e026      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMAMODE:
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <LCD_X_DisplayDriver+0x1e8>
    {
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	4814      	ldr	r0, [pc, #80]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80064d2:	f7fc fbac 	bl	8002c2e <HAL_LTDC_EnableColorKeying>
    }
    else
    {
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
    }
    break;
 80064d6:	e01d      	b.n	8006514 <LCD_X_DisplayDriver+0x224>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);
 80064d8:	68f9      	ldr	r1, [r7, #12]
 80064da:	4812      	ldr	r0, [pc, #72]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 80064dc:	f7fc fbe1 	bl	8002ca2 <HAL_LTDC_DisableColorKeying>
    break;
 80064e0:	e018      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  case LCD_X_SETCHROMA:

    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	b2da      	uxtb	r2, r3
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80064f2:	431a      	orrs	r2, r3
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	041b      	lsls	r3, r3, #16
 80064fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 80064fe:	4313      	orrs	r3, r2
 8006500:	61fb      	str	r3, [r7, #28]

    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	4807      	ldr	r0, [pc, #28]	; (8006524 <LCD_X_DisplayDriver+0x234>)
 8006508:	f7fc fad8 	bl	8002abc <HAL_LTDC_ConfigColorKeying>
    break;
 800650c:	e002      	b.n	8006514 <LCD_X_DisplayDriver+0x224>

  default:
    r = -1;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006516:	4618      	mov	r0, r3
 8006518:	372c      	adds	r7, #44	; 0x2c
 800651a:	46bd      	mov	sp, r7
 800651c:	bd90      	pop	{r4, r7, pc}
 800651e:	bf00      	nop
 8006520:	200235f0 	.word	0x200235f0
 8006524:	200269e0 	.word	0x200269e0

08006528 <LCD_LL_LayerInit>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_LayerInit(uint32_t LayerIndex)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b090      	sub	sp, #64	; 0x40
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t                         i;
  static uint32_t                  LUT[256];
  LTDC_LayerCfgTypeDef             layer_cfg;

  if (LayerIndex < GUI_NUM_LAYERS)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d869      	bhi.n	800660a <LCD_LL_LayerInit+0xe2>
  {
  /* Layer configuration */
    layer_cfg.WindowX0 = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]
    layer_cfg.WindowX1 = XSIZE_PHYS;
 800653a:	23f0      	movs	r3, #240	; 0xf0
 800653c:	60fb      	str	r3, [r7, #12]
    layer_cfg.WindowY0 = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	613b      	str	r3, [r7, #16]
    layer_cfg.WindowY1 = YSIZE_PHYS;
 8006542:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006546:	617b      	str	r3, [r7, #20]
    layer_cfg.PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f8e3 	bl	8006714 <LCD_LL_GetPixelformat>
 800654e:	4603      	mov	r3, r0
 8006550:	61bb      	str	r3, [r7, #24]
    layer_cfg.FBStartAdress = layer_prop[LayerIndex].address;
 8006552:	4930      	ldr	r1, [pc, #192]	; (8006614 <LCD_LL_LayerInit+0xec>)
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	440b      	add	r3, r1
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
    layer_cfg.Alpha = 255;
 8006564:	23ff      	movs	r3, #255	; 0xff
 8006566:	61fb      	str	r3, [r7, #28]
    layer_cfg.Alpha0 = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	623b      	str	r3, [r7, #32]
    layer_cfg.Backcolor.Blue = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    layer_cfg.Backcolor.Green = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    layer_cfg.Backcolor.Red = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800657e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
    layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006584:	2307      	movs	r3, #7
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28
    layer_cfg.ImageWidth = XSIZE_PHYS;
 8006588:	23f0      	movs	r3, #240	; 0xf0
 800658a:	633b      	str	r3, [r7, #48]	; 0x30
    layer_cfg.ImageHeight = YSIZE_PHYS;
 800658c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_LTDC_ConfigLayer(&hltdc, &layer_cfg, LayerIndex);
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4619      	mov	r1, r3
 800659a:	481f      	ldr	r0, [pc, #124]	; (8006618 <LCD_LL_LayerInit+0xf0>)
 800659c:	f7fc fa50 	bl	8002a40 <HAL_LTDC_ConfigLayer>

    /* Enable LUT on demand */
    if (LCD_GetBitsPerPixelEx(LayerIndex) <= 8)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f006 fb66 	bl	800cc74 <LCD_GetBitsPerPixelEx>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	dc04      	bgt.n	80065b8 <LCD_LL_LayerInit+0x90>
    {
      /* Enable usage of LUT for all modes with <= 8bpp*/
      HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4819      	ldr	r0, [pc, #100]	; (8006618 <LCD_LL_LayerInit+0xf0>)
 80065b2:	f7fc fbb0 	bl	8002d16 <HAL_LTDC_EnableCLUT>
        }
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
      }
    }
  }
}
 80065b6:	e028      	b.n	800660a <LCD_LL_LayerInit+0xe2>
      if (layer_prop[LayerIndex].pColorConvAPI == GUICC_88666I)
 80065b8:	4916      	ldr	r1, [pc, #88]	; (8006614 <LCD_LL_LayerInit+0xec>)
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3318      	adds	r3, #24
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a14      	ldr	r2, [pc, #80]	; (800661c <LCD_LL_LayerInit+0xf4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d11c      	bne.n	800660a <LCD_LL_LayerInit+0xe2>
        HAL_LTDC_EnableCLUT(&hltdc, LayerIndex);
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4811      	ldr	r0, [pc, #68]	; (8006618 <LCD_LL_LayerInit+0xf0>)
 80065d4:	f7fc fb9f 	bl	8002d16 <HAL_LTDC_EnableCLUT>
        for (i = 0; i < 256; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065dc:	e00b      	b.n	80065f6 <LCD_LL_LayerInit+0xce>
          LUT[i] = LCD_API_ColorConv_8666.pfIndex2Color(i);
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <LCD_LL_LayerInit+0xf8>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065e4:	4798      	blx	r3
 80065e6:	4601      	mov	r1, r0
 80065e8:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <LCD_LL_LayerInit+0xfc>)
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < 256; i++)
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	3301      	adds	r3, #1
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f8:	2bff      	cmp	r3, #255	; 0xff
 80065fa:	d9f0      	bls.n	80065de <LCD_LL_LayerInit+0xb6>
        HAL_LTDC_ConfigCLUT(&hltdc, LUT, 256, LayerIndex);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006602:	4908      	ldr	r1, [pc, #32]	; (8006624 <LCD_LL_LayerInit+0xfc>)
 8006604:	4804      	ldr	r0, [pc, #16]	; (8006618 <LCD_LL_LayerInit+0xf0>)
 8006606:	f7fc fa9e 	bl	8002b46 <HAL_LTDC_ConfigCLUT>
}
 800660a:	bf00      	nop
 800660c:	3740      	adds	r7, #64	; 0x40
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200235f0 	.word	0x200235f0
 8006618:	200269e0 	.word	0x200269e0
 800661c:	080143f4 	.word	0x080143f4
 8006620:	0801440c 	.word	0x0801440c
 8006624:	20026328 	.word	0x20026328

08006628 <LCD_LL_Init>:
  * @brief  Initialize the LCD Controller.
  * @param  LayerIndex : layer Index.
  * @retval None
  */
static void LCD_LL_Init(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
      /* DeInit */
      HAL_LTDC_DeInit(&hltdc);
 800662c:	4834      	ldr	r0, [pc, #208]	; (8006700 <LCD_LL_Init+0xd8>)
 800662e:	f7fc f937 	bl	80028a0 <HAL_LTDC_DeInit>

      /* Initializaton of ILI9341 component*/
      LCD_PowerOn();
 8006632:	f002 fb14 	bl	8008c5e <LCD_PowerOn>

      /* Set LCD Timings */
      hltdc.Init.HorizontalSync = 9;
 8006636:	4b32      	ldr	r3, [pc, #200]	; (8006700 <LCD_LL_Init+0xd8>)
 8006638:	2209      	movs	r2, #9
 800663a:	615a      	str	r2, [r3, #20]
      hltdc.Init.VerticalSync = 1;
 800663c:	4b30      	ldr	r3, [pc, #192]	; (8006700 <LCD_LL_Init+0xd8>)
 800663e:	2201      	movs	r2, #1
 8006640:	619a      	str	r2, [r3, #24]
      hltdc.Init.AccumulatedHBP = 29;
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <LCD_LL_Init+0xd8>)
 8006644:	221d      	movs	r2, #29
 8006646:	61da      	str	r2, [r3, #28]
      hltdc.Init.AccumulatedVBP = 3;
 8006648:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <LCD_LL_Init+0xd8>)
 800664a:	2203      	movs	r2, #3
 800664c:	621a      	str	r2, [r3, #32]
      hltdc.Init.AccumulatedActiveH = 323;
 800664e:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <LCD_LL_Init+0xd8>)
 8006650:	f240 1243 	movw	r2, #323	; 0x143
 8006654:	629a      	str	r2, [r3, #40]	; 0x28
      hltdc.Init.AccumulatedActiveW = 269;
 8006656:	4b2a      	ldr	r3, [pc, #168]	; (8006700 <LCD_LL_Init+0xd8>)
 8006658:	f240 120d 	movw	r2, #269	; 0x10d
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
      hltdc.Init.TotalHeigh = 327;
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <LCD_LL_Init+0xd8>)
 8006660:	f240 1247 	movw	r2, #327	; 0x147
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      hltdc.Init.TotalWidth = 279;
 8006666:	4b26      	ldr	r3, [pc, #152]	; (8006700 <LCD_LL_Init+0xd8>)
 8006668:	f240 1217 	movw	r2, #279	; 0x117
 800666c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* background value */
      hltdc.Init.Backcolor.Blue = 0;
 800666e:	4b24      	ldr	r3, [pc, #144]	; (8006700 <LCD_LL_Init+0xd8>)
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hltdc.Init.Backcolor.Green = 0;
 8006676:	4b22      	ldr	r3, [pc, #136]	; (8006700 <LCD_LL_Init+0xd8>)
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      hltdc.Init.Backcolor.Red = 0;
 800667e:	4b20      	ldr	r3, [pc, #128]	; (8006700 <LCD_LL_Init+0xd8>)
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      /* LCD clock configuration */
      /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
      /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
      /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/8 = 6 Mhz */
      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006686:	4b1f      	ldr	r3, [pc, #124]	; (8006704 <LCD_LL_Init+0xdc>)
 8006688:	2208      	movs	r2, #8
 800668a:	601a      	str	r2, [r3, #0]
      PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800668c:	4b1d      	ldr	r3, [pc, #116]	; (8006704 <LCD_LL_Init+0xdc>)
 800668e:	22c0      	movs	r2, #192	; 0xc0
 8006690:	611a      	str	r2, [r3, #16]
      PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <LCD_LL_Init+0xdc>)
 8006694:	2204      	movs	r2, #4
 8006696:	619a      	str	r2, [r3, #24]
      PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8006698:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <LCD_LL_Init+0xdc>)
 800669a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800669e:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80066a0:	4818      	ldr	r0, [pc, #96]	; (8006704 <LCD_LL_Init+0xdc>)
 80066a2:	f7fd fa4f 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>

      /* Polarity */
      hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80066a6:	4b16      	ldr	r3, [pc, #88]	; (8006700 <LCD_LL_Init+0xd8>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	605a      	str	r2, [r3, #4]
      hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80066ac:	4b14      	ldr	r3, [pc, #80]	; (8006700 <LCD_LL_Init+0xd8>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
      hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80066b2:	4b13      	ldr	r3, [pc, #76]	; (8006700 <LCD_LL_Init+0xd8>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	60da      	str	r2, [r3, #12]
      hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <LCD_LL_Init+0xd8>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	611a      	str	r2, [r3, #16]
      hltdc.Instance = LTDC;
 80066be:	4b10      	ldr	r3, [pc, #64]	; (8006700 <LCD_LL_Init+0xd8>)
 80066c0:	4a11      	ldr	r2, [pc, #68]	; (8006708 <LCD_LL_Init+0xe0>)
 80066c2:	601a      	str	r2, [r3, #0]

      HAL_LTDC_Init(&hltdc);
 80066c4:	480e      	ldr	r0, [pc, #56]	; (8006700 <LCD_LL_Init+0xd8>)
 80066c6:	f7fc f817 	bl	80026f8 <HAL_LTDC_Init>
      HAL_LTDC_ProgramLineEvent(&hltdc, 0);
 80066ca:	2100      	movs	r1, #0
 80066cc:	480c      	ldr	r0, [pc, #48]	; (8006700 <LCD_LL_Init+0xd8>)
 80066ce:	f7fc fc0f 	bl	8002ef0 <HAL_LTDC_ProgramLineEvent>

	  /* Configure the DMA2D  default mode */
  hdma2d.Init.Mode         = DMA2D_R2M;
 80066d2:	4b0e      	ldr	r3, [pc, #56]	; (800670c <LCD_LL_Init+0xe4>)
 80066d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80066d8:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_RGB565;
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <LCD_LL_Init+0xe4>)
 80066dc:	2202      	movs	r2, #2
 80066de:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0x0;
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <LCD_LL_Init+0xe4>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	60da      	str	r2, [r3, #12]

  hdma2d.Instance          = DMA2D;
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <LCD_LL_Init+0xe4>)
 80066e8:	4a09      	ldr	r2, [pc, #36]	; (8006710 <LCD_LL_Init+0xe8>)
 80066ea:	601a      	str	r2, [r3, #0]

  if(HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80066ec:	4807      	ldr	r0, [pc, #28]	; (800670c <LCD_LL_Init+0xe4>)
 80066ee:	f7fa fbb7 	bl	8000e60 <HAL_DMA2D_Init>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d000      	beq.n	80066fa <LCD_LL_Init+0xd2>
  {
    while (1);
 80066f8:	e7fe      	b.n	80066f8 <LCD_LL_Init+0xd0>
  }
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	200269e0 	.word	0x200269e0
 8006704:	20026728 	.word	0x20026728
 8006708:	40016800 	.word	0x40016800
 800670c:	200235b0 	.word	0x200235b0
 8006710:	4002b000 	.word	0x4002b000

08006714 <LCD_LL_GetPixelformat>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index
  * @retval Status ( 0 : 0k , 1: error)
  */
static uint32_t LCD_LL_GetPixelformat(uint32_t LayerIndex)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  const LCD_API_COLOR_CONV * pColorConvAPI;

  if (LayerIndex >= GUI_NUM_LAYERS)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d901      	bls.n	8006726 <LCD_LL_GetPixelformat+0x12>
  {
    return 0;
 8006722:	2300      	movs	r3, #0
 8006724:	e03a      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  pColorConvAPI = layer_prop[LayerIndex].pColorConvAPI;
 8006726:	4920      	ldr	r1, [pc, #128]	; (80067a8 <LCD_LL_GetPixelformat+0x94>)
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	4613      	mov	r3, r2
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	440b      	add	r3, r1
 8006734:	3318      	adds	r3, #24
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]

  if (pColorConvAPI == GUICC_M8888I)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <LCD_LL_GetPixelformat+0x98>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d101      	bne.n	8006746 <LCD_LL_GetPixelformat+0x32>
  {
    return LTDC_PIXEL_FORMAT_ARGB8888;
 8006742:	2300      	movs	r3, #0
 8006744:	e02a      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M888)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <LCD_LL_GetPixelformat+0x9c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d101      	bne.n	8006752 <LCD_LL_GetPixelformat+0x3e>
  {
    return LTDC_PIXEL_FORMAT_RGB888;
 800674e:	2301      	movs	r3, #1
 8006750:	e024      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M565)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <LCD_LL_GetPixelformat+0xa0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <LCD_LL_GetPixelformat+0x4a>
  {
    return LTDC_PIXEL_FORMAT_RGB565;
 800675a:	2302      	movs	r3, #2
 800675c:	e01e      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M1555I)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <LCD_LL_GetPixelformat+0xa4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <LCD_LL_GetPixelformat+0x56>
  {
    return LTDC_PIXEL_FORMAT_ARGB1555;
 8006766:	2303      	movs	r3, #3
 8006768:	e018      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_M4444I)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a13      	ldr	r2, [pc, #76]	; (80067bc <LCD_LL_GetPixelformat+0xa8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <LCD_LL_GetPixelformat+0x62>
  {
    return LTDC_PIXEL_FORMAT_ARGB4444;
 8006772:	2304      	movs	r3, #4
 8006774:	e012      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_8666)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <LCD_LL_GetPixelformat+0xac>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d101      	bne.n	8006782 <LCD_LL_GetPixelformat+0x6e>
  {
    return LTDC_PIXEL_FORMAT_L8;
 800677e:	2305      	movs	r3, #5
 8006780:	e00c      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_1616I)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a0f      	ldr	r2, [pc, #60]	; (80067c4 <LCD_LL_GetPixelformat+0xb0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <LCD_LL_GetPixelformat+0x7a>
  {
    return LTDC_PIXEL_FORMAT_AL44;
 800678a:	2306      	movs	r3, #6
 800678c:	e006      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  else if (pColorConvAPI == GUICC_88666I)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a0d      	ldr	r2, [pc, #52]	; (80067c8 <LCD_LL_GetPixelformat+0xb4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <LCD_LL_GetPixelformat+0x86>
  {
    return LTDC_PIXEL_FORMAT_AL88;
 8006796:	2307      	movs	r3, #7
 8006798:	e000      	b.n	800679c <LCD_LL_GetPixelformat+0x88>
  }
  while (1);
 800679a:	e7fe      	b.n	800679a <LCD_LL_GetPixelformat+0x86>
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	200235f0 	.word	0x200235f0
 80067ac:	080143ac 	.word	0x080143ac
 80067b0:	08014364 	.word	0x08014364
 80067b4:	0801437c 	.word	0x0801437c
 80067b8:	080143dc 	.word	0x080143dc
 80067bc:	080143c4 	.word	0x080143c4
 80067c0:	0801440c 	.word	0x0801440c
 80067c4:	08014424 	.word	0x08014424
 80067c8:	080143f4 	.word	0x080143f4

080067cc <DMA2D_CopyBuffer>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBuffer(uint32_t LayerIndex, void * pSrc, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLineSrc, uint32_t OffLineDst)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ff9a 	bl	8006714 <LCD_LL_GetPixelformat>
 80067e0:	6178      	str	r0, [r7, #20]
  DMA2D->CR      = 0x00000000UL | (1 << 9);
 80067e2:	4b15      	ldr	r3, [pc, #84]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 80067e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e8:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;
 80067f0:	4a11      	ldr	r2, [pc, #68]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	63d3      	str	r3, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;
 80067f6:	4a10      	ldr	r2, [pc, #64]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst;
 80067fc:	4a0e      	ldr	r2, [pc, #56]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormat;
 8006802:	4a0d      	ldr	r2, [pc, #52]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	61d3      	str	r3, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 8006808:	4a0b      	ldr	r2, [pc, #44]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	6a39      	ldr	r1, [r7, #32]
 8006810:	b289      	uxth	r1, r1
 8006812:	430b      	orrs	r3, r1
 8006814:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8006822:	bf00      	nop
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <DMA2D_CopyBuffer+0x6c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f9      	bne.n	8006824 <DMA2D_CopyBuffer+0x58>
  {
  }
}
 8006830:	bf00      	nop
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	4002b000 	.word	0x4002b000

0800683c <DMA2D_FillBuffer>:
/*********************************************************************
*
*       FillBuffer
*/
static void DMA2D_FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
 uint32_t PixelFormat;

  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ff62 	bl	8006714 <LCD_LL_GetPixelformat>
 8006850:	6178      	str	r0, [r7, #20]

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);
 8006852:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 8006854:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <DMA2D_FillBuffer+0x68>)
 8006856:	601a      	str	r2, [r3, #0]
  DMA2D->OCOLR   = ColorIndex;
 8006858:	4a11      	ldr	r2, [pc, #68]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (uint32_t)pDst;
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;
 8006864:	4a0e      	ldr	r2, [pc, #56]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;
 800686a:	4a0d      	ldr	r2, [pc, #52]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	6353      	str	r3, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | (U16)ySize;
 8006870:	4a0b      	ldr	r2, [pc, #44]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	041b      	lsls	r3, r3, #16
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	b289      	uxth	r1, r1
 800687a:	430b      	orrs	r3, r1
 800687c:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;
 800687e:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 800688a:	bf00      	nop
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <DMA2D_FillBuffer+0x64>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1f9      	bne.n	800688c <DMA2D_FillBuffer+0x50>
  {
  }
}
 8006898:	bf00      	nop
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	4002b000 	.word	0x4002b000
 80068a4:	00030200 	.word	0x00030200

080068a8 <GetBufferSize>:
/*********************************************************************
*
*       GetBufferSize
*/
static uint32_t GetBufferSize(uint32_t LayerIndex)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t BufferSize;

  BufferSize = layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel;
 80068b0:	4913      	ldr	r1, [pc, #76]	; (8006900 <GetBufferSize+0x58>)
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	330c      	adds	r3, #12
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	480f      	ldr	r0, [pc, #60]	; (8006900 <GetBufferSize+0x58>)
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4403      	add	r3, r0
 80068d0:	3310      	adds	r3, #16
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	fb03 f101 	mul.w	r1, r3, r1
 80068d8:	4809      	ldr	r0, [pc, #36]	; (8006900 <GetBufferSize+0x58>)
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4403      	add	r3, r0
 80068e6:	3314      	adds	r3, #20
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	fb03 f301 	mul.w	r3, r3, r1
 80068ee:	60fb      	str	r3, [r7, #12]
  return BufferSize;
 80068f0:	68fb      	ldr	r3, [r7, #12]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	200235f0 	.word	0x200235f0

08006904 <CUSTOM_CopyBuffer>:

/*********************************************************************
*
*       CUSTOM_CopyBuffer
*/
static void CUSTOM_CopyBuffer(int32_t LayerIndex, int32_t IndexSrc, int32_t IndexDst) {
 8006904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006906:	b08d      	sub	sp, #52	; 0x34
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff ffc8 	bl	80068a8 <GetBufferSize>
 8006918:	61f8      	str	r0, [r7, #28]
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800691a:	4926      	ldr	r1, [pc, #152]	; (80069b4 <CUSTOM_CopyBuffer+0xb0>)
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4619      	mov	r1, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	440b      	add	r3, r1
 8006936:	61bb      	str	r3, [r7, #24]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
 8006938:	491e      	ldr	r1, [pc, #120]	; (80069b4 <CUSTOM_CopyBuffer+0xb0>)
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	fb02 f303 	mul.w	r3, r2, r3
 8006952:	440b      	add	r3, r1
 8006954:	617b      	str	r3, [r7, #20]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	69bc      	ldr	r4, [r7, #24]
 800695a:	697d      	ldr	r5, [r7, #20]
 800695c:	4915      	ldr	r1, [pc, #84]	; (80069b4 <CUSTOM_CopyBuffer+0xb0>)
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	330c      	adds	r3, #12
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461e      	mov	r6, r3
 8006970:	4910      	ldr	r1, [pc, #64]	; (80069b4 <CUSTOM_CopyBuffer+0xb0>)
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4613      	mov	r3, r2
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	440b      	add	r3, r1
 800697e:	3310      	adds	r3, #16
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	9302      	str	r3, [sp, #8]
 8006988:	2300      	movs	r3, #0
 800698a:	9301      	str	r3, [sp, #4]
 800698c:	9200      	str	r2, [sp, #0]
 800698e:	4633      	mov	r3, r6
 8006990:	462a      	mov	r2, r5
 8006992:	4621      	mov	r1, r4
 8006994:	f7ff ff1a 	bl	80067cc <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <CUSTOM_CopyBuffer+0xb0>)
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4613      	mov	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	3308      	adds	r3, #8
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
}
 80069ac:	bf00      	nop
 80069ae:	3724      	adds	r7, #36	; 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b4:	200235f0 	.word	0x200235f0

080069b8 <CUSTOM_CopyRect>:
/*********************************************************************
*
*       CUSTOM_CopyRect
*/
static void CUSTOM_CopyRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, int32_t xSize, int32_t ySize)
{
 80069b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ba:	b08f      	sub	sp, #60	; 0x3c
 80069bc:	af04      	add	r7, sp, #16
 80069be:	6178      	str	r0, [r7, #20]
 80069c0:	6139      	str	r1, [r7, #16]
 80069c2:	60fa      	str	r2, [r7, #12]
 80069c4:	60bb      	str	r3, [r7, #8]
  int32_t BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff ff6d 	bl	80068a8 <GetBufferSize>
 80069ce:	4603      	mov	r3, r0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 80069d2:	4940      	ldr	r1, [pc, #256]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	4613      	mov	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	1a9b      	subs	r3, r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	440b      	add	r3, r1
 80069e0:	6819      	ldr	r1, [r3, #0]
 80069e2:	483c      	ldr	r0, [pc, #240]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4613      	mov	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4403      	add	r3, r0
 80069f0:	3304      	adds	r3, #4
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	4419      	add	r1, r3
 80069fc:	4835      	ldr	r0, [pc, #212]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4403      	add	r3, r0
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	fb02 f203 	mul.w	r2, r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	18d0      	adds	r0, r2, r3
 8006a18:	4c2e      	ldr	r4, [pc, #184]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4423      	add	r3, r4
 8006a26:	3314      	adds	r3, #20
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	fb03 f300 	mul.w	r3, r3, r0
 8006a2e:	440b      	add	r3, r1
 8006a30:	623b      	str	r3, [r7, #32]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 8006a32:	4928      	ldr	r1, [pc, #160]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	6819      	ldr	r1, [r3, #0]
 8006a42:	4824      	ldr	r0, [pc, #144]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4613      	mov	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4403      	add	r3, r0
 8006a50:	3304      	adds	r3, #4
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a56:	fb02 f303 	mul.w	r3, r2, r3
 8006a5a:	4419      	add	r1, r3
 8006a5c:	481d      	ldr	r0, [pc, #116]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4613      	mov	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4403      	add	r3, r0
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a70:	fb02 f203 	mul.w	r2, r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	18d0      	adds	r0, r2, r3
 8006a78:	4c16      	ldr	r4, [pc, #88]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4423      	add	r3, r4
 8006a86:	3314      	adds	r3, #20
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	fb03 f300 	mul.w	r3, r3, r0
 8006a8e:	440b      	add	r3, r1
 8006a90:	61fb      	str	r3, [r7, #28]
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 8006a92:	697c      	ldr	r4, [r7, #20]
 8006a94:	6a3d      	ldr	r5, [r7, #32]
 8006a96:	69fe      	ldr	r6, [r7, #28]
 8006a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a9e:	480d      	ldr	r0, [pc, #52]	; (8006ad4 <CUSTOM_CopyRect+0x11c>)
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	330c      	adds	r3, #12
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9100      	str	r1, [sp, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f7ff fe81 	bl	80067cc <DMA2D_CopyBuffer>
}
 8006aca:	bf00      	nop
 8006acc:	372c      	adds	r7, #44	; 0x2c
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200235f0 	.word	0x200235f0

08006ad8 <CUSTOM_FillRect>:
/*********************************************************************
*
*       CUSTOM_FillRect
*/
static void CUSTOM_FillRect(int32_t LayerIndex, int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t PixelIndex)
{
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	b08b      	sub	sp, #44	; 0x2c
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t xSize, ySize;

  if (GUI_GetDrawMode() == GUI_DM_XOR)
 8006ae6:	f007 ffe9 	bl	800eabc <GUI_GetDrawMode>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d110      	bne.n	8006b12 <CUSTOM_FillRect+0x3a>
  {
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 8006af0:	2200      	movs	r2, #0
 8006af2:	2119      	movs	r1, #25
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f006 f87f 	bl	800cbf8 <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	68b8      	ldr	r0, [r7, #8]
 8006b02:	f006 faa3 	bl	800d04c <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))CUSTOM_FillRect);
 8006b06:	4a32      	ldr	r2, [pc, #200]	; (8006bd0 <CUSTOM_FillRect+0xf8>)
 8006b08:	2119      	movs	r1, #25
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f006 f874 	bl	800cbf8 <LCD_SetDevFunc>
    ySize = y1 - y0 + 1;
    BufferSize = GetBufferSize(LayerIndex);
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
  }
}
 8006b10:	e059      	b.n	8006bc6 <CUSTOM_FillRect+0xee>
    xSize = x1 - x0 + 1;
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	3301      	adds	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
    ySize = y1 - y0 + 1;
 8006b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	3301      	adds	r3, #1
 8006b24:	61bb      	str	r3, [r7, #24]
    BufferSize = GetBufferSize(LayerIndex);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff febd 	bl	80068a8 <GetBufferSize>
 8006b2e:	6178      	str	r0, [r7, #20]
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 8006b30:	4928      	ldr	r1, [pc, #160]	; (8006bd4 <CUSTOM_FillRect+0xfc>)
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461c      	mov	r4, r3
 8006b42:	4924      	ldr	r1, [pc, #144]	; (8006bd4 <CUSTOM_FillRect+0xfc>)
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4613      	mov	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	440b      	add	r3, r1
 8006b50:	330c      	adds	r3, #12
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	fb02 f203 	mul.w	r2, r2, r3
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	18d1      	adds	r1, r2, r3
 8006b5e:	481d      	ldr	r0, [pc, #116]	; (8006bd4 <CUSTOM_FillRect+0xfc>)
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4613      	mov	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4403      	add	r3, r0
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	fb03 f301 	mul.w	r3, r3, r1
 8006b74:	4618      	mov	r0, r3
 8006b76:	4917      	ldr	r1, [pc, #92]	; (8006bd4 <CUSTOM_FillRect+0xfc>)
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3308      	adds	r3, #8
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	fb03 f302 	mul.w	r3, r3, r2
 8006b90:	4403      	add	r3, r0
 8006b92:	4423      	add	r3, r4
 8006b94:	613b      	str	r3, [r7, #16]
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	693c      	ldr	r4, [r7, #16]
 8006b9a:	69fd      	ldr	r5, [r7, #28]
 8006b9c:	69be      	ldr	r6, [r7, #24]
 8006b9e:	490d      	ldr	r1, [pc, #52]	; (8006bd4 <CUSTOM_FillRect+0xfc>)
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	330c      	adds	r3, #12
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb8:	9301      	str	r3, [sp, #4]
 8006bba:	9200      	str	r2, [sp, #0]
 8006bbc:	4633      	mov	r3, r6
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	f7ff fe3b 	bl	800683c <DMA2D_FillBuffer>
}
 8006bc6:	bf00      	nop
 8006bc8:	3724      	adds	r7, #36	; 0x24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	08006ad9 	.word	0x08006ad9
 8006bd4:	200235f0 	.word	0x200235f0

08006bd8 <DMA2D_LoadLUT>:
  * @param  pColor
  * @param  NumItems
  * @retval None
  */
static void DMA2D_LoadLUT(LCD_COLOR * pColor, uint32_t NumItems)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  DMA2D->FGCMAR  = (uint32_t)pColor;
 8006be2:	4a0b      	ldr	r2, [pc, #44]	; (8006c10 <DMA2D_LoadLUT+0x38>)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*  Foreground PFC Control Register */
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 8006be8:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <DMA2D_LoadLUT+0x38>)
                  | ((NumItems - 1) & 0xFF) << 8;   /* Number of items to load */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
  DMA2D->FGPFCCR  = LTDC_PIXEL_FORMAT_RGB888         /* Pixel format */
 8006bf6:	61d3      	str	r3, [r2, #28]
  DMA2D->FGPFCCR |= (1 << 5);                       /* Start loading */
 8006bf8:	4a05      	ldr	r2, [pc, #20]	; (8006c10 <DMA2D_LoadLUT+0x38>)
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <DMA2D_LoadLUT+0x38>)
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f043 0320 	orr.w	r3, r3, #32
 8006c02:	61d3      	str	r3, [r2, #28]
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	4002b000 	.word	0x4002b000

08006c14 <InvertAlpha_SwapRB>:
  * @param  pColorDst: Destination address
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha_SwapRB(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
  uint32_t Color;
  do
  {
    Color = *pColorSrc++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	60fa      	str	r2, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	617b      	str	r3, [r7, #20]
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	60ba      	str	r2, [r7, #8]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	0412      	lsls	r2, r2, #16
 8006c34:	f402 017f 	and.w	r1, r2, #16711680	; 0xff0000
                 |  (Color & 0x0000FF00)                /* Green */
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8006c3e:	4311      	orrs	r1, r2
                 | ((Color & 0x00FF0000) >> 16)         /* Swap red <-> blue */
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	0c12      	lsrs	r2, r2, #16
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	4311      	orrs	r1, r2
                 | ((Color & 0xFF000000) ^ 0xFF000000); /* Invert alpha */
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	43d2      	mvns	r2, r2
 8006c4c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006c50:	430a      	orrs	r2, r1
    *pColorDst++ = ((Color & 0x000000FF) << 16)         /* Swap red <-> blue */
 8006c52:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	607b      	str	r3, [r7, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1df      	bne.n	8006c20 <InvertAlpha_SwapRB+0xc>
}
 8006c60:	bf00      	nop
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <InvertAlpha>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void InvertAlpha(LCD_COLOR * pColorSrc, LCD_COLOR * pColorDst, uint32_t NumItems)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t Color;

  do
  {
    Color = *pColorSrc++;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	1d1a      	adds	r2, r3, #4
 8006c7c:	60fa      	str	r2, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	617b      	str	r3, [r7, #20]
    *pColorDst++ = Color ^ 0xFF000000; /* Invert alpha */
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	60ba      	str	r2, [r7, #8]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	f082 427f 	eor.w	r2, r2, #4278190080	; 0xff000000
 8006c8e:	601a      	str	r2, [r3, #0]
  } while (--NumItems);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	607b      	str	r3, [r7, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1ed      	bne.n	8006c78 <InvertAlpha+0xc>
}
 8006c9c:	bf00      	nop
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <DMA2D_AlphaBlendingBulk>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlendingBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8006cb6:	4b1b      	ldr	r3, [pc, #108]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cb8:	4a1b      	ldr	r2, [pc, #108]	; (8006d28 <DMA2D_AlphaBlendingBulk+0x80>)
 8006cba:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8006cc2:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8006cc8:	4a16      	ldr	r2, [pc, #88]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register */
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	611a      	str	r2, [r3, #16]
  DMA2D->BGOR    = 0;                               /* Background Offset Register */
 8006cd4:	4b13      	ldr	r3, [pc, #76]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	619a      	str	r2, [r3, #24]
  DMA2D->OOR     = 0;                               /* Output Offset Register */
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Foreground PFC Control Register (Defines the FG pixel format) */
 8006ce0:	4b10      	ldr	r3, [pc, #64]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	61da      	str	r2, [r3, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;       /* Background PFC Control Register (Defines the BG pixel format) */
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	625a      	str	r2, [r3, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;       /* Output     PFC Control Register (Defines the output pixel format) */
 8006cec:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */

  DMA2D->CR     |= DMA2D_CR_START;
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006d00:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f043 0301 	orr.w	r3, r3, #1
 8006d08:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8006d0a:	bf00      	nop
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <DMA2D_AlphaBlendingBulk+0x7c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1f9      	bne.n	8006d0c <DMA2D_AlphaBlendingBulk+0x64>
  {
  }
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	4002b000 	.word	0x4002b000
 8006d28:	00020200 	.word	0x00020200

08006d2c <DMA2D_MixColors>:
  * @param  BkColor
  * @param  Intens
  * @retval LCD_COLOR
  */
static LCD_COLOR DMA2D_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b089      	sub	sp, #36	; 0x24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  uint32_t ColorFG, ColorBG, ColorDst;

  if ((BkColor & 0xFF000000) == 0xFF000000)
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8006d44:	d101      	bne.n	8006d4a <DMA2D_MixColors+0x1e>
  {
    return Color;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	e039      	b.n	8006dbe <DMA2D_MixColors+0x92>
  }
  ColorFG = Color   ^ 0xFF000000;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	61fb      	str	r3, [r7, #28]
  ColorBG = BkColor ^ 0xFF000000;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	61bb      	str	r3, [r7, #24]

  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8006d5a:	4b1c      	ldr	r3, [pc, #112]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006d5c:	4a1c      	ldr	r2, [pc, #112]	; (8006dd0 <DMA2D_MixColors+0xa4>)
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)&ColorFG;                   /* Foreground Memory Address Register */
 8006d60:	4a1a      	ldr	r2, [pc, #104]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006d62:	f107 031c 	add.w	r3, r7, #28
 8006d66:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)&ColorBG;                   /* Background Memory Address Register */
 8006d68:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006d6a:	f107 0318 	add.w	r3, r7, #24
 8006d6e:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)&ColorDst;                  /* Output Memory Address Register (Destination address) */
 8006d70:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006d78:	4a14      	ldr	r2, [pc, #80]	; (8006dcc <DMA2D_MixColors+0xa0>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006d82:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006d84:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <DMA2D_MixColors+0xa0>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006d8c:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006d8e:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(1 << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006d98:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Control Register (Start operation) */
 8006d9e:	4a0b      	ldr	r2, [pc, #44]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 8006daa:	bf00      	nop
 8006dac:	4b07      	ldr	r3, [pc, #28]	; (8006dcc <DMA2D_MixColors+0xa0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f9      	bne.n	8006dac <DMA2D_MixColors+0x80>
  {
  }

  return (ColorDst ^ 0xFF000000);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f083 437f 	eor.w	r3, r3, #4278190080	; 0xff000000
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3724      	adds	r7, #36	; 0x24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	4002b000 	.word	0x4002b000
 8006dd0:	00020200 	.word	0x00020200

08006dd4 <DMA2D_ConvertColor>:
  * @param  PixelFormatDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_ConvertColor(void * pSrc, void * pDst,  uint32_t PixelFormatSrc, uint32_t PixelFormatDst, uint32_t NumItems)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
  /* Set up mode */

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006de4:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 8006de8:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 8006dea:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 8006df0:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset) */
 8006df6:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 8006dfc:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 8006e02:	4a0f      	ldr	r2, [pc, #60]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	61d3      	str	r3, [r2, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 8006e08:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 8006e0e:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8006e1a:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8006e26:	bf00      	nop
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <DMA2D_ConvertColor+0x6c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f9      	bne.n	8006e28 <DMA2D_ConvertColor+0x54>
  {
  }
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	4002b000 	.word	0x4002b000

08006e44 <_LCD_GetpPalConvTable>:
  * @param  pBitmap
  * @param  LayerIndex
  * @retval LCD_PIXELINDEX
  */
static LCD_PIXELINDEX * _LCD_GetpPalConvTable(const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, const GUI_BITMAP GUI_UNI_PTR * pBitmap, int LayerIndex)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  void (* pFunc)(void);
  int32_t DoDefault = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]

  /* Check if we have a non transparent device independent bitmap */
  if (pBitmap->BitsPerPixel == 8)
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	88db      	ldrh	r3, [r3, #6]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d119      	bne.n	8006e90 <_LCD_GetpPalConvTable+0x4c>
  {
    pFunc = LCD_GetDevFunc(LayerIndex, LCD_DEVFUNC_DRAWBMP_8BPP);
 8006e5c:	2125      	movs	r1, #37	; 0x25
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f005 ff2c 	bl	800ccbc <LCD_GetDevFunc>
 8006e64:	6138      	str	r0, [r7, #16]
    if (pFunc)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00e      	beq.n	8006e8a <_LCD_GetpPalConvTable+0x46>
    {
      if (pBitmap->pPal)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <_LCD_GetpPalConvTable+0x40>
      {
        if (pBitmap->pPal->HasTrans)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	791b      	ldrb	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <_LCD_GetpPalConvTable+0x50>
        {
          DoDefault = 1;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e007      	b.n	8006e94 <_LCD_GetpPalConvTable+0x50>
        }
      }
      else
      {
        DoDefault = 1;
 8006e84:	2301      	movs	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e004      	b.n	8006e94 <_LCD_GetpPalConvTable+0x50>
      }
    }
    else
    {
      DoDefault = 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e001      	b.n	8006e94 <_LCD_GetpPalConvTable+0x50>
    }
  }
  else
  {
    DoDefault = 1;
 8006e90:	2301      	movs	r3, #1
 8006e92:	617b      	str	r3, [r7, #20]
  }

  /* Default palette management for other cases */
  if (DoDefault)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d004      	beq.n	8006ea4 <_LCD_GetpPalConvTable+0x60>
  {

    /* Return a pointer to the index values to be used by the controller */
    return LCD_GetpPalConvTable(pLogPal);
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f005 fffe 	bl	800ce9c <LCD_GetpPalConvTable>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	e00e      	b.n	8006ec2 <_LCD_GetpPalConvTable+0x7e>
  }

  /* Convert palette colors from ARGB to ABGR */
  InvertAlpha_SwapRB((U32 *)pLogPal->pPalEntries, aBufferDMA2D, pLogPal->NumEntries);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6898      	ldr	r0, [r3, #8]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	4907      	ldr	r1, [pc, #28]	; (8006ecc <_LCD_GetpPalConvTable+0x88>)
 8006eb0:	f7ff feb0 	bl	8006c14 <InvertAlpha_SwapRB>

  /* Load LUT using DMA2D */
  DMA2D_LoadLUT(aBufferDMA2D, pLogPal->NumEntries);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4804      	ldr	r0, [pc, #16]	; (8006ecc <_LCD_GetpPalConvTable+0x88>)
 8006ebc:	f7ff fe8c 	bl	8006bd8 <DMA2D_LoadLUT>

  /* Return something not NULL */
  return aBufferDMA2D;
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <_LCD_GetpPalConvTable+0x88>)
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20023628 	.word	0x20023628

08006ed0 <DMA2D_MixColorsBulk>:
  * @param  Intens
  * @param  NumItems
  * @retval None
  */
static void DMA2D_MixColorsBulk(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U8 Intens, uint32_t NumItems)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	70fb      	strb	r3, [r7, #3]
  /* Set up mode */
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 8006ede:	4b1a      	ldr	r3, [pc, #104]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006ee0:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <DMA2D_MixColorsBulk+0x7c>)
 8006ee2:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pColorFG;                   /* Foreground Memory Address Register */
 8006ee4:	4a18      	ldr	r2, [pc, #96]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	60d3      	str	r3, [r2, #12]
  DMA2D->BGMAR   = (uint32_t)pColorBG;                   /* Background Memory Address Register */
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6153      	str	r3, [r2, #20]
  DMA2D->OMAR    = (uint32_t)pColorDst;                  /* Output Memory Address Register (Destination address) */
 8006ef0:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006ef6:	4a14      	ldr	r2, [pc, #80]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
                 | (1UL << 16)
                 | ((uint32_t)Intens << 24);
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	061b      	lsls	r3, r3, #24
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006f00:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006f02:	4a11      	ldr	r2, [pc, #68]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
                 | (0UL << 16)
                 | ((uint32_t)(255 - Intens) << 24);
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006f0a:	061b      	lsls	r3, r3, #24
  DMA2D->BGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888
 8006f0c:	6253      	str	r3, [r2, #36]	; 0x24
  DMA2D->OPFCCR  = LTDC_PIXEL_FORMAT_ARGB8888;
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(NumItems << 16) | 1;              /* Number of Line Register (Size configuration of area to be transfered) */
 8006f14:	4a0c      	ldr	r2, [pc, #48]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6453      	str	r3, [r2, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;
 8006f20:	4a09      	ldr	r2, [pc, #36]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]

  while (DMA2D->CR & DMA2D_CR_START)
 8006f2c:	bf00      	nop
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <DMA2D_MixColorsBulk+0x78>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f9      	bne.n	8006f2e <DMA2D_MixColorsBulk+0x5e>
  {
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	4002b000 	.word	0x4002b000
 8006f4c:	00020200 	.word	0x00020200

08006f50 <DMA2D_AlphaBlending>:
  * @param  pColorDst
  * @param  NumItems
  * @retval None
  */
static void DMA2D_AlphaBlending(LCD_COLOR * pColorFG, LCD_COLOR * pColorBG, LCD_COLOR * pColorDst, U32 NumItems)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  /* Invert alpha values */
  InvertAlpha(pColorFG, aBuffer_FG, NumItems);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	490b      	ldr	r1, [pc, #44]	; (8006f90 <DMA2D_AlphaBlending+0x40>)
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fe82 	bl	8006c6c <InvertAlpha>
  InvertAlpha(pColorBG, aBuffer_BG, NumItems);
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	490a      	ldr	r1, [pc, #40]	; (8006f94 <DMA2D_AlphaBlending+0x44>)
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f7ff fe7d 	bl	8006c6c <InvertAlpha>

  /* Use DMA2D for mixing */
  DMA2D_AlphaBlendingBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, NumItems);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	4a08      	ldr	r2, [pc, #32]	; (8006f98 <DMA2D_AlphaBlending+0x48>)
 8006f76:	4907      	ldr	r1, [pc, #28]	; (8006f94 <DMA2D_AlphaBlending+0x44>)
 8006f78:	4805      	ldr	r0, [pc, #20]	; (8006f90 <DMA2D_AlphaBlending+0x40>)
 8006f7a:	f7ff fe95 	bl	8006ca8 <DMA2D_AlphaBlendingBulk>

  /* Invert alpha values */
  InvertAlpha(aBufferDMA2D, pColorDst, NumItems);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4805      	ldr	r0, [pc, #20]	; (8006f98 <DMA2D_AlphaBlending+0x48>)
 8006f84:	f7ff fe72 	bl	8006c6c <InvertAlpha>
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20024528 	.word	0x20024528
 8006f94:	20025428 	.word	0x20025428
 8006f98:	20023628 	.word	0x20023628

08006f9c <DMA2D_Index2ColorBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	70fb      	strb	r3, [r7, #3]
  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(pIndex, aBufferDMA2D, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	4906      	ldr	r1, [pc, #24]	; (8006fcc <DMA2D_Index2ColorBulk+0x30>)
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff ff0d 	bl	8006dd4 <DMA2D_ConvertColor>

  /* Convert colors from ARGB to ABGR and invert alpha values */
  InvertAlpha_SwapRB(aBufferDMA2D, pColor, NumItems);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	4803      	ldr	r0, [pc, #12]	; (8006fcc <DMA2D_Index2ColorBulk+0x30>)
 8006fc0:	f7ff fe28 	bl	8006c14 <InvertAlpha_SwapRB>
}
 8006fc4:	bf00      	nop
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20023628 	.word	0x20023628

08006fd0 <DMA2D_Color2IndexBulk>:
  * @param  SizeOfIndex
  * @param  PixelFormat
  * @retval None
  */
static void DMA2D_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, uint32_t NumItems, U8 SizeOfIndex, uint32_t PixelFormat)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	70fb      	strb	r3, [r7, #3]
  /* Convert colors from ABGR to ARGB and invert alpha values */
  InvertAlpha_SwapRB(pColor, aBufferDMA2D, NumItems);
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4907      	ldr	r1, [pc, #28]	; (8007000 <DMA2D_Color2IndexBulk+0x30>)
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fe16 	bl	8006c14 <InvertAlpha_SwapRB>

  /* Use DMA2D for the conversion */
  DMA2D_ConvertColor(aBufferDMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	4803      	ldr	r0, [pc, #12]	; (8007000 <DMA2D_Color2IndexBulk+0x30>)
 8006ff4:	f7ff feee 	bl	8006dd4 <DMA2D_ConvertColor>
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20023628 	.word	0x20023628

08007004 <LCD_MixColorsBulk>:
  * @param  ySize
  * @param  Intens
  * @retval None
  */
static void LCD_MixColorsBulk(U32 * pFG, U32 * pBG, U32 * pDst, unsigned OffFG, unsigned OffBG, unsigned OffDest, unsigned xSize, unsigned ySize, U8 Intens)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  int32_t y;

  GUI_USE_PARA(OffFG);
  GUI_USE_PARA(OffDest);
  for (y = 0; y < ySize; y++)
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e030      	b.n	800707a <LCD_MixColorsBulk+0x76>
  {
    /* Invert alpha values */
    InvertAlpha(pFG, aBuffer_FG, xSize);
 8007018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800701a:	491c      	ldr	r1, [pc, #112]	; (800708c <LCD_MixColorsBulk+0x88>)
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fe25 	bl	8006c6c <InvertAlpha>
    InvertAlpha(pBG, aBuffer_BG, xSize);
 8007022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007024:	491a      	ldr	r1, [pc, #104]	; (8007090 <LCD_MixColorsBulk+0x8c>)
 8007026:	68b8      	ldr	r0, [r7, #8]
 8007028:	f7ff fe20 	bl	8006c6c <InvertAlpha>

    DMA2D_MixColorsBulk(aBuffer_FG, aBuffer_BG, aBufferDMA2D, Intens, xSize);
 800702c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	4a17      	ldr	r2, [pc, #92]	; (8007094 <LCD_MixColorsBulk+0x90>)
 8007038:	4915      	ldr	r1, [pc, #84]	; (8007090 <LCD_MixColorsBulk+0x8c>)
 800703a:	4814      	ldr	r0, [pc, #80]	; (800708c <LCD_MixColorsBulk+0x88>)
 800703c:	f7ff ff48 	bl	8006ed0 <DMA2D_MixColorsBulk>

    InvertAlpha(aBufferDMA2D, pDst, xSize);
 8007040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4813      	ldr	r0, [pc, #76]	; (8007094 <LCD_MixColorsBulk+0x90>)
 8007046:	f7ff fe11 	bl	8006c6c <InvertAlpha>
    pFG  += xSize + OffFG;
 800704a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
    pBG  += xSize + OffBG;
 8007058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	4413      	add	r3, r2
 8007064:	60bb      	str	r3, [r7, #8]
    pDst += xSize + OffDest;
 8007066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	607b      	str	r3, [r7, #4]
  for (y = 0; y < ySize; y++)
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	3301      	adds	r3, #1
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	429a      	cmp	r2, r3
 8007080:	d3ca      	bcc.n	8007018 <LCD_MixColorsBulk+0x14>
  }
}
 8007082:	bf00      	nop
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20024528 	.word	0x20024528
 8007090:	20025428 	.word	0x20025428
 8007094:	20023628 	.word	0x20023628

08007098 <DMA2D_DrawBitmapL8>:
  * @param  xSize
  * @param  ySize
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  uint32_t OffSrc, uint32_t OffDst, uint32_t PixelFormatDst, uint32_t xSize, uint32_t ySize)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 80070a6:	4b17      	ldr	r3, [pc, #92]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070a8:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 80070ac:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (uint32_t)pSrc;                       /* Foreground Memory Address Register (Source address) */
 80070ae:	4a15      	ldr	r2, [pc, #84]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	60d3      	str	r3, [r2, #12]
  DMA2D->OMAR    = (uint32_t)pDst;                       /* Output Memory Address Register (Destination address) */
 80070b4:	4a13      	ldr	r2, [pc, #76]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 80070ba:	4a12      	ldr	r2, [pc, #72]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 80070c0:	4a10      	ldr	r2, [pc, #64]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 80070c6:	4b0f      	ldr	r3, [pc, #60]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070c8:	2205      	movs	r2, #5
 80070ca:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format) */
 80070cc:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	6353      	str	r3, [r2, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (uint32_t)(xSize << 16) | ySize;      /* Number of Line Register (Size configuration of area to be transfered) */
 80070d2:	490c      	ldr	r1, [pc, #48]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	041a      	lsls	r2, r3, #16
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	4313      	orrs	r3, r2
 80070dc:	644b      	str	r3, [r1, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                               /* Start operation */
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  while (DMA2D->CR & DMA2D_CR_START)
 80070ea:	bf00      	nop
 80070ec:	4b05      	ldr	r3, [pc, #20]	; (8007104 <DMA2D_DrawBitmapL8+0x6c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f9      	bne.n	80070ec <DMA2D_DrawBitmapL8+0x54>
  {
  }
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	4002b000 	.word	0x4002b000

08007108 <BSP_LCD_DrawBitmap16bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap16bpp(int32_t LayerIndex, int32_t x, int32_t y, U16 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 8007108:	b5b0      	push	{r4, r5, r7, lr}
 800710a:	b08c      	sub	sp, #48	; 0x30
 800710c:	af04      	add	r7, sp, #16
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fbc5 	bl	80068a8 <GetBufferSize>
 800711e:	61f8      	str	r0, [r7, #28]
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 8007120:	492c      	ldr	r1, [pc, #176]	; (80071d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461c      	mov	r4, r3
 8007132:	4928      	ldr	r1, [pc, #160]	; (80071d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4613      	mov	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	330c      	adds	r3, #12
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	fb02 f203 	mul.w	r2, r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	18d1      	adds	r1, r2, r3
 800714e:	4821      	ldr	r0, [pc, #132]	; (80071d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	4613      	mov	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4403      	add	r3, r0
 800715c:	3314      	adds	r3, #20
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	fb03 f301 	mul.w	r3, r3, r1
 8007164:	4618      	mov	r0, r3
 8007166:	491b      	ldr	r1, [pc, #108]	; (80071d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	3308      	adds	r3, #8
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	461a      	mov	r2, r3
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	fb03 f302 	mul.w	r3, r3, r2
 8007180:	4403      	add	r3, r0
 8007182:	4423      	add	r3, r4
 8007184:	61bb      	str	r3, [r7, #24]
  OffLineSrc = (BytesPerLine / 2) - xSize;
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	0fda      	lsrs	r2, r3, #31
 800718a:	4413      	add	r3, r2
 800718c:	105b      	asrs	r3, r3, #1
 800718e:	461a      	mov	r2, r3
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	617b      	str	r3, [r7, #20]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 8007196:	490f      	ldr	r1, [pc, #60]	; (80071d4 <BSP_LCD_DrawBitmap16bpp+0xcc>)
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4613      	mov	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	330c      	adds	r3, #12
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	613b      	str	r3, [r7, #16]
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	69bc      	ldr	r4, [r7, #24]
 80071b2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80071b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	6939      	ldr	r1, [r7, #16]
 80071ba:	9102      	str	r1, [sp, #8]
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	462b      	mov	r3, r5
 80071c2:	4622      	mov	r2, r4
 80071c4:	6839      	ldr	r1, [r7, #0]
 80071c6:	f7ff fb01 	bl	80067cc <DMA2D_CopyBuffer>
}
 80071ca:	bf00      	nop
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bdb0      	pop	{r4, r5, r7, pc}
 80071d2:	bf00      	nop
 80071d4:	200235f0 	.word	0x200235f0

080071d8 <BSP_LCD_DrawBitmap8bpp>:
  * @param  ySize
  * @param  BytesPerLine
  * @retval None
  */
static void BSP_LCD_DrawBitmap8bpp(int32_t LayerIndex, int32_t x, int32_t y, U8 const * p, int32_t xSize, int32_t ySize, int32_t BytesPerLine)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b08f      	sub	sp, #60	; 0x3c
 80071dc:	af04      	add	r7, sp, #16
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
  uint32_t BufferSize, AddrDst;
  int32_t OffLineSrc, OffLineDst;
  uint32_t PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff fb5d 	bl	80068a8 <GetBufferSize>
 80071ee:	6278      	str	r0, [r7, #36]	; 0x24
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 80071f0:	492c      	ldr	r1, [pc, #176]	; (80072a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4613      	mov	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	440b      	add	r3, r1
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461c      	mov	r4, r3
 8007202:	4928      	ldr	r1, [pc, #160]	; (80072a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4613      	mov	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	440b      	add	r3, r1
 8007210:	330c      	adds	r3, #12
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	fb02 f203 	mul.w	r2, r2, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	18d1      	adds	r1, r2, r3
 800721e:	4821      	ldr	r0, [pc, #132]	; (80072a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4613      	mov	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4403      	add	r3, r0
 800722c:	3314      	adds	r3, #20
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	fb03 f301 	mul.w	r3, r3, r1
 8007234:	4618      	mov	r0, r3
 8007236:	491b      	ldr	r1, [pc, #108]	; (80072a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	440b      	add	r3, r1
 8007244:	3308      	adds	r3, #8
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	fb03 f302 	mul.w	r3, r3, r2
 8007250:	4403      	add	r3, r0
 8007252:	4423      	add	r3, r4
 8007254:	623b      	str	r3, [r7, #32]
  OffLineSrc = BytesPerLine - xSize;
 8007256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	61fb      	str	r3, [r7, #28]
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800725e:	4911      	ldr	r1, [pc, #68]	; (80072a4 <BSP_LCD_DrawBitmap8bpp+0xcc>)
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	330c      	adds	r3, #12
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	61bb      	str	r3, [r7, #24]
  PixelFormat = LCD_LL_GetPixelformat(LayerIndex);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fa4b 	bl	8006714 <LCD_LL_GetPixelformat>
 800727e:	6178      	str	r0, [r7, #20]
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 8007280:	6a39      	ldr	r1, [r7, #32]
 8007282:	69f8      	ldr	r0, [r7, #28]
 8007284:	69bc      	ldr	r4, [r7, #24]
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800728a:	9202      	str	r2, [sp, #8]
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	4623      	mov	r3, r4
 8007294:	4602      	mov	r2, r0
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	f7ff fefe 	bl	8007098 <DMA2D_DrawBitmapL8>
}
 800729c:	bf00      	nop
 800729e:	372c      	adds	r7, #44	; 0x2c
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd90      	pop	{r4, r7, pc}
 80072a4:	200235f0 	.word	0x200235f0

080072a8 <UI_SetDefault>:
} ui_state_t;

static ui_state_t uiState_g;

void UI_SetDefault(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
	uiState_g.mode = NOT_ACTIVE;
 80072ac:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <UI_SetDefault+0x28>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
	uiState_g.state[ZONE_TOP] = L_ONE;
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <UI_SetDefault+0x28>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	705a      	strb	r2, [r3, #1]
	uiState_g.state[ZONE_MID] = L_ONE;
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <UI_SetDefault+0x28>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	709a      	strb	r2, [r3, #2]
	uiState_g.state[ZONE_BOT] = L_ONE;
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <UI_SetDefault+0x28>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	70da      	strb	r2, [r3, #3]
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20026758 	.word	0x20026758

080072d4 <UI_SetState>:

void UI_SetState(ui_state_t uiState)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	uiState_g.mode = uiState.mode;
 80072dc:	793a      	ldrb	r2, [r7, #4]
 80072de:	4b08      	ldr	r3, [pc, #32]	; (8007300 <UI_SetState+0x2c>)
 80072e0:	701a      	strb	r2, [r3, #0]
	uiState_g.state[ZONE_TOP] = uiState.state[ZONE_TOP];
 80072e2:	797a      	ldrb	r2, [r7, #5]
 80072e4:	4b06      	ldr	r3, [pc, #24]	; (8007300 <UI_SetState+0x2c>)
 80072e6:	705a      	strb	r2, [r3, #1]
	uiState_g.state[ZONE_MID] = uiState.state[ZONE_MID];
 80072e8:	79ba      	ldrb	r2, [r7, #6]
 80072ea:	4b05      	ldr	r3, [pc, #20]	; (8007300 <UI_SetState+0x2c>)
 80072ec:	709a      	strb	r2, [r3, #2]
	uiState_g.state[ZONE_BOT] = uiState.state[ZONE_BOT];
 80072ee:	79fa      	ldrb	r2, [r7, #7]
 80072f0:	4b03      	ldr	r3, [pc, #12]	; (8007300 <UI_SetState+0x2c>)
 80072f2:	70da      	strb	r2, [r3, #3]
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	20026758 	.word	0x20026758

08007304 <UI_GetState>:

void UI_GetState(ui_state_t *uiState)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	uiState->mode = uiState_g.mode;
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <UI_GetState+0x34>)
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	701a      	strb	r2, [r3, #0]
	uiState->state[ZONE_TOP] = uiState_g.state[ZONE_TOP];
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <UI_GetState+0x34>)
 8007316:	785a      	ldrb	r2, [r3, #1]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	705a      	strb	r2, [r3, #1]
	uiState->state[ZONE_MID] = uiState_g.state[ZONE_MID];
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <UI_GetState+0x34>)
 800731e:	789a      	ldrb	r2, [r3, #2]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	709a      	strb	r2, [r3, #2]
	uiState->state[ZONE_BOT] = uiState_g.state[ZONE_BOT];
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <UI_GetState+0x34>)
 8007326:	78da      	ldrb	r2, [r3, #3]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	70da      	strb	r2, [r3, #3]
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	20026758 	.word	0x20026758

0800733c <drawAllNotActive>:

static void drawAllNotActive(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af02      	add	r7, sp, #8

	/* Rectangles */
	GUI_SetBkColor(CUS_BACKGROUND);
 8007342:	48f2      	ldr	r0, [pc, #968]	; (800770c <drawAllNotActive+0x3d0>)
 8007344:	f006 fbaa 	bl	800da9c <GUI_SetBkColor>
	GUI_Clear();
 8007348:	f008 fb30 	bl	800f9ac <GUI_Clear>
	GUI_SetDrawMode(GUI_DRAWMODE_NORMAL);
 800734c:	2000      	movs	r0, #0
 800734e:	f006 fba3 	bl	800da98 <GUI_SetDrawMode>
	GUI_SetTextMode(GUI_TM_NORMAL);
 8007352:	2000      	movs	r0, #0
 8007354:	f006 fb8c 	bl	800da70 <GUI_SetTextMode>
	GUI_SetFont(&GUI_Font8x16);
 8007358:	48ed      	ldr	r0, [pc, #948]	; (8007710 <drawAllNotActive+0x3d4>)
 800735a:	f006 fb93 	bl	800da84 <GUI_SetFont>

	GUI_SetColor(CUS_DARKGRAY);
 800735e:	48ed      	ldr	r0, [pc, #948]	; (8007714 <drawAllNotActive+0x3d8>)
 8007360:	f006 fb9e 	bl	800daa0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 5, 235, 47, 8);
 8007364:	2308      	movs	r3, #8
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	232f      	movs	r3, #47	; 0x2f
 800736a:	22eb      	movs	r2, #235	; 0xeb
 800736c:	2105      	movs	r1, #5
 800736e:	2005      	movs	r0, #5
 8007370:	f007 fbaa 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 8007374:	2000      	movs	r0, #0
 8007376:	f006 fb93 	bl	800daa0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 5, 26, 47, 8);
 800737a:	2308      	movs	r3, #8
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	232f      	movs	r3, #47	; 0x2f
 8007380:	221a      	movs	r2, #26
 8007382:	2105      	movs	r1, #5
 8007384:	2005      	movs	r0, #5
 8007386:	f007 fb9f 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 800738a:	48e2      	ldr	r0, [pc, #904]	; (8007714 <drawAllNotActive+0x3d8>)
 800738c:	f006 fb88 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(15, 5, 30, 47);
 8007390:	232f      	movs	r3, #47	; 0x2f
 8007392:	221e      	movs	r2, #30
 8007394:	2105      	movs	r1, #5
 8007396:	200f      	movs	r0, #15
 8007398:	f007 fbfa 	bl	800eb90 <GUI_FillRect>

	GUI_FillRoundedRect(5, 49, 235, 91, 8);
 800739c:	2308      	movs	r3, #8
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	235b      	movs	r3, #91	; 0x5b
 80073a2:	22eb      	movs	r2, #235	; 0xeb
 80073a4:	2131      	movs	r1, #49	; 0x31
 80073a6:	2005      	movs	r0, #5
 80073a8:	f007 fb8e 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 80073ac:	2000      	movs	r0, #0
 80073ae:	f006 fb77 	bl	800daa0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 49, 26, 91, 8);
 80073b2:	2308      	movs	r3, #8
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	235b      	movs	r3, #91	; 0x5b
 80073b8:	221a      	movs	r2, #26
 80073ba:	2131      	movs	r1, #49	; 0x31
 80073bc:	2005      	movs	r0, #5
 80073be:	f007 fb83 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 80073c2:	48d4      	ldr	r0, [pc, #848]	; (8007714 <drawAllNotActive+0x3d8>)
 80073c4:	f006 fb6c 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(15, 49, 30, 91);
 80073c8:	235b      	movs	r3, #91	; 0x5b
 80073ca:	221e      	movs	r2, #30
 80073cc:	2131      	movs	r1, #49	; 0x31
 80073ce:	200f      	movs	r0, #15
 80073d0:	f007 fbde 	bl	800eb90 <GUI_FillRect>

	GUI_FillRoundedRect(5, 93, 235, 135, 8);
 80073d4:	2308      	movs	r3, #8
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	2387      	movs	r3, #135	; 0x87
 80073da:	22eb      	movs	r2, #235	; 0xeb
 80073dc:	215d      	movs	r1, #93	; 0x5d
 80073de:	2005      	movs	r0, #5
 80073e0:	f007 fb72 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 80073e4:	2000      	movs	r0, #0
 80073e6:	f006 fb5b 	bl	800daa0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 93, 26, 135, 8);
 80073ea:	2308      	movs	r3, #8
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	2387      	movs	r3, #135	; 0x87
 80073f0:	221a      	movs	r2, #26
 80073f2:	215d      	movs	r1, #93	; 0x5d
 80073f4:	2005      	movs	r0, #5
 80073f6:	f007 fb67 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 80073fa:	48c6      	ldr	r0, [pc, #792]	; (8007714 <drawAllNotActive+0x3d8>)
 80073fc:	f006 fb50 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(15, 93, 30, 135);
 8007400:	2387      	movs	r3, #135	; 0x87
 8007402:	221e      	movs	r2, #30
 8007404:	215d      	movs	r1, #93	; 0x5d
 8007406:	200f      	movs	r0, #15
 8007408:	f007 fbc2 	bl	800eb90 <GUI_FillRect>

	GUI_FillRoundedRect(5, 137, 235, 179, 8);
 800740c:	2308      	movs	r3, #8
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	23b3      	movs	r3, #179	; 0xb3
 8007412:	22eb      	movs	r2, #235	; 0xeb
 8007414:	2189      	movs	r1, #137	; 0x89
 8007416:	2005      	movs	r0, #5
 8007418:	f007 fb56 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(GUI_BLACK);
 800741c:	2000      	movs	r0, #0
 800741e:	f006 fb3f 	bl	800daa0 <GUI_SetColor>
	GUI_FillRoundedRect(5, 137, 26, 179, 8);
 8007422:	2308      	movs	r3, #8
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	23b3      	movs	r3, #179	; 0xb3
 8007428:	221a      	movs	r2, #26
 800742a:	2189      	movs	r1, #137	; 0x89
 800742c:	2005      	movs	r0, #5
 800742e:	f007 fb4b 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_SetColor(CUS_DARKGRAY);
 8007432:	48b8      	ldr	r0, [pc, #736]	; (8007714 <drawAllNotActive+0x3d8>)
 8007434:	f006 fb34 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(15, 137, 30, 179);
 8007438:	23b3      	movs	r3, #179	; 0xb3
 800743a:	221e      	movs	r2, #30
 800743c:	2189      	movs	r1, #137	; 0x89
 800743e:	200f      	movs	r0, #15
 8007440:	f007 fba6 	bl	800eb90 <GUI_FillRect>


	GUI_FillRoundedRect(35, 181, 235, 223, 8);
 8007444:	2308      	movs	r3, #8
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	23df      	movs	r3, #223	; 0xdf
 800744a:	22eb      	movs	r2, #235	; 0xeb
 800744c:	21b5      	movs	r1, #181	; 0xb5
 800744e:	2023      	movs	r0, #35	; 0x23
 8007450:	f007 fb3a 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_FillRoundedRect(35, 225, 235, 267, 8);
 8007454:	2308      	movs	r3, #8
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	f240 130b 	movw	r3, #267	; 0x10b
 800745c:	22eb      	movs	r2, #235	; 0xeb
 800745e:	21e1      	movs	r1, #225	; 0xe1
 8007460:	2023      	movs	r0, #35	; 0x23
 8007462:	f007 fb31 	bl	800eac8 <GUI_FillRoundedRect>
	GUI_FillRoundedRect(35, 269, 235, 311, 8);
 8007466:	2308      	movs	r3, #8
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	f240 1337 	movw	r3, #311	; 0x137
 800746e:	22eb      	movs	r2, #235	; 0xeb
 8007470:	f240 110d 	movw	r1, #269	; 0x10d
 8007474:	2023      	movs	r0, #35	; 0x23
 8007476:	f007 fb27 	bl	800eac8 <GUI_FillRoundedRect>


	GUI_SetColor(GUI_WHITE);
 800747a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800747e:	f006 fb0f 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(7, 188, 30, 196);
 8007482:	23c4      	movs	r3, #196	; 0xc4
 8007484:	221e      	movs	r2, #30
 8007486:	21bc      	movs	r1, #188	; 0xbc
 8007488:	2007      	movs	r0, #7
 800748a:	f007 fb81 	bl	800eb90 <GUI_FillRect>
	GUI_SetColor(CUS_DARKESTGRAY);
 800748e:	48a2      	ldr	r0, [pc, #648]	; (8007718 <drawAllNotActive+0x3dc>)
 8007490:	f006 fb06 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(7, 198, 30, 206);
 8007494:	23ce      	movs	r3, #206	; 0xce
 8007496:	221e      	movs	r2, #30
 8007498:	21c6      	movs	r1, #198	; 0xc6
 800749a:	2007      	movs	r0, #7
 800749c:	f007 fb78 	bl	800eb90 <GUI_FillRect>
	GUI_FillRect(7, 208, 30, 216);
 80074a0:	23d8      	movs	r3, #216	; 0xd8
 80074a2:	221e      	movs	r2, #30
 80074a4:	21d0      	movs	r1, #208	; 0xd0
 80074a6:	2007      	movs	r0, #7
 80074a8:	f007 fb72 	bl	800eb90 <GUI_FillRect>

	GUI_FillRect(7, 232, 30, 240);
 80074ac:	23f0      	movs	r3, #240	; 0xf0
 80074ae:	221e      	movs	r2, #30
 80074b0:	21e8      	movs	r1, #232	; 0xe8
 80074b2:	2007      	movs	r0, #7
 80074b4:	f007 fb6c 	bl	800eb90 <GUI_FillRect>
	GUI_SetColor(GUI_WHITE);
 80074b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80074bc:	f006 faf0 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(7, 242, 30, 250);
 80074c0:	23fa      	movs	r3, #250	; 0xfa
 80074c2:	221e      	movs	r2, #30
 80074c4:	21f2      	movs	r1, #242	; 0xf2
 80074c6:	2007      	movs	r0, #7
 80074c8:	f007 fb62 	bl	800eb90 <GUI_FillRect>
	GUI_SetColor(CUS_DARKESTGRAY);
 80074cc:	4892      	ldr	r0, [pc, #584]	; (8007718 <drawAllNotActive+0x3dc>)
 80074ce:	f006 fae7 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(7, 252, 30, 260);
 80074d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80074d6:	221e      	movs	r2, #30
 80074d8:	21fc      	movs	r1, #252	; 0xfc
 80074da:	2007      	movs	r0, #7
 80074dc:	f007 fb58 	bl	800eb90 <GUI_FillRect>

	GUI_FillRect(7, 276, 30, 284);
 80074e0:	f44f 738e 	mov.w	r3, #284	; 0x11c
 80074e4:	221e      	movs	r2, #30
 80074e6:	f44f 718a 	mov.w	r1, #276	; 0x114
 80074ea:	2007      	movs	r0, #7
 80074ec:	f007 fb50 	bl	800eb90 <GUI_FillRect>
	GUI_FillRect(7, 286, 30, 294);
 80074f0:	f44f 7393 	mov.w	r3, #294	; 0x126
 80074f4:	221e      	movs	r2, #30
 80074f6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80074fa:	2007      	movs	r0, #7
 80074fc:	f007 fb48 	bl	800eb90 <GUI_FillRect>
	GUI_SetColor(GUI_WHITE);
 8007500:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007504:	f006 facc 	bl	800daa0 <GUI_SetColor>
	GUI_FillRect(7, 296, 30, 304);
 8007508:	f44f 7398 	mov.w	r3, #304	; 0x130
 800750c:	221e      	movs	r2, #30
 800750e:	f44f 7194 	mov.w	r1, #296	; 0x128
 8007512:	2007      	movs	r0, #7
 8007514:	f007 fb3c 	bl	800eb90 <GUI_FillRect>

	/* Text */
	GUI_SetTextMode(GUI_TM_TRANS);
 8007518:	2002      	movs	r0, #2
 800751a:	f006 faa9 	bl	800da70 <GUI_SetTextMode>
	GUI_EnableAlpha(1);
 800751e:	2001      	movs	r0, #1
 8007520:	f007 fd8c 	bl	800f03c <GUI_EnableAlpha>
	GUI_SetColor(GUI_WHITE);
 8007524:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007528:	f006 faba 	bl	800daa0 <GUI_SetColor>
	GUI_DispStringAt("ALL DIM", 25, 18);
 800752c:	2212      	movs	r2, #18
 800752e:	2119      	movs	r1, #25
 8007530:	487a      	ldr	r0, [pc, #488]	; (800771c <drawAllNotActive+0x3e0>)
 8007532:	f008 f821 	bl	800f578 <GUI_DispStringAt>
	GUI_DispStringAt("ALL CLEAR", 25, 62);
 8007536:	223e      	movs	r2, #62	; 0x3e
 8007538:	2119      	movs	r1, #25
 800753a:	4879      	ldr	r0, [pc, #484]	; (8007720 <drawAllNotActive+0x3e4>)
 800753c:	f008 f81c 	bl	800f578 <GUI_DispStringAt>
	GUI_DispStringAt("PRESENTATION MODE", 25, 106);
 8007540:	226a      	movs	r2, #106	; 0x6a
 8007542:	2119      	movs	r1, #25
 8007544:	4877      	ldr	r0, [pc, #476]	; (8007724 <drawAllNotActive+0x3e8>)
 8007546:	f008 f817 	bl	800f578 <GUI_DispStringAt>
	GUI_DispStringAt("ALL AUTO", 25, 150);
 800754a:	2296      	movs	r2, #150	; 0x96
 800754c:	2119      	movs	r1, #25
 800754e:	4876      	ldr	r0, [pc, #472]	; (8007728 <drawAllNotActive+0x3ec>)
 8007550:	f008 f812 	bl	800f578 <GUI_DispStringAt>

	GUI_DispCharAt('1', 50, 194);
 8007554:	22c2      	movs	r2, #194	; 0xc2
 8007556:	2132      	movs	r1, #50	; 0x32
 8007558:	2031      	movs	r0, #49	; 0x31
 800755a:	f008 f8dd 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('1', 50, 238);
 800755e:	22ee      	movs	r2, #238	; 0xee
 8007560:	2132      	movs	r1, #50	; 0x32
 8007562:	2031      	movs	r0, #49	; 0x31
 8007564:	f008 f8d8 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('1', 50, 282);
 8007568:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800756c:	2132      	movs	r1, #50	; 0x32
 800756e:	2031      	movs	r0, #49	; 0x31
 8007570:	f008 f8d2 	bl	800f718 <GUI_DispCharAt>

	GUI_DispCharAt('2', 83, 194);
 8007574:	22c2      	movs	r2, #194	; 0xc2
 8007576:	2153      	movs	r1, #83	; 0x53
 8007578:	2032      	movs	r0, #50	; 0x32
 800757a:	f008 f8cd 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('2', 83, 238);
 800757e:	22ee      	movs	r2, #238	; 0xee
 8007580:	2153      	movs	r1, #83	; 0x53
 8007582:	2032      	movs	r0, #50	; 0x32
 8007584:	f008 f8c8 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('2', 83, 282);
 8007588:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800758c:	2153      	movs	r1, #83	; 0x53
 800758e:	2032      	movs	r0, #50	; 0x32
 8007590:	f008 f8c2 	bl	800f718 <GUI_DispCharAt>

	GUI_DispCharAt('3', 116, 194);
 8007594:	22c2      	movs	r2, #194	; 0xc2
 8007596:	2174      	movs	r1, #116	; 0x74
 8007598:	2033      	movs	r0, #51	; 0x33
 800759a:	f008 f8bd 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('3', 116, 238);
 800759e:	22ee      	movs	r2, #238	; 0xee
 80075a0:	2174      	movs	r1, #116	; 0x74
 80075a2:	2033      	movs	r0, #51	; 0x33
 80075a4:	f008 f8b8 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('3', 116, 282);
 80075a8:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80075ac:	2174      	movs	r1, #116	; 0x74
 80075ae:	2033      	movs	r0, #51	; 0x33
 80075b0:	f008 f8b2 	bl	800f718 <GUI_DispCharAt>

	GUI_DispCharAt('4', 149, 194);
 80075b4:	22c2      	movs	r2, #194	; 0xc2
 80075b6:	2195      	movs	r1, #149	; 0x95
 80075b8:	2034      	movs	r0, #52	; 0x34
 80075ba:	f008 f8ad 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('4', 149, 238);
 80075be:	22ee      	movs	r2, #238	; 0xee
 80075c0:	2195      	movs	r1, #149	; 0x95
 80075c2:	2034      	movs	r0, #52	; 0x34
 80075c4:	f008 f8a8 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('4', 149, 282);
 80075c8:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80075cc:	2195      	movs	r1, #149	; 0x95
 80075ce:	2034      	movs	r0, #52	; 0x34
 80075d0:	f008 f8a2 	bl	800f718 <GUI_DispCharAt>

	GUI_DispCharAt('5', 182, 194);
 80075d4:	22c2      	movs	r2, #194	; 0xc2
 80075d6:	21b6      	movs	r1, #182	; 0xb6
 80075d8:	2035      	movs	r0, #53	; 0x35
 80075da:	f008 f89d 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('5', 182, 238);
 80075de:	22ee      	movs	r2, #238	; 0xee
 80075e0:	21b6      	movs	r1, #182	; 0xb6
 80075e2:	2035      	movs	r0, #53	; 0x35
 80075e4:	f008 f898 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('5', 182, 282);
 80075e8:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80075ec:	21b6      	movs	r1, #182	; 0xb6
 80075ee:	2035      	movs	r0, #53	; 0x35
 80075f0:	f008 f892 	bl	800f718 <GUI_DispCharAt>

	GUI_DispCharAt('A', 215, 194);
 80075f4:	22c2      	movs	r2, #194	; 0xc2
 80075f6:	21d7      	movs	r1, #215	; 0xd7
 80075f8:	2041      	movs	r0, #65	; 0x41
 80075fa:	f008 f88d 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('A', 215, 238);
 80075fe:	22ee      	movs	r2, #238	; 0xee
 8007600:	21d7      	movs	r1, #215	; 0xd7
 8007602:	2041      	movs	r0, #65	; 0x41
 8007604:	f008 f888 	bl	800f718 <GUI_DispCharAt>
	GUI_DispCharAt('A', 215, 282);
 8007608:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800760c:	21d7      	movs	r1, #215	; 0xd7
 800760e:	2041      	movs	r0, #65	; 0x41
 8007610:	f008 f882 	bl	800f718 <GUI_DispCharAt>
	GUI_EnableAlpha(0);
 8007614:	2000      	movs	r0, #0
 8007616:	f007 fd11 	bl	800f03c <GUI_EnableAlpha>

	/* Lines under modes */
	GUI_SetColor(GUI_BLACK);
 800761a:	2000      	movs	r0, #0
 800761c:	f006 fa40 	bl	800daa0 <GUI_SetColor>
	GUI_DrawLine(24, 35, 225, 35);
 8007620:	2323      	movs	r3, #35	; 0x23
 8007622:	22e1      	movs	r2, #225	; 0xe1
 8007624:	2123      	movs	r1, #35	; 0x23
 8007626:	2018      	movs	r0, #24
 8007628:	f007 ff88 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(24, 79, 225, 79);
 800762c:	234f      	movs	r3, #79	; 0x4f
 800762e:	22e1      	movs	r2, #225	; 0xe1
 8007630:	214f      	movs	r1, #79	; 0x4f
 8007632:	2018      	movs	r0, #24
 8007634:	f007 ff82 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(24, 123, 225, 123);
 8007638:	237b      	movs	r3, #123	; 0x7b
 800763a:	22e1      	movs	r2, #225	; 0xe1
 800763c:	217b      	movs	r1, #123	; 0x7b
 800763e:	2018      	movs	r0, #24
 8007640:	f007 ff7c 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(24, 167, 225, 167);
 8007644:	23a7      	movs	r3, #167	; 0xa7
 8007646:	22e1      	movs	r2, #225	; 0xe1
 8007648:	21a7      	movs	r1, #167	; 0xa7
 800764a:	2018      	movs	r0, #24
 800764c:	f007 ff76 	bl	800f53c <GUI_DrawLine>

	/* Lines under values */
	GUI_DrawLine(44, 211, 63, 211); /* For 1 */
 8007650:	23d3      	movs	r3, #211	; 0xd3
 8007652:	223f      	movs	r2, #63	; 0x3f
 8007654:	21d3      	movs	r1, #211	; 0xd3
 8007656:	202c      	movs	r0, #44	; 0x2c
 8007658:	f007 ff70 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(44, 255, 63, 255);
 800765c:	23ff      	movs	r3, #255	; 0xff
 800765e:	223f      	movs	r2, #63	; 0x3f
 8007660:	21ff      	movs	r1, #255	; 0xff
 8007662:	202c      	movs	r0, #44	; 0x2c
 8007664:	f007 ff6a 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(44, 299, 63, 299);
 8007668:	f240 132b 	movw	r3, #299	; 0x12b
 800766c:	223f      	movs	r2, #63	; 0x3f
 800766e:	f240 112b 	movw	r1, #299	; 0x12b
 8007672:	202c      	movs	r0, #44	; 0x2c
 8007674:	f007 ff62 	bl	800f53c <GUI_DrawLine>

	GUI_DrawLine(77, 211, 96, 211); /* For 2 */
 8007678:	23d3      	movs	r3, #211	; 0xd3
 800767a:	2260      	movs	r2, #96	; 0x60
 800767c:	21d3      	movs	r1, #211	; 0xd3
 800767e:	204d      	movs	r0, #77	; 0x4d
 8007680:	f007 ff5c 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(77, 255, 96, 255);
 8007684:	23ff      	movs	r3, #255	; 0xff
 8007686:	2260      	movs	r2, #96	; 0x60
 8007688:	21ff      	movs	r1, #255	; 0xff
 800768a:	204d      	movs	r0, #77	; 0x4d
 800768c:	f007 ff56 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(77, 299, 96, 299);
 8007690:	f240 132b 	movw	r3, #299	; 0x12b
 8007694:	2260      	movs	r2, #96	; 0x60
 8007696:	f240 112b 	movw	r1, #299	; 0x12b
 800769a:	204d      	movs	r0, #77	; 0x4d
 800769c:	f007 ff4e 	bl	800f53c <GUI_DrawLine>

	GUI_DrawLine(110, 211, 127, 211); /* For 3 */
 80076a0:	23d3      	movs	r3, #211	; 0xd3
 80076a2:	227f      	movs	r2, #127	; 0x7f
 80076a4:	21d3      	movs	r1, #211	; 0xd3
 80076a6:	206e      	movs	r0, #110	; 0x6e
 80076a8:	f007 ff48 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(110, 255, 127, 255);
 80076ac:	23ff      	movs	r3, #255	; 0xff
 80076ae:	227f      	movs	r2, #127	; 0x7f
 80076b0:	21ff      	movs	r1, #255	; 0xff
 80076b2:	206e      	movs	r0, #110	; 0x6e
 80076b4:	f007 ff42 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(110, 299, 127, 299);
 80076b8:	f240 132b 	movw	r3, #299	; 0x12b
 80076bc:	227f      	movs	r2, #127	; 0x7f
 80076be:	f240 112b 	movw	r1, #299	; 0x12b
 80076c2:	206e      	movs	r0, #110	; 0x6e
 80076c4:	f007 ff3a 	bl	800f53c <GUI_DrawLine>

	GUI_DrawLine(143, 211, 160, 211); /* For 4 */
 80076c8:	23d3      	movs	r3, #211	; 0xd3
 80076ca:	22a0      	movs	r2, #160	; 0xa0
 80076cc:	21d3      	movs	r1, #211	; 0xd3
 80076ce:	208f      	movs	r0, #143	; 0x8f
 80076d0:	f007 ff34 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(143, 255, 160, 255);
 80076d4:	23ff      	movs	r3, #255	; 0xff
 80076d6:	22a0      	movs	r2, #160	; 0xa0
 80076d8:	21ff      	movs	r1, #255	; 0xff
 80076da:	208f      	movs	r0, #143	; 0x8f
 80076dc:	f007 ff2e 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(143, 299, 160, 299);
 80076e0:	f240 132b 	movw	r3, #299	; 0x12b
 80076e4:	22a0      	movs	r2, #160	; 0xa0
 80076e6:	f240 112b 	movw	r1, #299	; 0x12b
 80076ea:	208f      	movs	r0, #143	; 0x8f
 80076ec:	f007 ff26 	bl	800f53c <GUI_DrawLine>

	GUI_DrawLine(176, 211, 193, 211); /* For 5 */
 80076f0:	23d3      	movs	r3, #211	; 0xd3
 80076f2:	22c1      	movs	r2, #193	; 0xc1
 80076f4:	21d3      	movs	r1, #211	; 0xd3
 80076f6:	20b0      	movs	r0, #176	; 0xb0
 80076f8:	f007 ff20 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(176, 255, 193, 255);
 80076fc:	23ff      	movs	r3, #255	; 0xff
 80076fe:	22c1      	movs	r2, #193	; 0xc1
 8007700:	21ff      	movs	r1, #255	; 0xff
 8007702:	20b0      	movs	r0, #176	; 0xb0
 8007704:	f007 ff1a 	bl	800f53c <GUI_DrawLine>
 8007708:	e010      	b.n	800772c <drawAllNotActive+0x3f0>
 800770a:	bf00      	nop
 800770c:	00101005 	.word	0x00101005
 8007710:	0801381c 	.word	0x0801381c
 8007714:	00333333 	.word	0x00333333
 8007718:	00202020 	.word	0x00202020
 800771c:	08012ce0 	.word	0x08012ce0
 8007720:	08012ce8 	.word	0x08012ce8
 8007724:	08012cf4 	.word	0x08012cf4
 8007728:	08012d08 	.word	0x08012d08
	GUI_DrawLine(176, 299, 193, 299);
 800772c:	f240 132b 	movw	r3, #299	; 0x12b
 8007730:	22c1      	movs	r2, #193	; 0xc1
 8007732:	f240 112b 	movw	r1, #299	; 0x12b
 8007736:	20b0      	movs	r0, #176	; 0xb0
 8007738:	f007 ff00 	bl	800f53c <GUI_DrawLine>

	GUI_DrawLine(209, 211, 226, 211); /* For Auto */
 800773c:	23d3      	movs	r3, #211	; 0xd3
 800773e:	22e2      	movs	r2, #226	; 0xe2
 8007740:	21d3      	movs	r1, #211	; 0xd3
 8007742:	20d1      	movs	r0, #209	; 0xd1
 8007744:	f007 fefa 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(209, 255, 226, 255);
 8007748:	23ff      	movs	r3, #255	; 0xff
 800774a:	22e2      	movs	r2, #226	; 0xe2
 800774c:	21ff      	movs	r1, #255	; 0xff
 800774e:	20d1      	movs	r0, #209	; 0xd1
 8007750:	f007 fef4 	bl	800f53c <GUI_DrawLine>
	GUI_DrawLine(209, 299, 226, 299);
 8007754:	f240 132b 	movw	r3, #299	; 0x12b
 8007758:	22e2      	movs	r2, #226	; 0xe2
 800775a:	f240 112b 	movw	r1, #299	; 0x12b
 800775e:	20d1      	movs	r0, #209	; 0xd1
 8007760:	f007 feec 	bl	800f53c <GUI_DrawLine>
}
 8007764:	bf00      	nop
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop

0800776c <disablePrevMode>:

static void disablePrevMode(ui_mode_t mode)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af02      	add	r7, sp, #8
 8007772:	4603      	mov	r3, r0
 8007774:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	3b01      	subs	r3, #1
 800777a:	2b03      	cmp	r3, #3
 800777c:	f200 80a8 	bhi.w	80078d0 <disablePrevMode+0x164>
 8007780:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <disablePrevMode+0x1c>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	08007799 	.word	0x08007799
 800778c:	080077e7 	.word	0x080077e7
 8007790:	08007835 	.word	0x08007835
 8007794:	08007883 	.word	0x08007883
	{
	case ALL_DIM:
		/* Activity indicator */
		GUI_SetColor(GUI_BLACK);
 8007798:	2000      	movs	r0, #0
 800779a:	f006 f981 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 5, 26, 47, 8);
 800779e:	2308      	movs	r3, #8
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	232f      	movs	r3, #47	; 0x2f
 80077a4:	221a      	movs	r2, #26
 80077a6:	2105      	movs	r1, #5
 80077a8:	2005      	movs	r0, #5
 80077aa:	f007 f98d 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 80077ae:	484b      	ldr	r0, [pc, #300]	; (80078dc <disablePrevMode+0x170>)
 80077b0:	f006 f976 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 5, 26, 47);
 80077b4:	232f      	movs	r3, #47	; 0x2f
 80077b6:	221a      	movs	r2, #26
 80077b8:	2105      	movs	r1, #5
 80077ba:	200f      	movs	r0, #15
 80077bc:	f007 f9e8 	bl	800eb90 <GUI_FillRect>

		/* Text underline */
		GUI_SetColor(GUI_BLACK);
 80077c0:	2000      	movs	r0, #0
 80077c2:	f006 f96d 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 35, 225, 35);
 80077c6:	2323      	movs	r3, #35	; 0x23
 80077c8:	22e1      	movs	r2, #225	; 0xe1
 80077ca:	2123      	movs	r1, #35	; 0x23
 80077cc:	2018      	movs	r0, #24
 80077ce:	f007 feb5 	bl	800f53c <GUI_DrawLine>

		/* One char */
		GUI_SetColor(GUI_WHITE);
 80077d2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80077d6:	f006 f963 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 18);
 80077da:	2212      	movs	r2, #18
 80077dc:	2119      	movs	r1, #25
 80077de:	2041      	movs	r0, #65	; 0x41
 80077e0:	f007 ff9a 	bl	800f718 <GUI_DispCharAt>
		break;
 80077e4:	e075      	b.n	80078d2 <disablePrevMode+0x166>

	case ALL_CLEAR:
		GUI_SetColor(GUI_BLACK);
 80077e6:	2000      	movs	r0, #0
 80077e8:	f006 f95a 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 49, 26, 91, 8);
 80077ec:	2308      	movs	r3, #8
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	235b      	movs	r3, #91	; 0x5b
 80077f2:	221a      	movs	r2, #26
 80077f4:	2131      	movs	r1, #49	; 0x31
 80077f6:	2005      	movs	r0, #5
 80077f8:	f007 f966 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 80077fc:	4837      	ldr	r0, [pc, #220]	; (80078dc <disablePrevMode+0x170>)
 80077fe:	f006 f94f 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 49, 26, 91);
 8007802:	235b      	movs	r3, #91	; 0x5b
 8007804:	221a      	movs	r2, #26
 8007806:	2131      	movs	r1, #49	; 0x31
 8007808:	200f      	movs	r0, #15
 800780a:	f007 f9c1 	bl	800eb90 <GUI_FillRect>

		GUI_SetColor(GUI_BLACK);
 800780e:	2000      	movs	r0, #0
 8007810:	f006 f946 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 79, 225, 79);
 8007814:	234f      	movs	r3, #79	; 0x4f
 8007816:	22e1      	movs	r2, #225	; 0xe1
 8007818:	214f      	movs	r1, #79	; 0x4f
 800781a:	2018      	movs	r0, #24
 800781c:	f007 fe8e 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8007820:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007824:	f006 f93c 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 62);
 8007828:	223e      	movs	r2, #62	; 0x3e
 800782a:	2119      	movs	r1, #25
 800782c:	2041      	movs	r0, #65	; 0x41
 800782e:	f007 ff73 	bl	800f718 <GUI_DispCharAt>
		break;
 8007832:	e04e      	b.n	80078d2 <disablePrevMode+0x166>

	case PRESENTATION:
		GUI_SetColor(GUI_BLACK);
 8007834:	2000      	movs	r0, #0
 8007836:	f006 f933 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 93, 26, 135, 8);
 800783a:	2308      	movs	r3, #8
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2387      	movs	r3, #135	; 0x87
 8007840:	221a      	movs	r2, #26
 8007842:	215d      	movs	r1, #93	; 0x5d
 8007844:	2005      	movs	r0, #5
 8007846:	f007 f93f 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 800784a:	4824      	ldr	r0, [pc, #144]	; (80078dc <disablePrevMode+0x170>)
 800784c:	f006 f928 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 93, 26, 135);
 8007850:	2387      	movs	r3, #135	; 0x87
 8007852:	221a      	movs	r2, #26
 8007854:	215d      	movs	r1, #93	; 0x5d
 8007856:	200f      	movs	r0, #15
 8007858:	f007 f99a 	bl	800eb90 <GUI_FillRect>

		GUI_SetColor(GUI_BLACK);
 800785c:	2000      	movs	r0, #0
 800785e:	f006 f91f 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 123, 225, 123);
 8007862:	237b      	movs	r3, #123	; 0x7b
 8007864:	22e1      	movs	r2, #225	; 0xe1
 8007866:	217b      	movs	r1, #123	; 0x7b
 8007868:	2018      	movs	r0, #24
 800786a:	f007 fe67 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 800786e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007872:	f006 f915 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('P', 25, 106);
 8007876:	226a      	movs	r2, #106	; 0x6a
 8007878:	2119      	movs	r1, #25
 800787a:	2050      	movs	r0, #80	; 0x50
 800787c:	f007 ff4c 	bl	800f718 <GUI_DispCharAt>
		break;
 8007880:	e027      	b.n	80078d2 <disablePrevMode+0x166>

	case ALL_AUTO:
		GUI_SetColor(GUI_BLACK);
 8007882:	2000      	movs	r0, #0
 8007884:	f006 f90c 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 137, 26, 179, 8);
 8007888:	2308      	movs	r3, #8
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	23b3      	movs	r3, #179	; 0xb3
 800788e:	221a      	movs	r2, #26
 8007890:	2189      	movs	r1, #137	; 0x89
 8007892:	2005      	movs	r0, #5
 8007894:	f007 f918 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 8007898:	4810      	ldr	r0, [pc, #64]	; (80078dc <disablePrevMode+0x170>)
 800789a:	f006 f901 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 137, 26, 179);
 800789e:	23b3      	movs	r3, #179	; 0xb3
 80078a0:	221a      	movs	r2, #26
 80078a2:	2189      	movs	r1, #137	; 0x89
 80078a4:	200f      	movs	r0, #15
 80078a6:	f007 f973 	bl	800eb90 <GUI_FillRect>

		GUI_SetColor(GUI_BLACK);
 80078aa:	2000      	movs	r0, #0
 80078ac:	f006 f8f8 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 167, 225, 167);
 80078b0:	23a7      	movs	r3, #167	; 0xa7
 80078b2:	22e1      	movs	r2, #225	; 0xe1
 80078b4:	21a7      	movs	r1, #167	; 0xa7
 80078b6:	2018      	movs	r0, #24
 80078b8:	f007 fe40 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 80078bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80078c0:	f006 f8ee 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 150);
 80078c4:	2296      	movs	r2, #150	; 0x96
 80078c6:	2119      	movs	r1, #25
 80078c8:	2041      	movs	r0, #65	; 0x41
 80078ca:	f007 ff25 	bl	800f718 <GUI_DispCharAt>
		break;
 80078ce:	e000      	b.n	80078d2 <disablePrevMode+0x166>

	default:
		break;
 80078d0:	bf00      	nop
	}
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	00333333 	.word	0x00333333

080078e0 <enableNextMode>:

static void enableNextMode(ui_mode_t mode)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	f200 80a8 	bhi.w	8007a44 <enableNextMode+0x164>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <enableNextMode+0x1c>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	0800790d 	.word	0x0800790d
 8007900:	0800795b 	.word	0x0800795b
 8007904:	080079a9 	.word	0x080079a9
 8007908:	080079f7 	.word	0x080079f7
	{
	case ALL_DIM:
		/* Activity indicator */
		GUI_SetColor(CUS_LIGHTBLUE);
 800790c:	4850      	ldr	r0, [pc, #320]	; (8007a50 <enableNextMode+0x170>)
 800790e:	f006 f8c7 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 5, 26, 47, 8);
 8007912:	2308      	movs	r3, #8
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	232f      	movs	r3, #47	; 0x2f
 8007918:	221a      	movs	r2, #26
 800791a:	2105      	movs	r1, #5
 800791c:	2005      	movs	r0, #5
 800791e:	f007 f8d3 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 8007922:	484c      	ldr	r0, [pc, #304]	; (8007a54 <enableNextMode+0x174>)
 8007924:	f006 f8bc 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 5, 26, 47);
 8007928:	232f      	movs	r3, #47	; 0x2f
 800792a:	221a      	movs	r2, #26
 800792c:	2105      	movs	r1, #5
 800792e:	200f      	movs	r0, #15
 8007930:	f007 f92e 	bl	800eb90 <GUI_FillRect>

		/* Text underline */
		GUI_SetColor(CUS_LIGHTBLUE);
 8007934:	4846      	ldr	r0, [pc, #280]	; (8007a50 <enableNextMode+0x170>)
 8007936:	f006 f8b3 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 35, 225, 35);
 800793a:	2323      	movs	r3, #35	; 0x23
 800793c:	22e1      	movs	r2, #225	; 0xe1
 800793e:	2123      	movs	r1, #35	; 0x23
 8007940:	2018      	movs	r0, #24
 8007942:	f007 fdfb 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8007946:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800794a:	f006 f8a9 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 18);
 800794e:	2212      	movs	r2, #18
 8007950:	2119      	movs	r1, #25
 8007952:	2041      	movs	r0, #65	; 0x41
 8007954:	f007 fee0 	bl	800f718 <GUI_DispCharAt>
		break;
 8007958:	e075      	b.n	8007a46 <enableNextMode+0x166>

	case ALL_CLEAR:
		GUI_SetColor(CUS_LIGHTBLUE);
 800795a:	483d      	ldr	r0, [pc, #244]	; (8007a50 <enableNextMode+0x170>)
 800795c:	f006 f8a0 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 49, 26, 91, 8);
 8007960:	2308      	movs	r3, #8
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	235b      	movs	r3, #91	; 0x5b
 8007966:	221a      	movs	r2, #26
 8007968:	2131      	movs	r1, #49	; 0x31
 800796a:	2005      	movs	r0, #5
 800796c:	f007 f8ac 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 8007970:	4838      	ldr	r0, [pc, #224]	; (8007a54 <enableNextMode+0x174>)
 8007972:	f006 f895 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 49, 26, 91);
 8007976:	235b      	movs	r3, #91	; 0x5b
 8007978:	221a      	movs	r2, #26
 800797a:	2131      	movs	r1, #49	; 0x31
 800797c:	200f      	movs	r0, #15
 800797e:	f007 f907 	bl	800eb90 <GUI_FillRect>

		GUI_SetColor(CUS_LIGHTBLUE);
 8007982:	4833      	ldr	r0, [pc, #204]	; (8007a50 <enableNextMode+0x170>)
 8007984:	f006 f88c 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 79, 225, 79);
 8007988:	234f      	movs	r3, #79	; 0x4f
 800798a:	22e1      	movs	r2, #225	; 0xe1
 800798c:	214f      	movs	r1, #79	; 0x4f
 800798e:	2018      	movs	r0, #24
 8007990:	f007 fdd4 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8007994:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007998:	f006 f882 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 62);
 800799c:	223e      	movs	r2, #62	; 0x3e
 800799e:	2119      	movs	r1, #25
 80079a0:	2041      	movs	r0, #65	; 0x41
 80079a2:	f007 feb9 	bl	800f718 <GUI_DispCharAt>
		break;
 80079a6:	e04e      	b.n	8007a46 <enableNextMode+0x166>

	case PRESENTATION:
		GUI_SetColor(CUS_LIGHTBLUE);
 80079a8:	4829      	ldr	r0, [pc, #164]	; (8007a50 <enableNextMode+0x170>)
 80079aa:	f006 f879 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 93, 26, 135, 8);
 80079ae:	2308      	movs	r3, #8
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	2387      	movs	r3, #135	; 0x87
 80079b4:	221a      	movs	r2, #26
 80079b6:	215d      	movs	r1, #93	; 0x5d
 80079b8:	2005      	movs	r0, #5
 80079ba:	f007 f885 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 80079be:	4825      	ldr	r0, [pc, #148]	; (8007a54 <enableNextMode+0x174>)
 80079c0:	f006 f86e 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 93, 26, 135);
 80079c4:	2387      	movs	r3, #135	; 0x87
 80079c6:	221a      	movs	r2, #26
 80079c8:	215d      	movs	r1, #93	; 0x5d
 80079ca:	200f      	movs	r0, #15
 80079cc:	f007 f8e0 	bl	800eb90 <GUI_FillRect>

		GUI_SetColor(CUS_LIGHTBLUE);
 80079d0:	481f      	ldr	r0, [pc, #124]	; (8007a50 <enableNextMode+0x170>)
 80079d2:	f006 f865 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 123, 225, 123);
 80079d6:	237b      	movs	r3, #123	; 0x7b
 80079d8:	22e1      	movs	r2, #225	; 0xe1
 80079da:	217b      	movs	r1, #123	; 0x7b
 80079dc:	2018      	movs	r0, #24
 80079de:	f007 fdad 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 80079e2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80079e6:	f006 f85b 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('P', 25, 106);
 80079ea:	226a      	movs	r2, #106	; 0x6a
 80079ec:	2119      	movs	r1, #25
 80079ee:	2050      	movs	r0, #80	; 0x50
 80079f0:	f007 fe92 	bl	800f718 <GUI_DispCharAt>
		break;
 80079f4:	e027      	b.n	8007a46 <enableNextMode+0x166>

	case ALL_AUTO:
		GUI_SetColor(CUS_LIGHTBLUE);
 80079f6:	4816      	ldr	r0, [pc, #88]	; (8007a50 <enableNextMode+0x170>)
 80079f8:	f006 f852 	bl	800daa0 <GUI_SetColor>
		GUI_FillRoundedRect(5, 137, 26, 179, 8);
 80079fc:	2308      	movs	r3, #8
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	23b3      	movs	r3, #179	; 0xb3
 8007a02:	221a      	movs	r2, #26
 8007a04:	2189      	movs	r1, #137	; 0x89
 8007a06:	2005      	movs	r0, #5
 8007a08:	f007 f85e 	bl	800eac8 <GUI_FillRoundedRect>
		GUI_SetColor(CUS_DARKGRAY);
 8007a0c:	4811      	ldr	r0, [pc, #68]	; (8007a54 <enableNextMode+0x174>)
 8007a0e:	f006 f847 	bl	800daa0 <GUI_SetColor>
		GUI_FillRect(15, 137, 26, 179);
 8007a12:	23b3      	movs	r3, #179	; 0xb3
 8007a14:	221a      	movs	r2, #26
 8007a16:	2189      	movs	r1, #137	; 0x89
 8007a18:	200f      	movs	r0, #15
 8007a1a:	f007 f8b9 	bl	800eb90 <GUI_FillRect>

		GUI_SetColor(CUS_LIGHTBLUE);
 8007a1e:	480c      	ldr	r0, [pc, #48]	; (8007a50 <enableNextMode+0x170>)
 8007a20:	f006 f83e 	bl	800daa0 <GUI_SetColor>
		GUI_DrawLine(24, 167, 225, 167);
 8007a24:	23a7      	movs	r3, #167	; 0xa7
 8007a26:	22e1      	movs	r2, #225	; 0xe1
 8007a28:	21a7      	movs	r1, #167	; 0xa7
 8007a2a:	2018      	movs	r0, #24
 8007a2c:	f007 fd86 	bl	800f53c <GUI_DrawLine>

		GUI_SetColor(GUI_WHITE);
 8007a30:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007a34:	f006 f834 	bl	800daa0 <GUI_SetColor>
		GUI_DispCharAt('A', 25, 150);
 8007a38:	2296      	movs	r2, #150	; 0x96
 8007a3a:	2119      	movs	r1, #25
 8007a3c:	2041      	movs	r0, #65	; 0x41
 8007a3e:	f007 fe6b 	bl	800f718 <GUI_DispCharAt>
		break;
 8007a42:	e000      	b.n	8007a46 <enableNextMode+0x166>

	default:
		break;
 8007a44:	bf00      	nop
	}
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	00ffd218 	.word	0x00ffd218
 8007a54:	00333333 	.word	0x00333333

08007a58 <disablePrevZoneState>:

static void disablePrevZoneState(ui_zone_state_t zoneState, uint8_t numOfZone)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	4603      	mov	r3, r0
 8007a60:	460a      	mov	r2, r1
 8007a62:	71fb      	strb	r3, [r7, #7]
 8007a64:	4613      	mov	r3, r2
 8007a66:	71bb      	strb	r3, [r7, #6]
	switch (numOfZone)
 8007a68:	79bb      	ldrb	r3, [r7, #6]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	f000 80d0 	beq.w	8007c10 <disablePrevZoneState+0x1b8>
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	f000 819d 	beq.w	8007db0 <disablePrevZoneState+0x358>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d000      	beq.n	8007a7c <disablePrevZoneState+0x24>
		default:
			break;
		}
		break;
	default:
		break;
 8007a7a:	e284      	b.n	8007f86 <disablePrevZoneState+0x52e>
		switch (zoneState)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	2b05      	cmp	r3, #5
 8007a82:	f200 80c3 	bhi.w	8007c0c <disablePrevZoneState+0x1b4>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <disablePrevZoneState+0x34>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007aa5 	.word	0x08007aa5
 8007a90:	08007ae1 	.word	0x08007ae1
 8007a94:	08007b1d 	.word	0x08007b1d
 8007a98:	08007b59 	.word	0x08007b59
 8007a9c:	08007b95 	.word	0x08007b95
 8007aa0:	08007bd1 	.word	0x08007bd1
			GUI_SetColor(CUS_DARKGRAY);
 8007aa4:	48de      	ldr	r0, [pc, #888]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007aa6:	f005 fffb 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 181, 73, 223, 8);
 8007aaa:	2308      	movs	r3, #8
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	23df      	movs	r3, #223	; 0xdf
 8007ab0:	2249      	movs	r2, #73	; 0x49
 8007ab2:	21b5      	movs	r1, #181	; 0xb5
 8007ab4:	2023      	movs	r0, #35	; 0x23
 8007ab6:	f007 f807 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007aba:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007abe:	f005 ffef 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 194);
 8007ac2:	22c2      	movs	r2, #194	; 0xc2
 8007ac4:	2132      	movs	r1, #50	; 0x32
 8007ac6:	2031      	movs	r0, #49	; 0x31
 8007ac8:	f007 fe26 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007acc:	2000      	movs	r0, #0
 8007ace:	f005 ffe7 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(44, 211, 63, 211);
 8007ad2:	23d3      	movs	r3, #211	; 0xd3
 8007ad4:	223f      	movs	r2, #63	; 0x3f
 8007ad6:	21d3      	movs	r1, #211	; 0xd3
 8007ad8:	202c      	movs	r0, #44	; 0x2c
 8007ada:	f007 fd2f 	bl	800f53c <GUI_DrawLine>
			break;
 8007ade:	e096      	b.n	8007c0e <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8007ae0:	48cf      	ldr	r0, [pc, #828]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007ae2:	f005 ffdd 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 181, 106, 223, 8);
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	23df      	movs	r3, #223	; 0xdf
 8007aec:	226a      	movs	r2, #106	; 0x6a
 8007aee:	21b5      	movs	r1, #181	; 0xb5
 8007af0:	2043      	movs	r0, #67	; 0x43
 8007af2:	f006 ffe9 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007af6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007afa:	f005 ffd1 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 194);
 8007afe:	22c2      	movs	r2, #194	; 0xc2
 8007b00:	2153      	movs	r1, #83	; 0x53
 8007b02:	2032      	movs	r0, #50	; 0x32
 8007b04:	f007 fe08 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007b08:	2000      	movs	r0, #0
 8007b0a:	f005 ffc9 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(77, 211, 96, 211);
 8007b0e:	23d3      	movs	r3, #211	; 0xd3
 8007b10:	2260      	movs	r2, #96	; 0x60
 8007b12:	21d3      	movs	r1, #211	; 0xd3
 8007b14:	204d      	movs	r0, #77	; 0x4d
 8007b16:	f007 fd11 	bl	800f53c <GUI_DrawLine>
			break;
 8007b1a:	e078      	b.n	8007c0e <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8007b1c:	48c0      	ldr	r0, [pc, #768]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007b1e:	f005 ffbf 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 181, 139, 223, 8);
 8007b22:	2308      	movs	r3, #8
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	23df      	movs	r3, #223	; 0xdf
 8007b28:	228b      	movs	r2, #139	; 0x8b
 8007b2a:	21b5      	movs	r1, #181	; 0xb5
 8007b2c:	2064      	movs	r0, #100	; 0x64
 8007b2e:	f006 ffcb 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007b32:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007b36:	f005 ffb3 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 194);
 8007b3a:	22c2      	movs	r2, #194	; 0xc2
 8007b3c:	2174      	movs	r1, #116	; 0x74
 8007b3e:	2033      	movs	r0, #51	; 0x33
 8007b40:	f007 fdea 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007b44:	2000      	movs	r0, #0
 8007b46:	f005 ffab 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(110, 211, 127, 211);
 8007b4a:	23d3      	movs	r3, #211	; 0xd3
 8007b4c:	227f      	movs	r2, #127	; 0x7f
 8007b4e:	21d3      	movs	r1, #211	; 0xd3
 8007b50:	206e      	movs	r0, #110	; 0x6e
 8007b52:	f007 fcf3 	bl	800f53c <GUI_DrawLine>
			break;
 8007b56:	e05a      	b.n	8007c0e <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8007b58:	48b1      	ldr	r0, [pc, #708]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007b5a:	f005 ffa1 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 181, 171, 223, 8);
 8007b5e:	2308      	movs	r3, #8
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	23df      	movs	r3, #223	; 0xdf
 8007b64:	22ab      	movs	r2, #171	; 0xab
 8007b66:	21b5      	movs	r1, #181	; 0xb5
 8007b68:	2084      	movs	r0, #132	; 0x84
 8007b6a:	f006 ffad 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007b6e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007b72:	f005 ff95 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 194);
 8007b76:	22c2      	movs	r2, #194	; 0xc2
 8007b78:	2195      	movs	r1, #149	; 0x95
 8007b7a:	2034      	movs	r0, #52	; 0x34
 8007b7c:	f007 fdcc 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007b80:	2000      	movs	r0, #0
 8007b82:	f005 ff8d 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(143, 211, 160, 211);
 8007b86:	23d3      	movs	r3, #211	; 0xd3
 8007b88:	22a0      	movs	r2, #160	; 0xa0
 8007b8a:	21d3      	movs	r1, #211	; 0xd3
 8007b8c:	208f      	movs	r0, #143	; 0x8f
 8007b8e:	f007 fcd5 	bl	800f53c <GUI_DrawLine>
			break;
 8007b92:	e03c      	b.n	8007c0e <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8007b94:	48a2      	ldr	r0, [pc, #648]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007b96:	f005 ff83 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 181, 204, 223, 8);
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	23df      	movs	r3, #223	; 0xdf
 8007ba0:	22cc      	movs	r2, #204	; 0xcc
 8007ba2:	21b5      	movs	r1, #181	; 0xb5
 8007ba4:	20a5      	movs	r0, #165	; 0xa5
 8007ba6:	f006 ff8f 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007baa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007bae:	f005 ff77 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 194);
 8007bb2:	22c2      	movs	r2, #194	; 0xc2
 8007bb4:	21b6      	movs	r1, #182	; 0xb6
 8007bb6:	2035      	movs	r0, #53	; 0x35
 8007bb8:	f007 fdae 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	f005 ff6f 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(176, 211, 193, 211);
 8007bc2:	23d3      	movs	r3, #211	; 0xd3
 8007bc4:	22c1      	movs	r2, #193	; 0xc1
 8007bc6:	21d3      	movs	r1, #211	; 0xd3
 8007bc8:	20b0      	movs	r0, #176	; 0xb0
 8007bca:	f007 fcb7 	bl	800f53c <GUI_DrawLine>
			break;
 8007bce:	e01e      	b.n	8007c0e <disablePrevZoneState+0x1b6>
			GUI_SetColor(CUS_DARKGRAY);
 8007bd0:	4893      	ldr	r0, [pc, #588]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007bd2:	f005 ff65 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 181, 235, 223, 8);
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	23df      	movs	r3, #223	; 0xdf
 8007bdc:	22eb      	movs	r2, #235	; 0xeb
 8007bde:	21b5      	movs	r1, #181	; 0xb5
 8007be0:	20c8      	movs	r0, #200	; 0xc8
 8007be2:	f006 ff71 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007be6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007bea:	f005 ff59 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 194);
 8007bee:	22c2      	movs	r2, #194	; 0xc2
 8007bf0:	21d7      	movs	r1, #215	; 0xd7
 8007bf2:	2041      	movs	r0, #65	; 0x41
 8007bf4:	f007 fd90 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	f005 ff51 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(209, 211, 226, 211);
 8007bfe:	23d3      	movs	r3, #211	; 0xd3
 8007c00:	22e2      	movs	r2, #226	; 0xe2
 8007c02:	21d3      	movs	r1, #211	; 0xd3
 8007c04:	20d1      	movs	r0, #209	; 0xd1
 8007c06:	f007 fc99 	bl	800f53c <GUI_DrawLine>
			break;
 8007c0a:	e000      	b.n	8007c0e <disablePrevZoneState+0x1b6>
			break;
 8007c0c:	bf00      	nop
		break;
 8007c0e:	e1ba      	b.n	8007f86 <disablePrevZoneState+0x52e>
		switch (zoneState)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	f200 80c9 	bhi.w	8007dac <disablePrevZoneState+0x354>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <disablePrevZoneState+0x1c8>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c77 	.word	0x08007c77
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cf3 	.word	0x08007cf3
 8007c30:	08007d31 	.word	0x08007d31
 8007c34:	08007d6f 	.word	0x08007d6f
			GUI_SetColor(CUS_DARKGRAY);
 8007c38:	4879      	ldr	r0, [pc, #484]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007c3a:	f005 ff31 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 225, 73, 267, 8);
 8007c3e:	2308      	movs	r3, #8
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	f240 130b 	movw	r3, #267	; 0x10b
 8007c46:	2249      	movs	r2, #73	; 0x49
 8007c48:	21e1      	movs	r1, #225	; 0xe1
 8007c4a:	2023      	movs	r0, #35	; 0x23
 8007c4c:	f006 ff3c 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007c50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007c54:	f005 ff24 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 238);
 8007c58:	22ee      	movs	r2, #238	; 0xee
 8007c5a:	2132      	movs	r1, #50	; 0x32
 8007c5c:	2031      	movs	r0, #49	; 0x31
 8007c5e:	f007 fd5b 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007c62:	2000      	movs	r0, #0
 8007c64:	f005 ff1c 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(44, 255, 63, 255);
 8007c68:	23ff      	movs	r3, #255	; 0xff
 8007c6a:	223f      	movs	r2, #63	; 0x3f
 8007c6c:	21ff      	movs	r1, #255	; 0xff
 8007c6e:	202c      	movs	r0, #44	; 0x2c
 8007c70:	f007 fc64 	bl	800f53c <GUI_DrawLine>
			break;
 8007c74:	e09b      	b.n	8007dae <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8007c76:	486a      	ldr	r0, [pc, #424]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007c78:	f005 ff12 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 225, 106, 267, 8);
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	f240 130b 	movw	r3, #267	; 0x10b
 8007c84:	226a      	movs	r2, #106	; 0x6a
 8007c86:	21e1      	movs	r1, #225	; 0xe1
 8007c88:	2043      	movs	r0, #67	; 0x43
 8007c8a:	f006 ff1d 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007c8e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007c92:	f005 ff05 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 238);
 8007c96:	22ee      	movs	r2, #238	; 0xee
 8007c98:	2153      	movs	r1, #83	; 0x53
 8007c9a:	2032      	movs	r0, #50	; 0x32
 8007c9c:	f007 fd3c 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	f005 fefd 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(77, 255, 96, 255);
 8007ca6:	23ff      	movs	r3, #255	; 0xff
 8007ca8:	2260      	movs	r2, #96	; 0x60
 8007caa:	21ff      	movs	r1, #255	; 0xff
 8007cac:	204d      	movs	r0, #77	; 0x4d
 8007cae:	f007 fc45 	bl	800f53c <GUI_DrawLine>
			break;
 8007cb2:	e07c      	b.n	8007dae <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8007cb4:	485a      	ldr	r0, [pc, #360]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007cb6:	f005 fef3 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 225, 139, 267, 8);
 8007cba:	2308      	movs	r3, #8
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	f240 130b 	movw	r3, #267	; 0x10b
 8007cc2:	228b      	movs	r2, #139	; 0x8b
 8007cc4:	21e1      	movs	r1, #225	; 0xe1
 8007cc6:	2064      	movs	r0, #100	; 0x64
 8007cc8:	f006 fefe 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007ccc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007cd0:	f005 fee6 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 238);
 8007cd4:	22ee      	movs	r2, #238	; 0xee
 8007cd6:	2174      	movs	r1, #116	; 0x74
 8007cd8:	2033      	movs	r0, #51	; 0x33
 8007cda:	f007 fd1d 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f005 fede 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(110, 255, 127, 255);
 8007ce4:	23ff      	movs	r3, #255	; 0xff
 8007ce6:	227f      	movs	r2, #127	; 0x7f
 8007ce8:	21ff      	movs	r1, #255	; 0xff
 8007cea:	206e      	movs	r0, #110	; 0x6e
 8007cec:	f007 fc26 	bl	800f53c <GUI_DrawLine>
			break;
 8007cf0:	e05d      	b.n	8007dae <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8007cf2:	484b      	ldr	r0, [pc, #300]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007cf4:	f005 fed4 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 225, 171, 267, 8);
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	f240 130b 	movw	r3, #267	; 0x10b
 8007d00:	22ab      	movs	r2, #171	; 0xab
 8007d02:	21e1      	movs	r1, #225	; 0xe1
 8007d04:	2084      	movs	r0, #132	; 0x84
 8007d06:	f006 fedf 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007d0a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007d0e:	f005 fec7 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 238);
 8007d12:	22ee      	movs	r2, #238	; 0xee
 8007d14:	2195      	movs	r1, #149	; 0x95
 8007d16:	2034      	movs	r0, #52	; 0x34
 8007d18:	f007 fcfe 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f005 febf 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(143, 255, 160, 255);
 8007d22:	23ff      	movs	r3, #255	; 0xff
 8007d24:	22a0      	movs	r2, #160	; 0xa0
 8007d26:	21ff      	movs	r1, #255	; 0xff
 8007d28:	208f      	movs	r0, #143	; 0x8f
 8007d2a:	f007 fc07 	bl	800f53c <GUI_DrawLine>
			break;
 8007d2e:	e03e      	b.n	8007dae <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8007d30:	483b      	ldr	r0, [pc, #236]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007d32:	f005 feb5 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 225, 204, 267, 8);
 8007d36:	2308      	movs	r3, #8
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	f240 130b 	movw	r3, #267	; 0x10b
 8007d3e:	22cc      	movs	r2, #204	; 0xcc
 8007d40:	21e1      	movs	r1, #225	; 0xe1
 8007d42:	20a5      	movs	r0, #165	; 0xa5
 8007d44:	f006 fec0 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007d48:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007d4c:	f005 fea8 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 238);
 8007d50:	22ee      	movs	r2, #238	; 0xee
 8007d52:	21b6      	movs	r1, #182	; 0xb6
 8007d54:	2035      	movs	r0, #53	; 0x35
 8007d56:	f007 fcdf 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f005 fea0 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(176, 255, 193, 255);
 8007d60:	23ff      	movs	r3, #255	; 0xff
 8007d62:	22c1      	movs	r2, #193	; 0xc1
 8007d64:	21ff      	movs	r1, #255	; 0xff
 8007d66:	20b0      	movs	r0, #176	; 0xb0
 8007d68:	f007 fbe8 	bl	800f53c <GUI_DrawLine>
			break;
 8007d6c:	e01f      	b.n	8007dae <disablePrevZoneState+0x356>
			GUI_SetColor(CUS_DARKGRAY);
 8007d6e:	482c      	ldr	r0, [pc, #176]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007d70:	f005 fe96 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 225, 235, 267, 8);
 8007d74:	2308      	movs	r3, #8
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	f240 130b 	movw	r3, #267	; 0x10b
 8007d7c:	22eb      	movs	r2, #235	; 0xeb
 8007d7e:	21e1      	movs	r1, #225	; 0xe1
 8007d80:	20c8      	movs	r0, #200	; 0xc8
 8007d82:	f006 fea1 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007d86:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007d8a:	f005 fe89 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 238);
 8007d8e:	22ee      	movs	r2, #238	; 0xee
 8007d90:	21d7      	movs	r1, #215	; 0xd7
 8007d92:	2041      	movs	r0, #65	; 0x41
 8007d94:	f007 fcc0 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f005 fe81 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(209, 255, 226, 255);
 8007d9e:	23ff      	movs	r3, #255	; 0xff
 8007da0:	22e2      	movs	r2, #226	; 0xe2
 8007da2:	21ff      	movs	r1, #255	; 0xff
 8007da4:	20d1      	movs	r0, #209	; 0xd1
 8007da6:	f007 fbc9 	bl	800f53c <GUI_DrawLine>
			break;
 8007daa:	e000      	b.n	8007dae <disablePrevZoneState+0x356>
			break;
 8007dac:	bf00      	nop
		break;
 8007dae:	e0ea      	b.n	8007f86 <disablePrevZoneState+0x52e>
		switch (zoneState)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	f200 80e4 	bhi.w	8007f82 <disablePrevZoneState+0x52a>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <disablePrevZoneState+0x368>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007dd9 	.word	0x08007dd9
 8007dc4:	08007e25 	.word	0x08007e25
 8007dc8:	08007e6b 	.word	0x08007e6b
 8007dcc:	08007eb1 	.word	0x08007eb1
 8007dd0:	08007ef7 	.word	0x08007ef7
 8007dd4:	08007f3d 	.word	0x08007f3d
			GUI_SetColor(CUS_DARKGRAY);
 8007dd8:	4811      	ldr	r0, [pc, #68]	; (8007e20 <disablePrevZoneState+0x3c8>)
 8007dda:	f005 fe61 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 269, 73, 311, 8);
 8007dde:	2308      	movs	r3, #8
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	f240 1337 	movw	r3, #311	; 0x137
 8007de6:	2249      	movs	r2, #73	; 0x49
 8007de8:	f240 110d 	movw	r1, #269	; 0x10d
 8007dec:	2023      	movs	r0, #35	; 0x23
 8007dee:	f006 fe6b 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007df2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007df6:	f005 fe53 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 282);
 8007dfa:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007dfe:	2132      	movs	r1, #50	; 0x32
 8007e00:	2031      	movs	r0, #49	; 0x31
 8007e02:	f007 fc89 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007e06:	2000      	movs	r0, #0
 8007e08:	f005 fe4a 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(44, 299, 63, 299);
 8007e0c:	f240 132b 	movw	r3, #299	; 0x12b
 8007e10:	223f      	movs	r2, #63	; 0x3f
 8007e12:	f240 112b 	movw	r1, #299	; 0x12b
 8007e16:	202c      	movs	r0, #44	; 0x2c
 8007e18:	f007 fb90 	bl	800f53c <GUI_DrawLine>
			break;
 8007e1c:	e0b2      	b.n	8007f84 <disablePrevZoneState+0x52c>
 8007e1e:	bf00      	nop
 8007e20:	00333333 	.word	0x00333333
			GUI_SetColor(CUS_DARKGRAY);
 8007e24:	485a      	ldr	r0, [pc, #360]	; (8007f90 <disablePrevZoneState+0x538>)
 8007e26:	f005 fe3b 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 269, 106, 311, 8);
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	f240 1337 	movw	r3, #311	; 0x137
 8007e32:	226a      	movs	r2, #106	; 0x6a
 8007e34:	f240 110d 	movw	r1, #269	; 0x10d
 8007e38:	2043      	movs	r0, #67	; 0x43
 8007e3a:	f006 fe45 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007e3e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007e42:	f005 fe2d 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 282);
 8007e46:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007e4a:	2153      	movs	r1, #83	; 0x53
 8007e4c:	2032      	movs	r0, #50	; 0x32
 8007e4e:	f007 fc63 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007e52:	2000      	movs	r0, #0
 8007e54:	f005 fe24 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(77, 299, 96, 299);
 8007e58:	f240 132b 	movw	r3, #299	; 0x12b
 8007e5c:	2260      	movs	r2, #96	; 0x60
 8007e5e:	f240 112b 	movw	r1, #299	; 0x12b
 8007e62:	204d      	movs	r0, #77	; 0x4d
 8007e64:	f007 fb6a 	bl	800f53c <GUI_DrawLine>
			break;
 8007e68:	e08c      	b.n	8007f84 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8007e6a:	4849      	ldr	r0, [pc, #292]	; (8007f90 <disablePrevZoneState+0x538>)
 8007e6c:	f005 fe18 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 269, 139, 311, 8);
 8007e70:	2308      	movs	r3, #8
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	f240 1337 	movw	r3, #311	; 0x137
 8007e78:	228b      	movs	r2, #139	; 0x8b
 8007e7a:	f240 110d 	movw	r1, #269	; 0x10d
 8007e7e:	2064      	movs	r0, #100	; 0x64
 8007e80:	f006 fe22 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007e84:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007e88:	f005 fe0a 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 282);
 8007e8c:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007e90:	2174      	movs	r1, #116	; 0x74
 8007e92:	2033      	movs	r0, #51	; 0x33
 8007e94:	f007 fc40 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007e98:	2000      	movs	r0, #0
 8007e9a:	f005 fe01 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(110, 299, 127, 299);
 8007e9e:	f240 132b 	movw	r3, #299	; 0x12b
 8007ea2:	227f      	movs	r2, #127	; 0x7f
 8007ea4:	f240 112b 	movw	r1, #299	; 0x12b
 8007ea8:	206e      	movs	r0, #110	; 0x6e
 8007eaa:	f007 fb47 	bl	800f53c <GUI_DrawLine>
			break;
 8007eae:	e069      	b.n	8007f84 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8007eb0:	4837      	ldr	r0, [pc, #220]	; (8007f90 <disablePrevZoneState+0x538>)
 8007eb2:	f005 fdf5 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 269, 171, 311, 8);
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f240 1337 	movw	r3, #311	; 0x137
 8007ebe:	22ab      	movs	r2, #171	; 0xab
 8007ec0:	f240 110d 	movw	r1, #269	; 0x10d
 8007ec4:	2084      	movs	r0, #132	; 0x84
 8007ec6:	f006 fdff 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007eca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ece:	f005 fde7 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 282);
 8007ed2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007ed6:	2195      	movs	r1, #149	; 0x95
 8007ed8:	2034      	movs	r0, #52	; 0x34
 8007eda:	f007 fc1d 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f005 fdde 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(143, 299, 160, 299);
 8007ee4:	f240 132b 	movw	r3, #299	; 0x12b
 8007ee8:	22a0      	movs	r2, #160	; 0xa0
 8007eea:	f240 112b 	movw	r1, #299	; 0x12b
 8007eee:	208f      	movs	r0, #143	; 0x8f
 8007ef0:	f007 fb24 	bl	800f53c <GUI_DrawLine>
			break;
 8007ef4:	e046      	b.n	8007f84 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8007ef6:	4826      	ldr	r0, [pc, #152]	; (8007f90 <disablePrevZoneState+0x538>)
 8007ef8:	f005 fdd2 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 269, 204, 311, 8);
 8007efc:	2308      	movs	r3, #8
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	f240 1337 	movw	r3, #311	; 0x137
 8007f04:	22cc      	movs	r2, #204	; 0xcc
 8007f06:	f240 110d 	movw	r1, #269	; 0x10d
 8007f0a:	20a5      	movs	r0, #165	; 0xa5
 8007f0c:	f006 fddc 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007f10:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007f14:	f005 fdc4 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 282);
 8007f18:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007f1c:	21b6      	movs	r1, #182	; 0xb6
 8007f1e:	2035      	movs	r0, #53	; 0x35
 8007f20:	f007 fbfa 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007f24:	2000      	movs	r0, #0
 8007f26:	f005 fdbb 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(176, 299, 193, 299);
 8007f2a:	f240 132b 	movw	r3, #299	; 0x12b
 8007f2e:	22c1      	movs	r2, #193	; 0xc1
 8007f30:	f240 112b 	movw	r1, #299	; 0x12b
 8007f34:	20b0      	movs	r0, #176	; 0xb0
 8007f36:	f007 fb01 	bl	800f53c <GUI_DrawLine>
			break;
 8007f3a:	e023      	b.n	8007f84 <disablePrevZoneState+0x52c>
			GUI_SetColor(CUS_DARKGRAY);
 8007f3c:	4814      	ldr	r0, [pc, #80]	; (8007f90 <disablePrevZoneState+0x538>)
 8007f3e:	f005 fdaf 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 269, 235, 311, 8);
 8007f42:	2308      	movs	r3, #8
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	f240 1337 	movw	r3, #311	; 0x137
 8007f4a:	22eb      	movs	r2, #235	; 0xeb
 8007f4c:	f240 110d 	movw	r1, #269	; 0x10d
 8007f50:	20c8      	movs	r0, #200	; 0xc8
 8007f52:	f006 fdb9 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007f56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007f5a:	f005 fda1 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 282);
 8007f5e:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8007f62:	21d7      	movs	r1, #215	; 0xd7
 8007f64:	2041      	movs	r0, #65	; 0x41
 8007f66:	f007 fbd7 	bl	800f718 <GUI_DispCharAt>
			GUI_SetColor(GUI_BLACK);
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	f005 fd98 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(209, 299, 226, 299);
 8007f70:	f240 132b 	movw	r3, #299	; 0x12b
 8007f74:	22e2      	movs	r2, #226	; 0xe2
 8007f76:	f240 112b 	movw	r1, #299	; 0x12b
 8007f7a:	20d1      	movs	r0, #209	; 0xd1
 8007f7c:	f007 fade 	bl	800f53c <GUI_DrawLine>
			break;
 8007f80:	e000      	b.n	8007f84 <disablePrevZoneState+0x52c>
			break;
 8007f82:	bf00      	nop
		break;
 8007f84:	bf00      	nop
	}
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	00333333 	.word	0x00333333

08007f94 <enableNextZoneState>:

static void enableNextZoneState(ui_zone_state_t zoneState, uint8_t numOfZone)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	460a      	mov	r2, r1
 8007f9e:	71fb      	strb	r3, [r7, #7]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	71bb      	strb	r3, [r7, #6]
	switch (numOfZone)
 8007fa4:	79bb      	ldrb	r3, [r7, #6]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	f000 80be 	beq.w	8008128 <enableNextZoneState+0x194>
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	f000 8179 	beq.w	80082a4 <enableNextZoneState+0x310>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d000      	beq.n	8007fb8 <enableNextZoneState+0x24>
		default:
			break;
		}
		break;
	default:
		break;
 8007fb6:	e24d      	b.n	8008454 <enableNextZoneState+0x4c0>
		switch (zoneState)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	2b05      	cmp	r3, #5
 8007fbe:	f200 80b1 	bhi.w	8008124 <enableNextZoneState+0x190>
 8007fc2:	a201      	add	r2, pc, #4	; (adr r2, 8007fc8 <enableNextZoneState+0x34>)
 8007fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc8:	08007fe1 	.word	0x08007fe1
 8007fcc:	08008017 	.word	0x08008017
 8007fd0:	0800804d 	.word	0x0800804d
 8007fd4:	08008083 	.word	0x08008083
 8007fd8:	080080b9 	.word	0x080080b9
 8007fdc:	080080ef 	.word	0x080080ef
			GUI_SetColor(CUS_LIGHTBLUE);
 8007fe0:	48da      	ldr	r0, [pc, #872]	; (800834c <enableNextZoneState+0x3b8>)
 8007fe2:	f005 fd5d 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 181, 73, 223, 8);
 8007fe6:	2308      	movs	r3, #8
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	23df      	movs	r3, #223	; 0xdf
 8007fec:	2249      	movs	r2, #73	; 0x49
 8007fee:	21b5      	movs	r1, #181	; 0xb5
 8007ff0:	2023      	movs	r0, #35	; 0x23
 8007ff2:	f006 fd69 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8007ff6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ffa:	f005 fd51 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 194);
 8007ffe:	22c2      	movs	r2, #194	; 0xc2
 8008000:	2132      	movs	r1, #50	; 0x32
 8008002:	2031      	movs	r0, #49	; 0x31
 8008004:	f007 fb88 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(44, 211, 63, 211);
 8008008:	23d3      	movs	r3, #211	; 0xd3
 800800a:	223f      	movs	r2, #63	; 0x3f
 800800c:	21d3      	movs	r1, #211	; 0xd3
 800800e:	202c      	movs	r0, #44	; 0x2c
 8008010:	f007 fa94 	bl	800f53c <GUI_DrawLine>
			break;
 8008014:	e087      	b.n	8008126 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008016:	48cd      	ldr	r0, [pc, #820]	; (800834c <enableNextZoneState+0x3b8>)
 8008018:	f005 fd42 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 181, 106, 223, 8);
 800801c:	2308      	movs	r3, #8
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	23df      	movs	r3, #223	; 0xdf
 8008022:	226a      	movs	r2, #106	; 0x6a
 8008024:	21b5      	movs	r1, #181	; 0xb5
 8008026:	2043      	movs	r0, #67	; 0x43
 8008028:	f006 fd4e 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 800802c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008030:	f005 fd36 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 194);
 8008034:	22c2      	movs	r2, #194	; 0xc2
 8008036:	2153      	movs	r1, #83	; 0x53
 8008038:	2032      	movs	r0, #50	; 0x32
 800803a:	f007 fb6d 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(77, 211, 96, 211);
 800803e:	23d3      	movs	r3, #211	; 0xd3
 8008040:	2260      	movs	r2, #96	; 0x60
 8008042:	21d3      	movs	r1, #211	; 0xd3
 8008044:	204d      	movs	r0, #77	; 0x4d
 8008046:	f007 fa79 	bl	800f53c <GUI_DrawLine>
			break;
 800804a:	e06c      	b.n	8008126 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 800804c:	48bf      	ldr	r0, [pc, #764]	; (800834c <enableNextZoneState+0x3b8>)
 800804e:	f005 fd27 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 181, 139, 223, 8);
 8008052:	2308      	movs	r3, #8
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	23df      	movs	r3, #223	; 0xdf
 8008058:	228b      	movs	r2, #139	; 0x8b
 800805a:	21b5      	movs	r1, #181	; 0xb5
 800805c:	2064      	movs	r0, #100	; 0x64
 800805e:	f006 fd33 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008062:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008066:	f005 fd1b 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 194);
 800806a:	22c2      	movs	r2, #194	; 0xc2
 800806c:	2174      	movs	r1, #116	; 0x74
 800806e:	2033      	movs	r0, #51	; 0x33
 8008070:	f007 fb52 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(110, 211, 127, 211);
 8008074:	23d3      	movs	r3, #211	; 0xd3
 8008076:	227f      	movs	r2, #127	; 0x7f
 8008078:	21d3      	movs	r1, #211	; 0xd3
 800807a:	206e      	movs	r0, #110	; 0x6e
 800807c:	f007 fa5e 	bl	800f53c <GUI_DrawLine>
			break;
 8008080:	e051      	b.n	8008126 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008082:	48b2      	ldr	r0, [pc, #712]	; (800834c <enableNextZoneState+0x3b8>)
 8008084:	f005 fd0c 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 181, 171, 223, 8);
 8008088:	2308      	movs	r3, #8
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	23df      	movs	r3, #223	; 0xdf
 800808e:	22ab      	movs	r2, #171	; 0xab
 8008090:	21b5      	movs	r1, #181	; 0xb5
 8008092:	2084      	movs	r0, #132	; 0x84
 8008094:	f006 fd18 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008098:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800809c:	f005 fd00 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 194);
 80080a0:	22c2      	movs	r2, #194	; 0xc2
 80080a2:	2195      	movs	r1, #149	; 0x95
 80080a4:	2034      	movs	r0, #52	; 0x34
 80080a6:	f007 fb37 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(143, 211, 160, 211);
 80080aa:	23d3      	movs	r3, #211	; 0xd3
 80080ac:	22a0      	movs	r2, #160	; 0xa0
 80080ae:	21d3      	movs	r1, #211	; 0xd3
 80080b0:	208f      	movs	r0, #143	; 0x8f
 80080b2:	f007 fa43 	bl	800f53c <GUI_DrawLine>
			break;
 80080b6:	e036      	b.n	8008126 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 80080b8:	48a4      	ldr	r0, [pc, #656]	; (800834c <enableNextZoneState+0x3b8>)
 80080ba:	f005 fcf1 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 181, 204, 223, 8);
 80080be:	2308      	movs	r3, #8
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	23df      	movs	r3, #223	; 0xdf
 80080c4:	22cc      	movs	r2, #204	; 0xcc
 80080c6:	21b5      	movs	r1, #181	; 0xb5
 80080c8:	20a5      	movs	r0, #165	; 0xa5
 80080ca:	f006 fcfd 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80080ce:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80080d2:	f005 fce5 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 194);
 80080d6:	22c2      	movs	r2, #194	; 0xc2
 80080d8:	21b6      	movs	r1, #182	; 0xb6
 80080da:	2035      	movs	r0, #53	; 0x35
 80080dc:	f007 fb1c 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(176, 211, 193, 211);
 80080e0:	23d3      	movs	r3, #211	; 0xd3
 80080e2:	22c1      	movs	r2, #193	; 0xc1
 80080e4:	21d3      	movs	r1, #211	; 0xd3
 80080e6:	20b0      	movs	r0, #176	; 0xb0
 80080e8:	f007 fa28 	bl	800f53c <GUI_DrawLine>
			break;
 80080ec:	e01b      	b.n	8008126 <enableNextZoneState+0x192>
			GUI_SetColor(CUS_LIGHTBLUE);
 80080ee:	4897      	ldr	r0, [pc, #604]	; (800834c <enableNextZoneState+0x3b8>)
 80080f0:	f005 fcd6 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 181, 235, 223, 8);
 80080f4:	2308      	movs	r3, #8
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	23df      	movs	r3, #223	; 0xdf
 80080fa:	22eb      	movs	r2, #235	; 0xeb
 80080fc:	21b5      	movs	r1, #181	; 0xb5
 80080fe:	20c8      	movs	r0, #200	; 0xc8
 8008100:	f006 fce2 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008104:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008108:	f005 fcca 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 194);
 800810c:	22c2      	movs	r2, #194	; 0xc2
 800810e:	21d7      	movs	r1, #215	; 0xd7
 8008110:	2041      	movs	r0, #65	; 0x41
 8008112:	f007 fb01 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(209, 211, 226, 211);
 8008116:	23d3      	movs	r3, #211	; 0xd3
 8008118:	22e2      	movs	r2, #226	; 0xe2
 800811a:	21d3      	movs	r1, #211	; 0xd3
 800811c:	20d1      	movs	r0, #209	; 0xd1
 800811e:	f007 fa0d 	bl	800f53c <GUI_DrawLine>
			break;
 8008122:	e000      	b.n	8008126 <enableNextZoneState+0x192>
			break;
 8008124:	bf00      	nop
		break;
 8008126:	e195      	b.n	8008454 <enableNextZoneState+0x4c0>
		switch (zoneState)
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	3b01      	subs	r3, #1
 800812c:	2b05      	cmp	r3, #5
 800812e:	f200 80b7 	bhi.w	80082a0 <enableNextZoneState+0x30c>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <enableNextZoneState+0x1a4>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008151 	.word	0x08008151
 800813c:	08008189 	.word	0x08008189
 8008140:	080081c1 	.word	0x080081c1
 8008144:	080081f9 	.word	0x080081f9
 8008148:	08008231 	.word	0x08008231
 800814c:	08008269 	.word	0x08008269
			GUI_SetColor(CUS_LIGHTBLUE);
 8008150:	487e      	ldr	r0, [pc, #504]	; (800834c <enableNextZoneState+0x3b8>)
 8008152:	f005 fca5 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 225, 73, 267, 8);
 8008156:	2308      	movs	r3, #8
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	f240 130b 	movw	r3, #267	; 0x10b
 800815e:	2249      	movs	r2, #73	; 0x49
 8008160:	21e1      	movs	r1, #225	; 0xe1
 8008162:	2023      	movs	r0, #35	; 0x23
 8008164:	f006 fcb0 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008168:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800816c:	f005 fc98 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 238);
 8008170:	22ee      	movs	r2, #238	; 0xee
 8008172:	2132      	movs	r1, #50	; 0x32
 8008174:	2031      	movs	r0, #49	; 0x31
 8008176:	f007 facf 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(44, 255, 63, 255);
 800817a:	23ff      	movs	r3, #255	; 0xff
 800817c:	223f      	movs	r2, #63	; 0x3f
 800817e:	21ff      	movs	r1, #255	; 0xff
 8008180:	202c      	movs	r0, #44	; 0x2c
 8008182:	f007 f9db 	bl	800f53c <GUI_DrawLine>
			break;
 8008186:	e08c      	b.n	80082a2 <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008188:	4870      	ldr	r0, [pc, #448]	; (800834c <enableNextZoneState+0x3b8>)
 800818a:	f005 fc89 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 225, 106, 267, 8);
 800818e:	2308      	movs	r3, #8
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	f240 130b 	movw	r3, #267	; 0x10b
 8008196:	226a      	movs	r2, #106	; 0x6a
 8008198:	21e1      	movs	r1, #225	; 0xe1
 800819a:	2043      	movs	r0, #67	; 0x43
 800819c:	f006 fc94 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80081a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80081a4:	f005 fc7c 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 238);
 80081a8:	22ee      	movs	r2, #238	; 0xee
 80081aa:	2153      	movs	r1, #83	; 0x53
 80081ac:	2032      	movs	r0, #50	; 0x32
 80081ae:	f007 fab3 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(77, 255, 96, 255);
 80081b2:	23ff      	movs	r3, #255	; 0xff
 80081b4:	2260      	movs	r2, #96	; 0x60
 80081b6:	21ff      	movs	r1, #255	; 0xff
 80081b8:	204d      	movs	r0, #77	; 0x4d
 80081ba:	f007 f9bf 	bl	800f53c <GUI_DrawLine>
			break;
 80081be:	e070      	b.n	80082a2 <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 80081c0:	4862      	ldr	r0, [pc, #392]	; (800834c <enableNextZoneState+0x3b8>)
 80081c2:	f005 fc6d 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 225, 139, 267, 8);
 80081c6:	2308      	movs	r3, #8
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	f240 130b 	movw	r3, #267	; 0x10b
 80081ce:	228b      	movs	r2, #139	; 0x8b
 80081d0:	21e1      	movs	r1, #225	; 0xe1
 80081d2:	2064      	movs	r0, #100	; 0x64
 80081d4:	f006 fc78 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80081d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80081dc:	f005 fc60 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 238);
 80081e0:	22ee      	movs	r2, #238	; 0xee
 80081e2:	2174      	movs	r1, #116	; 0x74
 80081e4:	2033      	movs	r0, #51	; 0x33
 80081e6:	f007 fa97 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(110, 255, 127, 255);
 80081ea:	23ff      	movs	r3, #255	; 0xff
 80081ec:	227f      	movs	r2, #127	; 0x7f
 80081ee:	21ff      	movs	r1, #255	; 0xff
 80081f0:	206e      	movs	r0, #110	; 0x6e
 80081f2:	f007 f9a3 	bl	800f53c <GUI_DrawLine>
			break;
 80081f6:	e054      	b.n	80082a2 <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 80081f8:	4854      	ldr	r0, [pc, #336]	; (800834c <enableNextZoneState+0x3b8>)
 80081fa:	f005 fc51 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 225, 171, 267, 8);
 80081fe:	2308      	movs	r3, #8
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	f240 130b 	movw	r3, #267	; 0x10b
 8008206:	22ab      	movs	r2, #171	; 0xab
 8008208:	21e1      	movs	r1, #225	; 0xe1
 800820a:	2084      	movs	r0, #132	; 0x84
 800820c:	f006 fc5c 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008210:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008214:	f005 fc44 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 238);
 8008218:	22ee      	movs	r2, #238	; 0xee
 800821a:	2195      	movs	r1, #149	; 0x95
 800821c:	2034      	movs	r0, #52	; 0x34
 800821e:	f007 fa7b 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(143, 255, 160, 255);
 8008222:	23ff      	movs	r3, #255	; 0xff
 8008224:	22a0      	movs	r2, #160	; 0xa0
 8008226:	21ff      	movs	r1, #255	; 0xff
 8008228:	208f      	movs	r0, #143	; 0x8f
 800822a:	f007 f987 	bl	800f53c <GUI_DrawLine>
			break;
 800822e:	e038      	b.n	80082a2 <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008230:	4846      	ldr	r0, [pc, #280]	; (800834c <enableNextZoneState+0x3b8>)
 8008232:	f005 fc35 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 225, 204, 267, 8);
 8008236:	2308      	movs	r3, #8
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	f240 130b 	movw	r3, #267	; 0x10b
 800823e:	22cc      	movs	r2, #204	; 0xcc
 8008240:	21e1      	movs	r1, #225	; 0xe1
 8008242:	20a5      	movs	r0, #165	; 0xa5
 8008244:	f006 fc40 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008248:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800824c:	f005 fc28 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 238);
 8008250:	22ee      	movs	r2, #238	; 0xee
 8008252:	21b6      	movs	r1, #182	; 0xb6
 8008254:	2035      	movs	r0, #53	; 0x35
 8008256:	f007 fa5f 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(176, 255, 193, 255);
 800825a:	23ff      	movs	r3, #255	; 0xff
 800825c:	22c1      	movs	r2, #193	; 0xc1
 800825e:	21ff      	movs	r1, #255	; 0xff
 8008260:	20b0      	movs	r0, #176	; 0xb0
 8008262:	f007 f96b 	bl	800f53c <GUI_DrawLine>
			break;
 8008266:	e01c      	b.n	80082a2 <enableNextZoneState+0x30e>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008268:	4838      	ldr	r0, [pc, #224]	; (800834c <enableNextZoneState+0x3b8>)
 800826a:	f005 fc19 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 225, 235, 267, 8);
 800826e:	2308      	movs	r3, #8
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	f240 130b 	movw	r3, #267	; 0x10b
 8008276:	22eb      	movs	r2, #235	; 0xeb
 8008278:	21e1      	movs	r1, #225	; 0xe1
 800827a:	20c8      	movs	r0, #200	; 0xc8
 800827c:	f006 fc24 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008280:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008284:	f005 fc0c 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 238);
 8008288:	22ee      	movs	r2, #238	; 0xee
 800828a:	21d7      	movs	r1, #215	; 0xd7
 800828c:	2041      	movs	r0, #65	; 0x41
 800828e:	f007 fa43 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(209, 255, 226, 255);
 8008292:	23ff      	movs	r3, #255	; 0xff
 8008294:	22e2      	movs	r2, #226	; 0xe2
 8008296:	21ff      	movs	r1, #255	; 0xff
 8008298:	20d1      	movs	r0, #209	; 0xd1
 800829a:	f007 f94f 	bl	800f53c <GUI_DrawLine>
			break;
 800829e:	e000      	b.n	80082a2 <enableNextZoneState+0x30e>
			break;
 80082a0:	bf00      	nop
		break;
 80082a2:	e0d7      	b.n	8008454 <enableNextZoneState+0x4c0>
		switch (zoneState)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	f200 80d1 	bhi.w	8008450 <enableNextZoneState+0x4bc>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <enableNextZoneState+0x320>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082cd 	.word	0x080082cd
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	08008351 	.word	0x08008351
 80082c0:	08008391 	.word	0x08008391
 80082c4:	080083d1 	.word	0x080083d1
 80082c8:	08008411 	.word	0x08008411
			GUI_SetColor(CUS_LIGHTBLUE);
 80082cc:	481f      	ldr	r0, [pc, #124]	; (800834c <enableNextZoneState+0x3b8>)
 80082ce:	f005 fbe7 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(35, 269, 73, 311, 8);
 80082d2:	2308      	movs	r3, #8
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	f240 1337 	movw	r3, #311	; 0x137
 80082da:	2249      	movs	r2, #73	; 0x49
 80082dc:	f240 110d 	movw	r1, #269	; 0x10d
 80082e0:	2023      	movs	r0, #35	; 0x23
 80082e2:	f006 fbf1 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80082e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80082ea:	f005 fbd9 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('1', 50, 282);
 80082ee:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80082f2:	2132      	movs	r1, #50	; 0x32
 80082f4:	2031      	movs	r0, #49	; 0x31
 80082f6:	f007 fa0f 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(44, 299, 63, 299);
 80082fa:	f240 132b 	movw	r3, #299	; 0x12b
 80082fe:	223f      	movs	r2, #63	; 0x3f
 8008300:	f240 112b 	movw	r1, #299	; 0x12b
 8008304:	202c      	movs	r0, #44	; 0x2c
 8008306:	f007 f919 	bl	800f53c <GUI_DrawLine>
			break;
 800830a:	e0a2      	b.n	8008452 <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 800830c:	480f      	ldr	r0, [pc, #60]	; (800834c <enableNextZoneState+0x3b8>)
 800830e:	f005 fbc7 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(67, 269, 106, 311, 8);
 8008312:	2308      	movs	r3, #8
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	f240 1337 	movw	r3, #311	; 0x137
 800831a:	226a      	movs	r2, #106	; 0x6a
 800831c:	f240 110d 	movw	r1, #269	; 0x10d
 8008320:	2043      	movs	r0, #67	; 0x43
 8008322:	f006 fbd1 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 8008326:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800832a:	f005 fbb9 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('2', 83, 282);
 800832e:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8008332:	2153      	movs	r1, #83	; 0x53
 8008334:	2032      	movs	r0, #50	; 0x32
 8008336:	f007 f9ef 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(77, 299, 96, 299);
 800833a:	f240 132b 	movw	r3, #299	; 0x12b
 800833e:	2260      	movs	r2, #96	; 0x60
 8008340:	f240 112b 	movw	r1, #299	; 0x12b
 8008344:	204d      	movs	r0, #77	; 0x4d
 8008346:	f007 f8f9 	bl	800f53c <GUI_DrawLine>
			break;
 800834a:	e082      	b.n	8008452 <enableNextZoneState+0x4be>
 800834c:	00ffd218 	.word	0x00ffd218
			GUI_SetColor(CUS_LIGHTBLUE);
 8008350:	4842      	ldr	r0, [pc, #264]	; (800845c <enableNextZoneState+0x4c8>)
 8008352:	f005 fba5 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(100, 269, 139, 311, 8);
 8008356:	2308      	movs	r3, #8
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	f240 1337 	movw	r3, #311	; 0x137
 800835e:	228b      	movs	r2, #139	; 0x8b
 8008360:	f240 110d 	movw	r1, #269	; 0x10d
 8008364:	2064      	movs	r0, #100	; 0x64
 8008366:	f006 fbaf 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 800836a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800836e:	f005 fb97 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('3', 116, 282);
 8008372:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8008376:	2174      	movs	r1, #116	; 0x74
 8008378:	2033      	movs	r0, #51	; 0x33
 800837a:	f007 f9cd 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(110, 299, 127, 299);
 800837e:	f240 132b 	movw	r3, #299	; 0x12b
 8008382:	227f      	movs	r2, #127	; 0x7f
 8008384:	f240 112b 	movw	r1, #299	; 0x12b
 8008388:	206e      	movs	r0, #110	; 0x6e
 800838a:	f007 f8d7 	bl	800f53c <GUI_DrawLine>
			break;
 800838e:	e060      	b.n	8008452 <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008390:	4832      	ldr	r0, [pc, #200]	; (800845c <enableNextZoneState+0x4c8>)
 8008392:	f005 fb85 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(132, 269, 171, 311, 8);
 8008396:	2308      	movs	r3, #8
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	f240 1337 	movw	r3, #311	; 0x137
 800839e:	22ab      	movs	r2, #171	; 0xab
 80083a0:	f240 110d 	movw	r1, #269	; 0x10d
 80083a4:	2084      	movs	r0, #132	; 0x84
 80083a6:	f006 fb8f 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80083aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80083ae:	f005 fb77 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('4', 149, 282);
 80083b2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80083b6:	2195      	movs	r1, #149	; 0x95
 80083b8:	2034      	movs	r0, #52	; 0x34
 80083ba:	f007 f9ad 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(143, 299, 160, 299);
 80083be:	f240 132b 	movw	r3, #299	; 0x12b
 80083c2:	22a0      	movs	r2, #160	; 0xa0
 80083c4:	f240 112b 	movw	r1, #299	; 0x12b
 80083c8:	208f      	movs	r0, #143	; 0x8f
 80083ca:	f007 f8b7 	bl	800f53c <GUI_DrawLine>
			break;
 80083ce:	e040      	b.n	8008452 <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 80083d0:	4822      	ldr	r0, [pc, #136]	; (800845c <enableNextZoneState+0x4c8>)
 80083d2:	f005 fb65 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(165, 269, 204, 311, 8);
 80083d6:	2308      	movs	r3, #8
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	f240 1337 	movw	r3, #311	; 0x137
 80083de:	22cc      	movs	r2, #204	; 0xcc
 80083e0:	f240 110d 	movw	r1, #269	; 0x10d
 80083e4:	20a5      	movs	r0, #165	; 0xa5
 80083e6:	f006 fb6f 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 80083ea:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80083ee:	f005 fb57 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('5', 182, 282);
 80083f2:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80083f6:	21b6      	movs	r1, #182	; 0xb6
 80083f8:	2035      	movs	r0, #53	; 0x35
 80083fa:	f007 f98d 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(176, 299, 193, 299);
 80083fe:	f240 132b 	movw	r3, #299	; 0x12b
 8008402:	22c1      	movs	r2, #193	; 0xc1
 8008404:	f240 112b 	movw	r1, #299	; 0x12b
 8008408:	20b0      	movs	r0, #176	; 0xb0
 800840a:	f007 f897 	bl	800f53c <GUI_DrawLine>
			break;
 800840e:	e020      	b.n	8008452 <enableNextZoneState+0x4be>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008410:	4812      	ldr	r0, [pc, #72]	; (800845c <enableNextZoneState+0x4c8>)
 8008412:	f005 fb45 	bl	800daa0 <GUI_SetColor>
			GUI_FillRoundedRect(200, 269, 235, 311, 8);
 8008416:	2308      	movs	r3, #8
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	f240 1337 	movw	r3, #311	; 0x137
 800841e:	22eb      	movs	r2, #235	; 0xeb
 8008420:	f240 110d 	movw	r1, #269	; 0x10d
 8008424:	20c8      	movs	r0, #200	; 0xc8
 8008426:	f006 fb4f 	bl	800eac8 <GUI_FillRoundedRect>
			GUI_SetColor(GUI_WHITE);
 800842a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800842e:	f005 fb37 	bl	800daa0 <GUI_SetColor>
			GUI_DispCharAt('A', 215, 282);
 8008432:	f44f 728d 	mov.w	r2, #282	; 0x11a
 8008436:	21d7      	movs	r1, #215	; 0xd7
 8008438:	2041      	movs	r0, #65	; 0x41
 800843a:	f007 f96d 	bl	800f718 <GUI_DispCharAt>
			GUI_DrawLine(209, 299, 226, 299);
 800843e:	f240 132b 	movw	r3, #299	; 0x12b
 8008442:	22e2      	movs	r2, #226	; 0xe2
 8008444:	f240 112b 	movw	r1, #299	; 0x12b
 8008448:	20d1      	movs	r0, #209	; 0xd1
 800844a:	f007 f877 	bl	800f53c <GUI_DrawLine>
			break;
 800844e:	e000      	b.n	8008452 <enableNextZoneState+0x4be>
			break;
 8008450:	bf00      	nop
		break;
 8008452:	bf00      	nop
	}
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	00ffd218 	.word	0x00ffd218

08008460 <enableNextZoneMode>:

static void enableNextZoneMode(ui_zone_state_t zoneState, uint8_t numOfZone)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	460a      	mov	r2, r1
 800846a:	71fb      	strb	r3, [r7, #7]
 800846c:	4613      	mov	r3, r2
 800846e:	71bb      	strb	r3, [r7, #6]
	switch (numOfZone)
 8008470:	79bb      	ldrb	r3, [r7, #6]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d056      	beq.n	8008524 <enableNextZoneMode+0xc4>
 8008476:	2b02      	cmp	r3, #2
 8008478:	f000 80a6 	beq.w	80085c8 <enableNextZoneMode+0x168>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d000      	beq.n	8008482 <enableNextZoneMode+0x22>
		default:
			break;
		}
		break;
	default:
		break;
 8008480:	e100      	b.n	8008684 <enableNextZoneMode+0x224>
		switch (zoneState)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	3b01      	subs	r3, #1
 8008486:	2b05      	cmp	r3, #5
 8008488:	d84a      	bhi.n	8008520 <enableNextZoneMode+0xc0>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <enableNextZoneMode+0x30>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084a9 	.word	0x080084a9
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084d1 	.word	0x080084d1
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	080084f9 	.word	0x080084f9
 80084a4:	0800850d 	.word	0x0800850d
			GUI_SetColor(CUS_LIGHTBLUE);
 80084a8:	4878      	ldr	r0, [pc, #480]	; (800868c <enableNextZoneMode+0x22c>)
 80084aa:	f005 faf9 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(44, 211, 63, 211);
 80084ae:	23d3      	movs	r3, #211	; 0xd3
 80084b0:	223f      	movs	r2, #63	; 0x3f
 80084b2:	21d3      	movs	r1, #211	; 0xd3
 80084b4:	202c      	movs	r0, #44	; 0x2c
 80084b6:	f007 f841 	bl	800f53c <GUI_DrawLine>
			break;
 80084ba:	e032      	b.n	8008522 <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80084bc:	4873      	ldr	r0, [pc, #460]	; (800868c <enableNextZoneMode+0x22c>)
 80084be:	f005 faef 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(77, 211, 96, 211);
 80084c2:	23d3      	movs	r3, #211	; 0xd3
 80084c4:	2260      	movs	r2, #96	; 0x60
 80084c6:	21d3      	movs	r1, #211	; 0xd3
 80084c8:	204d      	movs	r0, #77	; 0x4d
 80084ca:	f007 f837 	bl	800f53c <GUI_DrawLine>
			break;
 80084ce:	e028      	b.n	8008522 <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80084d0:	486e      	ldr	r0, [pc, #440]	; (800868c <enableNextZoneMode+0x22c>)
 80084d2:	f005 fae5 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(110, 211, 127, 211);
 80084d6:	23d3      	movs	r3, #211	; 0xd3
 80084d8:	227f      	movs	r2, #127	; 0x7f
 80084da:	21d3      	movs	r1, #211	; 0xd3
 80084dc:	206e      	movs	r0, #110	; 0x6e
 80084de:	f007 f82d 	bl	800f53c <GUI_DrawLine>
			break;
 80084e2:	e01e      	b.n	8008522 <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80084e4:	4869      	ldr	r0, [pc, #420]	; (800868c <enableNextZoneMode+0x22c>)
 80084e6:	f005 fadb 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(143, 211, 160, 211);
 80084ea:	23d3      	movs	r3, #211	; 0xd3
 80084ec:	22a0      	movs	r2, #160	; 0xa0
 80084ee:	21d3      	movs	r1, #211	; 0xd3
 80084f0:	208f      	movs	r0, #143	; 0x8f
 80084f2:	f007 f823 	bl	800f53c <GUI_DrawLine>
			break;
 80084f6:	e014      	b.n	8008522 <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 80084f8:	4864      	ldr	r0, [pc, #400]	; (800868c <enableNextZoneMode+0x22c>)
 80084fa:	f005 fad1 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(176, 211, 193, 211);
 80084fe:	23d3      	movs	r3, #211	; 0xd3
 8008500:	22c1      	movs	r2, #193	; 0xc1
 8008502:	21d3      	movs	r1, #211	; 0xd3
 8008504:	20b0      	movs	r0, #176	; 0xb0
 8008506:	f007 f819 	bl	800f53c <GUI_DrawLine>
			break;
 800850a:	e00a      	b.n	8008522 <enableNextZoneMode+0xc2>
			GUI_SetColor(CUS_LIGHTBLUE);
 800850c:	485f      	ldr	r0, [pc, #380]	; (800868c <enableNextZoneMode+0x22c>)
 800850e:	f005 fac7 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(209, 211, 226, 211);
 8008512:	23d3      	movs	r3, #211	; 0xd3
 8008514:	22e2      	movs	r2, #226	; 0xe2
 8008516:	21d3      	movs	r1, #211	; 0xd3
 8008518:	20d1      	movs	r0, #209	; 0xd1
 800851a:	f007 f80f 	bl	800f53c <GUI_DrawLine>
			break;
 800851e:	e000      	b.n	8008522 <enableNextZoneMode+0xc2>
			break;
 8008520:	bf00      	nop
		break;
 8008522:	e0af      	b.n	8008684 <enableNextZoneMode+0x224>
		switch (zoneState)
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	3b01      	subs	r3, #1
 8008528:	2b05      	cmp	r3, #5
 800852a:	d84b      	bhi.n	80085c4 <enableNextZoneMode+0x164>
 800852c:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <enableNextZoneMode+0xd4>)
 800852e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008532:	bf00      	nop
 8008534:	0800854d 	.word	0x0800854d
 8008538:	08008561 	.word	0x08008561
 800853c:	08008575 	.word	0x08008575
 8008540:	08008589 	.word	0x08008589
 8008544:	0800859d 	.word	0x0800859d
 8008548:	080085b1 	.word	0x080085b1
			GUI_SetColor(CUS_LIGHTBLUE);
 800854c:	484f      	ldr	r0, [pc, #316]	; (800868c <enableNextZoneMode+0x22c>)
 800854e:	f005 faa7 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(44, 255, 63, 255);
 8008552:	23ff      	movs	r3, #255	; 0xff
 8008554:	223f      	movs	r2, #63	; 0x3f
 8008556:	21ff      	movs	r1, #255	; 0xff
 8008558:	202c      	movs	r0, #44	; 0x2c
 800855a:	f006 ffef 	bl	800f53c <GUI_DrawLine>
			break;
 800855e:	e032      	b.n	80085c6 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008560:	484a      	ldr	r0, [pc, #296]	; (800868c <enableNextZoneMode+0x22c>)
 8008562:	f005 fa9d 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(77, 255, 96, 255);
 8008566:	23ff      	movs	r3, #255	; 0xff
 8008568:	2260      	movs	r2, #96	; 0x60
 800856a:	21ff      	movs	r1, #255	; 0xff
 800856c:	204d      	movs	r0, #77	; 0x4d
 800856e:	f006 ffe5 	bl	800f53c <GUI_DrawLine>
			break;
 8008572:	e028      	b.n	80085c6 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008574:	4845      	ldr	r0, [pc, #276]	; (800868c <enableNextZoneMode+0x22c>)
 8008576:	f005 fa93 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(110, 255, 127, 255);
 800857a:	23ff      	movs	r3, #255	; 0xff
 800857c:	227f      	movs	r2, #127	; 0x7f
 800857e:	21ff      	movs	r1, #255	; 0xff
 8008580:	206e      	movs	r0, #110	; 0x6e
 8008582:	f006 ffdb 	bl	800f53c <GUI_DrawLine>
			break;
 8008586:	e01e      	b.n	80085c6 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008588:	4840      	ldr	r0, [pc, #256]	; (800868c <enableNextZoneMode+0x22c>)
 800858a:	f005 fa89 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(143, 255, 160, 255);
 800858e:	23ff      	movs	r3, #255	; 0xff
 8008590:	22a0      	movs	r2, #160	; 0xa0
 8008592:	21ff      	movs	r1, #255	; 0xff
 8008594:	208f      	movs	r0, #143	; 0x8f
 8008596:	f006 ffd1 	bl	800f53c <GUI_DrawLine>
			break;
 800859a:	e014      	b.n	80085c6 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 800859c:	483b      	ldr	r0, [pc, #236]	; (800868c <enableNextZoneMode+0x22c>)
 800859e:	f005 fa7f 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(176, 255, 193, 255);
 80085a2:	23ff      	movs	r3, #255	; 0xff
 80085a4:	22c1      	movs	r2, #193	; 0xc1
 80085a6:	21ff      	movs	r1, #255	; 0xff
 80085a8:	20b0      	movs	r0, #176	; 0xb0
 80085aa:	f006 ffc7 	bl	800f53c <GUI_DrawLine>
			break;
 80085ae:	e00a      	b.n	80085c6 <enableNextZoneMode+0x166>
			GUI_SetColor(CUS_LIGHTBLUE);
 80085b0:	4836      	ldr	r0, [pc, #216]	; (800868c <enableNextZoneMode+0x22c>)
 80085b2:	f005 fa75 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(209, 255, 226, 255);
 80085b6:	23ff      	movs	r3, #255	; 0xff
 80085b8:	22e2      	movs	r2, #226	; 0xe2
 80085ba:	21ff      	movs	r1, #255	; 0xff
 80085bc:	20d1      	movs	r0, #209	; 0xd1
 80085be:	f006 ffbd 	bl	800f53c <GUI_DrawLine>
			break;
 80085c2:	e000      	b.n	80085c6 <enableNextZoneMode+0x166>
			break;
 80085c4:	bf00      	nop
		break;
 80085c6:	e05d      	b.n	8008684 <enableNextZoneMode+0x224>
		switch (zoneState)
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	2b05      	cmp	r3, #5
 80085ce:	d857      	bhi.n	8008680 <enableNextZoneMode+0x220>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <enableNextZoneMode+0x178>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	08008609 	.word	0x08008609
 80085e0:	08008621 	.word	0x08008621
 80085e4:	08008639 	.word	0x08008639
 80085e8:	08008651 	.word	0x08008651
 80085ec:	08008669 	.word	0x08008669
			GUI_SetColor(CUS_LIGHTBLUE);
 80085f0:	4826      	ldr	r0, [pc, #152]	; (800868c <enableNextZoneMode+0x22c>)
 80085f2:	f005 fa55 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(44, 299, 63, 299);
 80085f6:	f240 132b 	movw	r3, #299	; 0x12b
 80085fa:	223f      	movs	r2, #63	; 0x3f
 80085fc:	f240 112b 	movw	r1, #299	; 0x12b
 8008600:	202c      	movs	r0, #44	; 0x2c
 8008602:	f006 ff9b 	bl	800f53c <GUI_DrawLine>
			break;
 8008606:	e03c      	b.n	8008682 <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008608:	4820      	ldr	r0, [pc, #128]	; (800868c <enableNextZoneMode+0x22c>)
 800860a:	f005 fa49 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(77, 299, 96, 299);
 800860e:	f240 132b 	movw	r3, #299	; 0x12b
 8008612:	2260      	movs	r2, #96	; 0x60
 8008614:	f240 112b 	movw	r1, #299	; 0x12b
 8008618:	204d      	movs	r0, #77	; 0x4d
 800861a:	f006 ff8f 	bl	800f53c <GUI_DrawLine>
			break;
 800861e:	e030      	b.n	8008682 <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008620:	481a      	ldr	r0, [pc, #104]	; (800868c <enableNextZoneMode+0x22c>)
 8008622:	f005 fa3d 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(110, 299, 127, 299);
 8008626:	f240 132b 	movw	r3, #299	; 0x12b
 800862a:	227f      	movs	r2, #127	; 0x7f
 800862c:	f240 112b 	movw	r1, #299	; 0x12b
 8008630:	206e      	movs	r0, #110	; 0x6e
 8008632:	f006 ff83 	bl	800f53c <GUI_DrawLine>
			break;
 8008636:	e024      	b.n	8008682 <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008638:	4814      	ldr	r0, [pc, #80]	; (800868c <enableNextZoneMode+0x22c>)
 800863a:	f005 fa31 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(143, 299, 160, 299);
 800863e:	f240 132b 	movw	r3, #299	; 0x12b
 8008642:	22a0      	movs	r2, #160	; 0xa0
 8008644:	f240 112b 	movw	r1, #299	; 0x12b
 8008648:	208f      	movs	r0, #143	; 0x8f
 800864a:	f006 ff77 	bl	800f53c <GUI_DrawLine>
			break;
 800864e:	e018      	b.n	8008682 <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008650:	480e      	ldr	r0, [pc, #56]	; (800868c <enableNextZoneMode+0x22c>)
 8008652:	f005 fa25 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(176, 299, 193, 299);
 8008656:	f240 132b 	movw	r3, #299	; 0x12b
 800865a:	22c1      	movs	r2, #193	; 0xc1
 800865c:	f240 112b 	movw	r1, #299	; 0x12b
 8008660:	20b0      	movs	r0, #176	; 0xb0
 8008662:	f006 ff6b 	bl	800f53c <GUI_DrawLine>
			break;
 8008666:	e00c      	b.n	8008682 <enableNextZoneMode+0x222>
			GUI_SetColor(CUS_LIGHTBLUE);
 8008668:	4808      	ldr	r0, [pc, #32]	; (800868c <enableNextZoneMode+0x22c>)
 800866a:	f005 fa19 	bl	800daa0 <GUI_SetColor>
			GUI_DrawLine(209, 299, 226, 299);
 800866e:	f240 132b 	movw	r3, #299	; 0x12b
 8008672:	22e2      	movs	r2, #226	; 0xe2
 8008674:	f240 112b 	movw	r1, #299	; 0x12b
 8008678:	20d1      	movs	r0, #209	; 0xd1
 800867a:	f006 ff5f 	bl	800f53c <GUI_DrawLine>
			break;
 800867e:	e000      	b.n	8008682 <enableNextZoneMode+0x222>
			break;
 8008680:	bf00      	nop
		break;
 8008682:	bf00      	nop
	}
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	00ffd218 	.word	0x00ffd218

08008690 <setZoneMode>:

static void setZoneMode(ui_mode_t mode)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
	ui_state_t state;
	switch (mode)
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	3b01      	subs	r3, #1
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d862      	bhi.n	8008768 <setZoneMode+0xd8>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <setZoneMode+0x18>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086b9 	.word	0x080086b9
 80086ac:	080086e3 	.word	0x080086e3
 80086b0:	0800870d 	.word	0x0800870d
 80086b4:	08008737 	.word	0x08008737
	{
	case ALL_DIM:
		enableNextZoneMode(L_FIVE, ZONE_TOP);
 80086b8:	2100      	movs	r1, #0
 80086ba:	2005      	movs	r0, #5
 80086bc:	f7ff fed0 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_FIVE, ZONE_MID);
 80086c0:	2101      	movs	r1, #1
 80086c2:	2005      	movs	r0, #5
 80086c4:	f7ff fecc 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_FIVE, ZONE_BOT);
 80086c8:	2102      	movs	r1, #2
 80086ca:	2005      	movs	r0, #5
 80086cc:	f7ff fec8 	bl	8008460 <enableNextZoneMode>
		state.mode = ALL_DIM;
 80086d0:	2301      	movs	r3, #1
 80086d2:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_FIVE;
 80086d4:	2305      	movs	r3, #5
 80086d6:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_FIVE;
 80086d8:	2305      	movs	r3, #5
 80086da:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_FIVE;
 80086dc:	2305      	movs	r3, #5
 80086de:	73fb      	strb	r3, [r7, #15]
		break;
 80086e0:	e03e      	b.n	8008760 <setZoneMode+0xd0>
	case ALL_CLEAR:
		enableNextZoneMode(L_ONE, ZONE_TOP);
 80086e2:	2100      	movs	r1, #0
 80086e4:	2001      	movs	r0, #1
 80086e6:	f7ff febb 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_ONE, ZONE_MID);
 80086ea:	2101      	movs	r1, #1
 80086ec:	2001      	movs	r0, #1
 80086ee:	f7ff feb7 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_ONE, ZONE_BOT);
 80086f2:	2102      	movs	r1, #2
 80086f4:	2001      	movs	r0, #1
 80086f6:	f7ff feb3 	bl	8008460 <enableNextZoneMode>
		state.mode = ALL_CLEAR;
 80086fa:	2302      	movs	r3, #2
 80086fc:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_ONE;
 80086fe:	2301      	movs	r3, #1
 8008700:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_ONE;
 8008702:	2301      	movs	r3, #1
 8008704:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_ONE;
 8008706:	2301      	movs	r3, #1
 8008708:	73fb      	strb	r3, [r7, #15]
		break;
 800870a:	e029      	b.n	8008760 <setZoneMode+0xd0>
	case PRESENTATION:
		enableNextZoneMode(L_THREE, ZONE_TOP);
 800870c:	2100      	movs	r1, #0
 800870e:	2003      	movs	r0, #3
 8008710:	f7ff fea6 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_TWO, ZONE_MID);
 8008714:	2101      	movs	r1, #1
 8008716:	2002      	movs	r0, #2
 8008718:	f7ff fea2 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_FIVE, ZONE_BOT);
 800871c:	2102      	movs	r1, #2
 800871e:	2005      	movs	r0, #5
 8008720:	f7ff fe9e 	bl	8008460 <enableNextZoneMode>
		state.mode = PRESENTATION;
 8008724:	2303      	movs	r3, #3
 8008726:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_THREE;
 8008728:	2303      	movs	r3, #3
 800872a:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_TWO;
 800872c:	2302      	movs	r3, #2
 800872e:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_FIVE;
 8008730:	2305      	movs	r3, #5
 8008732:	73fb      	strb	r3, [r7, #15]
		break;
 8008734:	e014      	b.n	8008760 <setZoneMode+0xd0>
	case ALL_AUTO:
		enableNextZoneMode(L_AUTO, ZONE_TOP);
 8008736:	2100      	movs	r1, #0
 8008738:	2006      	movs	r0, #6
 800873a:	f7ff fe91 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_AUTO, ZONE_MID);
 800873e:	2101      	movs	r1, #1
 8008740:	2006      	movs	r0, #6
 8008742:	f7ff fe8d 	bl	8008460 <enableNextZoneMode>
		enableNextZoneMode(L_AUTO, ZONE_BOT);
 8008746:	2102      	movs	r1, #2
 8008748:	2006      	movs	r0, #6
 800874a:	f7ff fe89 	bl	8008460 <enableNextZoneMode>
		state.mode = ALL_AUTO;
 800874e:	2304      	movs	r3, #4
 8008750:	733b      	strb	r3, [r7, #12]
		state.state[0] = L_AUTO;
 8008752:	2306      	movs	r3, #6
 8008754:	737b      	strb	r3, [r7, #13]
		state.state[1] = L_AUTO;
 8008756:	2306      	movs	r3, #6
 8008758:	73bb      	strb	r3, [r7, #14]
		state.state[2] = L_AUTO;
 800875a:	2306      	movs	r3, #6
 800875c:	73fb      	strb	r3, [r7, #15]
		break;
 800875e:	bf00      	nop
	default:
		return;
	}
	UI_SetState(state);
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7fe fdb7 	bl	80072d4 <UI_SetState>
 8008766:	e000      	b.n	800876a <setZoneMode+0xda>
		return;
 8008768:	bf00      	nop
}
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <UI_ChangeMode>:

void UI_ChangeMode(ui_mode_t mode)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	71fb      	strb	r3, [r7, #7]
	ui_state_t prevState;
	UI_GetState(&prevState);
 800877a:	f107 030c 	add.w	r3, r7, #12
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fdc0 	bl	8007304 <UI_GetState>
	if (prevState.mode)
 8008784:	7b3b      	ldrb	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01b      	beq.n	80087c2 <UI_ChangeMode+0x52>
	{
		disablePrevZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 800878a:	7b7b      	ldrb	r3, [r7, #13]
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff f962 	bl	8007a58 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_MID], ZONE_MID);
 8008794:	7bbb      	ldrb	r3, [r7, #14]
 8008796:	2101      	movs	r1, #1
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff f95d 	bl	8007a58 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	2102      	movs	r1, #2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f958 	bl	8007a58 <disablePrevZoneState>
		disablePrevMode(prevState.mode);
 80087a8:	7b3b      	ldrb	r3, [r7, #12]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe ffde 	bl	800776c <disablePrevMode>
		enableNextMode(mode);
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff f894 	bl	80078e0 <enableNextMode>
		setZoneMode(mode);
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff ff68 	bl	8008690 <setZoneMode>
		disablePrevZoneState(prevState.state[ZONE_MID], ZONE_MID);
		disablePrevZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
		enableNextMode(mode);
		setZoneMode(mode);
	}
}
 80087c0:	e016      	b.n	80087f0 <UI_ChangeMode+0x80>
		disablePrevZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff f946 	bl	8007a58 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_MID], ZONE_MID);
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2101      	movs	r1, #1
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff f941 	bl	8007a58 <disablePrevZoneState>
		disablePrevZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2102      	movs	r1, #2
 80087da:	4618      	mov	r0, r3
 80087dc:	f7ff f93c 	bl	8007a58 <disablePrevZoneState>
		enableNextMode(mode);
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff f87c 	bl	80078e0 <enableNextMode>
		setZoneMode(mode);
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7ff ff50 	bl	8008690 <setZoneMode>
}
 80087f0:	bf00      	nop
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <UI_ChangeZoneState>:

void UI_ChangeZoneState(ui_zone_state_t state, uint8_t numOfZone)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	460a      	mov	r2, r1
 8008802:	71fb      	strb	r3, [r7, #7]
 8008804:	4613      	mov	r3, r2
 8008806:	71bb      	strb	r3, [r7, #6]
	ui_state_t prevState, nextState;
	UI_GetState(&prevState);
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fd79 	bl	8007304 <UI_GetState>
	nextState = prevState;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	60bb      	str	r3, [r7, #8]

	if (prevState.mode)
 8008816:	7b3b      	ldrb	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d044      	beq.n	80088a6 <UI_ChangeZoneState+0xae>
	{
		disablePrevMode(prevState.mode);
 800881c:	7b3b      	ldrb	r3, [r7, #12]
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe ffa4 	bl	800776c <disablePrevMode>
		disablePrevZoneState(prevState.state[numOfZone], numOfZone);
 8008824:	79bb      	ldrb	r3, [r7, #6]
 8008826:	f107 0210 	add.w	r2, r7, #16
 800882a:	4413      	add	r3, r2
 800882c:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 8008830:	79ba      	ldrb	r2, [r7, #6]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff f90f 	bl	8007a58 <disablePrevZoneState>
		if (numOfZone == ZONE_TOP)
 800883a:	79bb      	ldrb	r3, [r7, #6]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10e      	bne.n	800885e <UI_ChangeZoneState+0x66>
		{
			enableNextZoneState(prevState.state[ZONE_MID], ZONE_MID);
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	2101      	movs	r1, #1
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff fba5 	bl	8007f94 <enableNextZoneState>
			enableNextZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2102      	movs	r1, #2
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fba0 	bl	8007f94 <enableNextZoneState>
			nextState.state[ZONE_MID] = prevState.state[ZONE_MID];
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	72bb      	strb	r3, [r7, #10]
			nextState.state[ZONE_BOT] = prevState.state[ZONE_BOT];
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	72fb      	strb	r3, [r7, #11]
 800885c:	e02e      	b.n	80088bc <UI_ChangeZoneState+0xc4>
		}
		else if (numOfZone == ZONE_MID)
 800885e:	79bb      	ldrb	r3, [r7, #6]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d10e      	bne.n	8008882 <UI_ChangeZoneState+0x8a>
		{
			enableNextZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 8008864:	7b7b      	ldrb	r3, [r7, #13]
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fb93 	bl	8007f94 <enableNextZoneState>
			enableNextZoneState(prevState.state[ZONE_BOT], ZONE_BOT);
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2102      	movs	r1, #2
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fb8e 	bl	8007f94 <enableNextZoneState>
			nextState.state[ZONE_TOP] = prevState.state[ZONE_TOP];
 8008878:	7b7b      	ldrb	r3, [r7, #13]
 800887a:	727b      	strb	r3, [r7, #9]
			nextState.state[ZONE_BOT] = prevState.state[ZONE_BOT];
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	72fb      	strb	r3, [r7, #11]
 8008880:	e01c      	b.n	80088bc <UI_ChangeZoneState+0xc4>
		}
		else if (numOfZone == ZONE_BOT)
 8008882:	79bb      	ldrb	r3, [r7, #6]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d119      	bne.n	80088bc <UI_ChangeZoneState+0xc4>
		{
			enableNextZoneState(prevState.state[ZONE_MID], ZONE_MID);
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	2101      	movs	r1, #1
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fb81 	bl	8007f94 <enableNextZoneState>
			enableNextZoneState(prevState.state[ZONE_TOP], ZONE_TOP);
 8008892:	7b7b      	ldrb	r3, [r7, #13]
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fb7c 	bl	8007f94 <enableNextZoneState>
			nextState.state[ZONE_MID] = prevState.state[ZONE_MID];
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	72bb      	strb	r3, [r7, #10]
			nextState.state[ZONE_TOP] = prevState.state[ZONE_TOP];
 80088a0:	7b7b      	ldrb	r3, [r7, #13]
 80088a2:	727b      	strb	r3, [r7, #9]
 80088a4:	e00a      	b.n	80088bc <UI_ChangeZoneState+0xc4>
		}
	}
	else
	{
		disablePrevZoneState(prevState.state[numOfZone], numOfZone);
 80088a6:	79bb      	ldrb	r3, [r7, #6]
 80088a8:	f107 0210 	add.w	r2, r7, #16
 80088ac:	4413      	add	r3, r2
 80088ae:	f813 3c03 	ldrb.w	r3, [r3, #-3]
 80088b2:	79ba      	ldrb	r2, [r7, #6]
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff f8ce 	bl	8007a58 <disablePrevZoneState>
	}
	enableNextZoneState(state, numOfZone);
 80088bc:	79ba      	ldrb	r2, [r7, #6]
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fb66 	bl	8007f94 <enableNextZoneState>
	nextState.state[numOfZone] = state;
 80088c8:	79bb      	ldrb	r3, [r7, #6]
 80088ca:	f107 0210 	add.w	r2, r7, #16
 80088ce:	4413      	add	r3, r2
 80088d0:	79fa      	ldrb	r2, [r7, #7]
 80088d2:	f803 2c07 	strb.w	r2, [r3, #-7]
	UI_SetState(nextState);
 80088d6:	68b8      	ldr	r0, [r7, #8]
 80088d8:	f7fe fcfc 	bl	80072d4 <UI_SetState>
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <graphicsMain>:

void graphicsMain(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
	GUI_SetBkColor(GUI_TRANSPARENT);
 80088ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80088ee:	f005 f8d5 	bl	800da9c <GUI_SetBkColor>
	GUI_SelectLayer(1);
 80088f2:	2001      	movs	r0, #1
 80088f4:	f005 ffb8 	bl	800e868 <GUI_SelectLayer>
	GUI_Clear();
 80088f8:	f007 f858 	bl	800f9ac <GUI_Clear>
	GUI_SetBkColor(GUI_TRANSPARENT);
 80088fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008900:	f005 f8cc 	bl	800da9c <GUI_SetBkColor>
	GUI_SelectLayer(0);
 8008904:	2000      	movs	r0, #0
 8008906:	f005 ffaf 	bl	800e868 <GUI_SelectLayer>
	tp_state_t tpState;
	ui_state_t uiState;
	UI_SetDefault();
 800890a:	f7fe fccd 	bl	80072a8 <UI_SetDefault>
	UI_GetState(&uiState);
 800890e:	1d3b      	adds	r3, r7, #4
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fcf7 	bl	8007304 <UI_GetState>
	drawAllNotActive();
 8008916:	f7fe fd11 	bl	800733c <drawAllNotActive>

	UI_ChangeMode(uiState.mode);
 800891a:	793b      	ldrb	r3, [r7, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff ff27 	bl	8008770 <UI_ChangeMode>
	UI_ChangeZoneState(uiState.state[ZONE_TOP], ZONE_TOP);
 8008922:	797b      	ldrb	r3, [r7, #5]
 8008924:	2100      	movs	r1, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff ff66 	bl	80087f8 <UI_ChangeZoneState>
	UI_ChangeZoneState(uiState.state[ZONE_MID], ZONE_MID);
 800892c:	79bb      	ldrb	r3, [r7, #6]
 800892e:	2101      	movs	r1, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff ff61 	bl	80087f8 <UI_ChangeZoneState>
	UI_ChangeZoneState(uiState.state[ZONE_BOT], ZONE_BOT);
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2102      	movs	r1, #2
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ff5c 	bl	80087f8 <UI_ChangeZoneState>

	while (1)
	{

		TP_GetState(&tpState);
 8008940:	f107 0308 	add.w	r3, r7, #8
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fdb9 	bl	800a4bc <TP_GetState>
		if (tpState.touchDetected)
 800894a:	7a3b      	ldrb	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0f7      	beq.n	8008940 <graphicsMain+0x5c>
		{
			if (tpState.x > 5 && tpState.x < 235 && tpState.y > 5 && tpState.y < 40)
 8008950:	897b      	ldrh	r3, [r7, #10]
 8008952:	2b05      	cmp	r3, #5
 8008954:	d90c      	bls.n	8008970 <graphicsMain+0x8c>
 8008956:	897b      	ldrh	r3, [r7, #10]
 8008958:	2bea      	cmp	r3, #234	; 0xea
 800895a:	d809      	bhi.n	8008970 <graphicsMain+0x8c>
 800895c:	89bb      	ldrh	r3, [r7, #12]
 800895e:	2b05      	cmp	r3, #5
 8008960:	d906      	bls.n	8008970 <graphicsMain+0x8c>
 8008962:	89bb      	ldrh	r3, [r7, #12]
 8008964:	2b27      	cmp	r3, #39	; 0x27
 8008966:	d803      	bhi.n	8008970 <graphicsMain+0x8c>
			{
				UI_ChangeMode(ALL_DIM);
 8008968:	2001      	movs	r0, #1
 800896a:	f7ff ff01 	bl	8008770 <UI_ChangeMode>
 800896e:	e172      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 5 && tpState.x < 235 && tpState.y > 49 && tpState.y < 91)
 8008970:	897b      	ldrh	r3, [r7, #10]
 8008972:	2b05      	cmp	r3, #5
 8008974:	d90c      	bls.n	8008990 <graphicsMain+0xac>
 8008976:	897b      	ldrh	r3, [r7, #10]
 8008978:	2bea      	cmp	r3, #234	; 0xea
 800897a:	d809      	bhi.n	8008990 <graphicsMain+0xac>
 800897c:	89bb      	ldrh	r3, [r7, #12]
 800897e:	2b31      	cmp	r3, #49	; 0x31
 8008980:	d906      	bls.n	8008990 <graphicsMain+0xac>
 8008982:	89bb      	ldrh	r3, [r7, #12]
 8008984:	2b5a      	cmp	r3, #90	; 0x5a
 8008986:	d803      	bhi.n	8008990 <graphicsMain+0xac>
			{
				UI_ChangeMode(ALL_CLEAR);
 8008988:	2002      	movs	r0, #2
 800898a:	f7ff fef1 	bl	8008770 <UI_ChangeMode>
 800898e:	e162      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 5 && tpState.x < 235 && tpState.y > 93 && tpState.y < 135)
 8008990:	897b      	ldrh	r3, [r7, #10]
 8008992:	2b05      	cmp	r3, #5
 8008994:	d90c      	bls.n	80089b0 <graphicsMain+0xcc>
 8008996:	897b      	ldrh	r3, [r7, #10]
 8008998:	2bea      	cmp	r3, #234	; 0xea
 800899a:	d809      	bhi.n	80089b0 <graphicsMain+0xcc>
 800899c:	89bb      	ldrh	r3, [r7, #12]
 800899e:	2b5d      	cmp	r3, #93	; 0x5d
 80089a0:	d906      	bls.n	80089b0 <graphicsMain+0xcc>
 80089a2:	89bb      	ldrh	r3, [r7, #12]
 80089a4:	2b86      	cmp	r3, #134	; 0x86
 80089a6:	d803      	bhi.n	80089b0 <graphicsMain+0xcc>
			{
				UI_ChangeMode(PRESENTATION);
 80089a8:	2003      	movs	r0, #3
 80089aa:	f7ff fee1 	bl	8008770 <UI_ChangeMode>
 80089ae:	e152      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 5 && tpState.x < 235 && tpState.y > 137 && tpState.y < 179)
 80089b0:	897b      	ldrh	r3, [r7, #10]
 80089b2:	2b05      	cmp	r3, #5
 80089b4:	d90c      	bls.n	80089d0 <graphicsMain+0xec>
 80089b6:	897b      	ldrh	r3, [r7, #10]
 80089b8:	2bea      	cmp	r3, #234	; 0xea
 80089ba:	d809      	bhi.n	80089d0 <graphicsMain+0xec>
 80089bc:	89bb      	ldrh	r3, [r7, #12]
 80089be:	2b89      	cmp	r3, #137	; 0x89
 80089c0:	d906      	bls.n	80089d0 <graphicsMain+0xec>
 80089c2:	89bb      	ldrh	r3, [r7, #12]
 80089c4:	2bb2      	cmp	r3, #178	; 0xb2
 80089c6:	d803      	bhi.n	80089d0 <graphicsMain+0xec>
			{
				UI_ChangeMode(ALL_AUTO);
 80089c8:	2004      	movs	r0, #4
 80089ca:	f7ff fed1 	bl	8008770 <UI_ChangeMode>
 80089ce:	e142      	b.n	8008c56 <graphicsMain+0x372>
			}


			else if (tpState.x > 33 && tpState.x < 66 && tpState.y > 181 && tpState.y < 223)
 80089d0:	897b      	ldrh	r3, [r7, #10]
 80089d2:	2b21      	cmp	r3, #33	; 0x21
 80089d4:	d90d      	bls.n	80089f2 <graphicsMain+0x10e>
 80089d6:	897b      	ldrh	r3, [r7, #10]
 80089d8:	2b41      	cmp	r3, #65	; 0x41
 80089da:	d80a      	bhi.n	80089f2 <graphicsMain+0x10e>
 80089dc:	89bb      	ldrh	r3, [r7, #12]
 80089de:	2bb5      	cmp	r3, #181	; 0xb5
 80089e0:	d907      	bls.n	80089f2 <graphicsMain+0x10e>
 80089e2:	89bb      	ldrh	r3, [r7, #12]
 80089e4:	2bde      	cmp	r3, #222	; 0xde
 80089e6:	d804      	bhi.n	80089f2 <graphicsMain+0x10e>
			{
				UI_ChangeZoneState(L_ONE, ZONE_TOP);
 80089e8:	2100      	movs	r1, #0
 80089ea:	2001      	movs	r0, #1
 80089ec:	f7ff ff04 	bl	80087f8 <UI_ChangeZoneState>
 80089f0:	e131      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 75 && tpState.x < 100 && tpState.y > 181 && tpState.y < 223)
 80089f2:	897b      	ldrh	r3, [r7, #10]
 80089f4:	2b4b      	cmp	r3, #75	; 0x4b
 80089f6:	d90d      	bls.n	8008a14 <graphicsMain+0x130>
 80089f8:	897b      	ldrh	r3, [r7, #10]
 80089fa:	2b63      	cmp	r3, #99	; 0x63
 80089fc:	d80a      	bhi.n	8008a14 <graphicsMain+0x130>
 80089fe:	89bb      	ldrh	r3, [r7, #12]
 8008a00:	2bb5      	cmp	r3, #181	; 0xb5
 8008a02:	d907      	bls.n	8008a14 <graphicsMain+0x130>
 8008a04:	89bb      	ldrh	r3, [r7, #12]
 8008a06:	2bde      	cmp	r3, #222	; 0xde
 8008a08:	d804      	bhi.n	8008a14 <graphicsMain+0x130>
			{
				UI_ChangeZoneState(L_TWO, ZONE_TOP);
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	2002      	movs	r0, #2
 8008a0e:	f7ff fef3 	bl	80087f8 <UI_ChangeZoneState>
 8008a12:	e120      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 108 && tpState.x < 133 && tpState.y > 181 && tpState.y < 223)
 8008a14:	897b      	ldrh	r3, [r7, #10]
 8008a16:	2b6c      	cmp	r3, #108	; 0x6c
 8008a18:	d90d      	bls.n	8008a36 <graphicsMain+0x152>
 8008a1a:	897b      	ldrh	r3, [r7, #10]
 8008a1c:	2b84      	cmp	r3, #132	; 0x84
 8008a1e:	d80a      	bhi.n	8008a36 <graphicsMain+0x152>
 8008a20:	89bb      	ldrh	r3, [r7, #12]
 8008a22:	2bb5      	cmp	r3, #181	; 0xb5
 8008a24:	d907      	bls.n	8008a36 <graphicsMain+0x152>
 8008a26:	89bb      	ldrh	r3, [r7, #12]
 8008a28:	2bde      	cmp	r3, #222	; 0xde
 8008a2a:	d804      	bhi.n	8008a36 <graphicsMain+0x152>
			{
				UI_ChangeZoneState(L_THREE, ZONE_TOP);
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	2003      	movs	r0, #3
 8008a30:	f7ff fee2 	bl	80087f8 <UI_ChangeZoneState>
 8008a34:	e10f      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 140 && tpState.x < 173 && tpState.y > 181 && tpState.y < 223)
 8008a36:	897b      	ldrh	r3, [r7, #10]
 8008a38:	2b8c      	cmp	r3, #140	; 0x8c
 8008a3a:	d90d      	bls.n	8008a58 <graphicsMain+0x174>
 8008a3c:	897b      	ldrh	r3, [r7, #10]
 8008a3e:	2bac      	cmp	r3, #172	; 0xac
 8008a40:	d80a      	bhi.n	8008a58 <graphicsMain+0x174>
 8008a42:	89bb      	ldrh	r3, [r7, #12]
 8008a44:	2bb5      	cmp	r3, #181	; 0xb5
 8008a46:	d907      	bls.n	8008a58 <graphicsMain+0x174>
 8008a48:	89bb      	ldrh	r3, [r7, #12]
 8008a4a:	2bde      	cmp	r3, #222	; 0xde
 8008a4c:	d804      	bhi.n	8008a58 <graphicsMain+0x174>
			{
				UI_ChangeZoneState(L_FOUR, ZONE_TOP);
 8008a4e:	2100      	movs	r1, #0
 8008a50:	2004      	movs	r0, #4
 8008a52:	f7ff fed1 	bl	80087f8 <UI_ChangeZoneState>
 8008a56:	e0fe      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 177 && tpState.x < 205 && tpState.y > 181 && tpState.y < 223)
 8008a58:	897b      	ldrh	r3, [r7, #10]
 8008a5a:	2bb1      	cmp	r3, #177	; 0xb1
 8008a5c:	d90d      	bls.n	8008a7a <graphicsMain+0x196>
 8008a5e:	897b      	ldrh	r3, [r7, #10]
 8008a60:	2bcc      	cmp	r3, #204	; 0xcc
 8008a62:	d80a      	bhi.n	8008a7a <graphicsMain+0x196>
 8008a64:	89bb      	ldrh	r3, [r7, #12]
 8008a66:	2bb5      	cmp	r3, #181	; 0xb5
 8008a68:	d907      	bls.n	8008a7a <graphicsMain+0x196>
 8008a6a:	89bb      	ldrh	r3, [r7, #12]
 8008a6c:	2bde      	cmp	r3, #222	; 0xde
 8008a6e:	d804      	bhi.n	8008a7a <graphicsMain+0x196>
			{
				UI_ChangeZoneState(L_FIVE, ZONE_TOP);
 8008a70:	2100      	movs	r1, #0
 8008a72:	2005      	movs	r0, #5
 8008a74:	f7ff fec0 	bl	80087f8 <UI_ChangeZoneState>
 8008a78:	e0ed      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 210 && tpState.x < 235 && tpState.y > 181 && tpState.y < 223)
 8008a7a:	897b      	ldrh	r3, [r7, #10]
 8008a7c:	2bd2      	cmp	r3, #210	; 0xd2
 8008a7e:	d90d      	bls.n	8008a9c <graphicsMain+0x1b8>
 8008a80:	897b      	ldrh	r3, [r7, #10]
 8008a82:	2bea      	cmp	r3, #234	; 0xea
 8008a84:	d80a      	bhi.n	8008a9c <graphicsMain+0x1b8>
 8008a86:	89bb      	ldrh	r3, [r7, #12]
 8008a88:	2bb5      	cmp	r3, #181	; 0xb5
 8008a8a:	d907      	bls.n	8008a9c <graphicsMain+0x1b8>
 8008a8c:	89bb      	ldrh	r3, [r7, #12]
 8008a8e:	2bde      	cmp	r3, #222	; 0xde
 8008a90:	d804      	bhi.n	8008a9c <graphicsMain+0x1b8>
			{
				UI_ChangeZoneState(L_AUTO, ZONE_TOP);
 8008a92:	2100      	movs	r1, #0
 8008a94:	2006      	movs	r0, #6
 8008a96:	f7ff feaf 	bl	80087f8 <UI_ChangeZoneState>
 8008a9a:	e0dc      	b.n	8008c56 <graphicsMain+0x372>
			}


			else if (tpState.x > 33 && tpState.x < 66 && tpState.y > 225 && tpState.y < 267)
 8008a9c:	897b      	ldrh	r3, [r7, #10]
 8008a9e:	2b21      	cmp	r3, #33	; 0x21
 8008aa0:	d90e      	bls.n	8008ac0 <graphicsMain+0x1dc>
 8008aa2:	897b      	ldrh	r3, [r7, #10]
 8008aa4:	2b41      	cmp	r3, #65	; 0x41
 8008aa6:	d80b      	bhi.n	8008ac0 <graphicsMain+0x1dc>
 8008aa8:	89bb      	ldrh	r3, [r7, #12]
 8008aaa:	2be1      	cmp	r3, #225	; 0xe1
 8008aac:	d908      	bls.n	8008ac0 <graphicsMain+0x1dc>
 8008aae:	89bb      	ldrh	r3, [r7, #12]
 8008ab0:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008ab4:	d804      	bhi.n	8008ac0 <graphicsMain+0x1dc>
			{
				UI_ChangeZoneState(L_ONE, ZONE_MID);
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f7ff fe9d 	bl	80087f8 <UI_ChangeZoneState>
 8008abe:	e0ca      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 75 && tpState.x < 100 && tpState.y > 225 && tpState.y < 267)
 8008ac0:	897b      	ldrh	r3, [r7, #10]
 8008ac2:	2b4b      	cmp	r3, #75	; 0x4b
 8008ac4:	d90e      	bls.n	8008ae4 <graphicsMain+0x200>
 8008ac6:	897b      	ldrh	r3, [r7, #10]
 8008ac8:	2b63      	cmp	r3, #99	; 0x63
 8008aca:	d80b      	bhi.n	8008ae4 <graphicsMain+0x200>
 8008acc:	89bb      	ldrh	r3, [r7, #12]
 8008ace:	2be1      	cmp	r3, #225	; 0xe1
 8008ad0:	d908      	bls.n	8008ae4 <graphicsMain+0x200>
 8008ad2:	89bb      	ldrh	r3, [r7, #12]
 8008ad4:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008ad8:	d804      	bhi.n	8008ae4 <graphicsMain+0x200>
			{
				UI_ChangeZoneState(L_TWO, ZONE_MID);
 8008ada:	2101      	movs	r1, #1
 8008adc:	2002      	movs	r0, #2
 8008ade:	f7ff fe8b 	bl	80087f8 <UI_ChangeZoneState>
 8008ae2:	e0b8      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 108 && tpState.x < 133 && tpState.y > 225 && tpState.y < 267)
 8008ae4:	897b      	ldrh	r3, [r7, #10]
 8008ae6:	2b6c      	cmp	r3, #108	; 0x6c
 8008ae8:	d90e      	bls.n	8008b08 <graphicsMain+0x224>
 8008aea:	897b      	ldrh	r3, [r7, #10]
 8008aec:	2b84      	cmp	r3, #132	; 0x84
 8008aee:	d80b      	bhi.n	8008b08 <graphicsMain+0x224>
 8008af0:	89bb      	ldrh	r3, [r7, #12]
 8008af2:	2be1      	cmp	r3, #225	; 0xe1
 8008af4:	d908      	bls.n	8008b08 <graphicsMain+0x224>
 8008af6:	89bb      	ldrh	r3, [r7, #12]
 8008af8:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008afc:	d804      	bhi.n	8008b08 <graphicsMain+0x224>
			{
				UI_ChangeZoneState(L_THREE, ZONE_MID);
 8008afe:	2101      	movs	r1, #1
 8008b00:	2003      	movs	r0, #3
 8008b02:	f7ff fe79 	bl	80087f8 <UI_ChangeZoneState>
 8008b06:	e0a6      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 140 && tpState.x < 173 && tpState.y > 225 && tpState.y < 267)
 8008b08:	897b      	ldrh	r3, [r7, #10]
 8008b0a:	2b8c      	cmp	r3, #140	; 0x8c
 8008b0c:	d90e      	bls.n	8008b2c <graphicsMain+0x248>
 8008b0e:	897b      	ldrh	r3, [r7, #10]
 8008b10:	2bac      	cmp	r3, #172	; 0xac
 8008b12:	d80b      	bhi.n	8008b2c <graphicsMain+0x248>
 8008b14:	89bb      	ldrh	r3, [r7, #12]
 8008b16:	2be1      	cmp	r3, #225	; 0xe1
 8008b18:	d908      	bls.n	8008b2c <graphicsMain+0x248>
 8008b1a:	89bb      	ldrh	r3, [r7, #12]
 8008b1c:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008b20:	d804      	bhi.n	8008b2c <graphicsMain+0x248>
			{
				UI_ChangeZoneState(L_FOUR, ZONE_MID);
 8008b22:	2101      	movs	r1, #1
 8008b24:	2004      	movs	r0, #4
 8008b26:	f7ff fe67 	bl	80087f8 <UI_ChangeZoneState>
 8008b2a:	e094      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 177 && tpState.x < 205 && tpState.y > 225 && tpState.y < 267)
 8008b2c:	897b      	ldrh	r3, [r7, #10]
 8008b2e:	2bb1      	cmp	r3, #177	; 0xb1
 8008b30:	d90e      	bls.n	8008b50 <graphicsMain+0x26c>
 8008b32:	897b      	ldrh	r3, [r7, #10]
 8008b34:	2bcc      	cmp	r3, #204	; 0xcc
 8008b36:	d80b      	bhi.n	8008b50 <graphicsMain+0x26c>
 8008b38:	89bb      	ldrh	r3, [r7, #12]
 8008b3a:	2be1      	cmp	r3, #225	; 0xe1
 8008b3c:	d908      	bls.n	8008b50 <graphicsMain+0x26c>
 8008b3e:	89bb      	ldrh	r3, [r7, #12]
 8008b40:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008b44:	d804      	bhi.n	8008b50 <graphicsMain+0x26c>
			{
				UI_ChangeZoneState(L_FIVE, ZONE_MID);
 8008b46:	2101      	movs	r1, #1
 8008b48:	2005      	movs	r0, #5
 8008b4a:	f7ff fe55 	bl	80087f8 <UI_ChangeZoneState>
 8008b4e:	e082      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 210 && tpState.x < 235 && tpState.y > 225 && tpState.y < 267)
 8008b50:	897b      	ldrh	r3, [r7, #10]
 8008b52:	2bd2      	cmp	r3, #210	; 0xd2
 8008b54:	d90e      	bls.n	8008b74 <graphicsMain+0x290>
 8008b56:	897b      	ldrh	r3, [r7, #10]
 8008b58:	2bea      	cmp	r3, #234	; 0xea
 8008b5a:	d80b      	bhi.n	8008b74 <graphicsMain+0x290>
 8008b5c:	89bb      	ldrh	r3, [r7, #12]
 8008b5e:	2be1      	cmp	r3, #225	; 0xe1
 8008b60:	d908      	bls.n	8008b74 <graphicsMain+0x290>
 8008b62:	89bb      	ldrh	r3, [r7, #12]
 8008b64:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008b68:	d804      	bhi.n	8008b74 <graphicsMain+0x290>
			{
				UI_ChangeZoneState(L_AUTO, ZONE_MID);
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	2006      	movs	r0, #6
 8008b6e:	f7ff fe43 	bl	80087f8 <UI_ChangeZoneState>
 8008b72:	e070      	b.n	8008c56 <graphicsMain+0x372>
			}


			else if (tpState.x > 33 && tpState.x < 66 && tpState.y > 269 && tpState.y < 311)
 8008b74:	897b      	ldrh	r3, [r7, #10]
 8008b76:	2b21      	cmp	r3, #33	; 0x21
 8008b78:	d90f      	bls.n	8008b9a <graphicsMain+0x2b6>
 8008b7a:	897b      	ldrh	r3, [r7, #10]
 8008b7c:	2b41      	cmp	r3, #65	; 0x41
 8008b7e:	d80c      	bhi.n	8008b9a <graphicsMain+0x2b6>
 8008b80:	89bb      	ldrh	r3, [r7, #12]
 8008b82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008b86:	d308      	bcc.n	8008b9a <graphicsMain+0x2b6>
 8008b88:	89bb      	ldrh	r3, [r7, #12]
 8008b8a:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008b8e:	d804      	bhi.n	8008b9a <graphicsMain+0x2b6>
			{
				UI_ChangeZoneState(L_ONE, ZONE_BOT);
 8008b90:	2102      	movs	r1, #2
 8008b92:	2001      	movs	r0, #1
 8008b94:	f7ff fe30 	bl	80087f8 <UI_ChangeZoneState>
 8008b98:	e05d      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 75 && tpState.x < 100 && tpState.y > 269 && tpState.y < 311)
 8008b9a:	897b      	ldrh	r3, [r7, #10]
 8008b9c:	2b4b      	cmp	r3, #75	; 0x4b
 8008b9e:	d90f      	bls.n	8008bc0 <graphicsMain+0x2dc>
 8008ba0:	897b      	ldrh	r3, [r7, #10]
 8008ba2:	2b63      	cmp	r3, #99	; 0x63
 8008ba4:	d80c      	bhi.n	8008bc0 <graphicsMain+0x2dc>
 8008ba6:	89bb      	ldrh	r3, [r7, #12]
 8008ba8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008bac:	d308      	bcc.n	8008bc0 <graphicsMain+0x2dc>
 8008bae:	89bb      	ldrh	r3, [r7, #12]
 8008bb0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008bb4:	d804      	bhi.n	8008bc0 <graphicsMain+0x2dc>
			{
				UI_ChangeZoneState(L_TWO, ZONE_BOT);
 8008bb6:	2102      	movs	r1, #2
 8008bb8:	2002      	movs	r0, #2
 8008bba:	f7ff fe1d 	bl	80087f8 <UI_ChangeZoneState>
 8008bbe:	e04a      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 108 && tpState.x < 133 && tpState.y > 269 && tpState.y < 311)
 8008bc0:	897b      	ldrh	r3, [r7, #10]
 8008bc2:	2b6c      	cmp	r3, #108	; 0x6c
 8008bc4:	d90f      	bls.n	8008be6 <graphicsMain+0x302>
 8008bc6:	897b      	ldrh	r3, [r7, #10]
 8008bc8:	2b84      	cmp	r3, #132	; 0x84
 8008bca:	d80c      	bhi.n	8008be6 <graphicsMain+0x302>
 8008bcc:	89bb      	ldrh	r3, [r7, #12]
 8008bce:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008bd2:	d308      	bcc.n	8008be6 <graphicsMain+0x302>
 8008bd4:	89bb      	ldrh	r3, [r7, #12]
 8008bd6:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008bda:	d804      	bhi.n	8008be6 <graphicsMain+0x302>
			{
				UI_ChangeZoneState(L_THREE, ZONE_BOT);
 8008bdc:	2102      	movs	r1, #2
 8008bde:	2003      	movs	r0, #3
 8008be0:	f7ff fe0a 	bl	80087f8 <UI_ChangeZoneState>
 8008be4:	e037      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 140 && tpState.x < 173 && tpState.y > 269 && tpState.y < 311)
 8008be6:	897b      	ldrh	r3, [r7, #10]
 8008be8:	2b8c      	cmp	r3, #140	; 0x8c
 8008bea:	d90f      	bls.n	8008c0c <graphicsMain+0x328>
 8008bec:	897b      	ldrh	r3, [r7, #10]
 8008bee:	2bac      	cmp	r3, #172	; 0xac
 8008bf0:	d80c      	bhi.n	8008c0c <graphicsMain+0x328>
 8008bf2:	89bb      	ldrh	r3, [r7, #12]
 8008bf4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008bf8:	d308      	bcc.n	8008c0c <graphicsMain+0x328>
 8008bfa:	89bb      	ldrh	r3, [r7, #12]
 8008bfc:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008c00:	d804      	bhi.n	8008c0c <graphicsMain+0x328>
			{
				UI_ChangeZoneState(L_FOUR, ZONE_BOT);
 8008c02:	2102      	movs	r1, #2
 8008c04:	2004      	movs	r0, #4
 8008c06:	f7ff fdf7 	bl	80087f8 <UI_ChangeZoneState>
 8008c0a:	e024      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 177 && tpState.x < 205 && tpState.y > 269 && tpState.y < 311)
 8008c0c:	897b      	ldrh	r3, [r7, #10]
 8008c0e:	2bb1      	cmp	r3, #177	; 0xb1
 8008c10:	d90f      	bls.n	8008c32 <graphicsMain+0x34e>
 8008c12:	897b      	ldrh	r3, [r7, #10]
 8008c14:	2bcc      	cmp	r3, #204	; 0xcc
 8008c16:	d80c      	bhi.n	8008c32 <graphicsMain+0x34e>
 8008c18:	89bb      	ldrh	r3, [r7, #12]
 8008c1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008c1e:	d308      	bcc.n	8008c32 <graphicsMain+0x34e>
 8008c20:	89bb      	ldrh	r3, [r7, #12]
 8008c22:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008c26:	d804      	bhi.n	8008c32 <graphicsMain+0x34e>
			{
				UI_ChangeZoneState(L_FIVE, ZONE_BOT);
 8008c28:	2102      	movs	r1, #2
 8008c2a:	2005      	movs	r0, #5
 8008c2c:	f7ff fde4 	bl	80087f8 <UI_ChangeZoneState>
 8008c30:	e011      	b.n	8008c56 <graphicsMain+0x372>
			}
			else if (tpState.x > 210 && tpState.x < 235 && tpState.y > 269 && tpState.y < 311)
 8008c32:	897b      	ldrh	r3, [r7, #10]
 8008c34:	2bd2      	cmp	r3, #210	; 0xd2
 8008c36:	d90e      	bls.n	8008c56 <graphicsMain+0x372>
 8008c38:	897b      	ldrh	r3, [r7, #10]
 8008c3a:	2bea      	cmp	r3, #234	; 0xea
 8008c3c:	d80b      	bhi.n	8008c56 <graphicsMain+0x372>
 8008c3e:	89bb      	ldrh	r3, [r7, #12]
 8008c40:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008c44:	d307      	bcc.n	8008c56 <graphicsMain+0x372>
 8008c46:	89bb      	ldrh	r3, [r7, #12]
 8008c48:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8008c4c:	d803      	bhi.n	8008c56 <graphicsMain+0x372>
			{
				UI_ChangeZoneState(L_AUTO, ZONE_BOT);
 8008c4e:	2102      	movs	r1, #2
 8008c50:	2006      	movs	r0, #6
 8008c52:	f7ff fdd1 	bl	80087f8 <UI_ChangeZoneState>
			}
			HAL_Delay(50);
 8008c56:	2032      	movs	r0, #50	; 0x32
 8008c58:	f7f7 fcc4 	bl	80005e4 <HAL_Delay>
		TP_GetState(&tpState);
 8008c5c:	e670      	b.n	8008940 <graphicsMain+0x5c>

08008c5e <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8008c62:	20ca      	movs	r0, #202	; 0xca
 8008c64:	f000 f944 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8008c68:	20c3      	movs	r0, #195	; 0xc3
 8008c6a:	f000 f96b 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x08);
 8008c6e:	2008      	movs	r0, #8
 8008c70:	f000 f968 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x50);
 8008c74:	2050      	movs	r0, #80	; 0x50
 8008c76:	f000 f965 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 8008c7a:	20cf      	movs	r0, #207	; 0xcf
 8008c7c:	f000 f938 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008c80:	2000      	movs	r0, #0
 8008c82:	f000 f95f 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8008c86:	20c1      	movs	r0, #193	; 0xc1
 8008c88:	f000 f95c 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x30);
 8008c8c:	2030      	movs	r0, #48	; 0x30
 8008c8e:	f000 f959 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8008c92:	20ed      	movs	r0, #237	; 0xed
 8008c94:	f000 f92c 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8008c98:	2064      	movs	r0, #100	; 0x64
 8008c9a:	f000 f953 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x03);
 8008c9e:	2003      	movs	r0, #3
 8008ca0:	f000 f950 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x12);
 8008ca4:	2012      	movs	r0, #18
 8008ca6:	f000 f94d 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x81);
 8008caa:	2081      	movs	r0, #129	; 0x81
 8008cac:	f000 f94a 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 8008cb0:	20e8      	movs	r0, #232	; 0xe8
 8008cb2:	f000 f91d 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8008cb6:	2085      	movs	r0, #133	; 0x85
 8008cb8:	f000 f944 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	f000 f941 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x78);
 8008cc2:	2078      	movs	r0, #120	; 0x78
 8008cc4:	f000 f93e 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8008cc8:	20cb      	movs	r0, #203	; 0xcb
 8008cca:	f000 f911 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8008cce:	2039      	movs	r0, #57	; 0x39
 8008cd0:	f000 f938 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8008cd4:	202c      	movs	r0, #44	; 0x2c
 8008cd6:	f000 f935 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f000 f932 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x34);
 8008ce0:	2034      	movs	r0, #52	; 0x34
 8008ce2:	f000 f92f 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x02);
 8008ce6:	2002      	movs	r0, #2
 8008ce8:	f000 f92c 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 8008cec:	20f7      	movs	r0, #247	; 0xf7
 8008cee:	f000 f8ff 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8008cf2:	2020      	movs	r0, #32
 8008cf4:	f000 f926 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8008cf8:	20ea      	movs	r0, #234	; 0xea
 8008cfa:	f000 f8f9 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008cfe:	2000      	movs	r0, #0
 8008d00:	f000 f920 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008d04:	2000      	movs	r0, #0
 8008d06:	f000 f91d 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 8008d0a:	20b1      	movs	r0, #177	; 0xb1
 8008d0c:	f000 f8f0 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008d10:	2000      	movs	r0, #0
 8008d12:	f000 f917 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8008d16:	201b      	movs	r0, #27
 8008d18:	f000 f914 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8008d1c:	20b6      	movs	r0, #182	; 0xb6
 8008d1e:	f000 f8e7 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8008d22:	200a      	movs	r0, #10
 8008d24:	f000 f90e 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0xA2);
 8008d28:	20a2      	movs	r0, #162	; 0xa2
 8008d2a:	f000 f90b 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 8008d2e:	20c0      	movs	r0, #192	; 0xc0
 8008d30:	f000 f8de 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8008d34:	2010      	movs	r0, #16
 8008d36:	f000 f905 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8008d3a:	20c1      	movs	r0, #193	; 0xc1
 8008d3c:	f000 f8d8 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8008d40:	2010      	movs	r0, #16
 8008d42:	f000 f8ff 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8008d46:	20c5      	movs	r0, #197	; 0xc5
 8008d48:	f000 f8d2 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 8008d4c:	2045      	movs	r0, #69	; 0x45
 8008d4e:	f000 f8f9 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x15);
 8008d52:	2015      	movs	r0, #21
 8008d54:	f000 f8f6 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 8008d58:	20c7      	movs	r0, #199	; 0xc7
 8008d5a:	f000 f8c9 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8008d5e:	2090      	movs	r0, #144	; 0x90
 8008d60:	f000 f8f0 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8008d64:	2036      	movs	r0, #54	; 0x36
 8008d66:	f000 f8c3 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8008d6a:	20c8      	movs	r0, #200	; 0xc8
 8008d6c:	f000 f8ea 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8008d70:	20f2      	movs	r0, #242	; 0xf2
 8008d72:	f000 f8bd 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008d76:	2000      	movs	r0, #0
 8008d78:	f000 f8e4 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8008d7c:	20b0      	movs	r0, #176	; 0xb0
 8008d7e:	f000 f8b7 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8008d82:	20c2      	movs	r0, #194	; 0xc2
 8008d84:	f000 f8de 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8008d88:	20b6      	movs	r0, #182	; 0xb6
 8008d8a:	f000 f8b1 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8008d8e:	200a      	movs	r0, #10
 8008d90:	f000 f8d8 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0xA7);
 8008d94:	20a7      	movs	r0, #167	; 0xa7
 8008d96:	f000 f8d5 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x27);
 8008d9a:	2027      	movs	r0, #39	; 0x27
 8008d9c:	f000 f8d2 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x04);
 8008da0:	2004      	movs	r0, #4
 8008da2:	f000 f8cf 	bl	8008f44 <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8008da6:	202a      	movs	r0, #42	; 0x2a
 8008da8:	f000 f8a2 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008dac:	2000      	movs	r0, #0
 8008dae:	f000 f8c9 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008db2:	2000      	movs	r0, #0
 8008db4:	f000 f8c6 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008db8:	2000      	movs	r0, #0
 8008dba:	f000 f8c3 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0xEF);
 8008dbe:	20ef      	movs	r0, #239	; 0xef
 8008dc0:	f000 f8c0 	bl	8008f44 <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8008dc4:	202b      	movs	r0, #43	; 0x2b
 8008dc6:	f000 f893 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f000 f8ba 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	f000 f8b7 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x01);
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	f000 f8b4 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8008ddc:	203f      	movs	r0, #63	; 0x3f
 8008dde:	f000 f8b1 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8008de2:	20f6      	movs	r0, #246	; 0xf6
 8008de4:	f000 f884 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8008de8:	2001      	movs	r0, #1
 8008dea:	f000 f8ab 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008dee:	2000      	movs	r0, #0
 8008df0:	f000 f8a8 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x06);
 8008df4:	2006      	movs	r0, #6
 8008df6:	f000 f8a5 	bl	8008f44 <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8008dfa:	202c      	movs	r0, #44	; 0x2c
 8008dfc:	f000 f878 	bl	8008ef0 <LCD_WriteCommand>
	HAL_Delay(100);
 8008e00:	2064      	movs	r0, #100	; 0x64
 8008e02:	f7f7 fbef 	bl	80005e4 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8008e06:	2026      	movs	r0, #38	; 0x26
 8008e08:	f000 f872 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	f000 f899 	bl	8008f44 <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8008e12:	20e0      	movs	r0, #224	; 0xe0
 8008e14:	f000 f86c 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8008e18:	200f      	movs	r0, #15
 8008e1a:	f000 f893 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x29);
 8008e1e:	2029      	movs	r0, #41	; 0x29
 8008e20:	f000 f890 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x24);
 8008e24:	2024      	movs	r0, #36	; 0x24
 8008e26:	f000 f88d 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8008e2a:	200c      	movs	r0, #12
 8008e2c:	f000 f88a 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8008e30:	200e      	movs	r0, #14
 8008e32:	f000 f887 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x09);
 8008e36:	2009      	movs	r0, #9
 8008e38:	f000 f884 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8008e3c:	204e      	movs	r0, #78	; 0x4e
 8008e3e:	f000 f881 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x78);
 8008e42:	2078      	movs	r0, #120	; 0x78
 8008e44:	f000 f87e 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x3C);
 8008e48:	203c      	movs	r0, #60	; 0x3c
 8008e4a:	f000 f87b 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x09);
 8008e4e:	2009      	movs	r0, #9
 8008e50:	f000 f878 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x13);
 8008e54:	2013      	movs	r0, #19
 8008e56:	f000 f875 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x05);
 8008e5a:	2005      	movs	r0, #5
 8008e5c:	f000 f872 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x17);
 8008e60:	2017      	movs	r0, #23
 8008e62:	f000 f86f 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x11);
 8008e66:	2011      	movs	r0, #17
 8008e68:	f000 f86c 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x00);
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	f000 f869 	bl	8008f44 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8008e72:	20e1      	movs	r0, #225	; 0xe1
 8008e74:	f000 f83c 	bl	8008ef0 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8008e78:	2000      	movs	r0, #0
 8008e7a:	f000 f863 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x16);
 8008e7e:	2016      	movs	r0, #22
 8008e80:	f000 f860 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x1B);
 8008e84:	201b      	movs	r0, #27
 8008e86:	f000 f85d 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x04);
 8008e8a:	2004      	movs	r0, #4
 8008e8c:	f000 f85a 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x11);
 8008e90:	2011      	movs	r0, #17
 8008e92:	f000 f857 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x07);
 8008e96:	2007      	movs	r0, #7
 8008e98:	f000 f854 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x31);
 8008e9c:	2031      	movs	r0, #49	; 0x31
 8008e9e:	f000 f851 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x33);
 8008ea2:	2033      	movs	r0, #51	; 0x33
 8008ea4:	f000 f84e 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x42);
 8008ea8:	2042      	movs	r0, #66	; 0x42
 8008eaa:	f000 f84b 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x05);
 8008eae:	2005      	movs	r0, #5
 8008eb0:	f000 f848 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8008eb4:	200c      	movs	r0, #12
 8008eb6:	f000 f845 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x0A);
 8008eba:	200a      	movs	r0, #10
 8008ebc:	f000 f842 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x28);
 8008ec0:	2028      	movs	r0, #40	; 0x28
 8008ec2:	f000 f83f 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x2F);
 8008ec6:	202f      	movs	r0, #47	; 0x2f
 8008ec8:	f000 f83c 	bl	8008f44 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8008ecc:	200f      	movs	r0, #15
 8008ece:	f000 f839 	bl	8008f44 <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8008ed2:	2011      	movs	r0, #17
 8008ed4:	f000 f80c 	bl	8008ef0 <LCD_WriteCommand>
	HAL_Delay(100);
 8008ed8:	2064      	movs	r0, #100	; 0x64
 8008eda:	f7f7 fb83 	bl	80005e4 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8008ede:	2029      	movs	r0, #41	; 0x29
 8008ee0:	f000 f806 	bl	8008ef0 <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8008ee4:	202c      	movs	r0, #44	; 0x2c
 8008ee6:	f000 f803 	bl	8008ef0 <LCD_WriteCommand>
}
 8008eea:	bf00      	nop
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	733b      	strb	r3, [r7, #12]
 8008efe:	2300      	movs	r3, #0
 8008f00:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8008f02:	2200      	movs	r2, #0
 8008f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f08:	480b      	ldr	r0, [pc, #44]	; (8008f38 <LCD_WriteCommand+0x48>)
 8008f0a:	f7f8 fc4b 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2104      	movs	r1, #4
 8008f12:	480a      	ldr	r0, [pc, #40]	; (8008f3c <LCD_WriteCommand+0x4c>)
 8008f14:	f7f8 fc46 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8008f18:	f107 010c 	add.w	r1, r7, #12
 8008f1c:	2364      	movs	r3, #100	; 0x64
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4807      	ldr	r0, [pc, #28]	; (8008f40 <LCD_WriteCommand+0x50>)
 8008f22:	f7fb f895 	bl	8004050 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8008f26:	2201      	movs	r2, #1
 8008f28:	2104      	movs	r1, #4
 8008f2a:	4804      	ldr	r0, [pc, #16]	; (8008f3c <LCD_WriteCommand+0x4c>)
 8008f2c:	f7f8 fc3a 	bl	80017a4 <HAL_GPIO_WritePin>
}
 8008f30:	bf00      	nop
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	40020c00 	.word	0x40020c00
 8008f3c:	40020800 	.word	0x40020800
 8008f40:	20026ba0 	.word	0x20026ba0

08008f44 <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	733b      	strb	r3, [r7, #12]
 8008f52:	2300      	movs	r3, #0
 8008f54:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8008f56:	2201      	movs	r2, #1
 8008f58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008f5c:	480b      	ldr	r0, [pc, #44]	; (8008f8c <LCD_WriteData+0x48>)
 8008f5e:	f7f8 fc21 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8008f62:	2200      	movs	r2, #0
 8008f64:	2104      	movs	r1, #4
 8008f66:	480a      	ldr	r0, [pc, #40]	; (8008f90 <LCD_WriteData+0x4c>)
 8008f68:	f7f8 fc1c 	bl	80017a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8008f6c:	f107 010c 	add.w	r1, r7, #12
 8008f70:	2364      	movs	r3, #100	; 0x64
 8008f72:	2201      	movs	r2, #1
 8008f74:	4807      	ldr	r0, [pc, #28]	; (8008f94 <LCD_WriteData+0x50>)
 8008f76:	f7fb f86b 	bl	8004050 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	2104      	movs	r1, #4
 8008f7e:	4804      	ldr	r0, [pc, #16]	; (8008f90 <LCD_WriteData+0x4c>)
 8008f80:	f7f8 fc10 	bl	80017a4 <HAL_GPIO_WritePin>
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40020c00 	.word	0x40020c00
 8008f90:	40020800 	.word	0x40020800
 8008f94:	20026ba0 	.word	0x20026ba0

08008f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008f98:	b5b0      	push	{r4, r5, r7, lr}
 8008f9a:	b08c      	sub	sp, #48	; 0x30
 8008f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008f9e:	f7f7 faaf 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008fa2:	f000 f857 	bl	8009054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008fa6:	f000 fae1 	bl	800956c <MX_GPIO_Init>
  MX_DMA_Init();
 8008faa:	f000 fa6f 	bl	800948c <MX_DMA_Init>
  MX_LTDC_Init();
 8008fae:	f000 f94d 	bl	800924c <MX_LTDC_Init>
  MX_SPI5_Init();
 8008fb2:	f000 fa01 	bl	80093b8 <MX_SPI5_Init>
  MX_FMC_Init();
 8008fb6:	f000 fa91 	bl	80094dc <MX_FMC_Init>
  MX_DMA2D_Init();
 8008fba:	f000 f8d5 	bl	8009168 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8008fbe:	f000 f905 	bl	80091cc <MX_I2C3_Init>
  MX_TIM6_Init();
 8008fc2:	f000 fa2f 	bl	8009424 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 8008fc6:	481d      	ldr	r0, [pc, #116]	; (800903c <main+0xa4>)
 8008fc8:	f000 fbca 	bl	8009760 <SDRAM_init>
  TP_Config();
 8008fcc:	f001 f9e2 	bl	800a394 <TP_Config>
  //HAL_TIM_Base_Start_IT(&htim6);
  __HAL_RCC_CRC_CLK_ENABLE();
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	607b      	str	r3, [r7, #4]
 8008fd4:	4a1a      	ldr	r2, [pc, #104]	; (8009040 <main+0xa8>)
 8008fd6:	4b1a      	ldr	r3, [pc, #104]	; (8009040 <main+0xa8>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fde:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe0:	4b17      	ldr	r3, [pc, #92]	; (8009040 <main+0xa8>)
 8008fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
  GUI_Init();
 8008fec:	f006 fd18 	bl	800fa20 <GUI_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008ff0:	4b14      	ldr	r3, [pc, #80]	; (8009044 <main+0xac>)
 8008ff2:	f107 041c 	add.w	r4, r7, #28
 8008ff6:	461d      	mov	r5, r3
 8008ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8009000:	f107 031c 	add.w	r3, r7, #28
 8009004:	2100      	movs	r1, #0
 8009006:	4618      	mov	r0, r3
 8009008:	f7fb fdad 	bl	8004b66 <osThreadCreate>
 800900c:	4602      	mov	r2, r0
 800900e:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <main+0xb0>)
 8009010:	601a      	str	r2, [r3, #0]

  osThreadDef(testTask, StartTestTask, osPriorityNormal, 0, 128);
 8009012:	4b0e      	ldr	r3, [pc, #56]	; (800904c <main+0xb4>)
 8009014:	f107 0408 	add.w	r4, r7, #8
 8009018:	461d      	mov	r5, r3
 800901a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800901c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	6023      	str	r3, [r4, #0]
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 8009022:	f107 0308 	add.w	r3, r7, #8
 8009026:	2100      	movs	r1, #0
 8009028:	4618      	mov	r0, r3
 800902a:	f7fb fd9c 	bl	8004b66 <osThreadCreate>
 800902e:	4602      	mov	r2, r0
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <main+0xb8>)
 8009032:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8009034:	f7fb fd90 	bl	8004b58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //graphicsMain();
  while (1)
 8009038:	e7fe      	b.n	8009038 <main+0xa0>
 800903a:	bf00      	nop
 800903c:	20026c74 	.word	0x20026c74
 8009040:	40023800 	.word	0x40023800
 8009044:	08012d20 	.word	0x08012d20
 8009048:	20026ae8 	.word	0x20026ae8
 800904c:	08012d40 	.word	0x08012d40
 8009050:	20026ca8 	.word	0x20026ca8

08009054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b0a0      	sub	sp, #128	; 0x80
 8009058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800905a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800905e:	2230      	movs	r2, #48	; 0x30
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f009 fe24 	bl	8012cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	605a      	str	r2, [r3, #4]
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	60da      	str	r2, [r3, #12]
 8009076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009078:	f107 030c 	add.w	r3, r7, #12
 800907c:	2230      	movs	r2, #48	; 0x30
 800907e:	2100      	movs	r1, #0
 8009080:	4618      	mov	r0, r3
 8009082:	f009 fe15 	bl	8012cb0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009086:	2300      	movs	r3, #0
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	4a35      	ldr	r2, [pc, #212]	; (8009160 <SystemClock_Config+0x10c>)
 800908c:	4b34      	ldr	r3, [pc, #208]	; (8009160 <SystemClock_Config+0x10c>)
 800908e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009094:	6413      	str	r3, [r2, #64]	; 0x40
 8009096:	4b32      	ldr	r3, [pc, #200]	; (8009160 <SystemClock_Config+0x10c>)
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909e:	60bb      	str	r3, [r7, #8]
 80090a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090a2:	2300      	movs	r3, #0
 80090a4:	607b      	str	r3, [r7, #4]
 80090a6:	4a2f      	ldr	r2, [pc, #188]	; (8009164 <SystemClock_Config+0x110>)
 80090a8:	4b2e      	ldr	r3, [pc, #184]	; (8009164 <SystemClock_Config+0x110>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	4b2c      	ldr	r3, [pc, #176]	; (8009164 <SystemClock_Config+0x110>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80090ba:	607b      	str	r3, [r7, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80090be:	2302      	movs	r3, #2
 80090c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80090c2:	2301      	movs	r3, #1
 80090c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80090c6:	2310      	movs	r3, #16
 80090c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090ca:	2302      	movs	r3, #2
 80090cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80090ce:	2300      	movs	r3, #0
 80090d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80090d2:	2308      	movs	r3, #8
 80090d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80090d6:	23b4      	movs	r3, #180	; 0xb4
 80090d8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80090da:	2302      	movs	r3, #2
 80090dc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80090de:	2304      	movs	r3, #4
 80090e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fa f932 	bl	8003350 <HAL_RCC_OscConfig>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80090f2:	f000 fb2d 	bl	8009750 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80090f6:	f7fa f8db 	bl	80032b0 <HAL_PWREx_EnableOverDrive>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8009100:	f000 fb26 	bl	8009750 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009104:	230f      	movs	r3, #15
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009108:	2302      	movs	r3, #2
 800910a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800910c:	2300      	movs	r3, #0
 800910e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800911a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800911c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009120:	2105      	movs	r1, #5
 8009122:	4618      	mov	r0, r3
 8009124:	f7fa fb56 	bl	80037d4 <HAL_RCC_ClockConfig>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800912e:	f000 fb0f 	bl	8009750 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009132:	2308      	movs	r3, #8
 8009134:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 8009136:	233c      	movs	r3, #60	; 0x3c
 8009138:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800913a:	2302      	movs	r3, #2
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800913e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009142:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009144:	f107 030c 	add.w	r3, r7, #12
 8009148:	4618      	mov	r0, r3
 800914a:	f7fa fcfb 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8009154:	f000 fafc 	bl	8009750 <Error_Handler>
  }
}
 8009158:	bf00      	nop
 800915a:	3780      	adds	r7, #128	; 0x80
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	40023800 	.word	0x40023800
 8009164:	40007000 	.word	0x40007000

08009168 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800916c:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 800916e:	4a16      	ldr	r2, [pc, #88]	; (80091c8 <MX_DMA2D_Init+0x60>)
 8009170:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8009172:	4b14      	ldr	r3, [pc, #80]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 8009174:	2200      	movs	r2, #0
 8009176:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009178:	4b12      	ldr	r3, [pc, #72]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 800917a:	2200      	movs	r2, #0
 800917c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800917e:	4b11      	ldr	r3, [pc, #68]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 8009180:	2200      	movs	r2, #0
 8009182:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8009184:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 8009186:	2200      	movs	r2, #0
 8009188:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800918a:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 800918c:	2200      	movs	r2, #0
 800918e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8009190:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 8009192:	2201      	movs	r2, #1
 8009194:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8009196:	4b0b      	ldr	r3, [pc, #44]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 8009198:	2200      	movs	r2, #0
 800919a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800919c:	4809      	ldr	r0, [pc, #36]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 800919e:	f7f7 fe5f 	bl	8000e60 <HAL_DMA2D_Init>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80091a8:	f000 fad2 	bl	8009750 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80091ac:	2101      	movs	r1, #1
 80091ae:	4805      	ldr	r0, [pc, #20]	; (80091c4 <MX_DMA2D_Init+0x5c>)
 80091b0:	f7f7 ffb0 	bl	8001114 <HAL_DMA2D_ConfigLayer>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80091ba:	f000 fac9 	bl	8009750 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20026c34 	.word	0x20026c34
 80091c8:	4002b000 	.word	0x4002b000

080091cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80091d0:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <MX_I2C3_Init+0x74>)
 80091d2:	4a1c      	ldr	r2, [pc, #112]	; (8009244 <MX_I2C3_Init+0x78>)
 80091d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80091d6:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <MX_I2C3_Init+0x74>)
 80091d8:	4a1b      	ldr	r2, [pc, #108]	; (8009248 <MX_I2C3_Init+0x7c>)
 80091da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80091dc:	4b18      	ldr	r3, [pc, #96]	; (8009240 <MX_I2C3_Init+0x74>)
 80091de:	2200      	movs	r2, #0
 80091e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 80091e2:	4b17      	ldr	r3, [pc, #92]	; (8009240 <MX_I2C3_Init+0x74>)
 80091e4:	2282      	movs	r2, #130	; 0x82
 80091e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80091e8:	4b15      	ldr	r3, [pc, #84]	; (8009240 <MX_I2C3_Init+0x74>)
 80091ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80091ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80091f0:	4b13      	ldr	r3, [pc, #76]	; (8009240 <MX_I2C3_Init+0x74>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80091f6:	4b12      	ldr	r3, [pc, #72]	; (8009240 <MX_I2C3_Init+0x74>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80091fc:	4b10      	ldr	r3, [pc, #64]	; (8009240 <MX_I2C3_Init+0x74>)
 80091fe:	2200      	movs	r2, #0
 8009200:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <MX_I2C3_Init+0x74>)
 8009204:	2200      	movs	r2, #0
 8009206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8009208:	480d      	ldr	r0, [pc, #52]	; (8009240 <MX_I2C3_Init+0x74>)
 800920a:	f7f8 fae5 	bl	80017d8 <HAL_I2C_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8009214:	f000 fa9c 	bl	8009750 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009218:	2100      	movs	r1, #0
 800921a:	4809      	ldr	r0, [pc, #36]	; (8009240 <MX_I2C3_Init+0x74>)
 800921c:	f7f9 f9f1 	bl	8002602 <HAL_I2CEx_ConfigAnalogFilter>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8009226:	f000 fa93 	bl	8009750 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800922a:	2100      	movs	r1, #0
 800922c:	4804      	ldr	r0, [pc, #16]	; (8009240 <MX_I2C3_Init+0x74>)
 800922e:	f7f9 fa24 	bl	800267a <HAL_I2CEx_ConfigDigitalFilter>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8009238:	f000 fa8a 	bl	8009750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800923c:	bf00      	nop
 800923e:	bd80      	pop	{r7, pc}
 8009240:	20026aec 	.word	0x20026aec
 8009244:	40005c00 	.word	0x40005c00
 8009248:	000186a0 	.word	0x000186a0

0800924c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b09a      	sub	sp, #104	; 0x68
 8009250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009256:	2234      	movs	r2, #52	; 0x34
 8009258:	2100      	movs	r1, #0
 800925a:	4618      	mov	r0, r3
 800925c:	f009 fd28 	bl	8012cb0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8009260:	463b      	mov	r3, r7
 8009262:	2234      	movs	r2, #52	; 0x34
 8009264:	2100      	movs	r1, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f009 fd22 	bl	8012cb0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800926c:	4b50      	ldr	r3, [pc, #320]	; (80093b0 <MX_LTDC_Init+0x164>)
 800926e:	4a51      	ldr	r2, [pc, #324]	; (80093b4 <MX_LTDC_Init+0x168>)
 8009270:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009272:	4b4f      	ldr	r3, [pc, #316]	; (80093b0 <MX_LTDC_Init+0x164>)
 8009274:	2200      	movs	r2, #0
 8009276:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009278:	4b4d      	ldr	r3, [pc, #308]	; (80093b0 <MX_LTDC_Init+0x164>)
 800927a:	2200      	movs	r2, #0
 800927c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800927e:	4b4c      	ldr	r3, [pc, #304]	; (80093b0 <MX_LTDC_Init+0x164>)
 8009280:	2200      	movs	r2, #0
 8009282:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009284:	4b4a      	ldr	r3, [pc, #296]	; (80093b0 <MX_LTDC_Init+0x164>)
 8009286:	2200      	movs	r2, #0
 8009288:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 800928a:	4b49      	ldr	r3, [pc, #292]	; (80093b0 <MX_LTDC_Init+0x164>)
 800928c:	2208      	movs	r2, #8
 800928e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8009290:	4b47      	ldr	r3, [pc, #284]	; (80093b0 <MX_LTDC_Init+0x164>)
 8009292:	2200      	movs	r2, #0
 8009294:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8009296:	4b46      	ldr	r3, [pc, #280]	; (80093b0 <MX_LTDC_Init+0x164>)
 8009298:	221d      	movs	r2, #29
 800929a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800929c:	4b44      	ldr	r3, [pc, #272]	; (80093b0 <MX_LTDC_Init+0x164>)
 800929e:	2203      	movs	r2, #3
 80092a0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80092a2:	4b43      	ldr	r3, [pc, #268]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092a4:	f240 120d 	movw	r2, #269	; 0x10d
 80092a8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80092aa:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092ac:	f240 1243 	movw	r2, #323	; 0x143
 80092b0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80092b2:	4b3f      	ldr	r3, [pc, #252]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092b4:	f240 1217 	movw	r2, #279	; 0x117
 80092b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80092ba:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092bc:	f240 1247 	movw	r2, #327	; 0x147
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80092c2:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80092ca:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80092d2:	4b37      	ldr	r3, [pc, #220]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80092da:	4835      	ldr	r0, [pc, #212]	; (80093b0 <MX_LTDC_Init+0x164>)
 80092dc:	f7f9 fa0c 	bl	80026f8 <HAL_LTDC_Init>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80092e6:	f000 fa33 	bl	8009750 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 80092ee:	23f0      	movs	r3, #240	; 0xf0
 80092f0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 80092f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80092fa:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80092fc:	2300      	movs	r3, #0
 80092fe:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8009300:	23ff      	movs	r3, #255	; 0xff
 8009302:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009308:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800930c:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800930e:	2307      	movs	r3, #7
 8009310:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8009316:	23f0      	movs	r3, #240	; 0xf0
 8009318:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 800931a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800931e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009332:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009336:	2200      	movs	r2, #0
 8009338:	4619      	mov	r1, r3
 800933a:	481d      	ldr	r0, [pc, #116]	; (80093b0 <MX_LTDC_Init+0x164>)
 800933c:	f7f9 fb80 	bl	8002a40 <HAL_LTDC_ConfigLayer>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 8009346:	f000 fa03 	bl	8009750 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 240;
 800934e:	23f0      	movs	r3, #240	; 0xf0
 8009350:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 320;
 8009356:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800935a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 800935c:	2303      	movs	r3, #3
 800935e:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800936c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800936e:	2305      	movs	r3, #5
 8009370:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 240;
 8009376:	23f0      	movs	r3, #240	; 0xf0
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 320;
 800937a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800937e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8009392:	463b      	mov	r3, r7
 8009394:	2201      	movs	r2, #1
 8009396:	4619      	mov	r1, r3
 8009398:	4805      	ldr	r0, [pc, #20]	; (80093b0 <MX_LTDC_Init+0x164>)
 800939a:	f7f9 fb51 	bl	8002a40 <HAL_LTDC_ConfigLayer>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <MX_LTDC_Init+0x15c>
  {
    Error_Handler();
 80093a4:	f000 f9d4 	bl	8009750 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80093a8:	bf00      	nop
 80093aa:	3768      	adds	r7, #104	; 0x68
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	200269e0 	.word	0x200269e0
 80093b4:	40016800 	.word	0x40016800

080093b8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80093bc:	4b17      	ldr	r3, [pc, #92]	; (800941c <MX_SPI5_Init+0x64>)
 80093be:	4a18      	ldr	r2, [pc, #96]	; (8009420 <MX_SPI5_Init+0x68>)
 80093c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80093c2:	4b16      	ldr	r3, [pc, #88]	; (800941c <MX_SPI5_Init+0x64>)
 80093c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80093c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80093ca:	4b14      	ldr	r3, [pc, #80]	; (800941c <MX_SPI5_Init+0x64>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80093d0:	4b12      	ldr	r3, [pc, #72]	; (800941c <MX_SPI5_Init+0x64>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80093d6:	4b11      	ldr	r3, [pc, #68]	; (800941c <MX_SPI5_Init+0x64>)
 80093d8:	2200      	movs	r2, #0
 80093da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80093dc:	4b0f      	ldr	r3, [pc, #60]	; (800941c <MX_SPI5_Init+0x64>)
 80093de:	2200      	movs	r2, #0
 80093e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80093e2:	4b0e      	ldr	r3, [pc, #56]	; (800941c <MX_SPI5_Init+0x64>)
 80093e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <MX_SPI5_Init+0x64>)
 80093ec:	2218      	movs	r2, #24
 80093ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <MX_SPI5_Init+0x64>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <MX_SPI5_Init+0x64>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093fc:	4b07      	ldr	r3, [pc, #28]	; (800941c <MX_SPI5_Init+0x64>)
 80093fe:	2200      	movs	r2, #0
 8009400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8009402:	4b06      	ldr	r3, [pc, #24]	; (800941c <MX_SPI5_Init+0x64>)
 8009404:	220a      	movs	r2, #10
 8009406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8009408:	4804      	ldr	r0, [pc, #16]	; (800941c <MX_SPI5_Init+0x64>)
 800940a:	f7fa fdbe 	bl	8003f8a <HAL_SPI_Init>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8009414:	f000 f99c 	bl	8009750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8009418:	bf00      	nop
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20026ba0 	.word	0x20026ba0
 8009420:	40015000 	.word	0x40015000

08009424 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800942a:	463b      	mov	r3, r7
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009432:	4b14      	ldr	r3, [pc, #80]	; (8009484 <MX_TIM6_Init+0x60>)
 8009434:	4a14      	ldr	r2, [pc, #80]	; (8009488 <MX_TIM6_Init+0x64>)
 8009436:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8009438:	4b12      	ldr	r3, [pc, #72]	; (8009484 <MX_TIM6_Init+0x60>)
 800943a:	f242 7210 	movw	r2, #10000	; 0x2710
 800943e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009440:	4b10      	ldr	r3, [pc, #64]	; (8009484 <MX_TIM6_Init+0x60>)
 8009442:	2200      	movs	r2, #0
 8009444:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8009446:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <MX_TIM6_Init+0x60>)
 8009448:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800944c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800944e:	480d      	ldr	r0, [pc, #52]	; (8009484 <MX_TIM6_Init+0x60>)
 8009450:	f7fa ffc0 	bl	80043d4 <HAL_TIM_Base_Init>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <MX_TIM6_Init+0x3a>
  {
    Error_Handler();
 800945a:	f000 f979 	bl	8009750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800945e:	2310      	movs	r3, #16
 8009460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009466:	463b      	mov	r3, r7
 8009468:	4619      	mov	r1, r3
 800946a:	4806      	ldr	r0, [pc, #24]	; (8009484 <MX_TIM6_Init+0x60>)
 800946c:	f7fb f9c2 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <MX_TIM6_Init+0x56>
  {
    Error_Handler();
 8009476:	f000 f96b 	bl	8009750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20026bf8 	.word	0x20026bf8
 8009488:	40001000 	.word	0x40001000

0800948c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	4a10      	ldr	r2, [pc, #64]	; (80094d8 <MX_DMA_Init+0x4c>)
 8009498:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <MX_DMA_Init+0x4c>)
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094a0:	6313      	str	r3, [r2, #48]	; 0x30
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <MX_DMA_Init+0x4c>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80094ae:	2200      	movs	r2, #0
 80094b0:	2105      	movs	r1, #5
 80094b2:	200d      	movs	r0, #13
 80094b4:	f7f7 f9a7 	bl	8000806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80094b8:	200d      	movs	r0, #13
 80094ba:	f7f7 f9c0 	bl	800083e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80094be:	2200      	movs	r2, #0
 80094c0:	2105      	movs	r1, #5
 80094c2:	200f      	movs	r0, #15
 80094c4:	f7f7 f99f 	bl	8000806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80094c8:	200f      	movs	r0, #15
 80094ca:	f7f7 f9b8 	bl	800083e <HAL_NVIC_EnableIRQ>

}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	40023800 	.word	0x40023800

080094dc <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80094e2:	4b20      	ldr	r3, [pc, #128]	; (8009564 <MX_FMC_Init+0x88>)
 80094e4:	4a20      	ldr	r2, [pc, #128]	; (8009568 <MX_FMC_Init+0x8c>)
 80094e6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80094e8:	4b1e      	ldr	r3, [pc, #120]	; (8009564 <MX_FMC_Init+0x88>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80094ee:	4b1d      	ldr	r3, [pc, #116]	; (8009564 <MX_FMC_Init+0x88>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80094f4:	4b1b      	ldr	r3, [pc, #108]	; (8009564 <MX_FMC_Init+0x88>)
 80094f6:	2204      	movs	r2, #4
 80094f8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80094fa:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <MX_FMC_Init+0x88>)
 80094fc:	2210      	movs	r2, #16
 80094fe:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009500:	4b18      	ldr	r3, [pc, #96]	; (8009564 <MX_FMC_Init+0x88>)
 8009502:	2240      	movs	r2, #64	; 0x40
 8009504:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8009506:	4b17      	ldr	r3, [pc, #92]	; (8009564 <MX_FMC_Init+0x88>)
 8009508:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800950c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800950e:	4b15      	ldr	r3, [pc, #84]	; (8009564 <MX_FMC_Init+0x88>)
 8009510:	2200      	movs	r2, #0
 8009512:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8009514:	4b13      	ldr	r3, [pc, #76]	; (8009564 <MX_FMC_Init+0x88>)
 8009516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800951a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800951c:	4b11      	ldr	r3, [pc, #68]	; (8009564 <MX_FMC_Init+0x88>)
 800951e:	2200      	movs	r2, #0
 8009520:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8009522:	4b10      	ldr	r3, [pc, #64]	; (8009564 <MX_FMC_Init+0x88>)
 8009524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009528:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800952a:	2302      	movs	r3, #2
 800952c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800952e:	2307      	movs	r3, #7
 8009530:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8009532:	2304      	movs	r3, #4
 8009534:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8009536:	2307      	movs	r3, #7
 8009538:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800953a:	2303      	movs	r3, #3
 800953c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800953e:	2302      	movs	r3, #2
 8009540:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8009542:	2302      	movs	r3, #2
 8009544:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009546:	1d3b      	adds	r3, r7, #4
 8009548:	4619      	mov	r1, r3
 800954a:	4806      	ldr	r0, [pc, #24]	; (8009564 <MX_FMC_Init+0x88>)
 800954c:	f7fa fc9e 	bl	8003e8c <HAL_SDRAM_Init>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8009556:	f000 f8fb 	bl	8009750 <Error_Handler>
  }

}
 800955a:	bf00      	nop
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20026c74 	.word	0x20026c74
 8009568:	a0000140 	.word	0xa0000140

0800956c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08c      	sub	sp, #48	; 0x30
 8009570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009572:	f107 031c 	add.w	r3, r7, #28
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	605a      	str	r2, [r3, #4]
 800957c:	609a      	str	r2, [r3, #8]
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009582:	2300      	movs	r3, #0
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	4a57      	ldr	r2, [pc, #348]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009588:	4b56      	ldr	r3, [pc, #344]	; (80096e4 <MX_GPIO_Init+0x178>)
 800958a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958c:	f043 0320 	orr.w	r3, r3, #32
 8009590:	6313      	str	r3, [r2, #48]	; 0x30
 8009592:	4b54      	ldr	r3, [pc, #336]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	61bb      	str	r3, [r7, #24]
 800959c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800959e:	2300      	movs	r3, #0
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	4a50      	ldr	r2, [pc, #320]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095a4:	4b4f      	ldr	r3, [pc, #316]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a8:	f043 0304 	orr.w	r3, r3, #4
 80095ac:	6313      	str	r3, [r2, #48]	; 0x30
 80095ae:	4b4d      	ldr	r3, [pc, #308]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f003 0304 	and.w	r3, r3, #4
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095ba:	2300      	movs	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	4a49      	ldr	r2, [pc, #292]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095c0:	4b48      	ldr	r3, [pc, #288]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	6313      	str	r3, [r2, #48]	; 0x30
 80095ca:	4b46      	ldr	r3, [pc, #280]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	4a42      	ldr	r2, [pc, #264]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095dc:	4b41      	ldr	r3, [pc, #260]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e0:	f043 0302 	orr.w	r3, r3, #2
 80095e4:	6313      	str	r3, [r2, #48]	; 0x30
 80095e6:	4b3f      	ldr	r3, [pc, #252]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80095f2:	2300      	movs	r3, #0
 80095f4:	60bb      	str	r3, [r7, #8]
 80095f6:	4a3b      	ldr	r2, [pc, #236]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095f8:	4b3a      	ldr	r3, [pc, #232]	; (80096e4 <MX_GPIO_Init+0x178>)
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009600:	6313      	str	r3, [r2, #48]	; 0x30
 8009602:	4b38      	ldr	r3, [pc, #224]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960a:	60bb      	str	r3, [r7, #8]
 800960c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800960e:	2300      	movs	r3, #0
 8009610:	607b      	str	r3, [r7, #4]
 8009612:	4a34      	ldr	r2, [pc, #208]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009614:	4b33      	ldr	r3, [pc, #204]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009618:	f043 0310 	orr.w	r3, r3, #16
 800961c:	6313      	str	r3, [r2, #48]	; 0x30
 800961e:	4b31      	ldr	r3, [pc, #196]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009622:	f003 0310 	and.w	r3, r3, #16
 8009626:	607b      	str	r3, [r7, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800962a:	2300      	movs	r3, #0
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	4a2d      	ldr	r2, [pc, #180]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009630:	4b2c      	ldr	r3, [pc, #176]	; (80096e4 <MX_GPIO_Init+0x178>)
 8009632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009634:	f043 0308 	orr.w	r3, r3, #8
 8009638:	6313      	str	r3, [r2, #48]	; 0x30
 800963a:	4b2a      	ldr	r3, [pc, #168]	; (80096e4 <MX_GPIO_Init+0x178>)
 800963c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963e:	f003 0308 	and.w	r3, r3, #8
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8009646:	2201      	movs	r2, #1
 8009648:	2104      	movs	r1, #4
 800964a:	4827      	ldr	r0, [pc, #156]	; (80096e8 <MX_GPIO_Init+0x17c>)
 800964c:	f7f8 f8aa 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8009650:	2200      	movs	r2, #0
 8009652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009656:	4825      	ldr	r0, [pc, #148]	; (80096ec <MX_GPIO_Init+0x180>)
 8009658:	f7f8 f8a4 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800965c:	2200      	movs	r2, #0
 800965e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8009662:	4823      	ldr	r0, [pc, #140]	; (80096f0 <MX_GPIO_Init+0x184>)
 8009664:	f7f8 f89e 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 8009668:	2304      	movs	r3, #4
 800966a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800966c:	2301      	movs	r3, #1
 800966e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009670:	2300      	movs	r3, #0
 8009672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009674:	2302      	movs	r3, #2
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8009678:	f107 031c 	add.w	r3, r7, #28
 800967c:	4619      	mov	r1, r3
 800967e:	481a      	ldr	r0, [pc, #104]	; (80096e8 <MX_GPIO_Init+0x17c>)
 8009680:	f7f7 fdda 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 8009684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800968a:	2301      	movs	r3, #1
 800968c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968e:	2300      	movs	r3, #0
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009692:	2302      	movs	r3, #2
 8009694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 8009696:	f107 031c 	add.w	r3, r7, #28
 800969a:	4619      	mov	r1, r3
 800969c:	4813      	ldr	r0, [pc, #76]	; (80096ec <MX_GPIO_Init+0x180>)
 800969e:	f7f7 fdcb 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80096a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096a8:	2300      	movs	r3, #0
 80096aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80096b0:	f107 031c 	add.w	r3, r7, #28
 80096b4:	4619      	mov	r1, r3
 80096b6:	480f      	ldr	r0, [pc, #60]	; (80096f4 <MX_GPIO_Init+0x188>)
 80096b8:	f7f7 fdbe 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80096bc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80096c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096c2:	2301      	movs	r3, #1
 80096c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ca:	2300      	movs	r3, #0
 80096cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80096ce:	f107 031c 	add.w	r3, r7, #28
 80096d2:	4619      	mov	r1, r3
 80096d4:	4806      	ldr	r0, [pc, #24]	; (80096f0 <MX_GPIO_Init+0x184>)
 80096d6:	f7f7 fdaf 	bl	8001238 <HAL_GPIO_Init>

}
 80096da:	bf00      	nop
 80096dc:	3730      	adds	r7, #48	; 0x30
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	40023800 	.word	0x40023800
 80096e8:	40020800 	.word	0x40020800
 80096ec:	40020c00 	.word	0x40020c00
 80096f0:	40021800 	.word	0x40021800
 80096f4:	40020000 	.word	0x40020000

080096f8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
	graphicsMain();
 8009700:	f7ff f8f0 	bl	80088e4 <graphicsMain>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009704:	2001      	movs	r0, #1
 8009706:	f7fb fa55 	bl	8004bb4 <osDelay>
 800970a:	e7fb      	b.n	8009704 <StartDefaultTask+0xc>

0800970c <StartTestTask>:
  }
  /* USER CODE END 5 */ 
}

void StartTestTask(void const * argument)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	osDelay(5000);
 8009714:	f241 3088 	movw	r0, #5000	; 0x1388
 8009718:	f7fb fa4c 	bl	8004bb4 <osDelay>
	while (1)
	{
		GUI_SetColor(GUI_YELLOW);
 800971c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009720:	f004 f9be 	bl	800daa0 <GUI_SetColor>
		GUI_FillCircle(10,10,6);
 8009724:	2206      	movs	r2, #6
 8009726:	210a      	movs	r1, #10
 8009728:	200a      	movs	r0, #10
 800972a:	f006 fa2f 	bl	800fb8c <GUI_FillCircle>
		osDelay(500);
 800972e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009732:	f7fb fa3f 	bl	8004bb4 <osDelay>
		GUI_SetColor(GUI_BLACK);
 8009736:	2000      	movs	r0, #0
 8009738:	f004 f9b2 	bl	800daa0 <GUI_SetColor>
		GUI_FillCircle(10,10,6);
 800973c:	2206      	movs	r2, #6
 800973e:	210a      	movs	r1, #10
 8009740:	200a      	movs	r0, #10
 8009742:	f006 fa23 	bl	800fb8c <GUI_FillCircle>
		osDelay(500);
 8009746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800974a:	f7fb fa33 	bl	8004bb4 <osDelay>
		GUI_SetColor(GUI_YELLOW);
 800974e:	e7e5      	b.n	800971c <StartTestTask+0x10>

08009750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
	...

08009760 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800976c:	4b2f      	ldr	r3, [pc, #188]	; (800982c <SDRAM_init+0xcc>)
 800976e:	2201      	movs	r2, #1
 8009770:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8009772:	4b2e      	ldr	r3, [pc, #184]	; (800982c <SDRAM_init+0xcc>)
 8009774:	2208      	movs	r2, #8
 8009776:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8009778:	4b2c      	ldr	r3, [pc, #176]	; (800982c <SDRAM_init+0xcc>)
 800977a:	2201      	movs	r2, #1
 800977c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800977e:	4b2b      	ldr	r3, [pc, #172]	; (800982c <SDRAM_init+0xcc>)
 8009780:	2200      	movs	r2, #0
 8009782:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8009784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009788:	4928      	ldr	r1, [pc, #160]	; (800982c <SDRAM_init+0xcc>)
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7fa fbb2 	bl	8003ef4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8009790:	200a      	movs	r0, #10
 8009792:	f7f6 ff27 	bl	80005e4 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8009796:	4b25      	ldr	r3, [pc, #148]	; (800982c <SDRAM_init+0xcc>)
 8009798:	2202      	movs	r2, #2
 800979a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800979c:	4b23      	ldr	r3, [pc, #140]	; (800982c <SDRAM_init+0xcc>)
 800979e:	2208      	movs	r2, #8
 80097a0:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80097a2:	4b22      	ldr	r3, [pc, #136]	; (800982c <SDRAM_init+0xcc>)
 80097a4:	2201      	movs	r2, #1
 80097a6:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80097a8:	4b20      	ldr	r3, [pc, #128]	; (800982c <SDRAM_init+0xcc>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80097ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097b2:	491e      	ldr	r1, [pc, #120]	; (800982c <SDRAM_init+0xcc>)
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7fa fb9d 	bl	8003ef4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80097ba:	200a      	movs	r0, #10
 80097bc:	f7f6 ff12 	bl	80005e4 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80097c0:	4b1a      	ldr	r3, [pc, #104]	; (800982c <SDRAM_init+0xcc>)
 80097c2:	2203      	movs	r2, #3
 80097c4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80097c6:	4b19      	ldr	r3, [pc, #100]	; (800982c <SDRAM_init+0xcc>)
 80097c8:	2208      	movs	r2, #8
 80097ca:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 80097cc:	4b17      	ldr	r3, [pc, #92]	; (800982c <SDRAM_init+0xcc>)
 80097ce:	2204      	movs	r2, #4
 80097d0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80097d2:	4b16      	ldr	r3, [pc, #88]	; (800982c <SDRAM_init+0xcc>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80097d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097dc:	4913      	ldr	r1, [pc, #76]	; (800982c <SDRAM_init+0xcc>)
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7fa fb88 	bl	8003ef4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 80097e4:	200a      	movs	r0, #10
 80097e6:	f7f6 fefd 	bl	80005e4 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 80097ea:	f240 2331 	movw	r3, #561	; 0x231
 80097ee:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80097f0:	4b0e      	ldr	r3, [pc, #56]	; (800982c <SDRAM_init+0xcc>)
 80097f2:	2204      	movs	r2, #4
 80097f4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80097f6:	4b0d      	ldr	r3, [pc, #52]	; (800982c <SDRAM_init+0xcc>)
 80097f8:	2208      	movs	r2, #8
 80097fa:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80097fc:	4b0b      	ldr	r3, [pc, #44]	; (800982c <SDRAM_init+0xcc>)
 80097fe:	2201      	movs	r2, #1
 8009800:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a09      	ldr	r2, [pc, #36]	; (800982c <SDRAM_init+0xcc>)
 8009806:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8009808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800980c:	4907      	ldr	r1, [pc, #28]	; (800982c <SDRAM_init+0xcc>)
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7fa fb70 	bl	8003ef4 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8009814:	200a      	movs	r0, #10
 8009816:	f7f6 fee5 	bl	80005e4 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 800981a:	f240 516a 	movw	r1, #1386	; 0x56a
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fa fb93 	bl	8003f4a <HAL_SDRAM_ProgramRefreshRate>
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	20026cac 	.word	0x20026cac

08009830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
 800983a:	4a12      	ldr	r2, [pc, #72]	; (8009884 <HAL_MspInit+0x54>)
 800983c:	4b11      	ldr	r3, [pc, #68]	; (8009884 <HAL_MspInit+0x54>)
 800983e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009844:	6453      	str	r3, [r2, #68]	; 0x44
 8009846:	4b0f      	ldr	r3, [pc, #60]	; (8009884 <HAL_MspInit+0x54>)
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009852:	2300      	movs	r3, #0
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	4a0b      	ldr	r2, [pc, #44]	; (8009884 <HAL_MspInit+0x54>)
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <HAL_MspInit+0x54>)
 800985a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009860:	6413      	str	r3, [r2, #64]	; 0x40
 8009862:	4b08      	ldr	r3, [pc, #32]	; (8009884 <HAL_MspInit+0x54>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800986e:	2200      	movs	r2, #0
 8009870:	210f      	movs	r1, #15
 8009872:	f06f 0001 	mvn.w	r0, #1
 8009876:	f7f6 ffc6 	bl	8000806 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800987a:	bf00      	nop
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	40023800 	.word	0x40023800

08009888 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a0e      	ldr	r2, [pc, #56]	; (80098d0 <HAL_DMA2D_MspInit+0x48>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d115      	bne.n	80098c6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	4a0d      	ldr	r2, [pc, #52]	; (80098d4 <HAL_DMA2D_MspInit+0x4c>)
 80098a0:	4b0c      	ldr	r3, [pc, #48]	; (80098d4 <HAL_DMA2D_MspInit+0x4c>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80098a8:	6313      	str	r3, [r2, #48]	; 0x30
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <HAL_DMA2D_MspInit+0x4c>)
 80098ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80098b6:	2200      	movs	r2, #0
 80098b8:	2105      	movs	r1, #5
 80098ba:	205a      	movs	r0, #90	; 0x5a
 80098bc:	f7f6 ffa3 	bl	8000806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80098c0:	205a      	movs	r0, #90	; 0x5a
 80098c2:	f7f6 ffbc 	bl	800083e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	4002b000 	.word	0x4002b000
 80098d4:	40023800 	.word	0x40023800

080098d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08a      	sub	sp, #40	; 0x28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098e0:	f107 0314 	add.w	r3, r7, #20
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a57      	ldr	r2, [pc, #348]	; (8009a54 <HAL_I2C_MspInit+0x17c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	f040 80a8 	bne.w	8009a4c <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098fc:	2300      	movs	r3, #0
 80098fe:	613b      	str	r3, [r7, #16]
 8009900:	4a55      	ldr	r2, [pc, #340]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 8009902:	4b55      	ldr	r3, [pc, #340]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 8009904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009906:	f043 0304 	orr.w	r3, r3, #4
 800990a:	6313      	str	r3, [r2, #48]	; 0x30
 800990c:	4b52      	ldr	r3, [pc, #328]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 800990e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	4a4e      	ldr	r2, [pc, #312]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 800991e:	4b4e      	ldr	r3, [pc, #312]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 8009920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009922:	f043 0301 	orr.w	r3, r3, #1
 8009926:	6313      	str	r3, [r2, #48]	; 0x30
 8009928:	4b4b      	ldr	r3, [pc, #300]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 800992a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800993a:	2312      	movs	r3, #18
 800993c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800993e:	2301      	movs	r3, #1
 8009940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009942:	2303      	movs	r3, #3
 8009944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009946:	2304      	movs	r3, #4
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800994a:	f107 0314 	add.w	r3, r7, #20
 800994e:	4619      	mov	r1, r3
 8009950:	4842      	ldr	r0, [pc, #264]	; (8009a5c <HAL_I2C_MspInit+0x184>)
 8009952:	f7f7 fc71 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800995a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800995c:	2312      	movs	r3, #18
 800995e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009960:	2301      	movs	r3, #1
 8009962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009964:	2303      	movs	r3, #3
 8009966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009968:	2304      	movs	r3, #4
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800996c:	f107 0314 	add.w	r3, r7, #20
 8009970:	4619      	mov	r1, r3
 8009972:	483b      	ldr	r0, [pc, #236]	; (8009a60 <HAL_I2C_MspInit+0x188>)
 8009974:	f7f7 fc60 	bl	8001238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009978:	2300      	movs	r3, #0
 800997a:	60bb      	str	r3, [r7, #8]
 800997c:	4a36      	ldr	r2, [pc, #216]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 800997e:	4b36      	ldr	r3, [pc, #216]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009986:	6413      	str	r3, [r2, #64]	; 0x40
 8009988:	4b33      	ldr	r3, [pc, #204]	; (8009a58 <HAL_I2C_MspInit+0x180>)
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009990:	60bb      	str	r3, [r7, #8]
 8009992:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8009994:	4b33      	ldr	r3, [pc, #204]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 8009996:	4a34      	ldr	r2, [pc, #208]	; (8009a68 <HAL_I2C_MspInit+0x190>)
 8009998:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 800999a:	4b32      	ldr	r3, [pc, #200]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 800999c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80099a0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099a2:	4b30      	ldr	r3, [pc, #192]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099a8:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099aa:	2200      	movs	r2, #0
 80099ac:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099ae:	4b2d      	ldr	r3, [pc, #180]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099b4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099b6:	4b2b      	ldr	r3, [pc, #172]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099bc:	4b29      	ldr	r3, [pc, #164]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099be:	2200      	movs	r2, #0
 80099c0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80099c2:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099c8:	4b26      	ldr	r3, [pc, #152]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80099ce:	4b25      	ldr	r3, [pc, #148]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80099d4:	4823      	ldr	r0, [pc, #140]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099d6:	f7f6 ff5b 	bl	8000890 <HAL_DMA_Init>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80099e0:	f7ff feb6 	bl	8009750 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a1f      	ldr	r2, [pc, #124]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
 80099ea:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <HAL_I2C_MspInit+0x18c>)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 80099f0:	4b1e      	ldr	r3, [pc, #120]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 80099f2:	4a1f      	ldr	r2, [pc, #124]	; (8009a70 <HAL_I2C_MspInit+0x198>)
 80099f4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 80099f6:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 80099f8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80099fc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80099fe:	4b1b      	ldr	r3, [pc, #108]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a00:	2240      	movs	r2, #64	; 0x40
 8009a02:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a04:	4b19      	ldr	r3, [pc, #100]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a06:	2200      	movs	r2, #0
 8009a08:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a0a:	4b18      	ldr	r3, [pc, #96]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a10:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a18:	4b14      	ldr	r3, [pc, #80]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8009a1e:	4b13      	ldr	r3, [pc, #76]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a24:	4b11      	ldr	r3, [pc, #68]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009a2a:	4b10      	ldr	r3, [pc, #64]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8009a30:	480e      	ldr	r0, [pc, #56]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a32:	f7f6 ff2d 	bl	8000890 <HAL_DMA_Init>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8009a3c:	f7ff fe88 	bl	8009750 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a0a      	ldr	r2, [pc, #40]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a44:	635a      	str	r2, [r3, #52]	; 0x34
 8009a46:	4a09      	ldr	r2, [pc, #36]	; (8009a6c <HAL_I2C_MspInit+0x194>)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009a4c:	bf00      	nop
 8009a4e:	3728      	adds	r7, #40	; 0x28
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	40005c00 	.word	0x40005c00
 8009a58:	40023800 	.word	0x40023800
 8009a5c:	40020800 	.word	0x40020800
 8009a60:	40020000 	.word	0x40020000
 8009a64:	20026b40 	.word	0x20026b40
 8009a68:	40026040 	.word	0x40026040
 8009a6c:	20026a88 	.word	0x20026a88
 8009a70:	40026070 	.word	0x40026070

08009a74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08e      	sub	sp, #56	; 0x38
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	605a      	str	r2, [r3, #4]
 8009a86:	609a      	str	r2, [r3, #8]
 8009a88:	60da      	str	r2, [r3, #12]
 8009a8a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a7b      	ldr	r2, [pc, #492]	; (8009c80 <HAL_LTDC_MspInit+0x20c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	f040 80f0 	bne.w	8009c78 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009a98:	2300      	movs	r3, #0
 8009a9a:	623b      	str	r3, [r7, #32]
 8009a9c:	4a79      	ldr	r2, [pc, #484]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009a9e:	4b79      	ldr	r3, [pc, #484]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009aa6:	6453      	str	r3, [r2, #68]	; 0x44
 8009aa8:	4b76      	ldr	r3, [pc, #472]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ab0:	623b      	str	r3, [r7, #32]
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	4a72      	ldr	r2, [pc, #456]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009aba:	4b72      	ldr	r3, [pc, #456]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	f043 0320 	orr.w	r3, r3, #32
 8009ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ac4:	4b6f      	ldr	r3, [pc, #444]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac8:	f003 0320 	and.w	r3, r3, #32
 8009acc:	61fb      	str	r3, [r7, #28]
 8009ace:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61bb      	str	r3, [r7, #24]
 8009ad4:	4a6b      	ldr	r2, [pc, #428]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009ad6:	4b6b      	ldr	r3, [pc, #428]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	f043 0301 	orr.w	r3, r3, #1
 8009ade:	6313      	str	r3, [r2, #48]	; 0x30
 8009ae0:	4b68      	ldr	r3, [pc, #416]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	61bb      	str	r3, [r7, #24]
 8009aea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	4a64      	ldr	r2, [pc, #400]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009af2:	4b64      	ldr	r3, [pc, #400]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af6:	f043 0302 	orr.w	r3, r3, #2
 8009afa:	6313      	str	r3, [r2, #48]	; 0x30
 8009afc:	4b61      	ldr	r3, [pc, #388]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	f003 0302 	and.w	r3, r3, #2
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b08:	2300      	movs	r3, #0
 8009b0a:	613b      	str	r3, [r7, #16]
 8009b0c:	4a5d      	ldr	r2, [pc, #372]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b0e:	4b5d      	ldr	r3, [pc, #372]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b16:	6313      	str	r3, [r2, #48]	; 0x30
 8009b18:	4b5a      	ldr	r3, [pc, #360]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	4a56      	ldr	r2, [pc, #344]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b2a:	4b56      	ldr	r3, [pc, #344]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2e:	f043 0304 	orr.w	r3, r3, #4
 8009b32:	6313      	str	r3, [r2, #48]	; 0x30
 8009b34:	4b53      	ldr	r3, [pc, #332]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b40:	2300      	movs	r3, #0
 8009b42:	60bb      	str	r3, [r7, #8]
 8009b44:	4a4f      	ldr	r2, [pc, #316]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b46:	4b4f      	ldr	r3, [pc, #316]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	f043 0308 	orr.w	r3, r3, #8
 8009b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8009b50:	4b4c      	ldr	r3, [pc, #304]	; (8009c84 <HAL_LTDC_MspInit+0x210>)
 8009b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	60bb      	str	r3, [r7, #8]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b62:	2302      	movs	r3, #2
 8009b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b6e:	230e      	movs	r3, #14
 8009b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b76:	4619      	mov	r1, r3
 8009b78:	4843      	ldr	r0, [pc, #268]	; (8009c88 <HAL_LTDC_MspInit+0x214>)
 8009b7a:	f7f7 fb5d 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8009b7e:	f641 0358 	movw	r3, #6232	; 0x1858
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b84:	2302      	movs	r3, #2
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b90:	230e      	movs	r3, #14
 8009b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b98:	4619      	mov	r1, r3
 8009b9a:	483c      	ldr	r0, [pc, #240]	; (8009c8c <HAL_LTDC_MspInit+0x218>)
 8009b9c:	f7f7 fb4c 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009bac:	2302      	movs	r3, #2
 8009bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009bb0:	2309      	movs	r3, #9
 8009bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4835      	ldr	r0, [pc, #212]	; (8009c90 <HAL_LTDC_MspInit+0x21c>)
 8009bbc:	f7f7 fb3c 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8009bc0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009bd2:	230e      	movs	r3, #14
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bda:	4619      	mov	r1, r3
 8009bdc:	482c      	ldr	r0, [pc, #176]	; (8009c90 <HAL_LTDC_MspInit+0x21c>)
 8009bde:	f7f7 fb2b 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8009be2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009be8:	2302      	movs	r3, #2
 8009bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bec:	2300      	movs	r3, #0
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009bf4:	230e      	movs	r3, #14
 8009bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4825      	ldr	r0, [pc, #148]	; (8009c94 <HAL_LTDC_MspInit+0x220>)
 8009c00:	f7f7 fb1a 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8009c04:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c12:	2302      	movs	r3, #2
 8009c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009c16:	230e      	movs	r3, #14
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c1e:	4619      	mov	r1, r3
 8009c20:	481d      	ldr	r0, [pc, #116]	; (8009c98 <HAL_LTDC_MspInit+0x224>)
 8009c22:	f7f7 fb09 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8009c26:	2348      	movs	r3, #72	; 0x48
 8009c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c32:	2302      	movs	r3, #2
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009c36:	230e      	movs	r3, #14
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4816      	ldr	r0, [pc, #88]	; (8009c9c <HAL_LTDC_MspInit+0x228>)
 8009c42:	f7f7 faf9 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8009c46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009c54:	2302      	movs	r3, #2
 8009c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009c58:	2309      	movs	r3, #9
 8009c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c60:	4619      	mov	r1, r3
 8009c62:	480c      	ldr	r0, [pc, #48]	; (8009c94 <HAL_LTDC_MspInit+0x220>)
 8009c64:	f7f7 fae8 	bl	8001238 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2105      	movs	r1, #5
 8009c6c:	2058      	movs	r0, #88	; 0x58
 8009c6e:	f7f6 fdca 	bl	8000806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8009c72:	2058      	movs	r0, #88	; 0x58
 8009c74:	f7f6 fde3 	bl	800083e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8009c78:	bf00      	nop
 8009c7a:	3738      	adds	r7, #56	; 0x38
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	40016800 	.word	0x40016800
 8009c84:	40023800 	.word	0x40023800
 8009c88:	40021400 	.word	0x40021400
 8009c8c:	40020000 	.word	0x40020000
 8009c90:	40020400 	.word	0x40020400
 8009c94:	40021800 	.word	0x40021800
 8009c98:	40020800 	.word	0x40020800
 8009c9c:	40020c00 	.word	0x40020c00

08009ca0 <HAL_LTDC_MspDeInit>:
* @param hltdc: LTDC handle pointer
* @retval None
*/

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* hltdc)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

  if(hltdc->Instance==LTDC)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a16      	ldr	r2, [pc, #88]	; (8009d08 <HAL_LTDC_MspDeInit+0x68>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d125      	bne.n	8009cfe <HAL_LTDC_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8009cb2:	4a16      	ldr	r2, [pc, #88]	; (8009d0c <HAL_LTDC_MspDeInit+0x6c>)
 8009cb4:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <HAL_LTDC_MspDeInit+0x6c>)
 8009cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009cbc:	6453      	str	r3, [r2, #68]	; 0x44
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 8009cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009cc2:	4813      	ldr	r0, [pc, #76]	; (8009d10 <HAL_LTDC_MspDeInit+0x70>)
 8009cc4:	f7f7 fc62 	bl	800158c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8009cc8:	f641 0158 	movw	r1, #6232	; 0x1858
 8009ccc:	4811      	ldr	r0, [pc, #68]	; (8009d14 <HAL_LTDC_MspDeInit+0x74>)
 8009cce:	f7f7 fc5d 	bl	800158c <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8009cd2:	f640 7103 	movw	r1, #3843	; 0xf03
 8009cd6:	4810      	ldr	r0, [pc, #64]	; (8009d18 <HAL_LTDC_MspDeInit+0x78>)
 8009cd8:	f7f7 fc58 	bl	800158c <HAL_GPIO_DeInit>
                          |GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11 
 8009cdc:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 8009ce0:	480e      	ldr	r0, [pc, #56]	; (8009d1c <HAL_LTDC_MspDeInit+0x7c>)
 8009ce2:	f7f7 fc53 	bl	800158c <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10);
 8009ce6:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8009cea:	480d      	ldr	r0, [pc, #52]	; (8009d20 <HAL_LTDC_MspDeInit+0x80>)
 8009cec:	f7f7 fc4e 	bl	800158c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_3|GPIO_PIN_6);
 8009cf0:	2148      	movs	r1, #72	; 0x48
 8009cf2:	480c      	ldr	r0, [pc, #48]	; (8009d24 <HAL_LTDC_MspDeInit+0x84>)
 8009cf4:	f7f7 fc4a 	bl	800158c <HAL_GPIO_DeInit>

    /* LTDC interrupt DeInit */
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8009cf8:	2058      	movs	r0, #88	; 0x58
 8009cfa:	f7f6 fdae 	bl	800085a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }

}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	40016800 	.word	0x40016800
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	40021400 	.word	0x40021400
 8009d14:	40020000 	.word	0x40020000
 8009d18:	40020400 	.word	0x40020400
 8009d1c:	40021800 	.word	0x40021800
 8009d20:	40020800 	.word	0x40020800
 8009d24:	40020c00 	.word	0x40020c00

08009d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	605a      	str	r2, [r3, #4]
 8009d3a:	609a      	str	r2, [r3, #8]
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a19      	ldr	r2, [pc, #100]	; (8009dac <HAL_SPI_MspInit+0x84>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d12c      	bne.n	8009da4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	613b      	str	r3, [r7, #16]
 8009d4e:	4a18      	ldr	r2, [pc, #96]	; (8009db0 <HAL_SPI_MspInit+0x88>)
 8009d50:	4b17      	ldr	r3, [pc, #92]	; (8009db0 <HAL_SPI_MspInit+0x88>)
 8009d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d58:	6453      	str	r3, [r2, #68]	; 0x44
 8009d5a:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <HAL_SPI_MspInit+0x88>)
 8009d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d62:	613b      	str	r3, [r7, #16]
 8009d64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	4a11      	ldr	r2, [pc, #68]	; (8009db0 <HAL_SPI_MspInit+0x88>)
 8009d6c:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <HAL_SPI_MspInit+0x88>)
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d70:	f043 0320 	orr.w	r3, r3, #32
 8009d74:	6313      	str	r3, [r2, #48]	; 0x30
 8009d76:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <HAL_SPI_MspInit+0x88>)
 8009d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8009d82:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d90:	2303      	movs	r3, #3
 8009d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8009d94:	2305      	movs	r3, #5
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009d98:	f107 0314 	add.w	r3, r7, #20
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4805      	ldr	r0, [pc, #20]	; (8009db4 <HAL_SPI_MspInit+0x8c>)
 8009da0:	f7f7 fa4a 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8009da4:	bf00      	nop
 8009da6:	3728      	adds	r7, #40	; 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	40015000 	.word	0x40015000
 8009db0:	40023800 	.word	0x40023800
 8009db4:	40021400 	.word	0x40021400

08009db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM6)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a0e      	ldr	r2, [pc, #56]	; (8009e00 <HAL_TIM_Base_MspInit+0x48>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d115      	bne.n	8009df6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	4a0d      	ldr	r2, [pc, #52]	; (8009e04 <HAL_TIM_Base_MspInit+0x4c>)
 8009dd0:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <HAL_TIM_Base_MspInit+0x4c>)
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd4:	f043 0310 	orr.w	r3, r3, #16
 8009dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8009dda:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <HAL_TIM_Base_MspInit+0x4c>)
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	f003 0310 	and.w	r3, r3, #16
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8009de6:	2200      	movs	r2, #0
 8009de8:	2105      	movs	r1, #5
 8009dea:	2036      	movs	r0, #54	; 0x36
 8009dec:	f7f6 fd0b 	bl	8000806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009df0:	2036      	movs	r0, #54	; 0x36
 8009df2:	f7f6 fd24 	bl	800083e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8009df6:	bf00      	nop
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	40001000 	.word	0x40001000
 8009e04:	40023800 	.word	0x40023800

08009e08 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8009e0e:	4b3c      	ldr	r3, [pc, #240]	; (8009f00 <HAL_FMC_MspInit+0xf8>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d16f      	bne.n	8009ef6 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8009e16:	4b3a      	ldr	r3, [pc, #232]	; (8009f00 <HAL_FMC_MspInit+0xf8>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	4a38      	ldr	r2, [pc, #224]	; (8009f04 <HAL_FMC_MspInit+0xfc>)
 8009e22:	4b38      	ldr	r3, [pc, #224]	; (8009f04 <HAL_FMC_MspInit+0xfc>)
 8009e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	6393      	str	r3, [r2, #56]	; 0x38
 8009e2c:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <HAL_FMC_MspInit+0xfc>)
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009e38:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009e3c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e46:	2303      	movs	r3, #3
 8009e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009e4e:	1d3b      	adds	r3, r7, #4
 8009e50:	4619      	mov	r1, r3
 8009e52:	482d      	ldr	r0, [pc, #180]	; (8009f08 <HAL_FMC_MspInit+0x100>)
 8009e54:	f7f7 f9f0 	bl	8001238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e64:	2303      	movs	r3, #3
 8009e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e68:	230c      	movs	r3, #12
 8009e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e6c:	1d3b      	adds	r3, r7, #4
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4826      	ldr	r0, [pc, #152]	; (8009f0c <HAL_FMC_MspInit+0x104>)
 8009e72:	f7f7 f9e1 	bl	8001238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8009e76:	f248 1333 	movw	r3, #33075	; 0x8133
 8009e7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e84:	2303      	movs	r3, #3
 8009e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e88:	230c      	movs	r3, #12
 8009e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009e8c:	1d3b      	adds	r3, r7, #4
 8009e8e:	4619      	mov	r1, r3
 8009e90:	481f      	ldr	r0, [pc, #124]	; (8009f10 <HAL_FMC_MspInit+0x108>)
 8009e92:	f7f7 f9d1 	bl	8001238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8009e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009e9a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009eac:	1d3b      	adds	r3, r7, #4
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4818      	ldr	r0, [pc, #96]	; (8009f14 <HAL_FMC_MspInit+0x10c>)
 8009eb2:	f7f7 f9c1 	bl	8001238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8009eb6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009eba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009ec8:	230c      	movs	r3, #12
 8009eca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ecc:	1d3b      	adds	r3, r7, #4
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4811      	ldr	r0, [pc, #68]	; (8009f18 <HAL_FMC_MspInit+0x110>)
 8009ed2:	f7f7 f9b1 	bl	8001238 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009ed6:	2360      	movs	r3, #96	; 0x60
 8009ed8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eda:	2302      	movs	r3, #2
 8009edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009eea:	1d3b      	adds	r3, r7, #4
 8009eec:	4619      	mov	r1, r3
 8009eee:	480b      	ldr	r0, [pc, #44]	; (8009f1c <HAL_FMC_MspInit+0x114>)
 8009ef0:	f7f7 f9a2 	bl	8001238 <HAL_GPIO_Init>
 8009ef4:	e000      	b.n	8009ef8 <HAL_FMC_MspInit+0xf0>
    return;
 8009ef6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	2002675c 	.word	0x2002675c
 8009f04:	40023800 	.word	0x40023800
 8009f08:	40021400 	.word	0x40021400
 8009f0c:	40020800 	.word	0x40020800
 8009f10:	40021800 	.word	0x40021800
 8009f14:	40021000 	.word	0x40021000
 8009f18:	40020c00 	.word	0x40020c00
 8009f1c:	40020400 	.word	0x40020400

08009f20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009f28:	f7ff ff6e 	bl	8009e08 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009f38:	bf00      	nop
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009f42:	b480      	push	{r7}
 8009f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009f46:	e7fe      	b.n	8009f46 <HardFault_Handler+0x4>

08009f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009f4c:	e7fe      	b.n	8009f4c <MemManage_Handler+0x4>

08009f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009f52:	e7fe      	b.n	8009f52 <BusFault_Handler+0x4>

08009f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009f58:	e7fe      	b.n	8009f58 <UsageFault_Handler+0x4>

08009f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009f5e:	bf00      	nop
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009f6c:	f7f6 fb1a 	bl	80005a4 <HAL_IncTick>
  osSystickHandler();
 8009f70:	f7fa fe34 	bl	8004bdc <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  OS_TimeMS++;
 8009f74:	4b03      	ldr	r3, [pc, #12]	; (8009f84 <SysTick_Handler+0x1c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	4a02      	ldr	r2, [pc, #8]	; (8009f84 <SysTick_Handler+0x1c>)
 8009f7c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8009f7e:	bf00      	nop
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200269dc 	.word	0x200269dc

08009f88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8009f8c:	4802      	ldr	r0, [pc, #8]	; (8009f98 <DMA1_Stream2_IRQHandler+0x10>)
 8009f8e:	f7f6 fd2d 	bl	80009ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8009f92:	bf00      	nop
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20026b40 	.word	0x20026b40

08009f9c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8009fa0:	4802      	ldr	r0, [pc, #8]	; (8009fac <DMA1_Stream4_IRQHandler+0x10>)
 8009fa2:	f7f6 fd23 	bl	80009ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009fa6:	bf00      	nop
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20026a88 	.word	0x20026a88

08009fb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009fb6:	4811      	ldr	r0, [pc, #68]	; (8009ffc <TIM6_DAC_IRQHandler+0x4c>)
 8009fb8:	f7fa fa37 	bl	800442a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  GUI_PID_STATE pidState;
  tp_state_t tpState;
  static uint8_t prevState = 0;

  TP_GetState(&tpState);
 8009fbc:	1d3b      	adds	r3, r7, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fa7c 	bl	800a4bc <TP_GetState>

  if (tpState.touchDetected)
 8009fc4:	793b      	ldrb	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d005      	beq.n	8009fd6 <TIM6_DAC_IRQHandler+0x26>
  {
	  pidState.Pressed = tpState.touchDetected;
 8009fca:	793b      	ldrb	r3, [r7, #4]
 8009fcc:	753b      	strb	r3, [r7, #20]
	  pidState.x = tpState.x;
 8009fce:	88fb      	ldrh	r3, [r7, #6]
 8009fd0:	60fb      	str	r3, [r7, #12]
	  pidState.y = tpState.y;
 8009fd2:	893b      	ldrh	r3, [r7, #8]
 8009fd4:	613b      	str	r3, [r7, #16]
  }

  if (prevState != tpState.touchDetected)
 8009fd6:	793a      	ldrb	r2, [r7, #4]
 8009fd8:	4b09      	ldr	r3, [pc, #36]	; (800a000 <TIM6_DAC_IRQHandler+0x50>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d009      	beq.n	8009ff4 <TIM6_DAC_IRQHandler+0x44>
  {
	  prevState = tpState.touchDetected;
 8009fe0:	793a      	ldrb	r2, [r7, #4]
 8009fe2:	4b07      	ldr	r3, [pc, #28]	; (800a000 <TIM6_DAC_IRQHandler+0x50>)
 8009fe4:	701a      	strb	r2, [r3, #0]
	  pidState.Layer = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	757b      	strb	r3, [r7, #21]
	  GUI_TOUCH_StoreStateEx(&pidState);
 8009fea:	f107 030c 	add.w	r3, r7, #12
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f003 fd1a 	bl	800da28 <GUI_TOUCH_StoreStateEx>
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009ff4:	bf00      	nop
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20026bf8 	.word	0x20026bf8
 800a000:	20026760 	.word	0x20026760

0800a004 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800a008:	4802      	ldr	r0, [pc, #8]	; (800a014 <LTDC_IRQHandler+0x10>)
 800a00a:	f7f8 fc61 	bl	80028d0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800a00e:	bf00      	nop
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200269e0 	.word	0x200269e0

0800a018 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800a01c:	4802      	ldr	r0, [pc, #8]	; (800a028 <DMA2D_IRQHandler+0x10>)
 800a01e:	f7f6 ff68 	bl	8000ef2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	20026c34 	.word	0x20026c34

0800a02c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a030:	4a16      	ldr	r2, [pc, #88]	; (800a08c <SystemInit+0x60>)
 800a032:	4b16      	ldr	r3, [pc, #88]	; (800a08c <SystemInit+0x60>)
 800a034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a03c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a040:	4a13      	ldr	r2, [pc, #76]	; (800a090 <SystemInit+0x64>)
 800a042:	4b13      	ldr	r3, [pc, #76]	; (800a090 <SystemInit+0x64>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a04c:	4b10      	ldr	r3, [pc, #64]	; (800a090 <SystemInit+0x64>)
 800a04e:	2200      	movs	r2, #0
 800a050:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a052:	4a0f      	ldr	r2, [pc, #60]	; (800a090 <SystemInit+0x64>)
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <SystemInit+0x64>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a05c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a060:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a062:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <SystemInit+0x64>)
 800a064:	4a0b      	ldr	r2, [pc, #44]	; (800a094 <SystemInit+0x68>)
 800a066:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <SystemInit+0x64>)
 800a06a:	4b09      	ldr	r3, [pc, #36]	; (800a090 <SystemInit+0x64>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a072:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <SystemInit+0x64>)
 800a076:	2200      	movs	r2, #0
 800a078:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a07a:	4b04      	ldr	r3, [pc, #16]	; (800a08c <SystemInit+0x60>)
 800a07c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a080:	609a      	str	r2, [r3, #8]
#endif
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	e000ed00 	.word	0xe000ed00
 800a090:	40023800 	.word	0x40023800
 800a094:	24003010 	.word	0x24003010

0800a098 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 800a09e:	2300      	movs	r3, #0
 800a0a0:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a0aa:	1d3a      	adds	r2, r7, #4
 800a0ac:	2364      	movs	r3, #100	; 0x64
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	2182      	movs	r1, #130	; 0x82
 800a0b4:	480b      	ldr	r0, [pc, #44]	; (800a0e4 <touchReset+0x4c>)
 800a0b6:	f7f7 fc6f 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a0ba:	2014      	movs	r0, #20
 800a0bc:	f7f6 fa92 	bl	80005e4 <HAL_Delay>
	sendBuf[1] = 0x00;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a0c4:	1d3a      	adds	r2, r7, #4
 800a0c6:	2364      	movs	r3, #100	; 0x64
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	2182      	movs	r1, #130	; 0x82
 800a0ce:	4805      	ldr	r0, [pc, #20]	; (800a0e4 <touchReset+0x4c>)
 800a0d0:	f7f7 fc62 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a0d4:	2014      	movs	r0, #20
 800a0d6:	f7f6 fa85 	bl	80005e4 <HAL_Delay>
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	20026aec 	.word	0x20026aec

0800a0e8 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	71fb      	strb	r3, [r7, #7]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 800a100:	2304      	movs	r3, #4
 800a102:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 800a104:	f107 020c 	add.w	r2, r7, #12
 800a108:	2364      	movs	r3, #100	; 0x64
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	2301      	movs	r3, #1
 800a10e:	2182      	movs	r1, #130	; 0x82
 800a110:	4817      	ldr	r0, [pc, #92]	; (800a170 <fnctCmd+0x88>)
 800a112:	f7f7 fc41 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 800a116:	f107 020c 	add.w	r2, r7, #12
 800a11a:	2364      	movs	r3, #100	; 0x64
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	2301      	movs	r3, #1
 800a120:	2182      	movs	r1, #130	; 0x82
 800a122:	4813      	ldr	r0, [pc, #76]	; (800a170 <fnctCmd+0x88>)
 800a124:	f7f7 fd46 	bl	8001bb4 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 800a128:	7b3b      	ldrb	r3, [r7, #12]
 800a12a:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 800a12c:	79bb      	ldrb	r3, [r7, #6]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d009      	beq.n	800a146 <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 800a132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a136:	43db      	mvns	r3, r3
 800a138:	b25a      	sxtb	r2, r3
 800a13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a13e:	4013      	ands	r3, r2
 800a140:	b25b      	sxtb	r3, r3
 800a142:	73fb      	strb	r3, [r7, #15]
 800a144:	e003      	b.n	800a14e <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 800a146:	7bfa      	ldrb	r2, [r7, #15]
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 800a14e:	2304      	movs	r3, #4
 800a150:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a156:	f107 020c 	add.w	r2, r7, #12
 800a15a:	2364      	movs	r3, #100	; 0x64
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	2302      	movs	r3, #2
 800a160:	2182      	movs	r1, #130	; 0x82
 800a162:	4803      	ldr	r0, [pc, #12]	; (800a170 <fnctCmd+0x88>)
 800a164:	f7f7 fc18 	bl	8001998 <HAL_I2C_Master_Transmit>
}
 800a168:	bf00      	nop
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	20026aec 	.word	0x20026aec

0800a174 <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af02      	add	r7, sp, #8
 800a17a:	4603      	mov	r3, r0
 800a17c:	460a      	mov	r2, r1
 800a17e:	71fb      	strb	r3, [r7, #7]
 800a180:	4613      	mov	r3, r2
 800a182:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 800a188:	2300      	movs	r3, #0
 800a18a:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 800a18c:	2317      	movs	r3, #23
 800a18e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 800a190:	f107 020c 	add.w	r2, r7, #12
 800a194:	2364      	movs	r3, #100	; 0x64
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	2301      	movs	r3, #1
 800a19a:	2182      	movs	r1, #130	; 0x82
 800a19c:	4817      	ldr	r0, [pc, #92]	; (800a1fc <ioAFConfig+0x88>)
 800a19e:	f7f7 fbfb 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 800a1a2:	f107 020c 	add.w	r2, r7, #12
 800a1a6:	2364      	movs	r3, #100	; 0x64
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	2182      	movs	r1, #130	; 0x82
 800a1ae:	4813      	ldr	r0, [pc, #76]	; (800a1fc <ioAFConfig+0x88>)
 800a1b0:	f7f7 fd00 	bl	8001bb4 <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 800a1b4:	7b3b      	ldrb	r3, [r7, #12]
 800a1b6:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 800a1b8:	79bb      	ldrb	r3, [r7, #6]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d004      	beq.n	800a1c8 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 800a1be:	7bfa      	ldrb	r2, [r7, #15]
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	73fb      	strb	r3, [r7, #15]
 800a1c6:	e008      	b.n	800a1da <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 800a1c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	b25a      	sxtb	r2, r3
 800a1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	b25b      	sxtb	r3, r3
 800a1d8:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 800a1da:	2317      	movs	r3, #23
 800a1dc:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a1e2:	f107 020c 	add.w	r2, r7, #12
 800a1e6:	2364      	movs	r3, #100	; 0x64
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	2182      	movs	r1, #130	; 0x82
 800a1ee:	4803      	ldr	r0, [pc, #12]	; (800a1fc <ioAFConfig+0x88>)
 800a1f0:	f7f7 fbd2 	bl	8001998 <HAL_I2C_Master_Transmit>
}
 800a1f4:	bf00      	nop
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20026aec 	.word	0x20026aec

0800a200 <readX>:

static void readX(uint16_t *x)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af02      	add	r7, sp, #8
 800a206:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 800a208:	234d      	movs	r3, #77	; 0x4d
 800a20a:	723b      	strb	r3, [r7, #8]
 800a20c:	2300      	movs	r3, #0
 800a20e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800a210:	f107 0208 	add.w	r2, r7, #8
 800a214:	2364      	movs	r3, #100	; 0x64
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	2301      	movs	r3, #1
 800a21a:	2182      	movs	r1, #130	; 0x82
 800a21c:	481f      	ldr	r0, [pc, #124]	; (800a29c <readX+0x9c>)
 800a21e:	f7f7 fbbb 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800a222:	f107 0208 	add.w	r2, r7, #8
 800a226:	2364      	movs	r3, #100	; 0x64
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	2302      	movs	r3, #2
 800a22c:	2182      	movs	r1, #130	; 0x82
 800a22e:	481b      	ldr	r0, [pc, #108]	; (800a29c <readX+0x9c>)
 800a230:	f7f7 fcc0 	bl	8001bb4 <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 800a234:	7a3b      	ldrb	r3, [r7, #8]
 800a236:	021b      	lsls	r3, r3, #8
 800a238:	7a7a      	ldrb	r2, [r7, #9]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a244:	4293      	cmp	r3, r2
 800a246:	dc05      	bgt.n	800a254 <readX+0x54>
	{
		_x = 3870 - _x;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800a24e:	330e      	adds	r3, #14
 800a250:	60fb      	str	r3, [r7, #12]
 800a252:	e004      	b.n	800a25e <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800a25a:	3308      	adds	r3, #8
 800a25c:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4a0f      	ldr	r2, [pc, #60]	; (800a2a0 <readX+0xa0>)
 800a262:	fb82 1203 	smull	r1, r2, r2, r3
 800a266:	441a      	add	r2, r3
 800a268:	10d2      	asrs	r2, r2, #3
 800a26a:	17db      	asrs	r3, r3, #31
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	b29a      	uxth	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d103      	bne.n	800a284 <readX+0x84>
	{
		*x = 0;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 800a282:	e006      	b.n	800a292 <readX+0x92>
	else if (*x > 240)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	2bf0      	cmp	r3, #240	; 0xf0
 800a28a:	d902      	bls.n	800a292 <readX+0x92>
		*x = 239;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	22ef      	movs	r2, #239	; 0xef
 800a290:	801a      	strh	r2, [r3, #0]
}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20026aec 	.word	0x20026aec
 800a2a0:	88888889 	.word	0x88888889

0800a2a4 <readY>:

static void readY(uint16_t *y)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b086      	sub	sp, #24
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 800a2ac:	234f      	movs	r3, #79	; 0x4f
 800a2ae:	723b      	strb	r3, [r7, #8]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800a2b4:	f107 0208 	add.w	r2, r7, #8
 800a2b8:	2364      	movs	r3, #100	; 0x64
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	2301      	movs	r3, #1
 800a2be:	2182      	movs	r1, #130	; 0x82
 800a2c0:	4819      	ldr	r0, [pc, #100]	; (800a328 <readY+0x84>)
 800a2c2:	f7f7 fb69 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800a2c6:	f107 0208 	add.w	r2, r7, #8
 800a2ca:	2364      	movs	r3, #100	; 0x64
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	2182      	movs	r1, #130	; 0x82
 800a2d2:	4815      	ldr	r0, [pc, #84]	; (800a328 <readY+0x84>)
 800a2d4:	f7f7 fc6e 	bl	8001bb4 <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 800a2d8:	7a3b      	ldrb	r3, [r7, #8]
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	7a7a      	ldrb	r2, [r7, #9]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800a2e8:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	4a0f      	ldr	r2, [pc, #60]	; (800a32c <readY+0x88>)
 800a2ee:	fb82 1203 	smull	r1, r2, r2, r3
 800a2f2:	1052      	asrs	r2, r2, #1
 800a2f4:	17db      	asrs	r3, r3, #31
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <readY+0x6a>
	{
		*y = 0;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 800a30c:	e008      	b.n	800a320 <readY+0x7c>
	else if (*y > 320)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a316:	d903      	bls.n	800a320 <readY+0x7c>
		*y = 319;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f240 123f 	movw	r2, #319	; 0x13f
 800a31e:	801a      	strh	r2, [r3, #0]
}
 800a320:	bf00      	nop
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	20026aec 	.word	0x20026aec
 800a32c:	2e8ba2e9 	.word	0x2e8ba2e9

0800a330 <readZ>:

static void readZ(uint16_t *z)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b086      	sub	sp, #24
 800a334:	af02      	add	r7, sp, #8
 800a336:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 800a338:	2351      	movs	r3, #81	; 0x51
 800a33a:	733b      	strb	r3, [r7, #12]
 800a33c:	2300      	movs	r3, #0
 800a33e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800a340:	f107 020c 	add.w	r2, r7, #12
 800a344:	2364      	movs	r3, #100	; 0x64
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	2301      	movs	r3, #1
 800a34a:	2182      	movs	r1, #130	; 0x82
 800a34c:	4810      	ldr	r0, [pc, #64]	; (800a390 <readZ+0x60>)
 800a34e:	f7f7 fb23 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800a352:	f107 020c 	add.w	r2, r7, #12
 800a356:	2364      	movs	r3, #100	; 0x64
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	2302      	movs	r3, #2
 800a35c:	2182      	movs	r1, #130	; 0x82
 800a35e:	480c      	ldr	r0, [pc, #48]	; (800a390 <readZ+0x60>)
 800a360:	f7f7 fc28 	bl	8001bb4 <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 800a364:	7b3b      	ldrb	r3, [r7, #12]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	b21a      	sxth	r2, r3
 800a36a:	7b7b      	ldrb	r3, [r7, #13]
 800a36c:	b21b      	sxth	r3, r3
 800a36e:	4313      	orrs	r3, r2
 800a370:	b21b      	sxth	r3, r3
 800a372:	b29a      	uxth	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d102      	bne.n	800a386 <readZ+0x56>
	{
		*z = 0;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	801a      	strh	r2, [r3, #0]
	}
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20026aec 	.word	0x20026aec

0800a394 <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af02      	add	r7, sp, #8
	touchReset();
 800a39a:	f7ff fe7d 	bl	800a098 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 800a39e:	2101      	movs	r1, #1
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	f7ff fea1 	bl	800a0e8 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	2002      	movs	r0, #2
 800a3aa:	f7ff fe9d 	bl	800a0e8 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 800a3ae:	4b41      	ldr	r3, [pc, #260]	; (800a4b4 <TP_Config+0x120>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a3b4:	1d3a      	adds	r2, r7, #4
 800a3b6:	2364      	movs	r3, #100	; 0x64
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	2182      	movs	r1, #130	; 0x82
 800a3be:	483e      	ldr	r0, [pc, #248]	; (800a4b8 <TP_Config+0x124>)
 800a3c0:	f7f7 faea 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a3c4:	2014      	movs	r0, #20
 800a3c6:	f7f6 f90d 	bl	80005e4 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 800a3ca:	2321      	movs	r3, #33	; 0x21
 800a3cc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a3d2:	1d3a      	adds	r2, r7, #4
 800a3d4:	2364      	movs	r3, #100	; 0x64
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	2302      	movs	r3, #2
 800a3da:	2182      	movs	r1, #130	; 0x82
 800a3dc:	4836      	ldr	r0, [pc, #216]	; (800a4b8 <TP_Config+0x124>)
 800a3de:	f7f7 fadb 	bl	8001998 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	201e      	movs	r0, #30
 800a3e6:	f7ff fec5 	bl	800a174 <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 800a3ea:	2341      	movs	r3, #65	; 0x41
 800a3ec:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 800a3ee:	239a      	movs	r3, #154	; 0x9a
 800a3f0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a3f2:	1d3a      	adds	r2, r7, #4
 800a3f4:	2364      	movs	r3, #100	; 0x64
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	2182      	movs	r1, #130	; 0x82
 800a3fc:	482e      	ldr	r0, [pc, #184]	; (800a4b8 <TP_Config+0x124>)
 800a3fe:	f7f7 facb 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 800a402:	234a      	movs	r3, #74	; 0x4a
 800a404:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800a406:	2301      	movs	r3, #1
 800a408:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a40a:	1d3a      	adds	r2, r7, #4
 800a40c:	2364      	movs	r3, #100	; 0x64
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	2302      	movs	r3, #2
 800a412:	2182      	movs	r1, #130	; 0x82
 800a414:	4828      	ldr	r0, [pc, #160]	; (800a4b8 <TP_Config+0x124>)
 800a416:	f7f7 fabf 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 800a41a:	234b      	movs	r3, #75	; 0x4b
 800a41c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800a41e:	2301      	movs	r3, #1
 800a420:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a422:	1d3a      	adds	r2, r7, #4
 800a424:	2364      	movs	r3, #100	; 0x64
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	2302      	movs	r3, #2
 800a42a:	2182      	movs	r1, #130	; 0x82
 800a42c:	4822      	ldr	r0, [pc, #136]	; (800a4b8 <TP_Config+0x124>)
 800a42e:	f7f7 fab3 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 800a432:	234b      	movs	r3, #75	; 0x4b
 800a434:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 800a436:	2300      	movs	r3, #0
 800a438:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a43a:	1d3a      	adds	r2, r7, #4
 800a43c:	2364      	movs	r3, #100	; 0x64
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	2302      	movs	r3, #2
 800a442:	2182      	movs	r1, #130	; 0x82
 800a444:	481c      	ldr	r0, [pc, #112]	; (800a4b8 <TP_Config+0x124>)
 800a446:	f7f7 faa7 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 800a44a:	2356      	movs	r3, #86	; 0x56
 800a44c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800a44e:	2301      	movs	r3, #1
 800a450:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a452:	1d3a      	adds	r2, r7, #4
 800a454:	2364      	movs	r3, #100	; 0x64
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2302      	movs	r3, #2
 800a45a:	2182      	movs	r1, #130	; 0x82
 800a45c:	4816      	ldr	r0, [pc, #88]	; (800a4b8 <TP_Config+0x124>)
 800a45e:	f7f7 fa9b 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 800a462:	2358      	movs	r3, #88	; 0x58
 800a464:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800a466:	2301      	movs	r3, #1
 800a468:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a46a:	1d3a      	adds	r2, r7, #4
 800a46c:	2364      	movs	r3, #100	; 0x64
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2302      	movs	r3, #2
 800a472:	2182      	movs	r1, #130	; 0x82
 800a474:	4810      	ldr	r0, [pc, #64]	; (800a4b8 <TP_Config+0x124>)
 800a476:	f7f7 fa8f 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 800a47a:	2340      	movs	r3, #64	; 0x40
 800a47c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 800a47e:	2303      	movs	r3, #3
 800a480:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a482:	1d3a      	adds	r2, r7, #4
 800a484:	2364      	movs	r3, #100	; 0x64
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2302      	movs	r3, #2
 800a48a:	2182      	movs	r1, #130	; 0x82
 800a48c:	480a      	ldr	r0, [pc, #40]	; (800a4b8 <TP_Config+0x124>)
 800a48e:	f7f7 fa83 	bl	8001998 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 800a492:	230b      	movs	r3, #11
 800a494:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 800a496:	23ff      	movs	r3, #255	; 0xff
 800a498:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800a49a:	1d3a      	adds	r2, r7, #4
 800a49c:	2364      	movs	r3, #100	; 0x64
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	2182      	movs	r1, #130	; 0x82
 800a4a4:	4804      	ldr	r0, [pc, #16]	; (800a4b8 <TP_Config+0x124>)
 800a4a6:	f7f7 fa77 	bl	8001998 <HAL_I2C_Master_Transmit>

}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	08012d54 	.word	0x08012d54
 800a4b8:	20026aec 	.word	0x20026aec

0800a4bc <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af02      	add	r7, sp, #8
 800a4c2:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 800a4c4:	2340      	movs	r3, #64	; 0x40
 800a4c6:	733b      	strb	r3, [r7, #12]
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800a4cc:	f107 020c 	add.w	r2, r7, #12
 800a4d0:	2364      	movs	r3, #100	; 0x64
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	2182      	movs	r1, #130	; 0x82
 800a4d8:	483b      	ldr	r0, [pc, #236]	; (800a5c8 <TP_GetState+0x10c>)
 800a4da:	f7f7 fa5d 	bl	8001998 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 800a4de:	f107 020c 	add.w	r2, r7, #12
 800a4e2:	2364      	movs	r3, #100	; 0x64
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	2182      	movs	r1, #130	; 0x82
 800a4ea:	4837      	ldr	r0, [pc, #220]	; (800a5c8 <TP_GetState+0x10c>)
 800a4ec:	f7f7 fb62 	bl	8001bb4 <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 800a4f0:	7b3b      	ldrb	r3, [r7, #12]
 800a4f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d039      	beq.n	800a578 <TP_GetState+0xbc>
	{
		readX(&x);
 800a504:	f107 0312 	add.w	r3, r7, #18
 800a508:	4618      	mov	r0, r3
 800a50a:	f7ff fe79 	bl	800a200 <readX>
		readY(&y);
 800a50e:	f107 0310 	add.w	r3, r7, #16
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fec6 	bl	800a2a4 <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 800a518:	8a7a      	ldrh	r2, [r7, #18]
 800a51a:	4b2c      	ldr	r3, [pc, #176]	; (800a5cc <TP_GetState+0x110>)
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d905      	bls.n	800a52e <TP_GetState+0x72>
 800a522:	8a7a      	ldrh	r2, [r7, #18]
 800a524:	4b29      	ldr	r3, [pc, #164]	; (800a5cc <TP_GetState+0x110>)
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	e004      	b.n	800a538 <TP_GetState+0x7c>
 800a52e:	4b27      	ldr	r3, [pc, #156]	; (800a5cc <TP_GetState+0x110>)
 800a530:	881a      	ldrh	r2, [r3, #0]
 800a532:	8a7b      	ldrh	r3, [r7, #18]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	b29b      	uxth	r3, r3
 800a538:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 800a53a:	8a3a      	ldrh	r2, [r7, #16]
 800a53c:	4b24      	ldr	r3, [pc, #144]	; (800a5d0 <TP_GetState+0x114>)
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d905      	bls.n	800a550 <TP_GetState+0x94>
 800a544:	8a3a      	ldrh	r2, [r7, #16]
 800a546:	4b22      	ldr	r3, [pc, #136]	; (800a5d0 <TP_GetState+0x114>)
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	e004      	b.n	800a55a <TP_GetState+0x9e>
 800a550:	4b1f      	ldr	r3, [pc, #124]	; (800a5d0 <TP_GetState+0x114>)
 800a552:	881a      	ldrh	r2, [r3, #0]
 800a554:	8a3b      	ldrh	r3, [r7, #16]
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	b29b      	uxth	r3, r3
 800a55a:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 800a55c:	8afa      	ldrh	r2, [r7, #22]
 800a55e:	8abb      	ldrh	r3, [r7, #20]
 800a560:	4413      	add	r3, r2
 800a562:	2b05      	cmp	r3, #5
 800a564:	dd05      	ble.n	800a572 <TP_GetState+0xb6>
		{
			_x = x;
 800a566:	8a7a      	ldrh	r2, [r7, #18]
 800a568:	4b18      	ldr	r3, [pc, #96]	; (800a5cc <TP_GetState+0x110>)
 800a56a:	801a      	strh	r2, [r3, #0]
			_y = y;
 800a56c:	8a3a      	ldrh	r2, [r7, #16]
 800a56e:	4b18      	ldr	r3, [pc, #96]	; (800a5d0 <TP_GetState+0x114>)
 800a570:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 800a572:	4818      	ldr	r0, [pc, #96]	; (800a5d4 <TP_GetState+0x118>)
 800a574:	f7ff fedc 	bl	800a330 <readZ>
	}

	state->x = _x;
 800a578:	4b14      	ldr	r3, [pc, #80]	; (800a5cc <TP_GetState+0x110>)
 800a57a:	881a      	ldrh	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 800a580:	4b13      	ldr	r3, [pc, #76]	; (800a5d0 <TP_GetState+0x114>)
 800a582:	881a      	ldrh	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 800a588:	4b12      	ldr	r3, [pc, #72]	; (800a5d4 <TP_GetState+0x118>)
 800a58a:	881a      	ldrh	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 800a590:	234b      	movs	r3, #75	; 0x4b
 800a592:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 800a594:	2301      	movs	r3, #1
 800a596:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800a598:	f107 020c 	add.w	r2, r7, #12
 800a59c:	2364      	movs	r3, #100	; 0x64
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	2182      	movs	r1, #130	; 0x82
 800a5a4:	4808      	ldr	r0, [pc, #32]	; (800a5c8 <TP_GetState+0x10c>)
 800a5a6:	f7f7 f9f7 	bl	8001998 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800a5ae:	f107 020c 	add.w	r2, r7, #12
 800a5b2:	2364      	movs	r3, #100	; 0x64
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	2182      	movs	r1, #130	; 0x82
 800a5ba:	4803      	ldr	r0, [pc, #12]	; (800a5c8 <TP_GetState+0x10c>)
 800a5bc:	f7f7 f9ec 	bl	8001998 <HAL_I2C_Master_Transmit>
}
 800a5c0:	bf00      	nop
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20026aec 	.word	0x20026aec
 800a5cc:	20026762 	.word	0x20026762
 800a5d0:	20026764 	.word	0x20026764
 800a5d4:	20026766 	.word	0x20026766

0800a5d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800a5d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a610 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a5dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a5de:	e003      	b.n	800a5e8 <LoopCopyDataInit>

0800a5e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a5e0:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a5e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a5e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a5e6:	3104      	adds	r1, #4

0800a5e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a5e8:	480b      	ldr	r0, [pc, #44]	; (800a618 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a5ea:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a5ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a5ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a5f0:	d3f6      	bcc.n	800a5e0 <CopyDataInit>
  ldr  r2, =_sbss
 800a5f2:	4a0b      	ldr	r2, [pc, #44]	; (800a620 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a5f4:	e002      	b.n	800a5fc <LoopFillZerobss>

0800a5f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a5f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a5f8:	f842 3b04 	str.w	r3, [r2], #4

0800a5fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a5fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a600:	d3f9      	bcc.n	800a5f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a602:	f7ff fd13 	bl	800a02c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a606:	f008 fafb 	bl	8012c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a60a:	f7fe fcc5 	bl	8008f98 <main>
  bx  lr    
 800a60e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800a610:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800a614:	080147e4 	.word	0x080147e4
  ldr  r0, =_sdata
 800a618:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a61c:	20000048 	.word	0x20000048
  ldr  r2, =_sbss
 800a620:	20000048 	.word	0x20000048
  ldr  r3, = _ebss
 800a624:	20026e44 	.word	0x20026e44

0800a628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a628:	e7fe      	b.n	800a628 <ADC_IRQHandler>
	...

0800a62c <WM__SendMessage>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	4c0d      	ldr	r4, [pc, #52]	; (800a664 <WM__SendMessage+0x38>)
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	2b13      	cmp	r3, #19
 800a634:	4606      	mov	r6, r0
 800a636:	460d      	mov	r5, r1
 800a638:	dc12      	bgt.n	800a660 <WM__SendMessage+0x34>
 800a63a:	f005 fdd7 	bl	80101ec <GUI_ALLOC_h2p>
 800a63e:	6903      	ldr	r3, [r0, #16]
 800a640:	606e      	str	r6, [r5, #4]
 800a642:	b143      	cbz	r3, 800a656 <WM__SendMessage+0x2a>
 800a644:	6822      	ldr	r2, [r4, #0]
 800a646:	4628      	mov	r0, r5
 800a648:	3201      	adds	r2, #1
 800a64a:	6022      	str	r2, [r4, #0]
 800a64c:	4798      	blx	r3
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	3b01      	subs	r3, #1
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	bd70      	pop	{r4, r5, r6, pc}
 800a656:	4628      	mov	r0, r5
 800a658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a65c:	f000 bdbc 	b.w	800b1d8 <WM_DefaultProc>
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	bf00      	nop
 800a664:	20026768 	.word	0x20026768

0800a668 <WM__IsEnabled>:
 800a668:	b508      	push	{r3, lr}
 800a66a:	f005 fdbf 	bl	80101ec <GUI_ALLOC_h2p>
 800a66e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a670:	f080 0010 	eor.w	r0, r0, #16
 800a674:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800a678:	bd08      	pop	{r3, pc}

0800a67a <WM__IsAncestor>:
 800a67a:	b510      	push	{r4, lr}
 800a67c:	460c      	mov	r4, r1
 800a67e:	b908      	cbnz	r0, 800a684 <WM__IsAncestor+0xa>
 800a680:	2000      	movs	r0, #0
 800a682:	bd10      	pop	{r4, pc}
 800a684:	2900      	cmp	r1, #0
 800a686:	d0fb      	beq.n	800a680 <WM__IsAncestor+0x6>
 800a688:	f005 fdb0 	bl	80101ec <GUI_ALLOC_h2p>
 800a68c:	6980      	ldr	r0, [r0, #24]
 800a68e:	42a0      	cmp	r0, r4
 800a690:	d002      	beq.n	800a698 <WM__IsAncestor+0x1e>
 800a692:	2800      	cmp	r0, #0
 800a694:	d1f8      	bne.n	800a688 <WM__IsAncestor+0xe>
 800a696:	e7f3      	b.n	800a680 <WM__IsAncestor+0x6>
 800a698:	2001      	movs	r0, #1
 800a69a:	bd10      	pop	{r4, pc}

0800a69c <WM__ReleaseCapture>:
 800a69c:	b530      	push	{r4, r5, lr}
 800a69e:	4d0a      	ldr	r5, [pc, #40]	; (800a6c8 <WM__ReleaseCapture+0x2c>)
 800a6a0:	4c0a      	ldr	r4, [pc, #40]	; (800a6cc <WM__ReleaseCapture+0x30>)
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	b150      	cbz	r0, 800a6c2 <WM__ReleaseCapture+0x26>
 800a6ac:	a904      	add	r1, sp, #16
 800a6ae:	2318      	movs	r3, #24
 800a6b0:	f841 3d10 	str.w	r3, [r1, #-16]!
 800a6b4:	4669      	mov	r1, sp
 800a6b6:	f7ff ffb9 	bl	800a62c <WM__SendMessage>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800a6c2:	b005      	add	sp, #20
 800a6c4:	bd30      	pop	{r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20026ce4 	.word	0x20026ce4
 800a6cc:	20026d00 	.word	0x20026d00

0800a6d0 <WM_ReleaseCapture>:
 800a6d0:	f7ff bfe4 	b.w	800a69c <WM__ReleaseCapture>

0800a6d4 <WM_IsWindow>:
 800a6d4:	f000 b9ee 	b.w	800aab4 <WM__IsWindow>

0800a6d8 <WM_GetParent>:
 800a6d8:	b508      	push	{r3, lr}
 800a6da:	4603      	mov	r3, r0
 800a6dc:	b110      	cbz	r0, 800a6e4 <WM_GetParent+0xc>
 800a6de:	f005 fd85 	bl	80101ec <GUI_ALLOC_h2p>
 800a6e2:	6983      	ldr	r3, [r0, #24]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	bd08      	pop	{r3, pc}

0800a6e8 <WM_GetFirstChild>:
 800a6e8:	b508      	push	{r3, lr}
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	b110      	cbz	r0, 800a6f4 <WM_GetFirstChild+0xc>
 800a6ee:	f005 fd7d 	bl	80101ec <GUI_ALLOC_h2p>
 800a6f2:	69c3      	ldr	r3, [r0, #28]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	bd08      	pop	{r3, pc}

0800a6f8 <WM_GetDesktopWindow>:
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <WM_GetDesktopWindow+0x10>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	7c5a      	ldrb	r2, [r3, #17]
 800a6fe:	4b03      	ldr	r3, [pc, #12]	; (800a70c <WM_GetDesktopWindow+0x14>)
 800a700:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	20000034 	.word	0x20000034
 800a70c:	20026cc4 	.word	0x20026cc4

0800a710 <_OnExit>:
 800a710:	4a0a      	ldr	r2, [pc, #40]	; (800a73c <_OnExit+0x2c>)
 800a712:	490b      	ldr	r1, [pc, #44]	; (800a740 <_OnExit+0x30>)
 800a714:	2300      	movs	r3, #0
 800a716:	7013      	strb	r3, [r2, #0]
 800a718:	4a0a      	ldr	r2, [pc, #40]	; (800a744 <_OnExit+0x34>)
 800a71a:	600b      	str	r3, [r1, #0]
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	4a0a      	ldr	r2, [pc, #40]	; (800a748 <_OnExit+0x38>)
 800a720:	604b      	str	r3, [r1, #4]
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	4a09      	ldr	r2, [pc, #36]	; (800a74c <_OnExit+0x3c>)
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	6053      	str	r3, [r2, #4]
 800a72a:	4a09      	ldr	r2, [pc, #36]	; (800a750 <_OnExit+0x40>)
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	4a09      	ldr	r2, [pc, #36]	; (800a754 <_OnExit+0x44>)
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	4a09      	ldr	r2, [pc, #36]	; (800a758 <_OnExit+0x48>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	4a09      	ldr	r2, [pc, #36]	; (800a75c <_OnExit+0x4c>)
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	4770      	bx	lr
 800a73c:	20026794 	.word	0x20026794
 800a740:	20026cd4 	.word	0x20026cd4
 800a744:	2002676c 	.word	0x2002676c
 800a748:	20026cf8 	.word	0x20026cf8
 800a74c:	20026d00 	.word	0x20026d00
 800a750:	20026d0c 	.word	0x20026d0c
 800a754:	20026cc0 	.word	0x20026cc0
 800a758:	20026cec 	.word	0x20026cec
 800a75c:	20026cfc 	.word	0x20026cfc

0800a760 <_Findy1>:
 800a760:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a762:	4605      	mov	r5, r0
 800a764:	b085      	sub	sp, #20
 800a766:	460c      	mov	r4, r1
 800a768:	4616      	mov	r6, r2
 800a76a:	2d00      	cmp	r5, #0
 800a76c:	d04c      	beq.n	800a808 <_Findy1+0xa8>
 800a76e:	4628      	mov	r0, r5
 800a770:	f005 fd46 	bl	8010200 <GUI_ALLOC_LockH>
 800a774:	6a87      	ldr	r7, [r0, #40]	; 0x28
 800a776:	9001      	str	r0, [sp, #4]
 800a778:	07bb      	lsls	r3, r7, #30
 800a77a:	4601      	mov	r1, r0
 800a77c:	d53d      	bpl.n	800a7fa <_Findy1+0x9a>
 800a77e:	ad02      	add	r5, sp, #8
 800a780:	b126      	cbz	r6, 800a78c <_Findy1+0x2c>
 800a782:	4628      	mov	r0, r5
 800a784:	4632      	mov	r2, r6
 800a786:	f002 ff01 	bl	800d58c <GUI__IntersectRects>
 800a78a:	e002      	b.n	800a792 <_Findy1+0x32>
 800a78c:	c803      	ldmia	r0, {r0, r1}
 800a78e:	e885 0003 	stmia.w	r5, {r0, r1}
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f004 f888 	bl	800e8aa <GUI_RectsIntersect>
 800a79a:	b370      	cbz	r0, 800a7fa <_Findy1+0x9a>
 800a79c:	f017 0f01 	tst.w	r7, #1
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	d11e      	bne.n	800a7e2 <_Findy1+0x82>
 800a7a4:	b13e      	cbz	r6, 800a7b6 <_Findy1+0x56>
 800a7a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a7aa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	bfa8      	it	ge
 800a7b2:	4613      	movge	r3, r2
 800a7b4:	e001      	b.n	800a7ba <_Findy1+0x5a>
 800a7b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a7ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800a7c4:	dd06      	ble.n	800a7d4 <_Findy1+0x74>
 800a7c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800a7ca:	b219      	sxth	r1, r3
 800a7cc:	428a      	cmp	r2, r1
 800a7ce:	db14      	blt.n	800a7fa <_Findy1+0x9a>
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	e004      	b.n	800a7de <_Findy1+0x7e>
 800a7d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a7d8:	b219      	sxth	r1, r3
 800a7da:	428a      	cmp	r2, r1
 800a7dc:	dd0d      	ble.n	800a7fa <_Findy1+0x9a>
 800a7de:	80e3      	strh	r3, [r4, #6]
 800a7e0:	e00b      	b.n	800a7fa <_Findy1+0x9a>
 800a7e2:	69df      	ldr	r7, [r3, #28]
 800a7e4:	b14f      	cbz	r7, 800a7fa <_Findy1+0x9a>
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	f7ff ffb8 	bl	800a760 <_Findy1>
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	f005 fcfb 	bl	80101ec <GUI_ALLOC_h2p>
 800a7f6:	6a07      	ldr	r7, [r0, #32]
 800a7f8:	e7f4      	b.n	800a7e4 <_Findy1+0x84>
 800a7fa:	a804      	add	r0, sp, #16
 800a7fc:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800a800:	6a1d      	ldr	r5, [r3, #32]
 800a802:	f005 fd0b 	bl	801021c <GUI_ALLOC_UnlockH>
 800a806:	e7b0      	b.n	800a76a <_Findy1+0xa>
 800a808:	b005      	add	sp, #20
 800a80a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a80c <_Findx0>:
 800a80c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a810:	4604      	mov	r4, r0
 800a812:	460f      	mov	r7, r1
 800a814:	4690      	mov	r8, r2
 800a816:	2500      	movs	r5, #0
 800a818:	2c00      	cmp	r4, #0
 800a81a:	d037      	beq.n	800a88c <_Findx0+0x80>
 800a81c:	4620      	mov	r0, r4
 800a81e:	f005 fcef 	bl	8010200 <GUI_ALLOC_LockH>
 800a822:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800a824:	9001      	str	r0, [sp, #4]
 800a826:	07b2      	lsls	r2, r6, #30
 800a828:	4601      	mov	r1, r0
 800a82a:	d528      	bpl.n	800a87e <_Findx0+0x72>
 800a82c:	ac02      	add	r4, sp, #8
 800a82e:	f1b8 0f00 	cmp.w	r8, #0
 800a832:	d004      	beq.n	800a83e <_Findx0+0x32>
 800a834:	4620      	mov	r0, r4
 800a836:	4642      	mov	r2, r8
 800a838:	f002 fea8 	bl	800d58c <GUI__IntersectRects>
 800a83c:	e002      	b.n	800a844 <_Findx0+0x38>
 800a83e:	c803      	ldmia	r0, {r0, r1}
 800a840:	e884 0003 	stmia.w	r4, {r0, r1}
 800a844:	4638      	mov	r0, r7
 800a846:	4621      	mov	r1, r4
 800a848:	f004 f82f 	bl	800e8aa <GUI_RectsIntersect>
 800a84c:	b1b8      	cbz	r0, 800a87e <_Findx0+0x72>
 800a84e:	07f3      	lsls	r3, r6, #31
 800a850:	d405      	bmi.n	800a85e <_Findx0+0x52>
 800a852:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	803b      	strh	r3, [r7, #0]
 800a85a:	2501      	movs	r5, #1
 800a85c:	e00f      	b.n	800a87e <_Findx0+0x72>
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	69de      	ldr	r6, [r3, #28]
 800a862:	b166      	cbz	r6, 800a87e <_Findx0+0x72>
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	4622      	mov	r2, r4
 800a86a:	f7ff ffcf 	bl	800a80c <_Findx0>
 800a86e:	2800      	cmp	r0, #0
 800a870:	4630      	mov	r0, r6
 800a872:	bf18      	it	ne
 800a874:	2501      	movne	r5, #1
 800a876:	f005 fcb9 	bl	80101ec <GUI_ALLOC_h2p>
 800a87a:	6a06      	ldr	r6, [r0, #32]
 800a87c:	e7f1      	b.n	800a862 <_Findx0+0x56>
 800a87e:	a804      	add	r0, sp, #16
 800a880:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800a884:	6a1c      	ldr	r4, [r3, #32]
 800a886:	f005 fcc9 	bl	801021c <GUI_ALLOC_UnlockH>
 800a88a:	e7c5      	b.n	800a818 <_Findx0+0xc>
 800a88c:	4628      	mov	r0, r5
 800a88e:	b004      	add	sp, #16
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a894 <_Findx1>:
 800a894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a896:	4604      	mov	r4, r0
 800a898:	b085      	sub	sp, #20
 800a89a:	460e      	mov	r6, r1
 800a89c:	4617      	mov	r7, r2
 800a89e:	2c00      	cmp	r4, #0
 800a8a0:	d031      	beq.n	800a906 <_Findx1+0x72>
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f005 fcac 	bl	8010200 <GUI_ALLOC_LockH>
 800a8a8:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800a8aa:	9001      	str	r0, [sp, #4]
 800a8ac:	07aa      	lsls	r2, r5, #30
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	d522      	bpl.n	800a8f8 <_Findx1+0x64>
 800a8b2:	ac02      	add	r4, sp, #8
 800a8b4:	b127      	cbz	r7, 800a8c0 <_Findx1+0x2c>
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	463a      	mov	r2, r7
 800a8ba:	f002 fe67 	bl	800d58c <GUI__IntersectRects>
 800a8be:	e002      	b.n	800a8c6 <_Findx1+0x32>
 800a8c0:	c803      	ldmia	r0, {r0, r1}
 800a8c2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f003 ffee 	bl	800e8aa <GUI_RectsIntersect>
 800a8ce:	b198      	cbz	r0, 800a8f8 <_Findx1+0x64>
 800a8d0:	07eb      	lsls	r3, r5, #31
 800a8d2:	d404      	bmi.n	800a8de <_Findx1+0x4a>
 800a8d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	80b3      	strh	r3, [r6, #4]
 800a8dc:	e00c      	b.n	800a8f8 <_Findx1+0x64>
 800a8de:	9b01      	ldr	r3, [sp, #4]
 800a8e0:	69dd      	ldr	r5, [r3, #28]
 800a8e2:	b14d      	cbz	r5, 800a8f8 <_Findx1+0x64>
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	f7ff ffd3 	bl	800a894 <_Findx1>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f005 fc7c 	bl	80101ec <GUI_ALLOC_h2p>
 800a8f4:	6a05      	ldr	r5, [r0, #32]
 800a8f6:	e7f4      	b.n	800a8e2 <_Findx1+0x4e>
 800a8f8:	a804      	add	r0, sp, #16
 800a8fa:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 800a8fe:	6a1c      	ldr	r4, [r3, #32]
 800a900:	f005 fc8c 	bl	801021c <GUI_ALLOC_UnlockH>
 800a904:	e7cb      	b.n	800a89e <_Findx1+0xa>
 800a906:	b005      	add	sp, #20
 800a908:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a90c <WM__ClipAtParentBorders>:
 800a90c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a90e:	4607      	mov	r7, r0
 800a910:	460d      	mov	r5, r1
 800a912:	4628      	mov	r0, r5
 800a914:	f005 fc74 	bl	8010200 <GUI_ALLOC_LockH>
 800a918:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a91a:	ac02      	add	r4, sp, #8
 800a91c:	f013 0602 	ands.w	r6, r3, #2
 800a920:	4601      	mov	r1, r0
 800a922:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a926:	d104      	bne.n	800a932 <WM__ClipAtParentBorders+0x26>
 800a928:	4620      	mov	r0, r4
 800a92a:	f005 fc77 	bl	801021c <GUI_ALLOC_UnlockH>
 800a92e:	4630      	mov	r0, r6
 800a930:	e016      	b.n	800a960 <WM__ClipAtParentBorders+0x54>
 800a932:	4638      	mov	r0, r7
 800a934:	f002 fe5c 	bl	800d5f0 <GUI__IntersectRect>
 800a938:	9b01      	ldr	r3, [sp, #4]
 800a93a:	699e      	ldr	r6, [r3, #24]
 800a93c:	4620      	mov	r0, r4
 800a93e:	b956      	cbnz	r6, 800a956 <WM__ClipAtParentBorders+0x4a>
 800a940:	f005 fc6c 	bl	801021c <GUI_ALLOC_UnlockH>
 800a944:	4b07      	ldr	r3, [pc, #28]	; (800a964 <WM__ClipAtParentBorders+0x58>)
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	4295      	cmp	r5, r2
 800a94a:	d008      	beq.n	800a95e <WM__ClipAtParentBorders+0x52>
 800a94c:	6858      	ldr	r0, [r3, #4]
 800a94e:	1a2b      	subs	r3, r5, r0
 800a950:	4258      	negs	r0, r3
 800a952:	4158      	adcs	r0, r3
 800a954:	e004      	b.n	800a960 <WM__ClipAtParentBorders+0x54>
 800a956:	f005 fc61 	bl	801021c <GUI_ALLOC_UnlockH>
 800a95a:	4635      	mov	r5, r6
 800a95c:	e7d9      	b.n	800a912 <WM__ClipAtParentBorders+0x6>
 800a95e:	2001      	movs	r0, #1
 800a960:	b003      	add	sp, #12
 800a962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a964:	20026cc4 	.word	0x20026cc4

0800a968 <WM__InsertWindowIntoList>:
 800a968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	b085      	sub	sp, #20
 800a96e:	460d      	mov	r5, r1
 800a970:	2900      	cmp	r1, #0
 800a972:	d049      	beq.n	800aa08 <WM__InsertWindowIntoList+0xa0>
 800a974:	f005 fc44 	bl	8010200 <GUI_ALLOC_LockH>
 800a978:	2300      	movs	r3, #0
 800a97a:	6203      	str	r3, [r0, #32]
 800a97c:	6185      	str	r5, [r0, #24]
 800a97e:	9001      	str	r0, [sp, #4]
 800a980:	4628      	mov	r0, r5
 800a982:	f005 fc3d 	bl	8010200 <GUI_ALLOC_LockH>
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	69c5      	ldr	r5, [r0, #28]
 800a98a:	9002      	str	r0, [sp, #8]
 800a98c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800a98e:	b92d      	cbnz	r5, 800a99c <WM__InsertWindowIntoList+0x34>
 800a990:	61c4      	str	r4, [r0, #28]
 800a992:	a801      	add	r0, sp, #4
 800a994:	f005 fc42 	bl	801021c <GUI_ALLOC_UnlockH>
 800a998:	a802      	add	r0, sp, #8
 800a99a:	e033      	b.n	800aa04 <WM__InsertWindowIntoList+0x9c>
 800a99c:	4628      	mov	r0, r5
 800a99e:	f005 fc2f 	bl	8010200 <GUI_ALLOC_LockH>
 800a9a2:	ae04      	add	r6, sp, #16
 800a9a4:	f007 0708 	and.w	r7, r7, #8
 800a9a8:	f846 0d04 	str.w	r0, [r6, #-4]!
 800a9ac:	b977      	cbnz	r7, 800a9cc <WM__InsertWindowIntoList+0x64>
 800a9ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a9b0:	071a      	lsls	r2, r3, #28
 800a9b2:	d50b      	bpl.n	800a9cc <WM__InsertWindowIntoList+0x64>
 800a9b4:	9b01      	ldr	r3, [sp, #4]
 800a9b6:	621d      	str	r5, [r3, #32]
 800a9b8:	9b02      	ldr	r3, [sp, #8]
 800a9ba:	a801      	add	r0, sp, #4
 800a9bc:	61dc      	str	r4, [r3, #28]
 800a9be:	f005 fc2d 	bl	801021c <GUI_ALLOC_UnlockH>
 800a9c2:	a802      	add	r0, sp, #8
 800a9c4:	f005 fc2a 	bl	801021c <GUI_ALLOC_UnlockH>
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	e01b      	b.n	800aa04 <WM__InsertWindowIntoList+0x9c>
 800a9cc:	a802      	add	r0, sp, #8
 800a9ce:	f005 fc25 	bl	801021c <GUI_ALLOC_UnlockH>
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f005 fc22 	bl	801021c <GUI_ALLOC_UnlockH>
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f005 fc07 	bl	80101ec <GUI_ALLOC_h2p>
 800a9de:	9003      	str	r0, [sp, #12]
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	6a1d      	ldr	r5, [r3, #32]
 800a9e4:	b90d      	cbnz	r5, 800a9ea <WM__InsertWindowIntoList+0x82>
 800a9e6:	621c      	str	r4, [r3, #32]
 800a9e8:	e00b      	b.n	800aa02 <WM__InsertWindowIntoList+0x9a>
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f005 fbfe 	bl	80101ec <GUI_ALLOC_h2p>
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	d1f4      	bne.n	800a9de <WM__InsertWindowIntoList+0x76>
 800a9f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a9f6:	071b      	lsls	r3, r3, #28
 800a9f8:	d5f1      	bpl.n	800a9de <WM__InsertWindowIntoList+0x76>
 800a9fa:	9b03      	ldr	r3, [sp, #12]
 800a9fc:	621c      	str	r4, [r3, #32]
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	621d      	str	r5, [r3, #32]
 800aa02:	a801      	add	r0, sp, #4
 800aa04:	f005 fc0a 	bl	801021c <GUI_ALLOC_UnlockH>
 800aa08:	b005      	add	sp, #20
 800aa0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa0c <WM__Client2Screen>:
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	4608      	mov	r0, r1
 800aa10:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800aa14:	f9b3 1000 	ldrsh.w	r1, [r3]
 800aa18:	f003 bff4 	b.w	800ea04 <GUI_MoveRect>

0800aa1c <_SetClipRectUserIntersect>:
 800aa1c:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <_SetClipRectUserIntersect+0x48>)
 800aa1e:	b530      	push	{r4, r5, lr}
 800aa20:	681c      	ldr	r4, [r3, #0]
 800aa22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800aa24:	b085      	sub	sp, #20
 800aa26:	4605      	mov	r5, r0
 800aa28:	b1ba      	cbz	r2, 800aa5a <_SetClipRectUserIntersect+0x3e>
 800aa2a:	6810      	ldr	r0, [r2, #0]
 800aa2c:	6851      	ldr	r1, [r2, #4]
 800aa2e:	ab02      	add	r3, sp, #8
 800aa30:	c303      	stmia	r3!, {r0, r1}
 800aa32:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <_SetClipRectUserIntersect+0x4c>)
 800aa34:	6818      	ldr	r0, [r3, #0]
 800aa36:	b900      	cbnz	r0, 800aa3a <_SetClipRectUserIntersect+0x1e>
 800aa38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aa3a:	f005 fbe1 	bl	8010200 <GUI_ALLOC_LockH>
 800aa3e:	ac04      	add	r4, sp, #16
 800aa40:	a902      	add	r1, sp, #8
 800aa42:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800aa46:	f7ff ffe1 	bl	800aa0c <WM__Client2Screen>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f005 fbe6 	bl	801021c <GUI_ALLOC_UnlockH>
 800aa50:	a802      	add	r0, sp, #8
 800aa52:	4629      	mov	r1, r5
 800aa54:	f002 fdcc 	bl	800d5f0 <GUI__IntersectRect>
 800aa58:	a802      	add	r0, sp, #8
 800aa5a:	f002 f827 	bl	800caac <LCD_SetClipRectEx>
 800aa5e:	b005      	add	sp, #20
 800aa60:	bd30      	pop	{r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	20000034 	.word	0x20000034
 800aa68:	20026cc0 	.word	0x20026cc0

0800aa6c <WM__ActivateClipRect>:
 800aa6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa6e:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <WM__ActivateClipRect+0x3c>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800aa76:	b10a      	cbz	r2, 800aa7c <WM__ActivateClipRect+0x10>
 800aa78:	480c      	ldr	r0, [pc, #48]	; (800aaac <WM__ActivateClipRect+0x40>)
 800aa7a:	e011      	b.n	800aaa0 <WM__ActivateClipRect+0x34>
 800aa7c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800aa7e:	f005 fbbf 	bl	8010200 <GUI_ALLOC_LockH>
 800aa82:	9001      	str	r0, [sp, #4]
 800aa84:	c803      	ldmia	r0, {r0, r1}
 800aa86:	ac02      	add	r4, sp, #8
 800aa88:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa8c:	a801      	add	r0, sp, #4
 800aa8e:	f005 fbc5 	bl	801021c <GUI_ALLOC_UnlockH>
 800aa92:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <WM__ActivateClipRect+0x44>)
 800aa94:	6819      	ldr	r1, [r3, #0]
 800aa96:	b111      	cbz	r1, 800aa9e <WM__ActivateClipRect+0x32>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7ff ff37 	bl	800a90c <WM__ClipAtParentBorders>
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7ff ffbc 	bl	800aa1c <_SetClipRectUserIntersect>
 800aaa4:	b004      	add	sp, #16
 800aaa6:	bd10      	pop	{r4, pc}
 800aaa8:	20000034 	.word	0x20000034
 800aaac:	20026778 	.word	0x20026778
 800aab0:	20026cc0 	.word	0x20026cc0

0800aab4 <WM__IsWindow>:
 800aab4:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <WM__IsWindow+0x1c>)
 800aab6:	b510      	push	{r4, lr}
 800aab8:	4604      	mov	r4, r0
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	b128      	cbz	r0, 800aaca <WM__IsWindow+0x16>
 800aabe:	42a0      	cmp	r0, r4
 800aac0:	d004      	beq.n	800aacc <WM__IsWindow+0x18>
 800aac2:	f005 fb93 	bl	80101ec <GUI_ALLOC_h2p>
 800aac6:	6940      	ldr	r0, [r0, #20]
 800aac8:	e7f8      	b.n	800aabc <WM__IsWindow+0x8>
 800aaca:	bd10      	pop	{r4, pc}
 800aacc:	2001      	movs	r0, #1
 800aace:	bd10      	pop	{r4, pc}
 800aad0:	20026ce0 	.word	0x20026ce0

0800aad4 <WM__InvalidateDrawAndDescs>:
 800aad4:	b513      	push	{r0, r1, r4, lr}
 800aad6:	4604      	mov	r4, r0
 800aad8:	b300      	cbz	r0, 800ab1c <WM__InvalidateDrawAndDescs+0x48>
 800aada:	f005 fb91 	bl	8010200 <GUI_ALLOC_LockH>
 800aade:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aae0:	9001      	str	r0, [sp, #4]
 800aae2:	0793      	lsls	r3, r2, #30
 800aae4:	d517      	bpl.n	800ab16 <WM__InvalidateDrawAndDescs+0x42>
 800aae6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800aae8:	b140      	cbz	r0, 800aafc <WM__InvalidateDrawAndDescs+0x28>
 800aaea:	4b0d      	ldr	r3, [pc, #52]	; (800ab20 <WM__InvalidateDrawAndDescs+0x4c>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	d004      	beq.n	800aafc <WM__InvalidateDrawAndDescs+0x28>
 800aaf2:	f001 f9bf 	bl	800be74 <GUI_MEMDEV_Delete>
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	625a      	str	r2, [r3, #36]	; 0x24
 800aafc:	4620      	mov	r0, r4
 800aafe:	f7ff fdf3 	bl	800a6e8 <WM_GetFirstChild>
 800ab02:	4604      	mov	r4, r0
 800ab04:	b13c      	cbz	r4, 800ab16 <WM__InvalidateDrawAndDescs+0x42>
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff ffe4 	bl	800aad4 <WM__InvalidateDrawAndDescs>
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f005 fb6d 	bl	80101ec <GUI_ALLOC_h2p>
 800ab12:	6a04      	ldr	r4, [r0, #32]
 800ab14:	e7f6      	b.n	800ab04 <WM__InvalidateDrawAndDescs+0x30>
 800ab16:	a801      	add	r0, sp, #4
 800ab18:	f005 fb80 	bl	801021c <GUI_ALLOC_UnlockH>
 800ab1c:	b002      	add	sp, #8
 800ab1e:	bd10      	pop	{r4, pc}
 800ab20:	20026d08 	.word	0x20026d08

0800ab24 <WM__RectIsNZ>:
 800ab24:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ab28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	dc08      	bgt.n	800ab42 <WM__RectIsNZ+0x1e>
 800ab30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800ab34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	bfcc      	ite	gt
 800ab3c:	2000      	movgt	r0, #0
 800ab3e:	2001      	movle	r0, #1
 800ab40:	4770      	bx	lr
 800ab42:	2000      	movs	r0, #0
 800ab44:	4770      	bx	lr
	...

0800ab48 <_Invalidate1Abs>:
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	4617      	mov	r7, r2
 800ab52:	f005 fb4b 	bl	80101ec <GUI_ALLOC_h2p>
 800ab56:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ab58:	9001      	str	r0, [sp, #4]
 800ab5a:	07a3      	lsls	r3, r4, #30
 800ab5c:	d534      	bpl.n	800abc8 <_Invalidate1Abs+0x80>
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f7ff ffe0 	bl	800ab24 <WM__RectIsNZ>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d02f      	beq.n	800abc8 <_Invalidate1Abs+0x80>
 800ab68:	f640 0301 	movw	r3, #2049	; 0x801
 800ab6c:	4023      	ands	r3, r4
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d02a      	beq.n	800abc8 <_Invalidate1Abs+0x80>
 800ab72:	4630      	mov	r0, r6
 800ab74:	f005 fb44 	bl	8010200 <GUI_ALLOC_LockH>
 800ab78:	ac02      	add	r4, sp, #8
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	9001      	str	r0, [sp, #4]
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4620      	mov	r0, r4
 800ab82:	f002 fd03 	bl	800d58c <GUI__IntersectRects>
 800ab86:	4620      	mov	r0, r4
 800ab88:	f7ff ffcc 	bl	800ab24 <WM__RectIsNZ>
 800ab8c:	b1c8      	cbz	r0, 800abc2 <_Invalidate1Abs+0x7a>
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 800ab92:	f244 0120 	movw	r1, #16416	; 0x4020
 800ab96:	4031      	ands	r1, r6
 800ab98:	f103 0508 	add.w	r5, r3, #8
 800ab9c:	b129      	cbz	r1, 800abaa <_Invalidate1Abs+0x62>
 800ab9e:	4628      	mov	r0, r5
 800aba0:	4629      	mov	r1, r5
 800aba2:	4622      	mov	r2, r4
 800aba4:	f003 ff3e 	bl	800ea24 <GUI_MergeRect>
 800aba8:	e00b      	b.n	800abc2 <_Invalidate1Abs+0x7a>
 800abaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abae:	433e      	orrs	r6, r7
 800abb0:	e885 0003 	stmia.w	r5, {r0, r1}
 800abb4:	629e      	str	r6, [r3, #40]	; 0x28
 800abb6:	4b05      	ldr	r3, [pc, #20]	; (800abcc <_Invalidate1Abs+0x84>)
 800abb8:	881a      	ldrh	r2, [r3, #0]
 800abba:	3201      	adds	r2, #1
 800abbc:	801a      	strh	r2, [r3, #0]
 800abbe:	f002 ff2b 	bl	800da18 <GUI_SignalEvent>
 800abc2:	a801      	add	r0, sp, #4
 800abc4:	f005 fb2a 	bl	801021c <GUI_ALLOC_UnlockH>
 800abc8:	b005      	add	sp, #20
 800abca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abcc:	20026cdc 	.word	0x20026cdc

0800abd0 <WM__Invalidate1Abs>:
 800abd0:	2220      	movs	r2, #32
 800abd2:	f7ff bfb9 	b.w	800ab48 <_Invalidate1Abs>

0800abd6 <WM_InvalidateWindowAndDescsEx>:
 800abd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abd8:	460f      	mov	r7, r1
 800abda:	b085      	sub	sp, #20
 800abdc:	4615      	mov	r5, r2
 800abde:	4606      	mov	r6, r0
 800abe0:	b348      	cbz	r0, 800ac36 <WM_InvalidateWindowAndDescsEx+0x60>
 800abe2:	f005 fb0d 	bl	8010200 <GUI_ALLOC_LockH>
 800abe6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abe8:	ac04      	add	r4, sp, #16
 800abea:	079b      	lsls	r3, r3, #30
 800abec:	4602      	mov	r2, r0
 800abee:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800abf2:	d403      	bmi.n	800abfc <WM_InvalidateWindowAndDescsEx+0x26>
 800abf4:	4620      	mov	r0, r4
 800abf6:	f005 fb11 	bl	801021c <GUI_ALLOC_UnlockH>
 800abfa:	e01c      	b.n	800ac36 <WM_InvalidateWindowAndDescsEx+0x60>
 800abfc:	a802      	add	r0, sp, #8
 800abfe:	4639      	mov	r1, r7
 800ac00:	f002 fcc4 	bl	800d58c <GUI__IntersectRects>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d0f5      	beq.n	800abf4 <WM_InvalidateWindowAndDescsEx+0x1e>
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f005 fb07 	bl	801021c <GUI_ALLOC_UnlockH>
 800ac0e:	4630      	mov	r0, r6
 800ac10:	a902      	add	r1, sp, #8
 800ac12:	462a      	mov	r2, r5
 800ac14:	f7ff ff98 	bl	800ab48 <_Invalidate1Abs>
 800ac18:	4630      	mov	r0, r6
 800ac1a:	f7ff fd65 	bl	800a6e8 <WM_GetFirstChild>
 800ac1e:	4604      	mov	r4, r0
 800ac20:	b14c      	cbz	r4, 800ac36 <WM_InvalidateWindowAndDescsEx+0x60>
 800ac22:	4620      	mov	r0, r4
 800ac24:	a902      	add	r1, sp, #8
 800ac26:	462a      	mov	r2, r5
 800ac28:	f7ff ffd5 	bl	800abd6 <WM_InvalidateWindowAndDescsEx>
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f005 fadd 	bl	80101ec <GUI_ALLOC_h2p>
 800ac32:	6a04      	ldr	r4, [r0, #32]
 800ac34:	e7f4      	b.n	800ac20 <WM_InvalidateWindowAndDescsEx+0x4a>
 800ac36:	b005      	add	sp, #20
 800ac38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac3a <WM__InvalidateRect>:
 800ac3a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ac3e:	4680      	mov	r8, r0
 800ac40:	4617      	mov	r7, r2
 800ac42:	461d      	mov	r5, r3
 800ac44:	460c      	mov	r4, r1
 800ac46:	2900      	cmp	r1, #0
 800ac48:	d030      	beq.n	800acac <WM__InvalidateRect+0x72>
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	f005 fad8 	bl	8010200 <GUI_ALLOC_LockH>
 800ac50:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800ac52:	9001      	str	r0, [sp, #4]
 800ac54:	07b3      	lsls	r3, r6, #30
 800ac56:	4602      	mov	r2, r0
 800ac58:	d525      	bpl.n	800aca6 <WM__InvalidateRect+0x6c>
 800ac5a:	a802      	add	r0, sp, #8
 800ac5c:	4641      	mov	r1, r8
 800ac5e:	f002 fc95 	bl	800d58c <GUI__IntersectRects>
 800ac62:	b300      	cbz	r0, 800aca6 <WM__InvalidateRect+0x6c>
 800ac64:	f640 0301 	movw	r3, #2049	; 0x801
 800ac68:	4033      	ands	r3, r6
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d107      	bne.n	800ac7e <WM__InvalidateRect+0x44>
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	a802      	add	r0, sp, #8
 800ac72:	6999      	ldr	r1, [r3, #24]
 800ac74:	6a1a      	ldr	r2, [r3, #32]
 800ac76:	462b      	mov	r3, r5
 800ac78:	f7ff ffdf 	bl	800ac3a <WM__InvalidateRect>
 800ac7c:	e004      	b.n	800ac88 <WM__InvalidateRect+0x4e>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	a902      	add	r1, sp, #8
 800ac82:	462a      	mov	r2, r5
 800ac84:	f7ff ff60 	bl	800ab48 <_Invalidate1Abs>
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	69dc      	ldr	r4, [r3, #28]
 800ac8c:	b15c      	cbz	r4, 800aca6 <WM__InvalidateRect+0x6c>
 800ac8e:	42bc      	cmp	r4, r7
 800ac90:	d009      	beq.n	800aca6 <WM__InvalidateRect+0x6c>
 800ac92:	4620      	mov	r0, r4
 800ac94:	a902      	add	r1, sp, #8
 800ac96:	462a      	mov	r2, r5
 800ac98:	f7ff ff9d 	bl	800abd6 <WM_InvalidateWindowAndDescsEx>
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f005 faa5 	bl	80101ec <GUI_ALLOC_h2p>
 800aca2:	6a04      	ldr	r4, [r0, #32]
 800aca4:	e7f2      	b.n	800ac8c <WM__InvalidateRect+0x52>
 800aca6:	a801      	add	r0, sp, #4
 800aca8:	f005 fab8 	bl	801021c <GUI_ALLOC_UnlockH>
 800acac:	b004      	add	sp, #16
 800acae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800acb2 <WM__InvalidateRectEx>:
 800acb2:	2320      	movs	r3, #32
 800acb4:	f7ff bfc1 	b.w	800ac3a <WM__InvalidateRect>

0800acb8 <WM__SendMsgNoData>:
 800acb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acba:	ab04      	add	r3, sp, #16
 800acbc:	9001      	str	r0, [sp, #4]
 800acbe:	f843 1d10 	str.w	r1, [r3, #-16]!
 800acc2:	4669      	mov	r1, sp
 800acc4:	f7ff fcb2 	bl	800a62c <WM__SendMessage>
 800acc8:	b005      	add	sp, #20
 800acca:	f85d fb04 	ldr.w	pc, [sp], #4

0800acce <WM__GetClientRectWin>:
 800acce:	2300      	movs	r3, #0
 800acd0:	800b      	strh	r3, [r1, #0]
 800acd2:	8882      	ldrh	r2, [r0, #4]
 800acd4:	804b      	strh	r3, [r1, #2]
 800acd6:	8803      	ldrh	r3, [r0, #0]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	808b      	strh	r3, [r1, #4]
 800acdc:	88c2      	ldrh	r2, [r0, #6]
 800acde:	8843      	ldrh	r3, [r0, #2]
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	80cb      	strh	r3, [r1, #6]
 800ace4:	4770      	bx	lr

0800ace6 <WM_InvalidateRect>:
 800ace6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace8:	460f      	mov	r7, r1
 800acea:	b087      	sub	sp, #28
 800acec:	4605      	mov	r5, r0
 800acee:	2800      	cmp	r0, #0
 800acf0:	d033      	beq.n	800ad5a <WM_InvalidateRect+0x74>
 800acf2:	f005 fa85 	bl	8010200 <GUI_ALLOC_LockH>
 800acf6:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800acf8:	9001      	str	r0, [sp, #4]
 800acfa:	07b2      	lsls	r2, r6, #30
 800acfc:	d52a      	bpl.n	800ad54 <WM_InvalidateRect+0x6e>
 800acfe:	c803      	ldmia	r0, {r0, r1}
 800ad00:	ac04      	add	r4, sp, #16
 800ad02:	03f3      	lsls	r3, r6, #15
 800ad04:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad08:	d502      	bpl.n	800ad10 <WM_InvalidateRect+0x2a>
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f7ff fee2 	bl	800aad4 <WM__InvalidateDrawAndDescs>
 800ad10:	b15f      	cbz	r7, 800ad2a <WM_InvalidateRect+0x44>
 800ad12:	6838      	ldr	r0, [r7, #0]
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	ab02      	add	r3, sp, #8
 800ad18:	c303      	stmia	r3!, {r0, r1}
 800ad1a:	9801      	ldr	r0, [sp, #4]
 800ad1c:	a902      	add	r1, sp, #8
 800ad1e:	f7ff fe75 	bl	800aa0c <WM__Client2Screen>
 800ad22:	4620      	mov	r0, r4
 800ad24:	a902      	add	r1, sp, #8
 800ad26:	f002 fc63 	bl	800d5f0 <GUI__IntersectRect>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7ff fded 	bl	800a90c <WM__ClipAtParentBorders>
 800ad32:	b178      	cbz	r0, 800ad54 <WM_InvalidateRect+0x6e>
 800ad34:	f640 0301 	movw	r3, #2049	; 0x801
 800ad38:	4033      	ands	r3, r6
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d106      	bne.n	800ad4c <WM_InvalidateRect+0x66>
 800ad3e:	9b01      	ldr	r3, [sp, #4]
 800ad40:	4620      	mov	r0, r4
 800ad42:	6999      	ldr	r1, [r3, #24]
 800ad44:	6a1a      	ldr	r2, [r3, #32]
 800ad46:	f7ff ffb4 	bl	800acb2 <WM__InvalidateRectEx>
 800ad4a:	e003      	b.n	800ad54 <WM_InvalidateRect+0x6e>
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	4621      	mov	r1, r4
 800ad50:	f7ff ff3e 	bl	800abd0 <WM__Invalidate1Abs>
 800ad54:	a801      	add	r0, sp, #4
 800ad56:	f005 fa61 	bl	801021c <GUI_ALLOC_UnlockH>
 800ad5a:	b007      	add	sp, #28
 800ad5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad5e <WM_InvalidateWindow>:
 800ad5e:	2100      	movs	r1, #0
 800ad60:	f7ff bfc1 	b.w	800ace6 <WM_InvalidateRect>

0800ad64 <WM__GetTopLevelLayer>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	f005 fa40 	bl	80101ec <GUI_ALLOC_h2p>
 800ad6c:	6980      	ldr	r0, [r0, #24]
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d1f9      	bne.n	800ad66 <WM__GetTopLevelLayer+0x2>
 800ad72:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <WM__GetTopLevelLayer+0x24>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	4294      	cmp	r4, r2
 800ad78:	d005      	beq.n	800ad86 <WM__GetTopLevelLayer+0x22>
 800ad7a:	6858      	ldr	r0, [r3, #4]
 800ad7c:	4284      	cmp	r4, r0
 800ad7e:	bf14      	ite	ne
 800ad80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800ad84:	2001      	moveq	r0, #1
 800ad86:	bd10      	pop	{r4, pc}
 800ad88:	20026cc4 	.word	0x20026cc4

0800ad8c <WM__SelectTopLevelLayer>:
 800ad8c:	b508      	push	{r3, lr}
 800ad8e:	f7ff ffe9 	bl	800ad64 <WM__GetTopLevelLayer>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	db03      	blt.n	800ad9e <WM__SelectTopLevelLayer+0x12>
 800ad96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad9a:	f003 bd65 	b.w	800e868 <GUI_SelectLayer>
 800ad9e:	bd08      	pop	{r3, pc}

0800ada0 <WM_SelectWindow>:
 800ada0:	4a0d      	ldr	r2, [pc, #52]	; (800add8 <WM_SelectWindow+0x38>)
 800ada2:	6813      	ldr	r3, [r2, #0]
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800ada8:	4604      	mov	r4, r0
 800adaa:	4616      	mov	r6, r2
 800adac:	b908      	cbnz	r0, 800adb2 <WM_SelectWindow+0x12>
 800adae:	4a0b      	ldr	r2, [pc, #44]	; (800addc <WM_SelectWindow+0x3c>)
 800adb0:	6814      	ldr	r4, [r2, #0]
 800adb2:	649c      	str	r4, [r3, #72]	; 0x48
 800adb4:	4620      	mov	r0, r4
 800adb6:	f7ff ffe9 	bl	800ad8c <WM__SelectTopLevelLayer>
 800adba:	f002 fa7f 	bl	800d2bc <LCD_SetClipRectMax>
 800adbe:	4620      	mov	r0, r4
 800adc0:	f005 fa14 	bl	80101ec <GUI_ALLOC_h2p>
 800adc4:	6833      	ldr	r3, [r6, #0]
 800adc6:	f9b0 1000 	ldrsh.w	r1, [r0]
 800adca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800adce:	64d9      	str	r1, [r3, #76]	; 0x4c
 800add0:	651a      	str	r2, [r3, #80]	; 0x50
 800add2:	4628      	mov	r0, r5
 800add4:	bd70      	pop	{r4, r5, r6, pc}
 800add6:	bf00      	nop
 800add8:	20000034 	.word	0x20000034
 800addc:	20026ce0 	.word	0x20026ce0

0800ade0 <WM_CreateWindowAsChild>:
 800ade0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ade4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ade6:	469b      	mov	fp, r3
 800ade8:	4b4b      	ldr	r3, [pc, #300]	; (800af18 <WM_CreateWindowAsChild+0x138>)
 800adea:	4607      	mov	r7, r0
 800adec:	4688      	mov	r8, r1
 800adee:	4692      	mov	sl, r2
 800adf0:	681e      	ldr	r6, [r3, #0]
 800adf2:	bb65      	cbnz	r5, 800ae4e <WM_CreateWindowAsChild+0x6e>
 800adf4:	4b49      	ldr	r3, [pc, #292]	; (800af1c <WM_CreateWindowAsChild+0x13c>)
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b363      	cbz	r3, 800ae54 <WM_CreateWindowAsChild+0x74>
 800adfa:	4b49      	ldr	r3, [pc, #292]	; (800af20 <WM_CreateWindowAsChild+0x140>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	7c5a      	ldrb	r2, [r3, #17]
 800ae00:	4b48      	ldr	r3, [pc, #288]	; (800af24 <WM_CreateWindowAsChild+0x144>)
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	d024      	beq.n	800ae54 <WM_CreateWindowAsChild+0x74>
 800ae0a:	b31b      	cbz	r3, 800ae54 <WM_CreateWindowAsChild+0x74>
 800ae0c:	461d      	mov	r5, r3
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f005 f9f6 	bl	8010200 <GUI_ALLOC_LockH>
 800ae14:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ae18:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800ae1c:	9001      	str	r0, [sp, #4]
 800ae1e:	4417      	add	r7, r2
 800ae20:	4498      	add	r8, r3
 800ae22:	f1ba 0f00 	cmp.w	sl, #0
 800ae26:	d105      	bne.n	800ae34 <WM_CreateWindowAsChild+0x54>
 800ae28:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800ae2c:	ebc2 0a0a 	rsb	sl, r2, sl
 800ae30:	f10a 0a01 	add.w	sl, sl, #1
 800ae34:	f1bb 0f00 	cmp.w	fp, #0
 800ae38:	d105      	bne.n	800ae46 <WM_CreateWindowAsChild+0x66>
 800ae3a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800ae3e:	ebc3 0b0b 	rsb	fp, r3, fp
 800ae42:	f10b 0b01 	add.w	fp, fp, #1
 800ae46:	a801      	add	r0, sp, #4
 800ae48:	f005 f9e8 	bl	801021c <GUI_ALLOC_UnlockH>
 800ae4c:	e002      	b.n	800ae54 <WM_CreateWindowAsChild+0x74>
 800ae4e:	1c6b      	adds	r3, r5, #1
 800ae50:	d1dd      	bne.n	800ae0e <WM_CreateWindowAsChild+0x2e>
 800ae52:	2500      	movs	r5, #0
 800ae54:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ae56:	302c      	adds	r0, #44	; 0x2c
 800ae58:	f005 fc08 	bl	801066c <GUI_ALLOC_AllocZero>
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d056      	beq.n	800af10 <WM_CreateWindowAsChild+0x130>
 800ae62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae64:	431e      	orrs	r6, r3
 800ae66:	4b2d      	ldr	r3, [pc, #180]	; (800af1c <WM_CreateWindowAsChild+0x13c>)
 800ae68:	881a      	ldrh	r2, [r3, #0]
 800ae6a:	3201      	adds	r2, #1
 800ae6c:	801a      	strh	r2, [r3, #0]
 800ae6e:	f005 f9c7 	bl	8010200 <GUI_ALLOC_LockH>
 800ae72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae74:	6103      	str	r3, [r0, #16]
 800ae76:	f10d 0908 	add.w	r9, sp, #8
 800ae7a:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <WM_CreateWindowAsChild+0x148>)
 800ae7c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ae7e:	f849 0d08 	str.w	r0, [r9, #-8]!
 800ae82:	4033      	ands	r3, r6
 800ae84:	8007      	strh	r7, [r0, #0]
 800ae86:	f8a0 8002 	strh.w	r8, [r0, #2]
 800ae8a:	4457      	add	r7, sl
 800ae8c:	44d8      	add	r8, fp
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	3f01      	subs	r7, #1
 800ae92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ae96:	6283      	str	r3, [r0, #40]	; 0x28
 800ae98:	8087      	strh	r7, [r0, #4]
 800ae9a:	f8a0 8006 	strh.w	r8, [r0, #6]
 800ae9e:	4668      	mov	r0, sp
 800aea0:	f005 f9bc 	bl	801021c <GUI_ALLOC_UnlockH>
 800aea4:	4b21      	ldr	r3, [pc, #132]	; (800af2c <WM_CreateWindowAsChild+0x14c>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	b148      	cbz	r0, 800aebe <WM_CreateWindowAsChild+0xde>
 800aeaa:	f005 f99f 	bl	80101ec <GUI_ALLOC_h2p>
 800aeae:	4607      	mov	r7, r0
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f005 f99b 	bl	80101ec <GUI_ALLOC_h2p>
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6143      	str	r3, [r0, #20]
 800aeba:	617c      	str	r4, [r7, #20]
 800aebc:	e000      	b.n	800aec0 <WM_CreateWindowAsChild+0xe0>
 800aebe:	601c      	str	r4, [r3, #0]
 800aec0:	4629      	mov	r1, r5
 800aec2:	4620      	mov	r0, r4
 800aec4:	f7ff fd50 	bl	800a968 <WM__InsertWindowIntoList>
 800aec8:	06b5      	lsls	r5, r6, #26
 800aeca:	d502      	bpl.n	800aed2 <WM_CreateWindowAsChild+0xf2>
 800aecc:	4620      	mov	r0, r4
 800aece:	f7ff ff67 	bl	800ada0 <WM_SelectWindow>
 800aed2:	07f0      	lsls	r0, r6, #31
 800aed4:	d503      	bpl.n	800aede <WM_CreateWindowAsChild+0xfe>
 800aed6:	4b16      	ldr	r3, [pc, #88]	; (800af30 <WM_CreateWindowAsChild+0x150>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	3201      	adds	r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	0671      	lsls	r1, r6, #25
 800aee0:	d502      	bpl.n	800aee8 <WM_CreateWindowAsChild+0x108>
 800aee2:	4620      	mov	r0, r4
 800aee4:	f006 fb2e 	bl	8011544 <WM_BringToBottom>
 800aee8:	07b2      	lsls	r2, r6, #30
 800aeea:	d50d      	bpl.n	800af08 <WM_CreateWindowAsChild+0x128>
 800aeec:	4620      	mov	r0, r4
 800aeee:	f005 f987 	bl	8010200 <GUI_ALLOC_LockH>
 800aef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aef4:	9000      	str	r0, [sp, #0]
 800aef6:	f043 0302 	orr.w	r3, r3, #2
 800aefa:	6283      	str	r3, [r0, #40]	; 0x28
 800aefc:	4668      	mov	r0, sp
 800aefe:	f005 f98d 	bl	801021c <GUI_ALLOC_UnlockH>
 800af02:	4620      	mov	r0, r4
 800af04:	f7ff ff2b 	bl	800ad5e <WM_InvalidateWindow>
 800af08:	4620      	mov	r0, r4
 800af0a:	2101      	movs	r1, #1
 800af0c:	f7ff fed4 	bl	800acb8 <WM__SendMsgNoData>
 800af10:	4620      	mov	r0, r4
 800af12:	b003      	add	sp, #12
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	20026cec 	.word	0x20026cec
 800af1c:	20026cbc 	.word	0x20026cbc
 800af20:	20000034 	.word	0x20000034
 800af24:	20026cc4 	.word	0x20026cc4
 800af28:	003f3f9f 	.word	0x003f3f9f
 800af2c:	20026ce0 	.word	0x20026ce0
 800af30:	20026d0c 	.word	0x20026d0c

0800af34 <WM__GetNextIVR>:
 800af34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800af38:	4f5d      	ldr	r7, [pc, #372]	; (800b0b0 <WM__GetNextIVR+0x17c>)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 800af40:	2800      	cmp	r0, #0
 800af42:	f000 80b2 	beq.w	800b0aa <WM__GetNextIVR+0x176>
 800af46:	4b5b      	ldr	r3, [pc, #364]	; (800b0b4 <WM__GetNextIVR+0x180>)
 800af48:	695a      	ldr	r2, [r3, #20]
 800af4a:	2a01      	cmp	r2, #1
 800af4c:	461c      	mov	r4, r3
 800af4e:	dd03      	ble.n	800af58 <WM__GetNextIVR+0x24>
 800af50:	3a01      	subs	r2, #1
 800af52:	615a      	str	r2, [r3, #20]
 800af54:	2000      	movs	r0, #0
 800af56:	e0a8      	b.n	800b0aa <WM__GetNextIVR+0x176>
 800af58:	f104 0608 	add.w	r6, r4, #8
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800af62:	3301      	adds	r3, #1
 800af64:	ad02      	add	r5, sp, #8
 800af66:	6123      	str	r3, [r4, #16]
 800af68:	e885 0003 	stmia.w	r5, {r0, r1}
 800af6c:	b923      	cbnz	r3, 800af78 <WM__GetNextIVR+0x44>
 800af6e:	8823      	ldrh	r3, [r4, #0]
 800af70:	f8ad 3008 	strh.w	r3, [sp, #8]
 800af74:	8863      	ldrh	r3, [r4, #2]
 800af76:	e011      	b.n	800af9c <WM__GetNextIVR+0x68>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	8962      	ldrh	r2, [r4, #10]
 800af7c:	f8ad 200a 	strh.w	r2, [sp, #10]
 800af80:	3301      	adds	r3, #1
 800af82:	b29b      	uxth	r3, r3
 800af84:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800af88:	f8ad 3008 	strh.w	r3, [sp, #8]
 800af8c:	b21b      	sxth	r3, r3
 800af8e:	429a      	cmp	r2, r3
 800af90:	da06      	bge.n	800afa0 <WM__GetNextIVR+0x6c>
 800af92:	8823      	ldrh	r3, [r4, #0]
 800af94:	f8ad 3008 	strh.w	r3, [sp, #8]
 800af98:	89e3      	ldrh	r3, [r4, #14]
 800af9a:	3301      	adds	r3, #1
 800af9c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800afa0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800afa4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800afa8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800b0b4 <WM__GetNextIVR+0x180>
 800afac:	429a      	cmp	r2, r3
 800afae:	dd04      	ble.n	800afba <WM__GetNextIVR+0x86>
 800afb0:	6963      	ldr	r3, [r4, #20]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	2000      	movs	r0, #0
 800afb6:	6163      	str	r3, [r4, #20]
 800afb8:	e077      	b.n	800b0aa <WM__GetNextIVR+0x176>
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800afbe:	f005 f91f 	bl	8010200 <GUI_ALLOC_LockH>
 800afc2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800afc6:	f9b8 3000 	ldrsh.w	r3, [r8]
 800afca:	9001      	str	r0, [sp, #4]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d11c      	bne.n	800b00a <WM__GetNextIVR+0xd6>
 800afd0:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800afd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800afd8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800afdc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800afe0:	4b33      	ldr	r3, [pc, #204]	; (800b0b0 <WM__GetNextIVR+0x17c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afe6:	b15a      	cbz	r2, 800b000 <WM__GetNextIVR+0xcc>
 800afe8:	4610      	mov	r0, r2
 800afea:	f005 f8ff 	bl	80101ec <GUI_ALLOC_h2p>
 800afee:	4680      	mov	r8, r0
 800aff0:	2200      	movs	r2, #0
 800aff2:	6a00      	ldr	r0, [r0, #32]
 800aff4:	4629      	mov	r1, r5
 800aff6:	f7ff fbb3 	bl	800a760 <_Findy1>
 800affa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800affe:	e7f2      	b.n	800afe6 <WM__GetNextIVR+0xb2>
 800b000:	9b01      	ldr	r3, [sp, #4]
 800b002:	4629      	mov	r1, r5
 800b004:	69d8      	ldr	r0, [r3, #28]
 800b006:	f7ff fbab 	bl	800a760 <_Findy1>
 800b00a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b00e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b016:	b16a      	cbz	r2, 800b034 <WM__GetNextIVR+0x100>
 800b018:	4610      	mov	r0, r2
 800b01a:	f005 f8e7 	bl	80101ec <GUI_ALLOC_h2p>
 800b01e:	4629      	mov	r1, r5
 800b020:	4680      	mov	r8, r0
 800b022:	2200      	movs	r2, #0
 800b024:	6a00      	ldr	r0, [r0, #32]
 800b026:	f7ff fbf1 	bl	800a80c <_Findx0>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d1ed      	bne.n	800b00a <WM__GetNextIVR+0xd6>
 800b02e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b032:	e7f0      	b.n	800b016 <WM__GetNextIVR+0xe2>
 800b034:	9b01      	ldr	r3, [sp, #4]
 800b036:	4629      	mov	r1, r5
 800b038:	69d8      	ldr	r0, [r3, #28]
 800b03a:	f7ff fbe7 	bl	800a80c <_Findx0>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d1e3      	bne.n	800b00a <WM__GetNextIVR+0xd6>
 800b042:	88a3      	ldrh	r3, [r4, #4]
 800b044:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800b048:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b04c:	b21b      	sxth	r3, r3
 800b04e:	429a      	cmp	r2, r3
 800b050:	dd07      	ble.n	800b062 <WM__GetNextIVR+0x12e>
 800b052:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b056:	e886 0003 	stmia.w	r6, {r0, r1}
 800b05a:	a801      	add	r0, sp, #4
 800b05c:	f005 f8de 	bl	801021c <GUI_ALLOC_UnlockH>
 800b060:	e797      	b.n	800af92 <WM__GetNextIVR+0x5e>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b066:	b152      	cbz	r2, 800b07e <WM__GetNextIVR+0x14a>
 800b068:	4610      	mov	r0, r2
 800b06a:	f005 f8bf 	bl	80101ec <GUI_ALLOC_h2p>
 800b06e:	4607      	mov	r7, r0
 800b070:	2200      	movs	r2, #0
 800b072:	6a00      	ldr	r0, [r0, #32]
 800b074:	4629      	mov	r1, r5
 800b076:	f7ff fc0d 	bl	800a894 <_Findx1>
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	e7f3      	b.n	800b066 <WM__GetNextIVR+0x132>
 800b07e:	af04      	add	r7, sp, #16
 800b080:	4629      	mov	r1, r5
 800b082:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800b086:	69d8      	ldr	r0, [r3, #28]
 800b088:	f7ff fc04 	bl	800a894 <_Findx1>
 800b08c:	4638      	mov	r0, r7
 800b08e:	f005 f8c5 	bl	801021c <GUI_ALLOC_UnlockH>
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b098:	4293      	cmp	r3, r2
 800b09a:	dc89      	bgt.n	800afb0 <WM__GetNextIVR+0x7c>
 800b09c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b0a0:	e886 0003 	stmia.w	r6, {r0, r1}
 800b0a4:	f7ff fce2 	bl	800aa6c <WM__ActivateClipRect>
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	b004      	add	sp, #16
 800b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b0:	20000034 	.word	0x20000034
 800b0b4:	20026770 	.word	0x20026770

0800b0b8 <WM__InitIVRSearch>:
 800b0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0bc:	4f39      	ldr	r7, [pc, #228]	; (800b1a4 <WM__InitIVRSearch+0xec>)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800b0c4:	b086      	sub	sp, #24
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	b912      	cbnz	r2, 800b0d0 <WM__InitIVRSearch+0x18>
 800b0ca:	f7ff fccf 	bl	800aa6c <WM__ActivateClipRect>
 800b0ce:	e064      	b.n	800b19a <WM__InitIVRSearch+0xe2>
 800b0d0:	4d35      	ldr	r5, [pc, #212]	; (800b1a8 <WM__InitIVRSearch+0xf0>)
 800b0d2:	696a      	ldr	r2, [r5, #20]
 800b0d4:	3201      	adds	r2, #1
 800b0d6:	2a01      	cmp	r2, #1
 800b0d8:	616a      	str	r2, [r5, #20]
 800b0da:	462c      	mov	r4, r5
 800b0dc:	dc5d      	bgt.n	800b19a <WM__InitIVRSearch+0xe2>
 800b0de:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b0e0:	f005 f88e 	bl	8010200 <GUI_ALLOC_LockH>
 800b0e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0e8:	612a      	str	r2, [r5, #16]
 800b0ea:	4a30      	ldr	r2, [pc, #192]	; (800b1ac <WM__InitIVRSearch+0xf4>)
 800b0ec:	9000      	str	r0, [sp, #0]
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	b12a      	cbz	r2, 800b0fe <WM__InitIVRSearch+0x46>
 800b0f2:	f100 0308 	add.w	r3, r0, #8
 800b0f6:	aa02      	add	r2, sp, #8
 800b0f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b0fc:	e005      	b.n	800b10a <WM__InitIVRSearch+0x52>
 800b0fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b100:	f012 0802 	ands.w	r8, r2, #2
 800b104:	d00a      	beq.n	800b11c <WM__InitIVRSearch+0x64>
 800b106:	c803      	ldmia	r0, {r0, r1}
 800b108:	aa02      	add	r2, sp, #8
 800b10a:	e882 0003 	stmia.w	r2, {r0, r1}
 800b10e:	ad02      	add	r5, sp, #8
 800b110:	b166      	cbz	r6, 800b12c <WM__InitIVRSearch+0x74>
 800b112:	4628      	mov	r0, r5
 800b114:	4631      	mov	r1, r6
 800b116:	f002 fa6b 	bl	800d5f0 <GUI__IntersectRect>
 800b11a:	e007      	b.n	800b12c <WM__InitIVRSearch+0x74>
 800b11c:	696b      	ldr	r3, [r5, #20]
 800b11e:	4668      	mov	r0, sp
 800b120:	3b01      	subs	r3, #1
 800b122:	616b      	str	r3, [r5, #20]
 800b124:	f005 f87a 	bl	801021c <GUI_ALLOC_UnlockH>
 800b128:	4640      	mov	r0, r8
 800b12a:	e037      	b.n	800b19c <WM__InitIVRSearch+0xe4>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	4e20      	ldr	r6, [pc, #128]	; (800b1b0 <WM__InitIVRSearch+0xf8>)
 800b130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b132:	b1c2      	cbz	r2, 800b166 <WM__InitIVRSearch+0xae>
 800b134:	9b00      	ldr	r3, [sp, #0]
 800b136:	6810      	ldr	r0, [r2, #0]
 800b138:	6851      	ldr	r1, [r2, #4]
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	ab04      	add	r3, sp, #16
 800b13e:	c303      	stmia	r3!, {r0, r1}
 800b140:	6833      	ldr	r3, [r6, #0]
 800b142:	b133      	cbz	r3, 800b152 <WM__InitIVRSearch+0x9a>
 800b144:	a801      	add	r0, sp, #4
 800b146:	f005 f869 	bl	801021c <GUI_ALLOC_UnlockH>
 800b14a:	6830      	ldr	r0, [r6, #0]
 800b14c:	f005 f858 	bl	8010200 <GUI_ALLOC_LockH>
 800b150:	9001      	str	r0, [sp, #4]
 800b152:	9801      	ldr	r0, [sp, #4]
 800b154:	a904      	add	r1, sp, #16
 800b156:	f7ff fc59 	bl	800aa0c <WM__Client2Screen>
 800b15a:	4628      	mov	r0, r5
 800b15c:	a904      	add	r1, sp, #16
 800b15e:	f002 fa47 	bl	800d5f0 <GUI__IntersectRect>
 800b162:	a801      	add	r0, sp, #4
 800b164:	e000      	b.n	800b168 <WM__InitIVRSearch+0xb0>
 800b166:	4668      	mov	r0, sp
 800b168:	f005 f858 	bl	801021c <GUI_ALLOC_UnlockH>
 800b16c:	6831      	ldr	r1, [r6, #0]
 800b16e:	b119      	cbz	r1, 800b178 <WM__InitIVRSearch+0xc0>
 800b170:	4628      	mov	r0, r5
 800b172:	f7ff fbcb 	bl	800a90c <WM__ClipAtParentBorders>
 800b176:	b128      	cbz	r0, 800b184 <WM__InitIVRSearch+0xcc>
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	4628      	mov	r0, r5
 800b17c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b17e:	f7ff fbc5 	bl	800a90c <WM__ClipAtParentBorders>
 800b182:	b918      	cbnz	r0, 800b18c <WM__InitIVRSearch+0xd4>
 800b184:	6963      	ldr	r3, [r4, #20]
 800b186:	3b01      	subs	r3, #1
 800b188:	6163      	str	r3, [r4, #20]
 800b18a:	e007      	b.n	800b19c <WM__InitIVRSearch+0xe4>
 800b18c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b190:	e884 0003 	stmia.w	r4, {r0, r1}
 800b194:	f7ff fece 	bl	800af34 <WM__GetNextIVR>
 800b198:	e000      	b.n	800b19c <WM__InitIVRSearch+0xe4>
 800b19a:	2001      	movs	r0, #1
 800b19c:	b006      	add	sp, #24
 800b19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000034 	.word	0x20000034
 800b1a8:	20026770 	.word	0x20026770
 800b1ac:	20026ce9 	.word	0x20026ce9
 800b1b0:	20026cc0 	.word	0x20026cc0

0800b1b4 <WM_Activate>:
 800b1b4:	4b02      	ldr	r3, [pc, #8]	; (800b1c0 <WM_Activate+0xc>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b1be:	4770      	bx	lr
 800b1c0:	20000034 	.word	0x20000034

0800b1c4 <WM_Deactivate>:
 800b1c4:	4b03      	ldr	r3, [pc, #12]	; (800b1d4 <WM_Deactivate+0x10>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b1ce:	f002 b875 	b.w	800d2bc <LCD_SetClipRectMax>
 800b1d2:	bf00      	nop
 800b1d4:	20000034 	.word	0x20000034

0800b1d8 <WM_DefaultProc>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	6840      	ldr	r0, [r0, #4]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	68e1      	ldr	r1, [r4, #12]
 800b1e2:	2b17      	cmp	r3, #23
 800b1e4:	d00f      	beq.n	800b206 <WM_DefaultProc+0x2e>
 800b1e6:	dc06      	bgt.n	800b1f6 <WM_DefaultProc+0x1e>
 800b1e8:	2b0e      	cmp	r3, #14
 800b1ea:	d00e      	beq.n	800b20a <WM_DefaultProc+0x32>
 800b1ec:	2b14      	cmp	r3, #20
 800b1ee:	d114      	bne.n	800b21a <WM_DefaultProc+0x42>
 800b1f0:	f006 f978 	bl	80114e4 <WM__GetClientRectEx>
 800b1f4:	e011      	b.n	800b21a <WM_DefaultProc+0x42>
 800b1f6:	2b22      	cmp	r3, #34	; 0x22
 800b1f8:	d00c      	beq.n	800b214 <WM_DefaultProc+0x3c>
 800b1fa:	2b28      	cmp	r3, #40	; 0x28
 800b1fc:	d10d      	bne.n	800b21a <WM_DefaultProc+0x42>
 800b1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b202:	f7ff bdac 	b.w	800ad5e <WM_InvalidateWindow>
 800b206:	60e0      	str	r0, [r4, #12]
 800b208:	bd10      	pop	{r4, pc}
 800b20a:	4621      	mov	r1, r4
 800b20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b210:	f006 b8ea 	b.w	80113e8 <WM_SendToParent>
 800b214:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b218:	e000      	b.n	800b21c <WM_DefaultProc+0x44>
 800b21a:	2300      	movs	r3, #0
 800b21c:	60e3      	str	r3, [r4, #12]
 800b21e:	bd10      	pop	{r4, pc}

0800b220 <_cbBackWin>:
 800b220:	6803      	ldr	r3, [r0, #0]
 800b222:	2b0e      	cmp	r3, #14
 800b224:	b510      	push	{r4, lr}
 800b226:	4604      	mov	r4, r0
 800b228:	d002      	beq.n	800b230 <_cbBackWin+0x10>
 800b22a:	2b0f      	cmp	r3, #15
 800b22c:	d009      	beq.n	800b242 <_cbBackWin+0x22>
 800b22e:	e020      	b.n	800b272 <_cbBackWin+0x52>
 800b230:	68c3      	ldr	r3, [r0, #12]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	2a01      	cmp	r2, #1
 800b236:	d121      	bne.n	800b27c <_cbBackWin+0x5c>
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b23e:	f003 bbd9 	b.w	800e9f4 <GUI_StoreKey>
 800b242:	4a0f      	ldr	r2, [pc, #60]	; (800b280 <_cbBackWin+0x60>)
 800b244:	6843      	ldr	r3, [r0, #4]
 800b246:	6811      	ldr	r1, [r2, #0]
 800b248:	428b      	cmp	r3, r1
 800b24a:	d006      	beq.n	800b25a <_cbBackWin+0x3a>
 800b24c:	6852      	ldr	r2, [r2, #4]
 800b24e:	4293      	cmp	r3, r2
 800b250:	bf14      	ite	ne
 800b252:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800b256:	2301      	moveq	r3, #1
 800b258:	e000      	b.n	800b25c <_cbBackWin+0x3c>
 800b25a:	2300      	movs	r3, #0
 800b25c:	4a09      	ldr	r2, [pc, #36]	; (800b284 <_cbBackWin+0x64>)
 800b25e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b262:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b266:	4298      	cmp	r0, r3
 800b268:	d003      	beq.n	800b272 <_cbBackWin+0x52>
 800b26a:	f002 fc17 	bl	800da9c <GUI_SetBkColor>
 800b26e:	f004 fb9d 	bl	800f9ac <GUI_Clear>
 800b272:	4620      	mov	r0, r4
 800b274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b278:	f7ff bfae 	b.w	800b1d8 <WM_DefaultProc>
 800b27c:	bd10      	pop	{r4, pc}
 800b27e:	bf00      	nop
 800b280:	20026cc4 	.word	0x20026cc4
 800b284:	20026cf0 	.word	0x20026cf0

0800b288 <WM_Init>:
 800b288:	b530      	push	{r4, r5, lr}
 800b28a:	4b2b      	ldr	r3, [pc, #172]	; (800b338 <WM_Init+0xb0>)
 800b28c:	7818      	ldrb	r0, [r3, #0]
 800b28e:	b085      	sub	sp, #20
 800b290:	461d      	mov	r5, r3
 800b292:	2800      	cmp	r0, #0
 800b294:	d14d      	bne.n	800b332 <WM_Init+0xaa>
 800b296:	4b29      	ldr	r3, [pc, #164]	; (800b33c <WM_Init+0xb4>)
 800b298:	6018      	str	r0, [r3, #0]
 800b29a:	4b29      	ldr	r3, [pc, #164]	; (800b340 <WM_Init+0xb8>)
 800b29c:	6018      	str	r0, [r3, #0]
 800b29e:	4b29      	ldr	r3, [pc, #164]	; (800b344 <WM_Init+0xbc>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6458      	str	r0, [r3, #68]	; 0x44
 800b2a4:	4b28      	ldr	r3, [pc, #160]	; (800b348 <WM_Init+0xc0>)
 800b2a6:	8018      	strh	r0, [r3, #0]
 800b2a8:	4b28      	ldr	r3, [pc, #160]	; (800b34c <WM_Init+0xc4>)
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	8018      	strh	r0, [r3, #0]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	f004 fa4c 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800b2b4:	b1c0      	cbz	r0, 800b2e8 <WM_Init+0x60>
 800b2b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e88d 000c 	stmia.w	sp, {r2, r3}
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800b2c6:	4b22      	ldr	r3, [pc, #136]	; (800b350 <WM_Init+0xc8>)
 800b2c8:	9302      	str	r3, [sp, #8]
 800b2ca:	9003      	str	r0, [sp, #12]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	4601      	mov	r1, r0
 800b2d0:	f7ff fd86 	bl	800ade0 <WM_CreateWindowAsChild>
 800b2d4:	4b1f      	ldr	r3, [pc, #124]	; (800b354 <WM_Init+0xcc>)
 800b2d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b2da:	4b1f      	ldr	r3, [pc, #124]	; (800b358 <WM_Init+0xd0>)
 800b2dc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b2e0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800b2e4:	f7ff fd3b 	bl	800ad5e <WM_InvalidateWindow>
 800b2e8:	3401      	adds	r4, #1
 800b2ea:	2c02      	cmp	r4, #2
 800b2ec:	d1df      	bne.n	800b2ae <WM_Init+0x26>
 800b2ee:	481b      	ldr	r0, [pc, #108]	; (800b35c <WM_Init+0xd4>)
 800b2f0:	f006 f90a 	bl	8011508 <WM__AddCriticalHandle>
 800b2f4:	481a      	ldr	r0, [pc, #104]	; (800b360 <WM_Init+0xd8>)
 800b2f6:	f006 f907 	bl	8011508 <WM__AddCriticalHandle>
 800b2fa:	481a      	ldr	r0, [pc, #104]	; (800b364 <WM_Init+0xdc>)
 800b2fc:	f006 f904 	bl	8011508 <WM__AddCriticalHandle>
 800b300:	4819      	ldr	r0, [pc, #100]	; (800b368 <WM_Init+0xe0>)
 800b302:	f006 f901 	bl	8011508 <WM__AddCriticalHandle>
 800b306:	4819      	ldr	r0, [pc, #100]	; (800b36c <WM_Init+0xe4>)
 800b308:	f006 f8fe 	bl	8011508 <WM__AddCriticalHandle>
 800b30c:	4818      	ldr	r0, [pc, #96]	; (800b370 <WM_Init+0xe8>)
 800b30e:	f006 f8fb 	bl	8011508 <WM__AddCriticalHandle>
 800b312:	4b10      	ldr	r3, [pc, #64]	; (800b354 <WM_Init+0xcc>)
 800b314:	6818      	ldr	r0, [r3, #0]
 800b316:	f7ff fd43 	bl	800ada0 <WM_SelectWindow>
 800b31a:	f7ff ff4b 	bl	800b1b4 <WM_Activate>
 800b31e:	2301      	movs	r3, #1
 800b320:	702b      	strb	r3, [r5, #0]
 800b322:	4814      	ldr	r0, [pc, #80]	; (800b374 <WM_Init+0xec>)
 800b324:	4b14      	ldr	r3, [pc, #80]	; (800b378 <WM_Init+0xf0>)
 800b326:	6003      	str	r3, [r0, #0]
 800b328:	b005      	add	sp, #20
 800b32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b32e:	f004 bb4d 	b.w	800f9cc <GUI__RegisterExit>
 800b332:	b005      	add	sp, #20
 800b334:	bd30      	pop	{r4, r5, pc}
 800b336:	bf00      	nop
 800b338:	20026794 	.word	0x20026794
 800b33c:	20026ce0 	.word	0x20026ce0
 800b340:	20026788 	.word	0x20026788
 800b344:	20000034 	.word	0x20000034
 800b348:	20026cdc 	.word	0x20026cdc
 800b34c:	20026cbc 	.word	0x20026cbc
 800b350:	0800b221 	.word	0x0800b221
 800b354:	20026cc4 	.word	0x20026cc4
 800b358:	20026cf0 	.word	0x20026cf0
 800b35c:	20026e34 	.word	0x20026e34
 800b360:	20026e24 	.word	0x20026e24
 800b364:	20026e14 	.word	0x20026e14
 800b368:	20026e3c 	.word	0x20026e3c
 800b36c:	20026e2c 	.word	0x20026e2c
 800b370:	20026e1c 	.word	0x20026e1c
 800b374:	2002678c 	.word	0x2002678c
 800b378:	0800a711 	.word	0x0800a711

0800b37c <GUI_MEMDEV_GetXSize>:
 800b37c:	b513      	push	{r0, r1, r4, lr}
 800b37e:	b920      	cbnz	r0, 800b38a <GUI_MEMDEV_GetXSize+0xe>
 800b380:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <GUI_MEMDEV_GetXSize+0x28>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b386:	4604      	mov	r4, r0
 800b388:	b148      	cbz	r0, 800b39e <GUI_MEMDEV_GetXSize+0x22>
 800b38a:	f004 ff39 	bl	8010200 <GUI_ALLOC_LockH>
 800b38e:	ab02      	add	r3, sp, #8
 800b390:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800b394:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b398:	4618      	mov	r0, r3
 800b39a:	f004 ff3f 	bl	801021c <GUI_ALLOC_UnlockH>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	b002      	add	sp, #8
 800b3a2:	bd10      	pop	{r4, pc}
 800b3a4:	20000034 	.word	0x20000034

0800b3a8 <GUI_MEMDEV_GetXPos>:
 800b3a8:	b513      	push	{r0, r1, r4, lr}
 800b3aa:	b920      	cbnz	r0, 800b3b6 <GUI_MEMDEV_GetXPos+0xe>
 800b3ac:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <GUI_MEMDEV_GetXPos+0x28>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	b148      	cbz	r0, 800b3ca <GUI_MEMDEV_GetXPos+0x22>
 800b3b6:	f004 ff23 	bl	8010200 <GUI_ALLOC_LockH>
 800b3ba:	ab02      	add	r3, sp, #8
 800b3bc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b3c0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f004 ff29 	bl	801021c <GUI_ALLOC_UnlockH>
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	b002      	add	sp, #8
 800b3ce:	bd10      	pop	{r4, pc}
 800b3d0:	20000034 	.word	0x20000034

0800b3d4 <GUI_MEMDEV_GetYPos>:
 800b3d4:	b513      	push	{r0, r1, r4, lr}
 800b3d6:	b920      	cbnz	r0, 800b3e2 <GUI_MEMDEV_GetYPos+0xe>
 800b3d8:	4b08      	ldr	r3, [pc, #32]	; (800b3fc <GUI_MEMDEV_GetYPos+0x28>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b3de:	4604      	mov	r4, r0
 800b3e0:	b148      	cbz	r0, 800b3f6 <GUI_MEMDEV_GetYPos+0x22>
 800b3e2:	f004 ff0d 	bl	8010200 <GUI_ALLOC_LockH>
 800b3e6:	ab02      	add	r3, sp, #8
 800b3e8:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800b3ec:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f004 ff13 	bl	801021c <GUI_ALLOC_UnlockH>
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd10      	pop	{r4, pc}
 800b3fc:	20000034 	.word	0x20000034

0800b400 <GUI_MEMDEV_GetDataPtr>:
 800b400:	b513      	push	{r0, r1, r4, lr}
 800b402:	b150      	cbz	r0, 800b41a <GUI_MEMDEV_GetDataPtr+0x1a>
 800b404:	f004 fefc 	bl	8010200 <GUI_ALLOC_LockH>
 800b408:	4604      	mov	r4, r0
 800b40a:	a802      	add	r0, sp, #8
 800b40c:	f840 4d04 	str.w	r4, [r0, #-4]!
 800b410:	f004 ff04 	bl	801021c <GUI_ALLOC_UnlockH>
 800b414:	f104 0018 	add.w	r0, r4, #24
 800b418:	e7ff      	b.n	800b41a <GUI_MEMDEV_GetDataPtr+0x1a>
 800b41a:	b002      	add	sp, #8
 800b41c:	bd10      	pop	{r4, pc}
	...

0800b420 <GUI_MEMDEV__SetAlphaCallback>:
 800b420:	4b01      	ldr	r3, [pc, #4]	; (800b428 <GUI_MEMDEV__SetAlphaCallback+0x8>)
 800b422:	6018      	str	r0, [r3, #0]
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	20026798 	.word	0x20026798

0800b42c <_GetDevData>:
 800b42c:	4802      	ldr	r0, [pc, #8]	; (800b438 <_GetDevData+0xc>)
 800b42e:	2901      	cmp	r1, #1
 800b430:	bf18      	it	ne
 800b432:	2000      	movne	r0, #0
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	08012db8 	.word	0x08012db8

0800b43c <_GetDevFunc>:
 800b43c:	4802      	ldr	r0, [pc, #8]	; (800b448 <_GetDevFunc+0xc>)
 800b43e:	2916      	cmp	r1, #22
 800b440:	bf18      	it	ne
 800b442:	2000      	movne	r0, #0
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	080115cd 	.word	0x080115cd

0800b44c <_GetDevProp>:
 800b44c:	2908      	cmp	r1, #8
 800b44e:	bf0c      	ite	eq
 800b450:	2020      	moveq	r0, #32
 800b452:	2000      	movne	r0, #0
 800b454:	4770      	bx	lr

0800b456 <_SetOrg>:
 800b456:	b508      	push	{r3, lr}
 800b458:	6800      	ldr	r0, [r0, #0]
 800b45a:	68c3      	ldr	r3, [r0, #12]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	4798      	blx	r3
 800b460:	bd08      	pop	{r3, pc}

0800b462 <_GetRect>:
 800b462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b464:	6880      	ldr	r0, [r0, #8]
 800b466:	460c      	mov	r4, r1
 800b468:	f004 feca 	bl	8010200 <GUI_ALLOC_LockH>
 800b46c:	4603      	mov	r3, r0
 800b46e:	a802      	add	r0, sp, #8
 800b470:	8899      	ldrh	r1, [r3, #4]
 800b472:	88da      	ldrh	r2, [r3, #6]
 800b474:	891d      	ldrh	r5, [r3, #8]
 800b476:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b47a:	895b      	ldrh	r3, [r3, #10]
 800b47c:	8021      	strh	r1, [r4, #0]
 800b47e:	8062      	strh	r2, [r4, #2]
 800b480:	4429      	add	r1, r5
 800b482:	441a      	add	r2, r3
 800b484:	3901      	subs	r1, #1
 800b486:	3a01      	subs	r2, #1
 800b488:	80a1      	strh	r1, [r4, #4]
 800b48a:	80e2      	strh	r2, [r4, #6]
 800b48c:	f004 fec6 	bl	801021c <GUI_ALLOC_UnlockH>
 800b490:	b003      	add	sp, #12
 800b492:	bd30      	pop	{r4, r5, pc}

0800b494 <_XY2PTR>:
 800b494:	4b0e      	ldr	r3, [pc, #56]	; (800b4d0 <_XY2PTR+0x3c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b49a:	4605      	mov	r5, r0
 800b49c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b49e:	460e      	mov	r6, r1
 800b4a0:	f004 feae 	bl	8010200 <GUI_ALLOC_LockH>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	a802      	add	r0, sp, #8
 800b4a8:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800b4ac:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b4b0:	f103 0118 	add.w	r1, r3, #24
 800b4b4:	1b36      	subs	r6, r6, r4
 800b4b6:	68dc      	ldr	r4, [r3, #12]
 800b4b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4bc:	fb04 1406 	mla	r4, r4, r6, r1
 800b4c0:	1aed      	subs	r5, r5, r3
 800b4c2:	f004 feab 	bl	801021c <GUI_ALLOC_UnlockH>
 800b4c6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	b002      	add	sp, #8
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}
 800b4d0:	20000034 	.word	0x20000034

0800b4d4 <_GetPixelIndex>:
 800b4d4:	b508      	push	{r3, lr}
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	4611      	mov	r1, r2
 800b4da:	f7ff ffdb 	bl	800b494 <_XY2PTR>
 800b4de:	6800      	ldr	r0, [r0, #0]
 800b4e0:	bd08      	pop	{r3, pc}
	...

0800b4e4 <_XorPixel>:
 800b4e4:	4b15      	ldr	r3, [pc, #84]	; (800b53c <_XorPixel+0x58>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4ea:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b4ec:	4615      	mov	r5, r2
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	f004 fe86 	bl	8010200 <GUI_ALLOC_LockH>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	9000      	str	r0, [sp, #0]
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7ff ffcb 	bl	800b494 <_XY2PTR>
 800b4fe:	9b00      	ldr	r3, [sp, #0]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	4604      	mov	r4, r0
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	4798      	blx	r3
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	4058      	eors	r0, r3
 800b50e:	9b00      	ldr	r3, [sp, #0]
 800b510:	6020      	str	r0, [r4, #0]
 800b512:	6958      	ldr	r0, [r3, #20]
 800b514:	b160      	cbz	r0, 800b530 <_XorPixel+0x4c>
 800b516:	f004 fe73 	bl	8010200 <GUI_ALLOC_LockH>
 800b51a:	ac02      	add	r4, sp, #8
 800b51c:	6883      	ldr	r3, [r0, #8]
 800b51e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4631      	mov	r1, r6
 800b526:	462a      	mov	r2, r5
 800b528:	4798      	blx	r3
 800b52a:	4620      	mov	r0, r4
 800b52c:	f004 fe76 	bl	801021c <GUI_ALLOC_UnlockH>
 800b530:	4668      	mov	r0, sp
 800b532:	f004 fe73 	bl	801021c <GUI_ALLOC_UnlockH>
 800b536:	b002      	add	sp, #8
 800b538:	bd70      	pop	{r4, r5, r6, pc}
 800b53a:	bf00      	nop
 800b53c:	20000034 	.word	0x20000034

0800b540 <_SetPixelIndex>:
 800b540:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b542:	461c      	mov	r4, r3
 800b544:	4b10      	ldr	r3, [pc, #64]	; (800b588 <_SetPixelIndex+0x48>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b54a:	460e      	mov	r6, r1
 800b54c:	4615      	mov	r5, r2
 800b54e:	f004 fe57 	bl	8010200 <GUI_ALLOC_LockH>
 800b552:	4629      	mov	r1, r5
 800b554:	9000      	str	r0, [sp, #0]
 800b556:	4630      	mov	r0, r6
 800b558:	f7ff ff9c 	bl	800b494 <_XY2PTR>
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	6004      	str	r4, [r0, #0]
 800b560:	6958      	ldr	r0, [r3, #20]
 800b562:	b160      	cbz	r0, 800b57e <_SetPixelIndex+0x3e>
 800b564:	f004 fe4c 	bl	8010200 <GUI_ALLOC_LockH>
 800b568:	ac02      	add	r4, sp, #8
 800b56a:	6883      	ldr	r3, [r0, #8]
 800b56c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4631      	mov	r1, r6
 800b574:	462a      	mov	r2, r5
 800b576:	4798      	blx	r3
 800b578:	4620      	mov	r0, r4
 800b57a:	f004 fe4f 	bl	801021c <GUI_ALLOC_UnlockH>
 800b57e:	4668      	mov	r0, sp
 800b580:	f004 fe4c 	bl	801021c <GUI_ALLOC_UnlockH>
 800b584:	b002      	add	sp, #8
 800b586:	bd70      	pop	{r4, r5, r6, pc}
 800b588:	20000034 	.word	0x20000034

0800b58c <_DrawVLine>:
 800b58c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b590:	4d2c      	ldr	r5, [pc, #176]	; (800b644 <_DrawVLine+0xb8>)
 800b592:	461e      	mov	r6, r3
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b598:	460f      	mov	r7, r1
 800b59a:	4614      	mov	r4, r2
 800b59c:	f004 fe30 	bl	8010200 <GUI_ALLOC_LockH>
 800b5a0:	9000      	str	r0, [sp, #0]
 800b5a2:	6940      	ldr	r0, [r0, #20]
 800b5a4:	46a9      	mov	r9, r5
 800b5a6:	b108      	cbz	r0, 800b5ac <_DrawVLine+0x20>
 800b5a8:	f004 fe2a 	bl	8010200 <GUI_ALLOC_LockH>
 800b5ac:	9001      	str	r0, [sp, #4]
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff ff6f 	bl	800b494 <_XY2PTR>
 800b5b6:	f8d9 2000 	ldr.w	r2, [r9]
 800b5ba:	9b00      	ldr	r3, [sp, #0]
 800b5bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b5be:	7c12      	ldrb	r2, [r2, #16]
 800b5c0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800b5c4:	f8d1 9000 	ldr.w	r9, [r1]
 800b5c8:	07d2      	lsls	r2, r2, #31
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	d51f      	bpl.n	800b60e <_DrawVLine+0x82>
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	4798      	blx	r3
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	9801      	ldr	r0, [sp, #4]
 800b5da:	b128      	cbz	r0, 800b5e8 <_DrawVLine+0x5c>
 800b5dc:	6882      	ldr	r2, [r0, #8]
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f8d2 c000 	ldr.w	ip, [r2]
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	47e0      	blx	ip
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	ea83 0308 	eor.w	r3, r3, r8
 800b5ee:	602b      	str	r3, [r5, #0]
 800b5f0:	9b00      	ldr	r3, [sp, #0]
 800b5f2:	3401      	adds	r4, #1
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	42b4      	cmp	r4, r6
 800b5f8:	441d      	add	r5, r3
 800b5fa:	dded      	ble.n	800b5d8 <_DrawVLine+0x4c>
 800b5fc:	4668      	mov	r0, sp
 800b5fe:	f004 fe0d 	bl	801021c <GUI_ALLOC_UnlockH>
 800b602:	9b01      	ldr	r3, [sp, #4]
 800b604:	b1d3      	cbz	r3, 800b63c <_DrawVLine+0xb0>
 800b606:	a801      	add	r0, sp, #4
 800b608:	f004 fe08 	bl	801021c <GUI_ALLOC_UnlockH>
 800b60c:	e016      	b.n	800b63c <_DrawVLine+0xb0>
 800b60e:	9b01      	ldr	r3, [sp, #4]
 800b610:	b163      	cbz	r3, 800b62c <_DrawVLine+0xa0>
 800b612:	9801      	ldr	r0, [sp, #4]
 800b614:	6883      	ldr	r3, [r0, #8]
 800b616:	4622      	mov	r2, r4
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4639      	mov	r1, r7
 800b61c:	3401      	adds	r4, #1
 800b61e:	4798      	blx	r3
 800b620:	42b4      	cmp	r4, r6
 800b622:	f8c5 9000 	str.w	r9, [r5]
 800b626:	4445      	add	r5, r8
 800b628:	ddf3      	ble.n	800b612 <_DrawVLine+0x86>
 800b62a:	e7e7      	b.n	800b5fc <_DrawVLine+0x70>
 800b62c:	1b34      	subs	r4, r6, r4
 800b62e:	3401      	adds	r4, #1
 800b630:	3c01      	subs	r4, #1
 800b632:	f8c5 9000 	str.w	r9, [r5]
 800b636:	4445      	add	r5, r8
 800b638:	d1fa      	bne.n	800b630 <_DrawVLine+0xa4>
 800b63a:	e7df      	b.n	800b5fc <_DrawVLine+0x70>
 800b63c:	b003      	add	sp, #12
 800b63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b642:	bf00      	nop
 800b644:	20000034 	.word	0x20000034

0800b648 <_FillRect>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b6fc <_FillRect+0xb4>
 800b650:	4614      	mov	r4, r2
 800b652:	f8db 2000 	ldr.w	r2, [fp]
 800b656:	b085      	sub	sp, #20
 800b658:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800b65a:	460f      	mov	r7, r1
 800b65c:	461d      	mov	r5, r3
 800b65e:	f004 fdcf 	bl	8010200 <GUI_ALLOC_LockH>
 800b662:	4621      	mov	r1, r4
 800b664:	9002      	str	r0, [sp, #8]
 800b666:	4638      	mov	r0, r7
 800b668:	f7ff ff14 	bl	800b494 <_XY2PTR>
 800b66c:	9a02      	ldr	r2, [sp, #8]
 800b66e:	f8db 3000 	ldr.w	r3, [fp]
 800b672:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800b676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b678:	4606      	mov	r6, r0
 800b67a:	6950      	ldr	r0, [r2, #20]
 800b67c:	f8d3 a000 	ldr.w	sl, [r3]
 800b680:	1bed      	subs	r5, r5, r7
 800b682:	3501      	adds	r5, #1
 800b684:	b338      	cbz	r0, 800b6d6 <_FillRect+0x8e>
 800b686:	f004 fdbb 	bl	8010200 <GUI_ALLOC_LockH>
 800b68a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b68c:	f10d 0810 	add.w	r8, sp, #16
 800b690:	1b13      	subs	r3, r2, r4
 800b692:	f848 0d04 	str.w	r0, [r8, #-4]!
 800b696:	3301      	adds	r3, #1
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4639      	mov	r1, r7
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f006 f870 	bl	8011784 <GUI_USAGE_AddRect>
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	f004 fdb9 	bl	801021c <GUI_ALLOC_UnlockH>
 800b6aa:	e014      	b.n	800b6d6 <_FillRect+0x8e>
 800b6ac:	f8db 3000 	ldr.w	r3, [fp]
 800b6b0:	7c1b      	ldrb	r3, [r3, #16]
 800b6b2:	07db      	lsls	r3, r3, #31
 800b6b4:	d513      	bpl.n	800b6de <_FillRect+0x96>
 800b6b6:	9b02      	ldr	r3, [sp, #8]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	4798      	blx	r3
 800b6c0:	4632      	mov	r2, r6
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	6811      	ldr	r1, [r2, #0]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	ea81 0100 	eor.w	r1, r1, r0
 800b6cc:	f842 1b04 	str.w	r1, [r2], #4
 800b6d0:	d1f8      	bne.n	800b6c4 <_FillRect+0x7c>
 800b6d2:	444e      	add	r6, r9
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	dde7      	ble.n	800b6ac <_FillRect+0x64>
 800b6dc:	e008      	b.n	800b6f0 <_FillRect+0xa8>
 800b6de:	2d00      	cmp	r5, #0
 800b6e0:	ddf7      	ble.n	800b6d2 <_FillRect+0x8a>
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	f842 ab04 	str.w	sl, [r2], #4
 800b6ec:	d1fb      	bne.n	800b6e6 <_FillRect+0x9e>
 800b6ee:	e7f0      	b.n	800b6d2 <_FillRect+0x8a>
 800b6f0:	a802      	add	r0, sp, #8
 800b6f2:	f004 fd93 	bl	801021c <GUI_ALLOC_UnlockH>
 800b6f6:	b005      	add	sp, #20
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	20000034 	.word	0x20000034

0800b700 <_DrawHLine>:
 800b700:	b507      	push	{r0, r1, r2, lr}
 800b702:	9200      	str	r2, [sp, #0]
 800b704:	f7ff ffa0 	bl	800b648 <_FillRect>
 800b708:	b003      	add	sp, #12
 800b70a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800b710 <_DrawBitmap>:
 800b710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	4c9d      	ldr	r4, [pc, #628]	; (800b98c <_DrawBitmap+0x27c>)
 800b716:	469a      	mov	sl, r3
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	b091      	sub	sp, #68	; 0x44
 800b71c:	4680      	mov	r8, r0
 800b71e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b720:	9207      	str	r2, [sp, #28]
 800b722:	460e      	mov	r6, r1
 800b724:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 800b728:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f000 8387 	beq.w	800be3e <_DrawBitmap+0x72e>
 800b730:	f004 fd66 	bl	8010200 <GUI_ALLOC_LockH>
 800b734:	900e      	str	r0, [sp, #56]	; 0x38
 800b736:	6940      	ldr	r0, [r0, #20]
 800b738:	b108      	cbz	r0, 800b73e <_DrawBitmap+0x2e>
 800b73a:	f004 fd61 	bl	8010200 <GUI_ALLOC_LockH>
 800b73e:	900f      	str	r0, [sp, #60]	; 0x3c
 800b740:	a810      	add	r0, sp, #64	; 0x40
 800b742:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	930a      	str	r3, [sp, #40]	; 0x28
 800b74a:	f004 fd67 	bl	801021c <GUI_ALLOC_UnlockH>
 800b74e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b750:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b752:	4437      	add	r7, r6
 800b754:	9704      	str	r7, [sp, #16]
 800b756:	b150      	cbz	r0, 800b76e <_DrawBitmap+0x5e>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	7c1b      	ldrb	r3, [r3, #16]
 800b75c:	079c      	lsls	r4, r3, #30
 800b75e:	d406      	bmi.n	800b76e <_DrawBitmap+0x5e>
 800b760:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b762:	9700      	str	r7, [sp, #0]
 800b764:	9904      	ldr	r1, [sp, #16]
 800b766:	9a07      	ldr	r2, [sp, #28]
 800b768:	4653      	mov	r3, sl
 800b76a:	f006 f80b 	bl	8011784 <GUI_USAGE_AddRect>
 800b76e:	9804      	ldr	r0, [sp, #16]
 800b770:	9907      	ldr	r1, [sp, #28]
 800b772:	f7ff fe8f 	bl	800b494 <_XY2PTR>
 800b776:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b778:	2f17      	cmp	r7, #23
 800b77a:	4606      	mov	r6, r0
 800b77c:	dd64      	ble.n	800b848 <_DrawBitmap+0x138>
 800b77e:	ea4f 078a 	mov.w	r7, sl, lsl #2
 800b782:	9706      	str	r7, [sp, #24]
 800b784:	f04f 0900 	mov.w	r9, #0
 800b788:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b78a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b78c:	45b9      	cmp	r9, r7
 800b78e:	da57      	bge.n	800b840 <_DrawBitmap+0x130>
 800b790:	b130      	cbz	r0, 800b7a0 <_DrawBitmap+0x90>
 800b792:	6883      	ldr	r3, [r0, #8]
 800b794:	9a07      	ldr	r2, [sp, #28]
 800b796:	685c      	ldr	r4, [r3, #4]
 800b798:	9904      	ldr	r1, [sp, #16]
 800b79a:	444a      	add	r2, r9
 800b79c:	4653      	mov	r3, sl
 800b79e:	47a0      	blx	r4
 800b7a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b7a4:	68d8      	ldr	r0, [r3, #12]
 800b7a6:	b128      	cbz	r0, 800b7b4 <_DrawBitmap+0xa4>
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4659      	mov	r1, fp
 800b7ac:	9a06      	ldr	r2, [sp, #24]
 800b7ae:	f007 fa5a 	bl	8012c66 <memcpy>
 800b7b2:	e03e      	b.n	800b832 <_DrawBitmap+0x122>
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	4798      	blx	r3
 800b7b8:	0e00      	lsrs	r0, r0, #24
 800b7ba:	9005      	str	r0, [sp, #20]
 800b7bc:	4635      	mov	r5, r6
 800b7be:	4657      	mov	r7, sl
 800b7c0:	465c      	mov	r4, fp
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	f04f 0c00 	mov.w	ip, #0
 800b7ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800b7ce:	9805      	ldr	r0, [sp, #20]
 800b7d0:	0e09      	lsrs	r1, r1, #24
 800b7d2:	4281      	cmp	r1, r0
 800b7d4:	9805      	ldr	r0, [sp, #20]
 800b7d6:	bf08      	it	eq
 800b7d8:	f10c 0c01 	addeq.w	ip, ip, #1
 800b7dc:	4281      	cmp	r1, r0
 800b7de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b7e2:	d014      	beq.n	800b80e <_DrawBitmap+0xfe>
 800b7e4:	f1bc 0f00 	cmp.w	ip, #0
 800b7e8:	d014      	beq.n	800b814 <_DrawBitmap+0x104>
 800b7ea:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	f8cd c008 	str.w	ip, [sp, #8]
 800b7fa:	f007 fa34 	bl	8012c66 <memcpy>
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	f8dd c008 	ldr.w	ip, [sp, #8]
 800b804:	441d      	add	r5, r3
 800b806:	441c      	add	r4, r3
 800b808:	ebcc 0707 	rsb	r7, ip, r7
 800b80c:	e00f      	b.n	800b82e <_DrawBitmap+0x11e>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1db      	bne.n	800b7ca <_DrawBitmap+0xba>
 800b812:	e7e7      	b.n	800b7e4 <_DrawBitmap+0xd4>
 800b814:	6820      	ldr	r0, [r4, #0]
 800b816:	0e02      	lsrs	r2, r0, #24
 800b818:	2aff      	cmp	r2, #255	; 0xff
 800b81a:	d005      	beq.n	800b828 <_DrawBitmap+0x118>
 800b81c:	43d2      	mvns	r2, r2
 800b81e:	6829      	ldr	r1, [r5, #0]
 800b820:	b2d2      	uxtb	r2, r2
 800b822:	f001 ff03 	bl	800d62c <GUI__MixColors>
 800b826:	6028      	str	r0, [r5, #0]
 800b828:	3504      	adds	r5, #4
 800b82a:	3404      	adds	r4, #4
 800b82c:	3f01      	subs	r7, #1
 800b82e:	2f00      	cmp	r7, #0
 800b830:	d1c7      	bne.n	800b7c2 <_DrawBitmap+0xb2>
 800b832:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b834:	44bb      	add	fp, r7
 800b836:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b838:	f109 0901 	add.w	r9, r9, #1
 800b83c:	443e      	add	r6, r7
 800b83e:	e7a3      	b.n	800b788 <_DrawBitmap+0x78>
 800b840:	2800      	cmp	r0, #0
 800b842:	f040 82f9 	bne.w	800be38 <_DrawBitmap+0x728>
 800b846:	e2fa      	b.n	800be3e <_DrawBitmap+0x72e>
 800b848:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b84a:	2f10      	cmp	r7, #16
 800b84c:	d137      	bne.n	800b8be <_DrawBitmap+0x1ae>
 800b84e:	1f06      	subs	r6, r0, #4
 800b850:	2500      	movs	r5, #0
 800b852:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b854:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b856:	42bd      	cmp	r5, r7
 800b858:	f280 80a0 	bge.w	800b99c <_DrawBitmap+0x28c>
 800b85c:	9f07      	ldr	r7, [sp, #28]
 800b85e:	442f      	add	r7, r5
 800b860:	b13c      	cbz	r4, 800b872 <_DrawBitmap+0x162>
 800b862:	68a3      	ldr	r3, [r4, #8]
 800b864:	9904      	ldr	r1, [sp, #16]
 800b866:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800b86a:	4620      	mov	r0, r4
 800b86c:	463a      	mov	r2, r7
 800b86e:	4653      	mov	r3, sl
 800b870:	47e0      	blx	ip
 800b872:	f1ab 0302 	sub.w	r3, fp, #2
 800b876:	9306      	str	r3, [sp, #24]
 800b878:	9605      	str	r6, [sp, #20]
 800b87a:	46d1      	mov	r9, sl
 800b87c:	9904      	ldr	r1, [sp, #16]
 800b87e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b882:	9a06      	ldr	r2, [sp, #24]
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800b88a:	9206      	str	r2, [sp, #24]
 800b88c:	4451      	add	r1, sl
 800b88e:	ebc9 0101 	rsb	r1, r9, r1
 800b892:	9103      	str	r1, [sp, #12]
 800b894:	4798      	blx	r3
 800b896:	9b05      	ldr	r3, [sp, #20]
 800b898:	9903      	ldr	r1, [sp, #12]
 800b89a:	f843 0f04 	str.w	r0, [r3, #4]!
 800b89e:	9305      	str	r3, [sp, #20]
 800b8a0:	b124      	cbz	r4, 800b8ac <_DrawBitmap+0x19c>
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	463a      	mov	r2, r7
 800b8aa:	4798      	blx	r3
 800b8ac:	f1b9 0901 	subs.w	r9, r9, #1
 800b8b0:	d1e4      	bne.n	800b87c <_DrawBitmap+0x16c>
 800b8b2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800b8b4:	44bb      	add	fp, r7
 800b8b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b8b8:	3501      	adds	r5, #1
 800b8ba:	443e      	add	r6, r7
 800b8bc:	e7c9      	b.n	800b852 <_DrawBitmap+0x142>
 800b8be:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b8c0:	2f08      	cmp	r7, #8
 800b8c2:	f100 0604 	add.w	r6, r0, #4
 800b8c6:	d16d      	bne.n	800b9a4 <_DrawBitmap+0x294>
 800b8c8:	9f07      	ldr	r7, [sp, #28]
 800b8ca:	9907      	ldr	r1, [sp, #28]
 800b8cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b8ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800b8d0:	1a7b      	subs	r3, r7, r1
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	f1a6 0004 	sub.w	r0, r6, #4
 800b8d8:	da60      	bge.n	800b99c <_DrawBitmap+0x28c>
 800b8da:	4b2c      	ldr	r3, [pc, #176]	; (800b98c <_DrawBitmap+0x27c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	7c1b      	ldrb	r3, [r3, #16]
 800b8e0:	b36d      	cbz	r5, 800b93e <_DrawBitmap+0x22e>
 800b8e2:	f013 0303 	ands.w	r3, r3, #3
 800b8e6:	d005      	beq.n	800b8f4 <_DrawBitmap+0x1e4>
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d151      	bne.n	800b990 <_DrawBitmap+0x280>
 800b8ec:	46b1      	mov	r9, r6
 800b8ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b8f2:	e01c      	b.n	800b92e <_DrawBitmap+0x21e>
 800b8f4:	f81b 2003 	ldrb.w	r2, [fp, r3]
 800b8f8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800b8fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800b900:	3301      	adds	r3, #1
 800b902:	4553      	cmp	r3, sl
 800b904:	d1f6      	bne.n	800b8f4 <_DrawBitmap+0x1e4>
 800b906:	e043      	b.n	800b990 <_DrawBitmap+0x280>
 800b908:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800b90c:	f849 3c04 	str.w	r3, [r9, #-4]
 800b910:	b12c      	cbz	r4, 800b91e <_DrawBitmap+0x20e>
 800b912:	68a3      	ldr	r3, [r4, #8]
 800b914:	4620      	mov	r0, r4
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4641      	mov	r1, r8
 800b91a:	463a      	mov	r2, r7
 800b91c:	4798      	blx	r3
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	f108 0801 	add.w	r8, r8, #1
 800b924:	4453      	add	r3, sl
 800b926:	4543      	cmp	r3, r8
 800b928:	f109 0904 	add.w	r9, r9, #4
 800b92c:	d030      	beq.n	800b990 <_DrawBitmap+0x280>
 800b92e:	9804      	ldr	r0, [sp, #16]
 800b930:	ebc0 030b 	rsb	r3, r0, fp
 800b934:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0f0      	beq.n	800b91e <_DrawBitmap+0x20e>
 800b93c:	e7e4      	b.n	800b908 <_DrawBitmap+0x1f8>
 800b93e:	f013 0303 	ands.w	r3, r3, #3
 800b942:	d005      	beq.n	800b950 <_DrawBitmap+0x240>
 800b944:	2b02      	cmp	r3, #2
 800b946:	d123      	bne.n	800b990 <_DrawBitmap+0x280>
 800b948:	46b1      	mov	r9, r6
 800b94a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b94e:	e015      	b.n	800b97c <_DrawBitmap+0x26c>
 800b950:	4659      	mov	r1, fp
 800b952:	4652      	mov	r2, sl
 800b954:	f007 f987 	bl	8012c66 <memcpy>
 800b958:	e01a      	b.n	800b990 <_DrawBitmap+0x280>
 800b95a:	f849 3c04 	str.w	r3, [r9, #-4]
 800b95e:	b12c      	cbz	r4, 800b96c <_DrawBitmap+0x25c>
 800b960:	68a3      	ldr	r3, [r4, #8]
 800b962:	4620      	mov	r0, r4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4641      	mov	r1, r8
 800b968:	463a      	mov	r2, r7
 800b96a:	4798      	blx	r3
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	f108 0801 	add.w	r8, r8, #1
 800b972:	4453      	add	r3, sl
 800b974:	4543      	cmp	r3, r8
 800b976:	f109 0904 	add.w	r9, r9, #4
 800b97a:	d009      	beq.n	800b990 <_DrawBitmap+0x280>
 800b97c:	9904      	ldr	r1, [sp, #16]
 800b97e:	ebc1 030b 	rsb	r3, r1, fp
 800b982:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d0f0      	beq.n	800b96c <_DrawBitmap+0x25c>
 800b98a:	e7e6      	b.n	800b95a <_DrawBitmap+0x24a>
 800b98c:	20000034 	.word	0x20000034
 800b990:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b994:	4493      	add	fp, r2
 800b996:	3701      	adds	r7, #1
 800b998:	441e      	add	r6, r3
 800b99a:	e796      	b.n	800b8ca <_DrawBitmap+0x1ba>
 800b99c:	2c00      	cmp	r4, #0
 800b99e:	f040 824b 	bne.w	800be38 <_DrawBitmap+0x728>
 800b9a2:	e24c      	b.n	800be3e <_DrawBitmap+0x72e>
 800b9a4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b9a6:	4bb2      	ldr	r3, [pc, #712]	; (800bc70 <_DrawBitmap+0x560>)
 800b9a8:	9609      	str	r6, [sp, #36]	; 0x24
 800b9aa:	007f      	lsls	r7, r7, #1
 800b9ac:	970c      	str	r7, [sp, #48]	; 0x30
 800b9ae:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800b9b0:	00bf      	lsls	r7, r7, #2
 800b9b2:	970d      	str	r7, [sp, #52]	; 0x34
 800b9b4:	9f07      	ldr	r7, [sp, #28]
 800b9b6:	9705      	str	r7, [sp, #20]
 800b9b8:	2d00      	cmp	r5, #0
 800b9ba:	bf08      	it	eq
 800b9bc:	461d      	moveq	r5, r3
 800b9be:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b9c0:	9807      	ldr	r0, [sp, #28]
 800b9c2:	1f3c      	subs	r4, r7, #4
 800b9c4:	9f05      	ldr	r7, [sp, #20]
 800b9c6:	1a3b      	subs	r3, r7, r0
 800b9c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b9ca:	42bb      	cmp	r3, r7
 800b9cc:	f280 8232 	bge.w	800be34 <_DrawBitmap+0x724>
 800b9d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b9d2:	2f02      	cmp	r7, #2
 800b9d4:	f000 80ad 	beq.w	800bb32 <_DrawBitmap+0x422>
 800b9d8:	2f04      	cmp	r7, #4
 800b9da:	f000 814f 	beq.w	800bc7c <_DrawBitmap+0x56c>
 800b9de:	2f01      	cmp	r7, #1
 800b9e0:	f040 821e 	bne.w	800be20 <_DrawBitmap+0x710>
 800b9e4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 800bc78 <_DrawBitmap+0x568>
 800b9e8:	f8d9 3000 	ldr.w	r3, [r9]
 800b9ec:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800b9ee:	f004 fc07 	bl	8010200 <GUI_ALLOC_LockH>
 800b9f2:	f89b 3000 	ldrb.w	r3, [fp]
 800b9f6:	4a9f      	ldr	r2, [pc, #636]	; (800bc74 <_DrawBitmap+0x564>)
 800b9f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b9fa:	5cd6      	ldrb	r6, [r2, r3]
 800b9fc:	f8d9 3000 	ldr.w	r3, [r9]
 800ba00:	900e      	str	r0, [sp, #56]	; 0x38
 800ba02:	7c1b      	ldrb	r3, [r3, #16]
 800ba04:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800ba08:	f003 0303 	and.w	r3, r3, #3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	4657      	mov	r7, sl
 800ba10:	f1c1 0808 	rsb	r8, r1, #8
 800ba14:	fa46 f601 	asr.w	r6, r6, r1
 800ba18:	d020      	beq.n	800ba5c <_DrawBitmap+0x34c>
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d061      	beq.n	800bae2 <_DrawBitmap+0x3d2>
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d05f      	beq.n	800bae2 <_DrawBitmap+0x3d2>
 800ba22:	465a      	mov	r2, fp
 800ba24:	4547      	cmp	r7, r8
 800ba26:	bf38      	it	cc
 800ba28:	46b8      	movcc	r8, r7
 800ba2a:	ebc8 0707 	rsb	r7, r8, r7
 800ba2e:	4643      	mov	r3, r8
 800ba30:	4621      	mov	r1, r4
 800ba32:	f006 0001 	and.w	r0, r6, #1
 800ba36:	3b01      	subs	r3, #1
 800ba38:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800ba3c:	f841 0b04 	str.w	r0, [r1], #4
 800ba40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba44:	d1f5      	bne.n	800ba32 <_DrawBitmap+0x322>
 800ba46:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ba4a:	2f00      	cmp	r7, #0
 800ba4c:	d06d      	beq.n	800bb2a <_DrawBitmap+0x41a>
 800ba4e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ba52:	4988      	ldr	r1, [pc, #544]	; (800bc74 <_DrawBitmap+0x564>)
 800ba54:	f04f 0808 	mov.w	r8, #8
 800ba58:	5cce      	ldrb	r6, [r1, r3]
 800ba5a:	e7e3      	b.n	800ba24 <_DrawBitmap+0x314>
 800ba5c:	686b      	ldr	r3, [r5, #4]
 800ba5e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800ba62:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba64:	f8cd b020 	str.w	fp, [sp, #32]
 800ba68:	4547      	cmp	r7, r8
 800ba6a:	bf38      	it	cc
 800ba6c:	46b8      	movcc	r8, r7
 800ba6e:	ebc8 0707 	rsb	r7, r8, r7
 800ba72:	f1bc 0f00 	cmp.w	ip, #0
 800ba76:	d026      	beq.n	800bac6 <_DrawBitmap+0x3b6>
 800ba78:	b91e      	cbnz	r6, 800ba82 <_DrawBitmap+0x372>
 800ba7a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800ba7e:	44c1      	add	r9, r8
 800ba80:	e025      	b.n	800bace <_DrawBitmap+0x3be>
 800ba82:	07f0      	lsls	r0, r6, #31
 800ba84:	d50c      	bpl.n	800baa0 <_DrawBitmap+0x390>
 800ba86:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800ba8a:	9a05      	ldr	r2, [sp, #20]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8cd c008 	str.w	ip, [sp, #8]
 800ba92:	4660      	mov	r0, ip
 800ba94:	4649      	mov	r1, r9
 800ba96:	4798      	blx	r3
 800ba98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	f1b8 0801 	subs.w	r8, r8, #1
 800baa4:	f109 0901 	add.w	r9, r9, #1
 800baa8:	f104 0404 	add.w	r4, r4, #4
 800baac:	d00f      	beq.n	800bace <_DrawBitmap+0x3be>
 800baae:	0876      	lsrs	r6, r6, #1
 800bab0:	e7e2      	b.n	800ba78 <_DrawBitmap+0x368>
 800bab2:	07f1      	lsls	r1, r6, #31
 800bab4:	bf44      	itt	mi
 800bab6:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 800bab8:	6023      	strmi	r3, [r4, #0]
 800baba:	f1b8 0801 	subs.w	r8, r8, #1
 800babe:	f104 0404 	add.w	r4, r4, #4
 800bac2:	d004      	beq.n	800bace <_DrawBitmap+0x3be>
 800bac4:	0876      	lsrs	r6, r6, #1
 800bac6:	2e00      	cmp	r6, #0
 800bac8:	d1f3      	bne.n	800bab2 <_DrawBitmap+0x3a2>
 800baca:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800bace:	b367      	cbz	r7, 800bb2a <_DrawBitmap+0x41a>
 800bad0:	9808      	ldr	r0, [sp, #32]
 800bad2:	4a68      	ldr	r2, [pc, #416]	; (800bc74 <_DrawBitmap+0x564>)
 800bad4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800bad8:	9008      	str	r0, [sp, #32]
 800bada:	5cd6      	ldrb	r6, [r2, r3]
 800badc:	f04f 0808 	mov.w	r8, #8
 800bae0:	e7c2      	b.n	800ba68 <_DrawBitmap+0x358>
 800bae2:	6803      	ldr	r3, [r0, #0]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	4798      	blx	r3
 800baea:	4659      	mov	r1, fp
 800baec:	4547      	cmp	r7, r8
 800baee:	bf38      	it	cc
 800baf0:	46b8      	movcc	r8, r7
 800baf2:	ebc8 0707 	rsb	r7, r8, r7
 800baf6:	1d23      	adds	r3, r4, #4
 800baf8:	46c6      	mov	lr, r8
 800bafa:	07f2      	lsls	r2, r6, #31
 800bafc:	d504      	bpl.n	800bb08 <_DrawBitmap+0x3f8>
 800bafe:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800bb02:	4042      	eors	r2, r0
 800bb04:	f843 2c04 	str.w	r2, [r3, #-4]
 800bb08:	f1be 0e01 	subs.w	lr, lr, #1
 800bb0c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bb10:	f103 0304 	add.w	r3, r3, #4
 800bb14:	d1f1      	bne.n	800bafa <_DrawBitmap+0x3ea>
 800bb16:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800bb1a:	b137      	cbz	r7, 800bb2a <_DrawBitmap+0x41a>
 800bb1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bb20:	4a54      	ldr	r2, [pc, #336]	; (800bc74 <_DrawBitmap+0x564>)
 800bb22:	f04f 0808 	mov.w	r8, #8
 800bb26:	5cd6      	ldrb	r6, [r2, r3]
 800bb28:	e7e0      	b.n	800baec <_DrawBitmap+0x3dc>
 800bb2a:	a80e      	add	r0, sp, #56	; 0x38
 800bb2c:	f004 fb76 	bl	801021c <GUI_ALLOC_UnlockH>
 800bb30:	e176      	b.n	800be20 <_DrawBitmap+0x710>
 800bb32:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bb34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb36:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800bb3a:	f1c7 0604 	rsb	r6, r7, #4
 800bb3e:	f89b 7000 	ldrb.w	r7, [fp]
 800bb42:	409f      	lsls	r7, r3
 800bb44:	4b4c      	ldr	r3, [pc, #304]	; (800bc78 <_DrawBitmap+0x568>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	7c1b      	ldrb	r3, [r3, #16]
 800bb4a:	f003 0303 	and.w	r3, r3, #3
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	b2f6      	uxtb	r6, r6
 800bb52:	b2ff      	uxtb	r7, r7
 800bb54:	d066      	beq.n	800bc24 <_DrawBitmap+0x514>
 800bb56:	d308      	bcc.n	800bb6a <_DrawBitmap+0x45a>
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	f040 8161 	bne.w	800be20 <_DrawBitmap+0x710>
 800bb5e:	9804      	ldr	r0, [sp, #16]
 800bb60:	f8cd b020 	str.w	fp, [sp, #32]
 800bb64:	46d0      	mov	r8, sl
 800bb66:	9006      	str	r0, [sp, #24]
 800bb68:	e03e      	b.n	800bbe8 <_DrawBitmap+0x4d8>
 800bb6a:	465a      	mov	r2, fp
 800bb6c:	4653      	mov	r3, sl
 800bb6e:	429e      	cmp	r6, r3
 800bb70:	bfc8      	it	gt
 800bb72:	b2de      	uxtbgt	r6, r3
 800bb74:	1b9b      	subs	r3, r3, r6
 800bb76:	4631      	mov	r1, r6
 800bb78:	4620      	mov	r0, r4
 800bb7a:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 800bb7e:	3901      	subs	r1, #1
 800bb80:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 800bb84:	f840 cb04 	str.w	ip, [r0], #4
 800bb88:	00bf      	lsls	r7, r7, #2
 800bb8a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800bb8e:	b2ff      	uxtb	r7, r7
 800bb90:	d1f3      	bne.n	800bb7a <_DrawBitmap+0x46a>
 800bb92:	3e01      	subs	r6, #1
 800bb94:	b2f6      	uxtb	r6, r6
 800bb96:	3601      	adds	r6, #1
 800bb98:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 813f 	beq.w	800be20 <_DrawBitmap+0x710>
 800bba2:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800bba6:	2604      	movs	r6, #4
 800bba8:	e7e1      	b.n	800bb6e <_DrawBitmap+0x45e>
 800bbaa:	9906      	ldr	r1, [sp, #24]
 800bbac:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800bbb0:	4449      	add	r1, r9
 800bbb2:	d122      	bne.n	800bbfa <_DrawBitmap+0x4ea>
 800bbb4:	f109 0901 	add.w	r9, r9, #1
 800bbb8:	fa5f f289 	uxtb.w	r2, r9
 800bbbc:	00bf      	lsls	r7, r7, #2
 800bbbe:	4296      	cmp	r6, r2
 800bbc0:	b2ff      	uxtb	r7, r7
 800bbc2:	d1f2      	bne.n	800bbaa <_DrawBitmap+0x49a>
 800bbc4:	9f06      	ldr	r7, [sp, #24]
 800bbc6:	3e01      	subs	r6, #1
 800bbc8:	b2f6      	uxtb	r6, r6
 800bbca:	1c7b      	adds	r3, r7, #1
 800bbcc:	1c72      	adds	r2, r6, #1
 800bbce:	199e      	adds	r6, r3, r6
 800bbd0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800bbd4:	9606      	str	r6, [sp, #24]
 800bbd6:	f1b8 0f00 	cmp.w	r8, #0
 800bbda:	f000 8121 	beq.w	800be20 <_DrawBitmap+0x710>
 800bbde:	9b08      	ldr	r3, [sp, #32]
 800bbe0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bbe4:	9308      	str	r3, [sp, #32]
 800bbe6:	2604      	movs	r6, #4
 800bbe8:	4546      	cmp	r6, r8
 800bbea:	bfc8      	it	gt
 800bbec:	fa5f f688 	uxtbgt.w	r6, r8
 800bbf0:	ebc6 0808 	rsb	r8, r6, r8
 800bbf4:	f04f 0900 	mov.w	r9, #0
 800bbf8:	e7d7      	b.n	800bbaa <_DrawBitmap+0x49a>
 800bbfa:	09ba      	lsrs	r2, r7, #6
 800bbfc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800bc00:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 800bc04:	f1bc 0f00 	cmp.w	ip, #0
 800bc08:	d0d4      	beq.n	800bbb4 <_DrawBitmap+0x4a4>
 800bc0a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800bc0e:	6812      	ldr	r2, [r2, #0]
 800bc10:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc12:	4660      	mov	r0, ip
 800bc14:	f8cd c008 	str.w	ip, [sp, #8]
 800bc18:	9a05      	ldr	r2, [sp, #20]
 800bc1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc1c:	4798      	blx	r3
 800bc1e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bc22:	e7c7      	b.n	800bbb4 <_DrawBitmap+0x4a4>
 800bc24:	4658      	mov	r0, fp
 800bc26:	4653      	mov	r3, sl
 800bc28:	429e      	cmp	r6, r3
 800bc2a:	bfc8      	it	gt
 800bc2c:	b2de      	uxtbgt	r6, r3
 800bc2e:	1b9b      	subs	r3, r3, r6
 800bc30:	1d22      	adds	r2, r4, #4
 800bc32:	46b4      	mov	ip, r6
 800bc34:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800bc38:	d005      	beq.n	800bc46 <_DrawBitmap+0x536>
 800bc3a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800bc3e:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800bc42:	f842 1c04 	str.w	r1, [r2, #-4]
 800bc46:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bc4a:	00bf      	lsls	r7, r7, #2
 800bc4c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800bc50:	b2ff      	uxtb	r7, r7
 800bc52:	f102 0204 	add.w	r2, r2, #4
 800bc56:	d1ed      	bne.n	800bc34 <_DrawBitmap+0x524>
 800bc58:	3e01      	subs	r6, #1
 800bc5a:	b2f6      	uxtb	r6, r6
 800bc5c:	3601      	adds	r6, #1
 800bc5e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80dc 	beq.w	800be20 <_DrawBitmap+0x710>
 800bc68:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800bc6c:	2604      	movs	r6, #4
 800bc6e:	e7db      	b.n	800bc28 <_DrawBitmap+0x518>
 800bc70:	08012d78 	.word	0x08012d78
 800bc74:	08014168 	.word	0x08014168
 800bc78:	20000034 	.word	0x20000034
 800bc7c:	4a71      	ldr	r2, [pc, #452]	; (800be44 <_DrawBitmap+0x734>)
 800bc7e:	f89b 3000 	ldrb.w	r3, [fp]
 800bc82:	6812      	ldr	r2, [r2, #0]
 800bc84:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bc86:	7c12      	ldrb	r2, [r2, #16]
 800bc88:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bc8a:	f002 0203 	and.w	r2, r2, #3
 800bc8e:	4083      	lsls	r3, r0
 800bc90:	2a01      	cmp	r2, #1
 800bc92:	b2de      	uxtb	r6, r3
 800bc94:	f000 809c 	beq.w	800bdd0 <_DrawBitmap+0x6c0>
 800bc98:	d302      	bcc.n	800bca0 <_DrawBitmap+0x590>
 800bc9a:	2a02      	cmp	r2, #2
 800bc9c:	d035      	beq.n	800bd0a <_DrawBitmap+0x5fa>
 800bc9e:	e0bf      	b.n	800be20 <_DrawBitmap+0x710>
 800bca0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bca2:	b15f      	cbz	r7, 800bcbc <_DrawBitmap+0x5ac>
 800bca4:	0936      	lsrs	r6, r6, #4
 800bca6:	f10b 0201 	add.w	r2, fp, #1
 800bcaa:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bcae:	6023      	str	r3, [r4, #0]
 800bcb0:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800bcb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bcb6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bcba:	e001      	b.n	800bcc0 <_DrawBitmap+0x5b0>
 800bcbc:	4653      	mov	r3, sl
 800bcbe:	465a      	mov	r2, fp
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	dd1a      	ble.n	800bcfa <_DrawBitmap+0x5ea>
 800bcc4:	1058      	asrs	r0, r3, #1
 800bcc6:	f104 0108 	add.w	r1, r4, #8
 800bcca:	f003 0301 	and.w	r3, r3, #1
 800bcce:	eb02 0800 	add.w	r8, r2, r0
 800bcd2:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 800bcd6:	f006 060f 	and.w	r6, r6, #15
 800bcda:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 800bcde:	f841 7c08 	str.w	r7, [r1, #-8]
 800bce2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800bce6:	f841 6c04 	str.w	r6, [r1, #-4]
 800bcea:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800bcee:	4542      	cmp	r2, r8
 800bcf0:	f101 0108 	add.w	r1, r1, #8
 800bcf4:	d1ed      	bne.n	800bcd2 <_DrawBitmap+0x5c2>
 800bcf6:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8090 	beq.w	800be20 <_DrawBitmap+0x710>
 800bd00:	0936      	lsrs	r6, r6, #4
 800bd02:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	e08a      	b.n	800be20 <_DrawBitmap+0x710>
 800bd0a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800bd0c:	b1c0      	cbz	r0, 800bd40 <_DrawBitmap+0x630>
 800bd0e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800bd12:	d00a      	beq.n	800bd2a <_DrawBitmap+0x61a>
 800bd14:	0936      	lsrs	r6, r6, #4
 800bd16:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bd1a:	6023      	str	r3, [r4, #0]
 800bd1c:	b12f      	cbz	r7, 800bd2a <_DrawBitmap+0x61a>
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	9904      	ldr	r1, [sp, #16]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	9a05      	ldr	r2, [sp, #20]
 800bd26:	4638      	mov	r0, r7
 800bd28:	4798      	blx	r3
 800bd2a:	9904      	ldr	r1, [sp, #16]
 800bd2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bd2e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 800bd32:	f101 0801 	add.w	r8, r1, #1
 800bd36:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800bd3a:	f10b 0901 	add.w	r9, fp, #1
 800bd3e:	e011      	b.n	800bd64 <_DrawBitmap+0x654>
 800bd40:	46d4      	mov	ip, sl
 800bd42:	46d9      	mov	r9, fp
 800bd44:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bd48:	e00c      	b.n	800bd64 <_DrawBitmap+0x654>
 800bd4a:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 800bd4e:	d10d      	bne.n	800bd6c <_DrawBitmap+0x65c>
 800bd50:	f016 060f 	ands.w	r6, r6, #15
 800bd54:	d11b      	bne.n	800bd8e <_DrawBitmap+0x67e>
 800bd56:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800bd5a:	3408      	adds	r4, #8
 800bd5c:	f108 0802 	add.w	r8, r8, #2
 800bd60:	f1ac 0c02 	sub.w	ip, ip, #2
 800bd64:	f1bc 0f01 	cmp.w	ip, #1
 800bd68:	dcef      	bgt.n	800bd4a <_DrawBitmap+0x63a>
 800bd6a:	e021      	b.n	800bdb0 <_DrawBitmap+0x6a0>
 800bd6c:	0933      	lsrs	r3, r6, #4
 800bd6e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	2f00      	cmp	r7, #0
 800bd76:	d0eb      	beq.n	800bd50 <_DrawBitmap+0x640>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	9a05      	ldr	r2, [sp, #20]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f8cd c008 	str.w	ip, [sp, #8]
 800bd82:	4638      	mov	r0, r7
 800bd84:	4641      	mov	r1, r8
 800bd86:	4798      	blx	r3
 800bd88:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bd8c:	e7e0      	b.n	800bd50 <_DrawBitmap+0x640>
 800bd8e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bd92:	6063      	str	r3, [r4, #4]
 800bd94:	2f00      	cmp	r7, #0
 800bd96:	d0de      	beq.n	800bd56 <_DrawBitmap+0x646>
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	9a05      	ldr	r2, [sp, #20]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f8cd c008 	str.w	ip, [sp, #8]
 800bda2:	4638      	mov	r0, r7
 800bda4:	f108 0101 	add.w	r1, r8, #1
 800bda8:	4798      	blx	r3
 800bdaa:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bdae:	e7d2      	b.n	800bd56 <_DrawBitmap+0x646>
 800bdb0:	f1bc 0f00 	cmp.w	ip, #0
 800bdb4:	d034      	beq.n	800be20 <_DrawBitmap+0x710>
 800bdb6:	0936      	lsrs	r6, r6, #4
 800bdb8:	d032      	beq.n	800be20 <_DrawBitmap+0x710>
 800bdba:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	b377      	cbz	r7, 800be20 <_DrawBitmap+0x710>
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	9a05      	ldr	r2, [sp, #20]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4638      	mov	r0, r7
 800bdca:	4641      	mov	r1, r8
 800bdcc:	4798      	blx	r3
 800bdce:	e027      	b.n	800be20 <_DrawBitmap+0x710>
 800bdd0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800bdd2:	f1c7 0302 	rsb	r3, r7, #2
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	465f      	mov	r7, fp
 800bdda:	4652      	mov	r2, sl
 800bddc:	4293      	cmp	r3, r2
 800bdde:	bfc8      	it	gt
 800bde0:	b2d3      	uxtbgt	r3, r2
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	1d20      	adds	r0, r4, #4
 800bde6:	469c      	mov	ip, r3
 800bde8:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800bdec:	d005      	beq.n	800bdfa <_DrawBitmap+0x6ea>
 800bdee:	f850 1c04 	ldr.w	r1, [r0, #-4]
 800bdf2:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800bdf6:	f840 1c04 	str.w	r1, [r0, #-4]
 800bdfa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800bdfe:	0136      	lsls	r6, r6, #4
 800be00:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 800be04:	b2f6      	uxtb	r6, r6
 800be06:	f100 0004 	add.w	r0, r0, #4
 800be0a:	d1ed      	bne.n	800bde8 <_DrawBitmap+0x6d8>
 800be0c:	3b01      	subs	r3, #1
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	3301      	adds	r3, #1
 800be12:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800be16:	b11a      	cbz	r2, 800be20 <_DrawBitmap+0x710>
 800be18:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 800be1c:	2302      	movs	r3, #2
 800be1e:	e7dd      	b.n	800bddc <_DrawBitmap+0x6cc>
 800be20:	9b05      	ldr	r3, [sp, #20]
 800be22:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800be24:	3301      	adds	r3, #1
 800be26:	44bb      	add	fp, r7
 800be28:	9305      	str	r3, [sp, #20]
 800be2a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800be2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2e:	443b      	add	r3, r7
 800be30:	9309      	str	r3, [sp, #36]	; 0x24
 800be32:	e5c4      	b.n	800b9be <_DrawBitmap+0x2ae>
 800be34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be36:	b113      	cbz	r3, 800be3e <_DrawBitmap+0x72e>
 800be38:	a80f      	add	r0, sp, #60	; 0x3c
 800be3a:	f004 f9ef 	bl	801021c <GUI_ALLOC_UnlockH>
 800be3e:	b011      	add	sp, #68	; 0x44
 800be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be44:	20000034 	.word	0x20000034

0800be48 <GUI_MEMDEV_GetBitsPerPixel>:
 800be48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be4a:	4605      	mov	r5, r0
 800be4c:	b170      	cbz	r0, 800be6c <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800be4e:	f004 f9d7 	bl	8010200 <GUI_ALLOC_LockH>
 800be52:	6803      	ldr	r3, [r0, #0]
 800be54:	ac02      	add	r4, sp, #8
 800be56:	691b      	ldr	r3, [r3, #16]
 800be58:	f844 0d04 	str.w	r0, [r4, #-4]!
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	4798      	blx	r3
 800be60:	f000 ffb1 	bl	800cdc6 <LCD__GetBPPDevice>
 800be64:	4605      	mov	r5, r0
 800be66:	4620      	mov	r0, r4
 800be68:	f004 f9d8 	bl	801021c <GUI_ALLOC_UnlockH>
 800be6c:	4628      	mov	r0, r5
 800be6e:	b003      	add	sp, #12
 800be70:	bd30      	pop	{r4, r5, pc}
	...

0800be74 <GUI_MEMDEV_Delete>:
 800be74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be76:	4604      	mov	r4, r0
 800be78:	b1d0      	cbz	r0, 800beb0 <GUI_MEMDEV_Delete+0x3c>
 800be7a:	4b0e      	ldr	r3, [pc, #56]	; (800beb4 <GUI_MEMDEV_Delete+0x40>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be80:	4283      	cmp	r3, r0
 800be82:	d101      	bne.n	800be88 <GUI_MEMDEV_Delete+0x14>
 800be84:	f002 fd08 	bl	800e898 <GUI_SelectLCD>
 800be88:	4620      	mov	r0, r4
 800be8a:	f004 f9b9 	bl	8010200 <GUI_ALLOC_LockH>
 800be8e:	9001      	str	r0, [sp, #4]
 800be90:	6940      	ldr	r0, [r0, #20]
 800be92:	b108      	cbz	r0, 800be98 <GUI_MEMDEV_Delete+0x24>
 800be94:	f005 fc62 	bl	801175c <GUI_USAGE_DecUseCnt>
 800be98:	ad02      	add	r5, sp, #8
 800be9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	f003 fc64 	bl	800f76c <GUI_DEVICE_Delete>
 800bea4:	4628      	mov	r0, r5
 800bea6:	f004 f9b9 	bl	801021c <GUI_ALLOC_UnlockH>
 800beaa:	4620      	mov	r0, r4
 800beac:	f004 f9d6 	bl	801025c <GUI_ALLOC_Free>
 800beb0:	b003      	add	sp, #12
 800beb2:	bd30      	pop	{r4, r5, pc}
 800beb4:	20000034 	.word	0x20000034

0800beb8 <GUI_MEMDEV_Select>:
 800beb8:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <GUI_MEMDEV_Select+0x48>)
 800beba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	4604      	mov	r4, r0
 800bec0:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800bec2:	461f      	mov	r7, r3
 800bec4:	b910      	cbnz	r0, 800becc <GUI_MEMDEV_Select+0x14>
 800bec6:	f002 fce7 	bl	800e898 <GUI_SelectLCD>
 800beca:	e016      	b.n	800befa <GUI_MEMDEV_Select+0x42>
 800becc:	b10e      	cbz	r6, 800bed2 <GUI_MEMDEV_Select+0x1a>
 800bece:	f002 fce3 	bl	800e898 <GUI_SelectLCD>
 800bed2:	f7ff f977 	bl	800b1c4 <WM_Deactivate>
 800bed6:	4620      	mov	r0, r4
 800bed8:	f004 f992 	bl	8010200 <GUI_ALLOC_LockH>
 800bedc:	ad02      	add	r5, sp, #8
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800bee4:	661c      	str	r4, [r3, #96]	; 0x60
 800bee6:	6800      	ldr	r0, [r0, #0]
 800bee8:	f003 fc7e 	bl	800f7e8 <GUI_DEVICE_Link>
 800beec:	4628      	mov	r0, r5
 800beee:	f004 f995 	bl	801021c <GUI_ALLOC_UnlockH>
 800bef2:	f000 fdc9 	bl	800ca88 <LCD_UpdateColorIndices>
 800bef6:	f001 f9e1 	bl	800d2bc <LCD_SetClipRectMax>
 800befa:	4630      	mov	r0, r6
 800befc:	b003      	add	sp, #12
 800befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf00:	20000034 	.word	0x20000034

0800bf04 <_GetRect>:
 800bf04:	6883      	ldr	r3, [r0, #8]
 800bf06:	2200      	movs	r2, #0
 800bf08:	800a      	strh	r2, [r1, #0]
 800bf0a:	804a      	strh	r2, [r1, #2]
 800bf0c:	695a      	ldr	r2, [r3, #20]
 800bf0e:	699b      	ldr	r3, [r3, #24]
 800bf10:	3a01      	subs	r2, #1
 800bf12:	3b01      	subs	r3, #1
 800bf14:	808a      	strh	r2, [r1, #4]
 800bf16:	80cb      	strh	r3, [r1, #6]
 800bf18:	4770      	bx	lr

0800bf1a <_SetPixelIndex>:
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	6880      	ldr	r0, [r0, #8]
 800bf1e:	69c4      	ldr	r4, [r0, #28]
 800bf20:	6800      	ldr	r0, [r0, #0]
 800bf22:	fb04 1202 	mla	r2, r4, r2, r1
 800bf26:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bf2a:	bd10      	pop	{r4, pc}

0800bf2c <_GetPixelIndex>:
 800bf2c:	6883      	ldr	r3, [r0, #8]
 800bf2e:	69d8      	ldr	r0, [r3, #28]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	fb00 1202 	mla	r2, r0, r2, r1
 800bf36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bf3a:	4770      	bx	lr

0800bf3c <_XorPixel>:
 800bf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf40:	4604      	mov	r4, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	4616      	mov	r6, r2
 800bf46:	f7ff fff1 	bl	800bf2c <_GetPixelIndex>
 800bf4a:	6925      	ldr	r5, [r4, #16]
 800bf4c:	68ab      	ldr	r3, [r5, #8]
 800bf4e:	4680      	mov	r8, r0
 800bf50:	4798      	blx	r3
 800bf52:	4639      	mov	r1, r7
 800bf54:	ea80 0308 	eor.w	r3, r0, r8
 800bf58:	4632      	mov	r2, r6
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf60:	f7ff bfdb 	b.w	800bf1a <_SetPixelIndex>

0800bf64 <_FillRect>:
 800bf64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf68:	6886      	ldr	r6, [r0, #8]
 800bf6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bf6c:	6b34      	ldr	r4, [r6, #48]	; 0x30
 800bf6e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800c084 <_FillRect+0x120>
 800bf72:	4689      	mov	r9, r1
 800bf74:	4692      	mov	sl, r2
 800bf76:	b144      	cbz	r4, 800bf8a <_FillRect+0x26>
 800bf78:	9700      	str	r7, [sp, #0]
 800bf7a:	f8dc 5000 	ldr.w	r5, [ip]
 800bf7e:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 800bf80:	682d      	ldr	r5, [r5, #0]
 800bf82:	9501      	str	r5, [sp, #4]
 800bf84:	6980      	ldr	r0, [r0, #24]
 800bf86:	47a0      	blx	r4
 800bf88:	e079      	b.n	800c07e <_FillRect+0x11a>
 800bf8a:	1a5b      	subs	r3, r3, r1
 800bf8c:	f8dc 1000 	ldr.w	r1, [ip]
 800bf90:	f891 c010 	ldrb.w	ip, [r1, #16]
 800bf94:	ebc2 0807 	rsb	r8, r2, r7
 800bf98:	f01c 0c01 	ands.w	ip, ip, #1
 800bf9c:	f103 0401 	add.w	r4, r3, #1
 800bfa0:	f108 0501 	add.w	r5, r8, #1
 800bfa4:	69f7      	ldr	r7, [r6, #28]
 800bfa6:	d021      	beq.n	800bfec <_FillRect+0x88>
 800bfa8:	6903      	ldr	r3, [r0, #16]
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	4798      	blx	r3
 800bfae:	69f2      	ldr	r2, [r6, #28]
 800bfb0:	2c00      	cmp	r4, #0
 800bfb2:	d064      	beq.n	800c07e <_FillRect+0x11a>
 800bfb4:	f06f 0c03 	mvn.w	ip, #3
 800bfb8:	fb02 990a 	mla	r9, r2, sl, r9
 800bfbc:	fb0c fc07 	mul.w	ip, ip, r7
 800bfc0:	fb07 9708 	mla	r7, r7, r8, r9
 800bfc4:	00bf      	lsls	r7, r7, #2
 800bfc6:	2d00      	cmp	r5, #0
 800bfc8:	d059      	beq.n	800c07e <_FillRect+0x11a>
 800bfca:	3d01      	subs	r5, #1
 800bfcc:	463b      	mov	r3, r7
 800bfce:	4622      	mov	r2, r4
 800bfd0:	f8d6 8000 	ldr.w	r8, [r6]
 800bfd4:	f853 1008 	ldr.w	r1, [r3, r8]
 800bfd8:	3a01      	subs	r2, #1
 800bfda:	ea81 0100 	eor.w	r1, r1, r0
 800bfde:	f843 1008 	str.w	r1, [r3, r8]
 800bfe2:	f103 0304 	add.w	r3, r3, #4
 800bfe6:	d1f3      	bne.n	800bfd0 <_FillRect+0x6c>
 800bfe8:	4467      	add	r7, ip
 800bfea:	e7ec      	b.n	800bfc6 <_FillRect+0x62>
 800bfec:	6830      	ldr	r0, [r6, #0]
 800bfee:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800bff0:	fb07 9202 	mla	r2, r7, r2, r9
 800bff4:	2c0f      	cmp	r4, #15
 800bff6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bffa:	6808      	ldr	r0, [r1, #0]
 800bffc:	d92f      	bls.n	800c05e <_FillRect+0xfa>
 800bffe:	f1a3 0a0f 	sub.w	sl, r3, #15
 800c002:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 800c006:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800c00a:	f108 4180 	add.w	r1, r8, #1073741824	; 0x40000000
 800c00e:	f10a 0a01 	add.w	sl, sl, #1
 800c012:	fb09 2101 	mla	r1, r9, r1, r2
 800c016:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
 800c01a:	462e      	mov	r6, r5
 800c01c:	4662      	mov	r2, ip
 800c01e:	b1e6      	cbz	r6, 800c05a <_FillRect+0xf6>
 800c020:	4622      	mov	r2, r4
 800c022:	460b      	mov	r3, r1
 800c024:	3a10      	subs	r2, #16
 800c026:	2a0f      	cmp	r2, #15
 800c028:	6018      	str	r0, [r3, #0]
 800c02a:	6058      	str	r0, [r3, #4]
 800c02c:	6098      	str	r0, [r3, #8]
 800c02e:	60d8      	str	r0, [r3, #12]
 800c030:	6118      	str	r0, [r3, #16]
 800c032:	6158      	str	r0, [r3, #20]
 800c034:	6198      	str	r0, [r3, #24]
 800c036:	61d8      	str	r0, [r3, #28]
 800c038:	6218      	str	r0, [r3, #32]
 800c03a:	6258      	str	r0, [r3, #36]	; 0x24
 800c03c:	6298      	str	r0, [r3, #40]	; 0x28
 800c03e:	62d8      	str	r0, [r3, #44]	; 0x2c
 800c040:	6318      	str	r0, [r3, #48]	; 0x30
 800c042:	6358      	str	r0, [r3, #52]	; 0x34
 800c044:	6398      	str	r0, [r3, #56]	; 0x38
 800c046:	63d8      	str	r0, [r3, #60]	; 0x3c
 800c048:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c04c:	d8ea      	bhi.n	800c024 <_FillRect+0xc0>
 800c04e:	eb01 020a 	add.w	r2, r1, sl
 800c052:	3e01      	subs	r6, #1
 800c054:	ebc9 0101 	rsb	r1, r9, r1
 800c058:	e7e1      	b.n	800c01e <_FillRect+0xba>
 800c05a:	f004 040f 	and.w	r4, r4, #15
 800c05e:	b174      	cbz	r4, 800c07e <_FillRect+0x11a>
 800c060:	00bf      	lsls	r7, r7, #2
 800c062:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800c066:	fb07 2208 	mla	r2, r7, r8, r2
 800c06a:	b145      	cbz	r5, 800c07e <_FillRect+0x11a>
 800c06c:	4611      	mov	r1, r2
 800c06e:	4623      	mov	r3, r4
 800c070:	3b01      	subs	r3, #1
 800c072:	f841 0b04 	str.w	r0, [r1], #4
 800c076:	d1fb      	bne.n	800c070 <_FillRect+0x10c>
 800c078:	3d01      	subs	r5, #1
 800c07a:	1bd2      	subs	r2, r2, r7
 800c07c:	e7f5      	b.n	800c06a <_FillRect+0x106>
 800c07e:	b002      	add	sp, #8
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	20000034 	.word	0x20000034

0800c088 <_DrawHLine>:
 800c088:	b507      	push	{r0, r1, r2, lr}
 800c08a:	9200      	str	r2, [sp, #0]
 800c08c:	f7ff ff6a 	bl	800bf64 <_FillRect>
 800c090:	b003      	add	sp, #12
 800c092:	f85d fb04 	ldr.w	pc, [sp], #4

0800c096 <_DrawVLine>:
 800c096:	b507      	push	{r0, r1, r2, lr}
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	460b      	mov	r3, r1
 800c09c:	f7ff ff62 	bl	800bf64 <_FillRect>
 800c0a0:	b003      	add	sp, #12
 800c0a2:	f85d fb04 	ldr.w	pc, [sp], #4

0800c0a6 <_GetDevProp>:
 800c0a6:	3901      	subs	r1, #1
 800c0a8:	6883      	ldr	r3, [r0, #8]
 800c0aa:	290d      	cmp	r1, #13
 800c0ac:	d814      	bhi.n	800c0d8 <_GetDevProp+0x32>
 800c0ae:	e8df f001 	tbb	[pc, r1]
 800c0b2:	0b09      	.short	0x0b09
 800c0b4:	13130f0d 	.word	0x13130f0d
 800c0b8:	11160713 	.word	0x11160713
 800c0bc:	16161611 	.word	0x16161611
 800c0c0:	2020      	movs	r0, #32
 800c0c2:	4770      	bx	lr
 800c0c4:	68d8      	ldr	r0, [r3, #12]
 800c0c6:	4770      	bx	lr
 800c0c8:	6918      	ldr	r0, [r3, #16]
 800c0ca:	4770      	bx	lr
 800c0cc:	6958      	ldr	r0, [r3, #20]
 800c0ce:	4770      	bx	lr
 800c0d0:	6998      	ldr	r0, [r3, #24]
 800c0d2:	4770      	bx	lr
 800c0d4:	2001      	movs	r0, #1
 800c0d6:	4770      	bx	lr
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0dc:	4770      	bx	lr
 800c0de:	2000      	movs	r0, #0
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <_GetDevData>:
 800c0e4:	4802      	ldr	r0, [pc, #8]	; (800c0f0 <_GetDevData+0xc>)
 800c0e6:	2901      	cmp	r1, #1
 800c0e8:	bf18      	it	ne
 800c0ea:	2000      	movne	r0, #0
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	08012db8 	.word	0x08012db8

0800c0f4 <_ReadRect>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	6881      	ldr	r1, [r0, #8]
 800c0fc:	69c8      	ldr	r0, [r1, #28]
 800c0fe:	f06f 0903 	mvn.w	r9, #3
 800c102:	fb00 7502 	mla	r5, r0, r2, r7
 800c106:	1bdb      	subs	r3, r3, r7
 800c108:	00ae      	lsls	r6, r5, #2
 800c10a:	fb09 fc00 	mul.w	ip, r9, r0
 800c10e:	fb09 f505 	mul.w	r5, r9, r5
 800c112:	f103 0901 	add.w	r9, r3, #1
 800c116:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800c11a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c11e:	1c5f      	adds	r7, r3, #1
 800c120:	4630      	mov	r0, r6
 800c122:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c126:	680c      	ldr	r4, [r1, #0]
 800c128:	44aa      	add	sl, r5
 800c12a:	f850 b004 	ldr.w	fp, [r0, r4]
 800c12e:	f84a b000 	str.w	fp, [sl, r0]
 800c132:	3f01      	subs	r7, #1
 800c134:	f100 0004 	add.w	r0, r0, #4
 800c138:	d1f3      	bne.n	800c122 <_ReadRect+0x2e>
 800c13a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c13c:	444c      	add	r4, r9
 800c13e:	940a      	str	r4, [sp, #40]	; 0x28
 800c140:	3201      	adds	r2, #1
 800c142:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c144:	1e50      	subs	r0, r2, #1
 800c146:	42a0      	cmp	r0, r4
 800c148:	4446      	add	r6, r8
 800c14a:	4465      	add	r5, ip
 800c14c:	dbe7      	blt.n	800c11e <_ReadRect+0x2a>
 800c14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c154 <_GetDevFunc>:
 800c154:	3901      	subs	r1, #1
 800c156:	2924      	cmp	r1, #36	; 0x24
 800c158:	d844      	bhi.n	800c1e4 <_GetDevFunc+0x90>
 800c15a:	e8df f001 	tbb	[pc, r1]
 800c15e:	1b41      	.short	0x1b41
 800c160:	1d431917 	.word	0x1d431917
 800c164:	45134343 	.word	0x45134343
 800c168:	21431f15 	.word	0x21431f15
 800c16c:	43434323 	.word	0x43434323
 800c170:	2f292725 	.word	0x2f292725
 800c174:	43314343 	.word	0x43314343
 800c178:	43434343 	.word	0x43434343
 800c17c:	2d2b3543 	.word	0x2d2b3543
 800c180:	433d      	.short	0x433d
 800c182:	39          	.byte	0x39
 800c183:	00          	.byte	0x00
 800c184:	4819      	ldr	r0, [pc, #100]	; (800c1ec <_GetDevFunc+0x98>)
 800c186:	4770      	bx	lr
 800c188:	4819      	ldr	r0, [pc, #100]	; (800c1f0 <_GetDevFunc+0x9c>)
 800c18a:	4770      	bx	lr
 800c18c:	4819      	ldr	r0, [pc, #100]	; (800c1f4 <_GetDevFunc+0xa0>)
 800c18e:	4770      	bx	lr
 800c190:	4819      	ldr	r0, [pc, #100]	; (800c1f8 <_GetDevFunc+0xa4>)
 800c192:	4770      	bx	lr
 800c194:	4819      	ldr	r0, [pc, #100]	; (800c1fc <_GetDevFunc+0xa8>)
 800c196:	4770      	bx	lr
 800c198:	4819      	ldr	r0, [pc, #100]	; (800c200 <_GetDevFunc+0xac>)
 800c19a:	4770      	bx	lr
 800c19c:	4819      	ldr	r0, [pc, #100]	; (800c204 <_GetDevFunc+0xb0>)
 800c19e:	4770      	bx	lr
 800c1a0:	4819      	ldr	r0, [pc, #100]	; (800c208 <_GetDevFunc+0xb4>)
 800c1a2:	4770      	bx	lr
 800c1a4:	4819      	ldr	r0, [pc, #100]	; (800c20c <_GetDevFunc+0xb8>)
 800c1a6:	4770      	bx	lr
 800c1a8:	4819      	ldr	r0, [pc, #100]	; (800c210 <_GetDevFunc+0xbc>)
 800c1aa:	4770      	bx	lr
 800c1ac:	4819      	ldr	r0, [pc, #100]	; (800c214 <_GetDevFunc+0xc0>)
 800c1ae:	4770      	bx	lr
 800c1b0:	4819      	ldr	r0, [pc, #100]	; (800c218 <_GetDevFunc+0xc4>)
 800c1b2:	4770      	bx	lr
 800c1b4:	4819      	ldr	r0, [pc, #100]	; (800c21c <_GetDevFunc+0xc8>)
 800c1b6:	4770      	bx	lr
 800c1b8:	4819      	ldr	r0, [pc, #100]	; (800c220 <_GetDevFunc+0xcc>)
 800c1ba:	4770      	bx	lr
 800c1bc:	4819      	ldr	r0, [pc, #100]	; (800c224 <_GetDevFunc+0xd0>)
 800c1be:	4770      	bx	lr
 800c1c0:	6803      	ldr	r3, [r0, #0]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1c6:	4770      	bx	lr
 800c1c8:	6803      	ldr	r3, [r0, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c1ce:	4770      	bx	lr
 800c1d0:	6803      	ldr	r3, [r0, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c1d6:	4770      	bx	lr
 800c1d8:	6803      	ldr	r3, [r0, #0]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c1de:	4770      	bx	lr
 800c1e0:	4811      	ldr	r0, [pc, #68]	; (800c228 <_GetDevFunc+0xd4>)
 800c1e2:	4770      	bx	lr
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	4770      	bx	lr
 800c1e8:	4810      	ldr	r0, [pc, #64]	; (800c22c <_GetDevFunc+0xd8>)
 800c1ea:	4770      	bx	lr
 800c1ec:	0800c8bf 	.word	0x0800c8bf
 800c1f0:	0800ca21 	.word	0x0800ca21
 800c1f4:	0800c93b 	.word	0x0800c93b
 800c1f8:	0800c813 	.word	0x0800c813
 800c1fc:	0800c897 	.word	0x0800c897
 800c200:	0800c86f 	.word	0x0800c86f
 800c204:	0800c855 	.word	0x0800c855
 800c208:	0800c27d 	.word	0x0800c27d
 800c20c:	0800c273 	.word	0x0800c273
 800c210:	0800c25d 	.word	0x0800c25d
 800c214:	0800c247 	.word	0x0800c247
 800c218:	0800c231 	.word	0x0800c231
 800c21c:	0800c8e9 	.word	0x0800c8e9
 800c220:	0800c82f 	.word	0x0800c82f
 800c224:	0800c7cd 	.word	0x0800c7cd
 800c228:	0800c0f5 	.word	0x0800c0f5
 800c22c:	0800ca63 	.word	0x0800ca63

0800c230 <_SetChroma>:
 800c230:	b507      	push	{r0, r1, r2, lr}
 800c232:	6980      	ldr	r0, [r0, #24]
 800c234:	e88d 0006 	stmia.w	sp, {r1, r2}
 800c238:	210d      	movs	r1, #13
 800c23a:	466a      	mov	r2, sp
 800c23c:	f7fa f858 	bl	80062f0 <LCD_X_DisplayDriver>
 800c240:	b003      	add	sp, #12
 800c242:	f85d fb04 	ldr.w	pc, [sp], #4

0800c246 <_SetChromaMode>:
 800c246:	b507      	push	{r0, r1, r2, lr}
 800c248:	aa02      	add	r2, sp, #8
 800c24a:	6980      	ldr	r0, [r0, #24]
 800c24c:	f842 1d04 	str.w	r1, [r2, #-4]!
 800c250:	210c      	movs	r1, #12
 800c252:	f7fa f84d 	bl	80062f0 <LCD_X_DisplayDriver>
 800c256:	b003      	add	sp, #12
 800c258:	f85d fb04 	ldr.w	pc, [sp], #4

0800c25c <_SetAlphaMode>:
 800c25c:	b507      	push	{r0, r1, r2, lr}
 800c25e:	aa02      	add	r2, sp, #8
 800c260:	6980      	ldr	r0, [r0, #24]
 800c262:	f842 1d04 	str.w	r1, [r2, #-4]!
 800c266:	210b      	movs	r1, #11
 800c268:	f7fa f842 	bl	80062f0 <LCD_X_DisplayDriver>
 800c26c:	b003      	add	sp, #12
 800c26e:	f85d fb04 	ldr.w	pc, [sp], #4

0800c272 <_Off>:
 800c272:	6980      	ldr	r0, [r0, #24]
 800c274:	2106      	movs	r1, #6
 800c276:	2200      	movs	r2, #0
 800c278:	f7fa b83a 	b.w	80062f0 <LCD_X_DisplayDriver>

0800c27c <_On>:
 800c27c:	6980      	ldr	r0, [r0, #24]
 800c27e:	2105      	movs	r1, #5
 800c280:	2200      	movs	r2, #0
 800c282:	f7fa b835 	b.w	80062f0 <LCD_X_DisplayDriver>

0800c286 <_SetOrg>:
 800c286:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c28a:	2300      	movs	r3, #0
 800c28c:	4607      	mov	r7, r0
 800c28e:	6884      	ldr	r4, [r0, #8]
 800c290:	6980      	ldr	r0, [r0, #24]
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	460d      	mov	r5, r1
 800c296:	4616      	mov	r6, r2
 800c298:	9301      	str	r3, [sp, #4]
 800c29a:	f000 fcf1 	bl	800cc80 <LCD_GetMirrorXEx>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	69b8      	ldr	r0, [r7, #24]
 800c2a2:	f000 fcf0 	bl	800cc86 <LCD_GetMirrorYEx>
 800c2a6:	4681      	mov	r9, r0
 800c2a8:	69b8      	ldr	r0, [r7, #24]
 800c2aa:	f000 fcef 	bl	800cc8c <LCD_GetSwapXYEx>
 800c2ae:	0080      	lsls	r0, r0, #2
 800c2b0:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 800c2b4:	ea40 0008 	orr.w	r0, r0, r8
 800c2b8:	2807      	cmp	r0, #7
 800c2ba:	d826      	bhi.n	800c30a <_SetOrg+0x84>
 800c2bc:	e8df f000 	tbb	[pc, r0]
 800c2c0:	0b0f0408 	.word	0x0b0f0408
 800c2c4:	1b1f1519 	.word	0x1b1f1519
 800c2c8:	6962      	ldr	r2, [r4, #20]
 800c2ca:	68e3      	ldr	r3, [r4, #12]
 800c2cc:	1ad3      	subs	r3, r2, r3
 800c2ce:	1b5d      	subs	r5, r3, r5
 800c2d0:	9500      	str	r5, [sp, #0]
 800c2d2:	9601      	str	r6, [sp, #4]
 800c2d4:	e019      	b.n	800c30a <_SetOrg+0x84>
 800c2d6:	6962      	ldr	r2, [r4, #20]
 800c2d8:	68e3      	ldr	r3, [r4, #12]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	1b5d      	subs	r5, r3, r5
 800c2de:	69a2      	ldr	r2, [r4, #24]
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	9500      	str	r5, [sp, #0]
 800c2e4:	1ad3      	subs	r3, r2, r3
 800c2e6:	1b9e      	subs	r6, r3, r6
 800c2e8:	e7f3      	b.n	800c2d2 <_SetOrg+0x4c>
 800c2ea:	69a2      	ldr	r2, [r4, #24]
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	1b9e      	subs	r6, r3, r6
 800c2f2:	9600      	str	r6, [sp, #0]
 800c2f4:	e008      	b.n	800c308 <_SetOrg+0x82>
 800c2f6:	69a2      	ldr	r2, [r4, #24]
 800c2f8:	6923      	ldr	r3, [r4, #16]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	1b9e      	subs	r6, r3, r6
 800c2fe:	6962      	ldr	r2, [r4, #20]
 800c300:	68e3      	ldr	r3, [r4, #12]
 800c302:	9600      	str	r6, [sp, #0]
 800c304:	1ad3      	subs	r3, r2, r3
 800c306:	1b5d      	subs	r5, r3, r5
 800c308:	9501      	str	r5, [sp, #4]
 800c30a:	69b8      	ldr	r0, [r7, #24]
 800c30c:	2103      	movs	r1, #3
 800c30e:	466a      	mov	r2, sp
 800c310:	f7f9 ffee 	bl	80062f0 <LCD_X_DisplayDriver>
 800c314:	b003      	add	sp, #12
 800c316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800c31c <_DrawBitmap>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	b08d      	sub	sp, #52	; 0x34
 800c322:	4606      	mov	r6, r0
 800c324:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c326:	910a      	str	r1, [sp, #40]	; 0x28
 800c328:	2804      	cmp	r0, #4
 800c32a:	469b      	mov	fp, r3
 800c32c:	9209      	str	r2, [sp, #36]	; 0x24
 800c32e:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c330:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c332:	68b3      	ldr	r3, [r6, #8]
 800c334:	d011      	beq.n	800c35a <_DrawBitmap+0x3e>
 800c336:	dc09      	bgt.n	800c34c <_DrawBitmap+0x30>
 800c338:	2801      	cmp	r0, #1
 800c33a:	d013      	beq.n	800c364 <_DrawBitmap+0x48>
 800c33c:	2802      	cmp	r0, #2
 800c33e:	f040 822d 	bne.w	800c79c <_DrawBitmap+0x480>
 800c342:	4aab      	ldr	r2, [pc, #684]	; (800c5f0 <_DrawBitmap+0x2d4>)
 800c344:	6812      	ldr	r2, [r2, #0]
 800c346:	920b      	str	r2, [sp, #44]	; 0x2c
 800c348:	2100      	movs	r1, #0
 800c34a:	e0b8      	b.n	800c4be <_DrawBitmap+0x1a2>
 800c34c:	2808      	cmp	r0, #8
 800c34e:	f000 8172 	beq.w	800c636 <_DrawBitmap+0x31a>
 800c352:	2820      	cmp	r0, #32
 800c354:	f000 81fb 	beq.w	800c74e <_DrawBitmap+0x432>
 800c358:	e220      	b.n	800c79c <_DrawBitmap+0x480>
 800c35a:	4aa5      	ldr	r2, [pc, #660]	; (800c5f0 <_DrawBitmap+0x2d4>)
 800c35c:	6812      	ldr	r2, [r2, #0]
 800c35e:	920b      	str	r2, [sp, #44]	; 0x2c
 800c360:	2100      	movs	r1, #0
 800c362:	e10a      	b.n	800c57a <_DrawBitmap+0x25e>
 800c364:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800c366:	b90f      	cbnz	r7, 800c36c <_DrawBitmap+0x50>
 800c368:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c36a:	e042      	b.n	800c3f2 <_DrawBitmap+0xd6>
 800c36c:	4ba0      	ldr	r3, [pc, #640]	; (800c5f0 <_DrawBitmap+0x2d4>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	7c1b      	ldrb	r3, [r3, #16]
 800c372:	07db      	lsls	r3, r3, #31
 800c374:	d4f8      	bmi.n	800c368 <_DrawBitmap+0x4c>
 800c376:	981a      	ldr	r0, [sp, #104]	; 0x68
 800c378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c37a:	9302      	str	r3, [sp, #8]
 800c37c:	e88d 0801 	stmia.w	sp, {r0, fp}
 800c380:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c382:	9003      	str	r0, [sp, #12]
 800c384:	9504      	str	r5, [sp, #16]
 800c386:	69b0      	ldr	r0, [r6, #24]
 800c388:	4623      	mov	r3, r4
 800c38a:	47b8      	blx	r7
 800c38c:	e206      	b.n	800c79c <_DrawBitmap+0x480>
 800c38e:	4b98      	ldr	r3, [pc, #608]	; (800c5f0 <_DrawBitmap+0x2d4>)
 800c390:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c398:	7c1b      	ldrb	r3, [r3, #16]
 800c39a:	f8d5 c000 	ldr.w	ip, [r5]
 800c39e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800c3a2:	68b0      	ldr	r0, [r6, #8]
 800c3a4:	f003 0303 	and.w	r3, r3, #3
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	448a      	add	sl, r1
 800c3ac:	d02d      	beq.n	800c40a <_DrawBitmap+0xee>
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d04d      	beq.n	800c44e <_DrawBitmap+0x132>
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d04b      	beq.n	800c44e <_DrawBitmap+0x132>
 800c3b6:	f1c1 0308 	rsb	r3, r1, #8
 800c3ba:	7822      	ldrb	r2, [r4, #0]
 800c3bc:	498d      	ldr	r1, [pc, #564]	; (800c5f4 <_DrawBitmap+0x2d8>)
 800c3be:	5c8a      	ldrb	r2, [r1, r2]
 800c3c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c3c2:	410a      	asrs	r2, r1
 800c3c4:	69c1      	ldr	r1, [r0, #28]
 800c3c6:	6800      	ldr	r0, [r0, #0]
 800c3c8:	fb01 a107 	mla	r1, r1, r7, sl
 800c3cc:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
 800c3d0:	4659      	mov	r1, fp
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f012 0f01 	tst.w	r2, #1
 800c3d8:	bf0c      	ite	eq
 800c3da:	46e0      	moveq	r8, ip
 800c3dc:	46c8      	movne	r8, r9
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	d00d      	beq.n	800c3fe <_DrawBitmap+0xe2>
 800c3e2:	0852      	lsrs	r2, r2, #1
 800c3e4:	3901      	subs	r1, #1
 800c3e6:	f84a 8b04 	str.w	r8, [sl], #4
 800c3ea:	d1f3      	bne.n	800c3d4 <_DrawBitmap+0xb8>
 800c3ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c3ee:	3701      	adds	r7, #1
 800c3f0:	4414      	add	r4, r2
 800c3f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c3f6:	1a3b      	subs	r3, r7, r0
 800c3f8:	428b      	cmp	r3, r1
 800c3fa:	dbc8      	blt.n	800c38e <_DrawBitmap+0x72>
 800c3fc:	e1ce      	b.n	800c79c <_DrawBitmap+0x480>
 800c3fe:	7843      	ldrb	r3, [r0, #1]
 800c400:	4a7c      	ldr	r2, [pc, #496]	; (800c5f4 <_DrawBitmap+0x2d8>)
 800c402:	3001      	adds	r0, #1
 800c404:	5cd2      	ldrb	r2, [r2, r3]
 800c406:	2308      	movs	r3, #8
 800c408:	e7ec      	b.n	800c3e4 <_DrawBitmap+0xc8>
 800c40a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c40c:	4979      	ldr	r1, [pc, #484]	; (800c5f4 <_DrawBitmap+0x2d8>)
 800c40e:	f1c2 0308 	rsb	r3, r2, #8
 800c412:	7822      	ldrb	r2, [r4, #0]
 800c414:	5c89      	ldrb	r1, [r1, r2]
 800c416:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c418:	4111      	asrs	r1, r2
 800c41a:	69c2      	ldr	r2, [r0, #28]
 800c41c:	6800      	ldr	r0, [r0, #0]
 800c41e:	fb02 a207 	mla	r2, r2, r7, sl
 800c422:	eb00 0a82 	add.w	sl, r0, r2, lsl #2
 800c426:	4622      	mov	r2, r4
 800c428:	2000      	movs	r0, #0
 800c42a:	f011 0f01 	tst.w	r1, #1
 800c42e:	bf18      	it	ne
 800c430:	f84a 9020 	strne.w	r9, [sl, r0, lsl #2]
 800c434:	3b01      	subs	r3, #1
 800c436:	d001      	beq.n	800c43c <_DrawBitmap+0x120>
 800c438:	0849      	lsrs	r1, r1, #1
 800c43a:	e004      	b.n	800c446 <_DrawBitmap+0x12a>
 800c43c:	7853      	ldrb	r3, [r2, #1]
 800c43e:	496d      	ldr	r1, [pc, #436]	; (800c5f4 <_DrawBitmap+0x2d8>)
 800c440:	3201      	adds	r2, #1
 800c442:	5cc9      	ldrb	r1, [r1, r3]
 800c444:	2308      	movs	r3, #8
 800c446:	3001      	adds	r0, #1
 800c448:	4558      	cmp	r0, fp
 800c44a:	d1ee      	bne.n	800c42a <_DrawBitmap+0x10e>
 800c44c:	e7ce      	b.n	800c3ec <_DrawBitmap+0xd0>
 800c44e:	6933      	ldr	r3, [r6, #16]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	4798      	blx	r3
 800c454:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c458:	900b      	str	r0, [sp, #44]	; 0x2c
 800c45a:	46d9      	mov	r9, fp
 800c45c:	46a4      	mov	ip, r4
 800c45e:	f89c 1000 	ldrb.w	r1, [ip]
 800c462:	2280      	movs	r2, #128	; 0x80
 800c464:	fa42 f208 	asr.w	r2, r2, r8
 800c468:	eb0a 030b 	add.w	r3, sl, fp
 800c46c:	4211      	tst	r1, r2
 800c46e:	ebc9 0303 	rsb	r3, r9, r3
 800c472:	d013      	beq.n	800c49c <_DrawBitmap+0x180>
 800c474:	4619      	mov	r1, r3
 800c476:	463a      	mov	r2, r7
 800c478:	4630      	mov	r0, r6
 800c47a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c47e:	9308      	str	r3, [sp, #32]
 800c480:	f7ff fd54 	bl	800bf2c <_GetPixelIndex>
 800c484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c486:	9b08      	ldr	r3, [sp, #32]
 800c488:	ea80 0e01 	eor.w	lr, r0, r1
 800c48c:	463a      	mov	r2, r7
 800c48e:	4619      	mov	r1, r3
 800c490:	4630      	mov	r0, r6
 800c492:	4673      	mov	r3, lr
 800c494:	f7ff fd41 	bl	800bf1a <_SetPixelIndex>
 800c498:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c49c:	f108 0801 	add.w	r8, r8, #1
 800c4a0:	f1b8 0f08 	cmp.w	r8, #8
 800c4a4:	bf04      	itt	eq
 800c4a6:	f10c 0c01 	addeq.w	ip, ip, #1
 800c4aa:	f04f 0800 	moveq.w	r8, #0
 800c4ae:	f1b9 0901 	subs.w	r9, r9, #1
 800c4b2:	d1d4      	bne.n	800c45e <_DrawBitmap+0x142>
 800c4b4:	e79a      	b.n	800c3ec <_DrawBitmap+0xd0>
 800c4b6:	b935      	cbnz	r5, 800c4c6 <_DrawBitmap+0x1aa>
 800c4b8:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c4ba:	3101      	adds	r1, #1
 800c4bc:	443c      	add	r4, r7
 800c4be:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800c4c0:	42b9      	cmp	r1, r7
 800c4c2:	dbf8      	blt.n	800c4b6 <_DrawBitmap+0x19a>
 800c4c4:	e16a      	b.n	800c79c <_DrawBitmap+0x480>
 800c4c6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800c4ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c4cc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c4ce:	69da      	ldr	r2, [r3, #28]
 800c4d0:	7826      	ldrb	r6, [r4, #0]
 800c4d2:	4438      	add	r0, r7
 800c4d4:	4488      	add	r8, r1
 800c4d6:	fb02 0808 	mla	r8, r2, r8, r0
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c4de:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800c4e2:	7c02      	ldrb	r2, [r0, #16]
 800c4e4:	f012 0203 	ands.w	r2, r2, #3
 800c4e8:	46c4      	mov	ip, r8
 800c4ea:	d005      	beq.n	800c4f8 <_DrawBitmap+0x1dc>
 800c4ec:	2a02      	cmp	r2, #2
 800c4ee:	d1e3      	bne.n	800c4b8 <_DrawBitmap+0x19c>
 800c4f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c4f2:	9406      	str	r4, [sp, #24]
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e020      	b.n	800c53a <_DrawBitmap+0x21e>
 800c4f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c4fa:	4658      	mov	r0, fp
 800c4fc:	4627      	mov	r7, r4
 800c4fe:	f1c2 0803 	rsb	r8, r2, #3
 800c502:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800c506:	f1c8 0906 	rsb	r9, r8, #6
 800c50a:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800c50e:	fa4a f909 	asr.w	r9, sl, r9
 800c512:	ea09 0906 	and.w	r9, r9, r6
 800c516:	fa29 f808 	lsr.w	r8, r9, r8
 800c51a:	3201      	adds	r2, #1
 800c51c:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800c520:	f84c 8b04 	str.w	r8, [ip], #4
 800c524:	2a04      	cmp	r2, #4
 800c526:	d102      	bne.n	800c52e <_DrawBitmap+0x212>
 800c528:	787e      	ldrb	r6, [r7, #1]
 800c52a:	2200      	movs	r2, #0
 800c52c:	3701      	adds	r7, #1
 800c52e:	3801      	subs	r0, #1
 800c530:	d1e5      	bne.n	800c4fe <_DrawBitmap+0x1e2>
 800c532:	e7c1      	b.n	800c4b8 <_DrawBitmap+0x19c>
 800c534:	3001      	adds	r0, #1
 800c536:	4558      	cmp	r0, fp
 800c538:	d0be      	beq.n	800c4b8 <_DrawBitmap+0x19c>
 800c53a:	f1c2 0c03 	rsb	ip, r2, #3
 800c53e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c542:	f1cc 0906 	rsb	r9, ip, #6
 800c546:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
 800c54a:	fa4a f909 	asr.w	r9, sl, r9
 800c54e:	ea09 0906 	and.w	r9, r9, r6
 800c552:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800c556:	bf1c      	itt	ne
 800c558:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800c55c:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800c560:	3201      	adds	r2, #1
 800c562:	2a04      	cmp	r2, #4
 800c564:	d1e6      	bne.n	800c534 <_DrawBitmap+0x218>
 800c566:	9a06      	ldr	r2, [sp, #24]
 800c568:	7856      	ldrb	r6, [r2, #1]
 800c56a:	3201      	adds	r2, #1
 800c56c:	9206      	str	r2, [sp, #24]
 800c56e:	2200      	movs	r2, #0
 800c570:	e7e0      	b.n	800c534 <_DrawBitmap+0x218>
 800c572:	b935      	cbnz	r5, 800c582 <_DrawBitmap+0x266>
 800c574:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c576:	3101      	adds	r1, #1
 800c578:	443c      	add	r4, r7
 800c57a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800c57c:	42b9      	cmp	r1, r7
 800c57e:	dbf8      	blt.n	800c572 <_DrawBitmap+0x256>
 800c580:	e10c      	b.n	800c79c <_DrawBitmap+0x480>
 800c582:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800c586:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c588:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c58a:	69da      	ldr	r2, [r3, #28]
 800c58c:	7826      	ldrb	r6, [r4, #0]
 800c58e:	4438      	add	r0, r7
 800c590:	4488      	add	r8, r1
 800c592:	fb02 0808 	mla	r8, r2, r8, r0
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c59a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 800c59e:	7c02      	ldrb	r2, [r0, #16]
 800c5a0:	f012 0203 	ands.w	r2, r2, #3
 800c5a4:	46c4      	mov	ip, r8
 800c5a6:	d005      	beq.n	800c5b4 <_DrawBitmap+0x298>
 800c5a8:	2a02      	cmp	r2, #2
 800c5aa:	d1e3      	bne.n	800c574 <_DrawBitmap+0x258>
 800c5ac:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5ae:	9406      	str	r4, [sp, #24]
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	e024      	b.n	800c5fe <_DrawBitmap+0x2e2>
 800c5b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5b6:	4658      	mov	r0, fp
 800c5b8:	4627      	mov	r7, r4
 800c5ba:	f1c2 0801 	rsb	r8, r2, #1
 800c5be:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800c5c2:	f1c8 0904 	rsb	r9, r8, #4
 800c5c6:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800c5ca:	fa4a f909 	asr.w	r9, sl, r9
 800c5ce:	ea09 0906 	and.w	r9, r9, r6
 800c5d2:	fa29 f808 	lsr.w	r8, r9, r8
 800c5d6:	3201      	adds	r2, #1
 800c5d8:	f855 8028 	ldr.w	r8, [r5, r8, lsl #2]
 800c5dc:	f84c 8b04 	str.w	r8, [ip], #4
 800c5e0:	2a02      	cmp	r2, #2
 800c5e2:	d102      	bne.n	800c5ea <_DrawBitmap+0x2ce>
 800c5e4:	787e      	ldrb	r6, [r7, #1]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	3701      	adds	r7, #1
 800c5ea:	3801      	subs	r0, #1
 800c5ec:	d1e5      	bne.n	800c5ba <_DrawBitmap+0x29e>
 800c5ee:	e7c1      	b.n	800c574 <_DrawBitmap+0x258>
 800c5f0:	20000034 	.word	0x20000034
 800c5f4:	08014168 	.word	0x08014168
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	4558      	cmp	r0, fp
 800c5fc:	d0ba      	beq.n	800c574 <_DrawBitmap+0x258>
 800c5fe:	f1c2 0c01 	rsb	ip, r2, #1
 800c602:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800c606:	f1cc 0904 	rsb	r9, ip, #4
 800c60a:	f04f 0af0 	mov.w	sl, #240	; 0xf0
 800c60e:	fa4a f909 	asr.w	r9, sl, r9
 800c612:	ea09 0906 	and.w	r9, r9, r6
 800c616:	fa39 fc0c 	lsrs.w	ip, r9, ip
 800c61a:	bf1c      	itt	ne
 800c61c:	f855 702c 	ldrne.w	r7, [r5, ip, lsl #2]
 800c620:	f848 7020 	strne.w	r7, [r8, r0, lsl #2]
 800c624:	3201      	adds	r2, #1
 800c626:	2a02      	cmp	r2, #2
 800c628:	d1e6      	bne.n	800c5f8 <_DrawBitmap+0x2dc>
 800c62a:	9a06      	ldr	r2, [sp, #24]
 800c62c:	7856      	ldrb	r6, [r2, #1]
 800c62e:	3201      	adds	r2, #1
 800c630:	9206      	str	r2, [sp, #24]
 800c632:	2200      	movs	r2, #0
 800c634:	e7e0      	b.n	800c5f8 <_DrawBitmap+0x2dc>
 800c636:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 800c638:	f8df c168 	ldr.w	ip, [pc, #360]	; 800c7a4 <_DrawBitmap+0x488>
 800c63c:	b127      	cbz	r7, 800c648 <_DrawBitmap+0x32c>
 800c63e:	f8dc 0000 	ldr.w	r0, [ip]
 800c642:	7c00      	ldrb	r0, [r0, #16]
 800c644:	0780      	lsls	r0, r0, #30
 800c646:	d504      	bpl.n	800c652 <_DrawBitmap+0x336>
 800c648:	f8dc c000 	ldr.w	ip, [ip]
 800c64c:	f04f 0900 	mov.w	r9, #0
 800c650:	e011      	b.n	800c676 <_DrawBitmap+0x35a>
 800c652:	2d00      	cmp	r5, #0
 800c654:	d0f8      	beq.n	800c648 <_DrawBitmap+0x32c>
 800c656:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c658:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c65a:	9302      	str	r3, [sp, #8]
 800c65c:	f8cd b000 	str.w	fp, [sp]
 800c660:	9001      	str	r0, [sp, #4]
 800c662:	9503      	str	r5, [sp, #12]
 800c664:	69b0      	ldr	r0, [r6, #24]
 800c666:	4623      	mov	r3, r4
 800c668:	47b8      	blx	r7
 800c66a:	e097      	b.n	800c79c <_DrawBitmap+0x480>
 800c66c:	b93d      	cbnz	r5, 800c67e <_DrawBitmap+0x362>
 800c66e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c670:	f109 0901 	add.w	r9, r9, #1
 800c674:	443c      	add	r4, r7
 800c676:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800c678:	45b9      	cmp	r9, r7
 800c67a:	dbf7      	blt.n	800c66c <_DrawBitmap+0x350>
 800c67c:	e08e      	b.n	800c79c <_DrawBitmap+0x480>
 800c67e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c680:	69da      	ldr	r2, [r3, #28]
 800c682:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c684:	4448      	add	r0, r9
 800c686:	fb02 7000 	mla	r0, r2, r0, r7
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c690:	f89c 2010 	ldrb.w	r2, [ip, #16]
 800c694:	f012 0203 	ands.w	r2, r2, #3
 800c698:	4601      	mov	r1, r0
 800c69a:	d003      	beq.n	800c6a4 <_DrawBitmap+0x388>
 800c69c:	2a02      	cmp	r2, #2
 800c69e:	d1e6      	bne.n	800c66e <_DrawBitmap+0x352>
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	e04f      	b.n	800c744 <_DrawBitmap+0x428>
 800c6a4:	4658      	mov	r0, fp
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	2807      	cmp	r0, #7
 800c6aa:	dd23      	ble.n	800c6f4 <_DrawBitmap+0x3d8>
 800c6ac:	7816      	ldrb	r6, [r2, #0]
 800c6ae:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6b2:	600e      	str	r6, [r1, #0]
 800c6b4:	7856      	ldrb	r6, [r2, #1]
 800c6b6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6ba:	604e      	str	r6, [r1, #4]
 800c6bc:	7896      	ldrb	r6, [r2, #2]
 800c6be:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6c2:	608e      	str	r6, [r1, #8]
 800c6c4:	78d6      	ldrb	r6, [r2, #3]
 800c6c6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6ca:	60ce      	str	r6, [r1, #12]
 800c6cc:	7916      	ldrb	r6, [r2, #4]
 800c6ce:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6d2:	610e      	str	r6, [r1, #16]
 800c6d4:	7956      	ldrb	r6, [r2, #5]
 800c6d6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6da:	614e      	str	r6, [r1, #20]
 800c6dc:	7996      	ldrb	r6, [r2, #6]
 800c6de:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6e2:	618e      	str	r6, [r1, #24]
 800c6e4:	79d6      	ldrb	r6, [r2, #7]
 800c6e6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6ea:	61ce      	str	r6, [r1, #28]
 800c6ec:	3808      	subs	r0, #8
 800c6ee:	3208      	adds	r2, #8
 800c6f0:	3120      	adds	r1, #32
 800c6f2:	e7d9      	b.n	800c6a8 <_DrawBitmap+0x38c>
 800c6f4:	2803      	cmp	r0, #3
 800c6f6:	dd13      	ble.n	800c720 <_DrawBitmap+0x404>
 800c6f8:	7816      	ldrb	r6, [r2, #0]
 800c6fa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c6fe:	600e      	str	r6, [r1, #0]
 800c700:	7856      	ldrb	r6, [r2, #1]
 800c702:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c706:	604e      	str	r6, [r1, #4]
 800c708:	7896      	ldrb	r6, [r2, #2]
 800c70a:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c70e:	608e      	str	r6, [r1, #8]
 800c710:	78d6      	ldrb	r6, [r2, #3]
 800c712:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 800c716:	60ce      	str	r6, [r1, #12]
 800c718:	3804      	subs	r0, #4
 800c71a:	3204      	adds	r2, #4
 800c71c:	3110      	adds	r1, #16
 800c71e:	e7e9      	b.n	800c6f4 <_DrawBitmap+0x3d8>
 800c720:	2600      	movs	r6, #0
 800c722:	4286      	cmp	r6, r0
 800c724:	d0a3      	beq.n	800c66e <_DrawBitmap+0x352>
 800c726:	f812 8006 	ldrb.w	r8, [r2, r6]
 800c72a:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 800c72e:	f841 7026 	str.w	r7, [r1, r6, lsl #2]
 800c732:	3601      	adds	r6, #1
 800c734:	e7f5      	b.n	800c722 <_DrawBitmap+0x406>
 800c736:	5c62      	ldrb	r2, [r4, r1]
 800c738:	b11a      	cbz	r2, 800c742 <_DrawBitmap+0x426>
 800c73a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c73e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800c742:	3101      	adds	r1, #1
 800c744:	ebc1 020b 	rsb	r2, r1, fp
 800c748:	2a00      	cmp	r2, #0
 800c74a:	dcf4      	bgt.n	800c736 <_DrawBitmap+0x41a>
 800c74c:	e78f      	b.n	800c66e <_DrawBitmap+0x352>
 800c74e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800c750:	b90d      	cbnz	r5, 800c756 <_DrawBitmap+0x43a>
 800c752:	462b      	mov	r3, r5
 800c754:	e012      	b.n	800c77c <_DrawBitmap+0x460>
 800c756:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800c758:	9701      	str	r7, [sp, #4]
 800c75a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c75c:	f8cd b000 	str.w	fp, [sp]
 800c760:	9702      	str	r7, [sp, #8]
 800c762:	69b0      	ldr	r0, [r6, #24]
 800c764:	4623      	mov	r3, r4
 800c766:	47a8      	blx	r5
 800c768:	e018      	b.n	800c79c <_DrawBitmap+0x480>
 800c76a:	f851 7f04 	ldr.w	r7, [r1, #4]!
 800c76e:	1b0d      	subs	r5, r1, r4
 800c770:	3a01      	subs	r2, #1
 800c772:	502f      	str	r7, [r5, r0]
 800c774:	d1f9      	bne.n	800c76a <_DrawBitmap+0x44e>
 800c776:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800c778:	3301      	adds	r3, #1
 800c77a:	443c      	add	r4, r7
 800c77c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c77e:	42ab      	cmp	r3, r5
 800c780:	da0c      	bge.n	800c79c <_DrawBitmap+0x480>
 800c782:	68b2      	ldr	r2, [r6, #8]
 800c784:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c786:	69d1      	ldr	r1, [r2, #28]
 800c788:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c78a:	6812      	ldr	r2, [r2, #0]
 800c78c:	4418      	add	r0, r3
 800c78e:	fb01 5100 	mla	r1, r1, r0, r5
 800c792:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c796:	1f21      	subs	r1, r4, #4
 800c798:	465a      	mov	r2, fp
 800c79a:	e7e6      	b.n	800c76a <_DrawBitmap+0x44e>
 800c79c:	b00d      	add	sp, #52	; 0x34
 800c79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20000034 	.word	0x20000034

0800c7a8 <_InitOnce.isra.4>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	6805      	ldr	r5, [r0, #0]
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	b93d      	cbnz	r5, 800c7c0 <_InitOnce.isra.4+0x18>
 800c7b0:	2048      	movs	r0, #72	; 0x48
 800c7b2:	f003 fe71 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	6020      	str	r0, [r4, #0]
 800c7ba:	2248      	movs	r2, #72	; 0x48
 800c7bc:	f000 fe40 	bl	800d440 <GUI__memset>
 800c7c0:	6820      	ldr	r0, [r4, #0]
 800c7c2:	f1d0 0001 	rsbs	r0, r0, #1
 800c7c6:	bf38      	it	cc
 800c7c8:	2000      	movcc	r0, #0
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}

0800c7cc <_SetDevFunc>:
 800c7cc:	b570      	push	{r4, r5, r6, lr}
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	3008      	adds	r0, #8
 800c7d2:	460e      	mov	r6, r1
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	f7ff ffe7 	bl	800c7a8 <_InitOnce.isra.4>
 800c7da:	68ab      	ldr	r3, [r5, #8]
 800c7dc:	b1c3      	cbz	r3, 800c810 <_SetDevFunc+0x44>
 800c7de:	f1a6 0119 	sub.w	r1, r6, #25
 800c7e2:	290f      	cmp	r1, #15
 800c7e4:	d814      	bhi.n	800c810 <_SetDevFunc+0x44>
 800c7e6:	e8df f001 	tbb	[pc, r1]
 800c7ea:	1308      	.short	0x1308
 800c7ec:	13131313 	.word	0x13131313
 800c7f0:	130a0c13 	.word	0x130a0c13
 800c7f4:	130e1310 	.word	0x130e1310
 800c7f8:	1213      	.short	0x1213
 800c7fa:	631c      	str	r4, [r3, #48]	; 0x30
 800c7fc:	bd70      	pop	{r4, r5, r6, pc}
 800c7fe:	635c      	str	r4, [r3, #52]	; 0x34
 800c800:	bd70      	pop	{r4, r5, r6, pc}
 800c802:	639c      	str	r4, [r3, #56]	; 0x38
 800c804:	bd70      	pop	{r4, r5, r6, pc}
 800c806:	63dc      	str	r4, [r3, #60]	; 0x3c
 800c808:	bd70      	pop	{r4, r5, r6, pc}
 800c80a:	641c      	str	r4, [r3, #64]	; 0x40
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
 800c80e:	645c      	str	r4, [r3, #68]	; 0x44
 800c810:	bd70      	pop	{r4, r5, r6, pc}

0800c812 <_GetPos>:
 800c812:	b570      	push	{r4, r5, r6, lr}
 800c814:	4604      	mov	r4, r0
 800c816:	3008      	adds	r0, #8
 800c818:	460d      	mov	r5, r1
 800c81a:	4616      	mov	r6, r2
 800c81c:	f7ff ffc4 	bl	800c7a8 <_InitOnce.isra.4>
 800c820:	68a3      	ldr	r3, [r4, #8]
 800c822:	b11b      	cbz	r3, 800c82c <_GetPos+0x1a>
 800c824:	6a18      	ldr	r0, [r3, #32]
 800c826:	6028      	str	r0, [r5, #0]
 800c828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82a:	6033      	str	r3, [r6, #0]
 800c82c:	bd70      	pop	{r4, r5, r6, pc}

0800c82e <_ShowBuffer>:
 800c82e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c830:	4604      	mov	r4, r0
 800c832:	2300      	movs	r3, #0
 800c834:	3008      	adds	r0, #8
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	460d      	mov	r5, r1
 800c83a:	f7ff ffb5 	bl	800c7a8 <_InitOnce.isra.4>
 800c83e:	68a3      	ldr	r3, [r4, #8]
 800c840:	b133      	cbz	r3, 800c850 <_ShowBuffer+0x22>
 800c842:	aa02      	add	r2, sp, #8
 800c844:	69a0      	ldr	r0, [r4, #24]
 800c846:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c84a:	210e      	movs	r1, #14
 800c84c:	f7f9 fd50 	bl	80062f0 <LCD_X_DisplayDriver>
 800c850:	b003      	add	sp, #12
 800c852:	bd30      	pop	{r4, r5, pc}

0800c854 <_Init>:
 800c854:	b538      	push	{r3, r4, r5, lr}
 800c856:	4604      	mov	r4, r0
 800c858:	3008      	adds	r0, #8
 800c85a:	f7ff ffa5 	bl	800c7a8 <_InitOnce.isra.4>
 800c85e:	2101      	movs	r1, #1
 800c860:	4605      	mov	r5, r0
 800c862:	2200      	movs	r2, #0
 800c864:	69a0      	ldr	r0, [r4, #24]
 800c866:	f7f9 fd43 	bl	80062f0 <LCD_X_DisplayDriver>
 800c86a:	4328      	orrs	r0, r5
 800c86c:	bd38      	pop	{r3, r4, r5, pc}

0800c86e <_SetVis>:
 800c86e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c870:	4604      	mov	r4, r0
 800c872:	2300      	movs	r3, #0
 800c874:	3008      	adds	r0, #8
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	460d      	mov	r5, r1
 800c87a:	f7ff ff95 	bl	800c7a8 <_InitOnce.isra.4>
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	b13b      	cbz	r3, 800c892 <_SetVis+0x24>
 800c882:	aa02      	add	r2, sp, #8
 800c884:	62dd      	str	r5, [r3, #44]	; 0x2c
 800c886:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c88a:	69a0      	ldr	r0, [r4, #24]
 800c88c:	2109      	movs	r1, #9
 800c88e:	f7f9 fd2f 	bl	80062f0 <LCD_X_DisplayDriver>
 800c892:	b003      	add	sp, #12
 800c894:	bd30      	pop	{r4, r5, pc}

0800c896 <_SetAlpha>:
 800c896:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c898:	4604      	mov	r4, r0
 800c89a:	2300      	movs	r3, #0
 800c89c:	3008      	adds	r0, #8
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	f7ff ff81 	bl	800c7a8 <_InitOnce.isra.4>
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	b13b      	cbz	r3, 800c8ba <_SetAlpha+0x24>
 800c8aa:	aa02      	add	r2, sp, #8
 800c8ac:	629d      	str	r5, [r3, #40]	; 0x28
 800c8ae:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c8b2:	69a0      	ldr	r0, [r4, #24]
 800c8b4:	210a      	movs	r1, #10
 800c8b6:	f7f9 fd1b 	bl	80062f0 <LCD_X_DisplayDriver>
 800c8ba:	b003      	add	sp, #12
 800c8bc:	bd30      	pop	{r4, r5, pc}

0800c8be <_SetVRAMAddr>:
 800c8be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	3008      	adds	r0, #8
 800c8c6:	9301      	str	r3, [sp, #4]
 800c8c8:	460d      	mov	r5, r1
 800c8ca:	f7ff ff6d 	bl	800c7a8 <_InitOnce.isra.4>
 800c8ce:	68a3      	ldr	r3, [r4, #8]
 800c8d0:	b143      	cbz	r3, 800c8e4 <_SetVRAMAddr+0x26>
 800c8d2:	aa02      	add	r2, sp, #8
 800c8d4:	601d      	str	r5, [r3, #0]
 800c8d6:	605d      	str	r5, [r3, #4]
 800c8d8:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c8dc:	69a0      	ldr	r0, [r4, #24]
 800c8de:	2102      	movs	r1, #2
 800c8e0:	f7f9 fd06 	bl	80062f0 <LCD_X_DisplayDriver>
 800c8e4:	b003      	add	sp, #12
 800c8e6:	bd30      	pop	{r4, r5, pc}

0800c8e8 <_CopyBuffer>:
 800c8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	3008      	adds	r0, #8
 800c8f0:	460e      	mov	r6, r1
 800c8f2:	4617      	mov	r7, r2
 800c8f4:	f7ff ff58 	bl	800c7a8 <_InitOnce.isra.4>
 800c8f8:	68ac      	ldr	r4, [r5, #8]
 800c8fa:	b1e4      	cbz	r4, 800c936 <_CopyBuffer+0x4e>
 800c8fc:	42be      	cmp	r6, r7
 800c8fe:	d01a      	beq.n	800c936 <_CopyBuffer+0x4e>
 800c900:	68eb      	ldr	r3, [r5, #12]
 800c902:	2108      	movs	r1, #8
 800c904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c906:	4628      	mov	r0, r5
 800c908:	4798      	blx	r3
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	68e2      	ldr	r2, [r4, #12]
 800c90e:	6861      	ldr	r1, [r4, #4]
 800c910:	435a      	muls	r2, r3
 800c912:	4350      	muls	r0, r2
 800c914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c916:	08c2      	lsrs	r2, r0, #3
 800c918:	fb07 1802 	mla	r8, r7, r2, r1
 800c91c:	b123      	cbz	r3, 800c928 <_CopyBuffer+0x40>
 800c91e:	69a8      	ldr	r0, [r5, #24]
 800c920:	4631      	mov	r1, r6
 800c922:	463a      	mov	r2, r7
 800c924:	4798      	blx	r3
 800c926:	e004      	b.n	800c932 <_CopyBuffer+0x4a>
 800c928:	4640      	mov	r0, r8
 800c92a:	fb06 1102 	mla	r1, r6, r2, r1
 800c92e:	f006 f99a 	bl	8012c66 <memcpy>
 800c932:	f8c4 8000 	str.w	r8, [r4]
 800c936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c93a <_SetPos>:
 800c93a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93e:	b087      	sub	sp, #28
 800c940:	4604      	mov	r4, r0
 800c942:	460e      	mov	r6, r1
 800c944:	4615      	mov	r5, r2
 800c946:	2100      	movs	r1, #0
 800c948:	2218      	movs	r2, #24
 800c94a:	4668      	mov	r0, sp
 800c94c:	f006 f9b0 	bl	8012cb0 <memset>
 800c950:	f104 0008 	add.w	r0, r4, #8
 800c954:	f7ff ff28 	bl	800c7a8 <_InitOnce.isra.4>
 800c958:	68a7      	ldr	r7, [r4, #8]
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	d05d      	beq.n	800ca1a <_SetPos+0xe0>
 800c95e:	623e      	str	r6, [r7, #32]
 800c960:	627d      	str	r5, [r7, #36]	; 0x24
 800c962:	f000 f9e5 	bl	800cd30 <LCD_GetXSizeDisplay>
 800c966:	4681      	mov	r9, r0
 800c968:	f000 f9e8 	bl	800cd3c <LCD_GetYSizeDisplay>
 800c96c:	68e3      	ldr	r3, [r4, #12]
 800c96e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c974:	f8d7 b010 	ldr.w	fp, [r7, #16]
 800c978:	4680      	mov	r8, r0
 800c97a:	2108      	movs	r1, #8
 800c97c:	4620      	mov	r0, r4
 800c97e:	4798      	blx	r3
 800c980:	2308      	movs	r3, #8
 800c982:	3007      	adds	r0, #7
 800c984:	fb90 f0f3 	sdiv	r0, r0, r3
 800c988:	2e00      	cmp	r6, #0
 800c98a:	9004      	str	r0, [sp, #16]
 800c98c:	eb0a 0306 	add.w	r3, sl, r6
 800c990:	da07      	bge.n	800c9a2 <_SetPos+0x68>
 800c992:	9a05      	ldr	r2, [sp, #20]
 800c994:	9302      	str	r3, [sp, #8]
 800c996:	fb00 2616 	mls	r6, r0, r6, r2
 800c99a:	2200      	movs	r2, #0
 800c99c:	9605      	str	r6, [sp, #20]
 800c99e:	9200      	str	r2, [sp, #0]
 800c9a0:	e007      	b.n	800c9b2 <_SetPos+0x78>
 800c9a2:	454b      	cmp	r3, r9
 800c9a4:	9600      	str	r6, [sp, #0]
 800c9a6:	bfca      	itet	gt
 800c9a8:	ebc6 0609 	rsbgt	r6, r6, r9
 800c9ac:	f8cd a008 	strle.w	sl, [sp, #8]
 800c9b0:	9602      	strgt	r6, [sp, #8]
 800c9b2:	2d00      	cmp	r5, #0
 800c9b4:	eb0b 0305 	add.w	r3, fp, r5
 800c9b8:	da09      	bge.n	800c9ce <_SetPos+0x94>
 800c9ba:	9a04      	ldr	r2, [sp, #16]
 800c9bc:	9303      	str	r3, [sp, #12]
 800c9be:	4355      	muls	r5, r2
 800c9c0:	9a05      	ldr	r2, [sp, #20]
 800c9c2:	fb0a 2215 	mls	r2, sl, r5, r2
 800c9c6:	9205      	str	r2, [sp, #20]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	9201      	str	r2, [sp, #4]
 800c9cc:	e007      	b.n	800c9de <_SetPos+0xa4>
 800c9ce:	4543      	cmp	r3, r8
 800c9d0:	9501      	str	r5, [sp, #4]
 800c9d2:	bfca      	itet	gt
 800c9d4:	ebc5 0508 	rsbgt	r5, r5, r8
 800c9d8:	f8cd b00c 	strle.w	fp, [sp, #12]
 800c9dc:	9503      	strgt	r5, [sp, #12]
 800c9de:	9b02      	ldr	r3, [sp, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	dd08      	ble.n	800c9f8 <_SetPos+0xbe>
 800c9e6:	9a03      	ldr	r2, [sp, #12]
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	dd05      	ble.n	800c9f8 <_SetPos+0xbe>
 800c9ec:	9a00      	ldr	r2, [sp, #0]
 800c9ee:	454a      	cmp	r2, r9
 800c9f0:	da02      	bge.n	800c9f8 <_SetPos+0xbe>
 800c9f2:	9a01      	ldr	r2, [sp, #4]
 800c9f4:	4542      	cmp	r2, r8
 800c9f6:	db06      	blt.n	800ca06 <_SetPos+0xcc>
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d10e      	bne.n	800ca1a <_SetPos+0xe0>
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	2100      	movs	r1, #0
 800ca00:	f7ff ff35 	bl	800c86e <_SetVis>
 800ca04:	e009      	b.n	800ca1a <_SetPos+0xe0>
 800ca06:	b91b      	cbnz	r3, 800ca10 <_SetPos+0xd6>
 800ca08:	4620      	mov	r0, r4
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	f7ff ff2f 	bl	800c86e <_SetVis>
 800ca10:	69a0      	ldr	r0, [r4, #24]
 800ca12:	2108      	movs	r1, #8
 800ca14:	466a      	mov	r2, sp
 800ca16:	f7f9 fc6b 	bl	80062f0 <LCD_X_DisplayDriver>
 800ca1a:	b007      	add	sp, #28
 800ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca20 <_SetSize>:
 800ca20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca22:	4605      	mov	r5, r0
 800ca24:	2300      	movs	r3, #0
 800ca26:	3008      	adds	r0, #8
 800ca28:	460e      	mov	r6, r1
 800ca2a:	4617      	mov	r7, r2
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	9301      	str	r3, [sp, #4]
 800ca30:	f7ff feba 	bl	800c7a8 <_InitOnce.isra.4>
 800ca34:	68ac      	ldr	r4, [r5, #8]
 800ca36:	b194      	cbz	r4, 800ca5e <_SetSize+0x3e>
 800ca38:	69e3      	ldr	r3, [r4, #28]
 800ca3a:	b93b      	cbnz	r3, 800ca4c <_SetSize+0x2c>
 800ca3c:	69a8      	ldr	r0, [r5, #24]
 800ca3e:	f000 f925 	bl	800cc8c <LCD_GetSwapXYEx>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	bf0c      	ite	eq
 800ca46:	4630      	moveq	r0, r6
 800ca48:	4638      	movne	r0, r7
 800ca4a:	61e0      	str	r0, [r4, #28]
 800ca4c:	60e6      	str	r6, [r4, #12]
 800ca4e:	6127      	str	r7, [r4, #16]
 800ca50:	69a8      	ldr	r0, [r5, #24]
 800ca52:	2107      	movs	r1, #7
 800ca54:	466a      	mov	r2, sp
 800ca56:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800ca5a:	f7f9 fc49 	bl	80062f0 <LCD_X_DisplayDriver>
 800ca5e:	b003      	add	sp, #12
 800ca60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca62 <_SetVSize>:
 800ca62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca64:	4606      	mov	r6, r0
 800ca66:	3008      	adds	r0, #8
 800ca68:	460d      	mov	r5, r1
 800ca6a:	4617      	mov	r7, r2
 800ca6c:	f7ff fe9c 	bl	800c7a8 <_InitOnce.isra.4>
 800ca70:	68b4      	ldr	r4, [r6, #8]
 800ca72:	b144      	cbz	r4, 800ca86 <_SetVSize+0x24>
 800ca74:	69b0      	ldr	r0, [r6, #24]
 800ca76:	f000 f909 	bl	800cc8c <LCD_GetSwapXYEx>
 800ca7a:	6165      	str	r5, [r4, #20]
 800ca7c:	61a7      	str	r7, [r4, #24]
 800ca7e:	b108      	cbz	r0, 800ca84 <_SetVSize+0x22>
 800ca80:	61e7      	str	r7, [r4, #28]
 800ca82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca84:	61e5      	str	r5, [r4, #28]
 800ca86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca88 <LCD_UpdateColorIndices>:
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	4c07      	ldr	r4, [pc, #28]	; (800caa8 <LCD_UpdateColorIndices+0x20>)
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca90:	f000 fc6e 	bl	800d370 <LCD_Color2Index>
 800ca94:	f000 fc8c 	bl	800d3b0 <LCD_SetColorIndex>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ca9c:	f000 fc68 	bl	800d370 <LCD_Color2Index>
 800caa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa4:	f000 bca0 	b.w	800d3e8 <LCD_SetBkColorIndex>
 800caa8:	20000034 	.word	0x20000034

0800caac <LCD_SetClipRectEx>:
 800caac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caae:	4c09      	ldr	r4, [pc, #36]	; (800cad4 <LCD_SetClipRectEx+0x28>)
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	7c5a      	ldrb	r2, [r3, #17]
 800cab4:	4b08      	ldr	r3, [pc, #32]	; (800cad8 <LCD_SetClipRectEx+0x2c>)
 800cab6:	4605      	mov	r5, r0
 800cab8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cabc:	68c2      	ldr	r2, [r0, #12]
 800cabe:	4669      	mov	r1, sp
 800cac0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cac2:	4790      	blx	r2
 800cac4:	6820      	ldr	r0, [r4, #0]
 800cac6:	4629      	mov	r1, r5
 800cac8:	466a      	mov	r2, sp
 800caca:	3008      	adds	r0, #8
 800cacc:	f000 fd5e 	bl	800d58c <GUI__IntersectRects>
 800cad0:	b003      	add	sp, #12
 800cad2:	bd30      	pop	{r4, r5, pc}
 800cad4:	20000034 	.word	0x20000034
 800cad8:	20026d44 	.word	0x20026d44

0800cadc <LCD_SetVRAMAddrEx>:
 800cadc:	b513      	push	{r0, r1, r4, lr}
 800cade:	460c      	mov	r4, r1
 800cae0:	f002 fe34 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cae4:	9001      	str	r0, [sp, #4]
 800cae6:	b908      	cbnz	r0, 800caec <LCD_SetVRAMAddrEx+0x10>
 800cae8:	2001      	movs	r0, #1
 800caea:	e00b      	b.n	800cb04 <LCD_SetVRAMAddrEx+0x28>
 800caec:	68c3      	ldr	r3, [r0, #12]
 800caee:	2109      	movs	r1, #9
 800caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf2:	a801      	add	r0, sp, #4
 800caf4:	4798      	blx	r3
 800caf6:	4603      	mov	r3, r0
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d0f5      	beq.n	800cae8 <LCD_SetVRAMAddrEx+0xc>
 800cafc:	9801      	ldr	r0, [sp, #4]
 800cafe:	4621      	mov	r1, r4
 800cb00:	4798      	blx	r3
 800cb02:	2000      	movs	r0, #0
 800cb04:	b002      	add	sp, #8
 800cb06:	bd10      	pop	{r4, pc}

0800cb08 <LCD_SetVSizeEx>:
 800cb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	4614      	mov	r4, r2
 800cb0e:	f002 fe1d 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cb12:	9001      	str	r0, [sp, #4]
 800cb14:	b908      	cbnz	r0, 800cb1a <LCD_SetVSizeEx+0x12>
 800cb16:	2001      	movs	r0, #1
 800cb18:	e00c      	b.n	800cb34 <LCD_SetVSizeEx+0x2c>
 800cb1a:	68c3      	ldr	r3, [r0, #12]
 800cb1c:	210a      	movs	r1, #10
 800cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb20:	a801      	add	r0, sp, #4
 800cb22:	4798      	blx	r3
 800cb24:	4603      	mov	r3, r0
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d0f5      	beq.n	800cb16 <LCD_SetVSizeEx+0xe>
 800cb2a:	9801      	ldr	r0, [sp, #4]
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	4622      	mov	r2, r4
 800cb30:	4798      	blx	r3
 800cb32:	2000      	movs	r0, #0
 800cb34:	b003      	add	sp, #12
 800cb36:	bd30      	pop	{r4, r5, pc}

0800cb38 <LCD_SetSizeEx>:
 800cb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	4614      	mov	r4, r2
 800cb3e:	f002 fe05 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cb42:	9001      	str	r0, [sp, #4]
 800cb44:	b908      	cbnz	r0, 800cb4a <LCD_SetSizeEx+0x12>
 800cb46:	2001      	movs	r0, #1
 800cb48:	e00c      	b.n	800cb64 <LCD_SetSizeEx+0x2c>
 800cb4a:	68c3      	ldr	r3, [r0, #12]
 800cb4c:	210b      	movs	r1, #11
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb50:	a801      	add	r0, sp, #4
 800cb52:	4798      	blx	r3
 800cb54:	4603      	mov	r3, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d0f5      	beq.n	800cb46 <LCD_SetSizeEx+0xe>
 800cb5a:	9801      	ldr	r0, [sp, #4]
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4622      	mov	r2, r4
 800cb60:	4798      	blx	r3
 800cb62:	2000      	movs	r0, #0
 800cb64:	b003      	add	sp, #12
 800cb66:	bd30      	pop	{r4, r5, pc}

0800cb68 <LCD_SetPosEx>:
 800cb68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	4614      	mov	r4, r2
 800cb6e:	f002 fded 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cb72:	9001      	str	r0, [sp, #4]
 800cb74:	b908      	cbnz	r0, 800cb7a <LCD_SetPosEx+0x12>
 800cb76:	2001      	movs	r0, #1
 800cb78:	e00c      	b.n	800cb94 <LCD_SetPosEx+0x2c>
 800cb7a:	68c3      	ldr	r3, [r0, #12]
 800cb7c:	2103      	movs	r1, #3
 800cb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb80:	a801      	add	r0, sp, #4
 800cb82:	4798      	blx	r3
 800cb84:	4603      	mov	r3, r0
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d0f5      	beq.n	800cb76 <LCD_SetPosEx+0xe>
 800cb8a:	9801      	ldr	r0, [sp, #4]
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	4622      	mov	r2, r4
 800cb90:	4798      	blx	r3
 800cb92:	2000      	movs	r0, #0
 800cb94:	b003      	add	sp, #12
 800cb96:	bd30      	pop	{r4, r5, pc}

0800cb98 <LCD_SetLUTEntryEx>:
 800cb98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	4614      	mov	r4, r2
 800cb9e:	f002 fdd5 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cba2:	9001      	str	r0, [sp, #4]
 800cba4:	b908      	cbnz	r0, 800cbaa <LCD_SetLUTEntryEx+0x12>
 800cba6:	2001      	movs	r0, #1
 800cba8:	e00c      	b.n	800cbc4 <LCD_SetLUTEntryEx+0x2c>
 800cbaa:	68c3      	ldr	r3, [r0, #12]
 800cbac:	2110      	movs	r1, #16
 800cbae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb0:	a801      	add	r0, sp, #4
 800cbb2:	4798      	blx	r3
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0f5      	beq.n	800cba6 <LCD_SetLUTEntryEx+0xe>
 800cbba:	9801      	ldr	r0, [sp, #4]
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	4622      	mov	r2, r4
 800cbc0:	4798      	blx	r3
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	b003      	add	sp, #12
 800cbc6:	bd30      	pop	{r4, r5, pc}

0800cbc8 <LCD_GetPosEx>:
 800cbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbca:	460d      	mov	r5, r1
 800cbcc:	4614      	mov	r4, r2
 800cbce:	f002 fdbd 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cbd2:	9001      	str	r0, [sp, #4]
 800cbd4:	b908      	cbnz	r0, 800cbda <LCD_GetPosEx+0x12>
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	e00c      	b.n	800cbf4 <LCD_GetPosEx+0x2c>
 800cbda:	68c3      	ldr	r3, [r0, #12]
 800cbdc:	2104      	movs	r1, #4
 800cbde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe0:	a801      	add	r0, sp, #4
 800cbe2:	4798      	blx	r3
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d0f5      	beq.n	800cbd6 <LCD_GetPosEx+0xe>
 800cbea:	9801      	ldr	r0, [sp, #4]
 800cbec:	4629      	mov	r1, r5
 800cbee:	4622      	mov	r2, r4
 800cbf0:	4798      	blx	r3
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	b003      	add	sp, #12
 800cbf6:	bd30      	pop	{r4, r5, pc}

0800cbf8 <LCD_SetDevFunc>:
 800cbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbfa:	460d      	mov	r5, r1
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	f002 fda5 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cc02:	9001      	str	r0, [sp, #4]
 800cc04:	b908      	cbnz	r0, 800cc0a <LCD_SetDevFunc+0x12>
 800cc06:	2001      	movs	r0, #1
 800cc08:	e00c      	b.n	800cc24 <LCD_SetDevFunc+0x2c>
 800cc0a:	68c3      	ldr	r3, [r0, #12]
 800cc0c:	2116      	movs	r1, #22
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc10:	a801      	add	r0, sp, #4
 800cc12:	4798      	blx	r3
 800cc14:	4603      	mov	r3, r0
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d0f5      	beq.n	800cc06 <LCD_SetDevFunc+0xe>
 800cc1a:	9801      	ldr	r0, [sp, #4]
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	4622      	mov	r2, r4
 800cc20:	4798      	blx	r3
 800cc22:	2000      	movs	r0, #0
 800cc24:	b003      	add	sp, #12
 800cc26:	bd30      	pop	{r4, r5, pc}

0800cc28 <_GetDevProp>:
 800cc28:	2801      	cmp	r0, #1
 800cc2a:	b510      	push	{r4, lr}
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	dc08      	bgt.n	800cc42 <_GetDevProp+0x1a>
 800cc30:	f002 fd8c 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800cc34:	b120      	cbz	r0, 800cc40 <_GetDevProp+0x18>
 800cc36:	68c3      	ldr	r3, [r0, #12]
 800cc38:	4621      	mov	r1, r4
 800cc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3c:	4798      	blx	r3
 800cc3e:	bd10      	pop	{r4, pc}
 800cc40:	bd10      	pop	{r4, pc}
 800cc42:	2000      	movs	r0, #0
 800cc44:	bd10      	pop	{r4, pc}

0800cc46 <_GetMaxValue>:
 800cc46:	b538      	push	{r3, r4, r5, lr}
 800cc48:	4604      	mov	r4, r0
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	2001      	movs	r0, #1
 800cc4e:	f7ff ffeb 	bl	800cc28 <_GetDevProp>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4605      	mov	r5, r0
 800cc56:	2000      	movs	r0, #0
 800cc58:	f7ff ffe6 	bl	800cc28 <_GetDevProp>
 800cc5c:	42a8      	cmp	r0, r5
 800cc5e:	bfb8      	it	lt
 800cc60:	4628      	movlt	r0, r5
 800cc62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cc66:	bd38      	pop	{r3, r4, r5, pc}

0800cc68 <LCD_GetXSizeEx>:
 800cc68:	2101      	movs	r1, #1
 800cc6a:	f7ff bfdd 	b.w	800cc28 <_GetDevProp>

0800cc6e <LCD_GetYSizeEx>:
 800cc6e:	2102      	movs	r1, #2
 800cc70:	f7ff bfda 	b.w	800cc28 <_GetDevProp>

0800cc74 <LCD_GetBitsPerPixelEx>:
 800cc74:	2108      	movs	r1, #8
 800cc76:	f7ff bfd7 	b.w	800cc28 <_GetDevProp>

0800cc7a <LCD_GetNumColorsEx>:
 800cc7a:	2109      	movs	r1, #9
 800cc7c:	f7ff bfd4 	b.w	800cc28 <_GetDevProp>

0800cc80 <LCD_GetMirrorXEx>:
 800cc80:	210c      	movs	r1, #12
 800cc82:	f7ff bfd1 	b.w	800cc28 <_GetDevProp>

0800cc86 <LCD_GetMirrorYEx>:
 800cc86:	210d      	movs	r1, #13
 800cc88:	f7ff bfce 	b.w	800cc28 <_GetDevProp>

0800cc8c <LCD_GetSwapXYEx>:
 800cc8c:	210e      	movs	r1, #14
 800cc8e:	f7ff bfcb 	b.w	800cc28 <_GetDevProp>
	...

0800cc94 <LCD_GetNumColors>:
 800cc94:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <LCD_GetNumColors+0xc>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	7c58      	ldrb	r0, [r3, #17]
 800cc9a:	f7ff bfee 	b.w	800cc7a <LCD_GetNumColorsEx>
 800cc9e:	bf00      	nop
 800cca0:	20000034 	.word	0x20000034

0800cca4 <GUI_GetBitsPerPixelEx>:
 800cca4:	b508      	push	{r3, lr}
 800cca6:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <GUI_GetBitsPerPixelEx+0x14>)
 800cca8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ccac:	68c3      	ldr	r3, [r0, #12]
 800ccae:	2108      	movs	r1, #8
 800ccb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb2:	4798      	blx	r3
 800ccb4:	bd08      	pop	{r3, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20026d44 	.word	0x20026d44

0800ccbc <LCD_GetDevFunc>:
 800ccbc:	b508      	push	{r3, lr}
 800ccbe:	4b04      	ldr	r3, [pc, #16]	; (800ccd0 <LCD_GetDevFunc+0x14>)
 800ccc0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800ccc4:	68d2      	ldr	r2, [r2, #12]
 800ccc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ccca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cccc:	4790      	blx	r2
 800ccce:	bd08      	pop	{r3, pc}
 800ccd0:	20026d44 	.word	0x20026d44

0800ccd4 <LCD_GetPaletteEx>:
 800ccd4:	b508      	push	{r3, lr}
 800ccd6:	f002 fd39 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800ccda:	b120      	cbz	r0, 800cce6 <LCD_GetPaletteEx+0x12>
 800ccdc:	68c3      	ldr	r3, [r0, #12]
 800ccde:	2102      	movs	r1, #2
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	4798      	blx	r3
 800cce4:	bd08      	pop	{r3, pc}
 800cce6:	bd08      	pop	{r3, pc}

0800cce8 <LCD_GetPalette>:
 800cce8:	4b02      	ldr	r3, [pc, #8]	; (800ccf4 <LCD_GetPalette+0xc>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	7c58      	ldrb	r0, [r3, #17]
 800ccee:	f7ff bff1 	b.w	800ccd4 <LCD_GetPaletteEx>
 800ccf2:	bf00      	nop
 800ccf4:	20000034 	.word	0x20000034

0800ccf8 <GUI_GetpfIndex2ColorEx>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	; (800cd04 <GUI_GetpfIndex2ColorEx+0xc>)
 800ccfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	6858      	ldr	r0, [r3, #4]
 800cd02:	4770      	bx	lr
 800cd04:	20026d44 	.word	0x20026d44

0800cd08 <LCD_GetXSizeMax>:
 800cd08:	2001      	movs	r0, #1
 800cd0a:	f7ff bf9c 	b.w	800cc46 <_GetMaxValue>

0800cd0e <LCD_GetYSizeMax>:
 800cd0e:	2002      	movs	r0, #2
 800cd10:	f7ff bf99 	b.w	800cc46 <_GetMaxValue>

0800cd14 <LCD_GetVXSizeMax>:
 800cd14:	2003      	movs	r0, #3
 800cd16:	f7ff bf96 	b.w	800cc46 <_GetMaxValue>
	...

0800cd1c <LCD_SetDisplaySize>:
 800cd1c:	4b02      	ldr	r3, [pc, #8]	; (800cd28 <LCD_SetDisplaySize+0xc>)
 800cd1e:	6018      	str	r0, [r3, #0]
 800cd20:	4b02      	ldr	r3, [pc, #8]	; (800cd2c <LCD_SetDisplaySize+0x10>)
 800cd22:	6019      	str	r1, [r3, #0]
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	200267a0 	.word	0x200267a0
 800cd2c:	2002679c 	.word	0x2002679c

0800cd30 <LCD_GetXSizeDisplay>:
 800cd30:	4b01      	ldr	r3, [pc, #4]	; (800cd38 <LCD_GetXSizeDisplay+0x8>)
 800cd32:	6818      	ldr	r0, [r3, #0]
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	200267a0 	.word	0x200267a0

0800cd3c <LCD_GetYSizeDisplay>:
 800cd3c:	4b01      	ldr	r3, [pc, #4]	; (800cd44 <LCD_GetYSizeDisplay+0x8>)
 800cd3e:	6818      	ldr	r0, [r3, #0]
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	2002679c 	.word	0x2002679c

0800cd48 <LCD__GetBPP>:
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d03b      	beq.n	800cdc4 <LCD__GetBPP+0x7c>
 800cd4c:	f030 0301 	bics.w	r3, r0, #1
 800cd50:	d029      	beq.n	800cda6 <LCD__GetBPP+0x5e>
 800cd52:	f030 0303 	bics.w	r3, r0, #3
 800cd56:	d028      	beq.n	800cdaa <LCD__GetBPP+0x62>
 800cd58:	f030 0307 	bics.w	r3, r0, #7
 800cd5c:	d027      	beq.n	800cdae <LCD__GetBPP+0x66>
 800cd5e:	f030 030f 	bics.w	r3, r0, #15
 800cd62:	d026      	beq.n	800cdb2 <LCD__GetBPP+0x6a>
 800cd64:	f030 031f 	bics.w	r3, r0, #31
 800cd68:	d025      	beq.n	800cdb6 <LCD__GetBPP+0x6e>
 800cd6a:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800cd6e:	d024      	beq.n	800cdba <LCD__GetBPP+0x72>
 800cd70:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800cd74:	f023 0301 	bic.w	r3, r3, #1
 800cd78:	b30b      	cbz	r3, 800cdbe <LCD__GetBPP+0x76>
 800cd7a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800cd7e:	f023 030f 	bic.w	r3, r3, #15
 800cd82:	b1e3      	cbz	r3, 800cdbe <LCD__GetBPP+0x76>
 800cd84:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800cd88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd8c:	b1bb      	cbz	r3, 800cdbe <LCD__GetBPP+0x76>
 800cd8e:	0c03      	lsrs	r3, r0, #16
 800cd90:	041b      	lsls	r3, r3, #16
 800cd92:	b1a3      	cbz	r3, 800cdbe <LCD__GetBPP+0x76>
 800cd94:	0c83      	lsrs	r3, r0, #18
 800cd96:	049b      	lsls	r3, r3, #18
 800cd98:	b19b      	cbz	r3, 800cdc2 <LCD__GetBPP+0x7a>
 800cd9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd9e:	bf0c      	ite	eq
 800cda0:	2018      	moveq	r0, #24
 800cda2:	2020      	movne	r0, #32
 800cda4:	4770      	bx	lr
 800cda6:	2001      	movs	r0, #1
 800cda8:	4770      	bx	lr
 800cdaa:	2002      	movs	r0, #2
 800cdac:	4770      	bx	lr
 800cdae:	2003      	movs	r0, #3
 800cdb0:	4770      	bx	lr
 800cdb2:	2004      	movs	r0, #4
 800cdb4:	4770      	bx	lr
 800cdb6:	2005      	movs	r0, #5
 800cdb8:	4770      	bx	lr
 800cdba:	2008      	movs	r0, #8
 800cdbc:	4770      	bx	lr
 800cdbe:	2010      	movs	r0, #16
 800cdc0:	4770      	bx	lr
 800cdc2:	2012      	movs	r0, #18
 800cdc4:	4770      	bx	lr

0800cdc6 <LCD__GetBPPDevice>:
 800cdc6:	b508      	push	{r3, lr}
 800cdc8:	f7ff ffbe 	bl	800cd48 <LCD__GetBPP>
 800cdcc:	2801      	cmp	r0, #1
 800cdce:	d00f      	beq.n	800cdf0 <LCD__GetBPPDevice+0x2a>
 800cdd0:	1e83      	subs	r3, r0, #2
 800cdd2:	2b06      	cmp	r3, #6
 800cdd4:	d909      	bls.n	800cdea <LCD__GetBPPDevice+0x24>
 800cdd6:	f1a0 0309 	sub.w	r3, r0, #9
 800cdda:	2b07      	cmp	r3, #7
 800cddc:	d907      	bls.n	800cdee <LCD__GetBPPDevice+0x28>
 800cdde:	3811      	subs	r0, #17
 800cde0:	2810      	cmp	r0, #16
 800cde2:	bf34      	ite	cc
 800cde4:	2020      	movcc	r0, #32
 800cde6:	2000      	movcs	r0, #0
 800cde8:	bd08      	pop	{r3, pc}
 800cdea:	2008      	movs	r0, #8
 800cdec:	bd08      	pop	{r3, pc}
 800cdee:	2010      	movs	r0, #16
 800cdf0:	bd08      	pop	{r3, pc}
	...

0800cdf4 <_OnExit>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4c03      	ldr	r4, [pc, #12]	; (800ce04 <_OnExit+0x10>)
 800cdf8:	6820      	ldr	r0, [r4, #0]
 800cdfa:	f003 f9ed 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd10      	pop	{r4, pc}
 800ce04:	20026d10 	.word	0x20026d10

0800ce08 <LCD_InitColors>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4d09      	ldr	r5, [pc, #36]	; (800ce30 <LCD_InitColors+0x28>)
 800ce0c:	682c      	ldr	r4, [r5, #0]
 800ce0e:	b95c      	cbnz	r4, 800ce28 <LCD_InitColors+0x20>
 800ce10:	4b08      	ldr	r3, [pc, #32]	; (800ce34 <LCD_InitColors+0x2c>)
 800ce12:	6818      	ldr	r0, [r3, #0]
 800ce14:	0080      	lsls	r0, r0, #2
 800ce16:	f003 fb3f 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800ce1a:	6028      	str	r0, [r5, #0]
 800ce1c:	b130      	cbz	r0, 800ce2c <LCD_InitColors+0x24>
 800ce1e:	4806      	ldr	r0, [pc, #24]	; (800ce38 <LCD_InitColors+0x30>)
 800ce20:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <LCD_InitColors+0x34>)
 800ce22:	6003      	str	r3, [r0, #0]
 800ce24:	f002 fdd2 	bl	800f9cc <GUI__RegisterExit>
 800ce28:	2000      	movs	r0, #0
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	2001      	movs	r0, #1
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	20026d10 	.word	0x20026d10
 800ce34:	20000018 	.word	0x20000018
 800ce38:	200267a4 	.word	0x200267a4
 800ce3c:	0800cdf5 	.word	0x0800cdf5

0800ce40 <LCD_GetpPalConvTableUncached>:
 800ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce44:	b320      	cbz	r0, 800ce90 <LCD_GetpPalConvTableUncached+0x50>
 800ce46:	6885      	ldr	r5, [r0, #8]
 800ce48:	b1dd      	cbz	r5, 800ce82 <LCD_GetpPalConvTableUncached+0x42>
 800ce4a:	4e12      	ldr	r6, [pc, #72]	; (800ce94 <LCD_GetpPalConvTableUncached+0x54>)
 800ce4c:	6833      	ldr	r3, [r6, #0]
 800ce4e:	b1db      	cbz	r3, 800ce88 <LCD_GetpPalConvTableUncached+0x48>
 800ce50:	6803      	ldr	r3, [r0, #0]
 800ce52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce56:	dc1a      	bgt.n	800ce8e <LCD_GetpPalConvTableUncached+0x4e>
 800ce58:	4a0f      	ldr	r2, [pc, #60]	; (800ce98 <LCD_GetpPalConvTableUncached+0x58>)
 800ce5a:	6812      	ldr	r2, [r2, #0]
 800ce5c:	2400      	movs	r4, #0
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	bfb4      	ite	lt
 800ce62:	4690      	movlt	r8, r2
 800ce64:	4698      	movge	r8, r3
 800ce66:	4544      	cmp	r4, r8
 800ce68:	da08      	bge.n	800ce7c <LCD_GetpPalConvTableUncached+0x3c>
 800ce6a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800ce6e:	6837      	ldr	r7, [r6, #0]
 800ce70:	f000 fa7e 	bl	800d370 <LCD_Color2Index>
 800ce74:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800ce78:	3401      	adds	r4, #1
 800ce7a:	e7f4      	b.n	800ce66 <LCD_GetpPalConvTableUncached+0x26>
 800ce7c:	6830      	ldr	r0, [r6, #0]
 800ce7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce82:	4628      	mov	r0, r5
 800ce84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce94:	20026d10 	.word	0x20026d10
 800ce98:	20000018 	.word	0x20000018

0800ce9c <LCD_GetpPalConvTable>:
 800ce9c:	f7ff bfd0 	b.w	800ce40 <LCD_GetpPalConvTableUncached>

0800cea0 <LCD_GetpPalConvTableBM>:
 800cea0:	f7ff bfce 	b.w	800ce40 <LCD_GetpPalConvTableUncached>

0800cea4 <LCD_InitLUT>:
 800cea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	f004 fdc6 	bl	8011a38 <LCD_GetNumLayers>
 800ceac:	2400      	movs	r4, #0
 800ceae:	4680      	mov	r8, r0
 800ceb0:	4544      	cmp	r4, r8
 800ceb2:	da2c      	bge.n	800cf0e <LCD_InitLUT+0x6a>
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f002 fc49 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800ceba:	b330      	cbz	r0, 800cf0a <LCD_InitLUT+0x66>
 800cebc:	4e15      	ldr	r6, [pc, #84]	; (800cf14 <LCD_InitLUT+0x70>)
 800cebe:	6833      	ldr	r3, [r6, #0]
 800cec0:	4620      	mov	r0, r4
 800cec2:	f893 9011 	ldrb.w	r9, [r3, #17]
 800cec6:	745c      	strb	r4, [r3, #17]
 800cec8:	f7ff fed4 	bl	800cc74 <LCD_GetBitsPerPixelEx>
 800cecc:	2808      	cmp	r0, #8
 800cece:	dd03      	ble.n	800ced8 <LCD_InitLUT+0x34>
 800ced0:	6833      	ldr	r3, [r6, #0]
 800ced2:	f883 9011 	strb.w	r9, [r3, #17]
 800ced6:	e018      	b.n	800cf0a <LCD_InitLUT+0x66>
 800ced8:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <LCD_InitLUT+0x74>)
 800ceda:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cede:	691a      	ldr	r2, [r3, #16]
 800cee0:	4b0e      	ldr	r3, [pc, #56]	; (800cf1c <LCD_InitLUT+0x78>)
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d0f4      	beq.n	800ced0 <LCD_InitLUT+0x2c>
 800cee6:	4620      	mov	r0, r4
 800cee8:	f7ff fec7 	bl	800cc7a <LCD_GetNumColorsEx>
 800ceec:	2500      	movs	r5, #0
 800ceee:	4682      	mov	sl, r0
 800cef0:	4555      	cmp	r5, sl
 800cef2:	daed      	bge.n	800ced0 <LCD_InitLUT+0x2c>
 800cef4:	b2ef      	uxtb	r7, r5
 800cef6:	4638      	mov	r0, r7
 800cef8:	f000 fa4a 	bl	800d390 <LCD_Index2Color>
 800cefc:	4639      	mov	r1, r7
 800cefe:	4602      	mov	r2, r0
 800cf00:	4620      	mov	r0, r4
 800cf02:	f7ff fe49 	bl	800cb98 <LCD_SetLUTEntryEx>
 800cf06:	3501      	adds	r5, #1
 800cf08:	e7f2      	b.n	800cef0 <LCD_InitLUT+0x4c>
 800cf0a:	3401      	adds	r4, #1
 800cf0c:	e7d0      	b.n	800ceb0 <LCD_InitLUT+0xc>
 800cf0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf12:	bf00      	nop
 800cf14:	20000034 	.word	0x20000034
 800cf18:	20026d44 	.word	0x20026d44
 800cf1c:	08014394 	.word	0x08014394

0800cf20 <_SetDrawMode>:
 800cf20:	b570      	push	{r4, r5, r6, lr}
 800cf22:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <_SetDrawMode+0x24>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	7c1a      	ldrb	r2, [r3, #16]
 800cf28:	ea80 0102 	eor.w	r1, r0, r2
 800cf2c:	0749      	lsls	r1, r1, #29
 800cf2e:	d505      	bpl.n	800cf3c <_SetDrawMode+0x1c>
 800cf30:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800cf32:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cf34:	6826      	ldr	r6, [r4, #0]
 800cf36:	680d      	ldr	r5, [r1, #0]
 800cf38:	6025      	str	r5, [r4, #0]
 800cf3a:	600e      	str	r6, [r1, #0]
 800cf3c:	7418      	strb	r0, [r3, #16]
 800cf3e:	4610      	mov	r0, r2
 800cf40:	bd70      	pop	{r4, r5, r6, pc}
 800cf42:	bf00      	nop
 800cf44:	20000034 	.word	0x20000034

0800cf48 <LCD_SetDrawMode>:
 800cf48:	b508      	push	{r3, lr}
 800cf4a:	4b02      	ldr	r3, [pc, #8]	; (800cf54 <LCD_SetDrawMode+0xc>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	4798      	blx	r3
 800cf52:	bd08      	pop	{r3, pc}
 800cf54:	2000001c 	.word	0x2000001c

0800cf58 <LCD_DrawPixel>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	4b14      	ldr	r3, [pc, #80]	; (800cfac <LCD_DrawPixel+0x54>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	460a      	mov	r2, r1
 800cf60:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800cf64:	428a      	cmp	r2, r1
 800cf66:	4604      	mov	r4, r0
 800cf68:	db1e      	blt.n	800cfa8 <LCD_DrawPixel+0x50>
 800cf6a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800cf6e:	428a      	cmp	r2, r1
 800cf70:	dc1a      	bgt.n	800cfa8 <LCD_DrawPixel+0x50>
 800cf72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800cf76:	4288      	cmp	r0, r1
 800cf78:	db16      	blt.n	800cfa8 <LCD_DrawPixel+0x50>
 800cf7a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800cf7e:	4288      	cmp	r0, r1
 800cf80:	dc12      	bgt.n	800cfa8 <LCD_DrawPixel+0x50>
 800cf82:	7c19      	ldrb	r1, [r3, #16]
 800cf84:	7c58      	ldrb	r0, [r3, #17]
 800cf86:	f011 0f01 	tst.w	r1, #1
 800cf8a:	4909      	ldr	r1, [pc, #36]	; (800cfb0 <LCD_DrawPixel+0x58>)
 800cf8c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800cf90:	d004      	beq.n	800cf9c <LCD_DrawPixel+0x44>
 800cf92:	68c3      	ldr	r3, [r0, #12]
 800cf94:	4621      	mov	r1, r4
 800cf96:	69db      	ldr	r3, [r3, #28]
 800cf98:	4798      	blx	r3
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	68c1      	ldr	r1, [r0, #12]
 800cf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa0:	698d      	ldr	r5, [r1, #24]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	47a8      	blx	r5
 800cfa8:	bd38      	pop	{r3, r4, r5, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000034 	.word	0x20000034
 800cfb0:	20026d44 	.word	0x20026d44

0800cfb4 <LCD_DrawHLine>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <LCD_DrawHLine+0x44>)
 800cfb8:	681c      	ldr	r4, [r3, #0]
 800cfba:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800cfbe:	4299      	cmp	r1, r3
 800cfc0:	460d      	mov	r5, r1
 800cfc2:	db17      	blt.n	800cff4 <LCD_DrawHLine+0x40>
 800cfc4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800cfc8:	4299      	cmp	r1, r3
 800cfca:	dc13      	bgt.n	800cff4 <LCD_DrawHLine+0x40>
 800cfcc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800cfd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd4:	4288      	cmp	r0, r1
 800cfd6:	bfa8      	it	ge
 800cfd8:	4601      	movge	r1, r0
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	bfb8      	it	lt
 800cfde:	4613      	movlt	r3, r2
 800cfe0:	428b      	cmp	r3, r1
 800cfe2:	db07      	blt.n	800cff4 <LCD_DrawHLine+0x40>
 800cfe4:	7c60      	ldrb	r0, [r4, #17]
 800cfe6:	4a05      	ldr	r2, [pc, #20]	; (800cffc <LCD_DrawHLine+0x48>)
 800cfe8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800cfec:	68c2      	ldr	r2, [r0, #12]
 800cfee:	6894      	ldr	r4, [r2, #8]
 800cff0:	462a      	mov	r2, r5
 800cff2:	47a0      	blx	r4
 800cff4:	bd38      	pop	{r3, r4, r5, pc}
 800cff6:	bf00      	nop
 800cff8:	20000034 	.word	0x20000034
 800cffc:	20026d44 	.word	0x20026d44

0800d000 <LCD_DrawVLine>:
 800d000:	b538      	push	{r3, r4, r5, lr}
 800d002:	4b10      	ldr	r3, [pc, #64]	; (800d044 <LCD_DrawVLine+0x44>)
 800d004:	681c      	ldr	r4, [r3, #0]
 800d006:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d00a:	4605      	mov	r5, r0
 800d00c:	429d      	cmp	r5, r3
 800d00e:	4610      	mov	r0, r2
 800d010:	db17      	blt.n	800d042 <LCD_DrawVLine+0x42>
 800d012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d016:	429d      	cmp	r5, r3
 800d018:	dc13      	bgt.n	800d042 <LCD_DrawVLine+0x42>
 800d01a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d01e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800d022:	4291      	cmp	r1, r2
 800d024:	bfa8      	it	ge
 800d026:	460a      	movge	r2, r1
 800d028:	4298      	cmp	r0, r3
 800d02a:	bfb8      	it	lt
 800d02c:	4603      	movlt	r3, r0
 800d02e:	4293      	cmp	r3, r2
 800d030:	db07      	blt.n	800d042 <LCD_DrawVLine+0x42>
 800d032:	7c60      	ldrb	r0, [r4, #17]
 800d034:	4904      	ldr	r1, [pc, #16]	; (800d048 <LCD_DrawVLine+0x48>)
 800d036:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800d03a:	68c1      	ldr	r1, [r0, #12]
 800d03c:	68cc      	ldr	r4, [r1, #12]
 800d03e:	4629      	mov	r1, r5
 800d040:	47a0      	blx	r4
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	20000034 	.word	0x20000034
 800d048:	20026d44 	.word	0x20026d44

0800d04c <LCD_FillRect>:
 800d04c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d04e:	460e      	mov	r6, r1
 800d050:	4912      	ldr	r1, [pc, #72]	; (800d09c <LCD_FillRect+0x50>)
 800d052:	680c      	ldr	r4, [r1, #0]
 800d054:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800d058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d05c:	4288      	cmp	r0, r1
 800d05e:	bfa8      	it	ge
 800d060:	4601      	movge	r1, r0
 800d062:	42aa      	cmp	r2, r5
 800d064:	bfb8      	it	lt
 800d066:	4615      	movlt	r5, r2
 800d068:	428d      	cmp	r5, r1
 800d06a:	db14      	blt.n	800d096 <LCD_FillRect+0x4a>
 800d06c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800d070:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800d074:	4296      	cmp	r6, r2
 800d076:	bfa8      	it	ge
 800d078:	4632      	movge	r2, r6
 800d07a:	4283      	cmp	r3, r0
 800d07c:	bfa8      	it	ge
 800d07e:	4603      	movge	r3, r0
 800d080:	4293      	cmp	r3, r2
 800d082:	db08      	blt.n	800d096 <LCD_FillRect+0x4a>
 800d084:	7c64      	ldrb	r4, [r4, #17]
 800d086:	4806      	ldr	r0, [pc, #24]	; (800d0a0 <LCD_FillRect+0x54>)
 800d088:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800d08c:	68c4      	ldr	r4, [r0, #12]
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	6924      	ldr	r4, [r4, #16]
 800d092:	462b      	mov	r3, r5
 800d094:	47a0      	blx	r4
 800d096:	b002      	add	sp, #8
 800d098:	bd70      	pop	{r4, r5, r6, pc}
 800d09a:	bf00      	nop
 800d09c:	20000034 	.word	0x20000034
 800d0a0:	20026d44 	.word	0x20026d44

0800d0a4 <LCD_DrawBitmap>:
 800d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800d2b8 <LCD_DrawBitmap+0x214>
 800d0ac:	b091      	sub	sp, #68	; 0x44
 800d0ae:	f8dc 9000 	ldr.w	r9, [ip]
 800d0b2:	9207      	str	r2, [sp, #28]
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	4688      	mov	r8, r1
 800d0b8:	469b      	mov	fp, r3
 800d0ba:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d0bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d0be:	f1b9 0f00 	cmp.w	r9, #0
 800d0c2:	d00c      	beq.n	800d0de <LCD_DrawBitmap+0x3a>
 800d0c4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d0c6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d0c8:	9500      	str	r5, [sp, #0]
 800d0ca:	9701      	str	r7, [sp, #4]
 800d0cc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d0ce:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800d0d0:	9602      	str	r6, [sp, #8]
 800d0d2:	9503      	str	r5, [sp, #12]
 800d0d4:	9404      	str	r4, [sp, #16]
 800d0d6:	9705      	str	r7, [sp, #20]
 800d0d8:	f8d9 4000 	ldr.w	r4, [r9]
 800d0dc:	e081      	b.n	800d1e2 <LCD_DrawBitmap+0x13e>
 800d0de:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d0e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d0e2:	ea47 0300 	orr.w	r3, r7, r0
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d17d      	bne.n	800d1e6 <LCD_DrawBitmap+0x142>
 800d0ea:	4b71      	ldr	r3, [pc, #452]	; (800d2b0 <LCD_DrawBitmap+0x20c>)
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800d0f2:	1a53      	subs	r3, r2, r1
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	dd08      	ble.n	800d10a <LCD_DrawBitmap+0x66>
 800d0f8:	ebc3 010b 	rsb	r1, r3, fp
 800d0fc:	2900      	cmp	r1, #0
 800d0fe:	f340 80d4 	ble.w	800d2aa <LCD_DrawBitmap+0x206>
 800d102:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d104:	fb07 4403 	mla	r4, r7, r3, r4
 800d108:	e001      	b.n	800d10e <LCD_DrawBitmap+0x6a>
 800d10a:	4659      	mov	r1, fp
 800d10c:	4642      	mov	r2, r8
 800d10e:	44d8      	add	r8, fp
 800d110:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800d114:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d118:	ebc3 0808 	rsb	r8, r3, r8
 800d11c:	f1b8 0f00 	cmp.w	r8, #0
 800d120:	dd04      	ble.n	800d12c <LCD_DrawBitmap+0x88>
 800d122:	ebc8 0101 	rsb	r1, r8, r1
 800d126:	2900      	cmp	r1, #0
 800d128:	f340 80bf 	ble.w	800d2aa <LCD_DrawBitmap+0x206>
 800d12c:	9b07      	ldr	r3, [sp, #28]
 800d12e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800d132:	442b      	add	r3, r5
 800d134:	3b01      	subs	r3, #1
 800d136:	ebcc 0303 	rsb	r3, ip, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dd02      	ble.n	800d144 <LCD_DrawBitmap+0xa0>
 800d13e:	9f07      	ldr	r7, [sp, #28]
 800d140:	1aff      	subs	r7, r7, r3
 800d142:	9707      	str	r7, [sp, #28]
 800d144:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800d148:	4565      	cmp	r5, ip
 800d14a:	da33      	bge.n	800d1b4 <LCD_DrawBitmap+0x110>
 800d14c:	9f07      	ldr	r7, [sp, #28]
 800d14e:	ebc5 030c 	rsb	r3, r5, ip
 800d152:	1aff      	subs	r7, r7, r3
 800d154:	2e08      	cmp	r6, #8
 800d156:	9707      	str	r7, [sp, #28]
 800d158:	d027      	beq.n	800d1aa <LCD_DrawBitmap+0x106>
 800d15a:	dc0d      	bgt.n	800d178 <LCD_DrawBitmap+0xd4>
 800d15c:	2e02      	cmp	r6, #2
 800d15e:	d014      	beq.n	800d18a <LCD_DrawBitmap+0xe6>
 800d160:	2e04      	cmp	r6, #4
 800d162:	d01a      	beq.n	800d19a <LCD_DrawBitmap+0xf6>
 800d164:	2e01      	cmp	r6, #1
 800d166:	d126      	bne.n	800d1b6 <LCD_DrawBitmap+0x112>
 800d168:	f023 0c07 	bic.w	ip, r3, #7
 800d16c:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800d170:	4465      	add	r5, ip
 800d172:	f003 0307 	and.w	r3, r3, #7
 800d176:	e01e      	b.n	800d1b6 <LCD_DrawBitmap+0x112>
 800d178:	2e18      	cmp	r6, #24
 800d17a:	d018      	beq.n	800d1ae <LCD_DrawBitmap+0x10a>
 800d17c:	2e20      	cmp	r6, #32
 800d17e:	d016      	beq.n	800d1ae <LCD_DrawBitmap+0x10a>
 800d180:	2e10      	cmp	r6, #16
 800d182:	d118      	bne.n	800d1b6 <LCD_DrawBitmap+0x112>
 800d184:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800d188:	e013      	b.n	800d1b2 <LCD_DrawBitmap+0x10e>
 800d18a:	f023 0c03 	bic.w	ip, r3, #3
 800d18e:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800d192:	4465      	add	r5, ip
 800d194:	f003 0303 	and.w	r3, r3, #3
 800d198:	e00d      	b.n	800d1b6 <LCD_DrawBitmap+0x112>
 800d19a:	f023 0c01 	bic.w	ip, r3, #1
 800d19e:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800d1a2:	4465      	add	r5, ip
 800d1a4:	f003 0301 	and.w	r3, r3, #1
 800d1a8:	e005      	b.n	800d1b6 <LCD_DrawBitmap+0x112>
 800d1aa:	441c      	add	r4, r3
 800d1ac:	e001      	b.n	800d1b2 <LCD_DrawBitmap+0x10e>
 800d1ae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800d1b2:	4665      	mov	r5, ip
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	9f07      	ldr	r7, [sp, #28]
 800d1b8:	2f00      	cmp	r7, #0
 800d1ba:	dd76      	ble.n	800d2aa <LCD_DrawBitmap+0x206>
 800d1bc:	f890 e011 	ldrb.w	lr, [r0, #17]
 800d1c0:	483c      	ldr	r0, [pc, #240]	; (800d2b4 <LCD_DrawBitmap+0x210>)
 800d1c2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d1c4:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800d1c8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800d1cc:	9403      	str	r4, [sp, #12]
 800d1ce:	e88d 0042 	stmia.w	sp, {r1, r6}
 800d1d2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800d1d4:	9304      	str	r3, [sp, #16]
 800d1d6:	9702      	str	r7, [sp, #8]
 800d1d8:	9405      	str	r4, [sp, #20]
 800d1da:	f8de 4004 	ldr.w	r4, [lr, #4]
 800d1de:	9b07      	ldr	r3, [sp, #28]
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	47a0      	blx	r4
 800d1e4:	e061      	b.n	800d2aa <LCD_DrawBitmap+0x206>
 800d1e6:	f1c6 0708 	rsb	r7, r6, #8
 800d1ea:	970e      	str	r7, [sp, #56]	; 0x38
 800d1ec:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800d1f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d1f2:	455f      	cmp	r7, fp
 800d1f4:	da59      	bge.n	800d2aa <LCD_DrawBitmap+0x206>
 800d1f6:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <LCD_DrawBitmap+0x20c>)
 800d1f8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4447      	add	r7, r8
 800d1fe:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800d202:	970c      	str	r7, [sp, #48]	; 0x30
 800d204:	3f01      	subs	r7, #1
 800d206:	4297      	cmp	r7, r2
 800d208:	970d      	str	r7, [sp, #52]	; 0x34
 800d20a:	db46      	blt.n	800d29a <LCD_DrawBitmap+0x1f6>
 800d20c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d210:	4598      	cmp	r8, r3
 800d212:	dc42      	bgt.n	800d29a <LCD_DrawBitmap+0x1f6>
 800d214:	f04f 0a00 	mov.w	sl, #0
 800d218:	940b      	str	r4, [sp, #44]	; 0x2c
 800d21a:	46ac      	mov	ip, r5
 800d21c:	4657      	mov	r7, sl
 800d21e:	9807      	ldr	r0, [sp, #28]
 800d220:	4287      	cmp	r7, r0
 800d222:	da3a      	bge.n	800d29a <LCD_DrawBitmap+0x1f6>
 800d224:	f1ba 0f00 	cmp.w	sl, #0
 800d228:	d106      	bne.n	800d238 <LCD_DrawBitmap+0x194>
 800d22a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d22c:	f890 9000 	ldrb.w	r9, [r0]
 800d230:	3001      	adds	r0, #1
 800d232:	900b      	str	r0, [sp, #44]	; 0x2c
 800d234:	f04f 0a08 	mov.w	sl, #8
 800d238:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d23a:	4a1d      	ldr	r2, [pc, #116]	; (800d2b0 <LCD_DrawBitmap+0x20c>)
 800d23c:	fa49 f301 	asr.w	r3, r9, r1
 800d240:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800d244:	fa09 f906 	lsl.w	r9, r9, r6
 800d248:	fa5f f989 	uxtb.w	r9, r9
 800d24c:	ebc6 0a0a 	rsb	sl, r6, sl
 800d250:	d103      	bne.n	800d25a <LCD_DrawBitmap+0x1b6>
 800d252:	6810      	ldr	r0, [r2, #0]
 800d254:	7c00      	ldrb	r0, [r0, #16]
 800d256:	0780      	lsls	r0, r0, #30
 800d258:	d41b      	bmi.n	800d292 <LCD_DrawBitmap+0x1ee>
 800d25a:	6812      	ldr	r2, [r2, #0]
 800d25c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d25e:	6810      	ldr	r0, [r2, #0]
 800d260:	900f      	str	r0, [sp, #60]	; 0x3c
 800d262:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800d264:	b110      	cbz	r0, 800d26c <LCD_DrawBitmap+0x1c8>
 800d266:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d26a:	e000      	b.n	800d26e <LCD_DrawBitmap+0x1ca>
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d270:	6013      	str	r3, [r2, #0]
 800d272:	1e4a      	subs	r2, r1, #1
 800d274:	4462      	add	r2, ip
 800d276:	4660      	mov	r0, ip
 800d278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d27a:	f8cd c020 	str.w	ip, [sp, #32]
 800d27e:	4641      	mov	r1, r8
 800d280:	f7ff fee4 	bl	800d04c <LCD_FillRect>
 800d284:	4b0a      	ldr	r3, [pc, #40]	; (800d2b0 <LCD_DrawBitmap+0x20c>)
 800d286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800d28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d290:	601a      	str	r2, [r3, #0]
 800d292:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d294:	3701      	adds	r7, #1
 800d296:	449c      	add	ip, r3
 800d298:	e7c1      	b.n	800d21e <LCD_DrawBitmap+0x17a>
 800d29a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d29c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d2a0:	3701      	adds	r7, #1
 800d2a2:	970a      	str	r7, [sp, #40]	; 0x28
 800d2a4:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800d2a6:	443c      	add	r4, r7
 800d2a8:	e7a2      	b.n	800d1f0 <LCD_DrawBitmap+0x14c>
 800d2aa:	b011      	add	sp, #68	; 0x44
 800d2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b0:	20000034 	.word	0x20000034
 800d2b4:	20026d44 	.word	0x20026d44
 800d2b8:	20026d18 	.word	0x20026d18

0800d2bc <LCD_SetClipRectMax>:
 800d2bc:	b508      	push	{r3, lr}
 800d2be:	4b05      	ldr	r3, [pc, #20]	; (800d2d4 <LCD_SetClipRectMax+0x18>)
 800d2c0:	6819      	ldr	r1, [r3, #0]
 800d2c2:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <LCD_SetClipRectMax+0x1c>)
 800d2c4:	7c4a      	ldrb	r2, [r1, #17]
 800d2c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d2ca:	68c3      	ldr	r3, [r0, #12]
 800d2cc:	3108      	adds	r1, #8
 800d2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d0:	4798      	blx	r3
 800d2d2:	bd08      	pop	{r3, pc}
 800d2d4:	20000034 	.word	0x20000034
 800d2d8:	20026d44 	.word	0x20026d44

0800d2dc <emWin_LCD_Init>:
 800d2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2de:	f7ff ffed 	bl	800d2bc <LCD_SetClipRectMax>
 800d2e2:	f7ff fd91 	bl	800ce08 <LCD_InitColors>
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d13d      	bne.n	800d368 <emWin_LCD_Init+0x8c>
 800d2ec:	4605      	mov	r5, r0
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f002 fa2c 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800d2f4:	9001      	str	r0, [sp, #4]
 800d2f6:	b148      	cbz	r0, 800d30c <emWin_LCD_Init+0x30>
 800d2f8:	68c3      	ldr	r3, [r0, #12]
 800d2fa:	210c      	movs	r1, #12
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fe:	a801      	add	r0, sp, #4
 800d300:	4798      	blx	r3
 800d302:	4603      	mov	r3, r0
 800d304:	b370      	cbz	r0, 800d364 <emWin_LCD_Init+0x88>
 800d306:	9801      	ldr	r0, [sp, #4]
 800d308:	4798      	blx	r3
 800d30a:	4304      	orrs	r4, r0
 800d30c:	3501      	adds	r5, #1
 800d30e:	2d02      	cmp	r5, #2
 800d310:	d1ed      	bne.n	800d2ee <emWin_LCD_Init+0x12>
 800d312:	bb4c      	cbnz	r4, 800d368 <emWin_LCD_Init+0x8c>
 800d314:	f7ff fdc6 	bl	800cea4 <LCD_InitLUT>
 800d318:	2401      	movs	r4, #1
 800d31a:	4620      	mov	r0, r4
 800d31c:	f002 fa16 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800d320:	9001      	str	r0, [sp, #4]
 800d322:	b1d0      	cbz	r0, 800d35a <emWin_LCD_Init+0x7e>
 800d324:	4620      	mov	r0, r4
 800d326:	f001 fa9f 	bl	800e868 <GUI_SelectLayer>
 800d32a:	2004      	movs	r0, #4
 800d32c:	f7ff fe0c 	bl	800cf48 <LCD_SetDrawMode>
 800d330:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800d334:	2000      	movs	r0, #0
 800d336:	4601      	mov	r1, r0
 800d338:	4613      	mov	r3, r2
 800d33a:	f7ff fe87 	bl	800d04c <LCD_FillRect>
 800d33e:	2000      	movs	r0, #0
 800d340:	f7ff fe02 	bl	800cf48 <LCD_SetDrawMode>
 800d344:	a802      	add	r0, sp, #8
 800d346:	210e      	movs	r1, #14
 800d348:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d350:	4798      	blx	r3
 800d352:	4603      	mov	r3, r0
 800d354:	b108      	cbz	r0, 800d35a <emWin_LCD_Init+0x7e>
 800d356:	9801      	ldr	r0, [sp, #4]
 800d358:	4798      	blx	r3
 800d35a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 800d35e:	d2dc      	bcs.n	800d31a <emWin_LCD_Init+0x3e>
 800d360:	2000      	movs	r0, #0
 800d362:	e002      	b.n	800d36a <emWin_LCD_Init+0x8e>
 800d364:	2001      	movs	r0, #1
 800d366:	e000      	b.n	800d36a <emWin_LCD_Init+0x8e>
 800d368:	4620      	mov	r0, r4
 800d36a:	b003      	add	sp, #12
 800d36c:	bd30      	pop	{r4, r5, pc}
	...

0800d370 <LCD_Color2Index>:
 800d370:	b508      	push	{r3, lr}
 800d372:	4b05      	ldr	r3, [pc, #20]	; (800d388 <LCD_Color2Index+0x18>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	7c5a      	ldrb	r2, [r3, #17]
 800d378:	4b04      	ldr	r3, [pc, #16]	; (800d38c <LCD_Color2Index+0x1c>)
 800d37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4798      	blx	r3
 800d384:	bd08      	pop	{r3, pc}
 800d386:	bf00      	nop
 800d388:	20000034 	.word	0x20000034
 800d38c:	20026d44 	.word	0x20026d44

0800d390 <LCD_Index2Color>:
 800d390:	b508      	push	{r3, lr}
 800d392:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <LCD_Index2Color+0x18>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	7c5a      	ldrb	r2, [r3, #17]
 800d398:	4b04      	ldr	r3, [pc, #16]	; (800d3ac <LCD_Index2Color+0x1c>)
 800d39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	4798      	blx	r3
 800d3a4:	bd08      	pop	{r3, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000034 	.word	0x20000034
 800d3ac:	20026d44 	.word	0x20026d44

0800d3b0 <LCD_SetColorIndex>:
 800d3b0:	4b04      	ldr	r3, [pc, #16]	; (800d3c4 <LCD_SetColorIndex+0x14>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	7c1a      	ldrb	r2, [r3, #16]
 800d3b6:	0752      	lsls	r2, r2, #29
 800d3b8:	bf4c      	ite	mi
 800d3ba:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800d3bc:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800d3be:	6018      	str	r0, [r3, #0]
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	20000034 	.word	0x20000034

0800d3c8 <_SetColor>:
 800d3c8:	b508      	push	{r3, lr}
 800d3ca:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <_SetColor+0x1c>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d3d0:	4281      	cmp	r1, r0
 800d3d2:	d006      	beq.n	800d3e2 <_SetColor+0x1a>
 800d3d4:	6318      	str	r0, [r3, #48]	; 0x30
 800d3d6:	f7ff ffcb 	bl	800d370 <LCD_Color2Index>
 800d3da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d3de:	f7ff bfe7 	b.w	800d3b0 <LCD_SetColorIndex>
 800d3e2:	bd08      	pop	{r3, pc}
 800d3e4:	20000034 	.word	0x20000034

0800d3e8 <LCD_SetBkColorIndex>:
 800d3e8:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <LCD_SetBkColorIndex+0x14>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	7c1a      	ldrb	r2, [r3, #16]
 800d3ee:	0752      	lsls	r2, r2, #29
 800d3f0:	bf4c      	ite	mi
 800d3f2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800d3f4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800d3f6:	6018      	str	r0, [r3, #0]
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	20000034 	.word	0x20000034

0800d400 <_SetBkColor>:
 800d400:	b508      	push	{r3, lr}
 800d402:	4b06      	ldr	r3, [pc, #24]	; (800d41c <_SetBkColor+0x1c>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d408:	4281      	cmp	r1, r0
 800d40a:	d006      	beq.n	800d41a <_SetBkColor+0x1a>
 800d40c:	6358      	str	r0, [r3, #52]	; 0x34
 800d40e:	f7ff ffaf 	bl	800d370 <LCD_Color2Index>
 800d412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d416:	f7ff bfe7 	b.w	800d3e8 <LCD_SetBkColorIndex>
 800d41a:	bd08      	pop	{r3, pc}
 800d41c:	20000034 	.word	0x20000034

0800d420 <LCD_SetBkColor>:
 800d420:	b508      	push	{r3, lr}
 800d422:	4b02      	ldr	r3, [pc, #8]	; (800d42c <LCD_SetBkColor+0xc>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	4798      	blx	r3
 800d42a:	bd08      	pop	{r3, pc}
 800d42c:	2000001c 	.word	0x2000001c

0800d430 <LCD_SetColor>:
 800d430:	b508      	push	{r3, lr}
 800d432:	4b02      	ldr	r3, [pc, #8]	; (800d43c <LCD_SetColor+0xc>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4798      	blx	r3
 800d43a:	bd08      	pop	{r3, pc}
 800d43c:	2000001c 	.word	0x2000001c

0800d440 <GUI__memset>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	b12a      	cbz	r2, 800d450 <GUI__memset+0x10>
 800d444:	0783      	lsls	r3, r0, #30
 800d446:	d003      	beq.n	800d450 <GUI__memset+0x10>
 800d448:	f800 1b01 	strb.w	r1, [r0], #1
 800d44c:	3a01      	subs	r2, #1
 800d44e:	e7f8      	b.n	800d442 <GUI__memset+0x2>
 800d450:	0893      	lsrs	r3, r2, #2
 800d452:	d101      	bne.n	800d458 <GUI__memset+0x18>
 800d454:	4402      	add	r2, r0
 800d456:	e017      	b.n	800d488 <GUI__memset+0x48>
 800d458:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800d45c:	f002 0203 	and.w	r2, r2, #3
 800d460:	434c      	muls	r4, r1
 800d462:	2b03      	cmp	r3, #3
 800d464:	4605      	mov	r5, r0
 800d466:	dd06      	ble.n	800d476 <GUI__memset+0x36>
 800d468:	6004      	str	r4, [r0, #0]
 800d46a:	6044      	str	r4, [r0, #4]
 800d46c:	6084      	str	r4, [r0, #8]
 800d46e:	60c4      	str	r4, [r0, #12]
 800d470:	3b04      	subs	r3, #4
 800d472:	3010      	adds	r0, #16
 800d474:	e7f5      	b.n	800d462 <GUI__memset+0x22>
 800d476:	461e      	mov	r6, r3
 800d478:	b11b      	cbz	r3, 800d482 <GUI__memset+0x42>
 800d47a:	f845 4b04 	str.w	r4, [r5], #4
 800d47e:	3b01      	subs	r3, #1
 800d480:	e7fa      	b.n	800d478 <GUI__memset+0x38>
 800d482:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800d486:	e7e5      	b.n	800d454 <GUI__memset+0x14>
 800d488:	4290      	cmp	r0, r2
 800d48a:	d002      	beq.n	800d492 <GUI__memset+0x52>
 800d48c:	f800 1b01 	strb.w	r1, [r0], #1
 800d490:	e7fa      	b.n	800d488 <GUI__memset+0x48>
 800d492:	bd70      	pop	{r4, r5, r6, pc}

0800d494 <GUI__ManageCacheEx>:
 800d494:	2801      	cmp	r0, #1
 800d496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d498:	4604      	mov	r4, r0
 800d49a:	460d      	mov	r5, r1
 800d49c:	dc65      	bgt.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d49e:	4b34      	ldr	r3, [pc, #208]	; (800d570 <GUI__ManageCacheEx+0xdc>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	b103      	cbz	r3, 800d4a6 <GUI__ManageCacheEx+0x12>
 800d4a4:	4798      	blx	r3
 800d4a6:	2d01      	cmp	r5, #1
 800d4a8:	d004      	beq.n	800d4b4 <GUI__ManageCacheEx+0x20>
 800d4aa:	2d02      	cmp	r5, #2
 800d4ac:	d021      	beq.n	800d4f2 <GUI__ManageCacheEx+0x5e>
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	d15b      	bne.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d4b2:	e035      	b.n	800d520 <GUI__ManageCacheEx+0x8c>
 800d4b4:	4e2f      	ldr	r6, [pc, #188]	; (800d574 <GUI__ManageCacheEx+0xe0>)
 800d4b6:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800d4ba:	b9b7      	cbnz	r7, 800d4ea <GUI__ManageCacheEx+0x56>
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f002 f945 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800d4c2:	9001      	str	r0, [sp, #4]
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d050      	beq.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d4c8:	68c3      	ldr	r3, [r0, #12]
 800d4ca:	210d      	movs	r1, #13
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	a801      	add	r0, sp, #4
 800d4d0:	4798      	blx	r3
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d048      	beq.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d4d8:	9801      	ldr	r0, [sp, #4]
 800d4da:	4629      	mov	r1, r5
 800d4dc:	4798      	blx	r3
 800d4de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800d4e8:	e018      	b.n	800d51c <GUI__ManageCacheEx+0x88>
 800d4ea:	3701      	adds	r7, #1
 800d4ec:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800d4f0:	e03b      	b.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f002 f92a 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800d4f8:	9001      	str	r0, [sp, #4]
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d035      	beq.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d4fe:	68c3      	ldr	r3, [r0, #12]
 800d500:	210d      	movs	r1, #13
 800d502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d504:	a801      	add	r0, sp, #4
 800d506:	4798      	blx	r3
 800d508:	4604      	mov	r4, r0
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d02d      	beq.n	800d56a <GUI__ManageCacheEx+0xd6>
 800d50e:	4b1a      	ldr	r3, [pc, #104]	; (800d578 <GUI__ManageCacheEx+0xe4>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	b103      	cbz	r3, 800d516 <GUI__ManageCacheEx+0x82>
 800d514:	4798      	blx	r3
 800d516:	9801      	ldr	r0, [sp, #4]
 800d518:	2102      	movs	r1, #2
 800d51a:	47a0      	blx	r4
 800d51c:	2000      	movs	r0, #0
 800d51e:	e025      	b.n	800d56c <GUI__ManageCacheEx+0xd8>
 800d520:	4d14      	ldr	r5, [pc, #80]	; (800d574 <GUI__ManageCacheEx+0xe0>)
 800d522:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d001      	beq.n	800d52e <GUI__ManageCacheEx+0x9a>
 800d52a:	2001      	movs	r0, #1
 800d52c:	e015      	b.n	800d55a <GUI__ManageCacheEx+0xc6>
 800d52e:	4620      	mov	r0, r4
 800d530:	f002 f90c 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800d534:	9001      	str	r0, [sp, #4]
 800d536:	2800      	cmp	r0, #0
 800d538:	d0f7      	beq.n	800d52a <GUI__ManageCacheEx+0x96>
 800d53a:	68c3      	ldr	r3, [r0, #12]
 800d53c:	210d      	movs	r1, #13
 800d53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d540:	a801      	add	r0, sp, #4
 800d542:	4798      	blx	r3
 800d544:	4606      	mov	r6, r0
 800d546:	2800      	cmp	r0, #0
 800d548:	d0ef      	beq.n	800d52a <GUI__ManageCacheEx+0x96>
 800d54a:	4b0b      	ldr	r3, [pc, #44]	; (800d578 <GUI__ManageCacheEx+0xe4>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	b103      	cbz	r3, 800d552 <GUI__ManageCacheEx+0xbe>
 800d550:	4798      	blx	r3
 800d552:	9801      	ldr	r0, [sp, #4]
 800d554:	2100      	movs	r1, #0
 800d556:	47b0      	blx	r6
 800d558:	2000      	movs	r0, #0
 800d55a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	bf18      	it	ne
 800d562:	3b01      	subne	r3, #1
 800d564:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800d568:	e000      	b.n	800d56c <GUI__ManageCacheEx+0xd8>
 800d56a:	2001      	movs	r0, #1
 800d56c:	b003      	add	sp, #12
 800d56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d570:	200267b8 	.word	0x200267b8
 800d574:	200267b0 	.word	0x200267b0
 800d578:	200267ac 	.word	0x200267ac

0800d57c <GUI__ManageCache>:
 800d57c:	4b02      	ldr	r3, [pc, #8]	; (800d588 <GUI__ManageCache+0xc>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4601      	mov	r1, r0
 800d582:	7c58      	ldrb	r0, [r3, #17]
 800d584:	f7ff bf86 	b.w	800d494 <GUI__ManageCacheEx>
 800d588:	20000034 	.word	0x20000034

0800d58c <GUI__IntersectRects>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	f9b2 3000 	ldrsh.w	r3, [r2]
 800d592:	f9b1 4000 	ldrsh.w	r4, [r1]
 800d596:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d59a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800d59e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800d5a2:	429c      	cmp	r4, r3
 800d5a4:	bfb8      	it	lt
 800d5a6:	461c      	movlt	r4, r3
 800d5a8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800d5ac:	429d      	cmp	r5, r3
 800d5ae:	bfa8      	it	ge
 800d5b0:	462b      	movge	r3, r5
 800d5b2:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800d5b6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d5ba:	42ae      	cmp	r6, r5
 800d5bc:	bfb8      	it	lt
 800d5be:	4635      	movlt	r5, r6
 800d5c0:	b2a4      	uxth	r4, r4
 800d5c2:	b2ad      	uxth	r5, r5
 800d5c4:	4291      	cmp	r1, r2
 800d5c6:	bfb8      	it	lt
 800d5c8:	460a      	movlt	r2, r1
 800d5ca:	8004      	strh	r4, [r0, #0]
 800d5cc:	8085      	strh	r5, [r0, #4]
 800d5ce:	b224      	sxth	r4, r4
 800d5d0:	b22d      	sxth	r5, r5
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	b292      	uxth	r2, r2
 800d5d6:	42a5      	cmp	r5, r4
 800d5d8:	8043      	strh	r3, [r0, #2]
 800d5da:	80c2      	strh	r2, [r0, #6]
 800d5dc:	db06      	blt.n	800d5ec <GUI__IntersectRects+0x60>
 800d5de:	b210      	sxth	r0, r2
 800d5e0:	b21b      	sxth	r3, r3
 800d5e2:	4298      	cmp	r0, r3
 800d5e4:	bfb4      	ite	lt
 800d5e6:	2000      	movlt	r0, #0
 800d5e8:	2001      	movge	r0, #1
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}

0800d5f0 <GUI__IntersectRect>:
 800d5f0:	880b      	ldrh	r3, [r1, #0]
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	f9b0 4000 	ldrsh.w	r4, [r0]
 800d5f8:	b21a      	sxth	r2, r3
 800d5fa:	4294      	cmp	r4, r2
 800d5fc:	bfb8      	it	lt
 800d5fe:	8003      	strhlt	r3, [r0, #0]
 800d600:	884b      	ldrh	r3, [r1, #2]
 800d602:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800d606:	b21a      	sxth	r2, r3
 800d608:	4294      	cmp	r4, r2
 800d60a:	bfb8      	it	lt
 800d60c:	8043      	strhlt	r3, [r0, #2]
 800d60e:	888b      	ldrh	r3, [r1, #4]
 800d610:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800d614:	b21a      	sxth	r2, r3
 800d616:	4294      	cmp	r4, r2
 800d618:	bfc8      	it	gt
 800d61a:	8083      	strhgt	r3, [r0, #4]
 800d61c:	88cb      	ldrh	r3, [r1, #6]
 800d61e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d622:	b21a      	sxth	r2, r3
 800d624:	4291      	cmp	r1, r2
 800d626:	bfc8      	it	gt
 800d628:	80c3      	strhgt	r3, [r0, #6]
 800d62a:	bd10      	pop	{r4, pc}

0800d62c <GUI__MixColors>:
 800d62c:	f001 437f 	and.w	r3, r1, #4278190080	; 0xff000000
 800d630:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d636:	d027      	beq.n	800d688 <GUI__MixColors+0x5c>
 800d638:	43d3      	mvns	r3, r2
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	b2cd      	uxtb	r5, r1
 800d63e:	b2c6      	uxtb	r6, r0
 800d640:	435d      	muls	r5, r3
 800d642:	fb02 5506 	mla	r5, r2, r6, r5
 800d646:	f401 467f 	and.w	r6, r1, #65280	; 0xff00
 800d64a:	f400 447f 	and.w	r4, r0, #65280	; 0xff00
 800d64e:	435e      	muls	r6, r3
 800d650:	fb02 6604 	mla	r6, r2, r4, r6
 800d654:	f401 047f 	and.w	r4, r1, #16711680	; 0xff0000
 800d658:	f400 077f 	and.w	r7, r0, #16711680	; 0xff0000
 800d65c:	435c      	muls	r4, r3
 800d65e:	0e09      	lsrs	r1, r1, #24
 800d660:	0e00      	lsrs	r0, r0, #24
 800d662:	fb02 4407 	mla	r4, r2, r7, r4
 800d666:	434b      	muls	r3, r1
 800d668:	0a36      	lsrs	r6, r6, #8
 800d66a:	fb02 3200 	mla	r2, r2, r0, r3
 800d66e:	0a24      	lsrs	r4, r4, #8
 800d670:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800d674:	f406 407f 	and.w	r0, r6, #65280	; 0xff00
 800d678:	4318      	orrs	r0, r3
 800d67a:	0412      	lsls	r2, r2, #16
 800d67c:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 800d680:	4318      	orrs	r0, r3
 800d682:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800d686:	4310      	orrs	r0, r2
 800d688:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d68a <GUI__MixColorsBulk>:
 800d68a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68e:	b085      	sub	sp, #20
 800d690:	4604      	mov	r4, r0
 800d692:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	9302      	str	r3, [sp, #8]
 800d69e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	4616      	mov	r6, r2
 800d6a4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800d6a8:	f04f 0900 	mov.w	r9, #0
 800d6ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6ae:	4599      	cmp	r9, r3
 800d6b0:	d024      	beq.n	800d6fc <GUI__MixColorsBulk+0x72>
 800d6b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800d6b6:	4633      	mov	r3, r6
 800d6b8:	46ab      	mov	fp, r5
 800d6ba:	4627      	mov	r7, r4
 800d6bc:	f857 0b04 	ldr.w	r0, [r7], #4
 800d6c0:	9903      	ldr	r1, [sp, #12]
 800d6c2:	0e02      	lsrs	r2, r0, #24
 800d6c4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800d6c8:	434a      	muls	r2, r1
 800d6ca:	21ff      	movs	r1, #255	; 0xff
 800d6cc:	fbb2 f2f1 	udiv	r2, r2, r1
 800d6d0:	b2d2      	uxtb	r2, r2
 800d6d2:	f85b 1b04 	ldr.w	r1, [fp], #4
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	f7ff ffa8 	bl	800d62c <GUI__MixColors>
 800d6dc:	9b01      	ldr	r3, [sp, #4]
 800d6de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800d6e2:	f1b8 0801 	subs.w	r8, r8, #1
 800d6e6:	f843 0b04 	str.w	r0, [r3], #4
 800d6ea:	d1e7      	bne.n	800d6bc <GUI__MixColorsBulk+0x32>
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	4455      	add	r5, sl
 800d6f0:	4454      	add	r4, sl
 800d6f2:	4456      	add	r6, sl
 800d6f4:	441d      	add	r5, r3
 800d6f6:	f109 0901 	add.w	r9, r9, #1
 800d6fa:	e7d7      	b.n	800d6ac <GUI__MixColorsBulk+0x22>
 800d6fc:	b005      	add	sp, #20
 800d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800d704 <_OnExit>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4c0a      	ldr	r4, [pc, #40]	; (800d730 <_OnExit+0x2c>)
 800d708:	4d0a      	ldr	r5, [pc, #40]	; (800d734 <_OnExit+0x30>)
 800d70a:	6820      	ldr	r0, [r4, #0]
 800d70c:	4e0a      	ldr	r6, [pc, #40]	; (800d738 <_OnExit+0x34>)
 800d70e:	f002 fd63 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800d712:	6828      	ldr	r0, [r5, #0]
 800d714:	f002 fd60 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800d718:	6830      	ldr	r0, [r6, #0]
 800d71a:	f002 fd5d 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800d71e:	4a07      	ldr	r2, [pc, #28]	; (800d73c <_OnExit+0x38>)
 800d720:	2300      	movs	r3, #0
 800d722:	6013      	str	r3, [r2, #0]
 800d724:	4a06      	ldr	r2, [pc, #24]	; (800d740 <_OnExit+0x3c>)
 800d726:	6033      	str	r3, [r6, #0]
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	6013      	str	r3, [r2, #0]
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	200267c0 	.word	0x200267c0
 800d734:	200267bc 	.word	0x200267bc
 800d738:	200267c4 	.word	0x200267c4
 800d73c:	200267c8 	.word	0x200267c8
 800d740:	200267d8 	.word	0x200267d8

0800d744 <GUI__GetAlphaBuffer>:
 800d744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d748:	461c      	mov	r4, r3
 800d74a:	4b28      	ldr	r3, [pc, #160]	; (800d7ec <GUI__GetAlphaBuffer+0xa8>)
 800d74c:	4617      	mov	r7, r2
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	4606      	mov	r6, r0
 800d752:	4688      	mov	r8, r1
 800d754:	b932      	cbnz	r2, 800d764 <GUI__GetAlphaBuffer+0x20>
 800d756:	2201      	movs	r2, #1
 800d758:	4825      	ldr	r0, [pc, #148]	; (800d7f0 <GUI__GetAlphaBuffer+0xac>)
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	4b25      	ldr	r3, [pc, #148]	; (800d7f4 <GUI__GetAlphaBuffer+0xb0>)
 800d75e:	6003      	str	r3, [r0, #0]
 800d760:	f002 f934 	bl	800f9cc <GUI__RegisterExit>
 800d764:	4d24      	ldr	r5, [pc, #144]	; (800d7f8 <GUI__GetAlphaBuffer+0xb4>)
 800d766:	682b      	ldr	r3, [r5, #0]
 800d768:	b933      	cbnz	r3, 800d778 <GUI__GetAlphaBuffer+0x34>
 800d76a:	4b24      	ldr	r3, [pc, #144]	; (800d7fc <GUI__GetAlphaBuffer+0xb8>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	602b      	str	r3, [r5, #0]
 800d770:	b913      	cbnz	r3, 800d778 <GUI__GetAlphaBuffer+0x34>
 800d772:	f7ff facf 	bl	800cd14 <LCD_GetVXSizeMax>
 800d776:	6028      	str	r0, [r5, #0]
 800d778:	b10c      	cbz	r4, 800d77e <GUI__GetAlphaBuffer+0x3a>
 800d77a:	682b      	ldr	r3, [r5, #0]
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	b196      	cbz	r6, 800d7a6 <GUI__GetAlphaBuffer+0x62>
 800d780:	4b1f      	ldr	r3, [pc, #124]	; (800d800 <GUI__GetAlphaBuffer+0xbc>)
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	4699      	mov	r9, r3
 800d786:	2400      	movs	r4, #0
 800d788:	b94a      	cbnz	r2, 800d79e <GUI__GetAlphaBuffer+0x5a>
 800d78a:	6828      	ldr	r0, [r5, #0]
 800d78c:	0080      	lsls	r0, r0, #2
 800d78e:	f002 fe83 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800d792:	f1d0 0401 	rsbs	r4, r0, #1
 800d796:	f8c9 0000 	str.w	r0, [r9]
 800d79a:	bf38      	it	cc
 800d79c:	2400      	movcc	r4, #0
 800d79e:	f8d9 3000 	ldr.w	r3, [r9]
 800d7a2:	6033      	str	r3, [r6, #0]
 800d7a4:	e000      	b.n	800d7a8 <GUI__GetAlphaBuffer+0x64>
 800d7a6:	4634      	mov	r4, r6
 800d7a8:	f1b8 0f00 	cmp.w	r8, #0
 800d7ac:	d00d      	beq.n	800d7ca <GUI__GetAlphaBuffer+0x86>
 800d7ae:	4e15      	ldr	r6, [pc, #84]	; (800d804 <GUI__GetAlphaBuffer+0xc0>)
 800d7b0:	6833      	ldr	r3, [r6, #0]
 800d7b2:	b93b      	cbnz	r3, 800d7c4 <GUI__GetAlphaBuffer+0x80>
 800d7b4:	6828      	ldr	r0, [r5, #0]
 800d7b6:	0080      	lsls	r0, r0, #2
 800d7b8:	f002 fe6e 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	6030      	str	r0, [r6, #0]
 800d7c0:	bf08      	it	eq
 800d7c2:	2401      	moveq	r4, #1
 800d7c4:	6833      	ldr	r3, [r6, #0]
 800d7c6:	f8c8 3000 	str.w	r3, [r8]
 800d7ca:	b167      	cbz	r7, 800d7e6 <GUI__GetAlphaBuffer+0xa2>
 800d7cc:	4e0e      	ldr	r6, [pc, #56]	; (800d808 <GUI__GetAlphaBuffer+0xc4>)
 800d7ce:	6833      	ldr	r3, [r6, #0]
 800d7d0:	b93b      	cbnz	r3, 800d7e2 <GUI__GetAlphaBuffer+0x9e>
 800d7d2:	6828      	ldr	r0, [r5, #0]
 800d7d4:	0080      	lsls	r0, r0, #2
 800d7d6:	f002 fe5f 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	6030      	str	r0, [r6, #0]
 800d7de:	bf08      	it	eq
 800d7e0:	2401      	moveq	r4, #1
 800d7e2:	6833      	ldr	r3, [r6, #0]
 800d7e4:	603b      	str	r3, [r7, #0]
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ec:	200267d8 	.word	0x200267d8
 800d7f0:	200267d0 	.word	0x200267d0
 800d7f4:	0800d705 	.word	0x0800d705
 800d7f8:	200267c8 	.word	0x200267c8
 800d7fc:	20026d4c 	.word	0x20026d4c
 800d800:	200267c0 	.word	0x200267c0
 800d804:	200267bc 	.word	0x200267bc
 800d808:	200267c4 	.word	0x200267c4

0800d80c <GUI__DoAlphaBlending>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	b093      	sub	sp, #76	; 0x4c
 800d812:	2400      	movs	r4, #0
 800d814:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d816:	900b      	str	r0, [sp, #44]	; 0x2c
 800d818:	910c      	str	r1, [sp, #48]	; 0x30
 800d81a:	4690      	mov	r8, r2
 800d81c:	461f      	mov	r7, r3
 800d81e:	6034      	str	r4, [r6, #0]
 800d820:	a80f      	add	r0, sp, #60	; 0x3c
 800d822:	a910      	add	r1, sp, #64	; 0x40
 800d824:	4622      	mov	r2, r4
 800d826:	ab11      	add	r3, sp, #68	; 0x44
 800d828:	f7ff ff8c 	bl	800d744 <GUI__GetAlphaBuffer>
 800d82c:	4605      	mov	r5, r0
 800d82e:	2800      	cmp	r0, #0
 800d830:	f040 80c3 	bne.w	800d9ba <GUI__DoAlphaBlending+0x1ae>
 800d834:	4c63      	ldr	r4, [pc, #396]	; (800d9c4 <GUI__DoAlphaBlending+0x1b8>)
 800d836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	7c58      	ldrb	r0, [r3, #17]
 800d83c:	4b62      	ldr	r3, [pc, #392]	; (800d9c8 <GUI__DoAlphaBlending+0x1bc>)
 800d83e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d842:	9307      	str	r3, [sp, #28]
 800d844:	4297      	cmp	r7, r2
 800d846:	bfa8      	it	ge
 800d848:	4617      	movge	r7, r2
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	920d      	str	r2, [sp, #52]	; 0x34
 800d84e:	970a      	str	r7, [sp, #40]	; 0x28
 800d850:	f7ff fa28 	bl	800cca4 <GUI_GetBitsPerPixelEx>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	9008      	str	r0, [sp, #32]
 800d858:	7c58      	ldrb	r0, [r3, #17]
 800d85a:	f7ff fa4d 	bl	800ccf8 <GUI_GetpfIndex2ColorEx>
 800d85e:	4b5b      	ldr	r3, [pc, #364]	; (800d9cc <GUI__DoAlphaBlending+0x1c0>)
 800d860:	9004      	str	r0, [sp, #16]
 800d862:	4298      	cmp	r0, r3
 800d864:	d005      	beq.n	800d872 <GUI__DoAlphaBlending+0x66>
 800d866:	4b5a      	ldr	r3, [pc, #360]	; (800d9d0 <GUI__DoAlphaBlending+0x1c4>)
 800d868:	1ac3      	subs	r3, r0, r3
 800d86a:	bf18      	it	ne
 800d86c:	2301      	movne	r3, #1
 800d86e:	9306      	str	r3, [sp, #24]
 800d870:	e000      	b.n	800d874 <GUI__DoAlphaBlending+0x68>
 800d872:	9506      	str	r5, [sp, #24]
 800d874:	2500      	movs	r5, #0
 800d876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d878:	46ab      	mov	fp, r5
 800d87a:	4643      	mov	r3, r8
 800d87c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d87e:	f853 0b04 	ldr.w	r0, [r3], #4
 800d882:	9305      	str	r3, [sp, #20]
 800d884:	4790      	blx	r2
 800d886:	0e03      	lsrs	r3, r0, #24
 800d888:	4681      	mov	r9, r0
 800d88a:	9309      	str	r3, [sp, #36]	; 0x24
 800d88c:	f000 8085 	beq.w	800d99a <GUI__DoAlphaBlending+0x18e>
 800d890:	f1bb 0f00 	cmp.w	fp, #0
 800d894:	d13f      	bne.n	800d916 <GUI__DoAlphaBlending+0x10a>
 800d896:	4b4b      	ldr	r3, [pc, #300]	; (800d9c4 <GUI__DoAlphaBlending+0x1b8>)
 800d898:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d89e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8a2:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800d8a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d8a8:	442f      	add	r7, r5
 800d8aa:	42bb      	cmp	r3, r7
 800d8ac:	bfc8      	it	gt
 800d8ae:	ebc7 0b03 	rsbgt	fp, r7, r3
 800d8b2:	eb0b 0a05 	add.w	sl, fp, r5
 800d8b6:	bfc8      	it	gt
 800d8b8:	461f      	movgt	r7, r3
 800d8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8bc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800d8c0:	4453      	add	r3, sl
 800d8c2:	4494      	add	ip, r2
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	9b07      	ldr	r3, [sp, #28]
 800d8c8:	9301      	str	r3, [sp, #4]
 800d8ca:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	f8cd c00c 	str.w	ip, [sp, #12]
 800d8d6:	f004 f87f 	bl	80119d8 <GUI_ReadRectEx>
 800d8da:	9a08      	ldr	r2, [sp, #32]
 800d8dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d8de:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800d8e2:	2a17      	cmp	r2, #23
 800d8e4:	dc06      	bgt.n	800d8f4 <GUI__DoAlphaBlending+0xe8>
 800d8e6:	4450      	add	r0, sl
 800d8e8:	ebcb 0104 	rsb	r1, fp, r4
 800d8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8ee:	f004 f933 	bl	8011b58 <GUI__ExpandPixelIndicesEx>
 800d8f2:	e001      	b.n	800d8f8 <GUI__DoAlphaBlending+0xec>
 800d8f4:	9b06      	ldr	r3, [sp, #24]
 800d8f6:	b913      	cbnz	r3, 800d8fe <GUI__DoAlphaBlending+0xf2>
 800d8f8:	f04f 0b01 	mov.w	fp, #1
 800d8fc:	e00b      	b.n	800d916 <GUI__DoAlphaBlending+0x10a>
 800d8fe:	ebc7 070c 	rsb	r7, r7, ip
 800d902:	4482      	add	sl, r0
 800d904:	f8da 0000 	ldr.w	r0, [sl]
 800d908:	9a04      	ldr	r2, [sp, #16]
 800d90a:	4790      	blx	r2
 800d90c:	3f01      	subs	r7, #1
 800d90e:	f84a 0b04 	str.w	r0, [sl], #4
 800d912:	d1f7      	bne.n	800d904 <GUI__DoAlphaBlending+0xf8>
 800d914:	e7f0      	b.n	800d8f8 <GUI__DoAlphaBlending+0xec>
 800d916:	4b2f      	ldr	r3, [pc, #188]	; (800d9d4 <GUI__DoAlphaBlending+0x1c8>)
 800d918:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d91a:	f8d3 c000 	ldr.w	ip, [r3]
 800d91e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d920:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800d924:	f1bc 0f00 	cmp.w	ip, #0
 800d928:	d024      	beq.n	800d974 <GUI__DoAlphaBlending+0x168>
 800d92a:	eb07 020a 	add.w	r2, r7, sl
 800d92e:	4451      	add	r1, sl
 800d930:	9210      	str	r2, [sp, #64]	; 0x40
 800d932:	4623      	mov	r3, r4
 800d934:	910f      	str	r1, [sp, #60]	; 0x3c
 800d936:	4640      	mov	r0, r8
 800d938:	47e0      	blx	ip
 800d93a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d93c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d93e:	2300      	movs	r3, #0
 800d940:	f858 1003 	ldr.w	r1, [r8, r3]
 800d944:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800d948:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800d94c:	58e8      	ldr	r0, [r5, r3]
 800d94e:	d101      	bne.n	800d954 <GUI__DoAlphaBlending+0x148>
 800d950:	50d0      	str	r0, [r2, r3]
 800d952:	e005      	b.n	800d960 <GUI__DoAlphaBlending+0x154>
 800d954:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800d958:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800d95c:	bf08      	it	eq
 800d95e:	50d1      	streq	r1, [r2, r3]
 800d960:	3c01      	subs	r4, #1
 800d962:	f103 0304 	add.w	r3, r3, #4
 800d966:	d1eb      	bne.n	800d940 <GUI__DoAlphaBlending+0x134>
 800d968:	6833      	ldr	r3, [r6, #0]
 800d96a:	9710      	str	r7, [sp, #64]	; 0x40
 800d96c:	f043 0301 	orr.w	r3, r3, #1
 800d970:	6033      	str	r3, [r6, #0]
 800d972:	e020      	b.n	800d9b6 <GUI__DoAlphaBlending+0x1aa>
 800d974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d976:	2bff      	cmp	r3, #255	; 0xff
 800d978:	d104      	bne.n	800d984 <GUI__DoAlphaBlending+0x178>
 800d97a:	f851 300a 	ldr.w	r3, [r1, sl]
 800d97e:	f847 300a 	str.w	r3, [r7, sl]
 800d982:	e011      	b.n	800d9a8 <GUI__DoAlphaBlending+0x19c>
 800d984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d986:	f851 100a 	ldr.w	r1, [r1, sl]
 800d98a:	43da      	mvns	r2, r3
 800d98c:	4648      	mov	r0, r9
 800d98e:	b2d2      	uxtb	r2, r2
 800d990:	f7ff fe4c 	bl	800d62c <GUI__MixColors>
 800d994:	f847 000a 	str.w	r0, [r7, sl]
 800d998:	e002      	b.n	800d9a0 <GUI__DoAlphaBlending+0x194>
 800d99a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d99c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d9a0:	6833      	ldr	r3, [r6, #0]
 800d9a2:	f043 0301 	orr.w	r3, r3, #1
 800d9a6:	6033      	str	r3, [r6, #0]
 800d9a8:	3c01      	subs	r4, #1
 800d9aa:	f105 0501 	add.w	r5, r5, #1
 800d9ae:	d002      	beq.n	800d9b6 <GUI__DoAlphaBlending+0x1aa>
 800d9b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d9b4:	e761      	b.n	800d87a <GUI__DoAlphaBlending+0x6e>
 800d9b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9b8:	e000      	b.n	800d9bc <GUI__DoAlphaBlending+0x1b0>
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	b013      	add	sp, #76	; 0x4c
 800d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20000034 	.word	0x20000034
 800d9c8:	20026d44 	.word	0x20026d44
 800d9cc:	08010863 	.word	0x08010863
 800d9d0:	08010861 	.word	0x08010861
 800d9d4:	200267cc 	.word	0x200267cc

0800d9d8 <GUI__AllocAlphaBuffer>:
 800d9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9da:	b108      	cbz	r0, 800d9e0 <GUI__AllocAlphaBuffer+0x8>
 800d9dc:	aa03      	add	r2, sp, #12
 800d9de:	e000      	b.n	800d9e2 <GUI__AllocAlphaBuffer+0xa>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	a801      	add	r0, sp, #4
 800d9e4:	a902      	add	r1, sp, #8
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	f7ff feac 	bl	800d744 <GUI__GetAlphaBuffer>
 800d9ec:	b005      	add	sp, #20
 800d9ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d9f4 <GUI_SetFuncAlphaBlending>:
 800d9f4:	4b01      	ldr	r3, [pc, #4]	; (800d9fc <GUI_SetFuncAlphaBlending+0x8>)
 800d9f6:	6018      	str	r0, [r3, #0]
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	200267cc 	.word	0x200267cc

0800da00 <GUI_SetFuncMixColors>:
 800da00:	4b01      	ldr	r3, [pc, #4]	; (800da08 <GUI_SetFuncMixColors+0x8>)
 800da02:	6018      	str	r0, [r3, #0]
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	20000020 	.word	0x20000020

0800da0c <GUI_SetFuncMixColorsBulk>:
 800da0c:	4b01      	ldr	r3, [pc, #4]	; (800da14 <GUI_SetFuncMixColorsBulk+0x8>)
 800da0e:	6018      	str	r0, [r3, #0]
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	20000024 	.word	0x20000024

0800da18 <GUI_SignalEvent>:
 800da18:	b508      	push	{r3, lr}
 800da1a:	4b02      	ldr	r3, [pc, #8]	; (800da24 <GUI_SignalEvent+0xc>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	b103      	cbz	r3, 800da22 <GUI_SignalEvent+0xa>
 800da20:	4798      	blx	r3
 800da22:	bd08      	pop	{r3, pc}
 800da24:	200267dc 	.word	0x200267dc

0800da28 <GUI_TOUCH_StoreStateEx>:
 800da28:	b530      	push	{r4, r5, lr}
 800da2a:	4d0f      	ldr	r5, [pc, #60]	; (800da68 <GUI_TOUCH_StoreStateEx+0x40>)
 800da2c:	b085      	sub	sp, #20
 800da2e:	4629      	mov	r1, r5
 800da30:	220c      	movs	r2, #12
 800da32:	4604      	mov	r4, r0
 800da34:	f005 f908 	bl	8012c48 <memcmp>
 800da38:	b1a0      	cbz	r0, 800da64 <GUI_TOUCH_StoreStateEx+0x3c>
 800da3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800da3e:	4b0b      	ldr	r3, [pc, #44]	; (800da6c <GUI_TOUCH_StoreStateEx+0x44>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800da46:	b153      	cbz	r3, 800da5e <GUI_TOUCH_StoreStateEx+0x36>
 800da48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800da4c:	ad01      	add	r5, sp, #4
 800da4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800da52:	4628      	mov	r0, r5
 800da54:	a902      	add	r1, sp, #8
 800da56:	4798      	blx	r3
 800da58:	b920      	cbnz	r0, 800da64 <GUI_TOUCH_StoreStateEx+0x3c>
 800da5a:	4628      	mov	r0, r5
 800da5c:	e000      	b.n	800da60 <GUI_TOUCH_StoreStateEx+0x38>
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 ff6a 	bl	800e938 <GUI_PID_StoreState>
 800da64:	b005      	add	sp, #20
 800da66:	bd30      	pop	{r4, r5, pc}
 800da68:	200267e0 	.word	0x200267e0
 800da6c:	200267ec 	.word	0x200267ec

0800da70 <GUI_SetTextMode>:
 800da70:	4b03      	ldr	r3, [pc, #12]	; (800da80 <GUI_SetTextMode+0x10>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800da78:	8558      	strh	r0, [r3, #42]	; 0x2a
 800da7a:	4610      	mov	r0, r2
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	20000034 	.word	0x20000034

0800da84 <GUI_SetFont>:
 800da84:	4b03      	ldr	r3, [pc, #12]	; (800da94 <GUI_SetFont+0x10>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	69d9      	ldr	r1, [r3, #28]
 800da8a:	b100      	cbz	r0, 800da8e <GUI_SetFont+0xa>
 800da8c:	61d8      	str	r0, [r3, #28]
 800da8e:	4608      	mov	r0, r1
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20000034 	.word	0x20000034

0800da98 <GUI_SetDrawMode>:
 800da98:	f7ff ba56 	b.w	800cf48 <LCD_SetDrawMode>

0800da9c <GUI_SetBkColor>:
 800da9c:	f7ff bcc0 	b.w	800d420 <LCD_SetBkColor>

0800daa0 <GUI_SetColor>:
 800daa0:	f7ff bcc6 	b.w	800d430 <LCD_SetColor>

0800daa4 <_Color2Index>:
 800daa4:	b508      	push	{r3, lr}
 800daa6:	4b05      	ldr	r3, [pc, #20]	; (800dabc <_Color2Index+0x18>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	7c5a      	ldrb	r2, [r3, #17]
 800daac:	4b04      	ldr	r3, [pc, #16]	; (800dac0 <_Color2Index+0x1c>)
 800daae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4798      	blx	r3
 800daba:	bd08      	pop	{r3, pc}
 800dabc:	20000034 	.word	0x20000034
 800dac0:	20026804 	.word	0x20026804

0800dac4 <_Index2Color>:
 800dac4:	b508      	push	{r3, lr}
 800dac6:	4b05      	ldr	r3, [pc, #20]	; (800dadc <_Index2Color+0x18>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	7c5a      	ldrb	r2, [r3, #17]
 800dacc:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <_Index2Color+0x1c>)
 800dace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	691b      	ldr	r3, [r3, #16]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	4798      	blx	r3
 800dada:	bd08      	pop	{r3, pc}
 800dadc:	20000034 	.word	0x20000034
 800dae0:	20026804 	.word	0x20026804

0800dae4 <_GetIndexMask>:
 800dae4:	b508      	push	{r3, lr}
 800dae6:	4b05      	ldr	r3, [pc, #20]	; (800dafc <_GetIndexMask+0x18>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	7c5a      	ldrb	r2, [r3, #17]
 800daec:	4b04      	ldr	r3, [pc, #16]	; (800db00 <_GetIndexMask+0x1c>)
 800daee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	689b      	ldr	r3, [r3, #8]
 800daf8:	4798      	blx	r3
 800dafa:	bd08      	pop	{r3, pc}
 800dafc:	20000034 	.word	0x20000034
 800db00:	20026804 	.word	0x20026804

0800db04 <_GetPixelIndex>:
 800db04:	b508      	push	{r3, lr}
 800db06:	6800      	ldr	r0, [r0, #0]
 800db08:	68c3      	ldr	r3, [r0, #12]
 800db0a:	695b      	ldr	r3, [r3, #20]
 800db0c:	4798      	blx	r3
 800db0e:	bd08      	pop	{r3, pc}

0800db10 <_GetDevData>:
 800db10:	2000      	movs	r0, #0
 800db12:	4770      	bx	lr

0800db14 <_SetOrg>:
 800db14:	b508      	push	{r3, lr}
 800db16:	6800      	ldr	r0, [r0, #0]
 800db18:	68c3      	ldr	r3, [r0, #12]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	4798      	blx	r3
 800db1e:	bd08      	pop	{r3, pc}

0800db20 <_GetDevFunc>:
 800db20:	b508      	push	{r3, lr}
 800db22:	6803      	ldr	r3, [r0, #0]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	6003      	str	r3, [r0, #0]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2c:	4798      	blx	r3
 800db2e:	bd08      	pop	{r3, pc}

0800db30 <_GetDevProp>:
 800db30:	b508      	push	{r3, lr}
 800db32:	6800      	ldr	r0, [r0, #0]
 800db34:	68c3      	ldr	r3, [r0, #12]
 800db36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db38:	4798      	blx	r3
 800db3a:	bd08      	pop	{r3, pc}

0800db3c <_GetRect>:
 800db3c:	b508      	push	{r3, lr}
 800db3e:	6800      	ldr	r0, [r0, #0]
 800db40:	68c3      	ldr	r3, [r0, #12]
 800db42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db44:	4798      	blx	r3
 800db46:	bd08      	pop	{r3, pc}

0800db48 <GUI_SetAlpha>:
 800db48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4c:	4a3c      	ldr	r2, [pc, #240]	; (800dc40 <GUI_SetAlpha+0xf8>)
 800db4e:	493d      	ldr	r1, [pc, #244]	; (800dc44 <GUI_SetAlpha+0xfc>)
 800db50:	6813      	ldr	r3, [r2, #0]
 800db52:	4d3d      	ldr	r5, [pc, #244]	; (800dc48 <GUI_SetAlpha+0x100>)
 800db54:	7c5b      	ldrb	r3, [r3, #17]
 800db56:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db5a:	698e      	ldr	r6, [r1, #24]
 800db5c:	5da9      	ldrb	r1, [r5, r6]
 800db5e:	9101      	str	r1, [sp, #4]
 800db60:	4604      	mov	r4, r0
 800db62:	46a8      	mov	r8, r5
 800db64:	b970      	cbnz	r0, 800db84 <GUI_SetAlpha+0x3c>
 800db66:	4618      	mov	r0, r3
 800db68:	2105      	movs	r1, #5
 800db6a:	f001 fddd 	bl	800f728 <GUI_DEVICE__GetpDevice>
 800db6e:	4607      	mov	r7, r0
 800db70:	2800      	cmp	r0, #0
 800db72:	d061      	beq.n	800dc38 <GUI_SetAlpha+0xf0>
 800db74:	4620      	mov	r0, r4
 800db76:	f7fd fc53 	bl	800b420 <GUI_MEMDEV__SetAlphaCallback>
 800db7a:	4638      	mov	r0, r7
 800db7c:	f001 fe1e 	bl	800f7bc <GUI_DEVICE_Unlink>
 800db80:	55ac      	strb	r4, [r5, r6]
 800db82:	e059      	b.n	800dc38 <GUI_SetAlpha+0xf0>
 800db84:	4d31      	ldr	r5, [pc, #196]	; (800dc4c <GUI_SetAlpha+0x104>)
 800db86:	682b      	ldr	r3, [r5, #0]
 800db88:	46aa      	mov	sl, r5
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d13f      	bne.n	800dc0e <GUI_SetAlpha+0xc6>
 800db8e:	4830      	ldr	r0, [pc, #192]	; (800dc50 <GUI_SetAlpha+0x108>)
 800db90:	4b30      	ldr	r3, [pc, #192]	; (800dc54 <GUI_SetAlpha+0x10c>)
 800db92:	6003      	str	r3, [r0, #0]
 800db94:	f001 ff1a 	bl	800f9cc <GUI__RegisterExit>
 800db98:	f7ff f8bc 	bl	800cd14 <LCD_GetVXSizeMax>
 800db9c:	ea4f 0980 	mov.w	r9, r0, lsl #2
 800dba0:	4648      	mov	r0, r9
 800dba2:	f002 fc79 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800dba6:	6028      	str	r0, [r5, #0]
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d045      	beq.n	800dc38 <GUI_SetAlpha+0xf0>
 800dbac:	4f2a      	ldr	r7, [pc, #168]	; (800dc58 <GUI_SetAlpha+0x110>)
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	46bb      	mov	fp, r7
 800dbb2:	bb62      	cbnz	r2, 800dc0e <GUI_SetAlpha+0xc6>
 800dbb4:	4648      	mov	r0, r9
 800dbb6:	9200      	str	r2, [sp, #0]
 800dbb8:	f002 fc6e 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800dbbc:	9a00      	ldr	r2, [sp, #0]
 800dbbe:	6038      	str	r0, [r7, #0]
 800dbc0:	b918      	cbnz	r0, 800dbca <GUI_SetAlpha+0x82>
 800dbc2:	6828      	ldr	r0, [r5, #0]
 800dbc4:	f002 fb08 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800dbc8:	e036      	b.n	800dc38 <GUI_SetAlpha+0xf0>
 800dbca:	4f24      	ldr	r7, [pc, #144]	; (800dc5c <GUI_SetAlpha+0x114>)
 800dbcc:	4615      	mov	r5, r2
 800dbce:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800dbd2:	b9ca      	cbnz	r2, 800dc08 <GUI_SetAlpha+0xc0>
 800dbd4:	4822      	ldr	r0, [pc, #136]	; (800dc60 <GUI_SetAlpha+0x118>)
 800dbd6:	4923      	ldr	r1, [pc, #140]	; (800dc64 <GUI_SetAlpha+0x11c>)
 800dbd8:	462b      	mov	r3, r5
 800dbda:	f001 fdc9 	bl	800f770 <GUI_DEVICE_Create>
 800dbde:	6038      	str	r0, [r7, #0]
 800dbe0:	b990      	cbnz	r0, 800dc08 <GUI_SetAlpha+0xc0>
 800dbe2:	f8da 0000 	ldr.w	r0, [sl]
 800dbe6:	f002 faf7 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800dbea:	f8db 0000 	ldr.w	r0, [fp]
 800dbee:	f002 faf3 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800dbf2:	4b1d      	ldr	r3, [pc, #116]	; (800dc68 <GUI_SetAlpha+0x120>)
 800dbf4:	6818      	ldr	r0, [r3, #0]
 800dbf6:	461c      	mov	r4, r3
 800dbf8:	b108      	cbz	r0, 800dbfe <GUI_SetAlpha+0xb6>
 800dbfa:	f001 fdb7 	bl	800f76c <GUI_DEVICE_Delete>
 800dbfe:	6860      	ldr	r0, [r4, #4]
 800dc00:	b1d0      	cbz	r0, 800dc38 <GUI_SetAlpha+0xf0>
 800dc02:	f001 fdb3 	bl	800f76c <GUI_DEVICE_Delete>
 800dc06:	e017      	b.n	800dc38 <GUI_SetAlpha+0xf0>
 800dc08:	3501      	adds	r5, #1
 800dc0a:	2d02      	cmp	r5, #2
 800dc0c:	d1df      	bne.n	800dbce <GUI_SetAlpha+0x86>
 800dc0e:	4a0c      	ldr	r2, [pc, #48]	; (800dc40 <GUI_SetAlpha+0xf8>)
 800dc10:	6813      	ldr	r3, [r2, #0]
 800dc12:	2105      	movs	r1, #5
 800dc14:	7c58      	ldrb	r0, [r3, #17]
 800dc16:	f001 fd87 	bl	800f728 <GUI_DEVICE__GetpDevice>
 800dc1a:	b958      	cbnz	r0, 800dc34 <GUI_SetAlpha+0xec>
 800dc1c:	4813      	ldr	r0, [pc, #76]	; (800dc6c <GUI_SetAlpha+0x124>)
 800dc1e:	f7fd fbff 	bl	800b420 <GUI_MEMDEV__SetAlphaCallback>
 800dc22:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <GUI_SetAlpha+0xf8>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	7c5a      	ldrb	r2, [r3, #17]
 800dc28:	4b0f      	ldr	r3, [pc, #60]	; (800dc68 <GUI_SetAlpha+0x120>)
 800dc2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dc2e:	b108      	cbz	r0, 800dc34 <GUI_SetAlpha+0xec>
 800dc30:	f001 fdda 	bl	800f7e8 <GUI_DEVICE_Link>
 800dc34:	f808 4006 	strb.w	r4, [r8, r6]
 800dc38:	9801      	ldr	r0, [sp, #4]
 800dc3a:	b003      	add	sp, #12
 800dc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc40:	20000034 	.word	0x20000034
 800dc44:	20026d44 	.word	0x20026d44
 800dc48:	200267f0 	.word	0x200267f0
 800dc4c:	20026800 	.word	0x20026800
 800dc50:	200267f4 	.word	0x200267f4
 800dc54:	0800dc71 	.word	0x0800dc71
 800dc58:	200267fc 	.word	0x200267fc
 800dc5c:	20026800 	.word	0x20026800
 800dc60:	0801428c 	.word	0x0801428c
 800dc64:	08014274 	.word	0x08014274
 800dc68:	20026804 	.word	0x20026804
 800dc6c:	0800db49 	.word	0x0800db49

0800dc70 <_OnExit>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4d0c      	ldr	r5, [pc, #48]	; (800dca4 <_OnExit+0x34>)
 800dc74:	2400      	movs	r4, #0
 800dc76:	6828      	ldr	r0, [r5, #0]
 800dc78:	f002 faae 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800dc7c:	602c      	str	r4, [r5, #0]
 800dc7e:	4d0a      	ldr	r5, [pc, #40]	; (800dca8 <_OnExit+0x38>)
 800dc80:	6828      	ldr	r0, [r5, #0]
 800dc82:	f002 faa9 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800dc86:	602c      	str	r4, [r5, #0]
 800dc88:	4d08      	ldr	r5, [pc, #32]	; (800dcac <_OnExit+0x3c>)
 800dc8a:	6828      	ldr	r0, [r5, #0]
 800dc8c:	b110      	cbz	r0, 800dc94 <_OnExit+0x24>
 800dc8e:	f001 fd6d 	bl	800f76c <GUI_DEVICE_Delete>
 800dc92:	602c      	str	r4, [r5, #0]
 800dc94:	6868      	ldr	r0, [r5, #4]
 800dc96:	b120      	cbz	r0, 800dca2 <_OnExit+0x32>
 800dc98:	f001 fd68 	bl	800f76c <GUI_DEVICE_Delete>
 800dc9c:	4b03      	ldr	r3, [pc, #12]	; (800dcac <_OnExit+0x3c>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	605a      	str	r2, [r3, #4]
 800dca2:	bd38      	pop	{r3, r4, r5, pc}
 800dca4:	20026800 	.word	0x20026800
 800dca8:	200267fc 	.word	0x200267fc
 800dcac:	20026804 	.word	0x20026804

0800dcb0 <_ReadRectFromMemdev>:
 800dcb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	4c23      	ldr	r4, [pc, #140]	; (800dd44 <_ReadRectFromMemdev+0x94>)
 800dcb6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800dcb8:	469b      	mov	fp, r3
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800dcbe:	4691      	mov	r9, r2
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	f7fd fb71 	bl	800b3a8 <GUI_MEMDEV_GetXPos>
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	4607      	mov	r7, r0
 800dcca:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800dccc:	f7fd fb82 	bl	800b3d4 <GUI_MEMDEV_GetYPos>
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	4680      	mov	r8, r0
 800dcd4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800dcd6:	f7fd fb51 	bl	800b37c <GUI_MEMDEV_GetXSize>
 800dcda:	45c1      	cmp	r9, r8
 800dcdc:	4682      	mov	sl, r0
 800dcde:	db2e      	blt.n	800dd3e <_ReadRectFromMemdev+0x8e>
 800dce0:	42bd      	cmp	r5, r7
 800dce2:	db2c      	blt.n	800dd3e <_ReadRectFromMemdev+0x8e>
 800dce4:	6822      	ldr	r2, [r4, #0]
 800dce6:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800dce8:	9401      	str	r4, [sp, #4]
 800dcea:	f7fe f8ad 	bl	800be48 <GUI_MEMDEV_GetBitsPerPixel>
 800dcee:	2808      	cmp	r0, #8
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	dd04      	ble.n	800dd00 <_ReadRectFromMemdev+0x50>
 800dcf6:	2810      	cmp	r0, #16
 800dcf8:	bfcc      	ite	gt
 800dcfa:	2204      	movgt	r2, #4
 800dcfc:	2202      	movle	r2, #2
 800dcfe:	e000      	b.n	800dd02 <_ReadRectFromMemdev+0x52>
 800dd00:	2201      	movs	r2, #1
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800dd06:	9201      	str	r2, [sp, #4]
 800dd08:	f7fd fb7a 	bl	800b400 <GUI_MEMDEV_GetDataPtr>
 800dd0c:	ebc5 0b0b 	rsb	fp, r5, fp
 800dd10:	9a01      	ldr	r2, [sp, #4]
 800dd12:	ebc8 0809 	rsb	r8, r8, r9
 800dd16:	1bed      	subs	r5, r5, r7
 800dd18:	f10b 0b01 	add.w	fp, fp, #1
 800dd1c:	fb0a 5a08 	mla	sl, sl, r8, r5
 800dd20:	fb0a 0102 	mla	r1, sl, r2, r0
 800dd24:	fb02 f20b 	mul.w	r2, r2, fp
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f004 ff9c 	bl	8012c66 <memcpy>
 800dd2e:	4630      	mov	r0, r6
 800dd30:	4659      	mov	r1, fp
 800dd32:	4622      	mov	r2, r4
 800dd34:	b003      	add	sp, #12
 800dd36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3a:	f003 be9f 	b.w	8011a7c <GUI__ExpandPixelIndices>
 800dd3e:	b003      	add	sp, #12
 800dd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd44:	20000034 	.word	0x20000034

0800dd48 <_Color2IndexBulk>:
 800dd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd4c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800dde4 <_Color2IndexBulk+0x9c>
 800dd50:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800dde8 <_Color2IndexBulk+0xa0>
 800dd54:	f8d9 5000 	ldr.w	r5, [r9]
 800dd58:	7c6d      	ldrb	r5, [r5, #17]
 800dd5a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800dd5e:	682d      	ldr	r5, [r5, #0]
 800dd60:	692d      	ldr	r5, [r5, #16]
 800dd62:	692d      	ldr	r5, [r5, #16]
 800dd64:	4607      	mov	r7, r0
 800dd66:	460e      	mov	r6, r1
 800dd68:	4614      	mov	r4, r2
 800dd6a:	b115      	cbz	r5, 800dd72 <_Color2IndexBulk+0x2a>
 800dd6c:	47a8      	blx	r5
 800dd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd72:	2b02      	cmp	r3, #2
 800dd74:	d014      	beq.n	800dda0 <_Color2IndexBulk+0x58>
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d023      	beq.n	800ddc2 <_Color2IndexBulk+0x7a>
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d130      	bne.n	800dde0 <_Color2IndexBulk+0x98>
 800dd7e:	f8d9 3000 	ldr.w	r3, [r9]
 800dd82:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800dd86:	7c5b      	ldrb	r3, [r3, #17]
 800dd88:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	691b      	ldr	r3, [r3, #16]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4798      	blx	r3
 800dd94:	5570      	strb	r0, [r6, r5]
 800dd96:	3501      	adds	r5, #1
 800dd98:	42ac      	cmp	r4, r5
 800dd9a:	d1f0      	bne.n	800dd7e <_Color2IndexBulk+0x36>
 800dd9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dda0:	f8d9 3000 	ldr.w	r3, [r9]
 800dda4:	f857 0b04 	ldr.w	r0, [r7], #4
 800dda8:	7c5b      	ldrb	r3, [r3, #17]
 800ddaa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4798      	blx	r3
 800ddb6:	3c01      	subs	r4, #1
 800ddb8:	f826 0b02 	strh.w	r0, [r6], #2
 800ddbc:	d1f0      	bne.n	800dda0 <_Color2IndexBulk+0x58>
 800ddbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc2:	f8d9 3000 	ldr.w	r3, [r9]
 800ddc6:	5978      	ldr	r0, [r7, r5]
 800ddc8:	7c5b      	ldrb	r3, [r3, #17]
 800ddca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4798      	blx	r3
 800ddd6:	3c01      	subs	r4, #1
 800ddd8:	5170      	str	r0, [r6, r5]
 800ddda:	f105 0504 	add.w	r5, r5, #4
 800ddde:	d1f0      	bne.n	800ddc2 <_Color2IndexBulk+0x7a>
 800dde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dde4:	20000034 	.word	0x20000034
 800dde8:	20026804 	.word	0x20026804

0800ddec <_Index2ColorBulk>:
 800ddec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddf0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800de88 <_Index2ColorBulk+0x9c>
 800ddf4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800de8c <_Index2ColorBulk+0xa0>
 800ddf8:	f8d9 5000 	ldr.w	r5, [r9]
 800ddfc:	7c6d      	ldrb	r5, [r5, #17]
 800ddfe:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800de02:	682d      	ldr	r5, [r5, #0]
 800de04:	692d      	ldr	r5, [r5, #16]
 800de06:	696d      	ldr	r5, [r5, #20]
 800de08:	4607      	mov	r7, r0
 800de0a:	460e      	mov	r6, r1
 800de0c:	4614      	mov	r4, r2
 800de0e:	b115      	cbz	r5, 800de16 <_Index2ColorBulk+0x2a>
 800de10:	47a8      	blx	r5
 800de12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de16:	2b02      	cmp	r3, #2
 800de18:	d014      	beq.n	800de44 <_Index2ColorBulk+0x58>
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	d023      	beq.n	800de66 <_Index2ColorBulk+0x7a>
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d130      	bne.n	800de84 <_Index2ColorBulk+0x98>
 800de22:	f8d9 3000 	ldr.w	r3, [r9]
 800de26:	5d78      	ldrb	r0, [r7, r5]
 800de28:	7c5b      	ldrb	r3, [r3, #17]
 800de2a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	4798      	blx	r3
 800de36:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800de3a:	3501      	adds	r5, #1
 800de3c:	42ac      	cmp	r4, r5
 800de3e:	d1f0      	bne.n	800de22 <_Index2ColorBulk+0x36>
 800de40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de44:	f8d9 3000 	ldr.w	r3, [r9]
 800de48:	f837 0b02 	ldrh.w	r0, [r7], #2
 800de4c:	7c5b      	ldrb	r3, [r3, #17]
 800de4e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	4798      	blx	r3
 800de5a:	3c01      	subs	r4, #1
 800de5c:	f846 0b04 	str.w	r0, [r6], #4
 800de60:	d1f0      	bne.n	800de44 <_Index2ColorBulk+0x58>
 800de62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de66:	f8d9 3000 	ldr.w	r3, [r9]
 800de6a:	5978      	ldr	r0, [r7, r5]
 800de6c:	7c5b      	ldrb	r3, [r3, #17]
 800de6e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	4798      	blx	r3
 800de7a:	3c01      	subs	r4, #1
 800de7c:	5170      	str	r0, [r6, r5]
 800de7e:	f105 0504 	add.w	r5, r5, #4
 800de82:	d1f0      	bne.n	800de66 <_Index2ColorBulk+0x7a>
 800de84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de88:	20000034 	.word	0x20000034
 800de8c:	20026804 	.word	0x20026804

0800de90 <_MixColors>:
 800de90:	b570      	push	{r4, r5, r6, lr}
 800de92:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <_MixColors+0x40>)
 800de94:	4a0f      	ldr	r2, [pc, #60]	; (800ded4 <_MixColors+0x44>)
 800de96:	781e      	ldrb	r6, [r3, #0]
 800de98:	4c0f      	ldr	r4, [pc, #60]	; (800ded8 <_MixColors+0x48>)
 800de9a:	4b10      	ldr	r3, [pc, #64]	; (800dedc <_MixColors+0x4c>)
 800de9c:	b156      	cbz	r6, 800deb4 <_MixColors+0x24>
 800de9e:	6821      	ldr	r1, [r4, #0]
 800dea0:	7c49      	ldrb	r1, [r1, #17]
 800dea2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dea6:	6992      	ldr	r2, [r2, #24]
 800dea8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
 800deac:	5c98      	ldrb	r0, [r3, r2]
 800deae:	ea45 6000 	orr.w	r0, r5, r0, lsl #24
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	6824      	ldr	r4, [r4, #0]
 800deb6:	7c64      	ldrb	r4, [r4, #17]
 800deb8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800debc:	6992      	ldr	r2, [r2, #24]
 800debe:	5c9a      	ldrb	r2, [r3, r2]
 800dec0:	43d2      	mvns	r2, r2
 800dec2:	b2d2      	uxtb	r2, r2
 800dec4:	f7ff fbb2 	bl	800d62c <GUI__MixColors>
 800dec8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800decc:	bd70      	pop	{r4, r5, r6, pc}
 800dece:	bf00      	nop
 800ded0:	20026d35 	.word	0x20026d35
 800ded4:	20026d44 	.word	0x20026d44
 800ded8:	20000034 	.word	0x20000034
 800dedc:	200267f0 	.word	0x200267f0

0800dee0 <_SetPixelIndex>:
 800dee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee4:	6804      	ldr	r4, [r0, #0]
 800dee6:	68e5      	ldr	r5, [r4, #12]
 800dee8:	4698      	mov	r8, r3
 800deea:	4620      	mov	r0, r4
 800deec:	696b      	ldr	r3, [r5, #20]
 800deee:	4616      	mov	r6, r2
 800def0:	460f      	mov	r7, r1
 800def2:	4798      	blx	r3
 800def4:	6925      	ldr	r5, [r4, #16]
 800def6:	686b      	ldr	r3, [r5, #4]
 800def8:	4798      	blx	r3
 800defa:	6925      	ldr	r5, [r4, #16]
 800defc:	4681      	mov	r9, r0
 800defe:	686b      	ldr	r3, [r5, #4]
 800df00:	4640      	mov	r0, r8
 800df02:	4798      	blx	r3
 800df04:	4649      	mov	r1, r9
 800df06:	f7ff ffc3 	bl	800de90 <_MixColors>
 800df0a:	6923      	ldr	r3, [r4, #16]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4798      	blx	r3
 800df10:	68e5      	ldr	r5, [r4, #12]
 800df12:	4603      	mov	r3, r0
 800df14:	69ad      	ldr	r5, [r5, #24]
 800df16:	4620      	mov	r0, r4
 800df18:	4639      	mov	r1, r7
 800df1a:	4632      	mov	r2, r6
 800df1c:	47a8      	blx	r5
 800df1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800df22 <_XorPixel>:
 800df22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df26:	4604      	mov	r4, r0
 800df28:	460f      	mov	r7, r1
 800df2a:	4616      	mov	r6, r2
 800df2c:	f7ff fdea 	bl	800db04 <_GetPixelIndex>
 800df30:	6825      	ldr	r5, [r4, #0]
 800df32:	692b      	ldr	r3, [r5, #16]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	4680      	mov	r8, r0
 800df38:	4798      	blx	r3
 800df3a:	4639      	mov	r1, r7
 800df3c:	ea80 0308 	eor.w	r3, r0, r8
 800df40:	4632      	mov	r2, r6
 800df42:	4620      	mov	r0, r4
 800df44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df48:	f7ff bfca 	b.w	800dee0 <_SetPixelIndex>

0800df4c <_DrawVLine>:
 800df4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df50:	461d      	mov	r5, r3
 800df52:	4b12      	ldr	r3, [pc, #72]	; (800df9c <_DrawVLine+0x50>)
 800df54:	4614      	mov	r4, r2
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	7c12      	ldrb	r2, [r2, #16]
 800df5a:	f012 0f01 	tst.w	r2, #1
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	4698      	mov	r8, r3
 800df64:	d10e      	bne.n	800df84 <_DrawVLine+0x38>
 800df66:	42ac      	cmp	r4, r5
 800df68:	dc0a      	bgt.n	800df80 <_DrawVLine+0x34>
 800df6a:	f8d8 2000 	ldr.w	r2, [r8]
 800df6e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800df70:	4630      	mov	r0, r6
 800df72:	4622      	mov	r2, r4
 800df74:	4639      	mov	r1, r7
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f7ff ffb2 	bl	800dee0 <_SetPixelIndex>
 800df7c:	3401      	adds	r4, #1
 800df7e:	e7f2      	b.n	800df66 <_DrawVLine+0x1a>
 800df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df84:	42ac      	cmp	r4, r5
 800df86:	dc06      	bgt.n	800df96 <_DrawVLine+0x4a>
 800df88:	4622      	mov	r2, r4
 800df8a:	4630      	mov	r0, r6
 800df8c:	4639      	mov	r1, r7
 800df8e:	f7ff ffc8 	bl	800df22 <_XorPixel>
 800df92:	3401      	adds	r4, #1
 800df94:	e7f6      	b.n	800df84 <_DrawVLine+0x38>
 800df96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df9a:	bf00      	nop
 800df9c:	20000034 	.word	0x20000034

0800dfa0 <_GetLine>:
 800dfa0:	e92d 49f0 	stmdb	sp!, {r4, r5, r6, r7, r8, fp, lr}
 800dfa4:	4698      	mov	r8, r3
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	6803      	ldr	r3, [r0, #0]
 800dfaa:	9303      	str	r3, [sp, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800dfb0:	4616      	mov	r6, r2
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	2a04      	cmp	r2, #4
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	d006      	beq.n	800dfc8 <_GetLine+0x28>
 800dfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfbc:	a803      	add	r0, sp, #12
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	4798      	blx	r3
 800dfc2:	2501      	movs	r5, #1
 800dfc4:	4684      	mov	ip, r0
 800dfc6:	e002      	b.n	800dfce <_GetLine+0x2e>
 800dfc8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e048 <_GetLine+0xa8>
 800dfcc:	2500      	movs	r5, #0
 800dfce:	eb04 0b08 	add.w	fp, r4, r8
 800dfd2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dfd6:	f1bc 0f00 	cmp.w	ip, #0
 800dfda:	d101      	bne.n	800dfe0 <_GetLine+0x40>
 800dfdc:	463d      	mov	r5, r7
 800dfde:	e016      	b.n	800e00e <_GetLine+0x6e>
 800dfe0:	e88d 00c0 	stmia.w	sp, {r6, r7}
 800dfe4:	9803      	ldr	r0, [sp, #12]
 800dfe6:	4621      	mov	r1, r4
 800dfe8:	4632      	mov	r2, r6
 800dfea:	465b      	mov	r3, fp
 800dfec:	47e0      	blx	ip
 800dfee:	b165      	cbz	r5, 800e00a <_GetLine+0x6a>
 800dff0:	4b14      	ldr	r3, [pc, #80]	; (800e044 <_GetLine+0xa4>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	7c58      	ldrb	r0, [r3, #17]
 800dff6:	f7fe fe3d 	bl	800cc74 <LCD_GetBitsPerPixelEx>
 800dffa:	4641      	mov	r1, r8
 800dffc:	2818      	cmp	r0, #24
 800dffe:	bf14      	ite	ne
 800e000:	4602      	movne	r2, r0
 800e002:	2220      	moveq	r2, #32
 800e004:	4638      	mov	r0, r7
 800e006:	f003 fd39 	bl	8011a7c <GUI__ExpandPixelIndices>
 800e00a:	2400      	movs	r4, #0
 800e00c:	e00b      	b.n	800e026 <_GetLine+0x86>
 800e00e:	455c      	cmp	r4, fp
 800e010:	dcfb      	bgt.n	800e00a <_GetLine+0x6a>
 800e012:	9803      	ldr	r0, [sp, #12]
 800e014:	68c3      	ldr	r3, [r0, #12]
 800e016:	4621      	mov	r1, r4
 800e018:	695b      	ldr	r3, [r3, #20]
 800e01a:	4632      	mov	r2, r6
 800e01c:	4798      	blx	r3
 800e01e:	3401      	adds	r4, #1
 800e020:	f845 0b04 	str.w	r0, [r5], #4
 800e024:	e7f3      	b.n	800e00e <_GetLine+0x6e>
 800e026:	4544      	cmp	r4, r8
 800e028:	da08      	bge.n	800e03c <_GetLine+0x9c>
 800e02a:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800e02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e030:	4798      	blx	r3
 800e032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e034:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e038:	3401      	adds	r4, #1
 800e03a:	e7f4      	b.n	800e026 <_GetLine+0x86>
 800e03c:	b005      	add	sp, #20
 800e03e:	e8bd 89f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, fp, pc}
 800e042:	bf00      	nop
 800e044:	20000034 	.word	0x20000034
 800e048:	0800dcb1 	.word	0x0800dcb1

0800e04c <_DrawBitmapLine.isra.6>:
 800e04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e050:	461d      	mov	r5, r3
 800e052:	4b13      	ldr	r3, [pc, #76]	; (800e0a0 <_DrawBitmapLine.isra.6+0x54>)
 800e054:	4e13      	ldr	r6, [pc, #76]	; (800e0a4 <_DrawBitmapLine.isra.6+0x58>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	b087      	sub	sp, #28
 800e05a:	4607      	mov	r7, r0
 800e05c:	7c58      	ldrb	r0, [r3, #17]
 800e05e:	4689      	mov	r9, r1
 800e060:	4690      	mov	r8, r2
 800e062:	f7fe fe07 	bl	800cc74 <LCD_GetBitsPerPixelEx>
 800e066:	2818      	cmp	r0, #24
 800e068:	bf14      	ite	ne
 800e06a:	4604      	movne	r4, r0
 800e06c:	2420      	moveq	r4, #32
 800e06e:	4629      	mov	r1, r5
 800e070:	4622      	mov	r2, r4
 800e072:	6830      	ldr	r0, [r6, #0]
 800e074:	f003 fe2b 	bl	8011cce <GUI__CompactPixelIndices>
 800e078:	6838      	ldr	r0, [r7, #0]
 800e07a:	2301      	movs	r3, #1
 800e07c:	68c2      	ldr	r2, [r0, #12]
 800e07e:	e88d 0018 	stmia.w	sp, {r3, r4}
 800e082:	2400      	movs	r4, #0
 800e084:	6833      	ldr	r3, [r6, #0]
 800e086:	9303      	str	r3, [sp, #12]
 800e088:	9402      	str	r4, [sp, #8]
 800e08a:	9404      	str	r4, [sp, #16]
 800e08c:	9405      	str	r4, [sp, #20]
 800e08e:	6854      	ldr	r4, [r2, #4]
 800e090:	4649      	mov	r1, r9
 800e092:	4642      	mov	r2, r8
 800e094:	462b      	mov	r3, r5
 800e096:	47a0      	blx	r4
 800e098:	b007      	add	sp, #28
 800e09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e09e:	bf00      	nop
 800e0a0:	20000034 	.word	0x20000034
 800e0a4:	20026800 	.word	0x20026800

0800e0a8 <_DrawHLine>:
 800e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	1a5b      	subs	r3, r3, r1
 800e0ae:	1c5d      	adds	r5, r3, #1
 800e0b0:	6803      	ldr	r3, [r0, #0]
 800e0b2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800e12c <_DrawHLine+0x84>
 800e0b6:	691c      	ldr	r4, [r3, #16]
 800e0b8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800e130 <_DrawHLine+0x88>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	b087      	sub	sp, #28
 800e0c0:	4607      	mov	r7, r0
 800e0c2:	9305      	str	r3, [sp, #20]
 800e0c4:	f8d9 3000 	ldr.w	r3, [r9]
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ce:	9301      	str	r3, [sp, #4]
 800e0d0:	6863      	ldr	r3, [r4, #4]
 800e0d2:	9302      	str	r3, [sp, #8]
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	460e      	mov	r6, r1
 800e0d8:	4692      	mov	sl, r2
 800e0da:	f7ff ff61 	bl	800dfa0 <_GetLine>
 800e0de:	4b12      	ldr	r3, [pc, #72]	; (800e128 <_DrawHLine+0x80>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0e4:	6818      	ldr	r0, [r3, #0]
 800e0e6:	f7ff f953 	bl	800d390 <LCD_Index2Color>
 800e0ea:	2400      	movs	r4, #0
 800e0ec:	4683      	mov	fp, r0
 800e0ee:	42ac      	cmp	r4, r5
 800e0f0:	da10      	bge.n	800e114 <_DrawHLine+0x6c>
 800e0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e0f6:	4658      	mov	r0, fp
 800e0f8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800e0fc:	f7ff fec8 	bl	800de90 <_MixColors>
 800e100:	f8d9 3000 	ldr.w	r3, [r9]
 800e104:	9304      	str	r3, [sp, #16]
 800e106:	9a05      	ldr	r2, [sp, #20]
 800e108:	4790      	blx	r2
 800e10a:	9b04      	ldr	r3, [sp, #16]
 800e10c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e110:	3401      	adds	r4, #1
 800e112:	e7ec      	b.n	800e0ee <_DrawHLine+0x46>
 800e114:	4638      	mov	r0, r7
 800e116:	4631      	mov	r1, r6
 800e118:	4652      	mov	r2, sl
 800e11a:	462b      	mov	r3, r5
 800e11c:	b007      	add	sp, #28
 800e11e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e122:	f7ff bf93 	b.w	800e04c <_DrawBitmapLine.isra.6>
 800e126:	bf00      	nop
 800e128:	20000034 	.word	0x20000034
 800e12c:	20026800 	.word	0x20026800
 800e130:	200267fc 	.word	0x200267fc

0800e134 <_FillRect>:
 800e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e138:	9d06      	ldr	r5, [sp, #24]
 800e13a:	4606      	mov	r6, r0
 800e13c:	460f      	mov	r7, r1
 800e13e:	4614      	mov	r4, r2
 800e140:	4698      	mov	r8, r3
 800e142:	42ac      	cmp	r4, r5
 800e144:	dc07      	bgt.n	800e156 <_FillRect+0x22>
 800e146:	4622      	mov	r2, r4
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	4643      	mov	r3, r8
 800e14e:	f7ff ffab 	bl	800e0a8 <_DrawHLine>
 800e152:	3401      	adds	r4, #1
 800e154:	e7f5      	b.n	800e142 <_FillRect+0xe>
 800e156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e15c <_DrawBitmap>:
 800e15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e160:	b08d      	sub	sp, #52	; 0x34
 800e162:	4605      	mov	r5, r0
 800e164:	9105      	str	r1, [sp, #20]
 800e166:	920b      	str	r2, [sp, #44]	; 0x2c
 800e168:	461c      	mov	r4, r3
 800e16a:	4616      	mov	r6, r2
 800e16c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e16e:	1bf3      	subs	r3, r6, r7
 800e170:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800e172:	42bb      	cmp	r3, r7
 800e174:	f280 835d 	bge.w	800e832 <_DrawBitmap+0x6d6>
 800e178:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800e17a:	2f04      	cmp	r7, #4
 800e17c:	f000 81b5 	beq.w	800e4ea <_DrawBitmap+0x38e>
 800e180:	dc05      	bgt.n	800e18e <_DrawBitmap+0x32>
 800e182:	2f01      	cmp	r7, #1
 800e184:	d00e      	beq.n	800e1a4 <_DrawBitmap+0x48>
 800e186:	2f02      	cmp	r7, #2
 800e188:	f000 80e1 	beq.w	800e34e <_DrawBitmap+0x1f2>
 800e18c:	e34b      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e18e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800e190:	2f10      	cmp	r7, #16
 800e192:	f000 82d8 	beq.w	800e746 <_DrawBitmap+0x5ea>
 800e196:	2f20      	cmp	r7, #32
 800e198:	f000 830e 	beq.w	800e7b8 <_DrawBitmap+0x65c>
 800e19c:	2f08      	cmp	r7, #8
 800e19e:	f040 8342 	bne.w	800e826 <_DrawBitmap+0x6ca>
 800e1a2:	e268      	b.n	800e676 <_DrawBitmap+0x51a>
 800e1a4:	4bb9      	ldr	r3, [pc, #740]	; (800e48c <_DrawBitmap+0x330>)
 800e1a6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f8d7 b000 	ldr.w	fp, [r7]
 800e1ae:	7c1b      	ldrb	r3, [r3, #16]
 800e1b0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800e1b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e1b8:	9f05      	ldr	r7, [sp, #20]
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	44b8      	add	r8, r7
 800e1c2:	d04c      	beq.n	800e25e <_DrawBitmap+0x102>
 800e1c4:	2b03      	cmp	r3, #3
 800e1c6:	f000 808e 	beq.w	800e2e6 <_DrawBitmap+0x18a>
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	f000 808b 	beq.w	800e2e6 <_DrawBitmap+0x18a>
 800e1d0:	682b      	ldr	r3, [r5, #0]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	e893 0280 	ldmia.w	r3, {r7, r9}
 800e1d8:	4bad      	ldr	r3, [pc, #692]	; (800e490 <_DrawBitmap+0x334>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	4bad      	ldr	r3, [pc, #692]	; (800e494 <_DrawBitmap+0x338>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	9301      	str	r3, [sp, #4]
 800e1e4:	4641      	mov	r1, r8
 800e1e6:	4623      	mov	r3, r4
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7ff fed6 	bl	800dfa0 <_GetLine>
 800e1f4:	4658      	mov	r0, fp
 800e1f6:	47c8      	blx	r9
 800e1f8:	4683      	mov	fp, r0
 800e1fa:	4650      	mov	r0, sl
 800e1fc:	47c8      	blx	r9
 800e1fe:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e202:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e204:	4684      	mov	ip, r0
 800e206:	46a2      	mov	sl, r4
 800e208:	7819      	ldrb	r1, [r3, #0]
 800e20a:	2280      	movs	r2, #128	; 0x80
 800e20c:	fa42 f209 	asr.w	r2, r2, r9
 800e210:	4211      	tst	r1, r2
 800e212:	49a0      	ldr	r1, [pc, #640]	; (800e494 <_DrawBitmap+0x338>)
 800e214:	ebca 0204 	rsb	r2, sl, r4
 800e218:	6809      	ldr	r1, [r1, #0]
 800e21a:	bf0c      	ite	eq
 800e21c:	4658      	moveq	r0, fp
 800e21e:	4660      	movne	r0, ip
 800e220:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800e224:	9208      	str	r2, [sp, #32]
 800e226:	9307      	str	r3, [sp, #28]
 800e228:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e22c:	f7ff fe30 	bl	800de90 <_MixColors>
 800e230:	4997      	ldr	r1, [pc, #604]	; (800e490 <_DrawBitmap+0x334>)
 800e232:	6809      	ldr	r1, [r1, #0]
 800e234:	9104      	str	r1, [sp, #16]
 800e236:	f109 0901 	add.w	r9, r9, #1
 800e23a:	47b8      	blx	r7
 800e23c:	9b07      	ldr	r3, [sp, #28]
 800e23e:	9a08      	ldr	r2, [sp, #32]
 800e240:	9904      	ldr	r1, [sp, #16]
 800e242:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e246:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800e24a:	f1b9 0f08 	cmp.w	r9, #8
 800e24e:	bf04      	itt	eq
 800e250:	3301      	addeq	r3, #1
 800e252:	f04f 0900 	moveq.w	r9, #0
 800e256:	f1ba 0a01 	subs.w	sl, sl, #1
 800e25a:	d1d5      	bne.n	800e208 <_DrawBitmap+0xac>
 800e25c:	e040      	b.n	800e2e0 <_DrawBitmap+0x184>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	691b      	ldr	r3, [r3, #16]
 800e262:	e893 0280 	ldmia.w	r3, {r7, r9}
 800e266:	4b8a      	ldr	r3, [pc, #552]	; (800e490 <_DrawBitmap+0x334>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	4b89      	ldr	r3, [pc, #548]	; (800e494 <_DrawBitmap+0x338>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	9301      	str	r3, [sp, #4]
 800e272:	4632      	mov	r2, r6
 800e274:	f8cd 9008 	str.w	r9, [sp, #8]
 800e278:	4628      	mov	r0, r5
 800e27a:	4641      	mov	r1, r8
 800e27c:	4623      	mov	r3, r4
 800e27e:	f7ff fe8f 	bl	800dfa0 <_GetLine>
 800e282:	4650      	mov	r0, sl
 800e284:	47c8      	blx	r9
 800e286:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e28a:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800e28e:	4602      	mov	r2, r0
 800e290:	46a2      	mov	sl, r4
 800e292:	f89b 1000 	ldrb.w	r1, [fp]
 800e296:	2380      	movs	r3, #128	; 0x80
 800e298:	fa43 f309 	asr.w	r3, r3, r9
 800e29c:	4219      	tst	r1, r3
 800e29e:	d013      	beq.n	800e2c8 <_DrawBitmap+0x16c>
 800e2a0:	497c      	ldr	r1, [pc, #496]	; (800e494 <_DrawBitmap+0x338>)
 800e2a2:	ebca 0304 	rsb	r3, sl, r4
 800e2a6:	6809      	ldr	r1, [r1, #0]
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e2ae:	9208      	str	r2, [sp, #32]
 800e2b0:	9307      	str	r3, [sp, #28]
 800e2b2:	f7ff fded 	bl	800de90 <_MixColors>
 800e2b6:	4976      	ldr	r1, [pc, #472]	; (800e490 <_DrawBitmap+0x334>)
 800e2b8:	6809      	ldr	r1, [r1, #0]
 800e2ba:	9104      	str	r1, [sp, #16]
 800e2bc:	47b8      	blx	r7
 800e2be:	9b07      	ldr	r3, [sp, #28]
 800e2c0:	9904      	ldr	r1, [sp, #16]
 800e2c2:	9a08      	ldr	r2, [sp, #32]
 800e2c4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800e2c8:	f109 0901 	add.w	r9, r9, #1
 800e2cc:	f1b9 0f08 	cmp.w	r9, #8
 800e2d0:	bf04      	itt	eq
 800e2d2:	f10b 0b01 	addeq.w	fp, fp, #1
 800e2d6:	f04f 0900 	moveq.w	r9, #0
 800e2da:	f1ba 0a01 	subs.w	sl, sl, #1
 800e2de:	d1d8      	bne.n	800e292 <_DrawBitmap+0x136>
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	4641      	mov	r1, r8
 800e2e4:	e29b      	b.n	800e81e <_DrawBitmap+0x6c2>
 800e2e6:	692b      	ldr	r3, [r5, #16]
 800e2e8:	689b      	ldr	r3, [r3, #8]
 800e2ea:	4798      	blx	r3
 800e2ec:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e2f0:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800e2f4:	4683      	mov	fp, r0
 800e2f6:	46a2      	mov	sl, r4
 800e2f8:	f89c 1000 	ldrb.w	r1, [ip]
 800e2fc:	2280      	movs	r2, #128	; 0x80
 800e2fe:	fa42 f209 	asr.w	r2, r2, r9
 800e302:	eb08 0304 	add.w	r3, r8, r4
 800e306:	4211      	tst	r1, r2
 800e308:	ebca 0303 	rsb	r3, sl, r3
 800e30c:	d012      	beq.n	800e334 <_DrawBitmap+0x1d8>
 800e30e:	4619      	mov	r1, r3
 800e310:	4632      	mov	r2, r6
 800e312:	4628      	mov	r0, r5
 800e314:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e318:	9307      	str	r3, [sp, #28]
 800e31a:	f7ff fbf3 	bl	800db04 <_GetPixelIndex>
 800e31e:	9b07      	ldr	r3, [sp, #28]
 800e320:	ea80 0e0b 	eor.w	lr, r0, fp
 800e324:	4619      	mov	r1, r3
 800e326:	4628      	mov	r0, r5
 800e328:	4632      	mov	r2, r6
 800e32a:	4673      	mov	r3, lr
 800e32c:	f7ff fdd8 	bl	800dee0 <_SetPixelIndex>
 800e330:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e334:	f109 0901 	add.w	r9, r9, #1
 800e338:	f1b9 0f08 	cmp.w	r9, #8
 800e33c:	bf04      	itt	eq
 800e33e:	f10c 0c01 	addeq.w	ip, ip, #1
 800e342:	f04f 0900 	moveq.w	r9, #0
 800e346:	f1ba 0a01 	subs.w	sl, sl, #1
 800e34a:	d1d5      	bne.n	800e2f8 <_DrawBitmap+0x19c>
 800e34c:	e26b      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e34e:	4b4f      	ldr	r3, [pc, #316]	; (800e48c <_DrawBitmap+0x330>)
 800e350:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f897 8000 	ldrb.w	r8, [r7]
 800e358:	7c1b      	ldrb	r3, [r3, #16]
 800e35a:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e35e:	9f05      	ldr	r7, [sp, #20]
 800e360:	f013 0303 	ands.w	r3, r3, #3
 800e364:	44b9      	add	r9, r7
 800e366:	d002      	beq.n	800e36e <_DrawBitmap+0x212>
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d05b      	beq.n	800e424 <_DrawBitmap+0x2c8>
 800e36c:	e25b      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e36e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e370:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e374:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800e378:	4649      	mov	r1, r9
 800e37a:	b387      	cbz	r7, 800e3de <_DrawBitmap+0x282>
 800e37c:	f1ca 0303 	rsb	r3, sl, #3
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	f1c3 0206 	rsb	r2, r3, #6
 800e386:	20c0      	movs	r0, #192	; 0xc0
 800e388:	fa40 f202 	asr.w	r2, r0, r2
 800e38c:	ea02 0208 	and.w	r2, r2, r8
 800e390:	fa22 f303 	lsr.w	r3, r2, r3
 800e394:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e396:	f101 0c01 	add.w	ip, r1, #1
 800e39a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e39e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	f10a 0a01 	add.w	sl, sl, #1
 800e3aa:	f7ff fd99 	bl	800dee0 <_SetPixelIndex>
 800e3ae:	f1ba 0f04 	cmp.w	sl, #4
 800e3b2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e3b6:	d105      	bne.n	800e3c4 <_DrawBitmap+0x268>
 800e3b8:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800e3bc:	f04f 0a00 	mov.w	sl, #0
 800e3c0:	f10b 0b01 	add.w	fp, fp, #1
 800e3c4:	eb09 0304 	add.w	r3, r9, r4
 800e3c8:	4563      	cmp	r3, ip
 800e3ca:	f000 822c 	beq.w	800e826 <_DrawBitmap+0x6ca>
 800e3ce:	4661      	mov	r1, ip
 800e3d0:	e7d4      	b.n	800e37c <_DrawBitmap+0x220>
 800e3d2:	eb09 0304 	add.w	r3, r9, r4
 800e3d6:	4563      	cmp	r3, ip
 800e3d8:	f000 8225 	beq.w	800e826 <_DrawBitmap+0x6ca>
 800e3dc:	4661      	mov	r1, ip
 800e3de:	f1ca 0e03 	rsb	lr, sl, #3
 800e3e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800e3e6:	f1ce 0306 	rsb	r3, lr, #6
 800e3ea:	22c0      	movs	r2, #192	; 0xc0
 800e3ec:	fa42 f303 	asr.w	r3, r2, r3
 800e3f0:	ea03 0308 	and.w	r3, r3, r8
 800e3f4:	f101 0c01 	add.w	ip, r1, #1
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	4632      	mov	r2, r6
 800e3fc:	fa23 f30e 	lsr.w	r3, r3, lr
 800e400:	f10a 0a01 	add.w	sl, sl, #1
 800e404:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e408:	f7ff fd6a 	bl	800dee0 <_SetPixelIndex>
 800e40c:	f1ba 0f04 	cmp.w	sl, #4
 800e410:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e414:	d1dd      	bne.n	800e3d2 <_DrawBitmap+0x276>
 800e416:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800e41a:	f04f 0a00 	mov.w	sl, #0
 800e41e:	f10b 0b01 	add.w	fp, fp, #1
 800e422:	e7d6      	b.n	800e3d2 <_DrawBitmap+0x276>
 800e424:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e426:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e42a:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800e42e:	46a3      	mov	fp, r4
 800e430:	2f00      	cmp	r7, #0
 800e432:	d040      	beq.n	800e4b6 <_DrawBitmap+0x35a>
 800e434:	f1ca 0303 	rsb	r3, sl, #3
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	f1c3 0206 	rsb	r2, r3, #6
 800e43e:	20c0      	movs	r0, #192	; 0xc0
 800e440:	fa40 f202 	asr.w	r2, r0, r2
 800e444:	ea02 0208 	and.w	r2, r2, r8
 800e448:	eb09 0104 	add.w	r1, r9, r4
 800e44c:	fa32 f303 	lsrs.w	r3, r2, r3
 800e450:	ebcb 0101 	rsb	r1, fp, r1
 800e454:	d00a      	beq.n	800e46c <_DrawBitmap+0x310>
 800e456:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e458:	4628      	mov	r0, r5
 800e45a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e45e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e462:	4632      	mov	r2, r6
 800e464:	f7ff fd3c 	bl	800dee0 <_SetPixelIndex>
 800e468:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e46c:	f10a 0a01 	add.w	sl, sl, #1
 800e470:	f1ba 0f04 	cmp.w	sl, #4
 800e474:	d105      	bne.n	800e482 <_DrawBitmap+0x326>
 800e476:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800e47a:	f04f 0a00 	mov.w	sl, #0
 800e47e:	f10c 0c01 	add.w	ip, ip, #1
 800e482:	f1bb 0b01 	subs.w	fp, fp, #1
 800e486:	d1d5      	bne.n	800e434 <_DrawBitmap+0x2d8>
 800e488:	e1cd      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e48a:	bf00      	nop
 800e48c:	20000034 	.word	0x20000034
 800e490:	20026800 	.word	0x20026800
 800e494:	200267fc 	.word	0x200267fc
 800e498:	f10a 0a01 	add.w	sl, sl, #1
 800e49c:	f1ba 0f04 	cmp.w	sl, #4
 800e4a0:	d105      	bne.n	800e4ae <_DrawBitmap+0x352>
 800e4a2:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800e4a6:	f04f 0a00 	mov.w	sl, #0
 800e4aa:	f10c 0c01 	add.w	ip, ip, #1
 800e4ae:	f1bb 0b01 	subs.w	fp, fp, #1
 800e4b2:	f000 81b8 	beq.w	800e826 <_DrawBitmap+0x6ca>
 800e4b6:	f1ca 0303 	rsb	r3, sl, #3
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	f1c3 0206 	rsb	r2, r3, #6
 800e4c0:	20c0      	movs	r0, #192	; 0xc0
 800e4c2:	fa40 f202 	asr.w	r2, r0, r2
 800e4c6:	ea02 0208 	and.w	r2, r2, r8
 800e4ca:	eb09 0104 	add.w	r1, r9, r4
 800e4ce:	fa32 f303 	lsrs.w	r3, r2, r3
 800e4d2:	ebcb 0101 	rsb	r1, fp, r1
 800e4d6:	d0df      	beq.n	800e498 <_DrawBitmap+0x33c>
 800e4d8:	4628      	mov	r0, r5
 800e4da:	4632      	mov	r2, r6
 800e4dc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e4e0:	f7ff fcfe 	bl	800dee0 <_SetPixelIndex>
 800e4e4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e4e8:	e7d6      	b.n	800e498 <_DrawBitmap+0x33c>
 800e4ea:	4bb0      	ldr	r3, [pc, #704]	; (800e7ac <_DrawBitmap+0x650>)
 800e4ec:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f897 8000 	ldrb.w	r8, [r7]
 800e4f4:	7c1b      	ldrb	r3, [r3, #16]
 800e4f6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800e4fa:	9f05      	ldr	r7, [sp, #20]
 800e4fc:	f013 0303 	ands.w	r3, r3, #3
 800e500:	44b9      	add	r9, r7
 800e502:	d002      	beq.n	800e50a <_DrawBitmap+0x3ae>
 800e504:	2b02      	cmp	r3, #2
 800e506:	d05b      	beq.n	800e5c0 <_DrawBitmap+0x464>
 800e508:	e18d      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e50a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e50c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e510:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 800e514:	4649      	mov	r1, r9
 800e516:	b387      	cbz	r7, 800e57a <_DrawBitmap+0x41e>
 800e518:	f1ca 0301 	rsb	r3, sl, #1
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	f1c3 0204 	rsb	r2, r3, #4
 800e522:	20f0      	movs	r0, #240	; 0xf0
 800e524:	fa40 f202 	asr.w	r2, r0, r2
 800e528:	ea02 0208 	and.w	r2, r2, r8
 800e52c:	fa22 f303 	lsr.w	r3, r2, r3
 800e530:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e532:	f101 0c01 	add.w	ip, r1, #1
 800e536:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e53a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e53e:	4628      	mov	r0, r5
 800e540:	4632      	mov	r2, r6
 800e542:	f10a 0a01 	add.w	sl, sl, #1
 800e546:	f7ff fccb 	bl	800dee0 <_SetPixelIndex>
 800e54a:	f1ba 0f02 	cmp.w	sl, #2
 800e54e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e552:	d105      	bne.n	800e560 <_DrawBitmap+0x404>
 800e554:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800e558:	f04f 0a00 	mov.w	sl, #0
 800e55c:	f10b 0b01 	add.w	fp, fp, #1
 800e560:	eb09 0304 	add.w	r3, r9, r4
 800e564:	4563      	cmp	r3, ip
 800e566:	f000 815e 	beq.w	800e826 <_DrawBitmap+0x6ca>
 800e56a:	4661      	mov	r1, ip
 800e56c:	e7d4      	b.n	800e518 <_DrawBitmap+0x3bc>
 800e56e:	eb09 0304 	add.w	r3, r9, r4
 800e572:	4563      	cmp	r3, ip
 800e574:	f000 8157 	beq.w	800e826 <_DrawBitmap+0x6ca>
 800e578:	4661      	mov	r1, ip
 800e57a:	f1ca 0e01 	rsb	lr, sl, #1
 800e57e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800e582:	f1ce 0304 	rsb	r3, lr, #4
 800e586:	22f0      	movs	r2, #240	; 0xf0
 800e588:	fa42 f303 	asr.w	r3, r2, r3
 800e58c:	ea03 0308 	and.w	r3, r3, r8
 800e590:	f101 0c01 	add.w	ip, r1, #1
 800e594:	4628      	mov	r0, r5
 800e596:	4632      	mov	r2, r6
 800e598:	fa23 f30e 	lsr.w	r3, r3, lr
 800e59c:	f10a 0a01 	add.w	sl, sl, #1
 800e5a0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e5a4:	f7ff fc9c 	bl	800dee0 <_SetPixelIndex>
 800e5a8:	f1ba 0f02 	cmp.w	sl, #2
 800e5ac:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e5b0:	d1dd      	bne.n	800e56e <_DrawBitmap+0x412>
 800e5b2:	f89b 8001 	ldrb.w	r8, [fp, #1]
 800e5b6:	f04f 0a00 	mov.w	sl, #0
 800e5ba:	f10b 0b01 	add.w	fp, fp, #1
 800e5be:	e7d6      	b.n	800e56e <_DrawBitmap+0x412>
 800e5c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e5c2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e5c6:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800e5ca:	46a3      	mov	fp, r4
 800e5cc:	b3cf      	cbz	r7, 800e642 <_DrawBitmap+0x4e6>
 800e5ce:	f1ca 0301 	rsb	r3, sl, #1
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	f1c3 0204 	rsb	r2, r3, #4
 800e5d8:	20f0      	movs	r0, #240	; 0xf0
 800e5da:	fa40 f202 	asr.w	r2, r0, r2
 800e5de:	ea02 0208 	and.w	r2, r2, r8
 800e5e2:	eb09 0104 	add.w	r1, r9, r4
 800e5e6:	fa32 f303 	lsrs.w	r3, r2, r3
 800e5ea:	ebcb 0101 	rsb	r1, fp, r1
 800e5ee:	d00a      	beq.n	800e606 <_DrawBitmap+0x4aa>
 800e5f0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e5f8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e5fc:	4632      	mov	r2, r6
 800e5fe:	f7ff fc6f 	bl	800dee0 <_SetPixelIndex>
 800e602:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e606:	f10a 0a01 	add.w	sl, sl, #1
 800e60a:	f1ba 0f02 	cmp.w	sl, #2
 800e60e:	d105      	bne.n	800e61c <_DrawBitmap+0x4c0>
 800e610:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800e614:	f04f 0a00 	mov.w	sl, #0
 800e618:	f10c 0c01 	add.w	ip, ip, #1
 800e61c:	f1bb 0b01 	subs.w	fp, fp, #1
 800e620:	d1d5      	bne.n	800e5ce <_DrawBitmap+0x472>
 800e622:	e100      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e624:	f10a 0a01 	add.w	sl, sl, #1
 800e628:	f1ba 0f02 	cmp.w	sl, #2
 800e62c:	d105      	bne.n	800e63a <_DrawBitmap+0x4de>
 800e62e:	f89c 8001 	ldrb.w	r8, [ip, #1]
 800e632:	f04f 0a00 	mov.w	sl, #0
 800e636:	f10c 0c01 	add.w	ip, ip, #1
 800e63a:	f1bb 0b01 	subs.w	fp, fp, #1
 800e63e:	f000 80f2 	beq.w	800e826 <_DrawBitmap+0x6ca>
 800e642:	f1ca 0301 	rsb	r3, sl, #1
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	f1c3 0204 	rsb	r2, r3, #4
 800e64c:	20f0      	movs	r0, #240	; 0xf0
 800e64e:	fa40 f202 	asr.w	r2, r0, r2
 800e652:	ea02 0208 	and.w	r2, r2, r8
 800e656:	eb09 0104 	add.w	r1, r9, r4
 800e65a:	fa32 f303 	lsrs.w	r3, r2, r3
 800e65e:	ebcb 0101 	rsb	r1, fp, r1
 800e662:	d0df      	beq.n	800e624 <_DrawBitmap+0x4c8>
 800e664:	4628      	mov	r0, r5
 800e666:	4632      	mov	r2, r6
 800e668:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e66c:	f7ff fc38 	bl	800dee0 <_SetPixelIndex>
 800e670:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800e674:	e7d6      	b.n	800e624 <_DrawBitmap+0x4c8>
 800e676:	4b4d      	ldr	r3, [pc, #308]	; (800e7ac <_DrawBitmap+0x650>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	7c1b      	ldrb	r3, [r3, #16]
 800e67c:	f013 0303 	ands.w	r3, r3, #3
 800e680:	d002      	beq.n	800e688 <_DrawBitmap+0x52c>
 800e682:	2b02      	cmp	r3, #2
 800e684:	d02f      	beq.n	800e6e6 <_DrawBitmap+0x58a>
 800e686:	e0ce      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e688:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e68a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e68e:	b1b7      	cbz	r7, 800e6be <_DrawBitmap+0x562>
 800e690:	9b05      	ldr	r3, [sp, #20]
 800e692:	4423      	add	r3, r4
 800e694:	ebc8 0303 	rsb	r3, r8, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f340 80c4 	ble.w	800e826 <_DrawBitmap+0x6ca>
 800e69e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e6a0:	9905      	ldr	r1, [sp, #20]
 800e6a2:	1a7b      	subs	r3, r7, r1
 800e6a4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e6a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e6aa:	4641      	mov	r1, r8
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	4632      	mov	r2, r6
 800e6b0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e6b4:	f7ff fc14 	bl	800dee0 <_SetPixelIndex>
 800e6b8:	f108 0801 	add.w	r8, r8, #1
 800e6bc:	e7e8      	b.n	800e690 <_DrawBitmap+0x534>
 800e6be:	9b05      	ldr	r3, [sp, #20]
 800e6c0:	4423      	add	r3, r4
 800e6c2:	ebc8 0303 	rsb	r3, r8, r3
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f340 80ad 	ble.w	800e826 <_DrawBitmap+0x6ca>
 800e6cc:	9905      	ldr	r1, [sp, #20]
 800e6ce:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e6d0:	1a7b      	subs	r3, r7, r1
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	4641      	mov	r1, r8
 800e6d6:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e6da:	4632      	mov	r2, r6
 800e6dc:	f7ff fc00 	bl	800dee0 <_SetPixelIndex>
 800e6e0:	f108 0801 	add.w	r8, r8, #1
 800e6e4:	e7eb      	b.n	800e6be <_DrawBitmap+0x562>
 800e6e6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e6e8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e6ec:	b327      	cbz	r7, 800e738 <_DrawBitmap+0x5dc>
 800e6ee:	9b05      	ldr	r3, [sp, #20]
 800e6f0:	4423      	add	r3, r4
 800e6f2:	ebc8 0303 	rsb	r3, r8, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f340 8095 	ble.w	800e826 <_DrawBitmap+0x6ca>
 800e6fc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e6fe:	9905      	ldr	r1, [sp, #20]
 800e700:	1a7b      	subs	r3, r7, r1
 800e702:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e706:	b13b      	cbz	r3, 800e718 <_DrawBitmap+0x5bc>
 800e708:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800e70a:	4628      	mov	r0, r5
 800e70c:	4641      	mov	r1, r8
 800e70e:	4632      	mov	r2, r6
 800e710:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800e714:	f7ff fbe4 	bl	800dee0 <_SetPixelIndex>
 800e718:	f108 0801 	add.w	r8, r8, #1
 800e71c:	e7e7      	b.n	800e6ee <_DrawBitmap+0x592>
 800e71e:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e720:	9905      	ldr	r1, [sp, #20]
 800e722:	1a7b      	subs	r3, r7, r1
 800e724:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e728:	b123      	cbz	r3, 800e734 <_DrawBitmap+0x5d8>
 800e72a:	4628      	mov	r0, r5
 800e72c:	4641      	mov	r1, r8
 800e72e:	4632      	mov	r2, r6
 800e730:	f7ff fbd6 	bl	800dee0 <_SetPixelIndex>
 800e734:	f108 0801 	add.w	r8, r8, #1
 800e738:	9b05      	ldr	r3, [sp, #20]
 800e73a:	4423      	add	r3, r4
 800e73c:	ebc8 0303 	rsb	r3, r8, r3
 800e740:	2b00      	cmp	r3, #0
 800e742:	dcec      	bgt.n	800e71e <_DrawBitmap+0x5c2>
 800e744:	e06f      	b.n	800e826 <_DrawBitmap+0x6ca>
 800e746:	682b      	ldr	r3, [r5, #0]
 800e748:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800e7b0 <_DrawBitmap+0x654>
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e7b4 <_DrawBitmap+0x658>
 800e752:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e756:	f8d3 a000 	ldr.w	sl, [r3]
 800e75a:	f8d8 3000 	ldr.w	r3, [r8]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	f8db 3000 	ldr.w	r3, [fp]
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	4632      	mov	r2, r6
 800e768:	4623      	mov	r3, r4
 800e76a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e76e:	4628      	mov	r0, r5
 800e770:	9905      	ldr	r1, [sp, #20]
 800e772:	f7ff fc15 	bl	800dfa0 <_GetLine>
 800e776:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e778:	f8db 3000 	ldr.w	r3, [fp]
 800e77c:	f8d8 b000 	ldr.w	fp, [r8]
 800e780:	46a0      	mov	r8, r4
 800e782:	f853 1b04 	ldr.w	r1, [r3], #4
 800e786:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e78a:	9208      	str	r2, [sp, #32]
 800e78c:	9307      	str	r3, [sp, #28]
 800e78e:	9109      	str	r1, [sp, #36]	; 0x24
 800e790:	47c8      	blx	r9
 800e792:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e794:	f7ff fb7c 	bl	800de90 <_MixColors>
 800e798:	47d0      	blx	sl
 800e79a:	f1b8 0801 	subs.w	r8, r8, #1
 800e79e:	f84b 0b04 	str.w	r0, [fp], #4
 800e7a2:	9a08      	ldr	r2, [sp, #32]
 800e7a4:	9b07      	ldr	r3, [sp, #28]
 800e7a6:	d1ec      	bne.n	800e782 <_DrawBitmap+0x626>
 800e7a8:	e037      	b.n	800e81a <_DrawBitmap+0x6be>
 800e7aa:	bf00      	nop
 800e7ac:	20000034 	.word	0x20000034
 800e7b0:	20026800 	.word	0x20026800
 800e7b4:	200267fc 	.word	0x200267fc
 800e7b8:	682b      	ldr	r3, [r5, #0]
 800e7ba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800e838 <_DrawBitmap+0x6dc>
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e83c <_DrawBitmap+0x6e0>
 800e7c4:	9905      	ldr	r1, [sp, #20]
 800e7c6:	e893 0280 	ldmia.w	r3, {r7, r9}
 800e7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	f8db 3000 	ldr.w	r3, [fp]
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e7da:	4623      	mov	r3, r4
 800e7dc:	4628      	mov	r0, r5
 800e7de:	4632      	mov	r2, r6
 800e7e0:	f7ff fbde 	bl	800dfa0 <_GetLine>
 800e7e4:	46a2      	mov	sl, r4
 800e7e6:	f8db 3000 	ldr.w	r3, [fp]
 800e7ea:	f8d8 b000 	ldr.w	fp, [r8]
 800e7ee:	f04f 0800 	mov.w	r8, #0
 800e7f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e7f4:	f853 1008 	ldr.w	r1, [r3, r8]
 800e7f8:	f852 0008 	ldr.w	r0, [r2, r8]
 800e7fc:	9307      	str	r3, [sp, #28]
 800e7fe:	9109      	str	r1, [sp, #36]	; 0x24
 800e800:	47c8      	blx	r9
 800e802:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e804:	f7ff fb44 	bl	800de90 <_MixColors>
 800e808:	47b8      	blx	r7
 800e80a:	f1ba 0a01 	subs.w	sl, sl, #1
 800e80e:	f84b 0008 	str.w	r0, [fp, r8]
 800e812:	9b07      	ldr	r3, [sp, #28]
 800e814:	f108 0804 	add.w	r8, r8, #4
 800e818:	d1eb      	bne.n	800e7f2 <_DrawBitmap+0x696>
 800e81a:	9905      	ldr	r1, [sp, #20]
 800e81c:	4628      	mov	r0, r5
 800e81e:	4632      	mov	r2, r6
 800e820:	4623      	mov	r3, r4
 800e822:	f7ff fc13 	bl	800e04c <_DrawBitmapLine.isra.6>
 800e826:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800e828:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e82a:	440f      	add	r7, r1
 800e82c:	9719      	str	r7, [sp, #100]	; 0x64
 800e82e:	3601      	adds	r6, #1
 800e830:	e49c      	b.n	800e16c <_DrawBitmap+0x10>
 800e832:	b00d      	add	sp, #52	; 0x34
 800e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e838:	20026800 	.word	0x20026800
 800e83c:	200267fc 	.word	0x200267fc

0800e840 <GUI_GetCursorLayer>:
 800e840:	2801      	cmp	r0, #1
 800e842:	bf9a      	itte	ls
 800e844:	4b02      	ldrls	r3, [pc, #8]	; (800e850 <GUI_GetCursorLayer+0x10>)
 800e846:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800e84a:	2000      	movhi	r0, #0
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	2002680c 	.word	0x2002680c

0800e854 <GUI_GetLayerPosEx>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	460d      	mov	r5, r1
 800e858:	4614      	mov	r4, r2
 800e85a:	f7fe f9b5 	bl	800cbc8 <LCD_GetPosEx>
 800e85e:	b110      	cbz	r0, 800e866 <GUI_GetLayerPosEx+0x12>
 800e860:	2300      	movs	r3, #0
 800e862:	602b      	str	r3, [r5, #0]
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}

0800e868 <GUI_SelectLayer>:
 800e868:	b570      	push	{r4, r5, r6, lr}
 800e86a:	4d08      	ldr	r5, [pc, #32]	; (800e88c <GUI_SelectLayer+0x24>)
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	2801      	cmp	r0, #1
 800e870:	4604      	mov	r4, r0
 800e872:	7c5e      	ldrb	r6, [r3, #17]
 800e874:	d808      	bhi.n	800e888 <GUI_SelectLayer+0x20>
 800e876:	f000 ff69 	bl	800f74c <GUI_DEVICE__GetpDriver>
 800e87a:	b128      	cbz	r0, 800e888 <GUI_SelectLayer+0x20>
 800e87c:	682b      	ldr	r3, [r5, #0]
 800e87e:	745c      	strb	r4, [r3, #17]
 800e880:	f000 f80a 	bl	800e898 <GUI_SelectLCD>
 800e884:	4b02      	ldr	r3, [pc, #8]	; (800e890 <GUI_SelectLayer+0x28>)
 800e886:	601c      	str	r4, [r3, #0]
 800e888:	4630      	mov	r0, r6
 800e88a:	bd70      	pop	{r4, r5, r6, pc}
 800e88c:	20000034 	.word	0x20000034
 800e890:	20026ce4 	.word	0x20026ce4

0800e894 <GUI_SetLayerPosEx>:
 800e894:	f7fe b968 	b.w	800cb68 <LCD_SetPosEx>

0800e898 <GUI_SelectLCD>:
 800e898:	b508      	push	{r3, lr}
 800e89a:	f002 ff89 	bl	80117b0 <LCD_SelectLCD>
 800e89e:	f7fe f8f3 	bl	800ca88 <LCD_UpdateColorIndices>
 800e8a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e8a6:	f7fc bc85 	b.w	800b1b4 <WM_Activate>

0800e8aa <GUI_RectsIntersect>:
 800e8aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e8ae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	dc14      	bgt.n	800e8e0 <GUI_RectsIntersect+0x36>
 800e8b6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800e8ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	dc0e      	bgt.n	800e8e0 <GUI_RectsIntersect+0x36>
 800e8c2:	f9b0 2000 	ldrsh.w	r2, [r0]
 800e8c6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	dc08      	bgt.n	800e8e0 <GUI_RectsIntersect+0x36>
 800e8ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e8d2:	f9b1 2000 	ldrsh.w	r2, [r1]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	bfcc      	ite	gt
 800e8da:	2000      	movgt	r0, #0
 800e8dc:	2001      	movle	r0, #1
 800e8de:	4770      	bx	lr
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	4770      	bx	lr

0800e8e4 <GUI_PID_GetState>:
 800e8e4:	4a11      	ldr	r2, [pc, #68]	; (800e92c <GUI_PID_GetState+0x48>)
 800e8e6:	4912      	ldr	r1, [pc, #72]	; (800e930 <GUI_PID_GetState+0x4c>)
 800e8e8:	6813      	ldr	r3, [r2, #0]
 800e8ea:	6809      	ldr	r1, [r1, #0]
 800e8ec:	428b      	cmp	r3, r1
 800e8ee:	b570      	push	{r4, r5, r6, lr}
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	4616      	mov	r6, r2
 800e8f4:	4d0f      	ldr	r5, [pc, #60]	; (800e934 <GUI_PID_GetState+0x50>)
 800e8f6:	d109      	bne.n	800e90c <GUI_PID_GetState+0x28>
 800e8f8:	42ab      	cmp	r3, r5
 800e8fa:	bf06      	itte	eq
 800e8fc:	333c      	addeq	r3, #60	; 0x3c
 800e8fe:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 800e902:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 800e906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e90a:	e00a      	b.n	800e922 <GUI_PID_GetState+0x3e>
 800e90c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e914:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800e918:	4293      	cmp	r3, r2
 800e91a:	bf18      	it	ne
 800e91c:	f103 050c 	addne.w	r5, r3, #12
 800e920:	6035      	str	r5, [r6, #0]
 800e922:	7a20      	ldrb	r0, [r4, #8]
 800e924:	3000      	adds	r0, #0
 800e926:	bf18      	it	ne
 800e928:	2001      	movne	r0, #1
 800e92a:	bd70      	pop	{r4, r5, r6, pc}
 800e92c:	2000002c 	.word	0x2000002c
 800e930:	20000028 	.word	0x20000028
 800e934:	20026818 	.word	0x20026818

0800e938 <GUI_PID_StoreState>:
 800e938:	4a21      	ldr	r2, [pc, #132]	; (800e9c0 <GUI_PID_StoreState+0x88>)
 800e93a:	4922      	ldr	r1, [pc, #136]	; (800e9c4 <GUI_PID_StoreState+0x8c>)
 800e93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e940:	6011      	str	r1, [r2, #0]
 800e942:	4f21      	ldr	r7, [pc, #132]	; (800e9c8 <GUI_PID_StoreState+0x90>)
 800e944:	4921      	ldr	r1, [pc, #132]	; (800e9cc <GUI_PID_StoreState+0x94>)
 800e946:	683a      	ldr	r2, [r7, #0]
 800e948:	680c      	ldr	r4, [r1, #0]
 800e94a:	4603      	mov	r3, r0
 800e94c:	4820      	ldr	r0, [pc, #128]	; (800e9d0 <GUI_PID_StoreState+0x98>)
 800e94e:	4294      	cmp	r4, r2
 800e950:	468c      	mov	ip, r1
 800e952:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 800e956:	d017      	beq.n	800e988 <GUI_PID_StoreState+0x50>
 800e958:	4282      	cmp	r2, r0
 800e95a:	bf14      	ite	ne
 800e95c:	f1a2 010c 	subne.w	r1, r2, #12
 800e960:	4631      	moveq	r1, r6
 800e962:	7a1d      	ldrb	r5, [r3, #8]
 800e964:	f891 8008 	ldrb.w	r8, [r1, #8]
 800e968:	45a8      	cmp	r8, r5
 800e96a:	d10d      	bne.n	800e988 <GUI_PID_StoreState+0x50>
 800e96c:	428c      	cmp	r4, r1
 800e96e:	d00b      	beq.n	800e988 <GUI_PID_StoreState+0x50>
 800e970:	4281      	cmp	r1, r0
 800e972:	bf14      	ite	ne
 800e974:	390c      	subne	r1, #12
 800e976:	4917      	ldreq	r1, [pc, #92]	; (800e9d4 <GUI_PID_StoreState+0x9c>)
 800e978:	7a09      	ldrb	r1, [r1, #8]
 800e97a:	42a9      	cmp	r1, r5
 800e97c:	d104      	bne.n	800e988 <GUI_PID_StoreState+0x50>
 800e97e:	4282      	cmp	r2, r0
 800e980:	bf14      	ite	ne
 800e982:	3a0c      	subne	r2, #12
 800e984:	4a13      	ldreq	r2, [pc, #76]	; (800e9d4 <GUI_PID_StoreState+0x9c>)
 800e986:	603a      	str	r2, [r7, #0]
 800e988:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e98c:	683d      	ldr	r5, [r7, #0]
 800e98e:	42b5      	cmp	r5, r6
 800e990:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e994:	bf0c      	ite	eq
 800e996:	4d0e      	ldreq	r5, [pc, #56]	; (800e9d0 <GUI_PID_StoreState+0x98>)
 800e998:	350c      	addne	r5, #12
 800e99a:	42ac      	cmp	r4, r5
 800e99c:	603d      	str	r5, [r7, #0]
 800e99e:	d105      	bne.n	800e9ac <GUI_PID_StoreState+0x74>
 800e9a0:	42b4      	cmp	r4, r6
 800e9a2:	bf14      	ite	ne
 800e9a4:	340c      	addne	r4, #12
 800e9a6:	4c0a      	ldreq	r4, [pc, #40]	; (800e9d0 <GUI_PID_StoreState+0x98>)
 800e9a8:	f8cc 4000 	str.w	r4, [ip]
 800e9ac:	4a0a      	ldr	r2, [pc, #40]	; (800e9d8 <GUI_PID_StoreState+0xa0>)
 800e9ae:	6812      	ldr	r2, [r2, #0]
 800e9b0:	b10a      	cbz	r2, 800e9b6 <GUI_PID_StoreState+0x7e>
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	4790      	blx	r2
 800e9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ba:	f7ff b82d 	b.w	800da18 <GUI_SignalEvent>
 800e9be:	bf00      	nop
 800e9c0:	20026d50 	.word	0x20026d50
 800e9c4:	08011069 	.word	0x08011069
 800e9c8:	20000028 	.word	0x20000028
 800e9cc:	2000002c 	.word	0x2000002c
 800e9d0:	20026818 	.word	0x20026818
 800e9d4:	20026854 	.word	0x20026854
 800e9d8:	20026814 	.word	0x20026814

0800e9dc <GUI_PID_IsEmpty>:
 800e9dc:	4b03      	ldr	r3, [pc, #12]	; (800e9ec <GUI_PID_IsEmpty+0x10>)
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <GUI_PID_IsEmpty+0x14>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	1ac3      	subs	r3, r0, r3
 800e9e6:	4258      	negs	r0, r3
 800e9e8:	4158      	adcs	r0, r3
 800e9ea:	4770      	bx	lr
 800e9ec:	2000002c 	.word	0x2000002c
 800e9f0:	20000028 	.word	0x20000028

0800e9f4 <GUI_StoreKey>:
 800e9f4:	4b02      	ldr	r3, [pc, #8]	; (800ea00 <GUI_StoreKey+0xc>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	b902      	cbnz	r2, 800e9fc <GUI_StoreKey+0x8>
 800e9fa:	6018      	str	r0, [r3, #0]
 800e9fc:	f7ff b80c 	b.w	800da18 <GUI_SignalEvent>
 800ea00:	20026860 	.word	0x20026860

0800ea04 <GUI_MoveRect>:
 800ea04:	b168      	cbz	r0, 800ea22 <GUI_MoveRect+0x1e>
 800ea06:	8803      	ldrh	r3, [r0, #0]
 800ea08:	b289      	uxth	r1, r1
 800ea0a:	440b      	add	r3, r1
 800ea0c:	8003      	strh	r3, [r0, #0]
 800ea0e:	8883      	ldrh	r3, [r0, #4]
 800ea10:	4419      	add	r1, r3
 800ea12:	8843      	ldrh	r3, [r0, #2]
 800ea14:	8081      	strh	r1, [r0, #4]
 800ea16:	b292      	uxth	r2, r2
 800ea18:	4413      	add	r3, r2
 800ea1a:	8043      	strh	r3, [r0, #2]
 800ea1c:	88c3      	ldrh	r3, [r0, #6]
 800ea1e:	441a      	add	r2, r3
 800ea20:	80c2      	strh	r2, [r0, #6]
 800ea22:	4770      	bx	lr

0800ea24 <GUI_MergeRect>:
 800ea24:	b510      	push	{r4, lr}
 800ea26:	b338      	cbz	r0, 800ea78 <GUI_MergeRect+0x54>
 800ea28:	b309      	cbz	r1, 800ea6e <GUI_MergeRect+0x4a>
 800ea2a:	b30a      	cbz	r2, 800ea70 <GUI_MergeRect+0x4c>
 800ea2c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ea30:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ea34:	429c      	cmp	r4, r3
 800ea36:	bfb8      	it	lt
 800ea38:	4623      	movlt	r3, r4
 800ea3a:	8003      	strh	r3, [r0, #0]
 800ea3c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800ea40:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800ea44:	429c      	cmp	r4, r3
 800ea46:	bfb8      	it	lt
 800ea48:	4623      	movlt	r3, r4
 800ea4a:	8043      	strh	r3, [r0, #2]
 800ea4c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800ea50:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ea54:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800ea58:	429c      	cmp	r4, r3
 800ea5a:	bfa8      	it	ge
 800ea5c:	4623      	movge	r3, r4
 800ea5e:	8083      	strh	r3, [r0, #4]
 800ea60:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800ea64:	4299      	cmp	r1, r3
 800ea66:	bfa8      	it	ge
 800ea68:	460b      	movge	r3, r1
 800ea6a:	80c3      	strh	r3, [r0, #6]
 800ea6c:	bd10      	pop	{r4, pc}
 800ea6e:	4611      	mov	r1, r2
 800ea70:	680b      	ldr	r3, [r1, #0]
 800ea72:	6003      	str	r3, [r0, #0]
 800ea74:	684b      	ldr	r3, [r1, #4]
 800ea76:	6043      	str	r3, [r0, #4]
 800ea78:	bd10      	pop	{r4, pc}
	...

0800ea7c <GUI_MULTIBUF_ConfirmEx>:
 800ea7c:	4b08      	ldr	r3, [pc, #32]	; (800eaa0 <GUI_MULTIBUF_ConfirmEx+0x24>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bf18      	it	ne
 800ea84:	2000      	movne	r0, #0
 800ea86:	4b07      	ldr	r3, [pc, #28]	; (800eaa4 <GUI_MULTIBUF_ConfirmEx+0x28>)
 800ea88:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800ea8c:	2a00      	cmp	r2, #0
 800ea8e:	db06      	blt.n	800ea9e <GUI_MULTIBUF_ConfirmEx+0x22>
 800ea90:	4a05      	ldr	r2, [pc, #20]	; (800eaa8 <GUI_MULTIBUF_ConfirmEx+0x2c>)
 800ea92:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800ea96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea9a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800ea9e:	4770      	bx	lr
 800eaa0:	20026874 	.word	0x20026874
 800eaa4:	2002686c 	.word	0x2002686c
 800eaa8:	20026864 	.word	0x20026864

0800eaac <GUI_GotoXY>:
 800eaac:	4b02      	ldr	r3, [pc, #8]	; (800eab8 <GUI_GotoXY+0xc>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	8458      	strh	r0, [r3, #34]	; 0x22
 800eab2:	8499      	strh	r1, [r3, #36]	; 0x24
 800eab4:	2000      	movs	r0, #0
 800eab6:	4770      	bx	lr
 800eab8:	20000034 	.word	0x20000034

0800eabc <GUI_GetDrawMode>:
 800eabc:	4b01      	ldr	r3, [pc, #4]	; (800eac4 <GUI_GetDrawMode+0x8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	7c18      	ldrb	r0, [r3, #16]
 800eac2:	4770      	bx	lr
 800eac4:	20000034 	.word	0x20000034

0800eac8 <GUI_FillRoundedRect>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	4d2f      	ldr	r5, [pc, #188]	; (800eb8c <GUI_FillRoundedRect+0xc4>)
 800eace:	682e      	ldr	r6, [r5, #0]
 800ead0:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
 800ead2:	1947      	adds	r7, r0, r5
 800ead4:	6d30      	ldr	r0, [r6, #80]	; 0x50
 800ead6:	b087      	sub	sp, #28
 800ead8:	eb01 0800 	add.w	r8, r1, r0
 800eadc:	eb03 0a00 	add.w	sl, r3, r0
 800eae0:	eb02 0905 	add.w	r9, r2, r5
 800eae4:	a804      	add	r0, sp, #16
 800eae6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800eae8:	f8ad 7010 	strh.w	r7, [sp, #16]
 800eaec:	f8ad 9014 	strh.w	r9, [sp, #20]
 800eaf0:	f8ad 8012 	strh.w	r8, [sp, #18]
 800eaf4:	f8ad a016 	strh.w	sl, [sp, #22]
 800eaf8:	f7fc fade 	bl	800b0b8 <WM__InitIVRSearch>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	d041      	beq.n	800eb84 <GUI_FillRoundedRect+0xbc>
 800eb00:	fb04 f304 	mul.w	r3, r4, r4
 800eb04:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 800eb08:	9303      	str	r3, [sp, #12]
 800eb0a:	ebc8 030a 	rsb	r3, r8, sl
 800eb0e:	3301      	adds	r3, #1
 800eb10:	455b      	cmp	r3, fp
 800eb12:	db33      	blt.n	800eb7c <GUI_FillRoundedRect+0xb4>
 800eb14:	ebc7 0309 	rsb	r3, r7, r9
 800eb18:	3301      	adds	r3, #1
 800eb1a:	455b      	cmp	r3, fp
 800eb1c:	db2e      	blt.n	800eb7c <GUI_FillRoundedRect+0xb4>
 800eb1e:	4626      	mov	r6, r4
 800eb20:	4645      	mov	r5, r8
 800eb22:	eb08 0304 	add.w	r3, r8, r4
 800eb26:	429d      	cmp	r5, r3
 800eb28:	dc20      	bgt.n	800eb6c <GUI_FillRoundedRect+0xa4>
 800eb2a:	9b03      	ldr	r3, [sp, #12]
 800eb2c:	fb06 3016 	mls	r0, r6, r6, r3
 800eb30:	f002 ff91 	bl	8011a56 <GUI__sqrt32>
 800eb34:	eb07 0c04 	add.w	ip, r7, r4
 800eb38:	ebc4 0309 	rsb	r3, r4, r9
 800eb3c:	4403      	add	r3, r0
 800eb3e:	ebc0 0c0c 	rsb	ip, r0, ip
 800eb42:	4660      	mov	r0, ip
 800eb44:	4629      	mov	r1, r5
 800eb46:	461a      	mov	r2, r3
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	f8cd c008 	str.w	ip, [sp, #8]
 800eb4e:	f7fe fa31 	bl	800cfb4 <LCD_DrawHLine>
 800eb52:	f8dd c008 	ldr.w	ip, [sp, #8]
 800eb56:	9b01      	ldr	r3, [sp, #4]
 800eb58:	ebc4 010a 	rsb	r1, r4, sl
 800eb5c:	4431      	add	r1, r6
 800eb5e:	4660      	mov	r0, ip
 800eb60:	461a      	mov	r2, r3
 800eb62:	f7fe fa27 	bl	800cfb4 <LCD_DrawHLine>
 800eb66:	3501      	adds	r5, #1
 800eb68:	3e01      	subs	r6, #1
 800eb6a:	e7da      	b.n	800eb22 <GUI_FillRoundedRect+0x5a>
 800eb6c:	ebc4 030a 	rsb	r3, r4, sl
 800eb70:	4638      	mov	r0, r7
 800eb72:	4629      	mov	r1, r5
 800eb74:	464a      	mov	r2, r9
 800eb76:	3b01      	subs	r3, #1
 800eb78:	f7fe fa68 	bl	800d04c <LCD_FillRect>
 800eb7c:	f7fc f9da 	bl	800af34 <WM__GetNextIVR>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d1c2      	bne.n	800eb0a <GUI_FillRoundedRect+0x42>
 800eb84:	b007      	add	sp, #28
 800eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8a:	bf00      	nop
 800eb8c:	20000034 	.word	0x20000034

0800eb90 <GUI_FillRect>:
 800eb90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb92:	4c0f      	ldr	r4, [pc, #60]	; (800ebd0 <GUI_FillRect+0x40>)
 800eb94:	6824      	ldr	r4, [r4, #0]
 800eb96:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800eb98:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800eb9a:	1947      	adds	r7, r0, r5
 800eb9c:	190e      	adds	r6, r1, r4
 800eb9e:	4415      	add	r5, r2
 800eba0:	441c      	add	r4, r3
 800eba2:	4668      	mov	r0, sp
 800eba4:	f8ad 7000 	strh.w	r7, [sp]
 800eba8:	f8ad 5004 	strh.w	r5, [sp, #4]
 800ebac:	f8ad 6002 	strh.w	r6, [sp, #2]
 800ebb0:	f8ad 4006 	strh.w	r4, [sp, #6]
 800ebb4:	f7fc fa80 	bl	800b0b8 <WM__InitIVRSearch>
 800ebb8:	b140      	cbz	r0, 800ebcc <GUI_FillRect+0x3c>
 800ebba:	4638      	mov	r0, r7
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	462a      	mov	r2, r5
 800ebc0:	4623      	mov	r3, r4
 800ebc2:	f7fe fa43 	bl	800d04c <LCD_FillRect>
 800ebc6:	f7fc f9b5 	bl	800af34 <WM__GetNextIVR>
 800ebca:	e7f5      	b.n	800ebb8 <GUI_FillRect+0x28>
 800ebcc:	b003      	add	sp, #12
 800ebce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebd0:	20000034 	.word	0x20000034

0800ebd4 <_Color2Index>:
 800ebd4:	b508      	push	{r3, lr}
 800ebd6:	4b03      	ldr	r3, [pc, #12]	; (800ebe4 <_Color2Index+0x10>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4798      	blx	r3
 800ebe2:	bd08      	pop	{r3, pc}
 800ebe4:	20026888 	.word	0x20026888

0800ebe8 <_Index2Color>:
 800ebe8:	b508      	push	{r3, lr}
 800ebea:	4b03      	ldr	r3, [pc, #12]	; (800ebf8 <_Index2Color+0x10>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	4798      	blx	r3
 800ebf6:	bd08      	pop	{r3, pc}
 800ebf8:	20026888 	.word	0x20026888

0800ebfc <_GetIndexMask>:
 800ebfc:	b508      	push	{r3, lr}
 800ebfe:	4b03      	ldr	r3, [pc, #12]	; (800ec0c <_GetIndexMask+0x10>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	4798      	blx	r3
 800ec0a:	bd08      	pop	{r3, pc}
 800ec0c:	20026888 	.word	0x20026888

0800ec10 <_SwapIndices>:
 800ec10:	4b04      	ldr	r3, [pc, #16]	; (800ec24 <_SwapIndices+0x14>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec18:	6810      	ldr	r0, [r2, #0]
 800ec1a:	6819      	ldr	r1, [r3, #0]
 800ec1c:	6011      	str	r1, [r2, #0]
 800ec1e:	6018      	str	r0, [r3, #0]
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	20000034 	.word	0x20000034

0800ec28 <_SwapColors>:
 800ec28:	4a03      	ldr	r2, [pc, #12]	; (800ec38 <_SwapColors+0x10>)
 800ec2a:	4b04      	ldr	r3, [pc, #16]	; (800ec3c <_SwapColors+0x14>)
 800ec2c:	6810      	ldr	r0, [r2, #0]
 800ec2e:	6819      	ldr	r1, [r3, #0]
 800ec30:	6011      	str	r1, [r2, #0]
 800ec32:	6018      	str	r0, [r3, #0]
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	2002689c 	.word	0x2002689c
 800ec3c:	20000030 	.word	0x20000030

0800ec40 <_DrawHLine>:
 800ec40:	6800      	ldr	r0, [r0, #0]
 800ec42:	b510      	push	{r4, lr}
 800ec44:	b110      	cbz	r0, 800ec4c <_DrawHLine+0xc>
 800ec46:	68c4      	ldr	r4, [r0, #12]
 800ec48:	68a4      	ldr	r4, [r4, #8]
 800ec4a:	47a0      	blx	r4
 800ec4c:	bd10      	pop	{r4, pc}

0800ec4e <_DrawVLine>:
 800ec4e:	6800      	ldr	r0, [r0, #0]
 800ec50:	b510      	push	{r4, lr}
 800ec52:	b110      	cbz	r0, 800ec5a <_DrawVLine+0xc>
 800ec54:	68c4      	ldr	r4, [r0, #12]
 800ec56:	68e4      	ldr	r4, [r4, #12]
 800ec58:	47a0      	blx	r4
 800ec5a:	bd10      	pop	{r4, pc}

0800ec5c <_FillRect>:
 800ec5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec5e:	6800      	ldr	r0, [r0, #0]
 800ec60:	b120      	cbz	r0, 800ec6c <_FillRect+0x10>
 800ec62:	68c5      	ldr	r5, [r0, #12]
 800ec64:	9c06      	ldr	r4, [sp, #24]
 800ec66:	9400      	str	r4, [sp, #0]
 800ec68:	692c      	ldr	r4, [r5, #16]
 800ec6a:	47a0      	blx	r4
 800ec6c:	b003      	add	sp, #12
 800ec6e:	bd30      	pop	{r4, r5, pc}

0800ec70 <_GetPixelIndex>:
 800ec70:	6800      	ldr	r0, [r0, #0]
 800ec72:	b508      	push	{r3, lr}
 800ec74:	b110      	cbz	r0, 800ec7c <_GetPixelIndex+0xc>
 800ec76:	68c3      	ldr	r3, [r0, #12]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	4798      	blx	r3
 800ec7c:	bd08      	pop	{r3, pc}

0800ec7e <_SetPixelIndex>:
 800ec7e:	6800      	ldr	r0, [r0, #0]
 800ec80:	b510      	push	{r4, lr}
 800ec82:	b110      	cbz	r0, 800ec8a <_SetPixelIndex+0xc>
 800ec84:	68c4      	ldr	r4, [r0, #12]
 800ec86:	69a4      	ldr	r4, [r4, #24]
 800ec88:	47a0      	blx	r4
 800ec8a:	bd10      	pop	{r4, pc}

0800ec8c <_XorPixel>:
 800ec8c:	6800      	ldr	r0, [r0, #0]
 800ec8e:	b508      	push	{r3, lr}
 800ec90:	b110      	cbz	r0, 800ec98 <_XorPixel+0xc>
 800ec92:	68c3      	ldr	r3, [r0, #12]
 800ec94:	69db      	ldr	r3, [r3, #28]
 800ec96:	4798      	blx	r3
 800ec98:	bd08      	pop	{r3, pc}

0800ec9a <_GetDevData>:
 800ec9a:	6800      	ldr	r0, [r0, #0]
 800ec9c:	b508      	push	{r3, lr}
 800ec9e:	b110      	cbz	r0, 800eca6 <_GetDevData+0xc>
 800eca0:	68c3      	ldr	r3, [r0, #12]
 800eca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca4:	4798      	blx	r3
 800eca6:	bd08      	pop	{r3, pc}

0800eca8 <_SetOrg>:
 800eca8:	6800      	ldr	r0, [r0, #0]
 800ecaa:	b508      	push	{r3, lr}
 800ecac:	b110      	cbz	r0, 800ecb4 <_SetOrg+0xc>
 800ecae:	68c3      	ldr	r3, [r0, #12]
 800ecb0:	6a1b      	ldr	r3, [r3, #32]
 800ecb2:	4798      	blx	r3
 800ecb4:	bd08      	pop	{r3, pc}

0800ecb6 <_GetDevFunc>:
 800ecb6:	b508      	push	{r3, lr}
 800ecb8:	6803      	ldr	r3, [r0, #0]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	b11b      	cbz	r3, 800ecc8 <_GetDevFunc+0x12>
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc4:	4798      	blx	r3
 800ecc6:	bd08      	pop	{r3, pc}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	bd08      	pop	{r3, pc}

0800eccc <_GetDevProp>:
 800eccc:	6800      	ldr	r0, [r0, #0]
 800ecce:	b508      	push	{r3, lr}
 800ecd0:	b110      	cbz	r0, 800ecd8 <_GetDevProp+0xc>
 800ecd2:	68c3      	ldr	r3, [r0, #12]
 800ecd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd6:	4798      	blx	r3
 800ecd8:	bd08      	pop	{r3, pc}

0800ecda <_GetRect>:
 800ecda:	6800      	ldr	r0, [r0, #0]
 800ecdc:	b508      	push	{r3, lr}
 800ecde:	b110      	cbz	r0, 800ece6 <_GetRect+0xc>
 800ece0:	68c3      	ldr	r3, [r0, #12]
 800ece2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece4:	4798      	blx	r3
 800ece6:	bd08      	pop	{r3, pc}

0800ece8 <_ManageAlpha>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4b16      	ldr	r3, [pc, #88]	; (800ed44 <_ManageAlpha+0x5c>)
 800ecec:	4d16      	ldr	r5, [pc, #88]	; (800ed48 <_ManageAlpha+0x60>)
 800ecee:	78dc      	ldrb	r4, [r3, #3]
 800ecf0:	4b16      	ldr	r3, [pc, #88]	; (800ed4c <_ManageAlpha+0x64>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	b90c      	cbnz	r4, 800ecfa <_ManageAlpha+0x12>
 800ecf6:	0e1b      	lsrs	r3, r3, #24
 800ecf8:	d009      	beq.n	800ed0e <_ManageAlpha+0x26>
 800ecfa:	682b      	ldr	r3, [r5, #0]
 800ecfc:	b97b      	cbnz	r3, 800ed1e <_ManageAlpha+0x36>
 800ecfe:	4b14      	ldr	r3, [pc, #80]	; (800ed50 <_ManageAlpha+0x68>)
 800ed00:	6818      	ldr	r0, [r3, #0]
 800ed02:	f000 fd71 	bl	800f7e8 <GUI_DEVICE_Link>
 800ed06:	4b10      	ldr	r3, [pc, #64]	; (800ed48 <_ManageAlpha+0x60>)
 800ed08:	2201      	movs	r2, #1
 800ed0a:	601a      	str	r2, [r3, #0]
 800ed0c:	e007      	b.n	800ed1e <_ManageAlpha+0x36>
 800ed0e:	682b      	ldr	r3, [r5, #0]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d104      	bne.n	800ed1e <_ManageAlpha+0x36>
 800ed14:	4b0e      	ldr	r3, [pc, #56]	; (800ed50 <_ManageAlpha+0x68>)
 800ed16:	6818      	ldr	r0, [r3, #0]
 800ed18:	f000 fd50 	bl	800f7bc <GUI_DEVICE_Unlink>
 800ed1c:	602c      	str	r4, [r5, #0]
 800ed1e:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <_ManageAlpha+0x6c>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	b133      	cbz	r3, 800ed32 <_ManageAlpha+0x4a>
 800ed24:	f1c4 02ff 	rsb	r2, r4, #255	; 0xff
 800ed28:	4353      	muls	r3, r2
 800ed2a:	22ff      	movs	r2, #255	; 0xff
 800ed2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed30:	441c      	add	r4, r3
 800ed32:	4d09      	ldr	r5, [pc, #36]	; (800ed58 <_ManageAlpha+0x70>)
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	429c      	cmp	r4, r3
 800ed38:	d003      	beq.n	800ed42 <_ManageAlpha+0x5a>
 800ed3a:	b2e0      	uxtb	r0, r4
 800ed3c:	f7fe ff04 	bl	800db48 <GUI_SetAlpha>
 800ed40:	602c      	str	r4, [r5, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	2002689c 	.word	0x2002689c
 800ed48:	20026880 	.word	0x20026880
 800ed4c:	20000030 	.word	0x20000030
 800ed50:	20026888 	.word	0x20026888
 800ed54:	2002687c 	.word	0x2002687c
 800ed58:	20026894 	.word	0x20026894

0800ed5c <_SetDrawMode>:
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	4b08      	ldr	r3, [pc, #32]	; (800ed80 <_SetDrawMode+0x24>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	7c1b      	ldrb	r3, [r3, #16]
 800ed64:	4043      	eors	r3, r0
 800ed66:	075b      	lsls	r3, r3, #29
 800ed68:	4604      	mov	r4, r0
 800ed6a:	d501      	bpl.n	800ed70 <_SetDrawMode+0x14>
 800ed6c:	f7ff ff5c 	bl	800ec28 <_SwapColors>
 800ed70:	f7ff ffba 	bl	800ece8 <_ManageAlpha>
 800ed74:	4b03      	ldr	r3, [pc, #12]	; (800ed84 <_SetDrawMode+0x28>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4620      	mov	r0, r4
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	4798      	blx	r3
 800ed7e:	bd10      	pop	{r4, pc}
 800ed80:	20000034 	.word	0x20000034
 800ed84:	20026878 	.word	0x20026878

0800ed88 <_SetBkColor>:
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <_SetBkColor+0x28>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	7c1b      	ldrb	r3, [r3, #16]
 800ed90:	075b      	lsls	r3, r3, #29
 800ed92:	bf4c      	ite	mi
 800ed94:	4b07      	ldrmi	r3, [pc, #28]	; (800edb4 <_SetBkColor+0x2c>)
 800ed96:	4b08      	ldrpl	r3, [pc, #32]	; (800edb8 <_SetBkColor+0x30>)
 800ed98:	6018      	str	r0, [r3, #0]
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	f7ff ffa4 	bl	800ece8 <_ManageAlpha>
 800eda0:	4b06      	ldr	r3, [pc, #24]	; (800edbc <_SetBkColor+0x34>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	4798      	blx	r3
 800edac:	bd10      	pop	{r4, pc}
 800edae:	bf00      	nop
 800edb0:	20000034 	.word	0x20000034
 800edb4:	2002689c 	.word	0x2002689c
 800edb8:	20000030 	.word	0x20000030
 800edbc:	20026878 	.word	0x20026878

0800edc0 <_SetColor>:
 800edc0:	b510      	push	{r4, lr}
 800edc2:	4b09      	ldr	r3, [pc, #36]	; (800ede8 <_SetColor+0x28>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	7c1b      	ldrb	r3, [r3, #16]
 800edc8:	075b      	lsls	r3, r3, #29
 800edca:	bf4c      	ite	mi
 800edcc:	4b07      	ldrmi	r3, [pc, #28]	; (800edec <_SetColor+0x2c>)
 800edce:	4b08      	ldrpl	r3, [pc, #32]	; (800edf0 <_SetColor+0x30>)
 800edd0:	6018      	str	r0, [r3, #0]
 800edd2:	4604      	mov	r4, r0
 800edd4:	f7ff ff88 	bl	800ece8 <_ManageAlpha>
 800edd8:	4b06      	ldr	r3, [pc, #24]	; (800edf4 <_SetColor+0x34>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4798      	blx	r3
 800ede4:	bd10      	pop	{r4, pc}
 800ede6:	bf00      	nop
 800ede8:	20000034 	.word	0x20000034
 800edec:	20000030 	.word	0x20000030
 800edf0:	2002689c 	.word	0x2002689c
 800edf4:	20026878 	.word	0x20026878

0800edf8 <_DrawBitmap>:
 800edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	b087      	sub	sp, #28
 800edfe:	4606      	mov	r6, r0
 800ee00:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800ee04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ee06:	f1bc 0f01 	cmp.w	ip, #1
 800ee0a:	4689      	mov	r9, r1
 800ee0c:	4690      	mov	r8, r2
 800ee0e:	461f      	mov	r7, r3
 800ee10:	d163      	bne.n	800eeda <_DrawBitmap+0xe2>
 800ee12:	483c      	ldr	r0, [pc, #240]	; (800ef04 <_DrawBitmap+0x10c>)
 800ee14:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ee16:	f8d0 a000 	ldr.w	sl, [r0]
 800ee1a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800ee1e:	4285      	cmp	r5, r0
 800ee20:	d15b      	bne.n	800eeda <_DrawBitmap+0xe2>
 800ee22:	f89a 0010 	ldrb.w	r0, [sl, #16]
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d157      	bne.n	800eeda <_DrawBitmap+0xe2>
 800ee2a:	2002      	movs	r0, #2
 800ee2c:	f88a 0010 	strb.w	r0, [sl, #16]
 800ee30:	f8d6 a000 	ldr.w	sl, [r6]
 800ee34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ee36:	f8da e00c 	ldr.w	lr, [sl, #12]
 800ee3a:	9402      	str	r4, [sp, #8]
 800ee3c:	e88d 1020 	stmia.w	sp, {r5, ip}
 800ee40:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ee42:	9503      	str	r5, [sp, #12]
 800ee44:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ee46:	9504      	str	r5, [sp, #16]
 800ee48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ee4a:	9505      	str	r5, [sp, #20]
 800ee4c:	f8de c004 	ldr.w	ip, [lr, #4]
 800ee50:	4650      	mov	r0, sl
 800ee52:	47e0      	blx	ip
 800ee54:	f7ff fee8 	bl	800ec28 <_SwapColors>
 800ee58:	f7ff feda 	bl	800ec10 <_SwapIndices>
 800ee5c:	f7ff ff44 	bl	800ece8 <_ManageAlpha>
 800ee60:	4b29      	ldr	r3, [pc, #164]	; (800ef08 <_DrawBitmap+0x110>)
 800ee62:	f8d6 b000 	ldr.w	fp, [r6]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	b953      	cbnz	r3, 800ee80 <_DrawBitmap+0x88>
 800ee6a:	f7ff fedd 	bl	800ec28 <_SwapColors>
 800ee6e:	f7ff fecf 	bl	800ec10 <_SwapIndices>
 800ee72:	f7ff ff39 	bl	800ece8 <_ManageAlpha>
 800ee76:	4b23      	ldr	r3, [pc, #140]	; (800ef04 <_DrawBitmap+0x10c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	741a      	strb	r2, [r3, #16]
 800ee7e:	e03e      	b.n	800eefe <_DrawBitmap+0x106>
 800ee80:	4b22      	ldr	r3, [pc, #136]	; (800ef0c <_DrawBitmap+0x114>)
 800ee82:	681e      	ldr	r6, [r3, #0]
 800ee84:	42b4      	cmp	r4, r6
 800ee86:	bfcc      	ite	gt
 800ee88:	00f7      	lslgt	r7, r6, #3
 800ee8a:	4626      	movle	r6, r4
 800ee8c:	4642      	mov	r2, r8
 800ee8e:	4b1e      	ldr	r3, [pc, #120]	; (800ef08 <_DrawBitmap+0x110>)
 800ee90:	6819      	ldr	r1, [r3, #0]
 800ee92:	2300      	movs	r3, #0
 800ee94:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ee96:	5ce8      	ldrb	r0, [r5, r3]
 800ee98:	43c0      	mvns	r0, r0
 800ee9a:	54c8      	strb	r0, [r1, r3]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	42b3      	cmp	r3, r6
 800eea0:	d1f8      	bne.n	800ee94 <_DrawBitmap+0x9c>
 800eea2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800eea4:	f8db 000c 	ldr.w	r0, [fp, #12]
 800eea8:	9504      	str	r5, [sp, #16]
 800eeaa:	2301      	movs	r3, #1
 800eeac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	9301      	str	r3, [sp, #4]
 800eeb2:	9103      	str	r1, [sp, #12]
 800eeb4:	9505      	str	r5, [sp, #20]
 800eeb6:	9402      	str	r4, [sp, #8]
 800eeb8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800eebc:	463b      	mov	r3, r7
 800eebe:	4658      	mov	r0, fp
 800eec0:	4649      	mov	r1, r9
 800eec2:	f102 0a01 	add.w	sl, r2, #1
 800eec6:	47e0      	blx	ip
 800eec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eeca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800eecc:	4443      	add	r3, r8
 800eece:	4425      	add	r5, r4
 800eed0:	4553      	cmp	r3, sl
 800eed2:	9513      	str	r5, [sp, #76]	; 0x4c
 800eed4:	d0c9      	beq.n	800ee6a <_DrawBitmap+0x72>
 800eed6:	4652      	mov	r2, sl
 800eed8:	e7d9      	b.n	800ee8e <_DrawBitmap+0x96>
 800eeda:	6830      	ldr	r0, [r6, #0]
 800eedc:	b178      	cbz	r0, 800eefe <_DrawBitmap+0x106>
 800eede:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800eee0:	68c3      	ldr	r3, [r0, #12]
 800eee2:	9402      	str	r4, [sp, #8]
 800eee4:	e88d 1020 	stmia.w	sp, {r5, ip}
 800eee8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800eeea:	9503      	str	r5, [sp, #12]
 800eeec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800eeee:	9504      	str	r5, [sp, #16]
 800eef0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800eef2:	9505      	str	r5, [sp, #20]
 800eef4:	685c      	ldr	r4, [r3, #4]
 800eef6:	4649      	mov	r1, r9
 800eef8:	4642      	mov	r2, r8
 800eefa:	463b      	mov	r3, r7
 800eefc:	47a0      	blx	r4
 800eefe:	b007      	add	sp, #28
 800ef00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef04:	20000034 	.word	0x20000034
 800ef08:	20026884 	.word	0x20026884
 800ef0c:	20026898 	.word	0x20026898

0800ef10 <_OnExit>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4c06      	ldr	r4, [pc, #24]	; (800ef2c <_OnExit+0x1c>)
 800ef14:	2500      	movs	r5, #0
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	f001 f95e 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800ef1c:	6025      	str	r5, [r4, #0]
 800ef1e:	4c04      	ldr	r4, [pc, #16]	; (800ef30 <_OnExit+0x20>)
 800ef20:	6820      	ldr	r0, [r4, #0]
 800ef22:	f001 f959 	bl	80101d8 <GUI_ALLOC_FreeFixedBlock>
 800ef26:	6025      	str	r5, [r4, #0]
 800ef28:	bd38      	pop	{r3, r4, r5, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20026888 	.word	0x20026888
 800ef30:	20026884 	.word	0x20026884

0800ef34 <_Color2IndexBulk>:
 800ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef38:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800efb4 <_Color2IndexBulk+0x80>
 800ef3c:	f8d8 5000 	ldr.w	r5, [r8]
 800ef40:	682d      	ldr	r5, [r5, #0]
 800ef42:	692d      	ldr	r5, [r5, #16]
 800ef44:	692d      	ldr	r5, [r5, #16]
 800ef46:	4607      	mov	r7, r0
 800ef48:	460e      	mov	r6, r1
 800ef4a:	4614      	mov	r4, r2
 800ef4c:	b115      	cbz	r5, 800ef54 <_Color2IndexBulk+0x20>
 800ef4e:	47a8      	blx	r5
 800ef50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d011      	beq.n	800ef7c <_Color2IndexBulk+0x48>
 800ef58:	2b04      	cmp	r3, #4
 800ef5a:	d01d      	beq.n	800ef98 <_Color2IndexBulk+0x64>
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d127      	bne.n	800efb0 <_Color2IndexBulk+0x7c>
 800ef60:	f8d8 3000 	ldr.w	r3, [r8]
 800ef64:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	691b      	ldr	r3, [r3, #16]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4798      	blx	r3
 800ef70:	5570      	strb	r0, [r6, r5]
 800ef72:	3501      	adds	r5, #1
 800ef74:	42ac      	cmp	r4, r5
 800ef76:	d1f3      	bne.n	800ef60 <_Color2IndexBulk+0x2c>
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef80:	f857 0b04 	ldr.w	r0, [r7], #4
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	691b      	ldr	r3, [r3, #16]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4798      	blx	r3
 800ef8c:	3c01      	subs	r4, #1
 800ef8e:	f826 0b02 	strh.w	r0, [r6], #2
 800ef92:	d1f3      	bne.n	800ef7c <_Color2IndexBulk+0x48>
 800ef94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef98:	f8d8 3000 	ldr.w	r3, [r8]
 800ef9c:	5978      	ldr	r0, [r7, r5]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4798      	blx	r3
 800efa6:	3c01      	subs	r4, #1
 800efa8:	5170      	str	r0, [r6, r5]
 800efaa:	f105 0504 	add.w	r5, r5, #4
 800efae:	d1f3      	bne.n	800ef98 <_Color2IndexBulk+0x64>
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	20026888 	.word	0x20026888

0800efb8 <_Index2ColorBulk>:
 800efb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efbc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800f038 <_Index2ColorBulk+0x80>
 800efc0:	f8d8 5000 	ldr.w	r5, [r8]
 800efc4:	682d      	ldr	r5, [r5, #0]
 800efc6:	692d      	ldr	r5, [r5, #16]
 800efc8:	696d      	ldr	r5, [r5, #20]
 800efca:	4607      	mov	r7, r0
 800efcc:	460e      	mov	r6, r1
 800efce:	4614      	mov	r4, r2
 800efd0:	b115      	cbz	r5, 800efd8 <_Index2ColorBulk+0x20>
 800efd2:	47a8      	blx	r5
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	2b02      	cmp	r3, #2
 800efda:	d011      	beq.n	800f000 <_Index2ColorBulk+0x48>
 800efdc:	2b04      	cmp	r3, #4
 800efde:	d01d      	beq.n	800f01c <_Index2ColorBulk+0x64>
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d127      	bne.n	800f034 <_Index2ColorBulk+0x7c>
 800efe4:	f8d8 3000 	ldr.w	r3, [r8]
 800efe8:	5d78      	ldrb	r0, [r7, r5]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	4798      	blx	r3
 800eff2:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
 800eff6:	3501      	adds	r5, #1
 800eff8:	42ac      	cmp	r4, r5
 800effa:	d1f3      	bne.n	800efe4 <_Index2ColorBulk+0x2c>
 800effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f000:	f8d8 3000 	ldr.w	r3, [r8]
 800f004:	f837 0b02 	ldrh.w	r0, [r7], #2
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	4798      	blx	r3
 800f010:	3c01      	subs	r4, #1
 800f012:	f846 0b04 	str.w	r0, [r6], #4
 800f016:	d1f3      	bne.n	800f000 <_Index2ColorBulk+0x48>
 800f018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f01c:	f8d8 3000 	ldr.w	r3, [r8]
 800f020:	5978      	ldr	r0, [r7, r5]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	4798      	blx	r3
 800f02a:	3c01      	subs	r4, #1
 800f02c:	5170      	str	r0, [r6, r5]
 800f02e:	f105 0504 	add.w	r5, r5, #4
 800f032:	d1f3      	bne.n	800f01c <_Index2ColorBulk+0x64>
 800f034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f038:	20026888 	.word	0x20026888

0800f03c <GUI_EnableAlpha>:
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	4d19      	ldr	r5, [pc, #100]	; (800f0a4 <GUI_EnableAlpha+0x68>)
 800f040:	682e      	ldr	r6, [r5, #0]
 800f042:	4604      	mov	r4, r0
 800f044:	b9de      	cbnz	r6, 800f07e <GUI_EnableAlpha+0x42>
 800f046:	4818      	ldr	r0, [pc, #96]	; (800f0a8 <GUI_EnableAlpha+0x6c>)
 800f048:	4b18      	ldr	r3, [pc, #96]	; (800f0ac <GUI_EnableAlpha+0x70>)
 800f04a:	6003      	str	r3, [r0, #0]
 800f04c:	f000 fcbe 	bl	800f9cc <GUI__RegisterExit>
 800f050:	2001      	movs	r0, #1
 800f052:	f7fe fd79 	bl	800db48 <GUI_SetAlpha>
 800f056:	b2c0      	uxtb	r0, r0
 800f058:	f7fe fd76 	bl	800db48 <GUI_SetAlpha>
 800f05c:	4914      	ldr	r1, [pc, #80]	; (800f0b0 <GUI_EnableAlpha+0x74>)
 800f05e:	4815      	ldr	r0, [pc, #84]	; (800f0b4 <GUI_EnableAlpha+0x78>)
 800f060:	4632      	mov	r2, r6
 800f062:	4633      	mov	r3, r6
 800f064:	f000 fb84 	bl	800f770 <GUI_DEVICE_Create>
 800f068:	6028      	str	r0, [r5, #0]
 800f06a:	f7fd fe53 	bl	800cd14 <LCD_GetVXSizeMax>
 800f06e:	4b12      	ldr	r3, [pc, #72]	; (800f0b8 <GUI_EnableAlpha+0x7c>)
 800f070:	3007      	adds	r0, #7
 800f072:	08c0      	lsrs	r0, r0, #3
 800f074:	6018      	str	r0, [r3, #0]
 800f076:	f001 fa0f 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800f07a:	4b10      	ldr	r3, [pc, #64]	; (800f0bc <GUI_EnableAlpha+0x80>)
 800f07c:	6018      	str	r0, [r3, #0]
 800f07e:	4b10      	ldr	r3, [pc, #64]	; (800f0c0 <GUI_EnableAlpha+0x84>)
 800f080:	b13c      	cbz	r4, 800f092 <GUI_EnableAlpha+0x56>
 800f082:	6818      	ldr	r0, [r3, #0]
 800f084:	b950      	cbnz	r0, 800f09c <GUI_EnableAlpha+0x60>
 800f086:	4a0f      	ldr	r2, [pc, #60]	; (800f0c4 <GUI_EnableAlpha+0x88>)
 800f088:	6811      	ldr	r1, [r2, #0]
 800f08a:	6019      	str	r1, [r3, #0]
 800f08c:	4b0e      	ldr	r3, [pc, #56]	; (800f0c8 <GUI_EnableAlpha+0x8c>)
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	bd70      	pop	{r4, r5, r6, pc}
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	b122      	cbz	r2, 800f0a0 <GUI_EnableAlpha+0x64>
 800f096:	490b      	ldr	r1, [pc, #44]	; (800f0c4 <GUI_EnableAlpha+0x88>)
 800f098:	601c      	str	r4, [r3, #0]
 800f09a:	600a      	str	r2, [r1, #0]
 800f09c:	2001      	movs	r0, #1
 800f09e:	bd70      	pop	{r4, r5, r6, pc}
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
 800f0a4:	20026888 	.word	0x20026888
 800f0a8:	2002688c 	.word	0x2002688c
 800f0ac:	0800ef11 	.word	0x0800ef11
 800f0b0:	080142cc 	.word	0x080142cc
 800f0b4:	080142e4 	.word	0x080142e4
 800f0b8:	20026898 	.word	0x20026898
 800f0bc:	20026884 	.word	0x20026884
 800f0c0:	20026878 	.word	0x20026878
 800f0c4:	2000001c 	.word	0x2000001c
 800f0c8:	080142c0 	.word	0x080142c0

0800f0cc <_SetLineColor>:
 800f0cc:	4b1e      	ldr	r3, [pc, #120]	; (800f148 <_SetLineColor+0x7c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	7e9b      	ldrb	r3, [r3, #26]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	2b03      	cmp	r3, #3
 800f0d6:	d832      	bhi.n	800f13e <_SetLineColor+0x72>
 800f0d8:	e8df f003 	tbb	[pc, r3]
 800f0dc:	221a0d02 	.word	0x221a0d02
 800f0e0:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <_SetLineColor+0x80>)
 800f0e2:	3006      	adds	r0, #6
 800f0e4:	4003      	ands	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	da03      	bge.n	800f0f2 <_SetLineColor+0x26>
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	f063 030f 	orn	r3, r3, #15
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	2b0b      	cmp	r3, #11
 800f0f4:	e008      	b.n	800f108 <_SetLineColor+0x3c>
 800f0f6:	4b16      	ldr	r3, [pc, #88]	; (800f150 <_SetLineColor+0x84>)
 800f0f8:	4003      	ands	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	da03      	bge.n	800f106 <_SetLineColor+0x3a>
 800f0fe:	3b01      	subs	r3, #1
 800f100:	f063 0303 	orn	r3, r3, #3
 800f104:	3301      	adds	r3, #1
 800f106:	2b01      	cmp	r3, #1
 800f108:	bfcc      	ite	gt
 800f10a:	2000      	movgt	r0, #0
 800f10c:	2001      	movle	r0, #1
 800f10e:	4770      	bx	lr
 800f110:	2314      	movs	r3, #20
 800f112:	fb90 f2f3 	sdiv	r2, r0, r3
 800f116:	fb03 0012 	mls	r0, r3, r2, r0
 800f11a:	280b      	cmp	r0, #11
 800f11c:	dc09      	bgt.n	800f132 <_SetLineColor+0x66>
 800f11e:	e010      	b.n	800f142 <_SetLineColor+0x76>
 800f120:	2318      	movs	r3, #24
 800f122:	fb90 f2f3 	sdiv	r2, r0, r3
 800f126:	fb03 0012 	mls	r0, r3, r2, r0
 800f12a:	280b      	cmp	r0, #11
 800f12c:	dd09      	ble.n	800f142 <_SetLineColor+0x76>
 800f12e:	f020 0004 	bic.w	r0, r0, #4
 800f132:	3810      	subs	r0, #16
 800f134:	2801      	cmp	r0, #1
 800f136:	bf8c      	ite	hi
 800f138:	2000      	movhi	r0, #0
 800f13a:	2001      	movls	r0, #1
 800f13c:	4770      	bx	lr
 800f13e:	2000      	movs	r0, #0
 800f140:	4770      	bx	lr
 800f142:	2001      	movs	r0, #1
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	20000034 	.word	0x20000034
 800f14c:	8000000f 	.word	0x8000000f
 800f150:	80000003 	.word	0x80000003

0800f154 <GUI_sin>:
 800f154:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800f158:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800f15c:	bfc6      	itte	gt
 800f15e:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 800f162:	2101      	movgt	r1, #1
 800f164:	2100      	movle	r1, #0
 800f166:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f16a:	bfc8      	it	gt
 800f16c:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 800f170:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800f174:	b510      	push	{r4, lr}
 800f176:	1182      	asrs	r2, r0, #6
 800f178:	4c0b      	ldr	r4, [pc, #44]	; (800f1a8 <GUI_sin+0x54>)
 800f17a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800f17e:	b29b      	uxth	r3, r3
 800f180:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 800f184:	2b40      	cmp	r3, #64	; 0x40
 800f186:	fb00 f003 	mul.w	r0, r0, r3
 800f18a:	d008      	beq.n	800f19e <GUI_sin+0x4a>
 800f18c:	2a10      	cmp	r2, #16
 800f18e:	d006      	beq.n	800f19e <GUI_sin+0x4a>
 800f190:	3201      	adds	r2, #1
 800f192:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800f196:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 800f19a:	fb03 0002 	mla	r0, r3, r2, r0
 800f19e:	3020      	adds	r0, #32
 800f1a0:	0980      	lsrs	r0, r0, #6
 800f1a2:	b101      	cbz	r1, 800f1a6 <GUI_sin+0x52>
 800f1a4:	4240      	negs	r0, r0
 800f1a6:	bd10      	pop	{r4, pc}
 800f1a8:	08014318 	.word	0x08014318

0800f1ac <GUI_cos>:
 800f1ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f1b0:	f7ff bfd0 	b.w	800f154 <GUI_sin>

0800f1b4 <GL_DrawLine1Ex>:
 800f1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800f1bc:	1a17      	subs	r7, r2, r0
 800f1be:	1a5c      	subs	r4, r3, r1
 800f1c0:	ea54 0c07 	orrs.w	ip, r4, r7
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	460e      	mov	r6, r1
 800f1c8:	f8d8 b000 	ldr.w	fp, [r8]
 800f1cc:	d104      	bne.n	800f1d8 <GL_DrawLine1Ex+0x24>
 800f1ce:	b003      	add	sp, #12
 800f1d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	f003 b85a 	b.w	801228c <GL_DrawPoint>
 800f1d8:	ea87 70e7 	eor.w	r0, r7, r7, asr #31
 800f1dc:	eba0 70e7 	sub.w	r0, r0, r7, asr #31
 800f1e0:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800f1e4:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800f1e8:	4288      	cmp	r0, r1
 800f1ea:	db04      	blt.n	800f1f6 <GL_DrawLine1Ex+0x42>
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	463c      	mov	r4, r7
 800f1f0:	460f      	mov	r7, r1
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	e006      	b.n	800f204 <GL_DrawLine1Ex+0x50>
 800f1f6:	4611      	mov	r1, r2
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	4635      	mov	r5, r6
 800f200:	460e      	mov	r6, r1
 800f202:	2101      	movs	r1, #1
 800f204:	9100      	str	r1, [sp, #0]
 800f206:	ea84 71e4 	eor.w	r1, r4, r4, asr #31
 800f20a:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 800f20e:	428c      	cmp	r4, r1
 800f210:	d008      	beq.n	800f224 <GL_DrawLine1Ex+0x70>
 800f212:	461e      	mov	r6, r3
 800f214:	462b      	mov	r3, r5
 800f216:	4264      	negs	r4, r4
 800f218:	4615      	mov	r5, r2
 800f21a:	427f      	negs	r7, r7
 800f21c:	461a      	mov	r2, r3
 800f21e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f222:	e001      	b.n	800f228 <GL_DrawLine1Ex+0x74>
 800f224:	f04f 0a01 	mov.w	sl, #1
 800f228:	2f00      	cmp	r7, #0
 800f22a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800f374 <GL_DrawLine1Ex+0x1c0>
 800f22e:	d13e      	bne.n	800f2ae <GL_DrawLine1Ex+0xfa>
 800f230:	9b00      	ldr	r3, [sp, #0]
 800f232:	b1d3      	cbz	r3, 800f26a <GL_DrawLine1Ex+0xb6>
 800f234:	f8d9 3000 	ldr.w	r3, [r9]
 800f238:	7e9b      	ldrb	r3, [r3, #26]
 800f23a:	b98b      	cbnz	r3, 800f260 <GL_DrawLine1Ex+0xac>
 800f23c:	4630      	mov	r0, r6
 800f23e:	4629      	mov	r1, r5
 800f240:	b003      	add	sp, #12
 800f242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f246:	f7fd bedb 	b.w	800d000 <LCD_DrawVLine>
 800f24a:	f7ff ff3f 	bl	800f0cc <_SetLineColor>
 800f24e:	b930      	cbnz	r0, 800f25e <GL_DrawLine1Ex+0xaa>
 800f250:	f8d9 3000 	ldr.w	r3, [r9]
 800f254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f256:	4630      	mov	r0, r6
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	1979      	adds	r1, r7, r5
 800f25c:	4798      	blx	r3
 800f25e:	3701      	adds	r7, #1
 800f260:	42a7      	cmp	r7, r4
 800f262:	eb07 000b 	add.w	r0, r7, fp
 800f266:	ddf0      	ble.n	800f24a <GL_DrawLine1Ex+0x96>
 800f268:	e01d      	b.n	800f2a6 <GL_DrawLine1Ex+0xf2>
 800f26a:	f8d9 3000 	ldr.w	r3, [r9]
 800f26e:	7e99      	ldrb	r1, [r3, #26]
 800f270:	b111      	cbz	r1, 800f278 <GL_DrawLine1Ex+0xc4>
 800f272:	f8dd a000 	ldr.w	sl, [sp]
 800f276:	e012      	b.n	800f29e <GL_DrawLine1Ex+0xea>
 800f278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f27a:	4628      	mov	r0, r5
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4631      	mov	r1, r6
 800f280:	4798      	blx	r3
 800f282:	e074      	b.n	800f36e <GL_DrawLine1Ex+0x1ba>
 800f284:	f7ff ff22 	bl	800f0cc <_SetLineColor>
 800f288:	b938      	cbnz	r0, 800f29a <GL_DrawLine1Ex+0xe6>
 800f28a:	f8d9 3000 	ldr.w	r3, [r9]
 800f28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f290:	eb0a 0005 	add.w	r0, sl, r5
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	4631      	mov	r1, r6
 800f298:	4798      	blx	r3
 800f29a:	f10a 0a01 	add.w	sl, sl, #1
 800f29e:	45a2      	cmp	sl, r4
 800f2a0:	eb0a 000b 	add.w	r0, sl, fp
 800f2a4:	ddee      	ble.n	800f284 <GL_DrawLine1Ex+0xd0>
 800f2a6:	3801      	subs	r0, #1
 800f2a8:	f8c8 0000 	str.w	r0, [r8]
 800f2ac:	e05f      	b.n	800f36e <GL_DrawLine1Ex+0x1ba>
 800f2ae:	f8d9 1000 	ldr.w	r1, [r9]
 800f2b2:	f04f 0202 	mov.w	r2, #2
 800f2b6:	7e89      	ldrb	r1, [r1, #26]
 800f2b8:	fb94 f2f2 	sdiv	r2, r4, r2
 800f2bc:	bfb8      	it	lt
 800f2be:	4252      	neglt	r2, r2
 800f2c0:	b9d9      	cbnz	r1, 800f2fa <GL_DrawLine1Ex+0x146>
 800f2c2:	4693      	mov	fp, r2
 800f2c4:	46a8      	mov	r8, r5
 800f2c6:	ebc5 0308 	rsb	r3, r5, r8
 800f2ca:	42a3      	cmp	r3, r4
 800f2cc:	dc4f      	bgt.n	800f36e <GL_DrawLine1Ex+0x1ba>
 800f2ce:	9b00      	ldr	r3, [sp, #0]
 800f2d0:	fb9b f1f4 	sdiv	r1, fp, r4
 800f2d4:	4431      	add	r1, r6
 800f2d6:	b92b      	cbnz	r3, 800f2e4 <GL_DrawLine1Ex+0x130>
 800f2d8:	f8d9 3000 	ldr.w	r3, [r9]
 800f2dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2de:	4640      	mov	r0, r8
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	e005      	b.n	800f2f0 <GL_DrawLine1Ex+0x13c>
 800f2e4:	f8d9 3000 	ldr.w	r3, [r9]
 800f2e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	4641      	mov	r1, r8
 800f2f0:	4798      	blx	r3
 800f2f2:	f108 0801 	add.w	r8, r8, #1
 800f2f6:	44bb      	add	fp, r7
 800f2f8:	e7e5      	b.n	800f2c6 <GL_DrawLine1Ex+0x112>
 800f2fa:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f2fe:	bf04      	itt	eq
 800f300:	eb04 010b 	addeq.w	r1, r4, fp
 800f304:	f8c8 1000 	streq.w	r1, [r8]
 800f308:	9201      	str	r2, [sp, #4]
 800f30a:	46ab      	mov	fp, r5
 800f30c:	ebc5 010b 	rsb	r1, r5, fp
 800f310:	42a1      	cmp	r1, r4
 800f312:	f8d8 0000 	ldr.w	r0, [r8]
 800f316:	dc1e      	bgt.n	800f356 <GL_DrawLine1Ex+0x1a2>
 800f318:	4450      	add	r0, sl
 800f31a:	f8c8 0000 	str.w	r0, [r8]
 800f31e:	f7ff fed5 	bl	800f0cc <_SetLineColor>
 800f322:	b980      	cbnz	r0, 800f346 <GL_DrawLine1Ex+0x192>
 800f324:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f328:	f8d9 0000 	ldr.w	r0, [r9]
 800f32c:	9b00      	ldr	r3, [sp, #0]
 800f32e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800f330:	fb9c f1f4 	sdiv	r1, ip, r4
 800f334:	4431      	add	r1, r6
 800f336:	b913      	cbnz	r3, 800f33e <GL_DrawLine1Ex+0x18a>
 800f338:	6843      	ldr	r3, [r0, #4]
 800f33a:	4658      	mov	r0, fp
 800f33c:	e002      	b.n	800f344 <GL_DrawLine1Ex+0x190>
 800f33e:	6843      	ldr	r3, [r0, #4]
 800f340:	4608      	mov	r0, r1
 800f342:	4659      	mov	r1, fp
 800f344:	4798      	blx	r3
 800f346:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f34a:	44bc      	add	ip, r7
 800f34c:	f10b 0b01 	add.w	fp, fp, #1
 800f350:	f8cd c004 	str.w	ip, [sp, #4]
 800f354:	e7da      	b.n	800f30c <GL_DrawLine1Ex+0x158>
 800f356:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f35a:	bf04      	itt	eq
 800f35c:	1824      	addeq	r4, r4, r0
 800f35e:	f8c8 4000 	streq.w	r4, [r8]
 800f362:	f8d8 2000 	ldr.w	r2, [r8]
 800f366:	ebca 0302 	rsb	r3, sl, r2
 800f36a:	f8c8 3000 	str.w	r3, [r8]
 800f36e:	b003      	add	sp, #12
 800f370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f374:	20000034 	.word	0x20000034

0800f378 <GL_DrawLineEx>:
 800f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37c:	4d67      	ldr	r5, [pc, #412]	; (800f51c <GL_DrawLineEx+0x1a4>)
 800f37e:	682c      	ldr	r4, [r5, #0]
 800f380:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f384:	f1bb 0f01 	cmp.w	fp, #1
 800f388:	b087      	sub	sp, #28
 800f38a:	4681      	mov	r9, r0
 800f38c:	4688      	mov	r8, r1
 800f38e:	4617      	mov	r7, r2
 800f390:	461e      	mov	r6, r3
 800f392:	46aa      	mov	sl, r5
 800f394:	d104      	bne.n	800f3a0 <GL_DrawLineEx+0x28>
 800f396:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f398:	9400      	str	r4, [sp, #0]
 800f39a:	f7ff ff0b 	bl	800f1b4 <GL_DrawLine1Ex>
 800f39e:	e0ba      	b.n	800f516 <GL_DrawLineEx+0x19e>
 800f3a0:	1a84      	subs	r4, r0, r2
 800f3a2:	1acd      	subs	r5, r1, r3
 800f3a4:	ea54 0305 	orrs.w	r3, r4, r5
 800f3a8:	f000 80b5 	beq.w	800f516 <GL_DrawLineEx+0x19e>
 800f3ac:	2c00      	cmp	r4, #0
 800f3ae:	bfba      	itte	lt
 800f3b0:	4264      	neglt	r4, r4
 800f3b2:	2301      	movlt	r3, #1
 800f3b4:	2300      	movge	r3, #0
 800f3b6:	2d00      	cmp	r5, #0
 800f3b8:	bfbc      	itt	lt
 800f3ba:	426d      	neglt	r5, r5
 800f3bc:	f043 0302 	orrlt.w	r3, r3, #2
 800f3c0:	42a5      	cmp	r5, r4
 800f3c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f3c6:	dd04      	ble.n	800f3d2 <GL_DrawLineEx+0x5a>
 800f3c8:	4622      	mov	r2, r4
 800f3ca:	f043 0304 	orr.w	r3, r3, #4
 800f3ce:	462c      	mov	r4, r5
 800f3d0:	4615      	mov	r5, r2
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	fb94 f2f2 	sdiv	r2, r4, r2
 800f3d8:	eb02 2585 	add.w	r5, r2, r5, lsl #10
 800f3dc:	fb95 f4f4 	sdiv	r4, r5, r4
 800f3e0:	11a1      	asrs	r1, r4, #6
 800f3e2:	4a4f      	ldr	r2, [pc, #316]	; (800f520 <GL_DrawLineEx+0x1a8>)
 800f3e4:	f3c4 0483 	ubfx	r4, r4, #2, #4
 800f3e8:	f1c4 0510 	rsb	r5, r4, #16
 800f3ec:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 800f3f0:	2d10      	cmp	r5, #16
 800f3f2:	fb05 f000 	mul.w	r0, r5, r0
 800f3f6:	d004      	beq.n	800f402 <GL_DrawLineEx+0x8a>
 800f3f8:	3101      	adds	r1, #1
 800f3fa:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800f3fe:	fb04 0002 	mla	r0, r4, r2, r0
 800f402:	2210      	movs	r2, #16
 800f404:	3008      	adds	r0, #8
 800f406:	fb90 f0f2 	sdiv	r0, r0, r2
 800f40a:	0759      	lsls	r1, r3, #29
 800f40c:	bf48      	it	mi
 800f40e:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 800f412:	07da      	lsls	r2, r3, #31
 800f414:	bf48      	it	mi
 800f416:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 800f41a:	079b      	lsls	r3, r3, #30
 800f41c:	bf48      	it	mi
 800f41e:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 800f422:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800f426:	4628      	mov	r0, r5
 800f428:	f7ff fec0 	bl	800f1ac <GUI_cos>
 800f42c:	fb00 f40b 	mul.w	r4, r0, fp
 800f430:	4628      	mov	r0, r5
 800f432:	f7ff fe8f 	bl	800f154 <GUI_sin>
 800f436:	2c00      	cmp	r4, #0
 800f438:	fb00 f00b 	mul.w	r0, r0, fp
 800f43c:	da04      	bge.n	800f448 <GL_DrawLineEx+0xd0>
 800f43e:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800f442:	129b      	asrs	r3, r3, #10
 800f444:	425b      	negs	r3, r3
 800f446:	e002      	b.n	800f44e <GL_DrawLineEx+0xd6>
 800f448:	f504 7300 	add.w	r3, r4, #512	; 0x200
 800f44c:	129b      	asrs	r3, r3, #10
 800f44e:	2800      	cmp	r0, #0
 800f450:	da06      	bge.n	800f460 <GL_DrawLineEx+0xe8>
 800f452:	f5c0 7b00 	rsb	fp, r0, #512	; 0x200
 800f456:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800f45a:	f1cb 0b00 	rsb	fp, fp, #0
 800f45e:	e003      	b.n	800f468 <GL_DrawLineEx+0xf0>
 800f460:	f500 7b00 	add.w	fp, r0, #512	; 0x200
 800f464:	ea4f 2bab 	mov.w	fp, fp, asr #10
 800f468:	2b00      	cmp	r3, #0
 800f46a:	dd03      	ble.n	800f474 <GL_DrawLineEx+0xfc>
 800f46c:	1c58      	adds	r0, r3, #1
 800f46e:	1040      	asrs	r0, r0, #1
 800f470:	105b      	asrs	r3, r3, #1
 800f472:	e005      	b.n	800f480 <GL_DrawLineEx+0x108>
 800f474:	2202      	movs	r2, #2
 800f476:	fb93 f0f2 	sdiv	r0, r3, r2
 800f47a:	3b01      	subs	r3, #1
 800f47c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f480:	f1bb 0f00 	cmp.w	fp, #0
 800f484:	dd05      	ble.n	800f492 <GL_DrawLineEx+0x11a>
 800f486:	f10b 0201 	add.w	r2, fp, #1
 800f48a:	1052      	asrs	r2, r2, #1
 800f48c:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800f490:	e006      	b.n	800f4a0 <GL_DrawLineEx+0x128>
 800f492:	2102      	movs	r1, #2
 800f494:	fb9b f2f1 	sdiv	r2, fp, r1
 800f498:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f49c:	fb9b fbf1 	sdiv	fp, fp, r1
 800f4a0:	b280      	uxth	r0, r0
 800f4a2:	fa1f f489 	uxth.w	r4, r9
 800f4a6:	1901      	adds	r1, r0, r4
 800f4a8:	b292      	uxth	r2, r2
 800f4aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f4ae:	fa1f fb8b 	uxth.w	fp, fp
 800f4b2:	fa1f f188 	uxth.w	r1, r8
 800f4b6:	1855      	adds	r5, r2, r1
 800f4b8:	ebcb 0101 	rsb	r1, fp, r1
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	f8ad 100e 	strh.w	r1, [sp, #14]
 800f4c2:	b2b9      	uxth	r1, r7
 800f4c4:	1ae4      	subs	r4, r4, r3
 800f4c6:	1acb      	subs	r3, r1, r3
 800f4c8:	f8ad 3010 	strh.w	r3, [sp, #16]
 800f4cc:	b2b3      	uxth	r3, r6
 800f4ce:	4401      	add	r1, r0
 800f4d0:	ebcb 0b03 	rsb	fp, fp, r3
 800f4d4:	4413      	add	r3, r2
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f4dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4e0:	a802      	add	r0, sp, #8
 800f4e2:	4613      	mov	r3, r2
 800f4e4:	2104      	movs	r1, #4
 800f4e6:	f8ad 500a 	strh.w	r5, [sp, #10]
 800f4ea:	f8ad 400c 	strh.w	r4, [sp, #12]
 800f4ee:	f8ad b012 	strh.w	fp, [sp, #18]
 800f4f2:	f002 fde9 	bl	80120c8 <GL_FillPolygon>
 800f4f6:	f8da 3000 	ldr.w	r3, [sl]
 800f4fa:	7e5b      	ldrb	r3, [r3, #25]
 800f4fc:	b91b      	cbnz	r3, 800f506 <GL_DrawLineEx+0x18e>
 800f4fe:	4648      	mov	r0, r9
 800f500:	4641      	mov	r1, r8
 800f502:	f002 fec3 	bl	801228c <GL_DrawPoint>
 800f506:	f8da 3000 	ldr.w	r3, [sl]
 800f50a:	7e5b      	ldrb	r3, [r3, #25]
 800f50c:	b91b      	cbnz	r3, 800f516 <GL_DrawLineEx+0x19e>
 800f50e:	4638      	mov	r0, r7
 800f510:	4631      	mov	r1, r6
 800f512:	f002 febb 	bl	801228c <GL_DrawPoint>
 800f516:	b007      	add	sp, #28
 800f518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f51c:	20000034 	.word	0x20000034
 800f520:	0801433a 	.word	0x0801433a

0800f524 <GL_DrawLine>:
 800f524:	b530      	push	{r4, r5, lr}
 800f526:	b085      	sub	sp, #20
 800f528:	ac04      	add	r4, sp, #16
 800f52a:	2500      	movs	r5, #0
 800f52c:	f844 5d04 	str.w	r5, [r4, #-4]!
 800f530:	9400      	str	r4, [sp, #0]
 800f532:	f7ff ff21 	bl	800f378 <GL_DrawLineEx>
 800f536:	b005      	add	sp, #20
 800f538:	bd30      	pop	{r4, r5, pc}
	...

0800f53c <GUI_DrawLine>:
 800f53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f540:	461e      	mov	r6, r3
 800f542:	4b0c      	ldr	r3, [pc, #48]	; (800f574 <GUI_DrawLine+0x38>)
 800f544:	681c      	ldr	r4, [r3, #0]
 800f546:	4681      	mov	r9, r0
 800f548:	2000      	movs	r0, #0
 800f54a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f54c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800f54e:	4688      	mov	r8, r1
 800f550:	4617      	mov	r7, r2
 800f552:	f7fb fdb1 	bl	800b0b8 <WM__InitIVRSearch>
 800f556:	b150      	cbz	r0, 800f56e <GUI_DrawLine+0x32>
 800f558:	eb09 0005 	add.w	r0, r9, r5
 800f55c:	eb08 0104 	add.w	r1, r8, r4
 800f560:	197a      	adds	r2, r7, r5
 800f562:	1933      	adds	r3, r6, r4
 800f564:	f7ff ffde 	bl	800f524 <GL_DrawLine>
 800f568:	f7fb fce4 	bl	800af34 <WM__GetNextIVR>
 800f56c:	e7f3      	b.n	800f556 <GUI_DrawLine+0x1a>
 800f56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f572:	bf00      	nop
 800f574:	20000034 	.word	0x20000034

0800f578 <GUI_DispStringAt>:
 800f578:	4b02      	ldr	r3, [pc, #8]	; (800f584 <GUI_DispStringAt+0xc>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	8459      	strh	r1, [r3, #34]	; 0x22
 800f57e:	849a      	strh	r2, [r3, #36]	; 0x24
 800f580:	f000 b802 	b.w	800f588 <GUI_DispString>
 800f584:	20000034 	.word	0x20000034

0800f588 <GUI_DispString>:
 800f588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	4604      	mov	r4, r0
 800f58e:	2800      	cmp	r0, #0
 800f590:	d079      	beq.n	800f686 <GUI_DispString+0xfe>
 800f592:	4d3e      	ldr	r5, [pc, #248]	; (800f68c <GUI_DispString+0x104>)
 800f594:	f000 fcf0 	bl	800ff78 <GUI_GetFontDistY>
 800f598:	682b      	ldr	r3, [r5, #0]
 800f59a:	4680      	mov	r8, r0
 800f59c:	f8b3 9022 	ldrh.w	r9, [r3, #34]	; 0x22
 800f5a0:	f000 fcd2 	bl	800ff48 <GUI_GetYAdjust>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800f5a8:	b287      	uxth	r7, r0
 800f5aa:	1bd2      	subs	r2, r2, r7
 800f5ac:	849a      	strh	r2, [r3, #36]	; 0x24
 800f5ae:	7823      	ldrb	r3, [r4, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d05d      	beq.n	800f670 <GUI_DispString+0xe8>
 800f5b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f000 fc13 	bl	800fde4 <GUI__GetLineNumChars>
 800f5be:	4606      	mov	r6, r0
 800f5c0:	4631      	mov	r1, r6
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fc3c 	bl	800fe40 <GUI__GetLineDistX>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f5cc:	f002 0203 	and.w	r2, r2, #3
 800f5d0:	2a01      	cmp	r2, #1
 800f5d2:	d005      	beq.n	800f5e0 <GUI_DispString+0x58>
 800f5d4:	2a02      	cmp	r2, #2
 800f5d6:	bf14      	ite	ne
 800f5d8:	2200      	movne	r2, #0
 800f5da:	fb90 f2f2 	sdiveq	r2, r0, r2
 800f5de:	e000      	b.n	800f5e2 <GUI_DispString+0x5a>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f5e4:	1a8a      	subs	r2, r1, r2
 800f5e6:	b292      	uxth	r2, r2
 800f5e8:	b291      	uxth	r1, r2
 800f5ea:	8459      	strh	r1, [r3, #34]	; 0x22
 800f5ec:	fa1f fa80 	uxth.w	sl, r0
 800f5f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f5f2:	f8ad 1000 	strh.w	r1, [sp]
 800f5f6:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800f5fa:	440a      	add	r2, r1
 800f5fc:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f600:	fa1f fb88 	uxth.w	fp, r8
 800f604:	3b01      	subs	r3, #1
 800f606:	445b      	add	r3, fp
 800f608:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f60c:	4620      	mov	r0, r4
 800f60e:	4631      	mov	r1, r6
 800f610:	466a      	mov	r2, sp
 800f612:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f616:	f000 fc43 	bl	800fea0 <GUI__DispLine>
 800f61a:	682b      	ldr	r3, [r5, #0]
 800f61c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f620:	849a      	strh	r2, [r3, #36]	; 0x24
 800f622:	4620      	mov	r0, r4
 800f624:	4631      	mov	r1, r6
 800f626:	f002 fd01 	bl	801202c <GUI_UC__NumChars2NumBytes>
 800f62a:	5c23      	ldrb	r3, [r4, r0]
 800f62c:	2b0a      	cmp	r3, #10
 800f62e:	eb04 0200 	add.w	r2, r4, r0
 800f632:	d001      	beq.n	800f638 <GUI_DispString+0xb0>
 800f634:	2b0d      	cmp	r3, #13
 800f636:	d112      	bne.n	800f65e <GUI_DispString+0xd6>
 800f638:	682b      	ldr	r3, [r5, #0]
 800f63a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800f63c:	f001 0103 	and.w	r1, r1, #3
 800f640:	3901      	subs	r1, #1
 800f642:	2901      	cmp	r1, #1
 800f644:	bf8a      	itet	hi
 800f646:	8c19      	ldrhhi	r1, [r3, #32]
 800f648:	f8a3 9022 	strhls.w	r9, [r3, #34]	; 0x22
 800f64c:	8459      	strhhi	r1, [r3, #34]	; 0x22
 800f64e:	7811      	ldrb	r1, [r2, #0]
 800f650:	290a      	cmp	r1, #10
 800f652:	d10b      	bne.n	800f66c <GUI_DispString+0xe4>
 800f654:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800f656:	448b      	add	fp, r1
 800f658:	f8a3 b024 	strh.w	fp, [r3, #36]	; 0x24
 800f65c:	e006      	b.n	800f66c <GUI_DispString+0xe4>
 800f65e:	4b0b      	ldr	r3, [pc, #44]	; (800f68c <GUI_DispString+0x104>)
 800f660:	f8bd 0000 	ldrh.w	r0, [sp]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4482      	add	sl, r0
 800f668:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 800f66c:	7813      	ldrb	r3, [r2, #0]
 800f66e:	b943      	cbnz	r3, 800f682 <GUI_DispString+0xfa>
 800f670:	682b      	ldr	r3, [r5, #0]
 800f672:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800f674:	4417      	add	r7, r2
 800f676:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f678:	849f      	strh	r7, [r3, #36]	; 0x24
 800f67a:	f022 0203 	bic.w	r2, r2, #3
 800f67e:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f680:	e001      	b.n	800f686 <GUI_DispString+0xfe>
 800f682:	1c54      	adds	r4, r2, #1
 800f684:	e793      	b.n	800f5ae <GUI_DispString+0x26>
 800f686:	b003      	add	sp, #12
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	20000034 	.word	0x20000034

0800f690 <CL_DispChar>:
 800f690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f692:	4d20      	ldr	r5, [pc, #128]	; (800f714 <CL_DispChar+0x84>)
 800f694:	682b      	ldr	r3, [r5, #0]
 800f696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f698:	8c5e      	ldrh	r6, [r3, #34]	; 0x22
 800f69a:	8c9f      	ldrh	r7, [r3, #36]	; 0x24
 800f69c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f69e:	4416      	add	r6, r2
 800f6a0:	b2b6      	uxth	r6, r6
 800f6a2:	b2b2      	uxth	r2, r6
 800f6a4:	4439      	add	r1, r7
 800f6a6:	845a      	strh	r2, [r3, #34]	; 0x22
 800f6a8:	8499      	strh	r1, [r3, #36]	; 0x24
 800f6aa:	f8ad 2000 	strh.w	r2, [sp]
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	f000 fc92 	bl	800ffd8 <GUI_GetCharDistX>
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 fbb2 	bl	800fe20 <GUI__GetOverlap>
 800f6bc:	3e01      	subs	r6, #1
 800f6be:	682b      	ldr	r3, [r5, #0]
 800f6c0:	4437      	add	r7, r6
 800f6c2:	4438      	add	r0, r7
 800f6c4:	8c9e      	ldrh	r6, [r3, #36]	; 0x24
 800f6c6:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f6ca:	f8ad 0004 	strh.w	r0, [sp, #4]
 800f6ce:	f002 fcd9 	bl	8012084 <GUI_GetFontSizeY>
 800f6d2:	3e01      	subs	r6, #1
 800f6d4:	4430      	add	r0, r6
 800f6d6:	f8ad 0006 	strh.w	r0, [sp, #6]
 800f6da:	4668      	mov	r0, sp
 800f6dc:	f7fb fcec 	bl	800b0b8 <WM__InitIVRSearch>
 800f6e0:	b938      	cbnz	r0, 800f6f2 <CL_DispChar+0x62>
 800f6e2:	2c0a      	cmp	r4, #10
 800f6e4:	d00b      	beq.n	800f6fe <CL_DispChar+0x6e>
 800f6e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800f6ea:	682b      	ldr	r3, [r5, #0]
 800f6ec:	3201      	adds	r2, #1
 800f6ee:	845a      	strh	r2, [r3, #34]	; 0x22
 800f6f0:	e005      	b.n	800f6fe <CL_DispChar+0x6e>
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	f000 fc56 	bl	800ffa4 <GL_DispChar>
 800f6f8:	f7fb fc1c 	bl	800af34 <WM__GetNextIVR>
 800f6fc:	e7f0      	b.n	800f6e0 <CL_DispChar+0x50>
 800f6fe:	682b      	ldr	r3, [r5, #0]
 800f700:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800f702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f704:	1a8a      	subs	r2, r1, r2
 800f706:	845a      	strh	r2, [r3, #34]	; 0x22
 800f708:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800f70a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f70c:	1a8a      	subs	r2, r1, r2
 800f70e:	849a      	strh	r2, [r3, #36]	; 0x24
 800f710:	b003      	add	sp, #12
 800f712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f714:	20000034 	.word	0x20000034

0800f718 <GUI_DispCharAt>:
 800f718:	4b02      	ldr	r3, [pc, #8]	; (800f724 <GUI_DispCharAt+0xc>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	8459      	strh	r1, [r3, #34]	; 0x22
 800f71e:	849a      	strh	r2, [r3, #36]	; 0x24
 800f720:	f7ff bfb6 	b.w	800f690 <CL_DispChar>
 800f724:	20000034 	.word	0x20000034

0800f728 <GUI_DEVICE__GetpDevice>:
 800f728:	2801      	cmp	r0, #1
 800f72a:	dc0a      	bgt.n	800f742 <GUI_DEVICE__GetpDevice+0x1a>
 800f72c:	4b06      	ldr	r3, [pc, #24]	; (800f748 <GUI_DEVICE__GetpDevice+0x20>)
 800f72e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f732:	b128      	cbz	r0, 800f740 <GUI_DEVICE__GetpDevice+0x18>
 800f734:	68c3      	ldr	r3, [r0, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	428b      	cmp	r3, r1
 800f73a:	d003      	beq.n	800f744 <GUI_DEVICE__GetpDevice+0x1c>
 800f73c:	6800      	ldr	r0, [r0, #0]
 800f73e:	e7f8      	b.n	800f732 <GUI_DEVICE__GetpDevice+0xa>
 800f740:	4770      	bx	lr
 800f742:	2000      	movs	r0, #0
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	20026d44 	.word	0x20026d44

0800f74c <GUI_DEVICE__GetpDriver>:
 800f74c:	2801      	cmp	r0, #1
 800f74e:	dc09      	bgt.n	800f764 <GUI_DEVICE__GetpDriver+0x18>
 800f750:	4b05      	ldr	r3, [pc, #20]	; (800f768 <GUI_DEVICE__GetpDriver+0x1c>)
 800f752:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f756:	b120      	cbz	r0, 800f762 <GUI_DEVICE__GetpDriver+0x16>
 800f758:	68c3      	ldr	r3, [r0, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	b11b      	cbz	r3, 800f766 <GUI_DEVICE__GetpDriver+0x1a>
 800f75e:	6800      	ldr	r0, [r0, #0]
 800f760:	e7f9      	b.n	800f756 <GUI_DEVICE__GetpDriver+0xa>
 800f762:	4770      	bx	lr
 800f764:	2000      	movs	r0, #0
 800f766:	4770      	bx	lr
 800f768:	20026d44 	.word	0x20026d44

0800f76c <GUI_DEVICE_Delete>:
 800f76c:	f000 bd34 	b.w	80101d8 <GUI_ALLOC_FreeFixedBlock>

0800f770 <GUI_DEVICE_Create>:
 800f770:	2b01      	cmp	r3, #1
 800f772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f774:	4606      	mov	r6, r0
 800f776:	460d      	mov	r5, r1
 800f778:	4617      	mov	r7, r2
 800f77a:	461c      	mov	r4, r3
 800f77c:	dd01      	ble.n	800f782 <GUI_DEVICE_Create+0x12>
 800f77e:	2000      	movs	r0, #0
 800f780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f782:	201c      	movs	r0, #28
 800f784:	f000 fe88 	bl	8010498 <GUI_ALLOC_GetFixedBlock>
 800f788:	2800      	cmp	r0, #0
 800f78a:	d0f8      	beq.n	800f77e <GUI_DEVICE_Create+0xe>
 800f78c:	b10d      	cbz	r5, 800f792 <GUI_DEVICE_Create+0x22>
 800f78e:	6105      	str	r5, [r0, #16]
 800f790:	e009      	b.n	800f7a6 <GUI_DEVICE_Create+0x36>
 800f792:	4b09      	ldr	r3, [pc, #36]	; (800f7b8 <GUI_DEVICE_Create+0x48>)
 800f794:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800f798:	b129      	cbz	r1, 800f7a6 <GUI_DEVICE_Create+0x36>
 800f79a:	680b      	ldr	r3, [r1, #0]
 800f79c:	b10b      	cbz	r3, 800f7a2 <GUI_DEVICE_Create+0x32>
 800f79e:	4619      	mov	r1, r3
 800f7a0:	e7fb      	b.n	800f79a <GUI_DEVICE_Create+0x2a>
 800f7a2:	690b      	ldr	r3, [r1, #16]
 800f7a4:	6103      	str	r3, [r0, #16]
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	6083      	str	r3, [r0, #8]
 800f7aa:	6184      	str	r4, [r0, #24]
 800f7ac:	8287      	strh	r7, [r0, #20]
 800f7ae:	60c6      	str	r6, [r0, #12]
 800f7b0:	6003      	str	r3, [r0, #0]
 800f7b2:	6043      	str	r3, [r0, #4]
 800f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	20026d44 	.word	0x20026d44

0800f7bc <GUI_DEVICE_Unlink>:
 800f7bc:	4b09      	ldr	r3, [pc, #36]	; (800f7e4 <GUI_DEVICE_Unlink+0x28>)
 800f7be:	6982      	ldr	r2, [r0, #24]
 800f7c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7c4:	4281      	cmp	r1, r0
 800f7c6:	bf04      	itt	eq
 800f7c8:	6801      	ldreq	r1, [r0, #0]
 800f7ca:	f843 1022 	streq.w	r1, [r3, r2, lsl #2]
 800f7ce:	6843      	ldr	r3, [r0, #4]
 800f7d0:	b10b      	cbz	r3, 800f7d6 <GUI_DEVICE_Unlink+0x1a>
 800f7d2:	6802      	ldr	r2, [r0, #0]
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	6802      	ldr	r2, [r0, #0]
 800f7d8:	b102      	cbz	r2, 800f7dc <GUI_DEVICE_Unlink+0x20>
 800f7da:	6053      	str	r3, [r2, #4]
 800f7dc:	2300      	movs	r3, #0
 800f7de:	6003      	str	r3, [r0, #0]
 800f7e0:	6043      	str	r3, [r0, #4]
 800f7e2:	4770      	bx	lr
 800f7e4:	20026d44 	.word	0x20026d44

0800f7e8 <GUI_DEVICE_Link>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	b338      	cbz	r0, 800f83c <GUI_DEVICE_Link+0x54>
 800f7ec:	6982      	ldr	r2, [r0, #24]
 800f7ee:	2a01      	cmp	r2, #1
 800f7f0:	dc24      	bgt.n	800f83c <GUI_DEVICE_Link+0x54>
 800f7f2:	4919      	ldr	r1, [pc, #100]	; (800f858 <GUI_DEVICE_Link+0x70>)
 800f7f4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800f7f8:	460d      	mov	r5, r1
 800f7fa:	b913      	cbnz	r3, 800f802 <GUI_DEVICE_Link+0x1a>
 800f7fc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800f800:	e01a      	b.n	800f838 <GUI_DEVICE_Link+0x50>
 800f802:	6859      	ldr	r1, [r3, #4]
 800f804:	b109      	cbz	r1, 800f80a <GUI_DEVICE_Link+0x22>
 800f806:	460b      	mov	r3, r1
 800f808:	e7fb      	b.n	800f802 <GUI_DEVICE_Link+0x1a>
 800f80a:	68c1      	ldr	r1, [r0, #12]
 800f80c:	680e      	ldr	r6, [r1, #0]
 800f80e:	68d9      	ldr	r1, [r3, #12]
 800f810:	680c      	ldr	r4, [r1, #0]
 800f812:	42b4      	cmp	r4, r6
 800f814:	dd03      	ble.n	800f81e <GUI_DEVICE_Link+0x36>
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1f8      	bne.n	800f80e <GUI_DEVICE_Link+0x26>
 800f81c:	e00e      	b.n	800f83c <GUI_DEVICE_Link+0x54>
 800f81e:	d102      	bne.n	800f826 <GUI_DEVICE_Link+0x3e>
 800f820:	8a81      	ldrh	r1, [r0, #20]
 800f822:	2901      	cmp	r1, #1
 800f824:	d011      	beq.n	800f84a <GUI_DEVICE_Link+0x62>
 800f826:	6859      	ldr	r1, [r3, #4]
 800f828:	b199      	cbz	r1, 800f852 <GUI_DEVICE_Link+0x6a>
 800f82a:	6008      	str	r0, [r1, #0]
 800f82c:	6041      	str	r1, [r0, #4]
 800f82e:	6058      	str	r0, [r3, #4]
 800f830:	4298      	cmp	r0, r3
 800f832:	bf08      	it	eq
 800f834:	2300      	moveq	r3, #0
 800f836:	6003      	str	r3, [r0, #0]
 800f838:	2000      	movs	r0, #0
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	2001      	movs	r0, #1
 800f83e:	bd70      	pop	{r4, r5, r6, pc}
 800f840:	68cb      	ldr	r3, [r1, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	42a3      	cmp	r3, r4
 800f846:	460b      	mov	r3, r1
 800f848:	dbed      	blt.n	800f826 <GUI_DEVICE_Link+0x3e>
 800f84a:	6819      	ldr	r1, [r3, #0]
 800f84c:	2900      	cmp	r1, #0
 800f84e:	d1f7      	bne.n	800f840 <GUI_DEVICE_Link+0x58>
 800f850:	e7e9      	b.n	800f826 <GUI_DEVICE_Link+0x3e>
 800f852:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800f856:	e7ea      	b.n	800f82e <GUI_DEVICE_Link+0x46>
 800f858:	20026d44 	.word	0x20026d44

0800f85c <GUI_DEVICE_CreateAndLink>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	461d      	mov	r5, r3
 800f860:	f7ff ff86 	bl	800f770 <GUI_DEVICE_Create>
 800f864:	4604      	mov	r4, r0
 800f866:	b148      	cbz	r0, 800f87c <GUI_DEVICE_CreateAndLink+0x20>
 800f868:	f7ff ffbe 	bl	800f7e8 <GUI_DEVICE_Link>
 800f86c:	68e3      	ldr	r3, [r4, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	b923      	cbnz	r3, 800f87c <GUI_DEVICE_CreateAndLink+0x20>
 800f872:	4b03      	ldr	r3, [pc, #12]	; (800f880 <GUI_DEVICE_CreateAndLink+0x24>)
 800f874:	3516      	adds	r5, #22
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800f87c:	4620      	mov	r0, r4
 800f87e:	bd38      	pop	{r3, r4, r5, pc}
 800f880:	20000034 	.word	0x20000034

0800f884 <_OnExit>:
 800f884:	b510      	push	{r4, lr}
 800f886:	4b07      	ldr	r3, [pc, #28]	; (800f8a4 <_OnExit+0x20>)
 800f888:	4807      	ldr	r0, [pc, #28]	; (800f8a8 <_OnExit+0x24>)
 800f88a:	2400      	movs	r4, #0
 800f88c:	4621      	mov	r1, r4
 800f88e:	2270      	movs	r2, #112	; 0x70
 800f890:	601c      	str	r4, [r3, #0]
 800f892:	f7fd fdd5 	bl	800d440 <GUI__memset>
 800f896:	4621      	mov	r1, r4
 800f898:	4804      	ldr	r0, [pc, #16]	; (800f8ac <_OnExit+0x28>)
 800f89a:	2208      	movs	r2, #8
 800f89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8a0:	f7fd bdce 	b.w	800d440 <GUI__memset>
 800f8a4:	2002691c 	.word	0x2002691c
 800f8a8:	200268a4 	.word	0x200268a4
 800f8ac:	20026d44 	.word	0x20026d44

0800f8b0 <_InitContext>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	4d19      	ldr	r5, [pc, #100]	; (800f918 <_InitContext+0x68>)
 800f8b4:	682b      	ldr	r3, [r5, #0]
 800f8b6:	1d1a      	adds	r2, r3, #4
 800f8b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800f8ba:	f103 0208 	add.w	r2, r3, #8
 800f8be:	639b      	str	r3, [r3, #56]	; 0x38
 800f8c0:	641b      	str	r3, [r3, #64]	; 0x40
 800f8c2:	6142      	str	r2, [r0, #20]
 800f8c4:	7c5a      	ldrb	r2, [r3, #17]
 800f8c6:	4b15      	ldr	r3, [pc, #84]	; (800f91c <_InitContext+0x6c>)
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f8ce:	68c3      	ldr	r3, [r0, #12]
 800f8d0:	f104 0108 	add.w	r1, r4, #8
 800f8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8d6:	4798      	blx	r3
 800f8d8:	4b11      	ldr	r3, [pc, #68]	; (800f920 <_InitContext+0x70>)
 800f8da:	6663      	str	r3, [r4, #100]	; 0x64
 800f8dc:	4b11      	ldr	r3, [pc, #68]	; (800f924 <_InitContext+0x74>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	61e3      	str	r3, [r4, #28]
 800f8e2:	682b      	ldr	r3, [r5, #0]
 800f8e4:	3308      	adds	r3, #8
 800f8e6:	6163      	str	r3, [r4, #20]
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	7623      	strb	r3, [r4, #24]
 800f8ec:	f7fa ff04 	bl	800a6f8 <WM_GetDesktopWindow>
 800f8f0:	2303      	movs	r3, #3
 800f8f2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800f8f6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800f8fa:	6323      	str	r3, [r4, #48]	; 0x30
 800f8fc:	6363      	str	r3, [r4, #52]	; 0x34
 800f8fe:	64a0      	str	r0, [r4, #72]	; 0x48
 800f900:	2000      	movs	r0, #0
 800f902:	f7fd fd8d 	bl	800d420 <LCD_SetBkColor>
 800f906:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800f90a:	f7fd fd91 	bl	800d430 <LCD_SetColor>
 800f90e:	4b06      	ldr	r3, [pc, #24]	; (800f928 <_InitContext+0x78>)
 800f910:	4a06      	ldr	r2, [pc, #24]	; (800f92c <_InitContext+0x7c>)
 800f912:	601a      	str	r2, [r3, #0]
 800f914:	bd38      	pop	{r3, r4, r5, pc}
 800f916:	bf00      	nop
 800f918:	20000034 	.word	0x20000034
 800f91c:	20026d44 	.word	0x20026d44
 800f920:	0801435c 	.word	0x0801435c
 800f924:	20000038 	.word	0x20000038
 800f928:	20026d3c 	.word	0x20026d3c
 800f92c:	080147c4 	.word	0x080147c4

0800f930 <GUI_SetFuncGetpPalConvTable>:
 800f930:	4b01      	ldr	r3, [pc, #4]	; (800f938 <GUI_SetFuncGetpPalConvTable+0x8>)
 800f932:	6018      	str	r0, [r3, #0]
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	2000003c 	.word	0x2000003c

0800f93c <GUI_SetDefaultFont>:
 800f93c:	4b01      	ldr	r3, [pc, #4]	; (800f944 <GUI_SetDefaultFont+0x8>)
 800f93e:	6018      	str	r0, [r3, #0]
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	20000038 	.word	0x20000038

0800f948 <GUI_ClearRect>:
 800f948:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f94c:	4607      	mov	r7, r0
 800f94e:	2004      	movs	r0, #4
 800f950:	469a      	mov	sl, r3
 800f952:	460e      	mov	r6, r1
 800f954:	4691      	mov	r9, r2
 800f956:	f7fd faf7 	bl	800cf48 <LCD_SetDrawMode>
 800f95a:	4b13      	ldr	r3, [pc, #76]	; (800f9a8 <GUI_ClearRect+0x60>)
 800f95c:	681c      	ldr	r4, [r3, #0]
 800f95e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800f960:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800f962:	442f      	add	r7, r5
 800f964:	4426      	add	r6, r4
 800f966:	4680      	mov	r8, r0
 800f968:	444d      	add	r5, r9
 800f96a:	4454      	add	r4, sl
 800f96c:	4668      	mov	r0, sp
 800f96e:	f8ad 7000 	strh.w	r7, [sp]
 800f972:	f8ad 5004 	strh.w	r5, [sp, #4]
 800f976:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f97a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800f97e:	f7fb fb9b 	bl	800b0b8 <WM__InitIVRSearch>
 800f982:	b928      	cbnz	r0, 800f990 <GUI_ClearRect+0x48>
 800f984:	4640      	mov	r0, r8
 800f986:	f7fd fadf 	bl	800cf48 <LCD_SetDrawMode>
 800f98a:	b002      	add	sp, #8
 800f98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f990:	4638      	mov	r0, r7
 800f992:	4631      	mov	r1, r6
 800f994:	462a      	mov	r2, r5
 800f996:	4623      	mov	r3, r4
 800f998:	f7fd fb58 	bl	800d04c <LCD_FillRect>
 800f99c:	f7fb faca 	bl	800af34 <WM__GetNextIVR>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d1f5      	bne.n	800f990 <GUI_ClearRect+0x48>
 800f9a4:	e7ee      	b.n	800f984 <GUI_ClearRect+0x3c>
 800f9a6:	bf00      	nop
 800f9a8:	20000034 	.word	0x20000034

0800f9ac <GUI_Clear>:
 800f9ac:	b510      	push	{r4, lr}
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	4601      	mov	r1, r0
 800f9b2:	f7ff f87b 	bl	800eaac <GUI_GotoXY>
 800f9b6:	4804      	ldr	r0, [pc, #16]	; (800f9c8 <GUI_Clear+0x1c>)
 800f9b8:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800f9bc:	4601      	mov	r1, r0
 800f9be:	4613      	mov	r3, r2
 800f9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9c4:	f7ff bfc0 	b.w	800f948 <GUI_ClearRect>
 800f9c8:	ffffc001 	.word	0xffffc001

0800f9cc <GUI__RegisterExit>:
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	4b05      	ldr	r3, [pc, #20]	; (800f9ec <GUI__RegisterExit+0x20>)
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	605a      	str	r2, [r3, #4]
 800f9dc:	4b03      	ldr	r3, [pc, #12]	; (800f9ec <GUI__RegisterExit+0x20>)
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	200268a0 	.word	0x200268a0

0800f9f0 <GUI__Config>:
 800f9f0:	b508      	push	{r3, lr}
 800f9f2:	4b08      	ldr	r3, [pc, #32]	; (800fa14 <GUI__Config+0x24>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	b962      	cbnz	r2, 800fa12 <GUI__Config+0x22>
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	601a      	str	r2, [r3, #0]
 800f9fc:	f7f6 fa0a 	bl	8005e14 <GUI_X_Config>
 800fa00:	f7f6 fb64 	bl	80060cc <LCD_X_Config>
 800fa04:	4804      	ldr	r0, [pc, #16]	; (800fa18 <GUI__Config+0x28>)
 800fa06:	4b05      	ldr	r3, [pc, #20]	; (800fa1c <GUI__Config+0x2c>)
 800fa08:	6003      	str	r3, [r0, #0]
 800fa0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fa0e:	f7ff bfdd 	b.w	800f9cc <GUI__RegisterExit>
 800fa12:	bd08      	pop	{r3, pc}
 800fa14:	2002691c 	.word	0x2002691c
 800fa18:	20026914 	.word	0x20026914
 800fa1c:	0800f885 	.word	0x0800f885

0800fa20 <GUI_Init>:
 800fa20:	b590      	push	{r4, r7, lr}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	4b20      	ldr	r3, [pc, #128]	; (800faa8 <GUI_Init+0x88>)
 800fa28:	4a1f      	ldr	r2, [pc, #124]	; (800faa8 <GUI_Init+0x88>)
 800fa2a:	6812      	ldr	r2, [r2, #0]
 800fa2c:	f022 0201 	bic.w	r2, r2, #1
 800fa30:	601a      	str	r2, [r3, #0]
 800fa32:	4b1e      	ldr	r3, [pc, #120]	; (800faac <GUI_Init+0x8c>)
 800fa34:	2201      	movs	r2, #1
 800fa36:	601a      	str	r2, [r3, #0]
 800fa38:	4b1d      	ldr	r3, [pc, #116]	; (800fab0 <GUI_Init+0x90>)
 800fa3a:	4a1e      	ldr	r2, [pc, #120]	; (800fab4 <GUI_Init+0x94>)
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	4b1c      	ldr	r3, [pc, #112]	; (800fab0 <GUI_Init+0x90>)
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	4b1d      	ldr	r3, [pc, #116]	; (800fab8 <GUI_Init+0x98>)
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d000      	beq.n	800fa4a <GUI_Init+0x2a>
 800fa48:	e7fe      	b.n	800fa48 <GUI_Init+0x28>
 800fa4a:	f7ff ffd1 	bl	800f9f0 <GUI__Config>
 800fa4e:	4b1b      	ldr	r3, [pc, #108]	; (800fabc <GUI_Init+0x9c>)
 800fa50:	222e      	movs	r2, #46	; 0x2e
 800fa52:	701a      	strb	r2, [r3, #0]
 800fa54:	f7f6 f9ee 	bl	8005e34 <GUI_X_Init>
 800fa58:	4819      	ldr	r0, [pc, #100]	; (800fac0 <GUI_Init+0xa0>)
 800fa5a:	f7ff ff29 	bl	800f8b0 <_InitContext>
 800fa5e:	f7fd fc3d 	bl	800d2dc <emWin_LCD_Init>
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	f7fd f964 	bl	800cd30 <LCD_GetXSizeDisplay>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d004      	beq.n	800fa78 <GUI_Init+0x58>
 800fa6e:	f7fd f965 	bl	800cd3c <LCD_GetYSizeDisplay>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d109      	bne.n	800fa8c <GUI_Init+0x6c>
 800fa78:	f7fd f946 	bl	800cd08 <LCD_GetXSizeMax>
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	f7fd f946 	bl	800cd0e <LCD_GetYSizeMax>
 800fa82:	4603      	mov	r3, r0
 800fa84:	4620      	mov	r0, r4
 800fa86:	4619      	mov	r1, r3
 800fa88:	f7fd f948 	bl	800cd1c <LCD_SetDisplaySize>
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	2100      	movs	r1, #0
 800fa90:	f002 fade 	bl	8012050 <GUI_SetOrg>
 800fa94:	f7fb fbf8 	bl	800b288 <WM_Init>
 800fa98:	4b0a      	ldr	r3, [pc, #40]	; (800fac4 <GUI_Init+0xa4>)
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	701a      	strb	r2, [r3, #0]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd90      	pop	{r4, r7, pc}
 800faa8:	e0002000 	.word	0xe0002000
 800faac:	40023008 	.word	0x40023008
 800fab0:	40023000 	.word	0x40023000
 800fab4:	f407a5c2 	.word	0xf407a5c2
 800fab8:	b5e8b5cd 	.word	0xb5e8b5cd
 800fabc:	20026d16 	.word	0x20026d16
 800fac0:	200268a4 	.word	0x200268a4
 800fac4:	20026d34 	.word	0x20026d34

0800fac8 <GL_FillCircle>:
 800fac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	f240 29c3 	movw	r9, #707	; 0x2c3
 800fad0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800fb88 <GL_FillCircle+0xc0>
 800fad4:	fb09 f902 	mul.w	r9, r9, r2
 800fad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fadc:	fb99 f9f3 	sdiv	r9, r9, r3
 800fae0:	f8d8 3000 	ldr.w	r3, [r8]
 800fae4:	f04f 0b02 	mov.w	fp, #2
 800fae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faea:	4606      	mov	r6, r0
 800faec:	fb92 fbfb 	sdiv	fp, r2, fp
 800faf0:	1a80      	subs	r0, r0, r2
 800faf2:	4614      	mov	r4, r2
 800faf4:	fb02 bb02 	mla	fp, r2, r2, fp
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	18b2      	adds	r2, r6, r2
 800fafc:	460f      	mov	r7, r1
 800fafe:	4798      	blx	r3
 800fb00:	f109 0901 	add.w	r9, r9, #1
 800fb04:	2501      	movs	r5, #1
 800fb06:	454d      	cmp	r5, r9
 800fb08:	dc3a      	bgt.n	800fb80 <GL_FillCircle+0xb8>
 800fb0a:	fb04 f304 	mul.w	r3, r4, r4
 800fb0e:	fb05 3305 	mla	r3, r5, r5, r3
 800fb12:	455b      	cmp	r3, fp
 800fb14:	dd1b      	ble.n	800fb4e <GL_FillCircle+0x86>
 800fb16:	454c      	cmp	r4, r9
 800fb18:	dd18      	ble.n	800fb4c <GL_FillCircle+0x84>
 800fb1a:	f8d8 2000 	ldr.w	r2, [r8]
 800fb1e:	1c73      	adds	r3, r6, #1
 800fb20:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fb22:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
 800fb26:	1b5b      	subs	r3, r3, r5
 800fb28:	44aa      	add	sl, r5
 800fb2a:	f8d2 c000 	ldr.w	ip, [r2]
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	1939      	adds	r1, r7, r4
 800fb34:	4652      	mov	r2, sl
 800fb36:	47e0      	blx	ip
 800fb38:	f8d8 2000 	ldr.w	r2, [r8]
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fb40:	4618      	mov	r0, r3
 800fb42:	f8d2 c000 	ldr.w	ip, [r2]
 800fb46:	1b39      	subs	r1, r7, r4
 800fb48:	4652      	mov	r2, sl
 800fb4a:	47e0      	blx	ip
 800fb4c:	3c01      	subs	r4, #1
 800fb4e:	f8d8 2000 	ldr.w	r2, [r8]
 800fb52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fb54:	1b33      	subs	r3, r6, r4
 800fb56:	eb06 0a04 	add.w	sl, r6, r4
 800fb5a:	f8d2 c000 	ldr.w	ip, [r2]
 800fb5e:	9301      	str	r3, [sp, #4]
 800fb60:	4618      	mov	r0, r3
 800fb62:	19e9      	adds	r1, r5, r7
 800fb64:	4652      	mov	r2, sl
 800fb66:	47e0      	blx	ip
 800fb68:	f8d8 2000 	ldr.w	r2, [r8]
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800fb70:	1b79      	subs	r1, r7, r5
 800fb72:	f8d2 c000 	ldr.w	ip, [r2]
 800fb76:	4618      	mov	r0, r3
 800fb78:	4652      	mov	r2, sl
 800fb7a:	47e0      	blx	ip
 800fb7c:	3501      	adds	r5, #1
 800fb7e:	e7c2      	b.n	800fb06 <GL_FillCircle+0x3e>
 800fb80:	b003      	add	sp, #12
 800fb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb86:	bf00      	nop
 800fb88:	20000034 	.word	0x20000034

0800fb8c <GUI_FillCircle>:
 800fb8c:	4b0b      	ldr	r3, [pc, #44]	; (800fbbc <GUI_FillCircle+0x30>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb94:	4680      	mov	r8, r0
 800fb96:	2000      	movs	r0, #0
 800fb98:	460e      	mov	r6, r1
 800fb9a:	4614      	mov	r4, r2
 800fb9c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 800fb9e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800fba0:	f7fb fa8a 	bl	800b0b8 <WM__InitIVRSearch>
 800fba4:	b140      	cbz	r0, 800fbb8 <GUI_FillCircle+0x2c>
 800fba6:	eb08 0007 	add.w	r0, r8, r7
 800fbaa:	1971      	adds	r1, r6, r5
 800fbac:	4622      	mov	r2, r4
 800fbae:	f7ff ff8b 	bl	800fac8 <GL_FillCircle>
 800fbb2:	f7fb f9bf 	bl	800af34 <WM__GetNextIVR>
 800fbb6:	e7f5      	b.n	800fba4 <GUI_FillCircle+0x18>
 800fbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbbc:	20000034 	.word	0x20000034

0800fbc0 <GUIMONO_DispChar>:
 800fbc0:	4b52      	ldr	r3, [pc, #328]	; (800fd0c <GUIMONO_DispChar+0x14c>)
 800fbc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	69d9      	ldr	r1, [r3, #28]
 800fbca:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800fbcc:	69cc      	ldr	r4, [r1, #28]
 800fbce:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800fbd0:	89a2      	ldrh	r2, [r4, #12]
 800fbd2:	4290      	cmp	r0, r2
 800fbd4:	b08b      	sub	sp, #44	; 0x2c
 800fbd6:	d308      	bcc.n	800fbea <GUIMONO_DispChar+0x2a>
 800fbd8:	89e6      	ldrh	r6, [r4, #14]
 800fbda:	4286      	cmp	r6, r0
 800fbdc:	d305      	bcc.n	800fbea <GUIMONO_DispChar+0x2a>
 800fbde:	f8d4 9000 	ldr.w	r9, [r4]
 800fbe2:	1a82      	subs	r2, r0, r2
 800fbe4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800fbe8:	e015      	b.n	800fc16 <GUIMONO_DispChar+0x56>
 800fbea:	68a2      	ldr	r2, [r4, #8]
 800fbec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fbf0:	2a00      	cmp	r2, #0
 800fbf2:	f000 8081 	beq.w	800fcf8 <GUIMONO_DispChar+0x138>
 800fbf6:	8816      	ldrh	r6, [r2, #0]
 800fbf8:	42b0      	cmp	r0, r6
 800fbfa:	d37d      	bcc.n	800fcf8 <GUIMONO_DispChar+0x138>
 800fbfc:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800fc00:	4584      	cmp	ip, r0
 800fc02:	d379      	bcc.n	800fcf8 <GUIMONO_DispChar+0x138>
 800fc04:	6852      	ldr	r2, [r2, #4]
 800fc06:	1b80      	subs	r0, r0, r6
 800fc08:	b280      	uxth	r0, r0
 800fc0a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800fc0e:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800fc12:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800fc16:	1c50      	adds	r0, r2, #1
 800fc18:	d06e      	beq.n	800fcf8 <GUIMONO_DispChar+0x138>
 800fc1a:	f891 8018 	ldrb.w	r8, [r1, #24]
 800fc1e:	7ca1      	ldrb	r1, [r4, #18]
 800fc20:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800fc24:	7c26      	ldrb	r6, [r4, #16]
 800fc26:	9206      	str	r2, [sp, #24]
 800fc28:	fb18 f101 	smulbb	r1, r8, r1
 800fc2c:	9107      	str	r1, [sp, #28]
 800fc2e:	fa0f f18a 	sxth.w	r1, sl
 800fc32:	4608      	mov	r0, r1
 800fc34:	9108      	str	r1, [sp, #32]
 800fc36:	f7fd f987 	bl	800cf48 <LCD_SetDrawMode>
 800fc3a:	4934      	ldr	r1, [pc, #208]	; (800fd0c <GUIMONO_DispChar+0x14c>)
 800fc3c:	9009      	str	r0, [sp, #36]	; 0x24
 800fc3e:	680b      	ldr	r3, [r1, #0]
 800fc40:	9a06      	ldr	r2, [sp, #24]
 800fc42:	69d9      	ldr	r1, [r3, #28]
 800fc44:	7e88      	ldrb	r0, [r1, #26]
 800fc46:	9000      	str	r0, [sp, #0]
 800fc48:	7ec9      	ldrb	r1, [r1, #27]
 800fc4a:	9101      	str	r1, [sp, #4]
 800fc4c:	2101      	movs	r1, #1
 800fc4e:	9102      	str	r1, [sp, #8]
 800fc50:	7ca1      	ldrb	r1, [r4, #18]
 800fc52:	9103      	str	r1, [sp, #12]
 800fc54:	9907      	ldr	r1, [sp, #28]
 800fc56:	fb01 9202 	mla	r2, r1, r2, r9
 800fc5a:	9204      	str	r2, [sp, #16]
 800fc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc5e:	9305      	str	r3, [sp, #20]
 800fc60:	b23f      	sxth	r7, r7
 800fc62:	b22d      	sxth	r5, r5
 800fc64:	4638      	mov	r0, r7
 800fc66:	4629      	mov	r1, r5
 800fc68:	4632      	mov	r2, r6
 800fc6a:	4643      	mov	r3, r8
 800fc6c:	f7fd fa1a 	bl	800d0a4 <LCD_DrawBitmap>
 800fc70:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800fc74:	d01b      	beq.n	800fcae <GUIMONO_DispChar+0xee>
 800fc76:	f04a 0002 	orr.w	r0, sl, #2
 800fc7a:	b200      	sxth	r0, r0
 800fc7c:	f7fd f964 	bl	800cf48 <LCD_SetDrawMode>
 800fc80:	4a22      	ldr	r2, [pc, #136]	; (800fd0c <GUIMONO_DispChar+0x14c>)
 800fc82:	6813      	ldr	r3, [r2, #0]
 800fc84:	69da      	ldr	r2, [r3, #28]
 800fc86:	7e91      	ldrb	r1, [r2, #26]
 800fc88:	9100      	str	r1, [sp, #0]
 800fc8a:	7ed2      	ldrb	r2, [r2, #27]
 800fc8c:	9201      	str	r2, [sp, #4]
 800fc8e:	2101      	movs	r1, #1
 800fc90:	9102      	str	r1, [sp, #8]
 800fc92:	9907      	ldr	r1, [sp, #28]
 800fc94:	7ca2      	ldrb	r2, [r4, #18]
 800fc96:	9203      	str	r2, [sp, #12]
 800fc98:	fb01 920b 	mla	r2, r1, fp, r9
 800fc9c:	9204      	str	r2, [sp, #16]
 800fc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca0:	9305      	str	r3, [sp, #20]
 800fca2:	4638      	mov	r0, r7
 800fca4:	4629      	mov	r1, r5
 800fca6:	4632      	mov	r2, r6
 800fca8:	4643      	mov	r3, r8
 800fcaa:	f7fd f9fb 	bl	800d0a4 <LCD_DrawBitmap>
 800fcae:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800fd0c <GUIMONO_DispChar+0x14c>
 800fcb2:	f8d8 3000 	ldr.w	r3, [r8]
 800fcb6:	69db      	ldr	r3, [r3, #28]
 800fcb8:	7e5a      	ldrb	r2, [r3, #25]
 800fcba:	7e1b      	ldrb	r3, [r3, #24]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d917      	bls.n	800fcf0 <GUIMONO_DispChar+0x130>
 800fcc0:	9a08      	ldr	r2, [sp, #32]
 800fcc2:	2a02      	cmp	r2, #2
 800fcc4:	d014      	beq.n	800fcf0 <GUIMONO_DispChar+0x130>
 800fcc6:	f08a 0004 	eor.w	r0, sl, #4
 800fcca:	b200      	sxth	r0, r0
 800fccc:	f7fd f93c 	bl	800cf48 <LCD_SetDrawMode>
 800fcd0:	f8d8 3000 	ldr.w	r3, [r8]
 800fcd4:	69db      	ldr	r3, [r3, #28]
 800fcd6:	f893 e018 	ldrb.w	lr, [r3, #24]
 800fcda:	7ed9      	ldrb	r1, [r3, #27]
 800fcdc:	7e9a      	ldrb	r2, [r3, #26]
 800fcde:	7e5b      	ldrb	r3, [r3, #25]
 800fce0:	4638      	mov	r0, r7
 800fce2:	fb0e 5101 	mla	r1, lr, r1, r5
 800fce6:	fb06 7202 	mla	r2, r6, r2, r7
 800fcea:	442b      	add	r3, r5
 800fcec:	f7fd f9ae 	bl	800d04c <LCD_FillRect>
 800fcf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcf2:	b2d8      	uxtb	r0, r3
 800fcf4:	f7fd f928 	bl	800cf48 <LCD_SetDrawMode>
 800fcf8:	4b04      	ldr	r3, [pc, #16]	; (800fd0c <GUIMONO_DispChar+0x14c>)
 800fcfa:	7c61      	ldrb	r1, [r4, #17]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800fd00:	440a      	add	r2, r1
 800fd02:	845a      	strh	r2, [r3, #34]	; 0x22
 800fd04:	b00b      	add	sp, #44	; 0x2c
 800fd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd0a:	bf00      	nop
 800fd0c:	20000034 	.word	0x20000034

0800fd10 <GUIMONO_GetCharDistX>:
 800fd10:	4b04      	ldr	r3, [pc, #16]	; (800fd24 <GUIMONO_GetCharDistX+0x14>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	69db      	ldr	r3, [r3, #28]
 800fd16:	69db      	ldr	r3, [r3, #28]
 800fd18:	b109      	cbz	r1, 800fd1e <GUIMONO_GetCharDistX+0xe>
 800fd1a:	7c1a      	ldrb	r2, [r3, #16]
 800fd1c:	600a      	str	r2, [r1, #0]
 800fd1e:	7c58      	ldrb	r0, [r3, #17]
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	20000034 	.word	0x20000034

0800fd28 <GUIMONO_GetFontInfo>:
 800fd28:	2302      	movs	r3, #2
 800fd2a:	800b      	strh	r3, [r1, #0]
 800fd2c:	4770      	bx	lr

0800fd2e <GUIMONO_IsInFont>:
 800fd2e:	69c3      	ldr	r3, [r0, #28]
 800fd30:	899a      	ldrh	r2, [r3, #12]
 800fd32:	428a      	cmp	r2, r1
 800fd34:	d802      	bhi.n	800fd3c <GUIMONO_IsInFont+0xe>
 800fd36:	89da      	ldrh	r2, [r3, #14]
 800fd38:	428a      	cmp	r2, r1
 800fd3a:	d20f      	bcs.n	800fd5c <GUIMONO_IsInFont+0x2e>
 800fd3c:	6898      	ldr	r0, [r3, #8]
 800fd3e:	b180      	cbz	r0, 800fd62 <GUIMONO_IsInFont+0x34>
 800fd40:	8803      	ldrh	r3, [r0, #0]
 800fd42:	4299      	cmp	r1, r3
 800fd44:	d30c      	bcc.n	800fd60 <GUIMONO_IsInFont+0x32>
 800fd46:	8842      	ldrh	r2, [r0, #2]
 800fd48:	428a      	cmp	r2, r1
 800fd4a:	d309      	bcc.n	800fd60 <GUIMONO_IsInFont+0x32>
 800fd4c:	1ac9      	subs	r1, r1, r3
 800fd4e:	6842      	ldr	r2, [r0, #4]
 800fd50:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800fd54:	43c0      	mvns	r0, r0
 800fd56:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800fd5a:	4770      	bx	lr
 800fd5c:	2001      	movs	r0, #1
 800fd5e:	4770      	bx	lr
 800fd60:	2000      	movs	r0, #0
 800fd62:	4770      	bx	lr

0800fd64 <_Log2VisBuffered>:
 800fd64:	4770      	bx	lr
	...

0800fd68 <_DispLine>:
 800fd68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd6a:	4615      	mov	r5, r2
 800fd6c:	ab02      	add	r3, sp, #8
 800fd6e:	4a1a      	ldr	r2, [pc, #104]	; (800fdd8 <_DispLine+0x70>)
 800fd70:	f843 1d08 	str.w	r1, [r3, #-8]!
 800fd74:	9001      	str	r0, [sp, #4]
 800fd76:	6812      	ldr	r2, [r2, #0]
 800fd78:	4c18      	ldr	r4, [pc, #96]	; (800fddc <_DispLine+0x74>)
 800fd7a:	4669      	mov	r1, sp
 800fd7c:	4790      	blx	r2
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	9001      	str	r0, [sp, #4]
 800fd82:	6958      	ldr	r0, [r3, #20]
 800fd84:	b958      	cbnz	r0, 800fd9e <_DispLine+0x36>
 800fd86:	2001      	movs	r0, #1
 800fd88:	f7fd fbf8 	bl	800d57c <GUI__ManageCache>
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	69db      	ldr	r3, [r3, #28]
 800fd90:	695b      	ldr	r3, [r3, #20]
 800fd92:	b1bb      	cbz	r3, 800fdc4 <_DispLine+0x5c>
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	9801      	ldr	r0, [sp, #4]
 800fd98:	9900      	ldr	r1, [sp, #0]
 800fd9a:	4798      	blx	r3
 800fd9c:	e017      	b.n	800fdce <_DispLine+0x66>
 800fd9e:	4629      	mov	r1, r5
 800fda0:	f7fe fd83 	bl	800e8aa <GUI_RectsIntersect>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d1ee      	bne.n	800fd86 <_DispLine+0x1e>
 800fda8:	e014      	b.n	800fdd4 <_DispLine+0x6c>
 800fdaa:	a801      	add	r0, sp, #4
 800fdac:	f002 f92a 	bl	8012004 <GUI_UC__GetCharCodeInc>
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	69db      	ldr	r3, [r3, #28]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	4798      	blx	r3
 800fdba:	4b09      	ldr	r3, [pc, #36]	; (800fde0 <_DispLine+0x78>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	b10b      	cbz	r3, 800fdc4 <_DispLine+0x5c>
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	4798      	blx	r3
 800fdc4:	9b00      	ldr	r3, [sp, #0]
 800fdc6:	3b01      	subs	r3, #1
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	daed      	bge.n	800fdaa <_DispLine+0x42>
 800fdce:	2000      	movs	r0, #0
 800fdd0:	f7fd fbd4 	bl	800d57c <GUI__ManageCache>
 800fdd4:	b003      	add	sp, #12
 800fdd6:	bd30      	pop	{r4, r5, pc}
 800fdd8:	20000040 	.word	0x20000040
 800fddc:	20000034 	.word	0x20000034
 800fde0:	20026d30 	.word	0x20026d30

0800fde4 <GUI__GetLineNumChars>:
 800fde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fde6:	460d      	mov	r5, r1
 800fde8:	9001      	str	r0, [sp, #4]
 800fdea:	4604      	mov	r4, r0
 800fdec:	b198      	cbz	r0, 800fe16 <GUI__GetLineNumChars+0x32>
 800fdee:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <GUI__GetLineNumChars+0x38>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69db      	ldr	r3, [r3, #28]
 800fdf4:	695b      	ldr	r3, [r3, #20]
 800fdf6:	b10b      	cbz	r3, 800fdfc <GUI__GetLineNumChars+0x18>
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	b90b      	cbnz	r3, 800fe00 <GUI__GetLineNumChars+0x1c>
 800fdfc:	2400      	movs	r4, #0
 800fdfe:	e008      	b.n	800fe12 <GUI__GetLineNumChars+0x2e>
 800fe00:	4798      	blx	r3
 800fe02:	e009      	b.n	800fe18 <GUI__GetLineNumChars+0x34>
 800fe04:	a801      	add	r0, sp, #4
 800fe06:	f002 f8fd 	bl	8012004 <GUI_UC__GetCharCodeInc>
 800fe0a:	b120      	cbz	r0, 800fe16 <GUI__GetLineNumChars+0x32>
 800fe0c:	280a      	cmp	r0, #10
 800fe0e:	d002      	beq.n	800fe16 <GUI__GetLineNumChars+0x32>
 800fe10:	3401      	adds	r4, #1
 800fe12:	42ac      	cmp	r4, r5
 800fe14:	dbf6      	blt.n	800fe04 <GUI__GetLineNumChars+0x20>
 800fe16:	4620      	mov	r0, r4
 800fe18:	b003      	add	sp, #12
 800fe1a:	bd30      	pop	{r4, r5, pc}
 800fe1c:	20000034 	.word	0x20000034

0800fe20 <GUI__GetOverlap>:
 800fe20:	b513      	push	{r0, r1, r4, lr}
 800fe22:	a902      	add	r1, sp, #8
 800fe24:	2400      	movs	r4, #0
 800fe26:	f841 4d04 	str.w	r4, [r1, #-4]!
 800fe2a:	f000 f8df 	bl	800ffec <GUI_GetCharDistXEx>
 800fe2e:	9b01      	ldr	r3, [sp, #4]
 800fe30:	4283      	cmp	r3, r0
 800fe32:	bfcc      	ite	gt
 800fe34:	ebc0 0003 	rsbgt	r0, r0, r3
 800fe38:	4620      	movle	r0, r4
 800fe3a:	b002      	add	sp, #8
 800fe3c:	bd10      	pop	{r4, pc}
	...

0800fe40 <GUI__GetLineDistX>:
 800fe40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe42:	4a15      	ldr	r2, [pc, #84]	; (800fe98 <GUI__GetLineDistX+0x58>)
 800fe44:	9001      	str	r0, [sp, #4]
 800fe46:	ab02      	add	r3, sp, #8
 800fe48:	6812      	ldr	r2, [r2, #0]
 800fe4a:	f843 1d08 	str.w	r1, [r3, #-8]!
 800fe4e:	4669      	mov	r1, sp
 800fe50:	4790      	blx	r2
 800fe52:	9001      	str	r0, [sp, #4]
 800fe54:	b1f0      	cbz	r0, 800fe94 <GUI__GetLineDistX+0x54>
 800fe56:	4b11      	ldr	r3, [pc, #68]	; (800fe9c <GUI__GetLineDistX+0x5c>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	69db      	ldr	r3, [r3, #28]
 800fe5c:	695b      	ldr	r3, [r3, #20]
 800fe5e:	b10b      	cbz	r3, 800fe64 <GUI__GetLineDistX+0x24>
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	b913      	cbnz	r3, 800fe6a <GUI__GetLineDistX+0x2a>
 800fe64:	2500      	movs	r5, #0
 800fe66:	462c      	mov	r4, r5
 800fe68:	e002      	b.n	800fe70 <GUI__GetLineDistX+0x30>
 800fe6a:	9900      	ldr	r1, [sp, #0]
 800fe6c:	4798      	blx	r3
 800fe6e:	e011      	b.n	800fe94 <GUI__GetLineDistX+0x54>
 800fe70:	9b00      	ldr	r3, [sp, #0]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	db07      	blt.n	800fe8a <GUI__GetLineDistX+0x4a>
 800fe7a:	a801      	add	r0, sp, #4
 800fe7c:	f002 f8c2 	bl	8012004 <GUI_UC__GetCharCodeInc>
 800fe80:	4605      	mov	r5, r0
 800fe82:	f000 f8a9 	bl	800ffd8 <GUI_GetCharDistX>
 800fe86:	4404      	add	r4, r0
 800fe88:	e7f2      	b.n	800fe70 <GUI__GetLineDistX+0x30>
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f7ff ffc8 	bl	800fe20 <GUI__GetOverlap>
 800fe90:	4420      	add	r0, r4
 800fe92:	e7ff      	b.n	800fe94 <GUI__GetLineDistX+0x54>
 800fe94:	b003      	add	sp, #12
 800fe96:	bd30      	pop	{r4, r5, pc}
 800fe98:	20000040 	.word	0x20000040
 800fe9c:	20000034 	.word	0x20000034

0800fea0 <GUI__DispLine>:
 800fea0:	4b27      	ldr	r3, [pc, #156]	; (800ff40 <GUI__DispLine+0xa0>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fea6:	4605      	mov	r5, r0
 800fea8:	460c      	mov	r4, r1
 800feaa:	b163      	cbz	r3, 800fec6 <GUI__DispLine+0x26>
 800feac:	2000      	movs	r0, #0
 800feae:	f7fb f903 	bl	800b0b8 <WM__InitIVRSearch>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	d041      	beq.n	800ff3a <GUI__DispLine+0x9a>
 800feb6:	4628      	mov	r0, r5
 800feb8:	4621      	mov	r1, r4
 800feba:	466a      	mov	r2, sp
 800febc:	f7ff ff54 	bl	800fd68 <_DispLine>
 800fec0:	f7fb f838 	bl	800af34 <WM__GetNextIVR>
 800fec4:	e7f5      	b.n	800feb2 <GUI__DispLine+0x12>
 800fec6:	6810      	ldr	r0, [r2, #0]
 800fec8:	6851      	ldr	r1, [r2, #4]
 800feca:	4e1e      	ldr	r6, [pc, #120]	; (800ff44 <GUI__DispLine+0xa4>)
 800fecc:	466b      	mov	r3, sp
 800fece:	c303      	stmia	r3!, {r0, r1}
 800fed0:	6833      	ldr	r3, [r6, #0]
 800fed2:	f8bd 1000 	ldrh.w	r1, [sp]
 800fed6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800feda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fede:	4411      	add	r1, r2
 800fee0:	f8ad 1000 	strh.w	r1, [sp]
 800fee4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800fee8:	4419      	add	r1, r3
 800feea:	f8ad 1002 	strh.w	r1, [sp, #2]
 800feee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800fef2:	440a      	add	r2, r1
 800fef4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fef8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fefc:	4668      	mov	r0, sp
 800fefe:	4413      	add	r3, r2
 800ff00:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff04:	f7fb f8d8 	bl	800b0b8 <WM__InitIVRSearch>
 800ff08:	6833      	ldr	r3, [r6, #0]
 800ff0a:	b940      	cbnz	r0, 800ff1e <GUI__DispLine+0x7e>
 800ff0c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ff0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff10:	1a8a      	subs	r2, r1, r2
 800ff12:	845a      	strh	r2, [r3, #34]	; 0x22
 800ff14:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800ff16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff18:	1a8a      	subs	r2, r1, r2
 800ff1a:	849a      	strh	r2, [r3, #36]	; 0x24
 800ff1c:	e00d      	b.n	800ff3a <GUI__DispLine+0x9a>
 800ff1e:	f8bd 2000 	ldrh.w	r2, [sp]
 800ff22:	845a      	strh	r2, [r3, #34]	; 0x22
 800ff24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ff28:	849a      	strh	r2, [r3, #36]	; 0x24
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	466a      	mov	r2, sp
 800ff30:	f7ff ff1a 	bl	800fd68 <_DispLine>
 800ff34:	f7fa fffe 	bl	800af34 <WM__GetNextIVR>
 800ff38:	e7e6      	b.n	800ff08 <GUI__DispLine+0x68>
 800ff3a:	b002      	add	sp, #8
 800ff3c:	bd70      	pop	{r4, r5, r6, pc}
 800ff3e:	bf00      	nop
 800ff40:	20026d18 	.word	0x20026d18
 800ff44:	20000034 	.word	0x20000034

0800ff48 <GUI_GetYAdjust>:
 800ff48:	4b0a      	ldr	r3, [pc, #40]	; (800ff74 <GUI_GetYAdjust+0x2c>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ff4e:	f002 020c 	and.w	r2, r2, #12
 800ff52:	2a08      	cmp	r2, #8
 800ff54:	d007      	beq.n	800ff66 <GUI_GetYAdjust+0x1e>
 800ff56:	2a0c      	cmp	r2, #12
 800ff58:	d005      	beq.n	800ff66 <GUI_GetYAdjust+0x1e>
 800ff5a:	2a04      	cmp	r2, #4
 800ff5c:	d107      	bne.n	800ff6e <GUI_GetYAdjust+0x26>
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	7e18      	ldrb	r0, [r3, #24]
 800ff62:	3801      	subs	r0, #1
 800ff64:	4770      	bx	lr
 800ff66:	69db      	ldr	r3, [r3, #28]
 800ff68:	7e18      	ldrb	r0, [r3, #24]
 800ff6a:	0840      	lsrs	r0, r0, #1
 800ff6c:	4770      	bx	lr
 800ff6e:	2000      	movs	r0, #0
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	20000034 	.word	0x20000034

0800ff78 <GUI_GetFontDistY>:
 800ff78:	4b02      	ldr	r3, [pc, #8]	; (800ff84 <GUI_GetFontDistY+0xc>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	69db      	ldr	r3, [r3, #28]
 800ff7e:	7e58      	ldrb	r0, [r3, #25]
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	20000034 	.word	0x20000034

0800ff88 <GUI_DispNextLine>:
 800ff88:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <GUI_DispNextLine+0x18>)
 800ff8a:	b510      	push	{r4, lr}
 800ff8c:	681c      	ldr	r4, [r3, #0]
 800ff8e:	f7ff fff3 	bl	800ff78 <GUI_GetFontDistY>
 800ff92:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ff94:	4418      	add	r0, r3
 800ff96:	8c23      	ldrh	r3, [r4, #32]
 800ff98:	84a0      	strh	r0, [r4, #36]	; 0x24
 800ff9a:	8463      	strh	r3, [r4, #34]	; 0x22
 800ff9c:	bd10      	pop	{r4, pc}
 800ff9e:	bf00      	nop
 800ffa0:	20000034 	.word	0x20000034

0800ffa4 <GL_DispChar>:
 800ffa4:	280a      	cmp	r0, #10
 800ffa6:	b510      	push	{r4, lr}
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	d103      	bne.n	800ffb4 <GL_DispChar+0x10>
 800ffac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffb0:	f7ff bfea 	b.w	800ff88 <GUI_DispNextLine>
 800ffb4:	280d      	cmp	r0, #13
 800ffb6:	d009      	beq.n	800ffcc <GL_DispChar+0x28>
 800ffb8:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <GL_DispChar+0x2c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	69db      	ldr	r3, [r3, #28]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4798      	blx	r3
 800ffc2:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <GL_DispChar+0x30>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	b10b      	cbz	r3, 800ffcc <GL_DispChar+0x28>
 800ffc8:	4620      	mov	r0, r4
 800ffca:	4798      	blx	r3
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	bf00      	nop
 800ffd0:	20000034 	.word	0x20000034
 800ffd4:	20026d30 	.word	0x20026d30

0800ffd8 <GUI_GetCharDistX>:
 800ffd8:	b508      	push	{r3, lr}
 800ffda:	4b03      	ldr	r3, [pc, #12]	; (800ffe8 <GUI_GetCharDistX+0x10>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	69db      	ldr	r3, [r3, #28]
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	4798      	blx	r3
 800ffe6:	bd08      	pop	{r3, pc}
 800ffe8:	20000034 	.word	0x20000034

0800ffec <GUI_GetCharDistXEx>:
 800ffec:	b508      	push	{r3, lr}
 800ffee:	4b03      	ldr	r3, [pc, #12]	; (800fffc <GUI_GetCharDistXEx+0x10>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	69db      	ldr	r3, [r3, #28]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	4798      	blx	r3
 800fff8:	bd08      	pop	{r3, pc}
 800fffa:	bf00      	nop
 800fffc:	20000034 	.word	0x20000034

08010000 <_PushFreeBlock>:
 8010000:	4b07      	ldr	r3, [pc, #28]	; (8010020 <_PushFreeBlock+0x20>)
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010006:	3201      	adds	r2, #1
 8010008:	b510      	push	{r4, lr}
 801000a:	605a      	str	r2, [r3, #4]
 801000c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801000e:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 8010012:	6061      	str	r1, [r4, #4]
 8010014:	2100      	movs	r1, #0
 8010016:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 801001a:	6258      	str	r0, [r3, #36]	; 0x24
 801001c:	bd10      	pop	{r4, pc}
 801001e:	bf00      	nop
 8010020:	20026d54 	.word	0x20026d54

08010024 <_OnExit>:
 8010024:	b538      	push	{r3, r4, r5, lr}
 8010026:	4d0b      	ldr	r5, [pc, #44]	; (8010054 <_OnExit+0x30>)
 8010028:	2400      	movs	r4, #0
 801002a:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801002e:	4621      	mov	r1, r4
 8010030:	2280      	movs	r2, #128	; 0x80
 8010032:	f885 4028 	strb.w	r4, [r5, #40]	; 0x28
 8010036:	f7fd fa03 	bl	800d440 <GUI__memset>
 801003a:	4628      	mov	r0, r5
 801003c:	4621      	mov	r1, r4
 801003e:	22c0      	movs	r2, #192	; 0xc0
 8010040:	f7fd f9fe 	bl	800d440 <GUI__memset>
 8010044:	4621      	mov	r1, r4
 8010046:	4804      	ldr	r0, [pc, #16]	; (8010058 <_OnExit+0x34>)
 8010048:	220c      	movs	r2, #12
 801004a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801004e:	f7fd b9f7 	b.w	800d440 <GUI__memset>
 8010052:	bf00      	nop
 8010054:	20026d54 	.word	0x20026d54
 8010058:	20026920 	.word	0x20026920

0801005c <_RemoveFreeBlock>:
 801005c:	b510      	push	{r4, lr}
 801005e:	6842      	ldr	r2, [r0, #4]
 8010060:	230f      	movs	r3, #15
 8010062:	490d      	ldr	r1, [pc, #52]	; (8010098 <_RemoveFreeBlock+0x3c>)
 8010064:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 8010068:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801006a:	42a2      	cmp	r2, r4
 801006c:	d203      	bcs.n	8010076 <_RemoveFreeBlock+0x1a>
 801006e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8010072:	d2f6      	bcs.n	8010062 <_RemoveFreeBlock+0x6>
 8010074:	bd10      	pop	{r4, pc}
 8010076:	2b0f      	cmp	r3, #15
 8010078:	d80c      	bhi.n	8010094 <_RemoveFreeBlock+0x38>
 801007a:	680c      	ldr	r4, [r1, #0]
 801007c:	1aa2      	subs	r2, r4, r2
 801007e:	600a      	str	r2, [r1, #0]
 8010080:	6882      	ldr	r2, [r0, #8]
 8010082:	68c0      	ldr	r0, [r0, #12]
 8010084:	b102      	cbz	r2, 8010088 <_RemoveFreeBlock+0x2c>
 8010086:	6050      	str	r0, [r2, #4]
 8010088:	b108      	cbz	r0, 801008e <_RemoveFreeBlock+0x32>
 801008a:	6002      	str	r2, [r0, #0]
 801008c:	bd10      	pop	{r4, pc}
 801008e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010092:	645a      	str	r2, [r3, #68]	; 0x44
 8010094:	bd10      	pop	{r4, pc}
 8010096:	bf00      	nop
 8010098:	20026d54 	.word	0x20026d54

0801009c <_AddFreeMemory>:
 801009c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801009e:	4e26      	ldr	r6, [pc, #152]	; (8010138 <_AddFreeMemory+0x9c>)
 80100a0:	68f3      	ldr	r3, [r6, #12]
 80100a2:	1e5a      	subs	r2, r3, #1
 80100a4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80100a6:	4605      	mov	r5, r0
 80100a8:	4413      	add	r3, r2
 80100aa:	1808      	adds	r0, r1, r0
 80100ac:	4298      	cmp	r0, r3
 80100ae:	460c      	mov	r4, r1
 80100b0:	d805      	bhi.n	80100be <_AddFreeMemory+0x22>
 80100b2:	594b      	ldr	r3, [r1, r5]
 80100b4:	b91b      	cbnz	r3, 80100be <_AddFreeMemory+0x22>
 80100b6:	6843      	ldr	r3, [r0, #4]
 80100b8:	441d      	add	r5, r3
 80100ba:	f7ff ffcf 	bl	801005c <_RemoveFreeBlock>
 80100be:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80100c0:	429c      	cmp	r4, r3
 80100c2:	d90a      	bls.n	80100da <_AddFreeMemory+0x3e>
 80100c4:	f854 7c04 	ldr.w	r7, [r4, #-4]
 80100c8:	1be7      	subs	r7, r4, r7
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	b92b      	cbnz	r3, 80100da <_AddFreeMemory+0x3e>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4638      	mov	r0, r7
 80100d2:	441d      	add	r5, r3
 80100d4:	f7ff ffc2 	bl	801005c <_RemoveFreeBlock>
 80100d8:	463c      	mov	r4, r7
 80100da:	230f      	movs	r3, #15
 80100dc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80100e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80100e2:	4295      	cmp	r5, r2
 80100e4:	d203      	bcs.n	80100ee <_AddFreeMemory+0x52>
 80100e6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80100ea:	d2f7      	bcs.n	80100dc <_AddFreeMemory+0x40>
 80100ec:	e022      	b.n	8010134 <_AddFreeMemory+0x98>
 80100ee:	2b0f      	cmp	r3, #15
 80100f0:	d820      	bhi.n	8010134 <_AddFreeMemory+0x98>
 80100f2:	3308      	adds	r3, #8
 80100f4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80100f8:	1961      	adds	r1, r4, r5
 80100fa:	6852      	ldr	r2, [r2, #4]
 80100fc:	60a2      	str	r2, [r4, #8]
 80100fe:	2000      	movs	r0, #0
 8010100:	e884 0021 	stmia.w	r4, {r0, r5}
 8010104:	6124      	str	r4, [r4, #16]
 8010106:	f841 5c04 	str.w	r5, [r1, #-4]
 801010a:	f104 0108 	add.w	r1, r4, #8
 801010e:	b102      	cbz	r2, 8010112 <_AddFreeMemory+0x76>
 8010110:	6051      	str	r1, [r2, #4]
 8010112:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8010116:	60e0      	str	r0, [r4, #12]
 8010118:	6059      	str	r1, [r3, #4]
 801011a:	6833      	ldr	r3, [r6, #0]
 801011c:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 8010120:	4a05      	ldr	r2, [pc, #20]	; (8010138 <_AddFreeMemory+0x9c>)
 8010122:	442b      	add	r3, r5
 8010124:	6033      	str	r3, [r6, #0]
 8010126:	b929      	cbnz	r1, 8010134 <_AddFreeMemory+0x98>
 8010128:	68d1      	ldr	r1, [r2, #12]
 801012a:	1acb      	subs	r3, r1, r3
 801012c:	6891      	ldr	r1, [r2, #8]
 801012e:	4299      	cmp	r1, r3
 8010130:	bf38      	it	cc
 8010132:	6093      	strcc	r3, [r2, #8]
 8010134:	4628      	mov	r0, r5
 8010136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010138:	20026d54 	.word	0x20026d54

0801013c <_RemoveHoles>:
 801013c:	4b25      	ldr	r3, [pc, #148]	; (80101d4 <_RemoveHoles+0x98>)
 801013e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010142:	68da      	ldr	r2, [r3, #12]
 8010144:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8010146:	3a01      	subs	r2, #1
 8010148:	4682      	mov	sl, r0
 801014a:	eb02 0904 	add.w	r9, r2, r4
 801014e:	469b      	mov	fp, r3
 8010150:	e894 0028 	ldmia.w	r4, {r3, r5}
 8010154:	2b00      	cmp	r3, #0
 8010156:	d133      	bne.n	80101c0 <_RemoveHoles+0x84>
 8010158:	eb04 0805 	add.w	r8, r4, r5
 801015c:	45c8      	cmp	r8, r9
 801015e:	d22f      	bcs.n	80101c0 <_RemoveHoles+0x84>
 8010160:	f854 c005 	ldr.w	ip, [r4, r5]
 8010164:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8010168:	f1bc 0f00 	cmp.w	ip, #0
 801016c:	d028      	beq.n	80101c0 <_RemoveHoles+0x84>
 801016e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8010172:	4f18      	ldr	r7, [pc, #96]	; (80101d4 <_RemoveHoles+0x98>)
 8010174:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 8010178:	2b01      	cmp	r3, #1
 801017a:	d121      	bne.n	80101c0 <_RemoveHoles+0x84>
 801017c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017e:	4620      	mov	r0, r4
 8010180:	e88d 1008 	stmia.w	sp, {r3, ip}
 8010184:	f7ff ff6a 	bl	801005c <_RemoveFreeBlock>
 8010188:	f8d8 1000 	ldr.w	r1, [r8]
 801018c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801018e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010192:	4620      	mov	r0, r4
 8010194:	6054      	str	r4, [r2, #4]
 8010196:	4641      	mov	r1, r8
 8010198:	4632      	mov	r2, r6
 801019a:	f002 fd6f 	bl	8012c7c <memmove>
 801019e:	e89d 1008 	ldmia.w	sp, {r3, ip}
 80101a2:	459c      	cmp	ip, r3
 80101a4:	d102      	bne.n	80101ac <_RemoveHoles+0x70>
 80101a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a8:	1b5b      	subs	r3, r3, r5
 80101aa:	637b      	str	r3, [r7, #52]	; 0x34
 80101ac:	4628      	mov	r0, r5
 80101ae:	19a1      	adds	r1, r4, r6
 80101b0:	f7ff ff74 	bl	801009c <_AddFreeMemory>
 80101b4:	f1ba 0f00 	cmp.w	sl, #0
 80101b8:	d001      	beq.n	80101be <_RemoveHoles+0x82>
 80101ba:	4582      	cmp	sl, r0
 80101bc:	d905      	bls.n	80101ca <_RemoveHoles+0x8e>
 80101be:	4635      	mov	r5, r6
 80101c0:	442c      	add	r4, r5
 80101c2:	454c      	cmp	r4, r9
 80101c4:	d3c4      	bcc.n	8010150 <_RemoveHoles+0x14>
 80101c6:	2001      	movs	r0, #1
 80101c8:	e000      	b.n	80101cc <_RemoveHoles+0x90>
 80101ca:	2000      	movs	r0, #0
 80101cc:	b003      	add	sp, #12
 80101ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d2:	bf00      	nop
 80101d4:	20026d54 	.word	0x20026d54

080101d8 <GUI_ALLOC_FreeFixedBlock>:
 80101d8:	b128      	cbz	r0, 80101e6 <GUI_ALLOC_FreeFixedBlock+0xe>
 80101da:	4a03      	ldr	r2, [pc, #12]	; (80101e8 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80101dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80101de:	6003      	str	r3, [r0, #0]
 80101e0:	b103      	cbz	r3, 80101e4 <GUI_ALLOC_FreeFixedBlock+0xc>
 80101e2:	6058      	str	r0, [r3, #4]
 80101e4:	63d0      	str	r0, [r2, #60]	; 0x3c
 80101e6:	4770      	bx	lr
 80101e8:	20026d54 	.word	0x20026d54

080101ec <GUI_ALLOC_h2p>:
 80101ec:	b128      	cbz	r0, 80101fa <GUI_ALLOC_h2p+0xe>
 80101ee:	4b03      	ldr	r3, [pc, #12]	; (80101fc <GUI_ALLOC_h2p+0x10>)
 80101f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80101f6:	6840      	ldr	r0, [r0, #4]
 80101f8:	3008      	adds	r0, #8
 80101fa:	4770      	bx	lr
 80101fc:	20026d54 	.word	0x20026d54

08010200 <GUI_ALLOC_LockH>:
 8010200:	4b05      	ldr	r3, [pc, #20]	; (8010218 <GUI_ALLOC_LockH+0x18>)
 8010202:	69d9      	ldr	r1, [r3, #28]
 8010204:	3101      	adds	r1, #1
 8010206:	61d9      	str	r1, [r3, #28]
 8010208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801020a:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 801020e:	3101      	adds	r1, #1
 8010210:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 8010214:	f7ff bfea 	b.w	80101ec <GUI_ALLOC_h2p>
 8010218:	20026d54 	.word	0x20026d54

0801021c <GUI_ALLOC_UnlockH>:
 801021c:	b530      	push	{r4, r5, lr}
 801021e:	6802      	ldr	r2, [r0, #0]
 8010220:	4b09      	ldr	r3, [pc, #36]	; (8010248 <GUI_ALLOC_UnlockH+0x2c>)
 8010222:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8010226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010228:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 801022c:	2c01      	cmp	r4, #1
 801022e:	d903      	bls.n	8010238 <GUI_ALLOC_UnlockH+0x1c>
 8010230:	69dd      	ldr	r5, [r3, #28]
 8010232:	b10d      	cbz	r5, 8010238 <GUI_ALLOC_UnlockH+0x1c>
 8010234:	3d01      	subs	r5, #1
 8010236:	61dd      	str	r5, [r3, #28]
 8010238:	3c01      	subs	r4, #1
 801023a:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 801023e:	2300      	movs	r3, #0
 8010240:	6003      	str	r3, [r0, #0]
 8010242:	4618      	mov	r0, r3
 8010244:	bd30      	pop	{r4, r5, pc}
 8010246:	bf00      	nop
 8010248:	20026d54 	.word	0x20026d54

0801024c <GUI_ALLOC_AssignMemory>:
 801024c:	4b02      	ldr	r3, [pc, #8]	; (8010258 <GUI_ALLOC_AssignMemory+0xc>)
 801024e:	f021 0103 	bic.w	r1, r1, #3
 8010252:	6018      	str	r0, [r3, #0]
 8010254:	6059      	str	r1, [r3, #4]
 8010256:	4770      	bx	lr
 8010258:	20026920 	.word	0x20026920

0801025c <GUI_ALLOC_Free>:
 801025c:	b510      	push	{r4, lr}
 801025e:	4604      	mov	r4, r0
 8010260:	b180      	cbz	r0, 8010284 <GUI_ALLOC_Free+0x28>
 8010262:	4b09      	ldr	r3, [pc, #36]	; (8010288 <GUI_ALLOC_Free+0x2c>)
 8010264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010266:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 801026a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
 801026e:	2b01      	cmp	r3, #1
 8010270:	d108      	bne.n	8010284 <GUI_ALLOC_Free+0x28>
 8010272:	6851      	ldr	r1, [r2, #4]
 8010274:	6848      	ldr	r0, [r1, #4]
 8010276:	f7ff ff11 	bl	801009c <_AddFreeMemory>
 801027a:	4620      	mov	r0, r4
 801027c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010280:	f7ff bebe 	b.w	8010000 <_PushFreeBlock>
 8010284:	bd10      	pop	{r4, pc}
 8010286:	bf00      	nop
 8010288:	20026d54 	.word	0x20026d54

0801028c <_EnlargeBlocks>:
 801028c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010290:	4c22      	ldr	r4, [pc, #136]	; (801031c <_EnlargeBlocks+0x90>)
 8010292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010294:	b93b      	cbnz	r3, 80102a6 <_EnlargeBlocks+0x1a>
 8010296:	4b22      	ldr	r3, [pc, #136]	; (8010320 <_EnlargeBlocks+0x94>)
 8010298:	689d      	ldr	r5, [r3, #8]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	3508      	adds	r5, #8
 801029e:	fbb3 f5f5 	udiv	r5, r3, r5
 80102a2:	3502      	adds	r5, #2
 80102a4:	e003      	b.n	80102ae <_EnlargeBlocks+0x22>
 80102a6:	6923      	ldr	r3, [r4, #16]
 80102a8:	1d1d      	adds	r5, r3, #4
 80102aa:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80102ae:	00e8      	lsls	r0, r5, #3
 80102b0:	f000 f962 	bl	8010578 <_Alloc>
 80102b4:	4680      	mov	r8, r0
 80102b6:	b360      	cbz	r0, 8010312 <_EnlargeBlocks+0x86>
 80102b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ba:	6922      	ldr	r2, [r4, #16]
 80102bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80102be:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 80102c2:	00d2      	lsls	r2, r2, #3
 80102c4:	685e      	ldr	r6, [r3, #4]
 80102c6:	3608      	adds	r6, #8
 80102c8:	4630      	mov	r0, r6
 80102ca:	f002 fccc 	bl	8012c66 <memcpy>
 80102ce:	6922      	ldr	r2, [r4, #16]
 80102d0:	6366      	str	r6, [r4, #52]	; 0x34
 80102d2:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 80102d6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80102da:	3104      	adds	r1, #4
 80102dc:	4613      	mov	r3, r2
 80102de:	1e68      	subs	r0, r5, #1
 80102e0:	4283      	cmp	r3, r0
 80102e2:	f101 0108 	add.w	r1, r1, #8
 80102e6:	d203      	bcs.n	80102f0 <_EnlargeBlocks+0x64>
 80102e8:	3301      	adds	r3, #1
 80102ea:	f841 3c08 	str.w	r3, [r1, #-8]
 80102ee:	e7f6      	b.n	80102de <_EnlargeBlocks+0x52>
 80102f0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80102f4:	2600      	movs	r6, #0
 80102f6:	605e      	str	r6, [r3, #4]
 80102f8:	6863      	ldr	r3, [r4, #4]
 80102fa:	6262      	str	r2, [r4, #36]	; 0x24
 80102fc:	1a9b      	subs	r3, r3, r2
 80102fe:	442b      	add	r3, r5
 8010300:	6063      	str	r3, [r4, #4]
 8010302:	6125      	str	r5, [r4, #16]
 8010304:	4638      	mov	r0, r7
 8010306:	b13f      	cbz	r7, 8010318 <_EnlargeBlocks+0x8c>
 8010308:	f7ff ffa8 	bl	801025c <GUI_ALLOC_Free>
 801030c:	4630      	mov	r0, r6
 801030e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010312:	2001      	movs	r0, #1
 8010314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801031c:	20026d54 	.word	0x20026d54
 8010320:	20026920 	.word	0x20026920

08010324 <_InitOnce>:
 8010324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010326:	4e58      	ldr	r6, [pc, #352]	; (8010488 <_InitOnce+0x164>)
 8010328:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 801032c:	2900      	cmp	r1, #0
 801032e:	f040 80aa 	bne.w	8010486 <_InitOnce+0x162>
 8010332:	4d56      	ldr	r5, [pc, #344]	; (801048c <_InitOnce+0x168>)
 8010334:	686a      	ldr	r2, [r5, #4]
 8010336:	2301      	movs	r3, #1
 8010338:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 801033c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8010340:	bf28      	it	cs
 8010342:	f44f 5220 	movcs.w	r2, #10240	; 0x2800
 8010346:	682b      	ldr	r3, [r5, #0]
 8010348:	0894      	lsrs	r4, r2, #2
 801034a:	2000      	movs	r0, #0
 801034c:	42a0      	cmp	r0, r4
 801034e:	d00c      	beq.n	801036a <_InitOnce+0x46>
 8010350:	1847      	adds	r7, r0, r1
 8010352:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010356:	fbb7 fefe 	udiv	lr, r7, lr
 801035a:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801035e:	ebce 0707 	rsb	r7, lr, r7
 8010362:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8010366:	3001      	adds	r0, #1
 8010368:	e7f0      	b.n	801034c <_InitOnce+0x28>
 801036a:	2000      	movs	r0, #0
 801036c:	42a0      	cmp	r0, r4
 801036e:	d016      	beq.n	801039e <_InitOnce+0x7a>
 8010370:	1847      	adds	r7, r0, r1
 8010372:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8010376:	fbb7 fefe 	udiv	lr, r7, lr
 801037a:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 801037e:	ebce 0e07 	rsb	lr, lr, r7
 8010382:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8010386:	4577      	cmp	r7, lr
 8010388:	d007      	beq.n	801039a <_InitOnce+0x76>
 801038a:	68aa      	ldr	r2, [r5, #8]
 801038c:	4b3f      	ldr	r3, [pc, #252]	; (801048c <_InitOnce+0x168>)
 801038e:	2a00      	cmp	r2, #0
 8010390:	d155      	bne.n	801043e <_InitOnce+0x11a>
 8010392:	685a      	ldr	r2, [r3, #4]
 8010394:	0892      	lsrs	r2, r2, #2
 8010396:	609a      	str	r2, [r3, #8]
 8010398:	e051      	b.n	801043e <_InitOnce+0x11a>
 801039a:	3001      	adds	r0, #1
 801039c:	e7e6      	b.n	801036c <_InitOnce+0x48>
 801039e:	3101      	adds	r1, #1
 80103a0:	2902      	cmp	r1, #2
 80103a2:	d1d2      	bne.n	801034a <_InitOnce+0x26>
 80103a4:	0854      	lsrs	r4, r2, #1
 80103a6:	2100      	movs	r1, #0
 80103a8:	2000      	movs	r0, #0
 80103aa:	42a0      	cmp	r0, r4
 80103ac:	d00c      	beq.n	80103c8 <_InitOnce+0xa4>
 80103ae:	1847      	adds	r7, r0, r1
 80103b0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80103b4:	fbb7 fefe 	udiv	lr, r7, lr
 80103b8:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80103bc:	ebce 0707 	rsb	r7, lr, r7
 80103c0:	f823 7010 	strh.w	r7, [r3, r0, lsl #1]
 80103c4:	3001      	adds	r0, #1
 80103c6:	e7f0      	b.n	80103aa <_InitOnce+0x86>
 80103c8:	2000      	movs	r0, #0
 80103ca:	42a0      	cmp	r0, r4
 80103cc:	d00f      	beq.n	80103ee <_InitOnce+0xca>
 80103ce:	1847      	adds	r7, r0, r1
 80103d0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80103d4:	fbb7 fefe 	udiv	lr, r7, lr
 80103d8:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80103dc:	ebce 0707 	rsb	r7, lr, r7
 80103e0:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
 80103e4:	b2bf      	uxth	r7, r7
 80103e6:	45bc      	cmp	ip, r7
 80103e8:	d1cf      	bne.n	801038a <_InitOnce+0x66>
 80103ea:	3001      	adds	r0, #1
 80103ec:	e7ed      	b.n	80103ca <_InitOnce+0xa6>
 80103ee:	3101      	adds	r1, #1
 80103f0:	2902      	cmp	r1, #2
 80103f2:	d1d9      	bne.n	80103a8 <_InitOnce+0x84>
 80103f4:	2100      	movs	r1, #0
 80103f6:	2000      	movs	r0, #0
 80103f8:	4290      	cmp	r0, r2
 80103fa:	d007      	beq.n	801040c <_InitOnce+0xe8>
 80103fc:	1844      	adds	r4, r0, r1
 80103fe:	27ff      	movs	r7, #255	; 0xff
 8010400:	fbb4 f7f7 	udiv	r7, r4, r7
 8010404:	443c      	add	r4, r7
 8010406:	541c      	strb	r4, [r3, r0]
 8010408:	3001      	adds	r0, #1
 801040a:	e7f5      	b.n	80103f8 <_InitOnce+0xd4>
 801040c:	2000      	movs	r0, #0
 801040e:	4290      	cmp	r0, r2
 8010410:	d00b      	beq.n	801042a <_InitOnce+0x106>
 8010412:	1844      	adds	r4, r0, r1
 8010414:	27ff      	movs	r7, #255	; 0xff
 8010416:	fbb4 f7f7 	udiv	r7, r4, r7
 801041a:	443c      	add	r4, r7
 801041c:	5c1f      	ldrb	r7, [r3, r0]
 801041e:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8010422:	42a7      	cmp	r7, r4
 8010424:	d1b1      	bne.n	801038a <_InitOnce+0x66>
 8010426:	3001      	adds	r0, #1
 8010428:	e7f1      	b.n	801040e <_InitOnce+0xea>
 801042a:	3101      	adds	r1, #1
 801042c:	2902      	cmp	r1, #2
 801042e:	d1e2      	bne.n	80103f6 <_InitOnce+0xd2>
 8010430:	2100      	movs	r1, #0
 8010432:	4291      	cmp	r1, r2
 8010434:	d0a9      	beq.n	801038a <_InitOnce+0x66>
 8010436:	2000      	movs	r0, #0
 8010438:	5458      	strb	r0, [r3, r1]
 801043a:	3101      	adds	r1, #1
 801043c:	e7f9      	b.n	8010432 <_InitOnce+0x10e>
 801043e:	4814      	ldr	r0, [pc, #80]	; (8010490 <_InitOnce+0x16c>)
 8010440:	4b14      	ldr	r3, [pc, #80]	; (8010494 <_InitOnce+0x170>)
 8010442:	6003      	str	r3, [r0, #0]
 8010444:	f7ff fac2 	bl	800f9cc <GUI__RegisterExit>
 8010448:	235a      	movs	r3, #90	; 0x5a
 801044a:	6233      	str	r3, [r6, #32]
 801044c:	2300      	movs	r3, #0
 801044e:	2110      	movs	r1, #16
 8010450:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8010454:	4099      	lsls	r1, r3
 8010456:	3301      	adds	r3, #1
 8010458:	2b10      	cmp	r3, #16
 801045a:	4c0b      	ldr	r4, [pc, #44]	; (8010488 <_InitOnce+0x164>)
 801045c:	6411      	str	r1, [r2, #64]	; 0x40
 801045e:	d1f6      	bne.n	801044e <_InitOnce+0x12a>
 8010460:	6868      	ldr	r0, [r5, #4]
 8010462:	6829      	ldr	r1, [r5, #0]
 8010464:	63a1      	str	r1, [r4, #56]	; 0x38
 8010466:	2302      	movs	r3, #2
 8010468:	6123      	str	r3, [r4, #16]
 801046a:	f1a0 0314 	sub.w	r3, r0, #20
 801046e:	440b      	add	r3, r1
 8010470:	2501      	movs	r5, #1
 8010472:	6363      	str	r3, [r4, #52]	; 0x34
 8010474:	60e0      	str	r0, [r4, #12]
 8010476:	605d      	str	r5, [r3, #4]
 8010478:	6265      	str	r5, [r4, #36]	; 0x24
 801047a:	6065      	str	r5, [r4, #4]
 801047c:	f7ff fe0e 	bl	801009c <_AddFreeMemory>
 8010480:	f7ff ff04 	bl	801028c <_EnlargeBlocks>
 8010484:	6325      	str	r5, [r4, #48]	; 0x30
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010488:	20026d54 	.word	0x20026d54
 801048c:	20026920 	.word	0x20026920
 8010490:	2002692c 	.word	0x2002692c
 8010494:	08010025 	.word	0x08010025

08010498 <GUI_ALLOC_GetFixedBlock>:
 8010498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801049c:	4605      	mov	r5, r0
 801049e:	4e26      	ldr	r6, [pc, #152]	; (8010538 <GUI_ALLOC_GetFixedBlock+0xa0>)
 80104a0:	3503      	adds	r5, #3
 80104a2:	f7ff ff3f 	bl	8010324 <_InitOnce>
 80104a6:	f025 0503 	bic.w	r5, r5, #3
 80104aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80104ac:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80104ae:	3504      	adds	r5, #4
 80104b0:	429d      	cmp	r5, r3
 80104b2:	bf38      	it	cc
 80104b4:	461d      	movcc	r5, r3
 80104b6:	4614      	mov	r4, r2
 80104b8:	b12c      	cbz	r4, 80104c6 <GUI_ALLOC_GetFixedBlock+0x2e>
 80104ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80104be:	42ab      	cmp	r3, r5
 80104c0:	d02c      	beq.n	801051c <GUI_ALLOC_GetFixedBlock+0x84>
 80104c2:	6824      	ldr	r4, [r4, #0]
 80104c4:	e7f8      	b.n	80104b8 <GUI_ALLOC_GetFixedBlock+0x20>
 80104c6:	68f3      	ldr	r3, [r6, #12]
 80104c8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80104ca:	eb02 0803 	add.w	r8, r2, r3
 80104ce:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80104d2:	ebc7 0708 	rsb	r7, r7, r8
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	b133      	cbz	r3, 80104e8 <GUI_ALLOC_GetFixedBlock+0x50>
 80104da:	4620      	mov	r0, r4
 80104dc:	f7ff fe2e 	bl	801013c <_RemoveHoles>
 80104e0:	f858 7c04 	ldr.w	r7, [r8, #-4]
 80104e4:	ebc7 0708 	rsb	r7, r7, r8
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	bb13      	cbnz	r3, 8010532 <GUI_ALLOC_GetFixedBlock+0x9a>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	42ab      	cmp	r3, r5
 80104f0:	db1f      	blt.n	8010532 <GUI_ALLOC_GetFixedBlock+0x9a>
 80104f2:	4638      	mov	r0, r7
 80104f4:	1d1c      	adds	r4, r3, #4
 80104f6:	f7ff fdb1 	bl	801005c <_RemoveFreeBlock>
 80104fa:	68f3      	ldr	r3, [r6, #12]
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	1b5b      	subs	r3, r3, r5
 8010500:	60f3      	str	r3, [r6, #12]
 8010502:	6973      	ldr	r3, [r6, #20]
 8010504:	1b64      	subs	r4, r4, r5
 8010506:	442b      	add	r3, r5
 8010508:	1b40      	subs	r0, r0, r5
 801050a:	443c      	add	r4, r7
 801050c:	6173      	str	r3, [r6, #20]
 801050e:	d002      	beq.n	8010516 <GUI_ALLOC_GetFixedBlock+0x7e>
 8010510:	4639      	mov	r1, r7
 8010512:	f7ff fdc3 	bl	801009c <_AddFreeMemory>
 8010516:	f844 5c04 	str.w	r5, [r4, #-4]
 801051a:	e00a      	b.n	8010532 <GUI_ALLOC_GetFixedBlock+0x9a>
 801051c:	6823      	ldr	r3, [r4, #0]
 801051e:	b10b      	cbz	r3, 8010524 <GUI_ALLOC_GetFixedBlock+0x8c>
 8010520:	6861      	ldr	r1, [r4, #4]
 8010522:	6059      	str	r1, [r3, #4]
 8010524:	6861      	ldr	r1, [r4, #4]
 8010526:	b101      	cbz	r1, 801052a <GUI_ALLOC_GetFixedBlock+0x92>
 8010528:	600b      	str	r3, [r1, #0]
 801052a:	42a2      	cmp	r2, r4
 801052c:	d101      	bne.n	8010532 <GUI_ALLOC_GetFixedBlock+0x9a>
 801052e:	6823      	ldr	r3, [r4, #0]
 8010530:	63f3      	str	r3, [r6, #60]	; 0x3c
 8010532:	4620      	mov	r0, r4
 8010534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010538:	20026d54 	.word	0x20026d54

0801053c <GUI_ALLOC_GetMaxSize>:
 801053c:	b508      	push	{r3, lr}
 801053e:	f7ff fef1 	bl	8010324 <_InitOnce>
 8010542:	2200      	movs	r2, #0
 8010544:	4b0b      	ldr	r3, [pc, #44]	; (8010574 <GUI_ALLOC_GetMaxSize+0x38>)
 8010546:	4413      	add	r3, r2
 8010548:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801054c:	b113      	cbz	r3, 8010554 <GUI_ALLOC_GetMaxSize+0x18>
 801054e:	689b      	ldr	r3, [r3, #8]
 8010550:	2000      	movs	r0, #0
 8010552:	e00b      	b.n	801056c <GUI_ALLOC_GetMaxSize+0x30>
 8010554:	3a08      	subs	r2, #8
 8010556:	f112 0f80 	cmn.w	r2, #128	; 0x80
 801055a:	d1f3      	bne.n	8010544 <GUI_ALLOC_GetMaxSize+0x8>
 801055c:	e7f8      	b.n	8010550 <GUI_ALLOC_GetMaxSize+0x14>
 801055e:	685a      	ldr	r2, [r3, #4]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	4290      	cmp	r0, r2
 8010564:	bf38      	it	cc
 8010566:	4610      	movcc	r0, r2
 8010568:	b113      	cbz	r3, 8010570 <GUI_ALLOC_GetMaxSize+0x34>
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1f6      	bne.n	801055e <GUI_ALLOC_GetMaxSize+0x22>
 8010570:	380c      	subs	r0, #12
 8010572:	bd08      	pop	{r3, pc}
 8010574:	20026d54 	.word	0x20026d54

08010578 <_Alloc>:
 8010578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801057c:	4d38      	ldr	r5, [pc, #224]	; (8010660 <_Alloc+0xe8>)
 801057e:	4604      	mov	r4, r0
 8010580:	f7ff fed0 	bl	8010324 <_InitOnce>
 8010584:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8010586:	682b      	ldr	r3, [r5, #0]
 8010588:	42bc      	cmp	r4, r7
 801058a:	bf24      	itt	cs
 801058c:	1ce7      	addcs	r7, r4, #3
 801058e:	f027 0703 	biccs.w	r7, r7, #3
 8010592:	370c      	adds	r7, #12
 8010594:	429f      	cmp	r7, r3
 8010596:	4c32      	ldr	r4, [pc, #200]	; (8010660 <_Alloc+0xe8>)
 8010598:	d83e      	bhi.n	8010618 <_Alloc+0xa0>
 801059a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801059c:	6862      	ldr	r2, [r4, #4]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d90f      	bls.n	80105c2 <_Alloc+0x4a>
 80105a2:	686b      	ldr	r3, [r5, #4]
 80105a4:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80105a6:	3b01      	subs	r3, #1
 80105a8:	606b      	str	r3, [r5, #4]
 80105aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80105ac:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80105b0:	eb03 0209 	add.w	r2, r3, r9
 80105b4:	6852      	ldr	r2, [r2, #4]
 80105b6:	626a      	str	r2, [r5, #36]	; 0x24
 80105b8:	2201      	movs	r2, #1
 80105ba:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 80105be:	b956      	cbnz	r6, 80105d6 <_Alloc+0x5e>
 80105c0:	e02a      	b.n	8010618 <_Alloc+0xa0>
 80105c2:	3b01      	subs	r3, #1
 80105c4:	6323      	str	r3, [r4, #48]	; 0x30
 80105c6:	f7ff fe61 	bl	801028c <_EnlargeBlocks>
 80105ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80105cc:	3301      	adds	r3, #1
 80105ce:	6323      	str	r3, [r4, #48]	; 0x30
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d0e6      	beq.n	80105a2 <_Alloc+0x2a>
 80105d4:	e020      	b.n	8010618 <_Alloc+0xa0>
 80105d6:	230f      	movs	r3, #15
 80105d8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80105dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80105de:	4297      	cmp	r7, r2
 80105e0:	d20c      	bcs.n	80105fc <_Alloc+0x84>
 80105e2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80105e6:	d2f7      	bcs.n	80105d8 <_Alloc+0x60>
 80105e8:	e008      	b.n	80105fc <_Alloc+0x84>
 80105ea:	6894      	ldr	r4, [r2, #8]
 80105ec:	b12c      	cbz	r4, 80105fa <_Alloc+0x82>
 80105ee:	6862      	ldr	r2, [r4, #4]
 80105f0:	4297      	cmp	r7, r2
 80105f2:	d914      	bls.n	801061e <_Alloc+0xa6>
 80105f4:	68a2      	ldr	r2, [r4, #8]
 80105f6:	2a00      	cmp	r2, #0
 80105f8:	d1f7      	bne.n	80105ea <_Alloc+0x72>
 80105fa:	3301      	adds	r3, #1
 80105fc:	2b0f      	cmp	r3, #15
 80105fe:	d803      	bhi.n	8010608 <_Alloc+0x90>
 8010600:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8010604:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010606:	e7f6      	b.n	80105f6 <_Alloc+0x7e>
 8010608:	4638      	mov	r0, r7
 801060a:	f7ff fd97 	bl	801013c <_RemoveHoles>
 801060e:	2800      	cmp	r0, #0
 8010610:	d0e1      	beq.n	80105d6 <_Alloc+0x5e>
 8010612:	4630      	mov	r0, r6
 8010614:	f7ff fcf4 	bl	8010000 <_PushFreeBlock>
 8010618:	2000      	movs	r0, #0
 801061a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801061e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8010622:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010624:	ebc7 0208 	rsb	r2, r7, r8
 8010628:	330c      	adds	r3, #12
 801062a:	4620      	mov	r0, r4
 801062c:	429a      	cmp	r2, r3
 801062e:	bf38      	it	cc
 8010630:	4647      	movcc	r7, r8
 8010632:	f7ff fd13 	bl	801005c <_RemoveFreeBlock>
 8010636:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010638:	444b      	add	r3, r9
 801063a:	19e1      	adds	r1, r4, r7
 801063c:	605c      	str	r4, [r3, #4]
 801063e:	45b8      	cmp	r8, r7
 8010640:	f04f 0300 	mov.w	r3, #0
 8010644:	e884 00c0 	stmia.w	r4, {r6, r7}
 8010648:	60a3      	str	r3, [r4, #8]
 801064a:	6124      	str	r4, [r4, #16]
 801064c:	f841 7c04 	str.w	r7, [r1, #-4]
 8010650:	dd03      	ble.n	801065a <_Alloc+0xe2>
 8010652:	ebc7 0008 	rsb	r0, r7, r8
 8010656:	f7ff fd21 	bl	801009c <_AddFreeMemory>
 801065a:	4630      	mov	r0, r6
 801065c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010660:	20026d54 	.word	0x20026d54

08010664 <GUI_ALLOC_AllocNoInit>:
 8010664:	b108      	cbz	r0, 801066a <GUI_ALLOC_AllocNoInit+0x6>
 8010666:	f7ff bf87 	b.w	8010578 <_Alloc>
 801066a:	4770      	bx	lr

0801066c <GUI_ALLOC_AllocZero>:
 801066c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801066e:	4605      	mov	r5, r0
 8010670:	f7ff fff8 	bl	8010664 <GUI_ALLOC_AllocNoInit>
 8010674:	4606      	mov	r6, r0
 8010676:	b158      	cbz	r0, 8010690 <GUI_ALLOC_AllocZero+0x24>
 8010678:	f7ff fdc2 	bl	8010200 <GUI_ALLOC_LockH>
 801067c:	ac02      	add	r4, sp, #8
 801067e:	2100      	movs	r1, #0
 8010680:	f844 0d04 	str.w	r0, [r4, #-4]!
 8010684:	462a      	mov	r2, r5
 8010686:	f7fc fedb 	bl	800d440 <GUI__memset>
 801068a:	4620      	mov	r0, r4
 801068c:	f7ff fdc6 	bl	801021c <GUI_ALLOC_UnlockH>
 8010690:	4630      	mov	r0, r6
 8010692:	b002      	add	sp, #8
 8010694:	bd70      	pop	{r4, r5, r6, pc}

08010696 <LCD_Index2Color_M8888I>:
 8010696:	43c3      	mvns	r3, r0
 8010698:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801069c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80106a0:	4313      	orrs	r3, r2
 80106a2:	b2c2      	uxtb	r2, r0
 80106a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80106ac:	4318      	orrs	r0, r3
 80106ae:	4770      	bx	lr

080106b0 <_Color2Index_M888>:
 80106b0:	b2c2      	uxtb	r2, r0
 80106b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80106b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106ba:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80106be:	4318      	orrs	r0, r3
 80106c0:	4770      	bx	lr

080106c2 <_GetIndexMask_M888>:
 80106c2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80106c6:	4770      	bx	lr

080106c8 <_Color2IndexBulk>:
 80106c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ca:	4f0c      	ldr	r7, [pc, #48]	; (80106fc <_Color2IndexBulk+0x34>)
 80106cc:	683f      	ldr	r7, [r7, #0]
 80106ce:	4606      	mov	r6, r0
 80106d0:	460d      	mov	r5, r1
 80106d2:	4614      	mov	r4, r2
 80106d4:	469c      	mov	ip, r3
 80106d6:	b10f      	cbz	r7, 80106dc <_Color2IndexBulk+0x14>
 80106d8:	47b8      	blx	r7
 80106da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106dc:	f856 2b04 	ldr.w	r2, [r6], #4
 80106e0:	b2d1      	uxtb	r1, r2
 80106e2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80106e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80106ea:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80106ee:	431a      	orrs	r2, r3
 80106f0:	3c01      	subs	r4, #1
 80106f2:	602a      	str	r2, [r5, #0]
 80106f4:	4465      	add	r5, ip
 80106f6:	d1f1      	bne.n	80106dc <_Color2IndexBulk+0x14>
 80106f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106fa:	bf00      	nop
 80106fc:	20026938 	.word	0x20026938

08010700 <_Index2ColorBulk>:
 8010700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010702:	4f0c      	ldr	r7, [pc, #48]	; (8010734 <_Index2ColorBulk+0x34>)
 8010704:	683f      	ldr	r7, [r7, #0]
 8010706:	4605      	mov	r5, r0
 8010708:	460e      	mov	r6, r1
 801070a:	4614      	mov	r4, r2
 801070c:	469c      	mov	ip, r3
 801070e:	b10f      	cbz	r7, 8010714 <_Index2ColorBulk+0x14>
 8010710:	47b8      	blx	r7
 8010712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010714:	682a      	ldr	r2, [r5, #0]
 8010716:	b2d1      	uxtb	r1, r2
 8010718:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801071c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010720:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8010724:	431a      	orrs	r2, r3
 8010726:	3c01      	subs	r4, #1
 8010728:	f846 2b04 	str.w	r2, [r6], #4
 801072c:	4465      	add	r5, ip
 801072e:	d1f1      	bne.n	8010714 <_Index2ColorBulk+0x14>
 8010730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010732:	bf00      	nop
 8010734:	20026934 	.word	0x20026934

08010738 <GUICC_M888_SetCustColorConv>:
 8010738:	4b02      	ldr	r3, [pc, #8]	; (8010744 <GUICC_M888_SetCustColorConv+0xc>)
 801073a:	6018      	str	r0, [r3, #0]
 801073c:	4b02      	ldr	r3, [pc, #8]	; (8010748 <GUICC_M888_SetCustColorConv+0x10>)
 801073e:	6019      	str	r1, [r3, #0]
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	20026938 	.word	0x20026938
 8010748:	20026934 	.word	0x20026934

0801074c <LCD_Index2Color_M565>:
 801074c:	f3c0 21c4 	ubfx	r1, r0, #11, #5
 8010750:	4b06      	ldr	r3, [pc, #24]	; (801076c <LCD_Index2Color_M565+0x20>)
 8010752:	f000 021f 	and.w	r2, r0, #31
 8010756:	f3c0 1045 	ubfx	r0, r0, #5, #6
 801075a:	5c9a      	ldrb	r2, [r3, r2]
 801075c:	5c5b      	ldrb	r3, [r3, r1]
 801075e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8010762:	4a03      	ldr	r2, [pc, #12]	; (8010770 <LCD_Index2Color_M565+0x24>)
 8010764:	5c10      	ldrb	r0, [r2, r0]
 8010766:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 801076a:	4770      	bx	lr
 801076c:	08014494 	.word	0x08014494
 8010770:	08014454 	.word	0x08014454

08010774 <_Color2Index_M565>:
 8010774:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010778:	4b06      	ldr	r3, [pc, #24]	; (8010794 <_Color2Index_M565+0x20>)
 801077a:	b2c2      	uxtb	r2, r0
 801077c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010780:	5c9a      	ldrb	r2, [r3, r2]
 8010782:	5c5b      	ldrb	r3, [r3, r1]
 8010784:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8010788:	4a03      	ldr	r2, [pc, #12]	; (8010798 <_Color2Index_M565+0x24>)
 801078a:	5c10      	ldrb	r0, [r2, r0]
 801078c:	eb03 1040 	add.w	r0, r3, r0, lsl #5
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	080145b4 	.word	0x080145b4
 8010798:	080144b4 	.word	0x080144b4

0801079c <_GetIndexMask_M565>:
 801079c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80107a0:	4770      	bx	lr
	...

080107a4 <_Color2IndexBulk>:
 80107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107a6:	4f0f      	ldr	r7, [pc, #60]	; (80107e4 <_Color2IndexBulk+0x40>)
 80107a8:	683f      	ldr	r7, [r7, #0]
 80107aa:	4606      	mov	r6, r0
 80107ac:	460d      	mov	r5, r1
 80107ae:	4614      	mov	r4, r2
 80107b0:	469c      	mov	ip, r3
 80107b2:	b10f      	cbz	r7, 80107b8 <_Color2IndexBulk+0x14>
 80107b4:	47b8      	blx	r7
 80107b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107b8:	f856 2b04 	ldr.w	r2, [r6], #4
 80107bc:	490a      	ldr	r1, [pc, #40]	; (80107e8 <_Color2IndexBulk+0x44>)
 80107be:	b2d3      	uxtb	r3, r2
 80107c0:	3c01      	subs	r4, #1
 80107c2:	5cc8      	ldrb	r0, [r1, r3]
 80107c4:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80107c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80107cc:	5ccb      	ldrb	r3, [r1, r3]
 80107ce:	4907      	ldr	r1, [pc, #28]	; (80107ec <_Color2IndexBulk+0x48>)
 80107d0:	5c8a      	ldrb	r2, [r1, r2]
 80107d2:	eb03 23c0 	add.w	r3, r3, r0, lsl #11
 80107d6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80107da:	802b      	strh	r3, [r5, #0]
 80107dc:	4465      	add	r5, ip
 80107de:	d1eb      	bne.n	80107b8 <_Color2IndexBulk+0x14>
 80107e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20026940 	.word	0x20026940
 80107e8:	080145b4 	.word	0x080145b4
 80107ec:	080144b4 	.word	0x080144b4

080107f0 <_Index2ColorBulk>:
 80107f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f2:	4e13      	ldr	r6, [pc, #76]	; (8010840 <_Index2ColorBulk+0x50>)
 80107f4:	6836      	ldr	r6, [r6, #0]
 80107f6:	4684      	mov	ip, r0
 80107f8:	4614      	mov	r4, r2
 80107fa:	461d      	mov	r5, r3
 80107fc:	b10e      	cbz	r6, 8010802 <_Index2ColorBulk+0x12>
 80107fe:	47b0      	blx	r6
 8010800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010802:	1e50      	subs	r0, r2, #1
 8010804:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010808:	3a01      	subs	r2, #1
 801080a:	fb03 c000 	mla	r0, r3, r0, ip
 801080e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010812:	8802      	ldrh	r2, [r0, #0]
 8010814:	4b0b      	ldr	r3, [pc, #44]	; (8010844 <_Index2ColorBulk+0x54>)
 8010816:	f002 061f 	and.w	r6, r2, #31
 801081a:	0ad7      	lsrs	r7, r2, #11
 801081c:	5d9e      	ldrb	r6, [r3, r6]
 801081e:	5ddb      	ldrb	r3, [r3, r7]
 8010820:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8010824:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8010828:	4e07      	ldr	r6, [pc, #28]	; (8010848 <_Index2ColorBulk+0x58>)
 801082a:	5cb2      	ldrb	r2, [r6, r2]
 801082c:	3c01      	subs	r4, #1
 801082e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010832:	f841 3904 	str.w	r3, [r1], #-4
 8010836:	ebc5 0000 	rsb	r0, r5, r0
 801083a:	d1ea      	bne.n	8010812 <_Index2ColorBulk+0x22>
 801083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801083e:	bf00      	nop
 8010840:	2002693c 	.word	0x2002693c
 8010844:	08014494 	.word	0x08014494
 8010848:	08014454 	.word	0x08014454

0801084c <GUICC_M565_SetCustColorConv>:
 801084c:	4b02      	ldr	r3, [pc, #8]	; (8010858 <GUICC_M565_SetCustColorConv+0xc>)
 801084e:	6018      	str	r0, [r3, #0]
 8010850:	4b02      	ldr	r3, [pc, #8]	; (801085c <GUICC_M565_SetCustColorConv+0x10>)
 8010852:	6019      	str	r1, [r3, #0]
 8010854:	4770      	bx	lr
 8010856:	bf00      	nop
 8010858:	20026940 	.word	0x20026940
 801085c:	2002693c 	.word	0x2002693c

08010860 <LCD_Index2Color_888>:
 8010860:	4770      	bx	lr

08010862 <LCD_Index2Color_8888>:
 8010862:	4770      	bx	lr

08010864 <_GetIndexMask_0>:
 8010864:	b508      	push	{r3, lr}
 8010866:	f7fc fa15 	bl	800cc94 <LCD_GetNumColors>
 801086a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801086e:	d010      	beq.n	8010892 <_GetIndexMask_0+0x2e>
 8010870:	287f      	cmp	r0, #127	; 0x7f
 8010872:	d810      	bhi.n	8010896 <_GetIndexMask_0+0x32>
 8010874:	283f      	cmp	r0, #63	; 0x3f
 8010876:	d810      	bhi.n	801089a <_GetIndexMask_0+0x36>
 8010878:	281f      	cmp	r0, #31
 801087a:	d810      	bhi.n	801089e <_GetIndexMask_0+0x3a>
 801087c:	280f      	cmp	r0, #15
 801087e:	d810      	bhi.n	80108a2 <_GetIndexMask_0+0x3e>
 8010880:	2807      	cmp	r0, #7
 8010882:	d810      	bhi.n	80108a6 <_GetIndexMask_0+0x42>
 8010884:	2803      	cmp	r0, #3
 8010886:	d810      	bhi.n	80108aa <_GetIndexMask_0+0x46>
 8010888:	2801      	cmp	r0, #1
 801088a:	bf94      	ite	ls
 801088c:	2000      	movls	r0, #0
 801088e:	2001      	movhi	r0, #1
 8010890:	e00c      	b.n	80108ac <_GetIndexMask_0+0x48>
 8010892:	2008      	movs	r0, #8
 8010894:	e00a      	b.n	80108ac <_GetIndexMask_0+0x48>
 8010896:	2007      	movs	r0, #7
 8010898:	e008      	b.n	80108ac <_GetIndexMask_0+0x48>
 801089a:	2006      	movs	r0, #6
 801089c:	e006      	b.n	80108ac <_GetIndexMask_0+0x48>
 801089e:	2005      	movs	r0, #5
 80108a0:	e004      	b.n	80108ac <_GetIndexMask_0+0x48>
 80108a2:	2004      	movs	r0, #4
 80108a4:	e002      	b.n	80108ac <_GetIndexMask_0+0x48>
 80108a6:	2003      	movs	r0, #3
 80108a8:	e000      	b.n	80108ac <_GetIndexMask_0+0x48>
 80108aa:	2002      	movs	r0, #2
 80108ac:	2301      	movs	r3, #1
 80108ae:	fa03 f000 	lsl.w	r0, r3, r0
 80108b2:	3801      	subs	r0, #1
 80108b4:	bd08      	pop	{r3, pc}

080108b6 <_Index2Color_0>:
 80108b6:	b538      	push	{r3, r4, r5, lr}
 80108b8:	4604      	mov	r4, r0
 80108ba:	f7fc f9eb 	bl	800cc94 <LCD_GetNumColors>
 80108be:	4605      	mov	r5, r0
 80108c0:	f7fc fa12 	bl	800cce8 <LCD_GetPalette>
 80108c4:	42ac      	cmp	r4, r5
 80108c6:	d203      	bcs.n	80108d0 <_Index2Color_0+0x1a>
 80108c8:	b118      	cbz	r0, 80108d2 <_Index2Color_0+0x1c>
 80108ca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	2000      	movs	r0, #0
 80108d2:	bd38      	pop	{r3, r4, r5, pc}

080108d4 <_Color2Index_0>:
 80108d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108d8:	4681      	mov	r9, r0
 80108da:	f7fc f9db 	bl	800cc94 <LCD_GetNumColors>
 80108de:	4680      	mov	r8, r0
 80108e0:	f7fc fa02 	bl	800cce8 <LCD_GetPalette>
 80108e4:	4606      	mov	r6, r0
 80108e6:	b1d8      	cbz	r0, 8010920 <_Color2Index_0+0x4c>
 80108e8:	2300      	movs	r3, #0
 80108ea:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 80108ee:	4591      	cmp	r9, r2
 80108f0:	d01a      	beq.n	8010928 <_Color2Index_0+0x54>
 80108f2:	3301      	adds	r3, #1
 80108f4:	4543      	cmp	r3, r8
 80108f6:	dbf8      	blt.n	80108ea <_Color2Index_0+0x16>
 80108f8:	2500      	movs	r5, #0
 80108fa:	f06f 477f 	mvn.w	r7, #4278190080	; 0xff000000
 80108fe:	462c      	mov	r4, r5
 8010900:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8010904:	4648      	mov	r0, r9
 8010906:	f001 fd09 	bl	801231c <GUI_CalcColorDist>
 801090a:	42b8      	cmp	r0, r7
 801090c:	bf38      	it	cc
 801090e:	4625      	movcc	r5, r4
 8010910:	f104 0401 	add.w	r4, r4, #1
 8010914:	bf28      	it	cs
 8010916:	4638      	movcs	r0, r7
 8010918:	4544      	cmp	r4, r8
 801091a:	da02      	bge.n	8010922 <_Color2Index_0+0x4e>
 801091c:	4607      	mov	r7, r0
 801091e:	e7ef      	b.n	8010900 <_Color2Index_0+0x2c>
 8010920:	4605      	mov	r5, r0
 8010922:	4628      	mov	r0, r5
 8010924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010928:	4618      	mov	r0, r3
 801092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801092e <_Color2Index_M8888I>:
 801092e:	43c3      	mvns	r3, r0
 8010930:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8010934:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010938:	4313      	orrs	r3, r2
 801093a:	b2c2      	uxtb	r2, r0
 801093c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010940:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8010944:	4318      	orrs	r0, r3
 8010946:	4770      	bx	lr

08010948 <_GetIndexMask_M8888I>:
 8010948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801094c:	4770      	bx	lr
	...

08010950 <_Color2IndexBulk_M8888I>:
 8010950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010952:	4c0e      	ldr	r4, [pc, #56]	; (801098c <_Color2IndexBulk_M8888I+0x3c>)
 8010954:	6824      	ldr	r4, [r4, #0]
 8010956:	4607      	mov	r7, r0
 8010958:	460e      	mov	r6, r1
 801095a:	4615      	mov	r5, r2
 801095c:	469c      	mov	ip, r3
 801095e:	b10c      	cbz	r4, 8010964 <_Color2IndexBulk_M8888I+0x14>
 8010960:	47a0      	blx	r4
 8010962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010964:	f857 4b04 	ldr.w	r4, [r7], #4
 8010968:	43e3      	mvns	r3, r4
 801096a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 801096e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010972:	4313      	orrs	r3, r2
 8010974:	b2e2      	uxtb	r2, r4
 8010976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801097a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801097e:	431c      	orrs	r4, r3
 8010980:	3d01      	subs	r5, #1
 8010982:	6034      	str	r4, [r6, #0]
 8010984:	4466      	add	r6, ip
 8010986:	d1ed      	bne.n	8010964 <_Color2IndexBulk_M8888I+0x14>
 8010988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801098a:	bf00      	nop
 801098c:	20026948 	.word	0x20026948

08010990 <_Index2ColorBulk_M8888I>:
 8010990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010992:	4c0e      	ldr	r4, [pc, #56]	; (80109cc <_Index2ColorBulk_M8888I+0x3c>)
 8010994:	6824      	ldr	r4, [r4, #0]
 8010996:	4606      	mov	r6, r0
 8010998:	460f      	mov	r7, r1
 801099a:	4615      	mov	r5, r2
 801099c:	469c      	mov	ip, r3
 801099e:	b10c      	cbz	r4, 80109a4 <_Index2ColorBulk_M8888I+0x14>
 80109a0:	47a0      	blx	r4
 80109a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109a4:	6834      	ldr	r4, [r6, #0]
 80109a6:	43e3      	mvns	r3, r4
 80109a8:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80109ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80109b0:	4313      	orrs	r3, r2
 80109b2:	b2e2      	uxtb	r2, r4
 80109b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80109bc:	431c      	orrs	r4, r3
 80109be:	3d01      	subs	r5, #1
 80109c0:	f847 4b04 	str.w	r4, [r7], #4
 80109c4:	4466      	add	r6, ip
 80109c6:	d1ed      	bne.n	80109a4 <_Index2ColorBulk_M8888I+0x14>
 80109c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109ca:	bf00      	nop
 80109cc:	20026944 	.word	0x20026944

080109d0 <GUICC_M8888I_SetCustColorConv>:
 80109d0:	4b02      	ldr	r3, [pc, #8]	; (80109dc <GUICC_M8888I_SetCustColorConv+0xc>)
 80109d2:	6018      	str	r0, [r3, #0]
 80109d4:	4b02      	ldr	r3, [pc, #8]	; (80109e0 <GUICC_M8888I_SetCustColorConv+0x10>)
 80109d6:	6019      	str	r1, [r3, #0]
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	20026948 	.word	0x20026948
 80109e0:	20026944 	.word	0x20026944

080109e4 <_Color2Index_M4444I>:
 80109e4:	b510      	push	{r4, lr}
 80109e6:	f240 1307 	movw	r3, #263	; 0x107
 80109ea:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80109ee:	b2c2      	uxtb	r2, r0
 80109f0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80109f4:	3408      	adds	r4, #8
 80109f6:	eba3 6010 	sub.w	r0, r3, r0, lsr #24
 80109fa:	2311      	movs	r3, #17
 80109fc:	fbb4 f4f3 	udiv	r4, r4, r3
 8010a00:	fbb0 f0f3 	udiv	r0, r0, r3
 8010a04:	3208      	adds	r2, #8
 8010a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8010a0a:	3108      	adds	r1, #8
 8010a0c:	eb04 3000 	add.w	r0, r4, r0, lsl #12
 8010a10:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8010a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8010a18:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8010a1c:	bd10      	pop	{r4, pc}
	...

08010a20 <_Index2Color_M4444I>:
 8010a20:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <_Index2Color_M4444I+0x2c>)
 8010a22:	f000 020f 	and.w	r2, r0, #15
 8010a26:	5c99      	ldrb	r1, [r3, r2]
 8010a28:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8010a2c:	5c9a      	ldrb	r2, [r3, r2]
 8010a2e:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 8010a32:	f3c0 1103 	ubfx	r1, r0, #4, #4
 8010a36:	f3c0 3003 	ubfx	r0, r0, #12, #4
 8010a3a:	5c59      	ldrb	r1, [r3, r1]
 8010a3c:	5c18      	ldrb	r0, [r3, r0]
 8010a3e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8010a42:	43c0      	mvns	r0, r0
 8010a44:	eb02 6000 	add.w	r0, r2, r0, lsl #24
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	080147b4 	.word	0x080147b4

08010a50 <_GetIndexMask_M4444I>:
 8010a50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010a54:	4770      	bx	lr
	...

08010a58 <_Color2IndexBulk_M4444I>:
 8010a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a5c:	4c16      	ldr	r4, [pc, #88]	; (8010ab8 <_Color2IndexBulk_M4444I+0x60>)
 8010a5e:	6824      	ldr	r4, [r4, #0]
 8010a60:	4684      	mov	ip, r0
 8010a62:	460f      	mov	r7, r1
 8010a64:	4616      	mov	r6, r2
 8010a66:	4698      	mov	r8, r3
 8010a68:	b114      	cbz	r4, 8010a70 <_Color2IndexBulk_M4444I+0x18>
 8010a6a:	47a0      	blx	r4
 8010a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a70:	f85c 5b04 	ldr.w	r5, [ip], #4
 8010a74:	b2e9      	uxtb	r1, r5
 8010a76:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8010a7a:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8010a7e:	0e2d      	lsrs	r5, r5, #24
 8010a80:	f5c5 7583 	rsb	r5, r5, #262	; 0x106
 8010a84:	2411      	movs	r4, #17
 8010a86:	3501      	adds	r5, #1
 8010a88:	fbb5 f5f4 	udiv	r5, r5, r4
 8010a8c:	3108      	adds	r1, #8
 8010a8e:	fbb1 f1f4 	udiv	r1, r1, r4
 8010a92:	3208      	adds	r2, #8
 8010a94:	032d      	lsls	r5, r5, #12
 8010a96:	fbb2 f2f4 	udiv	r2, r2, r4
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
 8010aa0:	4415      	add	r5, r2
 8010aa2:	fbb3 f4f4 	udiv	r4, r3, r4
 8010aa6:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 8010aaa:	3e01      	subs	r6, #1
 8010aac:	803c      	strh	r4, [r7, #0]
 8010aae:	4447      	add	r7, r8
 8010ab0:	d1de      	bne.n	8010a70 <_Color2IndexBulk_M4444I+0x18>
 8010ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab6:	bf00      	nop
 8010ab8:	20026950 	.word	0x20026950

08010abc <_Index2ColorBulk_M4444I>:
 8010abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010abe:	4d16      	ldr	r5, [pc, #88]	; (8010b18 <_Index2ColorBulk_M4444I+0x5c>)
 8010ac0:	682d      	ldr	r5, [r5, #0]
 8010ac2:	4684      	mov	ip, r0
 8010ac4:	4614      	mov	r4, r2
 8010ac6:	461e      	mov	r6, r3
 8010ac8:	b10d      	cbz	r5, 8010ace <_Index2ColorBulk_M4444I+0x12>
 8010aca:	47a8      	blx	r5
 8010acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ace:	1e50      	subs	r0, r2, #1
 8010ad0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010ad4:	3a01      	subs	r2, #1
 8010ad6:	fb03 c000 	mla	r0, r3, r0, ip
 8010ada:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ade:	8805      	ldrh	r5, [r0, #0]
 8010ae0:	4a0e      	ldr	r2, [pc, #56]	; (8010b1c <_Index2ColorBulk_M4444I+0x60>)
 8010ae2:	f005 030f 	and.w	r3, r5, #15
 8010ae6:	3c01      	subs	r4, #1
 8010ae8:	5cd7      	ldrb	r7, [r2, r3]
 8010aea:	f3c5 2303 	ubfx	r3, r5, #8, #4
 8010aee:	ebc6 0000 	rsb	r0, r6, r0
 8010af2:	5cd3      	ldrb	r3, [r2, r3]
 8010af4:	eb03 4707 	add.w	r7, r3, r7, lsl #16
 8010af8:	ea4f 3315 	mov.w	r3, r5, lsr #12
 8010afc:	f3c5 1503 	ubfx	r5, r5, #4, #4
 8010b00:	5cd3      	ldrb	r3, [r2, r3]
 8010b02:	5d52      	ldrb	r2, [r2, r5]
 8010b04:	ea6f 0303 	mvn.w	r3, r3
 8010b08:	eb07 6303 	add.w	r3, r7, r3, lsl #24
 8010b0c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010b10:	f841 3904 	str.w	r3, [r1], #-4
 8010b14:	d1e3      	bne.n	8010ade <_Index2ColorBulk_M4444I+0x22>
 8010b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b18:	2002694c 	.word	0x2002694c
 8010b1c:	080147b4 	.word	0x080147b4

08010b20 <GUICC_M4444I_SetCustColorConv>:
 8010b20:	4b02      	ldr	r3, [pc, #8]	; (8010b2c <GUICC_M4444I_SetCustColorConv+0xc>)
 8010b22:	6018      	str	r0, [r3, #0]
 8010b24:	4b02      	ldr	r3, [pc, #8]	; (8010b30 <GUICC_M4444I_SetCustColorConv+0x10>)
 8010b26:	6019      	str	r1, [r3, #0]
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	20026950 	.word	0x20026950
 8010b30:	2002694c 	.word	0x2002694c

08010b34 <_Color2Index_M1555I>:
 8010b34:	4b08      	ldr	r3, [pc, #32]	; (8010b58 <_Color2Index_M1555I+0x24>)
 8010b36:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8010b3a:	b2c1      	uxtb	r1, r0
 8010b3c:	5c9a      	ldrb	r2, [r3, r2]
 8010b3e:	5c59      	ldrb	r1, [r3, r1]
 8010b40:	eb02 2281 	add.w	r2, r2, r1, lsl #10
 8010b44:	43c1      	mvns	r1, r0
 8010b46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8010b4a:	0fc9      	lsrs	r1, r1, #31
 8010b4c:	5c18      	ldrb	r0, [r3, r0]
 8010b4e:	eb02 32c1 	add.w	r2, r2, r1, lsl #15
 8010b52:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 8010b56:	4770      	bx	lr
 8010b58:	080145b4 	.word	0x080145b4

08010b5c <_Index2Color_M1555I>:
 8010b5c:	4b0b      	ldr	r3, [pc, #44]	; (8010b8c <_Index2Color_M1555I+0x30>)
 8010b5e:	f000 021f 	and.w	r2, r0, #31
 8010b62:	b510      	push	{r4, lr}
 8010b64:	5c99      	ldrb	r1, [r3, r2]
 8010b66:	f3c0 2484 	ubfx	r4, r0, #10, #5
 8010b6a:	f3c0 1244 	ubfx	r2, r0, #5, #5
 8010b6e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8010b72:	5c9a      	ldrb	r2, [r3, r2]
 8010b74:	5d1b      	ldrb	r3, [r3, r4]
 8010b76:	eb03 4001 	add.w	r0, r3, r1, lsl #16
 8010b7a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8010b7e:	bf0c      	ite	eq
 8010b80:	f04f 437f 	moveq.w	r3, #4278190080	; 0xff000000
 8010b84:	2300      	movne	r3, #0
 8010b86:	4418      	add	r0, r3
 8010b88:	bd10      	pop	{r4, pc}
 8010b8a:	bf00      	nop
 8010b8c:	08014494 	.word	0x08014494

08010b90 <_GetIndexMask_M1555I>:
 8010b90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010b94:	4770      	bx	lr
	...

08010b98 <_Color2IndexBulk_M1555I>:
 8010b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9a:	4c11      	ldr	r4, [pc, #68]	; (8010be0 <_Color2IndexBulk_M1555I+0x48>)
 8010b9c:	6824      	ldr	r4, [r4, #0]
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	460e      	mov	r6, r1
 8010ba2:	4615      	mov	r5, r2
 8010ba4:	469c      	mov	ip, r3
 8010ba6:	b10c      	cbz	r4, 8010bac <_Color2IndexBulk_M1555I+0x14>
 8010ba8:	47a0      	blx	r4
 8010baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bac:	f857 4b04 	ldr.w	r4, [r7], #4
 8010bb0:	4a0c      	ldr	r2, [pc, #48]	; (8010be4 <_Color2IndexBulk_M1555I+0x4c>)
 8010bb2:	b2e3      	uxtb	r3, r4
 8010bb4:	3d01      	subs	r5, #1
 8010bb6:	5cd1      	ldrb	r1, [r2, r3]
 8010bb8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010bbc:	5cd3      	ldrb	r3, [r2, r3]
 8010bbe:	eb03 2381 	add.w	r3, r3, r1, lsl #10
 8010bc2:	ea6f 0104 	mvn.w	r1, r4
 8010bc6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8010bca:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 8010bce:	5d12      	ldrb	r2, [r2, r4]
 8010bd0:	eb03 33c1 	add.w	r3, r3, r1, lsl #15
 8010bd4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8010bd8:	8033      	strh	r3, [r6, #0]
 8010bda:	4466      	add	r6, ip
 8010bdc:	d1e6      	bne.n	8010bac <_Color2IndexBulk_M1555I+0x14>
 8010bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010be0:	20026958 	.word	0x20026958
 8010be4:	080145b4 	.word	0x080145b4

08010be8 <_Index2ColorBulk_M1555I>:
 8010be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bea:	4d17      	ldr	r5, [pc, #92]	; (8010c48 <_Index2ColorBulk_M1555I+0x60>)
 8010bec:	682d      	ldr	r5, [r5, #0]
 8010bee:	4684      	mov	ip, r0
 8010bf0:	4614      	mov	r4, r2
 8010bf2:	461e      	mov	r6, r3
 8010bf4:	b10d      	cbz	r5, 8010bfa <_Index2ColorBulk_M1555I+0x12>
 8010bf6:	47a8      	blx	r5
 8010bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bfa:	1e50      	subs	r0, r2, #1
 8010bfc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010c00:	3a01      	subs	r2, #1
 8010c02:	fb03 c000 	mla	r0, r3, r0, ip
 8010c06:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010c0a:	8802      	ldrh	r2, [r0, #0]
 8010c0c:	4d0f      	ldr	r5, [pc, #60]	; (8010c4c <_Index2ColorBulk_M1555I+0x64>)
 8010c0e:	f002 031f 	and.w	r3, r2, #31
 8010c12:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8010c16:	f815 c003 	ldrb.w	ip, [r5, r3]
 8010c1a:	f3c2 1344 	ubfx	r3, r2, #5, #5
 8010c1e:	ebc6 0000 	rsb	r0, r6, r0
 8010c22:	5cef      	ldrb	r7, [r5, r3]
 8010c24:	f3c2 2384 	ubfx	r3, r2, #10, #5
 8010c28:	bf0c      	ite	eq
 8010c2a:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8010c2e:	2200      	movne	r2, #0
 8010c30:	5ceb      	ldrb	r3, [r5, r3]
 8010c32:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8010c36:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8010c3a:	4413      	add	r3, r2
 8010c3c:	3c01      	subs	r4, #1
 8010c3e:	f841 3904 	str.w	r3, [r1], #-4
 8010c42:	d1e2      	bne.n	8010c0a <_Index2ColorBulk_M1555I+0x22>
 8010c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c46:	bf00      	nop
 8010c48:	20026954 	.word	0x20026954
 8010c4c:	08014494 	.word	0x08014494

08010c50 <GUICC_M1555I_SetCustColorConv>:
 8010c50:	4b02      	ldr	r3, [pc, #8]	; (8010c5c <GUICC_M1555I_SetCustColorConv+0xc>)
 8010c52:	6018      	str	r0, [r3, #0]
 8010c54:	4b02      	ldr	r3, [pc, #8]	; (8010c60 <GUICC_M1555I_SetCustColorConv+0x10>)
 8010c56:	6019      	str	r1, [r3, #0]
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop
 8010c5c:	20026958 	.word	0x20026958
 8010c60:	20026954 	.word	0x20026954

08010c64 <_Color2Index_88666I>:
 8010c64:	4b06      	ldr	r3, [pc, #24]	; (8010c80 <_Color2Index_88666I+0x1c>)
 8010c66:	b510      	push	{r4, lr}
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8010c70:	4798      	blx	r3
 8010c72:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
 8010c76:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8010c7a:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
 8010c7e:	bd10      	pop	{r4, pc}
 8010c80:	0801440c 	.word	0x0801440c

08010c84 <_Index2Color_88666I>:
 8010c84:	4b06      	ldr	r3, [pc, #24]	; (8010ca0 <_Index2Color_88666I+0x1c>)
 8010c86:	b510      	push	{r4, lr}
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	b2c0      	uxtb	r0, r0
 8010c8e:	4798      	blx	r3
 8010c90:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8010c94:	0424      	lsls	r4, r4, #16
 8010c96:	f084 447f 	eor.w	r4, r4, #4278190080	; 0xff000000
 8010c9a:	4320      	orrs	r0, r4
 8010c9c:	bd10      	pop	{r4, pc}
 8010c9e:	bf00      	nop
 8010ca0:	0801440c 	.word	0x0801440c

08010ca4 <_GetIndexMask_88666I>:
 8010ca4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010ca8:	4770      	bx	lr
	...

08010cac <_Color2IndexBulk_88666I>:
 8010cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	460c      	mov	r4, r1
 8010cb4:	4615      	mov	r5, r2
 8010cb6:	4698      	mov	r8, r3
 8010cb8:	f856 7b04 	ldr.w	r7, [r6], #4
 8010cbc:	4b08      	ldr	r3, [pc, #32]	; (8010ce0 <_Color2IndexBulk_88666I+0x34>)
 8010cbe:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	4790      	blx	r2
 8010cc6:	f007 477f 	and.w	r7, r7, #4278190080	; 0xff000000
 8010cca:	f087 477f 	eor.w	r7, r7, #4278190080	; 0xff000000
 8010cce:	ea40 4017 	orr.w	r0, r0, r7, lsr #16
 8010cd2:	3d01      	subs	r5, #1
 8010cd4:	8020      	strh	r0, [r4, #0]
 8010cd6:	4444      	add	r4, r8
 8010cd8:	d1ee      	bne.n	8010cb8 <_Color2IndexBulk_88666I+0xc>
 8010cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cde:	bf00      	nop
 8010ce0:	0801440c 	.word	0x0801440c

08010ce4 <_Index2ColorBulk_88666I>:
 8010ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce8:	1e55      	subs	r5, r2, #1
 8010cea:	4614      	mov	r4, r2
 8010cec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010cf0:	3a01      	subs	r2, #1
 8010cf2:	461e      	mov	r6, r3
 8010cf4:	fb03 0505 	mla	r5, r3, r5, r0
 8010cf8:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8010cfc:	f8b5 8000 	ldrh.w	r8, [r5]
 8010d00:	4b0a      	ldr	r3, [pc, #40]	; (8010d2c <_Index2ColorBulk_88666I+0x48>)
 8010d02:	fa5f f088 	uxtb.w	r0, r8
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	4798      	blx	r3
 8010d0a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8010d0e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8010d12:	f088 487f 	eor.w	r8, r8, #4278190080	; 0xff000000
 8010d16:	ea48 0000 	orr.w	r0, r8, r0
 8010d1a:	3c01      	subs	r4, #1
 8010d1c:	f847 0904 	str.w	r0, [r7], #-4
 8010d20:	ebc6 0505 	rsb	r5, r6, r5
 8010d24:	d1ea      	bne.n	8010cfc <_Index2ColorBulk_88666I+0x18>
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2a:	bf00      	nop
 8010d2c:	0801440c 	.word	0x0801440c

08010d30 <LCD_Color2Index_8666>:
 8010d30:	b510      	push	{r4, lr}
 8010d32:	b2c3      	uxtb	r3, r0
 8010d34:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010d3e:	d108      	bne.n	8010d52 <LCD_Color2Index_8666+0x22>
 8010d40:	428b      	cmp	r3, r1
 8010d42:	d106      	bne.n	8010d52 <LCD_Color2Index_8666+0x22>
 8010d44:	f103 0008 	add.w	r0, r3, #8
 8010d48:	2211      	movs	r2, #17
 8010d4a:	fbb0 f0f2 	udiv	r0, r0, r2
 8010d4e:	3078      	adds	r0, #120	; 0x78
 8010d50:	bd10      	pop	{r4, pc}
 8010d52:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8010d56:	22ff      	movs	r2, #255	; 0xff
 8010d58:	347f      	adds	r4, #127	; 0x7f
 8010d5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010d5e:	fbb4 f4f2 	udiv	r4, r4, r2
 8010d62:	2006      	movs	r0, #6
 8010d64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010d68:	317f      	adds	r1, #127	; 0x7f
 8010d6a:	fbb1 f1f2 	udiv	r1, r1, r2
 8010d6e:	4344      	muls	r4, r0
 8010d70:	337f      	adds	r3, #127	; 0x7f
 8010d72:	2024      	movs	r0, #36	; 0x24
 8010d74:	fb00 4001 	mla	r0, r0, r1, r4
 8010d78:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d7c:	4410      	add	r0, r2
 8010d7e:	286b      	cmp	r0, #107	; 0x6b
 8010d80:	bf88      	it	hi
 8010d82:	3028      	addhi	r0, #40	; 0x28
 8010d84:	bd10      	pop	{r4, pc}

08010d86 <_GetIndexMask_8666>:
 8010d86:	20ff      	movs	r0, #255	; 0xff
 8010d88:	4770      	bx	lr
	...

08010d8c <LCD_Index2Color_8666>:
 8010d8c:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8010d90:	2b0f      	cmp	r3, #15
 8010d92:	b510      	push	{r4, lr}
 8010d94:	d805      	bhi.n	8010da2 <LCD_Index2Color_8666+0x16>
 8010d96:	4b11      	ldr	r3, [pc, #68]	; (8010ddc <LCD_Index2Color_8666+0x50>)
 8010d98:	4358      	muls	r0, r3
 8010d9a:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8010d9e:	3008      	adds	r0, #8
 8010da0:	bd10      	pop	{r4, pc}
 8010da2:	286b      	cmp	r0, #107	; 0x6b
 8010da4:	d902      	bls.n	8010dac <LCD_Index2Color_8666+0x20>
 8010da6:	2893      	cmp	r0, #147	; 0x93
 8010da8:	d915      	bls.n	8010dd6 <LCD_Index2Color_8666+0x4a>
 8010daa:	3828      	subs	r0, #40	; 0x28
 8010dac:	2306      	movs	r3, #6
 8010dae:	fbb0 f1f3 	udiv	r1, r0, r3
 8010db2:	2424      	movs	r4, #36	; 0x24
 8010db4:	2233      	movs	r2, #51	; 0x33
 8010db6:	fbb0 f4f4 	udiv	r4, r0, r4
 8010dba:	fb03 0011 	mls	r0, r3, r1, r0
 8010dbe:	4350      	muls	r0, r2
 8010dc0:	4354      	muls	r4, r2
 8010dc2:	eb00 4404 	add.w	r4, r0, r4, lsl #16
 8010dc6:	fbb1 f0f3 	udiv	r0, r1, r3
 8010dca:	fb03 1010 	mls	r0, r3, r0, r1
 8010dce:	4350      	muls	r0, r2
 8010dd0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
 8010dd4:	bd10      	pop	{r4, pc}
 8010dd6:	2000      	movs	r0, #0
 8010dd8:	bd10      	pop	{r4, pc}
 8010dda:	bf00      	nop
 8010ddc:	00111111 	.word	0x00111111

08010de0 <_Color2Index_1616I>:
 8010de0:	4b07      	ldr	r3, [pc, #28]	; (8010e00 <_Color2Index_1616I+0x20>)
 8010de2:	b510      	push	{r4, lr}
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4604      	mov	r4, r0
 8010de8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8010dec:	4798      	blx	r3
 8010dee:	0e24      	lsrs	r4, r4, #24
 8010df0:	4b04      	ldr	r3, [pc, #16]	; (8010e04 <_Color2Index_1616I+0x24>)
 8010df2:	5d1b      	ldrb	r3, [r3, r4]
 8010df4:	f1c3 030f 	rsb	r3, r3, #15
 8010df8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8010dfc:	bd10      	pop	{r4, pc}
 8010dfe:	bf00      	nop
 8010e00:	0801443c 	.word	0x0801443c
 8010e04:	080146b4 	.word	0x080146b4

08010e08 <_Index2Color_1616I>:
 8010e08:	4b06      	ldr	r3, [pc, #24]	; (8010e24 <_Index2Color_1616I+0x1c>)
 8010e0a:	b510      	push	{r4, lr}
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	4604      	mov	r4, r0
 8010e10:	b2c0      	uxtb	r0, r0
 8010e12:	4798      	blx	r3
 8010e14:	0924      	lsrs	r4, r4, #4
 8010e16:	4b04      	ldr	r3, [pc, #16]	; (8010e28 <_Index2Color_1616I+0x20>)
 8010e18:	5d1b      	ldrb	r3, [r3, r4]
 8010e1a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010e1e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8010e22:	bd10      	pop	{r4, pc}
 8010e24:	0801443c 	.word	0x0801443c
 8010e28:	080147b4 	.word	0x080147b4

08010e2c <_GetIndexMask_1616I>:
 8010e2c:	20ff      	movs	r0, #255	; 0xff
 8010e2e:	4770      	bx	lr

08010e30 <_Color2IndexBulk_1616I>:
 8010e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e34:	4606      	mov	r6, r0
 8010e36:	460c      	mov	r4, r1
 8010e38:	4615      	mov	r5, r2
 8010e3a:	4698      	mov	r8, r3
 8010e3c:	f856 7b04 	ldr.w	r7, [r6], #4
 8010e40:	4b08      	ldr	r3, [pc, #32]	; (8010e64 <_Color2IndexBulk_1616I+0x34>)
 8010e42:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	4790      	blx	r2
 8010e4a:	0e3f      	lsrs	r7, r7, #24
 8010e4c:	4b06      	ldr	r3, [pc, #24]	; (8010e68 <_Color2IndexBulk_1616I+0x38>)
 8010e4e:	5ddb      	ldrb	r3, [r3, r7]
 8010e50:	f1c3 030f 	rsb	r3, r3, #15
 8010e54:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8010e58:	3d01      	subs	r5, #1
 8010e5a:	7020      	strb	r0, [r4, #0]
 8010e5c:	4444      	add	r4, r8
 8010e5e:	d1ed      	bne.n	8010e3c <_Color2IndexBulk_1616I+0xc>
 8010e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e64:	0801443c 	.word	0x0801443c
 8010e68:	080146b4 	.word	0x080146b4

08010e6c <_Index2ColorBulk_1616I>:
 8010e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e70:	1e55      	subs	r5, r2, #1
 8010e72:	4614      	mov	r4, r2
 8010e74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010e78:	3a01      	subs	r2, #1
 8010e7a:	461e      	mov	r6, r3
 8010e7c:	fb03 0505 	mla	r5, r3, r5, r0
 8010e80:	eb01 0782 	add.w	r7, r1, r2, lsl #2
 8010e84:	f895 8000 	ldrb.w	r8, [r5]
 8010e88:	4b0a      	ldr	r3, [pc, #40]	; (8010eb4 <_Index2ColorBulk_1616I+0x48>)
 8010e8a:	4640      	mov	r0, r8
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	4798      	blx	r3
 8010e90:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8010e94:	4b08      	ldr	r3, [pc, #32]	; (8010eb8 <_Index2ColorBulk_1616I+0x4c>)
 8010e96:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010e9a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8010e9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8010ea2:	3c01      	subs	r4, #1
 8010ea4:	f847 0904 	str.w	r0, [r7], #-4
 8010ea8:	ebc6 0505 	rsb	r5, r6, r5
 8010eac:	d1ea      	bne.n	8010e84 <_Index2ColorBulk_1616I+0x18>
 8010eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb2:	bf00      	nop
 8010eb4:	0801443c 	.word	0x0801443c
 8010eb8:	080147b4 	.word	0x080147b4

08010ebc <_Color2Index_16>:
 8010ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ebe:	b2c5      	uxtb	r5, r0
 8010ec0:	1c6c      	adds	r4, r5, #1
 8010ec2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010ec6:	1c59      	adds	r1, r3, #1
 8010ec8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8010ecc:	2c54      	cmp	r4, #84	; 0x54
 8010ece:	f100 0201 	add.w	r2, r0, #1
 8010ed2:	bf94      	ite	ls
 8010ed4:	2400      	movls	r4, #0
 8010ed6:	2401      	movhi	r4, #1
 8010ed8:	2954      	cmp	r1, #84	; 0x54
 8010eda:	bf94      	ite	ls
 8010edc:	2100      	movls	r1, #0
 8010ede:	2101      	movhi	r1, #1
 8010ee0:	2a54      	cmp	r2, #84	; 0x54
 8010ee2:	bf94      	ite	ls
 8010ee4:	2200      	movls	r2, #0
 8010ee6:	2201      	movhi	r2, #1
 8010ee8:	4606      	mov	r6, r0
 8010eea:	00d0      	lsls	r0, r2, #3
 8010eec:	461f      	mov	r7, r3
 8010eee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010ef2:	188b      	adds	r3, r1, r2
 8010ef4:	4423      	add	r3, r4
 8010ef6:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 8010efa:	b90c      	cbnz	r4, 8010f00 <_Color2Index_16+0x44>
 8010efc:	b901      	cbnz	r1, 8010f00 <_Color2Index_16+0x44>
 8010efe:	b152      	cbz	r2, 8010f16 <_Color2Index_16+0x5a>
 8010f00:	19ba      	adds	r2, r7, r6
 8010f02:	4415      	add	r5, r2
 8010f04:	ebc3 1283 	rsb	r2, r3, r3, lsl #6
 8010f08:	4415      	add	r5, r2
 8010f0a:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
 8010f0e:	fbb5 f3f3 	udiv	r3, r5, r3
 8010f12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8010f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f18 <_Index2Color_16>:
 8010f18:	b530      	push	{r4, r5, lr}
 8010f1a:	f3c0 0240 	ubfx	r2, r0, #1, #1
 8010f1e:	f3c0 0580 	ubfx	r5, r0, #2, #1
 8010f22:	f3c0 01c0 	ubfx	r1, r0, #3, #1
 8010f26:	ea02 0300 	and.w	r3, r2, r0
 8010f2a:	ea05 0400 	and.w	r4, r5, r0
 8010f2e:	4008      	ands	r0, r1
 8010f30:	ebc0 11c1 	rsb	r1, r0, r1, lsl #7
 8010f34:	ebc4 15c5 	rsb	r5, r4, r5, lsl #7
 8010f38:	eb01 10c0 	add.w	r0, r1, r0, lsl #7
 8010f3c:	eb05 14c4 	add.w	r4, r5, r4, lsl #7
 8010f40:	ebc3 12c2 	rsb	r2, r3, r2, lsl #7
 8010f44:	0400      	lsls	r0, r0, #16
 8010f46:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8010f4a:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
 8010f4e:	4318      	orrs	r0, r3
 8010f50:	bd30      	pop	{r4, r5, pc}

08010f52 <_GetIndexMask_16>:
 8010f52:	200f      	movs	r0, #15
 8010f54:	4770      	bx	lr

08010f56 <WM__GetPrevSibling>:
 8010f56:	b538      	push	{r3, r4, r5, lr}
 8010f58:	4605      	mov	r5, r0
 8010f5a:	f000 f80f 	bl	8010f7c <WM__GetFirstSibling>
 8010f5e:	4604      	mov	r4, r0
 8010f60:	b154      	cbz	r4, 8010f78 <WM__GetPrevSibling+0x22>
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	d007      	beq.n	8010f76 <WM__GetPrevSibling+0x20>
 8010f66:	4620      	mov	r0, r4
 8010f68:	f7ff f940 	bl	80101ec <GUI_ALLOC_h2p>
 8010f6c:	6a03      	ldr	r3, [r0, #32]
 8010f6e:	42ab      	cmp	r3, r5
 8010f70:	d002      	beq.n	8010f78 <WM__GetPrevSibling+0x22>
 8010f72:	461c      	mov	r4, r3
 8010f74:	e7f4      	b.n	8010f60 <WM__GetPrevSibling+0xa>
 8010f76:	2400      	movs	r4, #0
 8010f78:	4620      	mov	r0, r4
 8010f7a:	bd38      	pop	{r3, r4, r5, pc}

08010f7c <WM__GetFirstSibling>:
 8010f7c:	b508      	push	{r3, lr}
 8010f7e:	f7f9 fbab 	bl	800a6d8 <WM_GetParent>
 8010f82:	b118      	cbz	r0, 8010f8c <WM__GetFirstSibling+0x10>
 8010f84:	f7ff f932 	bl	80101ec <GUI_ALLOC_h2p>
 8010f88:	69c0      	ldr	r0, [r0, #28]
 8010f8a:	bd08      	pop	{r3, pc}
 8010f8c:	bd08      	pop	{r3, pc}
	...

08010f90 <WM__IsInModalArea>:
 8010f90:	4b12      	ldr	r3, [pc, #72]	; (8010fdc <WM__IsInModalArea+0x4c>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	b570      	push	{r4, r5, r6, lr}
 8010f98:	4604      	mov	r4, r0
 8010f9a:	da0f      	bge.n	8010fbc <WM__IsInModalArea+0x2c>
 8010f9c:	4e10      	ldr	r6, [pc, #64]	; (8010fe0 <WM__IsInModalArea+0x50>)
 8010f9e:	4d11      	ldr	r5, [pc, #68]	; (8010fe4 <WM__IsInModalArea+0x54>)
 8010fa0:	6833      	ldr	r3, [r6, #0]
 8010fa2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	6859      	ldr	r1, [r3, #4]
 8010faa:	f7f9 fb66 	bl	800a67a <WM__IsAncestor>
 8010fae:	6833      	ldr	r3, [r6, #0]
 8010fb0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010fb4:	686a      	ldr	r2, [r5, #4]
 8010fb6:	686b      	ldr	r3, [r5, #4]
 8010fb8:	b942      	cbnz	r2, 8010fcc <WM__IsInModalArea+0x3c>
 8010fba:	e00c      	b.n	8010fd6 <WM__IsInModalArea+0x46>
 8010fbc:	4a0a      	ldr	r2, [pc, #40]	; (8010fe8 <WM__IsInModalArea+0x58>)
 8010fbe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010fc2:	f7f9 fb5a 	bl	800a67a <WM__IsAncestor>
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d1e8      	bne.n	8010f9c <WM__IsInModalArea+0xc>
 8010fca:	bd70      	pop	{r4, r5, r6, pc}
 8010fcc:	b918      	cbnz	r0, 8010fd6 <WM__IsInModalArea+0x46>
 8010fce:	1ae3      	subs	r3, r4, r3
 8010fd0:	4258      	negs	r0, r3
 8010fd2:	4158      	adcs	r0, r3
 8010fd4:	bd70      	pop	{r4, r5, r6, pc}
 8010fd6:	2001      	movs	r0, #1
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
 8010fda:	bf00      	nop
 8010fdc:	20000044 	.word	0x20000044
 8010fe0:	20026ce4 	.word	0x20026ce4
 8010fe4:	20026e34 	.word	0x20026e34
 8010fe8:	20026cc4 	.word	0x20026cc4

08010fec <WM__SendPIDMessage>:
 8010fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fee:	4606      	mov	r6, r0
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8010ff4:	b085      	sub	sp, #20
 8010ff6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010ffa:	230d      	movs	r3, #13
 8010ffc:	9602      	str	r6, [sp, #8]
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	4637      	mov	r7, r6
 8011002:	4638      	mov	r0, r7
 8011004:	f7f9 fb66 	bl	800a6d4 <WM_IsWindow>
 8011008:	b150      	cbz	r0, 8011020 <WM__SendPIDMessage+0x34>
 801100a:	4638      	mov	r0, r7
 801100c:	f7f9 fb64 	bl	800a6d8 <WM_GetParent>
 8011010:	4607      	mov	r7, r0
 8011012:	2800      	cmp	r0, #0
 8011014:	d0f5      	beq.n	8011002 <WM__SendPIDMessage+0x16>
 8011016:	4669      	mov	r1, sp
 8011018:	9403      	str	r4, [sp, #12]
 801101a:	f001 f9b0 	bl	801237e <WM__SendMessageIfEnabled>
 801101e:	e7f0      	b.n	8011002 <WM__SendPIDMessage+0x16>
 8011020:	4630      	mov	r0, r6
 8011022:	4621      	mov	r1, r4
 8011024:	f001 f9ab 	bl	801237e <WM__SendMessageIfEnabled>
 8011028:	b005      	add	sp, #20
 801102a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801102c <WM__SendTouchMessage>:
 801102c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801102e:	68cc      	ldr	r4, [r1, #12]
 8011030:	4606      	mov	r6, r0
 8011032:	460d      	mov	r5, r1
 8011034:	b194      	cbz	r4, 801105c <WM__SendTouchMessage+0x30>
 8011036:	f7ff f8e3 	bl	8010200 <GUI_ALLOC_LockH>
 801103a:	ab02      	add	r3, sp, #8
 801103c:	4602      	mov	r2, r0
 801103e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8011042:	6821      	ldr	r1, [r4, #0]
 8011044:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011048:	1a09      	subs	r1, r1, r0
 801104a:	6021      	str	r1, [r4, #0]
 801104c:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8011050:	6862      	ldr	r2, [r4, #4]
 8011052:	1a52      	subs	r2, r2, r1
 8011054:	6062      	str	r2, [r4, #4]
 8011056:	4618      	mov	r0, r3
 8011058:	f7ff f8e0 	bl	801021c <GUI_ALLOC_UnlockH>
 801105c:	4630      	mov	r0, r6
 801105e:	4629      	mov	r1, r5
 8011060:	f7ff ffc4 	bl	8010fec <WM__SendPIDMessage>
 8011064:	b002      	add	sp, #8
 8011066:	bd70      	pop	{r4, r5, r6, pc}

08011068 <WM_HandlePID>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	b097      	sub	sp, #92	; 0x5c
 801106e:	ae06      	add	r6, sp, #24
 8011070:	f04f 080c 	mov.w	r8, #12
 8011074:	2100      	movs	r1, #0
 8011076:	4642      	mov	r2, r8
 8011078:	4630      	mov	r0, r6
 801107a:	f001 fe19 	bl	8012cb0 <memset>
 801107e:	f7fd fcad 	bl	800e9dc <GUI_PID_IsEmpty>
 8011082:	b108      	cbz	r0, 8011088 <WM_HandlePID+0x20>
 8011084:	2000      	movs	r0, #0
 8011086:	e1aa      	b.n	80113de <WM_HandlePID+0x376>
 8011088:	ac09      	add	r4, sp, #36	; 0x24
 801108a:	4620      	mov	r0, r4
 801108c:	f7fd fc2a 	bl	800e8e4 <GUI_PID_GetState>
 8011090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011092:	4dad      	ldr	r5, [pc, #692]	; (8011348 <WM_HandlePID+0x2e0>)
 8011094:	4fad      	ldr	r7, [pc, #692]	; (801134c <WM_HandlePID+0x2e4>)
 8011096:	1c5a      	adds	r2, r3, #1
 8011098:	d112      	bne.n	80110c0 <WM_HandlePID+0x58>
 801109a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801109c:	3301      	adds	r3, #1
 801109e:	d11e      	bne.n	80110de <WM_HandlePID+0x76>
 80110a0:	682b      	ldr	r3, [r5, #0]
 80110a2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80110a6:	fb08 f803 	mul.w	r8, r8, r3
 80110aa:	eb07 0308 	add.w	r3, r7, r8
 80110ae:	7a19      	ldrb	r1, [r3, #8]
 80110b0:	4291      	cmp	r1, r2
 80110b2:	d0e7      	beq.n	8011084 <WM_HandlePID+0x1c>
 80110b4:	f857 2008 	ldr.w	r2, [r7, r8]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	9209      	str	r2, [sp, #36]	; 0x24
 80110bc:	930a      	str	r3, [sp, #40]	; 0x28
 80110be:	e00e      	b.n	80110de <WM_HandlePID+0x76>
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	db0c      	blt.n	80110de <WM_HandlePID+0x76>
 80110c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110c6:	2a00      	cmp	r2, #0
 80110c8:	db09      	blt.n	80110de <WM_HandlePID+0x76>
 80110ca:	49a1      	ldr	r1, [pc, #644]	; (8011350 <WM_HandlePID+0x2e8>)
 80110cc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80110d0:	440b      	add	r3, r1
 80110d2:	9309      	str	r3, [sp, #36]	; 0x24
 80110d4:	4b9f      	ldr	r3, [pc, #636]	; (8011354 <WM_HandlePID+0x2ec>)
 80110d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80110da:	441a      	add	r2, r3
 80110dc:	920a      	str	r2, [sp, #40]	; 0x28
 80110de:	a804      	add	r0, sp, #16
 80110e0:	f000 fa12 	bl	8011508 <WM__AddCriticalHandle>
 80110e4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	bf98      	it	ls
 80110ec:	602b      	strls	r3, [r5, #0]
 80110ee:	6828      	ldr	r0, [r5, #0]
 80110f0:	a901      	add	r1, sp, #4
 80110f2:	aa02      	add	r2, sp, #8
 80110f4:	f7fd fbae 	bl	800e854 <GUI_GetLayerPosEx>
 80110f8:	9b01      	ldr	r3, [sp, #4]
 80110fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80110fe:	1ac0      	subs	r0, r0, r3
 8011100:	9b02      	ldr	r3, [sp, #8]
 8011102:	9009      	str	r0, [sp, #36]	; 0x24
 8011104:	1ac9      	subs	r1, r1, r3
 8011106:	682b      	ldr	r3, [r5, #0]
 8011108:	910a      	str	r1, [sp, #40]	; 0x28
 801110a:	220c      	movs	r2, #12
 801110c:	435a      	muls	r2, r3
 801110e:	18bb      	adds	r3, r7, r2
 8011110:	58ba      	ldr	r2, [r7, r2]
 8011112:	4282      	cmp	r2, r0
 8011114:	d108      	bne.n	8011128 <WM_HandlePID+0xc0>
 8011116:	685a      	ldr	r2, [r3, #4]
 8011118:	428a      	cmp	r2, r1
 801111a:	d105      	bne.n	8011128 <WM_HandlePID+0xc0>
 801111c:	7a1a      	ldrb	r2, [r3, #8]
 801111e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011122:	429a      	cmp	r2, r3
 8011124:	f000 8156 	beq.w	80113d4 <WM_HandlePID+0x36c>
 8011128:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801112c:	f001 f8c2 	bl	80122b4 <GUI_CURSOR_SetPositionEx>
 8011130:	4b89      	ldr	r3, [pc, #548]	; (8011358 <WM_HandlePID+0x2f0>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	b113      	cbz	r3, 801113c <WM_HandlePID+0xd4>
 8011136:	4620      	mov	r0, r4
 8011138:	2100      	movs	r1, #0
 801113a:	4798      	blx	r3
 801113c:	682b      	ldr	r3, [r5, #0]
 801113e:	4a87      	ldr	r2, [pc, #540]	; (801135c <WM_HandlePID+0x2f4>)
 8011140:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011144:	b918      	cbnz	r0, 801114e <WM_HandlePID+0xe6>
 8011146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011148:	990a      	ldr	r1, [sp, #40]	; 0x28
 801114a:	f000 f9a7 	bl	801149c <WM_Screen2hWin>
 801114e:	4b84      	ldr	r3, [pc, #528]	; (8011360 <WM_HandlePID+0x2f8>)
 8011150:	9005      	str	r0, [sp, #20]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	b113      	cbz	r3, 801115c <WM_HandlePID+0xf4>
 8011156:	9905      	ldr	r1, [sp, #20]
 8011158:	4620      	mov	r0, r4
 801115a:	4798      	blx	r3
 801115c:	4981      	ldr	r1, [pc, #516]	; (8011364 <WM_HandlePID+0x2fc>)
 801115e:	682b      	ldr	r3, [r5, #0]
 8011160:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8011348 <WM_HandlePID+0x2e0>
 8011164:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8011168:	4688      	mov	r8, r1
 801116a:	685a      	ldr	r2, [r3, #4]
 801116c:	9805      	ldr	r0, [sp, #20]
 801116e:	b312      	cbz	r2, 80111b6 <WM_HandlePID+0x14e>
 8011170:	4282      	cmp	r2, r0
 8011172:	d020      	beq.n	80111b6 <WM_HandlePID+0x14e>
 8011174:	6858      	ldr	r0, [r3, #4]
 8011176:	f7ff ff0b 	bl	8010f90 <WM__IsInModalArea>
 801117a:	b1e0      	cbz	r0, 80111b6 <WM_HandlePID+0x14e>
 801117c:	f8d9 3000 	ldr.w	r3, [r9]
 8011180:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011184:	6858      	ldr	r0, [r3, #4]
 8011186:	f7f9 fa6f 	bl	800a668 <WM__IsEnabled>
 801118a:	b1a0      	cbz	r0, 80111b6 <WM_HandlePID+0x14e>
 801118c:	2312      	movs	r3, #18
 801118e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011192:	9312      	str	r3, [sp, #72]	; 0x48
 8011194:	f8d9 3000 	ldr.w	r3, [r9]
 8011198:	9615      	str	r6, [sp, #84]	; 0x54
 801119a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801119e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80111a2:	6858      	ldr	r0, [r3, #4]
 80111a4:	a912      	add	r1, sp, #72	; 0x48
 80111a6:	f7ff ff41 	bl	801102c <WM__SendTouchMessage>
 80111aa:	f8d9 3000 	ldr.w	r3, [r9]
 80111ae:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80111b2:	2200      	movs	r2, #0
 80111b4:	605a      	str	r2, [r3, #4]
 80111b6:	9805      	ldr	r0, [sp, #20]
 80111b8:	f7ff feea 	bl	8010f90 <WM__IsInModalArea>
 80111bc:	b908      	cbnz	r0, 80111c2 <WM_HandlePID+0x15a>
 80111be:	2600      	movs	r6, #0
 80111c0:	e0fb      	b.n	80113ba <WM_HandlePID+0x352>
 80111c2:	682b      	ldr	r3, [r5, #0]
 80111c4:	9905      	ldr	r1, [sp, #20]
 80111c6:	f8df a180 	ldr.w	sl, [pc, #384]	; 8011348 <WM_HandlePID+0x2e0>
 80111ca:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801134c <WM_HandlePID+0x2e4>
 80111ce:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80111d2:	f04f 080c 	mov.w	r8, #12
 80111d6:	fb08 7303 	mla	r3, r8, r3, r7
 80111da:	6051      	str	r1, [r2, #4]
 80111dc:	7a1a      	ldrb	r2, [r3, #8]
 80111de:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d062      	beq.n	80112ac <WM_HandlePID+0x244>
 80111e6:	9b05      	ldr	r3, [sp, #20]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d05f      	beq.n	80112ac <WM_HandlePID+0x244>
 80111ec:	9805      	ldr	r0, [sp, #20]
 80111ee:	f7ff f807 	bl	8010200 <GUI_ALLOC_LockH>
 80111f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80111f6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80111fa:	f8da 3000 	ldr.w	r3, [sl]
 80111fe:	9003      	str	r0, [sp, #12]
 8011200:	fb08 9303 	mla	r3, r8, r3, r9
 8011204:	7a1b      	ldrb	r3, [r3, #8]
 8011206:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
 801120a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801120e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011210:	1a9b      	subs	r3, r3, r2
 8011212:	930f      	str	r3, [sp, #60]	; 0x3c
 8011214:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801121a:	eb0d 0008 	add.w	r0, sp, r8
 801121e:	1a9b      	subs	r3, r3, r2
 8011220:	9310      	str	r3, [sp, #64]	; 0x40
 8011222:	f7fe fffb 	bl	801021c <GUI_ALLOC_UnlockH>
 8011226:	f8da e000 	ldr.w	lr, [sl]
 801122a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8011368 <WM_HandlePID+0x300>
 801122e:	ab0f      	add	r3, sp, #60	; 0x3c
 8011230:	9315      	str	r3, [sp, #84]	; 0x54
 8011232:	2311      	movs	r3, #17
 8011234:	9312      	str	r3, [sp, #72]	; 0x48
 8011236:	fb08 930e 	mla	r3, r8, lr, r9
 801123a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801123e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8011242:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011246:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 801124a:	721a      	strb	r2, [r3, #8]
 801124c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8011250:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011254:	b133      	cbz	r3, 8011264 <WM_HandlePID+0x1fc>
 8011256:	eb0a 030e 	add.w	r3, sl, lr
 801125a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801125e:	9a05      	ldr	r2, [sp, #20]
 8011260:	605a      	str	r2, [r3, #4]
 8011262:	e000      	b.n	8011266 <WM_HandlePID+0x1fe>
 8011264:	4699      	mov	r9, r3
 8011266:	eb0a 030e 	add.w	r3, sl, lr
 801126a:	a912      	add	r1, sp, #72	; 0x48
 801126c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8011270:	9805      	ldr	r0, [sp, #20]
 8011272:	f001 f884 	bl	801237e <WM__SendMessageIfEnabled>
 8011276:	682b      	ldr	r3, [r5, #0]
 8011278:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 801127c:	6851      	ldr	r1, [r2, #4]
 801127e:	458b      	cmp	fp, r1
 8011280:	bf1c      	itt	ne
 8011282:	6852      	ldrne	r2, [r2, #4]
 8011284:	9205      	strne	r2, [sp, #20]
 8011286:	220c      	movs	r2, #12
 8011288:	fb02 7303 	mla	r3, r2, r3, r7
 801128c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8011290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011294:	f1b9 0f00 	cmp.w	r9, #0
 8011298:	d008      	beq.n	80112ac <WM_HandlePID+0x244>
 801129a:	4648      	mov	r0, r9
 801129c:	f7f9 fa1a 	bl	800a6d4 <WM_IsWindow>
 80112a0:	b120      	cbz	r0, 80112ac <WM_HandlePID+0x244>
 80112a2:	682b      	ldr	r3, [r5, #0]
 80112a4:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 80112a8:	f8c3 9004 	str.w	r9, [r3, #4]
 80112ac:	682a      	ldr	r2, [r5, #0]
 80112ae:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80112b2:	210c      	movs	r1, #12
 80112b4:	4351      	muls	r1, r2
 80112b6:	1878      	adds	r0, r7, r1
 80112b8:	f890 8008 	ldrb.w	r8, [r0, #8]
 80112bc:	ea53 0808 	orrs.w	r8, r3, r8
 80112c0:	d064      	beq.n	801138c <WM_HandlePID+0x324>
 80112c2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8011368 <WM_HandlePID+0x300>
 80112c6:	f44f 7e10 	mov.w	lr, #576	; 0x240
 80112ca:	00d2      	lsls	r2, r2, #3
 80112cc:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80112d0:	eb08 0e02 	add.w	lr, r8, r2
 80112d4:	f8de 9004 	ldr.w	r9, [lr, #4]
 80112d8:	f8dd c014 	ldr.w	ip, [sp, #20]
 80112dc:	45e1      	cmp	r9, ip
 80112de:	d01c      	beq.n	801131a <WM_HandlePID+0x2b2>
 80112e0:	f8de e004 	ldr.w	lr, [lr, #4]
 80112e4:	f1be 0f00 	cmp.w	lr, #0
 80112e8:	d017      	beq.n	801131a <WM_HandlePID+0x2b2>
 80112ea:	b113      	cbz	r3, 80112f2 <WM_HandlePID+0x28a>
 80112ec:	2300      	movs	r3, #0
 80112ee:	9315      	str	r3, [sp, #84]	; 0x54
 80112f0:	e009      	b.n	8011306 <WM_HandlePID+0x29e>
 80112f2:	f8df e058 	ldr.w	lr, [pc, #88]	; 801134c <WM_HandlePID+0x2e4>
 80112f6:	f88d 3020 	strb.w	r3, [sp, #32]
 80112fa:	f85e 1001 	ldr.w	r1, [lr, r1]
 80112fe:	9106      	str	r1, [sp, #24]
 8011300:	6841      	ldr	r1, [r0, #4]
 8011302:	9107      	str	r1, [sp, #28]
 8011304:	9615      	str	r6, [sp, #84]	; 0x54
 8011306:	4442      	add	r2, r8
 8011308:	a912      	add	r1, sp, #72	; 0x48
 801130a:	6850      	ldr	r0, [r2, #4]
 801130c:	f7ff fe8e 	bl	801102c <WM__SendTouchMessage>
 8011310:	682b      	ldr	r3, [r5, #0]
 8011312:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011316:	2200      	movs	r2, #0
 8011318:	605a      	str	r2, [r3, #4]
 801131a:	682b      	ldr	r3, [r5, #0]
 801131c:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
 8011320:	220c      	movs	r2, #12
 8011322:	fb02 7203 	mla	r2, r2, r3, r7
 8011326:	f882 e008 	strb.w	lr, [r2, #8]
 801132a:	9a05      	ldr	r2, [sp, #20]
 801132c:	2a00      	cmp	r2, #0
 801132e:	d043      	beq.n	80113b8 <WM_HandlePID+0x350>
 8011330:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011334:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8011338:	f1be 0f00 	cmp.w	lr, #0
 801133c:	d016      	beq.n	801136c <WM_HandlePID+0x304>
 801133e:	9a05      	ldr	r2, [sp, #20]
 8011340:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8011344:	e01b      	b.n	801137e <WM_HandlePID+0x316>
 8011346:	bf00      	nop
 8011348:	20026ce4 	.word	0x20026ce4
 801134c:	20026964 	.word	0x20026964
 8011350:	20026d2c 	.word	0x20026d2c
 8011354:	20026d20 	.word	0x20026d20
 8011358:	2002695c 	.word	0x2002695c
 801135c:	20026d00 	.word	0x20026d00
 8011360:	20026960 	.word	0x20026960
 8011364:	20026e14 	.word	0x20026e14
 8011368:	20026e24 	.word	0x20026e24
 801136c:	4b1d      	ldr	r3, [pc, #116]	; (80113e4 <WM_HandlePID+0x37c>)
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	b10b      	cbz	r3, 8011376 <WM_HandlePID+0x30e>
 8011372:	f7f9 f9ad 	bl	800a6d0 <WM_ReleaseCapture>
 8011376:	682b      	ldr	r3, [r5, #0]
 8011378:	2200      	movs	r2, #0
 801137a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801137e:	605a      	str	r2, [r3, #4]
 8011380:	9805      	ldr	r0, [sp, #20]
 8011382:	9615      	str	r6, [sp, #84]	; 0x54
 8011384:	a912      	add	r1, sp, #72	; 0x48
 8011386:	f7ff fe51 	bl	801102c <WM__SendTouchMessage>
 801138a:	e015      	b.n	80113b8 <WM_HandlePID+0x350>
 801138c:	9b05      	ldr	r3, [sp, #20]
 801138e:	2b00      	cmp	r3, #0
 8011390:	f43f af15 	beq.w	80111be <WM_HandlePID+0x156>
 8011394:	9805      	ldr	r0, [sp, #20]
 8011396:	f7f9 f967 	bl	800a668 <WM__IsEnabled>
 801139a:	2800      	cmp	r0, #0
 801139c:	f43f af0f 	beq.w	80111be <WM_HandlePID+0x156>
 80113a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80113a4:	2310      	movs	r3, #16
 80113a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80113aa:	9805      	ldr	r0, [sp, #20]
 80113ac:	9312      	str	r3, [sp, #72]	; 0x48
 80113ae:	a912      	add	r1, sp, #72	; 0x48
 80113b0:	9615      	str	r6, [sp, #84]	; 0x54
 80113b2:	f7ff fe3b 	bl	801102c <WM__SendTouchMessage>
 80113b6:	e702      	b.n	80111be <WM_HandlePID+0x156>
 80113b8:	2601      	movs	r6, #1
 80113ba:	682b      	ldr	r3, [r5, #0]
 80113bc:	220c      	movs	r2, #12
 80113be:	fb02 7703 	mla	r7, r2, r3, r7
 80113c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80113c6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80113ca:	4620      	mov	r0, r4
 80113cc:	4619      	mov	r1, r3
 80113ce:	f000 f875 	bl	80114bc <WM_PID__SetPrevState>
 80113d2:	e000      	b.n	80113d6 <WM_HandlePID+0x36e>
 80113d4:	2600      	movs	r6, #0
 80113d6:	a804      	add	r0, sp, #16
 80113d8:	f000 f89e 	bl	8011518 <WM__RemoveCriticalHandle>
 80113dc:	4630      	mov	r0, r6
 80113de:	b017      	add	sp, #92	; 0x5c
 80113e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e4:	20026ce8 	.word	0x20026ce8

080113e8 <WM_SendToParent>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4605      	mov	r5, r0
 80113ec:	460c      	mov	r4, r1
 80113ee:	b141      	cbz	r1, 8011402 <WM_SendToParent+0x1a>
 80113f0:	f7f9 f972 	bl	800a6d8 <WM_GetParent>
 80113f4:	b128      	cbz	r0, 8011402 <WM_SendToParent+0x1a>
 80113f6:	60a5      	str	r5, [r4, #8]
 80113f8:	4621      	mov	r1, r4
 80113fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113fe:	f7f9 b915 	b.w	800a62c <WM__SendMessage>
 8011402:	bd38      	pop	{r3, r4, r5, pc}

08011404 <WM__IsInWindow>:
 8011404:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011406:	f013 0302 	ands.w	r3, r3, #2
 801140a:	d012      	beq.n	8011432 <WM__IsInWindow+0x2e>
 801140c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011410:	4299      	cmp	r1, r3
 8011412:	db10      	blt.n	8011436 <WM__IsInWindow+0x32>
 8011414:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011418:	4299      	cmp	r1, r3
 801141a:	dc0c      	bgt.n	8011436 <WM__IsInWindow+0x32>
 801141c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8011420:	429a      	cmp	r2, r3
 8011422:	db08      	blt.n	8011436 <WM__IsInWindow+0x32>
 8011424:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8011428:	4282      	cmp	r2, r0
 801142a:	bfcc      	ite	gt
 801142c:	2000      	movgt	r0, #0
 801142e:	2001      	movle	r0, #1
 8011430:	4770      	bx	lr
 8011432:	4618      	mov	r0, r3
 8011434:	4770      	bx	lr
 8011436:	2000      	movs	r0, #0
 8011438:	4770      	bx	lr

0801143a <_Screen2hWin>:
 801143a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801143e:	460e      	mov	r6, r1
 8011440:	4617      	mov	r7, r2
 8011442:	4698      	mov	r8, r3
 8011444:	4605      	mov	r5, r0
 8011446:	b320      	cbz	r0, 8011492 <_Screen2hWin+0x58>
 8011448:	f7fe feda 	bl	8010200 <GUI_ALLOC_LockH>
 801144c:	4639      	mov	r1, r7
 801144e:	4642      	mov	r2, r8
 8011450:	4604      	mov	r4, r0
 8011452:	9001      	str	r0, [sp, #4]
 8011454:	f7ff ffd6 	bl	8011404 <WM__IsInWindow>
 8011458:	4681      	mov	r9, r0
 801145a:	b920      	cbnz	r0, 8011466 <_Screen2hWin+0x2c>
 801145c:	a801      	add	r0, sp, #4
 801145e:	f7fe fedd 	bl	801021c <GUI_ALLOC_UnlockH>
 8011462:	4648      	mov	r0, r9
 8011464:	e016      	b.n	8011494 <_Screen2hWin+0x5a>
 8011466:	69e4      	ldr	r4, [r4, #28]
 8011468:	b91c      	cbnz	r4, 8011472 <_Screen2hWin+0x38>
 801146a:	a801      	add	r0, sp, #4
 801146c:	f7fe fed6 	bl	801021c <GUI_ALLOC_UnlockH>
 8011470:	e00f      	b.n	8011492 <_Screen2hWin+0x58>
 8011472:	42b4      	cmp	r4, r6
 8011474:	d0f9      	beq.n	801146a <_Screen2hWin+0x30>
 8011476:	4620      	mov	r0, r4
 8011478:	4631      	mov	r1, r6
 801147a:	463a      	mov	r2, r7
 801147c:	4643      	mov	r3, r8
 801147e:	f7ff ffdc 	bl	801143a <_Screen2hWin>
 8011482:	2800      	cmp	r0, #0
 8011484:	bf18      	it	ne
 8011486:	4605      	movne	r5, r0
 8011488:	4620      	mov	r0, r4
 801148a:	f7fe feaf 	bl	80101ec <GUI_ALLOC_h2p>
 801148e:	6a04      	ldr	r4, [r0, #32]
 8011490:	e7ea      	b.n	8011468 <_Screen2hWin+0x2e>
 8011492:	4628      	mov	r0, r5
 8011494:	b003      	add	sp, #12
 8011496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801149c <WM_Screen2hWin>:
 801149c:	b570      	push	{r4, r5, r6, lr}
 801149e:	4b06      	ldr	r3, [pc, #24]	; (80114b8 <WM_Screen2hWin+0x1c>)
 80114a0:	460c      	mov	r4, r1
 80114a2:	4605      	mov	r5, r0
 80114a4:	6818      	ldr	r0, [r3, #0]
 80114a6:	f000 f813 	bl	80114d0 <WM_GetDesktopWindowEx>
 80114aa:	462a      	mov	r2, r5
 80114ac:	4623      	mov	r3, r4
 80114ae:	2100      	movs	r1, #0
 80114b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114b4:	f7ff bfc1 	b.w	801143a <_Screen2hWin>
 80114b8:	20026ce4 	.word	0x20026ce4

080114bc <WM_PID__SetPrevState>:
 80114bc:	4b03      	ldr	r3, [pc, #12]	; (80114cc <WM_PID__SetPrevState+0x10>)
 80114be:	220c      	movs	r2, #12
 80114c0:	fb02 3301 	mla	r3, r2, r1, r3
 80114c4:	c807      	ldmia	r0, {r0, r1, r2}
 80114c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80114ca:	4770      	bx	lr
 80114cc:	2002697c 	.word	0x2002697c

080114d0 <WM_GetDesktopWindowEx>:
 80114d0:	2801      	cmp	r0, #1
 80114d2:	bf9a      	itte	ls
 80114d4:	4b02      	ldrls	r3, [pc, #8]	; (80114e0 <WM_GetDesktopWindowEx+0x10>)
 80114d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80114da:	2000      	movhi	r0, #0
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	20026cc4 	.word	0x20026cc4

080114e4 <WM__GetClientRectEx>:
 80114e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114e6:	460d      	mov	r5, r1
 80114e8:	b158      	cbz	r0, 8011502 <WM__GetClientRectEx+0x1e>
 80114ea:	b151      	cbz	r1, 8011502 <WM__GetClientRectEx+0x1e>
 80114ec:	f7fe fe88 	bl	8010200 <GUI_ALLOC_LockH>
 80114f0:	ac02      	add	r4, sp, #8
 80114f2:	4629      	mov	r1, r5
 80114f4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80114f8:	f7f9 fbe9 	bl	800acce <WM__GetClientRectWin>
 80114fc:	4620      	mov	r0, r4
 80114fe:	f7fe fe8d 	bl	801021c <GUI_ALLOC_UnlockH>
 8011502:	b003      	add	sp, #12
 8011504:	bd30      	pop	{r4, r5, pc}
	...

08011508 <WM__AddCriticalHandle>:
 8011508:	4b02      	ldr	r3, [pc, #8]	; (8011514 <WM__AddCriticalHandle+0xc>)
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	6002      	str	r2, [r0, #0]
 801150e:	6018      	str	r0, [r3, #0]
 8011510:	4770      	bx	lr
 8011512:	bf00      	nop
 8011514:	20026cf8 	.word	0x20026cf8

08011518 <WM__RemoveCriticalHandle>:
 8011518:	4a09      	ldr	r2, [pc, #36]	; (8011540 <WM__RemoveCriticalHandle+0x28>)
 801151a:	6813      	ldr	r3, [r2, #0]
 801151c:	b510      	push	{r4, lr}
 801151e:	4614      	mov	r4, r2
 8011520:	b16b      	cbz	r3, 801153e <WM__RemoveCriticalHandle+0x26>
 8011522:	2200      	movs	r2, #0
 8011524:	4283      	cmp	r3, r0
 8011526:	d105      	bne.n	8011534 <WM__RemoveCriticalHandle+0x1c>
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	b10a      	cbz	r2, 8011530 <WM__RemoveCriticalHandle+0x18>
 801152c:	6013      	str	r3, [r2, #0]
 801152e:	bd10      	pop	{r4, pc}
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	bd10      	pop	{r4, pc}
 8011534:	6819      	ldr	r1, [r3, #0]
 8011536:	b111      	cbz	r1, 801153e <WM__RemoveCriticalHandle+0x26>
 8011538:	461a      	mov	r2, r3
 801153a:	460b      	mov	r3, r1
 801153c:	e7f2      	b.n	8011524 <WM__RemoveCriticalHandle+0xc>
 801153e:	bd10      	pop	{r4, pc}
 8011540:	20026cf8 	.word	0x20026cf8

08011544 <WM_BringToBottom>:
 8011544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011548:	4604      	mov	r4, r0
 801154a:	b087      	sub	sp, #28
 801154c:	2800      	cmp	r0, #0
 801154e:	d039      	beq.n	80115c4 <WM_BringToBottom+0x80>
 8011550:	f7fe fe56 	bl	8010200 <GUI_ALLOC_LockH>
 8011554:	4603      	mov	r3, r0
 8011556:	9001      	str	r0, [sp, #4]
 8011558:	c803      	ldmia	r0, {r0, r1}
 801155a:	ad04      	add	r5, sp, #16
 801155c:	e885 0003 	stmia.w	r5, {r0, r1}
 8011560:	a801      	add	r0, sp, #4
 8011562:	6a1e      	ldr	r6, [r3, #32]
 8011564:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8011568:	f7fe fe58 	bl	801021c <GUI_ALLOC_UnlockH>
 801156c:	4620      	mov	r0, r4
 801156e:	f7ff fcf2 	bl	8010f56 <WM__GetPrevSibling>
 8011572:	4607      	mov	r7, r0
 8011574:	b330      	cbz	r0, 80115c4 <WM_BringToBottom+0x80>
 8011576:	4620      	mov	r0, r4
 8011578:	f7f9 f8ae 	bl	800a6d8 <WM_GetParent>
 801157c:	f019 0f02 	tst.w	r9, #2
 8011580:	4680      	mov	r8, r0
 8011582:	d004      	beq.n	801158e <WM_BringToBottom+0x4a>
 8011584:	4628      	mov	r0, r5
 8011586:	4641      	mov	r1, r8
 8011588:	4632      	mov	r2, r6
 801158a:	f7f9 fb92 	bl	800acb2 <WM__InvalidateRectEx>
 801158e:	4620      	mov	r0, r4
 8011590:	f7fe fe36 	bl	8010200 <GUI_ALLOC_LockH>
 8011594:	9001      	str	r0, [sp, #4]
 8011596:	4640      	mov	r0, r8
 8011598:	f7fe fe32 	bl	8010200 <GUI_ALLOC_LockH>
 801159c:	9003      	str	r0, [sp, #12]
 801159e:	4638      	mov	r0, r7
 80115a0:	f7fe fe2e 	bl	8010200 <GUI_ALLOC_LockH>
 80115a4:	9b03      	ldr	r3, [sp, #12]
 80115a6:	9a01      	ldr	r2, [sp, #4]
 80115a8:	69d9      	ldr	r1, [r3, #28]
 80115aa:	6206      	str	r6, [r0, #32]
 80115ac:	9002      	str	r0, [sp, #8]
 80115ae:	6211      	str	r1, [r2, #32]
 80115b0:	a801      	add	r0, sp, #4
 80115b2:	61dc      	str	r4, [r3, #28]
 80115b4:	f7fe fe32 	bl	801021c <GUI_ALLOC_UnlockH>
 80115b8:	a803      	add	r0, sp, #12
 80115ba:	f7fe fe2f 	bl	801021c <GUI_ALLOC_UnlockH>
 80115be:	a802      	add	r0, sp, #8
 80115c0:	f7fe fe2c 	bl	801021c <GUI_ALLOC_UnlockH>
 80115c4:	b007      	add	sp, #28
 80115c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080115cc <GUI_MEMDEV__WriteToActiveAlpha>:
 80115cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115d0:	b091      	sub	sp, #68	; 0x44
 80115d2:	460e      	mov	r6, r1
 80115d4:	4614      	mov	r4, r2
 80115d6:	900d      	str	r0, [sp, #52]	; 0x34
 80115d8:	f7fe fe12 	bl	8010200 <GUI_ALLOC_LockH>
 80115dc:	4602      	mov	r2, r0
 80115de:	a810      	add	r0, sp, #64	; 0x40
 80115e0:	6813      	ldr	r3, [r2, #0]
 80115e2:	4d5b      	ldr	r5, [pc, #364]	; (8011750 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	f840 2d08 	str.w	r2, [r0, #-8]!
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	f8b2 b008 	ldrh.w	fp, [r2, #8]
 80115f0:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 80115f4:	9309      	str	r3, [sp, #36]	; 0x24
 80115f6:	f7fe fe11 	bl	801021c <GUI_ALLOC_UnlockH>
 80115fa:	682b      	ldr	r3, [r5, #0]
 80115fc:	4f55      	ldr	r7, [pc, #340]	; (8011754 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 80115fe:	7c5b      	ldrb	r3, [r3, #17]
 8011600:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8011604:	68c3      	ldr	r3, [r0, #12]
 8011606:	2108      	movs	r1, #8
 8011608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801160a:	4798      	blx	r3
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	7c5b      	ldrb	r3, [r3, #17]
 8011610:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8011614:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011618:	2817      	cmp	r0, #23
 801161a:	bf88      	it	hi
 801161c:	2020      	movhi	r0, #32
 801161e:	9008      	str	r0, [sp, #32]
 8011620:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011624:	f8d8 2000 	ldr.w	r2, [r8]
 8011628:	910a      	str	r1, [sp, #40]	; 0x28
 801162a:	2000      	movs	r0, #0
 801162c:	920b      	str	r2, [sp, #44]	; 0x2c
 801162e:	f7fc f9d3 	bl	800d9d8 <GUI__AllocAlphaBuffer>
 8011632:	2800      	cmp	r0, #0
 8011634:	f040 8089 	bne.w	801174a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8011638:	682a      	ldr	r2, [r5, #0]
 801163a:	fa0f f78b 	sxth.w	r7, fp
 801163e:	19f5      	adds	r5, r6, r7
 8011640:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8011644:	3d01      	subs	r5, #1
 8011646:	1aed      	subs	r5, r5, r3
 8011648:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 801164c:	2d00      	cmp	r5, #0
 801164e:	bfcc      	ite	gt
 8011650:	ebc5 0507 	rsbgt	r5, r5, r7
 8011654:	463d      	movle	r5, r7
 8011656:	42b3      	cmp	r3, r6
 8011658:	bfc3      	ittte	gt
 801165a:	ebc6 0103 	rsbgt	r1, r6, r3
 801165e:	ebc1 0505 	rsbgt	r5, r1, r5
 8011662:	461e      	movgt	r6, r3
 8011664:	2100      	movle	r1, #0
 8011666:	2d00      	cmp	r5, #0
 8011668:	dd6f      	ble.n	801174a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801166a:	fa0f f389 	sxth.w	r3, r9
 801166e:	18e0      	adds	r0, r4, r3
 8011670:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 8011674:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8011678:	3801      	subs	r0, #1
 801167a:	ebcc 0000 	rsb	r0, ip, r0
 801167e:	2800      	cmp	r0, #0
 8011680:	bfc8      	it	gt
 8011682:	ebc0 0303 	rsbgt	r3, r0, r3
 8011686:	4294      	cmp	r4, r2
 8011688:	bfbd      	ittte	lt
 801168a:	ebc4 0a02 	rsblt	sl, r4, r2
 801168e:	ebca 0303 	rsblt	r3, sl, r3
 8011692:	4614      	movlt	r4, r2
 8011694:	f04f 0a00 	movge.w	sl, #0
 8011698:	2b00      	cmp	r3, #0
 801169a:	dd56      	ble.n	801174a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 801169c:	fb07 1a0a 	mla	sl, r7, sl, r1
 80116a0:	18e3      	adds	r3, r4, r3
 80116a2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80116a6:	930c      	str	r3, [sp, #48]	; 0x30
 80116a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80116aa:	f7f9 fea9 	bl	800b400 <GUI_MEMDEV_GetDataPtr>
 80116ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116b0:	9300      	str	r3, [sp, #0]
 80116b2:	ab0f      	add	r3, sp, #60	; 0x3c
 80116b4:	eb00 020a 	add.w	r2, r0, sl
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	4630      	mov	r0, r6
 80116bc:	4621      	mov	r1, r4
 80116be:	462b      	mov	r3, r5
 80116c0:	f7fc f8a4 	bl	800d80c <GUI__DoAlphaBlending>
 80116c4:	4681      	mov	r9, r0
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d03f      	beq.n	801174a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 80116ca:	4b23      	ldr	r3, [pc, #140]	; (8011758 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 80116cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80116ce:	4299      	cmp	r1, r3
 80116d0:	d01e      	beq.n	8011710 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80116d2:	4629      	mov	r1, r5
 80116d4:	9a08      	ldr	r2, [sp, #32]
 80116d6:	4643      	mov	r3, r8
 80116d8:	f000 fc83 	bl	8011fe2 <GUI__CompactPixelIndicesEx>
 80116dc:	b9c0      	cbnz	r0, 8011710 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80116de:	f8d8 c010 	ldr.w	ip, [r8, #16]
 80116e2:	f1bc 0f00 	cmp.w	ip, #0
 80116e6:	d006      	beq.n	80116f6 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 80116e8:	4648      	mov	r0, r9
 80116ea:	4649      	mov	r1, r9
 80116ec:	fa0f f28b 	sxth.w	r2, fp
 80116f0:	2304      	movs	r3, #4
 80116f2:	47e0      	blx	ip
 80116f4:	e00c      	b.n	8011710 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 80116f6:	464a      	mov	r2, r9
 80116f8:	463b      	mov	r3, r7
 80116fa:	6810      	ldr	r0, [r2, #0]
 80116fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80116fe:	9206      	str	r2, [sp, #24]
 8011700:	9307      	str	r3, [sp, #28]
 8011702:	4788      	blx	r1
 8011704:	9b07      	ldr	r3, [sp, #28]
 8011706:	9a06      	ldr	r2, [sp, #24]
 8011708:	3b01      	subs	r3, #1
 801170a:	f842 0b04 	str.w	r0, [r2], #4
 801170e:	d1f4      	bne.n	80116fa <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 8011710:	9a08      	ldr	r2, [sp, #32]
 8011712:	9202      	str	r2, [sp, #8]
 8011714:	2301      	movs	r3, #1
 8011716:	2200      	movs	r2, #0
 8011718:	f104 0c01 	add.w	ip, r4, #1
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	9301      	str	r3, [sp, #4]
 8011720:	9203      	str	r2, [sp, #12]
 8011722:	9205      	str	r2, [sp, #20]
 8011724:	f8cd 9010 	str.w	r9, [sp, #16]
 8011728:	4630      	mov	r0, r6
 801172a:	4621      	mov	r1, r4
 801172c:	462a      	mov	r2, r5
 801172e:	f8cd c01c 	str.w	ip, [sp, #28]
 8011732:	f7fb fcb7 	bl	800d0a4 <LCD_DrawBitmap>
 8011736:	2304      	movs	r3, #4
 8011738:	fb1b aa03 	smlabb	sl, fp, r3, sl
 801173c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011742:	459c      	cmp	ip, r3
 8011744:	d001      	beq.n	801174a <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 8011746:	4664      	mov	r4, ip
 8011748:	e7ae      	b.n	80116a8 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 801174a:	b011      	add	sp, #68	; 0x44
 801174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011750:	20000034 	.word	0x20000034
 8011754:	20026d44 	.word	0x20026d44
 8011758:	08010863 	.word	0x08010863

0801175c <GUI_USAGE_DecUseCnt>:
 801175c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801175e:	4605      	mov	r5, r0
 8011760:	f7fe fd4e 	bl	8010200 <GUI_ALLOC_LockH>
 8011764:	4602      	mov	r2, r0
 8011766:	a802      	add	r0, sp, #8
 8011768:	8994      	ldrh	r4, [r2, #12]
 801176a:	f840 2d04 	str.w	r2, [r0, #-4]!
 801176e:	3c01      	subs	r4, #1
 8011770:	b2a4      	uxth	r4, r4
 8011772:	8194      	strh	r4, [r2, #12]
 8011774:	f7fe fd52 	bl	801021c <GUI_ALLOC_UnlockH>
 8011778:	b914      	cbnz	r4, 8011780 <GUI_USAGE_DecUseCnt+0x24>
 801177a:	4628      	mov	r0, r5
 801177c:	f7fe fd6e 	bl	801025c <GUI_ALLOC_Free>
 8011780:	b003      	add	sp, #12
 8011782:	bd30      	pop	{r4, r5, pc}

08011784 <GUI_USAGE_AddRect>:
 8011784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011788:	4605      	mov	r5, r0
 801178a:	4688      	mov	r8, r1
 801178c:	4617      	mov	r7, r2
 801178e:	4699      	mov	r9, r3
 8011790:	68a8      	ldr	r0, [r5, #8]
 8011792:	464b      	mov	r3, r9
 8011794:	6846      	ldr	r6, [r0, #4]
 8011796:	4641      	mov	r1, r8
 8011798:	4628      	mov	r0, r5
 801179a:	1c54      	adds	r4, r2, #1
 801179c:	47b0      	blx	r6
 801179e:	9b08      	ldr	r3, [sp, #32]
 80117a0:	443b      	add	r3, r7
 80117a2:	42a3      	cmp	r3, r4
 80117a4:	d001      	beq.n	80117aa <GUI_USAGE_AddRect+0x26>
 80117a6:	4622      	mov	r2, r4
 80117a8:	e7f2      	b.n	8011790 <GUI_USAGE_AddRect+0xc>
 80117aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080117b0 <LCD_SelectLCD>:
 80117b0:	b510      	push	{r4, lr}
 80117b2:	4b0d      	ldr	r3, [pc, #52]	; (80117e8 <LCD_SelectLCD+0x38>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	7c51      	ldrb	r1, [r2, #17]
 80117b8:	4a0c      	ldr	r2, [pc, #48]	; (80117ec <LCD_SelectLCD+0x3c>)
 80117ba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80117be:	461c      	mov	r4, r3
 80117c0:	b140      	cbz	r0, 80117d4 <LCD_SelectLCD+0x24>
 80117c2:	68c3      	ldr	r3, [r0, #12]
 80117c4:	b113      	cbz	r3, 80117cc <LCD_SelectLCD+0x1c>
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	d001      	beq.n	80117d0 <LCD_SelectLCD+0x20>
 80117cc:	6800      	ldr	r0, [r0, #0]
 80117ce:	e7f7      	b.n	80117c0 <LCD_SelectLCD+0x10>
 80117d0:	f7fd fff4 	bl	800f7bc <GUI_DEVICE_Unlink>
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	2200      	movs	r2, #0
 80117d8:	661a      	str	r2, [r3, #96]	; 0x60
 80117da:	f103 0208 	add.w	r2, r3, #8
 80117de:	615a      	str	r2, [r3, #20]
 80117e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117e4:	f7fb bd6a 	b.w	800d2bc <LCD_SetClipRectMax>
 80117e8:	20000034 	.word	0x20000034
 80117ec:	20026d44 	.word	0x20026d44

080117f0 <LCD_ReadRectEx>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	b087      	sub	sp, #28
 80117f6:	4617      	mov	r7, r2
 80117f8:	9304      	str	r3, [sp, #16]
 80117fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80117fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80117fe:	68da      	ldr	r2, [r3, #12]
 8011800:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011802:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8011806:	4606      	mov	r6, r0
 8011808:	460d      	mov	r5, r1
 801180a:	b973      	cbnz	r3, 801182a <LCD_ReadRectEx+0x3a>
 801180c:	4b71      	ldr	r3, [pc, #452]	; (80119d4 <LCD_ReadRectEx+0x1e4>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	7c58      	ldrb	r0, [r3, #17]
 8011812:	f7fb fa47 	bl	800cca4 <GUI_GetBitsPerPixelEx>
 8011816:	2808      	cmp	r0, #8
 8011818:	4682      	mov	sl, r0
 801181a:	dd15      	ble.n	8011848 <LCD_ReadRectEx+0x58>
 801181c:	2810      	cmp	r0, #16
 801181e:	bfcc      	ite	gt
 8011820:	f04f 0904 	movgt.w	r9, #4
 8011824:	f04f 0902 	movle.w	r9, #2
 8011828:	e010      	b.n	801184c <LCD_ReadRectEx+0x5c>
 801182a:	a811      	add	r0, sp, #68	; 0x44
 801182c:	2101      	movs	r1, #1
 801182e:	4798      	blx	r3
 8011830:	4684      	mov	ip, r0
 8011832:	2800      	cmp	r0, #0
 8011834:	d0ea      	beq.n	801180c <LCD_ReadRectEx+0x1c>
 8011836:	9b04      	ldr	r3, [sp, #16]
 8011838:	9811      	ldr	r0, [sp, #68]	; 0x44
 801183a:	e88d 0018 	stmia.w	sp, {r3, r4}
 801183e:	4631      	mov	r1, r6
 8011840:	462a      	mov	r2, r5
 8011842:	463b      	mov	r3, r7
 8011844:	47e0      	blx	ip
 8011846:	e0c1      	b.n	80119cc <LCD_ReadRectEx+0x1dc>
 8011848:	f04f 0901 	mov.w	r9, #1
 801184c:	f04f 0b00 	mov.w	fp, #0
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	429d      	cmp	r5, r3
 8011854:	f300 80ba 	bgt.w	80119cc <LCD_ReadRectEx+0x1dc>
 8011858:	f1b9 0f02 	cmp.w	r9, #2
 801185c:	d009      	beq.n	8011872 <LCD_ReadRectEx+0x82>
 801185e:	f1b9 0f04 	cmp.w	r9, #4
 8011862:	d004      	beq.n	801186e <LCD_ReadRectEx+0x7e>
 8011864:	f1b9 0f01 	cmp.w	r9, #1
 8011868:	f040 80ae 	bne.w	80119c8 <LCD_ReadRectEx+0x1d8>
 801186c:	e003      	b.n	8011876 <LCD_ReadRectEx+0x86>
 801186e:	46b4      	mov	ip, r6
 8011870:	e09b      	b.n	80119aa <LCD_ReadRectEx+0x1ba>
 8011872:	46b4      	mov	ip, r6
 8011874:	e08a      	b.n	801198c <LCD_ReadRectEx+0x19c>
 8011876:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 801187a:	2a07      	cmp	r2, #7
 801187c:	f200 80a4 	bhi.w	80119c8 <LCD_ReadRectEx+0x1d8>
 8011880:	e8df f002 	tbb	[pc, r2]
 8011884:	0606080a 	.word	0x0606080a
 8011888:	04040404 	.word	0x04040404
 801188c:	46b4      	mov	ip, r6
 801188e:	e066      	b.n	801195e <LCD_ReadRectEx+0x16e>
 8011890:	46b4      	mov	ip, r6
 8011892:	e047      	b.n	8011924 <LCD_ReadRectEx+0x134>
 8011894:	46b4      	mov	ip, r6
 8011896:	e022      	b.n	80118de <LCD_ReadRectEx+0xee>
 8011898:	46b4      	mov	ip, r6
 801189a:	45bc      	cmp	ip, r7
 801189c:	f300 8094 	bgt.w	80119c8 <LCD_ReadRectEx+0x1d8>
 80118a0:	4661      	mov	r1, ip
 80118a2:	462a      	mov	r2, r5
 80118a4:	f8cd c00c 	str.w	ip, [sp, #12]
 80118a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80118aa:	47c0      	blx	r8
 80118ac:	f1cb 0207 	rsb	r2, fp, #7
 80118b0:	fa00 f202 	lsl.w	r2, r0, r2
 80118b4:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80118b8:	7820      	ldrb	r0, [r4, #0]
 80118ba:	fa41 f10b 	asr.w	r1, r1, fp
 80118be:	4001      	ands	r1, r0
 80118c0:	430a      	orrs	r2, r1
 80118c2:	7022      	strb	r2, [r4, #0]
 80118c4:	f10b 0301 	add.w	r3, fp, #1
 80118c8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80118cc:	f023 0207 	bic.w	r2, r3, #7
 80118d0:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80118d4:	fa43 fb02 	asr.w	fp, r3, r2
 80118d8:	f10c 0c01 	add.w	ip, ip, #1
 80118dc:	e7dd      	b.n	801189a <LCD_ReadRectEx+0xaa>
 80118de:	45bc      	cmp	ip, r7
 80118e0:	dc72      	bgt.n	80119c8 <LCD_ReadRectEx+0x1d8>
 80118e2:	4661      	mov	r1, ip
 80118e4:	462a      	mov	r2, r5
 80118e6:	f8cd c00c 	str.w	ip, [sp, #12]
 80118ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80118ec:	47c0      	blx	r8
 80118ee:	ea4f 024b 	mov.w	r2, fp, lsl #1
 80118f2:	f1c2 0106 	rsb	r1, r2, #6
 80118f6:	fa00 f101 	lsl.w	r1, r0, r1
 80118fa:	f64f 703f 	movw	r0, #65343	; 0xff3f
 80118fe:	fa40 f202 	asr.w	r2, r0, r2
 8011902:	7820      	ldrb	r0, [r4, #0]
 8011904:	4002      	ands	r2, r0
 8011906:	4311      	orrs	r1, r2
 8011908:	7021      	strb	r1, [r4, #0]
 801190a:	f10b 0301 	add.w	r3, fp, #1
 801190e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011912:	f023 0203 	bic.w	r2, r3, #3
 8011916:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 801191a:	fa43 fb02 	asr.w	fp, r3, r2
 801191e:	f10c 0c01 	add.w	ip, ip, #1
 8011922:	e7dc      	b.n	80118de <LCD_ReadRectEx+0xee>
 8011924:	45bc      	cmp	ip, r7
 8011926:	dc4f      	bgt.n	80119c8 <LCD_ReadRectEx+0x1d8>
 8011928:	4661      	mov	r1, ip
 801192a:	462a      	mov	r2, r5
 801192c:	f8cd c00c 	str.w	ip, [sp, #12]
 8011930:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011932:	47c0      	blx	r8
 8011934:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8011938:	f1c2 0104 	rsb	r1, r2, #4
 801193c:	fa00 f101 	lsl.w	r1, r0, r1
 8011940:	200f      	movs	r0, #15
 8011942:	fa00 f202 	lsl.w	r2, r0, r2
 8011946:	7820      	ldrb	r0, [r4, #0]
 8011948:	4002      	ands	r2, r0
 801194a:	4311      	orrs	r1, r2
 801194c:	7021      	strb	r1, [r4, #0]
 801194e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8011952:	445c      	add	r4, fp
 8011954:	f10c 0c01 	add.w	ip, ip, #1
 8011958:	f08b 0b01 	eor.w	fp, fp, #1
 801195c:	e7e2      	b.n	8011924 <LCD_ReadRectEx+0x134>
 801195e:	4273      	negs	r3, r6
 8011960:	1ba2      	subs	r2, r4, r6
 8011962:	45bc      	cmp	ip, r7
 8011964:	9305      	str	r3, [sp, #20]
 8011966:	4462      	add	r2, ip
 8011968:	dc0e      	bgt.n	8011988 <LCD_ReadRectEx+0x198>
 801196a:	4661      	mov	r1, ip
 801196c:	462a      	mov	r2, r5
 801196e:	f8cd c00c 	str.w	ip, [sp, #12]
 8011972:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011974:	47c0      	blx	r8
 8011976:	9a05      	ldr	r2, [sp, #20]
 8011978:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801197c:	4422      	add	r2, r4
 801197e:	f802 000c 	strb.w	r0, [r2, ip]
 8011982:	f10c 0c01 	add.w	ip, ip, #1
 8011986:	e7ea      	b.n	801195e <LCD_ReadRectEx+0x16e>
 8011988:	4614      	mov	r4, r2
 801198a:	e01d      	b.n	80119c8 <LCD_ReadRectEx+0x1d8>
 801198c:	45bc      	cmp	ip, r7
 801198e:	dc1b      	bgt.n	80119c8 <LCD_ReadRectEx+0x1d8>
 8011990:	4661      	mov	r1, ip
 8011992:	f8cd c00c 	str.w	ip, [sp, #12]
 8011996:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011998:	462a      	mov	r2, r5
 801199a:	47c0      	blx	r8
 801199c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80119a0:	f824 0b02 	strh.w	r0, [r4], #2
 80119a4:	f10c 0c01 	add.w	ip, ip, #1
 80119a8:	e7f0      	b.n	801198c <LCD_ReadRectEx+0x19c>
 80119aa:	45bc      	cmp	ip, r7
 80119ac:	dc0c      	bgt.n	80119c8 <LCD_ReadRectEx+0x1d8>
 80119ae:	4661      	mov	r1, ip
 80119b0:	f8cd c00c 	str.w	ip, [sp, #12]
 80119b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80119b6:	462a      	mov	r2, r5
 80119b8:	47c0      	blx	r8
 80119ba:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80119be:	f844 0b04 	str.w	r0, [r4], #4
 80119c2:	f10c 0c01 	add.w	ip, ip, #1
 80119c6:	e7f0      	b.n	80119aa <LCD_ReadRectEx+0x1ba>
 80119c8:	3501      	adds	r5, #1
 80119ca:	e741      	b.n	8011850 <LCD_ReadRectEx+0x60>
 80119cc:	b007      	add	sp, #28
 80119ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d2:	bf00      	nop
 80119d4:	20000034 	.word	0x20000034

080119d8 <GUI_ReadRectEx>:
 80119d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119da:	4d16      	ldr	r5, [pc, #88]	; (8011a34 <GUI_ReadRectEx+0x5c>)
 80119dc:	9e05      	ldr	r6, [sp, #20]
 80119de:	682d      	ldr	r5, [r5, #0]
 80119e0:	9c06      	ldr	r4, [sp, #24]
 80119e2:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 80119e6:	42b8      	cmp	r0, r7
 80119e8:	bfb8      	it	lt
 80119ea:	4638      	movlt	r0, r7
 80119ec:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 80119f0:	42ba      	cmp	r2, r7
 80119f2:	bfa8      	it	ge
 80119f4:	463a      	movge	r2, r7
 80119f6:	4282      	cmp	r2, r0
 80119f8:	db1b      	blt.n	8011a32 <GUI_ReadRectEx+0x5a>
 80119fa:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 80119fe:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8011a02:	42b9      	cmp	r1, r7
 8011a04:	bfb8      	it	lt
 8011a06:	4639      	movlt	r1, r7
 8011a08:	42ab      	cmp	r3, r5
 8011a0a:	bfa8      	it	ge
 8011a0c:	462b      	movge	r3, r5
 8011a0e:	428b      	cmp	r3, r1
 8011a10:	db0f      	blt.n	8011a32 <GUI_ReadRectEx+0x5a>
 8011a12:	68e5      	ldr	r5, [r4, #12]
 8011a14:	682d      	ldr	r5, [r5, #0]
 8011a16:	f035 0704 	bics.w	r7, r5, #4
 8011a1a:	d105      	bne.n	8011a28 <GUI_ReadRectEx+0x50>
 8011a1c:	9605      	str	r6, [sp, #20]
 8011a1e:	9406      	str	r4, [sp, #24]
 8011a20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011a24:	f7ff bee4 	b.w	80117f0 <LCD_ReadRectEx>
 8011a28:	6825      	ldr	r5, [r4, #0]
 8011a2a:	2d00      	cmp	r5, #0
 8011a2c:	d0f6      	beq.n	8011a1c <GUI_ReadRectEx+0x44>
 8011a2e:	462c      	mov	r4, r5
 8011a30:	e7ef      	b.n	8011a12 <GUI_ReadRectEx+0x3a>
 8011a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a34:	20000034 	.word	0x20000034

08011a38 <LCD_GetNumLayers>:
 8011a38:	b510      	push	{r4, lr}
 8011a3a:	2000      	movs	r0, #0
 8011a3c:	f7fd fe86 	bl	800f74c <GUI_DEVICE__GetpDriver>
 8011a40:	1c04      	adds	r4, r0, #0
 8011a42:	f04f 0001 	mov.w	r0, #1
 8011a46:	bf18      	it	ne
 8011a48:	2401      	movne	r4, #1
 8011a4a:	f7fd fe7f 	bl	800f74c <GUI_DEVICE__GetpDriver>
 8011a4e:	b100      	cbz	r0, 8011a52 <LCD_GetNumLayers+0x1a>
 8011a50:	3401      	adds	r4, #1
 8011a52:	4620      	mov	r0, r4
 8011a54:	bd10      	pop	{r4, pc}

08011a56 <GUI__sqrt32>:
 8011a56:	b510      	push	{r4, lr}
 8011a58:	2110      	movs	r1, #16
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011a60:	189c      	adds	r4, r3, r2
 8011a62:	4284      	cmp	r4, r0
 8011a64:	bf9c      	itt	ls
 8011a66:	18a3      	addls	r3, r4, r2
 8011a68:	ebc4 0000 	rsbls	r0, r4, r0
 8011a6c:	3901      	subs	r1, #1
 8011a6e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8011a72:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011a76:	d1f3      	bne.n	8011a60 <GUI__sqrt32+0xa>
 8011a78:	4618      	mov	r0, r3
 8011a7a:	bd10      	pop	{r4, pc}

08011a7c <GUI__ExpandPixelIndices>:
 8011a7c:	2a08      	cmp	r2, #8
 8011a7e:	b570      	push	{r4, r5, r6, lr}
 8011a80:	dd0d      	ble.n	8011a9e <GUI__ExpandPixelIndices+0x22>
 8011a82:	2a10      	cmp	r2, #16
 8011a84:	dd00      	ble.n	8011a88 <GUI__ExpandPixelIndices+0xc>
 8011a86:	bd70      	pop	{r4, r5, r6, pc}
 8011a88:	0049      	lsls	r1, r1, #1
 8011a8a:	4408      	add	r0, r1
 8011a8c:	1843      	adds	r3, r0, r1
 8011a8e:	1a41      	subs	r1, r0, r1
 8011a90:	f830 2d02 	ldrh.w	r2, [r0, #-2]!
 8011a94:	f843 2d04 	str.w	r2, [r3, #-4]!
 8011a98:	4288      	cmp	r0, r1
 8011a9a:	d1f9      	bne.n	8011a90 <GUI__ExpandPixelIndices+0x14>
 8011a9c:	bd70      	pop	{r4, r5, r6, pc}
 8011a9e:	3a01      	subs	r2, #1
 8011aa0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8011aa4:	2a07      	cmp	r2, #7
 8011aa6:	d856      	bhi.n	8011b56 <GUI__ExpandPixelIndices+0xda>
 8011aa8:	e8df f002 	tbb	[pc, r2]
 8011aac:	34341b04 	.word	0x34341b04
 8011ab0:	4c4c4c4c 	.word	0x4c4c4c4c
 8011ab4:	424a      	negs	r2, r1
 8011ab6:	1e4c      	subs	r4, r1, #1
 8011ab8:	f002 0207 	and.w	r2, r2, #7
 8011abc:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 8011ac0:	7805      	ldrb	r5, [r0, #0]
 8011ac2:	2401      	movs	r4, #1
 8011ac4:	4094      	lsls	r4, r2
 8011ac6:	402c      	ands	r4, r5
 8011ac8:	4114      	asrs	r4, r2
 8011aca:	3201      	adds	r2, #1
 8011acc:	f843 4d04 	str.w	r4, [r3, #-4]!
 8011ad0:	3901      	subs	r1, #1
 8011ad2:	f022 0407 	bic.w	r4, r2, #7
 8011ad6:	eba0 00e2 	sub.w	r0, r0, r2, asr #3
 8011ada:	fa42 f204 	asr.w	r2, r2, r4
 8011ade:	d1ef      	bne.n	8011ac0 <GUI__ExpandPixelIndices+0x44>
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
 8011ae2:	424a      	negs	r2, r1
 8011ae4:	1e4c      	subs	r4, r1, #1
 8011ae6:	f002 0203 	and.w	r2, r2, #3
 8011aea:	eb00 00a4 	add.w	r0, r0, r4, asr #2
 8011aee:	0054      	lsls	r4, r2, #1
 8011af0:	7806      	ldrb	r6, [r0, #0]
 8011af2:	2503      	movs	r5, #3
 8011af4:	40a5      	lsls	r5, r4
 8011af6:	4035      	ands	r5, r6
 8011af8:	3201      	adds	r2, #1
 8011afa:	fa45 f404 	asr.w	r4, r5, r4
 8011afe:	f843 4d04 	str.w	r4, [r3, #-4]!
 8011b02:	3901      	subs	r1, #1
 8011b04:	f022 0403 	bic.w	r4, r2, #3
 8011b08:	eba0 00a2 	sub.w	r0, r0, r2, asr #2
 8011b0c:	fa42 f204 	asr.w	r2, r2, r4
 8011b10:	d1ed      	bne.n	8011aee <GUI__ExpandPixelIndices+0x72>
 8011b12:	bd70      	pop	{r4, r5, r6, pc}
 8011b14:	1e4c      	subs	r4, r1, #1
 8011b16:	f001 0201 	and.w	r2, r1, #1
 8011b1a:	eb00 0064 	add.w	r0, r0, r4, asr #1
 8011b1e:	0094      	lsls	r4, r2, #2
 8011b20:	7806      	ldrb	r6, [r0, #0]
 8011b22:	250f      	movs	r5, #15
 8011b24:	40a5      	lsls	r5, r4
 8011b26:	4035      	ands	r5, r6
 8011b28:	3201      	adds	r2, #1
 8011b2a:	fa45 f404 	asr.w	r4, r5, r4
 8011b2e:	f843 4d04 	str.w	r4, [r3, #-4]!
 8011b32:	3901      	subs	r1, #1
 8011b34:	f022 0401 	bic.w	r4, r2, #1
 8011b38:	eba0 0062 	sub.w	r0, r0, r2, asr #1
 8011b3c:	fa42 f204 	asr.w	r2, r2, r4
 8011b40:	d1ed      	bne.n	8011b1e <GUI__ExpandPixelIndices+0xa2>
 8011b42:	bd70      	pop	{r4, r5, r6, pc}
 8011b44:	4408      	add	r0, r1
 8011b46:	1a41      	subs	r1, r0, r1
 8011b48:	f810 2d01 	ldrb.w	r2, [r0, #-1]!
 8011b4c:	f843 2d04 	str.w	r2, [r3, #-4]!
 8011b50:	4288      	cmp	r0, r1
 8011b52:	d1f9      	bne.n	8011b48 <GUI__ExpandPixelIndices+0xcc>
 8011b54:	bd70      	pop	{r4, r5, r6, pc}
 8011b56:	bd70      	pop	{r4, r5, r6, pc}

08011b58 <GUI__ExpandPixelIndicesEx>:
 8011b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b5c:	1e0c      	subs	r4, r1, #0
 8011b5e:	4605      	mov	r5, r0
 8011b60:	f340 80b3 	ble.w	8011cca <GUI__ExpandPixelIndicesEx+0x172>
 8011b64:	2a08      	cmp	r2, #8
 8011b66:	685f      	ldr	r7, [r3, #4]
 8011b68:	dd04      	ble.n	8011b74 <GUI__ExpandPixelIndicesEx+0x1c>
 8011b6a:	2a10      	cmp	r2, #16
 8011b6c:	f340 8098 	ble.w	8011ca0 <GUI__ExpandPixelIndicesEx+0x148>
 8011b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b74:	3a01      	subs	r2, #1
 8011b76:	2a07      	cmp	r2, #7
 8011b78:	f200 80a7 	bhi.w	8011cca <GUI__ExpandPixelIndicesEx+0x172>
 8011b7c:	e8df f002 	tbb	[pc, r2]
 8011b80:	58a52d04 	.word	0x58a52d04
 8011b84:	83a5a5a5 	.word	0x83a5a5a5
 8011b88:	1e66      	subs	r6, r4, #1
 8011b8a:	10f2      	asrs	r2, r6, #3
 8011b8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011b90:	3b01      	subs	r3, #1
 8011b92:	eb05 0802 	add.w	r8, r5, r2
 8011b96:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011b9a:	f006 0607 	and.w	r6, r6, #7
 8011b9e:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011ba2:	2580      	movs	r5, #128	; 0x80
 8011ba4:	4135      	asrs	r5, r6
 8011ba6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011baa:	b2ed      	uxtb	r5, r5
 8011bac:	f1c6 0307 	rsb	r3, r6, #7
 8011bb0:	ea0a 0005 	and.w	r0, sl, r5
 8011bb4:	4118      	asrs	r0, r3
 8011bb6:	47b8      	blx	r7
 8011bb8:	f849 0904 	str.w	r0, [r9], #-4
 8011bbc:	b936      	cbnz	r6, 8011bcc <GUI__ExpandPixelIndicesEx+0x74>
 8011bbe:	f898 a000 	ldrb.w	sl, [r8]
 8011bc2:	2501      	movs	r5, #1
 8011bc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011bc8:	2607      	movs	r6, #7
 8011bca:	e002      	b.n	8011bd2 <GUI__ExpandPixelIndicesEx+0x7a>
 8011bcc:	006d      	lsls	r5, r5, #1
 8011bce:	3e01      	subs	r6, #1
 8011bd0:	b2ed      	uxtb	r5, r5
 8011bd2:	3c01      	subs	r4, #1
 8011bd4:	d1ea      	bne.n	8011bac <GUI__ExpandPixelIndicesEx+0x54>
 8011bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bda:	1e66      	subs	r6, r4, #1
 8011bdc:	10b2      	asrs	r2, r6, #2
 8011bde:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011be2:	3b01      	subs	r3, #1
 8011be4:	f006 0603 	and.w	r6, r6, #3
 8011be8:	eb05 0802 	add.w	r8, r5, r2
 8011bec:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011bf0:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011bf4:	0073      	lsls	r3, r6, #1
 8011bf6:	25c0      	movs	r5, #192	; 0xc0
 8011bf8:	411d      	asrs	r5, r3
 8011bfa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011bfe:	b2ed      	uxtb	r5, r5
 8011c00:	0073      	lsls	r3, r6, #1
 8011c02:	f1c3 0306 	rsb	r3, r3, #6
 8011c06:	ea0a 0005 	and.w	r0, sl, r5
 8011c0a:	4118      	asrs	r0, r3
 8011c0c:	47b8      	blx	r7
 8011c0e:	f849 0904 	str.w	r0, [r9], #-4
 8011c12:	b936      	cbnz	r6, 8011c22 <GUI__ExpandPixelIndicesEx+0xca>
 8011c14:	2503      	movs	r5, #3
 8011c16:	f898 a000 	ldrb.w	sl, [r8]
 8011c1a:	462e      	mov	r6, r5
 8011c1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011c20:	e002      	b.n	8011c28 <GUI__ExpandPixelIndicesEx+0xd0>
 8011c22:	00ad      	lsls	r5, r5, #2
 8011c24:	3e01      	subs	r6, #1
 8011c26:	b2ed      	uxtb	r5, r5
 8011c28:	3c01      	subs	r4, #1
 8011c2a:	d1e9      	bne.n	8011c00 <GUI__ExpandPixelIndicesEx+0xa8>
 8011c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c30:	1e66      	subs	r6, r4, #1
 8011c32:	1072      	asrs	r2, r6, #1
 8011c34:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8011c38:	3b01      	subs	r3, #1
 8011c3a:	f006 0601 	and.w	r6, r6, #1
 8011c3e:	eb05 0802 	add.w	r8, r5, r2
 8011c42:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 8011c46:	f815 a002 	ldrb.w	sl, [r5, r2]
 8011c4a:	00b3      	lsls	r3, r6, #2
 8011c4c:	25f0      	movs	r5, #240	; 0xf0
 8011c4e:	411d      	asrs	r5, r3
 8011c50:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011c54:	b2ed      	uxtb	r5, r5
 8011c56:	00b3      	lsls	r3, r6, #2
 8011c58:	f1c3 0304 	rsb	r3, r3, #4
 8011c5c:	ea0a 0005 	and.w	r0, sl, r5
 8011c60:	4118      	asrs	r0, r3
 8011c62:	47b8      	blx	r7
 8011c64:	f849 0904 	str.w	r0, [r9], #-4
 8011c68:	b936      	cbnz	r6, 8011c78 <GUI__ExpandPixelIndicesEx+0x120>
 8011c6a:	f898 a000 	ldrb.w	sl, [r8]
 8011c6e:	250f      	movs	r5, #15
 8011c70:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011c74:	2601      	movs	r6, #1
 8011c76:	e002      	b.n	8011c7e <GUI__ExpandPixelIndicesEx+0x126>
 8011c78:	012d      	lsls	r5, r5, #4
 8011c7a:	b2ed      	uxtb	r5, r5
 8011c7c:	2600      	movs	r6, #0
 8011c7e:	3c01      	subs	r4, #1
 8011c80:	d1e9      	bne.n	8011c56 <GUI__ExpandPixelIndicesEx+0xfe>
 8011c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c86:	192e      	adds	r6, r5, r4
 8011c88:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8011c8c:	1b34      	subs	r4, r6, r4
 8011c8e:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8011c92:	47b8      	blx	r7
 8011c94:	42a6      	cmp	r6, r4
 8011c96:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011c9a:	d1f8      	bne.n	8011c8e <GUI__ExpandPixelIndicesEx+0x136>
 8011c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca0:	695e      	ldr	r6, [r3, #20]
 8011ca2:	b12e      	cbz	r6, 8011cb0 <GUI__ExpandPixelIndicesEx+0x158>
 8011ca4:	4629      	mov	r1, r5
 8011ca6:	4622      	mov	r2, r4
 8011ca8:	2302      	movs	r3, #2
 8011caa:	47b0      	blx	r6
 8011cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cb0:	0064      	lsls	r4, r4, #1
 8011cb2:	4425      	add	r5, r4
 8011cb4:	192e      	adds	r6, r5, r4
 8011cb6:	1b2c      	subs	r4, r5, r4
 8011cb8:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 8011cbc:	47b8      	blx	r7
 8011cbe:	42a5      	cmp	r5, r4
 8011cc0:	f846 0d04 	str.w	r0, [r6, #-4]!
 8011cc4:	d1f8      	bne.n	8011cb8 <GUI__ExpandPixelIndicesEx+0x160>
 8011cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011cce <GUI__CompactPixelIndices>:
 8011cce:	2a08      	cmp	r2, #8
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	dd0e      	ble.n	8011cf2 <GUI__CompactPixelIndices+0x24>
 8011cd4:	2a10      	cmp	r2, #16
 8011cd6:	dc0a      	bgt.n	8011cee <GUI__CompactPixelIndices+0x20>
 8011cd8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011cdc:	4603      	mov	r3, r0
 8011cde:	f850 2b04 	ldr.w	r2, [r0], #4
 8011ce2:	f823 2b02 	strh.w	r2, [r3], #2
 8011ce6:	428b      	cmp	r3, r1
 8011ce8:	d1f9      	bne.n	8011cde <GUI__CompactPixelIndices+0x10>
 8011cea:	2001      	movs	r0, #1
 8011cec:	bd10      	pop	{r4, pc}
 8011cee:	2000      	movs	r0, #0
 8011cf0:	bd10      	pop	{r4, pc}
 8011cf2:	2a02      	cmp	r2, #2
 8011cf4:	d06d      	beq.n	8011dd2 <GUI__CompactPixelIndices+0x104>
 8011cf6:	2a04      	cmp	r2, #4
 8011cf8:	d054      	beq.n	8011da4 <GUI__CompactPixelIndices+0xd6>
 8011cfa:	2a01      	cmp	r2, #1
 8011cfc:	f040 8095 	bne.w	8011e2a <GUI__CompactPixelIndices+0x15c>
 8011d00:	4604      	mov	r4, r0
 8011d02:	6803      	ldr	r3, [r0, #0]
 8011d04:	2901      	cmp	r1, #1
 8011d06:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	d047      	beq.n	8011d9e <GUI__CompactPixelIndices+0xd0>
 8011d0e:	6842      	ldr	r2, [r0, #4]
 8011d10:	2902      	cmp	r1, #2
 8011d12:	f002 0201 	and.w	r2, r2, #1
 8011d16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8011d1a:	d102      	bne.n	8011d22 <GUI__CompactPixelIndices+0x54>
 8011d1c:	f100 0208 	add.w	r2, r0, #8
 8011d20:	e03e      	b.n	8011da0 <GUI__CompactPixelIndices+0xd2>
 8011d22:	6882      	ldr	r2, [r0, #8]
 8011d24:	2903      	cmp	r1, #3
 8011d26:	f002 0201 	and.w	r2, r2, #1
 8011d2a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8011d2e:	d102      	bne.n	8011d36 <GUI__CompactPixelIndices+0x68>
 8011d30:	f100 020c 	add.w	r2, r0, #12
 8011d34:	e034      	b.n	8011da0 <GUI__CompactPixelIndices+0xd2>
 8011d36:	68c2      	ldr	r2, [r0, #12]
 8011d38:	2904      	cmp	r1, #4
 8011d3a:	f002 0201 	and.w	r2, r2, #1
 8011d3e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011d42:	d102      	bne.n	8011d4a <GUI__CompactPixelIndices+0x7c>
 8011d44:	f100 0210 	add.w	r2, r0, #16
 8011d48:	e02a      	b.n	8011da0 <GUI__CompactPixelIndices+0xd2>
 8011d4a:	6902      	ldr	r2, [r0, #16]
 8011d4c:	2905      	cmp	r1, #5
 8011d4e:	f002 0201 	and.w	r2, r2, #1
 8011d52:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8011d56:	d102      	bne.n	8011d5e <GUI__CompactPixelIndices+0x90>
 8011d58:	f100 0214 	add.w	r2, r0, #20
 8011d5c:	e020      	b.n	8011da0 <GUI__CompactPixelIndices+0xd2>
 8011d5e:	6942      	ldr	r2, [r0, #20]
 8011d60:	2906      	cmp	r1, #6
 8011d62:	f002 0201 	and.w	r2, r2, #1
 8011d66:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011d6a:	d102      	bne.n	8011d72 <GUI__CompactPixelIndices+0xa4>
 8011d6c:	f100 0218 	add.w	r2, r0, #24
 8011d70:	e016      	b.n	8011da0 <GUI__CompactPixelIndices+0xd2>
 8011d72:	6982      	ldr	r2, [r0, #24]
 8011d74:	3907      	subs	r1, #7
 8011d76:	f002 0201 	and.w	r2, r2, #1
 8011d7a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8011d7e:	d102      	bne.n	8011d86 <GUI__CompactPixelIndices+0xb8>
 8011d80:	f100 021c 	add.w	r2, r0, #28
 8011d84:	e005      	b.n	8011d92 <GUI__CompactPixelIndices+0xc4>
 8011d86:	f100 0220 	add.w	r2, r0, #32
 8011d8a:	69c0      	ldr	r0, [r0, #28]
 8011d8c:	f000 0001 	and.w	r0, r0, #1
 8011d90:	4303      	orrs	r3, r0
 8011d92:	f804 3b01 	strb.w	r3, [r4], #1
 8011d96:	2900      	cmp	r1, #0
 8011d98:	d0a7      	beq.n	8011cea <GUI__CompactPixelIndices+0x1c>
 8011d9a:	4610      	mov	r0, r2
 8011d9c:	e7b1      	b.n	8011d02 <GUI__CompactPixelIndices+0x34>
 8011d9e:	1d02      	adds	r2, r0, #4
 8011da0:	2100      	movs	r1, #0
 8011da2:	e7f6      	b.n	8011d92 <GUI__CompactPixelIndices+0xc4>
 8011da4:	4602      	mov	r2, r0
 8011da6:	6803      	ldr	r3, [r0, #0]
 8011da8:	2901      	cmp	r1, #1
 8011daa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	d102      	bne.n	8011db8 <GUI__CompactPixelIndices+0xea>
 8011db2:	1d04      	adds	r4, r0, #4
 8011db4:	2100      	movs	r1, #0
 8011db6:	e006      	b.n	8011dc6 <GUI__CompactPixelIndices+0xf8>
 8011db8:	f100 0408 	add.w	r4, r0, #8
 8011dbc:	6840      	ldr	r0, [r0, #4]
 8011dbe:	f000 000f 	and.w	r0, r0, #15
 8011dc2:	4303      	orrs	r3, r0
 8011dc4:	3902      	subs	r1, #2
 8011dc6:	f802 3b01 	strb.w	r3, [r2], #1
 8011dca:	2900      	cmp	r1, #0
 8011dcc:	d08d      	beq.n	8011cea <GUI__CompactPixelIndices+0x1c>
 8011dce:	4620      	mov	r0, r4
 8011dd0:	e7e9      	b.n	8011da6 <GUI__CompactPixelIndices+0xd8>
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	6803      	ldr	r3, [r0, #0]
 8011dd6:	2901      	cmp	r1, #1
 8011dd8:	ea4f 1383 	mov.w	r3, r3, lsl #6
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	d021      	beq.n	8011e24 <GUI__CompactPixelIndices+0x156>
 8011de0:	6842      	ldr	r2, [r0, #4]
 8011de2:	2902      	cmp	r1, #2
 8011de4:	f002 0203 	and.w	r2, r2, #3
 8011de8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8011dec:	d102      	bne.n	8011df4 <GUI__CompactPixelIndices+0x126>
 8011dee:	f100 0208 	add.w	r2, r0, #8
 8011df2:	e018      	b.n	8011e26 <GUI__CompactPixelIndices+0x158>
 8011df4:	6882      	ldr	r2, [r0, #8]
 8011df6:	2903      	cmp	r1, #3
 8011df8:	f002 0203 	and.w	r2, r2, #3
 8011dfc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8011e00:	d102      	bne.n	8011e08 <GUI__CompactPixelIndices+0x13a>
 8011e02:	f100 020c 	add.w	r2, r0, #12
 8011e06:	e00e      	b.n	8011e26 <GUI__CompactPixelIndices+0x158>
 8011e08:	f100 0210 	add.w	r2, r0, #16
 8011e0c:	68c0      	ldr	r0, [r0, #12]
 8011e0e:	f000 0003 	and.w	r0, r0, #3
 8011e12:	4303      	orrs	r3, r0
 8011e14:	3904      	subs	r1, #4
 8011e16:	f804 3b01 	strb.w	r3, [r4], #1
 8011e1a:	2900      	cmp	r1, #0
 8011e1c:	f43f af65 	beq.w	8011cea <GUI__CompactPixelIndices+0x1c>
 8011e20:	4610      	mov	r0, r2
 8011e22:	e7d7      	b.n	8011dd4 <GUI__CompactPixelIndices+0x106>
 8011e24:	1d02      	adds	r2, r0, #4
 8011e26:	2100      	movs	r1, #0
 8011e28:	e7f5      	b.n	8011e16 <GUI__CompactPixelIndices+0x148>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8011e30:	54c2      	strb	r2, [r0, r3]
 8011e32:	3301      	adds	r3, #1
 8011e34:	428b      	cmp	r3, r1
 8011e36:	d1f9      	bne.n	8011e2c <GUI__CompactPixelIndices+0x15e>
 8011e38:	e757      	b.n	8011cea <GUI__CompactPixelIndices+0x1c>

08011e3a <GUI__ConvertColor2Index>:
 8011e3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011e42:	681e      	ldr	r6, [r3, #0]
 8011e44:	f1b8 0f00 	cmp.w	r8, #0
 8011e48:	bf08      	it	eq
 8011e4a:	4680      	moveq	r8, r0
 8011e4c:	2a08      	cmp	r2, #8
 8011e4e:	4604      	mov	r4, r0
 8011e50:	460d      	mov	r5, r1
 8011e52:	dd05      	ble.n	8011e60 <GUI__ConvertColor2Index+0x26>
 8011e54:	2a10      	cmp	r2, #16
 8011e56:	f340 80b6 	ble.w	8011fc6 <GUI__ConvertColor2Index+0x18c>
 8011e5a:	2000      	movs	r0, #0
 8011e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e60:	3a01      	subs	r2, #1
 8011e62:	2a07      	cmp	r2, #7
 8011e64:	f200 80a4 	bhi.w	8011fb0 <GUI__ConvertColor2Index+0x176>
 8011e68:	e8df f002 	tbb	[pc, r2]
 8011e6c:	87a26111 	.word	0x87a26111
 8011e70:	92a2a2a2 	.word	0x92a2a2a2
 8011e74:	69e0      	ldr	r0, [r4, #28]
 8011e76:	47b0      	blx	r6
 8011e78:	4338      	orrs	r0, r7
 8011e7a:	f104 0920 	add.w	r9, r4, #32
 8011e7e:	b2c7      	uxtb	r7, r0
 8011e80:	3d08      	subs	r5, #8
 8011e82:	f808 7b01 	strb.w	r7, [r8], #1
 8011e86:	2d00      	cmp	r5, #0
 8011e88:	f000 8092 	beq.w	8011fb0 <GUI__ConvertColor2Index+0x176>
 8011e8c:	464c      	mov	r4, r9
 8011e8e:	6820      	ldr	r0, [r4, #0]
 8011e90:	47b0      	blx	r6
 8011e92:	2d01      	cmp	r5, #1
 8011e94:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 8011e98:	b2c7      	uxtb	r7, r0
 8011e9a:	f000 808c 	beq.w	8011fb6 <GUI__ConvertColor2Index+0x17c>
 8011e9e:	6860      	ldr	r0, [r4, #4]
 8011ea0:	47b0      	blx	r6
 8011ea2:	2d02      	cmp	r5, #2
 8011ea4:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 8011ea8:	b2c7      	uxtb	r7, r0
 8011eaa:	d102      	bne.n	8011eb2 <GUI__ConvertColor2Index+0x78>
 8011eac:	f104 0908 	add.w	r9, r4, #8
 8011eb0:	e083      	b.n	8011fba <GUI__ConvertColor2Index+0x180>
 8011eb2:	68a0      	ldr	r0, [r4, #8]
 8011eb4:	47b0      	blx	r6
 8011eb6:	2d03      	cmp	r5, #3
 8011eb8:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 8011ebc:	b2c7      	uxtb	r7, r0
 8011ebe:	d102      	bne.n	8011ec6 <GUI__ConvertColor2Index+0x8c>
 8011ec0:	f104 090c 	add.w	r9, r4, #12
 8011ec4:	e079      	b.n	8011fba <GUI__ConvertColor2Index+0x180>
 8011ec6:	68e0      	ldr	r0, [r4, #12]
 8011ec8:	47b0      	blx	r6
 8011eca:	2d04      	cmp	r5, #4
 8011ecc:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011ed0:	b2c7      	uxtb	r7, r0
 8011ed2:	d102      	bne.n	8011eda <GUI__ConvertColor2Index+0xa0>
 8011ed4:	f104 0910 	add.w	r9, r4, #16
 8011ed8:	e06f      	b.n	8011fba <GUI__ConvertColor2Index+0x180>
 8011eda:	6920      	ldr	r0, [r4, #16]
 8011edc:	47b0      	blx	r6
 8011ede:	2d05      	cmp	r5, #5
 8011ee0:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 8011ee4:	b2c7      	uxtb	r7, r0
 8011ee6:	d102      	bne.n	8011eee <GUI__ConvertColor2Index+0xb4>
 8011ee8:	f104 0914 	add.w	r9, r4, #20
 8011eec:	e065      	b.n	8011fba <GUI__ConvertColor2Index+0x180>
 8011eee:	6960      	ldr	r0, [r4, #20]
 8011ef0:	47b0      	blx	r6
 8011ef2:	2d06      	cmp	r5, #6
 8011ef4:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011ef8:	b2c7      	uxtb	r7, r0
 8011efa:	d102      	bne.n	8011f02 <GUI__ConvertColor2Index+0xc8>
 8011efc:	f104 0918 	add.w	r9, r4, #24
 8011f00:	e05b      	b.n	8011fba <GUI__ConvertColor2Index+0x180>
 8011f02:	69a0      	ldr	r0, [r4, #24]
 8011f04:	47b0      	blx	r6
 8011f06:	2d07      	cmp	r5, #7
 8011f08:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8011f0c:	b2c7      	uxtb	r7, r0
 8011f0e:	d1b1      	bne.n	8011e74 <GUI__ConvertColor2Index+0x3a>
 8011f10:	f104 091c 	add.w	r9, r4, #28
 8011f14:	e051      	b.n	8011fba <GUI__ConvertColor2Index+0x180>
 8011f16:	68e0      	ldr	r0, [r4, #12]
 8011f18:	47b0      	blx	r6
 8011f1a:	4338      	orrs	r0, r7
 8011f1c:	f104 0910 	add.w	r9, r4, #16
 8011f20:	b2c7      	uxtb	r7, r0
 8011f22:	3d04      	subs	r5, #4
 8011f24:	f808 7b01 	strb.w	r7, [r8], #1
 8011f28:	2d00      	cmp	r5, #0
 8011f2a:	d041      	beq.n	8011fb0 <GUI__ConvertColor2Index+0x176>
 8011f2c:	464c      	mov	r4, r9
 8011f2e:	6820      	ldr	r0, [r4, #0]
 8011f30:	47b0      	blx	r6
 8011f32:	2d01      	cmp	r5, #1
 8011f34:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8011f38:	b2c7      	uxtb	r7, r0
 8011f3a:	d040      	beq.n	8011fbe <GUI__ConvertColor2Index+0x184>
 8011f3c:	6860      	ldr	r0, [r4, #4]
 8011f3e:	47b0      	blx	r6
 8011f40:	2d02      	cmp	r5, #2
 8011f42:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8011f46:	b2c7      	uxtb	r7, r0
 8011f48:	d102      	bne.n	8011f50 <GUI__ConvertColor2Index+0x116>
 8011f4a:	f104 0908 	add.w	r9, r4, #8
 8011f4e:	e038      	b.n	8011fc2 <GUI__ConvertColor2Index+0x188>
 8011f50:	68a0      	ldr	r0, [r4, #8]
 8011f52:	47b0      	blx	r6
 8011f54:	2d03      	cmp	r5, #3
 8011f56:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8011f5a:	b2c7      	uxtb	r7, r0
 8011f5c:	d1db      	bne.n	8011f16 <GUI__ConvertColor2Index+0xdc>
 8011f5e:	f104 090c 	add.w	r9, r4, #12
 8011f62:	e02e      	b.n	8011fc2 <GUI__ConvertColor2Index+0x188>
 8011f64:	6860      	ldr	r0, [r4, #4]
 8011f66:	47b0      	blx	r6
 8011f68:	4338      	orrs	r0, r7
 8011f6a:	f104 0908 	add.w	r9, r4, #8
 8011f6e:	b2c7      	uxtb	r7, r0
 8011f70:	3d02      	subs	r5, #2
 8011f72:	f808 7b01 	strb.w	r7, [r8], #1
 8011f76:	b1dd      	cbz	r5, 8011fb0 <GUI__ConvertColor2Index+0x176>
 8011f78:	464c      	mov	r4, r9
 8011f7a:	6820      	ldr	r0, [r4, #0]
 8011f7c:	47b0      	blx	r6
 8011f7e:	2d01      	cmp	r5, #1
 8011f80:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8011f84:	b2c7      	uxtb	r7, r0
 8011f86:	d1ed      	bne.n	8011f64 <GUI__ConvertColor2Index+0x12a>
 8011f88:	f104 0904 	add.w	r9, r4, #4
 8011f8c:	2500      	movs	r5, #0
 8011f8e:	e7f0      	b.n	8011f72 <GUI__ConvertColor2Index+0x138>
 8011f90:	691f      	ldr	r7, [r3, #16]
 8011f92:	b12f      	cbz	r7, 8011fa0 <GUI__ConvertColor2Index+0x166>
 8011f94:	4620      	mov	r0, r4
 8011f96:	4641      	mov	r1, r8
 8011f98:	462a      	mov	r2, r5
 8011f9a:	2301      	movs	r3, #1
 8011f9c:	47b8      	blx	r7
 8011f9e:	e007      	b.n	8011fb0 <GUI__ConvertColor2Index+0x176>
 8011fa0:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8011fa4:	47b0      	blx	r6
 8011fa6:	f808 0007 	strb.w	r0, [r8, r7]
 8011faa:	3701      	adds	r7, #1
 8011fac:	42bd      	cmp	r5, r7
 8011fae:	d1f7      	bne.n	8011fa0 <GUI__ConvertColor2Index+0x166>
 8011fb0:	2001      	movs	r0, #1
 8011fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	f104 0904 	add.w	r9, r4, #4
 8011fba:	2500      	movs	r5, #0
 8011fbc:	e761      	b.n	8011e82 <GUI__ConvertColor2Index+0x48>
 8011fbe:	f104 0904 	add.w	r9, r4, #4
 8011fc2:	2500      	movs	r5, #0
 8011fc4:	e7ae      	b.n	8011f24 <GUI__ConvertColor2Index+0xea>
 8011fc6:	691f      	ldr	r7, [r3, #16]
 8011fc8:	b11f      	cbz	r7, 8011fd2 <GUI__ConvertColor2Index+0x198>
 8011fca:	4641      	mov	r1, r8
 8011fcc:	462a      	mov	r2, r5
 8011fce:	2302      	movs	r3, #2
 8011fd0:	e7e4      	b.n	8011f9c <GUI__ConvertColor2Index+0x162>
 8011fd2:	f854 0b04 	ldr.w	r0, [r4], #4
 8011fd6:	47b0      	blx	r6
 8011fd8:	3d01      	subs	r5, #1
 8011fda:	f828 0b02 	strh.w	r0, [r8], #2
 8011fde:	d1f8      	bne.n	8011fd2 <GUI__ConvertColor2Index+0x198>
 8011fe0:	e7e6      	b.n	8011fb0 <GUI__ConvertColor2Index+0x176>

08011fe2 <GUI__CompactPixelIndicesEx>:
 8011fe2:	b513      	push	{r0, r1, r4, lr}
 8011fe4:	2400      	movs	r4, #0
 8011fe6:	9400      	str	r4, [sp, #0]
 8011fe8:	f7ff ff27 	bl	8011e3a <GUI__ConvertColor2Index>
 8011fec:	b002      	add	sp, #8
 8011fee:	bd10      	pop	{r4, pc}

08011ff0 <_GetCharCode>:
 8011ff0:	7800      	ldrb	r0, [r0, #0]
 8011ff2:	4770      	bx	lr

08011ff4 <_GetCharSize>:
 8011ff4:	2001      	movs	r0, #1
 8011ff6:	4770      	bx	lr

08011ff8 <_CalcSizeOfChar>:
 8011ff8:	2001      	movs	r0, #1
 8011ffa:	4770      	bx	lr

08011ffc <_Encode>:
 8011ffc:	7001      	strb	r1, [r0, #0]
 8011ffe:	2001      	movs	r0, #1
 8012000:	4770      	bx	lr
	...

08012004 <GUI_UC__GetCharCodeInc>:
 8012004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012006:	4e08      	ldr	r6, [pc, #32]	; (8012028 <GUI_UC__GetCharCodeInc+0x24>)
 8012008:	6804      	ldr	r4, [r0, #0]
 801200a:	6833      	ldr	r3, [r6, #0]
 801200c:	4605      	mov	r5, r0
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4620      	mov	r0, r4
 8012012:	4798      	blx	r3
 8012014:	6833      	ldr	r3, [r6, #0]
 8012016:	4607      	mov	r7, r0
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	4620      	mov	r0, r4
 801201c:	4798      	blx	r3
 801201e:	4420      	add	r0, r4
 8012020:	6028      	str	r0, [r5, #0]
 8012022:	4638      	mov	r0, r7
 8012024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012026:	bf00      	nop
 8012028:	20026d3c 	.word	0x20026d3c

0801202c <GUI_UC__NumChars2NumBytes>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	4604      	mov	r4, r0
 8012030:	460e      	mov	r6, r1
 8012032:	2500      	movs	r5, #0
 8012034:	b146      	cbz	r6, 8012048 <GUI_UC__NumChars2NumBytes+0x1c>
 8012036:	4b05      	ldr	r3, [pc, #20]	; (801204c <GUI_UC__NumChars2NumBytes+0x20>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4620      	mov	r0, r4
 801203c:	685b      	ldr	r3, [r3, #4]
 801203e:	4798      	blx	r3
 8012040:	3e01      	subs	r6, #1
 8012042:	4404      	add	r4, r0
 8012044:	4405      	add	r5, r0
 8012046:	e7f5      	b.n	8012034 <GUI_UC__NumChars2NumBytes+0x8>
 8012048:	4628      	mov	r0, r5
 801204a:	bd70      	pop	{r4, r5, r6, pc}
 801204c:	20026d3c 	.word	0x20026d3c

08012050 <GUI_SetOrg>:
 8012050:	460a      	mov	r2, r1
 8012052:	4908      	ldr	r1, [pc, #32]	; (8012074 <GUI_SetOrg+0x24>)
 8012054:	b510      	push	{r4, lr}
 8012056:	8008      	strh	r0, [r1, #0]
 8012058:	4907      	ldr	r1, [pc, #28]	; (8012078 <GUI_SetOrg+0x28>)
 801205a:	800a      	strh	r2, [r1, #0]
 801205c:	4907      	ldr	r1, [pc, #28]	; (801207c <GUI_SetOrg+0x2c>)
 801205e:	6809      	ldr	r1, [r1, #0]
 8012060:	4603      	mov	r3, r0
 8012062:	7c48      	ldrb	r0, [r1, #17]
 8012064:	4906      	ldr	r1, [pc, #24]	; (8012080 <GUI_SetOrg+0x30>)
 8012066:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 801206a:	68c1      	ldr	r1, [r0, #12]
 801206c:	6a0c      	ldr	r4, [r1, #32]
 801206e:	4619      	mov	r1, r3
 8012070:	47a0      	blx	r4
 8012072:	bd10      	pop	{r4, pc}
 8012074:	20026d2c 	.word	0x20026d2c
 8012078:	20026d20 	.word	0x20026d20
 801207c:	20000034 	.word	0x20000034
 8012080:	20026d44 	.word	0x20026d44

08012084 <GUI_GetFontSizeY>:
 8012084:	f000 b988 	b.w	8012398 <GUI__GetFontSizeY>

08012088 <_Add>:
 8012088:	4a0d      	ldr	r2, [pc, #52]	; (80120c0 <_Add+0x38>)
 801208a:	6813      	ldr	r3, [r2, #0]
 801208c:	2b0b      	cmp	r3, #11
 801208e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012090:	4615      	mov	r5, r2
 8012092:	dc14      	bgt.n	80120be <_Add+0x36>
 8012094:	4c0b      	ldr	r4, [pc, #44]	; (80120c4 <_Add+0x3c>)
 8012096:	461a      	mov	r2, r3
 8012098:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801209c:	4626      	mov	r6, r4
 801209e:	b152      	cbz	r2, 80120b6 <_Add+0x2e>
 80120a0:	f831 4d02 	ldrh.w	r4, [r1, #-2]!
 80120a4:	fa0f fc84 	sxth.w	ip, r4
 80120a8:	4584      	cmp	ip, r0
 80120aa:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 80120ae:	db02      	blt.n	80120b6 <_Add+0x2e>
 80120b0:	804c      	strh	r4, [r1, #2]
 80120b2:	463a      	mov	r2, r7
 80120b4:	e7f3      	b.n	801209e <_Add+0x16>
 80120b6:	3301      	adds	r3, #1
 80120b8:	f826 0012 	strh.w	r0, [r6, r2, lsl #1]
 80120bc:	602b      	str	r3, [r5, #0]
 80120be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120c0:	20026994 	.word	0x20026994
 80120c4:	20026998 	.word	0x20026998

080120c8 <GL_FillPolygon>:
 80120c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8012288 <GL_FillPolygon+0x1c0>
 80120d0:	9101      	str	r1, [sp, #4]
 80120d2:	4692      	mov	sl, r2
 80120d4:	4606      	mov	r6, r0
 80120d6:	f643 74ff 	movw	r4, #16383	; 0x3fff
 80120da:	2200      	movs	r2, #0
 80120dc:	9901      	ldr	r1, [sp, #4]
 80120de:	428a      	cmp	r2, r1
 80120e0:	da0b      	bge.n	80120fa <GL_FillPolygon+0x32>
 80120e2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80120e6:	3201      	adds	r2, #1
 80120e8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80120ec:	428c      	cmp	r4, r1
 80120ee:	bfa8      	it	ge
 80120f0:	460c      	movge	r4, r1
 80120f2:	4589      	cmp	r9, r1
 80120f4:	bfb8      	it	lt
 80120f6:	4689      	movlt	r9, r1
 80120f8:	e7f0      	b.n	80120dc <GL_FillPolygon+0x14>
 80120fa:	4960      	ldr	r1, [pc, #384]	; (801227c <GL_FillPolygon+0x1b4>)
 80120fc:	680a      	ldr	r2, [r1, #0]
 80120fe:	6952      	ldr	r2, [r2, #20]
 8012100:	468b      	mov	fp, r1
 8012102:	b15a      	cbz	r2, 801211c <GL_FillPolygon+0x54>
 8012104:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8012108:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801210c:	1ac9      	subs	r1, r1, r3
 801210e:	1ad2      	subs	r2, r2, r3
 8012110:	4589      	cmp	r9, r1
 8012112:	bfa8      	it	ge
 8012114:	4689      	movge	r9, r1
 8012116:	4294      	cmp	r4, r2
 8012118:	bfb8      	it	lt
 801211a:	4614      	movlt	r4, r2
 801211c:	eb04 0803 	add.w	r8, r4, r3
 8012120:	454c      	cmp	r4, r9
 8012122:	f300 80a7 	bgt.w	8012274 <GL_FillPolygon+0x1ac>
 8012126:	4b56      	ldr	r3, [pc, #344]	; (8012280 <GL_FillPolygon+0x1b8>)
 8012128:	2700      	movs	r7, #0
 801212a:	601f      	str	r7, [r3, #0]
 801212c:	4635      	mov	r5, r6
 801212e:	9901      	ldr	r1, [sp, #4]
 8012130:	428f      	cmp	r7, r1
 8012132:	da55      	bge.n	80121e0 <GL_FillPolygon+0x118>
 8012134:	9b01      	ldr	r3, [sp, #4]
 8012136:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801213a:	1e59      	subs	r1, r3, #1
 801213c:	428f      	cmp	r7, r1
 801213e:	bfb4      	ite	lt
 8012140:	f107 0c01 	addlt.w	ip, r7, #1
 8012144:	f04f 0c00 	movge.w	ip, #0
 8012148:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801214c:	eb06 030c 	add.w	r3, r6, ip
 8012150:	42a2      	cmp	r2, r4
 8012152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012156:	d136      	bne.n	80121c6 <GL_FillPolygon+0xfe>
 8012158:	42a3      	cmp	r3, r4
 801215a:	d002      	beq.n	8012162 <GL_FillPolygon+0x9a>
 801215c:	463a      	mov	r2, r7
 801215e:	2000      	movs	r0, #0
 8012160:	e01b      	b.n	801219a <GL_FillPolygon+0xd2>
 8012162:	f9b5 e000 	ldrsh.w	lr, [r5]
 8012166:	f936 200c 	ldrsh.w	r2, [r6, ip]
 801216a:	f8db 3000 	ldr.w	r3, [fp]
 801216e:	44d6      	add	lr, sl
 8012170:	4452      	add	r2, sl
 8012172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012174:	4596      	cmp	lr, r2
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	da02      	bge.n	8012180 <GL_FillPolygon+0xb8>
 801217a:	4670      	mov	r0, lr
 801217c:	4641      	mov	r1, r8
 801217e:	e020      	b.n	80121c2 <GL_FillPolygon+0xfa>
 8012180:	4610      	mov	r0, r2
 8012182:	4641      	mov	r1, r8
 8012184:	4672      	mov	r2, lr
 8012186:	e01c      	b.n	80121c2 <GL_FillPolygon+0xfa>
 8012188:	b152      	cbz	r2, 80121a0 <GL_FillPolygon+0xd8>
 801218a:	3a01      	subs	r2, #1
 801218c:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
 8012190:	f9bc c002 	ldrsh.w	ip, [ip, #2]
 8012194:	45a4      	cmp	ip, r4
 8012196:	d105      	bne.n	80121a4 <GL_FillPolygon+0xdc>
 8012198:	3001      	adds	r0, #1
 801219a:	4288      	cmp	r0, r1
 801219c:	dbf4      	blt.n	8012188 <GL_FillPolygon+0xc0>
 801219e:	e01c      	b.n	80121da <GL_FillPolygon+0x112>
 80121a0:	460a      	mov	r2, r1
 80121a2:	e7f3      	b.n	801218c <GL_FillPolygon+0xc4>
 80121a4:	ebc4 0c0c 	rsb	ip, r4, ip
 80121a8:	1b1b      	subs	r3, r3, r4
 80121aa:	ea9c 0f03 	teq	ip, r3
 80121ae:	f9b5 0000 	ldrsh.w	r0, [r5]
 80121b2:	d44d      	bmi.n	8012250 <GL_FillPolygon+0x188>
 80121b4:	f8db 3000 	ldr.w	r3, [fp]
 80121b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121ba:	4450      	add	r0, sl
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	4641      	mov	r1, r8
 80121c0:	4602      	mov	r2, r0
 80121c2:	4798      	blx	r3
 80121c4:	e009      	b.n	80121da <GL_FillPolygon+0x112>
 80121c6:	42a3      	cmp	r3, r4
 80121c8:	d007      	beq.n	80121da <GL_FillPolygon+0x112>
 80121ca:	db44      	blt.n	8012256 <GL_FillPolygon+0x18e>
 80121cc:	42a2      	cmp	r2, r4
 80121ce:	dd27      	ble.n	8012220 <GL_FillPolygon+0x158>
 80121d0:	42a3      	cmp	r3, r4
 80121d2:	dd42      	ble.n	801225a <GL_FillPolygon+0x192>
 80121d4:	e001      	b.n	80121da <GL_FillPolygon+0x112>
 80121d6:	42a3      	cmp	r3, r4
 80121d8:	dd49      	ble.n	801226e <GL_FillPolygon+0x1a6>
 80121da:	3701      	adds	r7, #1
 80121dc:	3504      	adds	r5, #4
 80121de:	e7a6      	b.n	801212e <GL_FillPolygon+0x66>
 80121e0:	2500      	movs	r5, #0
 80121e2:	4628      	mov	r0, r5
 80121e4:	462f      	mov	r7, r5
 80121e6:	4b26      	ldr	r3, [pc, #152]	; (8012280 <GL_FillPolygon+0x1b8>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	429f      	cmp	r7, r3
 80121ec:	da14      	bge.n	8012218 <GL_FillPolygon+0x150>
 80121ee:	4b25      	ldr	r3, [pc, #148]	; (8012284 <GL_FillPolygon+0x1bc>)
 80121f0:	f933 3017 	ldrsh.w	r3, [r3, r7, lsl #1]
 80121f4:	b15d      	cbz	r5, 801220e <GL_FillPolygon+0x146>
 80121f6:	f8db 2000 	ldr.w	r2, [fp]
 80121fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80121fc:	4450      	add	r0, sl
 80121fe:	f8d2 c000 	ldr.w	ip, [r2]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	eb0a 0203 	add.w	r2, sl, r3
 8012208:	4641      	mov	r1, r8
 801220a:	47e0      	blx	ip
 801220c:	9b00      	ldr	r3, [sp, #0]
 801220e:	f085 0501 	eor.w	r5, r5, #1
 8012212:	3701      	adds	r7, #1
 8012214:	4618      	mov	r0, r3
 8012216:	e7e6      	b.n	80121e6 <GL_FillPolygon+0x11e>
 8012218:	3401      	adds	r4, #1
 801221a:	f108 0801 	add.w	r8, r8, #1
 801221e:	e77f      	b.n	8012120 <GL_FillPolygon+0x58>
 8012220:	429a      	cmp	r2, r3
 8012222:	dcd8      	bgt.n	80121d6 <GL_FillPolygon+0x10e>
 8012224:	f9b5 1000 	ldrsh.w	r1, [r5]
 8012228:	f936 000c 	ldrsh.w	r0, [r6, ip]
 801222c:	ebc2 0e04 	rsb	lr, r2, r4
 8012230:	1a40      	subs	r0, r0, r1
 8012232:	fb0e f000 	mul.w	r0, lr, r0
 8012236:	2800      	cmp	r0, #0
 8012238:	ebc2 0303 	rsb	r3, r2, r3
 801223c:	bfdb      	ittet	le
 801223e:	105a      	asrle	r2, r3, #1
 8012240:	f1c2 0201 	rsble	r2, r2, #1
 8012244:	eb00 0063 	addgt.w	r0, r0, r3, asr #1
 8012248:	1880      	addle	r0, r0, r2
 801224a:	fb90 f0f3 	sdiv	r0, r0, r3
 801224e:	4408      	add	r0, r1
 8012250:	f7ff ff1a 	bl	8012088 <_Add>
 8012254:	e7c1      	b.n	80121da <GL_FillPolygon+0x112>
 8012256:	42a2      	cmp	r2, r4
 8012258:	dbbf      	blt.n	80121da <GL_FillPolygon+0x112>
 801225a:	429a      	cmp	r2, r3
 801225c:	ddbd      	ble.n	80121da <GL_FillPolygon+0x112>
 801225e:	4696      	mov	lr, r2
 8012260:	f936 100c 	ldrsh.w	r1, [r6, ip]
 8012264:	f9b5 0000 	ldrsh.w	r0, [r5]
 8012268:	461a      	mov	r2, r3
 801226a:	4673      	mov	r3, lr
 801226c:	e7de      	b.n	801222c <GL_FillPolygon+0x164>
 801226e:	42a2      	cmp	r2, r4
 8012270:	daf5      	bge.n	801225e <GL_FillPolygon+0x196>
 8012272:	e7b2      	b.n	80121da <GL_FillPolygon+0x112>
 8012274:	b003      	add	sp, #12
 8012276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801227a:	bf00      	nop
 801227c:	20000034 	.word	0x20000034
 8012280:	20026994 	.word	0x20026994
 8012284:	20026998 	.word	0x20026998
 8012288:	ffffc001 	.word	0xffffc001

0801228c <GL_DrawPoint>:
 801228c:	b508      	push	{r3, lr}
 801228e:	4b08      	ldr	r3, [pc, #32]	; (80122b0 <GL_DrawPoint+0x24>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	7e1a      	ldrb	r2, [r3, #24]
 8012294:	2a01      	cmp	r2, #1
 8012296:	d103      	bne.n	80122a0 <GL_DrawPoint+0x14>
 8012298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	4798      	blx	r3
 801229e:	bd08      	pop	{r3, pc}
 80122a0:	2302      	movs	r3, #2
 80122a2:	3a01      	subs	r2, #1
 80122a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80122a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80122ac:	f7fd bc0c 	b.w	800fac8 <GL_FillCircle>
 80122b0:	20000034 	.word	0x20000034

080122b4 <GUI_CURSOR_SetPositionEx>:
 80122b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122b6:	4606      	mov	r6, r0
 80122b8:	4610      	mov	r0, r2
 80122ba:	460d      	mov	r5, r1
 80122bc:	4614      	mov	r4, r2
 80122be:	f7fc fabf 	bl	800e840 <GUI_GetCursorLayer>
 80122c2:	4f15      	ldr	r7, [pc, #84]	; (8012318 <GUI_CURSOR_SetPositionEx+0x64>)
 80122c4:	2314      	movs	r3, #20
 80122c6:	b148      	cbz	r0, 80122dc <GUI_CURSOR_SetPositionEx+0x28>
 80122c8:	435c      	muls	r4, r3
 80122ca:	593b      	ldr	r3, [r7, r4]
 80122cc:	6859      	ldr	r1, [r3, #4]
 80122ce:	689a      	ldr	r2, [r3, #8]
 80122d0:	1a71      	subs	r1, r6, r1
 80122d2:	1aaa      	subs	r2, r5, r2
 80122d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122d8:	f7fc badc 	b.w	800e894 <GUI_SetLayerPosEx>
 80122dc:	fb03 7304 	mla	r3, r3, r4, r7
 80122e0:	f103 0208 	add.w	r2, r3, #8
 80122e4:	689b      	ldr	r3, [r3, #8]
 80122e6:	42b3      	cmp	r3, r6
 80122e8:	d102      	bne.n	80122f0 <GUI_CURSOR_SetPositionEx+0x3c>
 80122ea:	6853      	ldr	r3, [r2, #4]
 80122ec:	42ab      	cmp	r3, r5
 80122ee:	d011      	beq.n	8012314 <GUI_CURSOR_SetPositionEx+0x60>
 80122f0:	2314      	movs	r3, #20
 80122f2:	4363      	muls	r3, r4
 80122f4:	18fa      	adds	r2, r7, r3
 80122f6:	6910      	ldr	r0, [r2, #16]
 80122f8:	b138      	cbz	r0, 801230a <GUI_CURSOR_SetPositionEx+0x56>
 80122fa:	4a07      	ldr	r2, [pc, #28]	; (8012318 <GUI_CURSOR_SetPositionEx+0x64>)
 80122fc:	58d3      	ldr	r3, [r2, r3]
 80122fe:	6859      	ldr	r1, [r3, #4]
 8012300:	689a      	ldr	r2, [r3, #8]
 8012302:	1a71      	subs	r1, r6, r1
 8012304:	1aaa      	subs	r2, r5, r2
 8012306:	f000 f9a7 	bl	8012658 <GUI_SPRITE_SetPosition>
 801230a:	2314      	movs	r3, #20
 801230c:	fb03 7404 	mla	r4, r3, r4, r7
 8012310:	60a6      	str	r6, [r4, #8]
 8012312:	60e5      	str	r5, [r4, #12]
 8012314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012316:	bf00      	nop
 8012318:	200269b0 	.word	0x200269b0

0801231c <GUI_CalcColorDist>:
 801231c:	b2cb      	uxtb	r3, r1
 801231e:	b2c2      	uxtb	r2, r0
 8012320:	1ad2      	subs	r2, r2, r3
 8012322:	b292      	uxth	r2, r2
 8012324:	b293      	uxth	r3, r2
 8012326:	b530      	push	{r4, r5, lr}
 8012328:	041c      	lsls	r4, r3, #16
 801232a:	bf48      	it	mi
 801232c:	4253      	negmi	r3, r2
 801232e:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8012332:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8012336:	ebc5 0202 	rsb	r2, r5, r2
 801233a:	bf48      	it	mi
 801233c:	b29b      	uxthmi	r3, r3
 801233e:	b292      	uxth	r2, r2
 8012340:	0c09      	lsrs	r1, r1, #16
 8012342:	fb13 f403 	smulbb	r4, r3, r3
 8012346:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 801234a:	b293      	uxth	r3, r2
 801234c:	041d      	lsls	r5, r3, #16
 801234e:	b289      	uxth	r1, r1
 8012350:	b288      	uxth	r0, r1
 8012352:	bf44      	itt	mi
 8012354:	4253      	negmi	r3, r2
 8012356:	b29b      	uxthmi	r3, r3
 8012358:	0402      	lsls	r2, r0, #16
 801235a:	bf48      	it	mi
 801235c:	4248      	negmi	r0, r1
 801235e:	fb13 4303 	smlabb	r3, r3, r3, r4
 8012362:	bf48      	it	mi
 8012364:	b280      	uxthmi	r0, r0
 8012366:	fb00 3000 	mla	r0, r0, r0, r3
 801236a:	bd30      	pop	{r4, r5, pc}

0801236c <LCD_Index2Color_M888>:
 801236c:	b2c2      	uxtb	r2, r0
 801236e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012376:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801237a:	4318      	orrs	r0, r3
 801237c:	4770      	bx	lr

0801237e <WM__SendMessageIfEnabled>:
 801237e:	b538      	push	{r3, r4, r5, lr}
 8012380:	4604      	mov	r4, r0
 8012382:	460d      	mov	r5, r1
 8012384:	f7f8 f970 	bl	800a668 <WM__IsEnabled>
 8012388:	b128      	cbz	r0, 8012396 <WM__SendMessageIfEnabled+0x18>
 801238a:	4620      	mov	r0, r4
 801238c:	4629      	mov	r1, r5
 801238e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012392:	f7f8 b94b 	b.w	800a62c <WM__SendMessage>
 8012396:	bd38      	pop	{r3, r4, r5, pc}

08012398 <GUI__GetFontSizeY>:
 8012398:	4b03      	ldr	r3, [pc, #12]	; (80123a8 <GUI__GetFontSizeY+0x10>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	7e18      	ldrb	r0, [r3, #24]
 80123a0:	7edb      	ldrb	r3, [r3, #27]
 80123a2:	4358      	muls	r0, r3
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop
 80123a8:	20000034 	.word	0x20000034

080123ac <_CreateBuffer>:
 80123ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ae:	6943      	ldr	r3, [r0, #20]
 80123b0:	4605      	mov	r5, r0
 80123b2:	8818      	ldrh	r0, [r3, #0]
 80123b4:	300d      	adds	r0, #13
 80123b6:	0080      	lsls	r0, r0, #2
 80123b8:	460e      	mov	r6, r1
 80123ba:	f7fe f953 	bl	8010664 <GUI_ALLOC_AllocNoInit>
 80123be:	4607      	mov	r7, r0
 80123c0:	b908      	cbnz	r0, 80123c6 <_CreateBuffer+0x1a>
 80123c2:	2000      	movs	r0, #0
 80123c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c6:	f7fd ff1b 	bl	8010200 <GUI_ALLOC_LockH>
 80123ca:	682b      	ldr	r3, [r5, #0]
 80123cc:	4604      	mov	r4, r0
 80123ce:	6998      	ldr	r0, [r3, #24]
 80123d0:	f7fd f9bc 	bl	800f74c <GUI_DEVICE__GetpDriver>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	d0f4      	beq.n	80123c2 <_CreateBuffer+0x16>
 80123d8:	68c3      	ldr	r3, [r0, #12]
 80123da:	2108      	movs	r1, #8
 80123dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123de:	4798      	blx	r3
 80123e0:	2802      	cmp	r0, #2
 80123e2:	dd0b      	ble.n	80123fc <_CreateBuffer+0x50>
 80123e4:	2804      	cmp	r0, #4
 80123e6:	dd06      	ble.n	80123f6 <_CreateBuffer+0x4a>
 80123e8:	2808      	cmp	r0, #8
 80123ea:	dd06      	ble.n	80123fa <_CreateBuffer+0x4e>
 80123ec:	2811      	cmp	r0, #17
 80123ee:	bfb4      	ite	lt
 80123f0:	2010      	movlt	r0, #16
 80123f2:	2020      	movge	r0, #32
 80123f4:	e002      	b.n	80123fc <_CreateBuffer+0x50>
 80123f6:	2004      	movs	r0, #4
 80123f8:	e000      	b.n	80123fc <_CreateBuffer+0x50>
 80123fa:	2008      	movs	r0, #8
 80123fc:	2808      	cmp	r0, #8
 80123fe:	61a0      	str	r0, [r4, #24]
 8012400:	dd04      	ble.n	801240c <_CreateBuffer+0x60>
 8012402:	2810      	cmp	r0, #16
 8012404:	bfcc      	ite	gt
 8012406:	2304      	movgt	r3, #4
 8012408:	2302      	movle	r3, #2
 801240a:	e000      	b.n	801240e <_CreateBuffer+0x62>
 801240c:	2301      	movs	r3, #1
 801240e:	696a      	ldr	r2, [r5, #20]
 8012410:	6123      	str	r3, [r4, #16]
 8012412:	8812      	ldrh	r2, [r2, #0]
 8012414:	61e2      	str	r2, [r4, #28]
 8012416:	4353      	muls	r3, r2
 8012418:	6163      	str	r3, [r4, #20]
 801241a:	f7fe f88f 	bl	801053c <GUI_ALLOC_GetMaxSize>
 801241e:	6963      	ldr	r3, [r4, #20]
 8012420:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8012424:	4283      	cmp	r3, r0
 8012426:	f04f 0200 	mov.w	r2, #0
 801242a:	bfc8      	it	gt
 801242c:	6160      	strgt	r0, [r4, #20]
 801242e:	2e01      	cmp	r6, #1
 8012430:	60e2      	str	r2, [r4, #12]
 8012432:	bf18      	it	ne
 8012434:	69e2      	ldrne	r2, [r4, #28]
 8012436:	60a7      	str	r7, [r4, #8]
 8012438:	bf18      	it	ne
 801243a:	f102 4280 	addne.w	r2, r2, #1073741824	; 0x40000000
 801243e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8012442:	bf18      	it	ne
 8012444:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 8012448:	6023      	str	r3, [r4, #0]
 801244a:	bf18      	it	ne
 801244c:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 8012450:	6063      	str	r3, [r4, #4]
 8012452:	4620      	mov	r0, r4
 8012454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012456 <_GetBkIndex.isra.0>:
 8012456:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801245a:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 801245e:	4540      	cmp	r0, r8
 8012460:	4606      	mov	r6, r0
 8012462:	460d      	mov	r5, r1
 8012464:	4691      	mov	r9, r2
 8012466:	461c      	mov	r4, r3
 8012468:	da04      	bge.n	8012474 <_GetBkIndex.isra.0+0x1e>
 801246a:	f8d9 0000 	ldr.w	r0, [r9]
 801246e:	bb28      	cbnz	r0, 80124bc <_GetBkIndex.isra.0+0x66>
 8012470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012474:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012478:	4298      	cmp	r0, r3
 801247a:	dcf6      	bgt.n	801246a <_GetBkIndex.isra.0+0x14>
 801247c:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8012480:	42b9      	cmp	r1, r7
 8012482:	dbf2      	blt.n	801246a <_GetBkIndex.isra.0+0x14>
 8012484:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012488:	4299      	cmp	r1, r3
 801248a:	dcee      	bgt.n	801246a <_GetBkIndex.isra.0+0x14>
 801248c:	ebc8 0800 	rsb	r8, r8, r0
 8012490:	1bcf      	subs	r7, r1, r7
 8012492:	6960      	ldr	r0, [r4, #20]
 8012494:	4641      	mov	r1, r8
 8012496:	463a      	mov	r2, r7
 8012498:	f000 fba4 	bl	8012be4 <GUI_GetBitmapPixelIndex>
 801249c:	2800      	cmp	r0, #0
 801249e:	d0e4      	beq.n	801246a <_GetBkIndex.isra.0+0x14>
 80124a0:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80124a4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80124a8:	1a8a      	subs	r2, r1, r2
 80124aa:	fb02 7707 	mla	r7, r2, r7, r7
 80124ae:	f104 0320 	add.w	r3, r4, #32
 80124b2:	44b8      	add	r8, r7
 80124b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80124b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124bc:	68c3      	ldr	r3, [r0, #12]
 80124be:	4631      	mov	r1, r6
 80124c0:	695b      	ldr	r3, [r3, #20]
 80124c2:	462a      	mov	r2, r5
 80124c4:	4798      	blx	r3
 80124c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080124ca <_GetBkIndexAlpha.isra.2>:
 80124ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124ce:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 80124d2:	42b0      	cmp	r0, r6
 80124d4:	4680      	mov	r8, r0
 80124d6:	460f      	mov	r7, r1
 80124d8:	4691      	mov	r9, r2
 80124da:	461d      	mov	r5, r3
 80124dc:	db14      	blt.n	8012508 <_GetBkIndexAlpha.isra.2+0x3e>
 80124de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80124e2:	4298      	cmp	r0, r3
 80124e4:	dc10      	bgt.n	8012508 <_GetBkIndexAlpha.isra.2+0x3e>
 80124e6:	f9b5 4006 	ldrsh.w	r4, [r5, #6]
 80124ea:	42a1      	cmp	r1, r4
 80124ec:	db0c      	blt.n	8012508 <_GetBkIndexAlpha.isra.2+0x3e>
 80124ee:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80124f2:	4299      	cmp	r1, r3
 80124f4:	dc08      	bgt.n	8012508 <_GetBkIndexAlpha.isra.2+0x3e>
 80124f6:	1b86      	subs	r6, r0, r6
 80124f8:	6968      	ldr	r0, [r5, #20]
 80124fa:	1b0c      	subs	r4, r1, r4
 80124fc:	b130      	cbz	r0, 801250c <_GetBkIndexAlpha.isra.2+0x42>
 80124fe:	4631      	mov	r1, r6
 8012500:	4622      	mov	r2, r4
 8012502:	f000 fb6f 	bl	8012be4 <GUI_GetBitmapPixelIndex>
 8012506:	e003      	b.n	8012510 <_GetBkIndexAlpha.isra.2+0x46>
 8012508:	2400      	movs	r4, #0
 801250a:	4626      	mov	r6, r4
 801250c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8012510:	0e00      	lsrs	r0, r0, #24
 8012512:	28ff      	cmp	r0, #255	; 0xff
 8012514:	d109      	bne.n	801252a <_GetBkIndexAlpha.isra.2+0x60>
 8012516:	f8d9 0000 	ldr.w	r0, [r9]
 801251a:	b190      	cbz	r0, 8012542 <_GetBkIndexAlpha.isra.2+0x78>
 801251c:	68c3      	ldr	r3, [r0, #12]
 801251e:	4641      	mov	r1, r8
 8012520:	695b      	ldr	r3, [r3, #20]
 8012522:	463a      	mov	r2, r7
 8012524:	4798      	blx	r3
 8012526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801252a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801252e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012532:	1a8a      	subs	r2, r1, r2
 8012534:	fb02 4404 	mla	r4, r2, r4, r4
 8012538:	f105 0320 	add.w	r3, r5, #32
 801253c:	4426      	add	r6, r4
 801253e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012548 <_GetDeviceRect>:
 8012548:	b538      	push	{r3, r4, r5, lr}
 801254a:	4a0c      	ldr	r2, [pc, #48]	; (801257c <_GetDeviceRect+0x34>)
 801254c:	6983      	ldr	r3, [r0, #24]
 801254e:	56d2      	ldrsb	r2, [r2, r3]
 8012550:	2a01      	cmp	r2, #1
 8012552:	4605      	mov	r5, r0
 8012554:	460c      	mov	r4, r1
 8012556:	dd0d      	ble.n	8012574 <_GetDeviceRect+0x2c>
 8012558:	2200      	movs	r2, #0
 801255a:	804a      	strh	r2, [r1, #2]
 801255c:	800a      	strh	r2, [r1, #0]
 801255e:	4618      	mov	r0, r3
 8012560:	f7fa fb82 	bl	800cc68 <LCD_GetXSizeEx>
 8012564:	3801      	subs	r0, #1
 8012566:	80a0      	strh	r0, [r4, #4]
 8012568:	69a8      	ldr	r0, [r5, #24]
 801256a:	f7fa fb80 	bl	800cc6e <LCD_GetYSizeEx>
 801256e:	3801      	subs	r0, #1
 8012570:	80e0      	strh	r0, [r4, #6]
 8012572:	bd38      	pop	{r3, r4, r5, pc}
 8012574:	68c3      	ldr	r3, [r0, #12]
 8012576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012578:	4798      	blx	r3
 801257a:	bd38      	pop	{r3, r4, r5, pc}
 801257c:	20026d14 	.word	0x20026d14

08012580 <_FlushBuffer.isra.5>:
 8012580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012582:	460c      	mov	r4, r1
 8012584:	68c9      	ldr	r1, [r1, #12]
 8012586:	b087      	sub	sp, #28
 8012588:	2900      	cmp	r1, #0
 801258a:	d030      	beq.n	80125ee <_FlushBuffer.isra.5+0x6e>
 801258c:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8012590:	6822      	ldr	r2, [r4, #0]
 8012592:	2b01      	cmp	r3, #1
 8012594:	d103      	bne.n	801259e <_FlushBuffer.isra.5+0x1e>
 8012596:	4615      	mov	r5, r2
 8012598:	6062      	str	r2, [r4, #4]
 801259a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801259c:	e009      	b.n	80125b2 <_FlushBuffer.isra.5+0x32>
 801259e:	69e3      	ldr	r3, [r4, #28]
 80125a0:	6865      	ldr	r5, [r4, #4]
 80125a2:	6a27      	ldr	r7, [r4, #32]
 80125a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80125a8:	3b01      	subs	r3, #1
 80125aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125ae:	3504      	adds	r5, #4
 80125b0:	6063      	str	r3, [r4, #4]
 80125b2:	6806      	ldr	r6, [r0, #0]
 80125b4:	b1b6      	cbz	r6, 80125e4 <_FlushBuffer.isra.5+0x64>
 80125b6:	69a2      	ldr	r2, [r4, #24]
 80125b8:	4628      	mov	r0, r5
 80125ba:	f7ff fb88 	bl	8011cce <GUI__CompactPixelIndices>
 80125be:	2301      	movs	r3, #1
 80125c0:	68f2      	ldr	r2, [r6, #12]
 80125c2:	9300      	str	r3, [sp, #0]
 80125c4:	69a3      	ldr	r3, [r4, #24]
 80125c6:	9301      	str	r3, [sp, #4]
 80125c8:	9503      	str	r5, [sp, #12]
 80125ca:	6963      	ldr	r3, [r4, #20]
 80125cc:	9302      	str	r3, [sp, #8]
 80125ce:	2500      	movs	r5, #0
 80125d0:	9504      	str	r5, [sp, #16]
 80125d2:	9505      	str	r5, [sp, #20]
 80125d4:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80125d8:	68e3      	ldr	r3, [r4, #12]
 80125da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80125dc:	4630      	mov	r0, r6
 80125de:	4639      	mov	r1, r7
 80125e0:	47e0      	blx	ip
 80125e2:	e000      	b.n	80125e6 <_FlushBuffer.isra.5+0x66>
 80125e4:	2501      	movs	r5, #1
 80125e6:	2300      	movs	r3, #0
 80125e8:	60e3      	str	r3, [r4, #12]
 80125ea:	b2e8      	uxtb	r0, r5
 80125ec:	e000      	b.n	80125f0 <_FlushBuffer.isra.5+0x70>
 80125ee:	4608      	mov	r0, r1
 80125f0:	b007      	add	sp, #28
 80125f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080125f4 <_SetBkIndexBuffered>:
 80125f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125f6:	9c06      	ldr	r4, [sp, #24]
 80125f8:	460d      	mov	r5, r1
 80125fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80125fc:	428d      	cmp	r5, r1
 80125fe:	4606      	mov	r6, r0
 8012600:	4617      	mov	r7, r2
 8012602:	d105      	bne.n	8012610 <_SetBkIndexBuffered+0x1c>
 8012604:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8012608:	6a21      	ldr	r1, [r4, #32]
 801260a:	4411      	add	r1, r2
 801260c:	4288      	cmp	r0, r1
 801260e:	d003      	beq.n	8012618 <_SetBkIndexBuffered+0x24>
 8012610:	4618      	mov	r0, r3
 8012612:	4621      	mov	r1, r4
 8012614:	f7ff ffb4 	bl	8012580 <_FlushBuffer.isra.5>
 8012618:	6863      	ldr	r3, [r4, #4]
 801261a:	601f      	str	r7, [r3, #0]
 801261c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8012620:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012624:	6063      	str	r3, [r4, #4]
 8012626:	68e3      	ldr	r3, [r4, #12]
 8012628:	b90b      	cbnz	r3, 801262e <_SetBkIndexBuffered+0x3a>
 801262a:	62a6      	str	r6, [r4, #40]	; 0x28
 801262c:	62e5      	str	r5, [r4, #44]	; 0x2c
 801262e:	3301      	adds	r3, #1
 8012630:	60e3      	str	r3, [r4, #12]
 8012632:	6226      	str	r6, [r4, #32]
 8012634:	6265      	str	r5, [r4, #36]	; 0x24
 8012636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012638 <_ReleaseBuffer.isra.6>:
 8012638:	b513      	push	{r0, r1, r4, lr}
 801263a:	9101      	str	r1, [sp, #4]
 801263c:	f7ff ffa0 	bl	8012580 <_FlushBuffer.isra.5>
 8012640:	a802      	add	r0, sp, #8
 8012642:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8012646:	6894      	ldr	r4, [r2, #8]
 8012648:	f7fd fde8 	bl	801021c <GUI_ALLOC_UnlockH>
 801264c:	4620      	mov	r0, r4
 801264e:	f7fd fe05 	bl	801025c <GUI_ALLOC_Free>
 8012652:	b002      	add	sp, #8
 8012654:	bd10      	pop	{r4, pc}
	...

08012658 <GUI_SPRITE_SetPosition>:
 8012658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265c:	b0a7      	sub	sp, #156	; 0x9c
 801265e:	9116      	str	r1, [sp, #88]	; 0x58
 8012660:	9217      	str	r2, [sp, #92]	; 0x5c
 8012662:	2800      	cmp	r0, #0
 8012664:	f000 8275 	beq.w	8012b52 <GUI_SPRITE_SetPosition+0x4fa>
 8012668:	f7fd fdca 	bl	8010200 <GUI_ALLOC_LockH>
 801266c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801266e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012672:	6801      	ldr	r1, [r0, #0]
 8012674:	9023      	str	r0, [sp, #140]	; 0x8c
 8012676:	429a      	cmp	r2, r3
 8012678:	9106      	str	r1, [sp, #24]
 801267a:	d106      	bne.n	801268a <GUI_SPRITE_SetPosition+0x32>
 801267c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012680:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012684:	459e      	cmp	lr, r3
 8012686:	f000 8239 	beq.w	8012afc <GUI_SPRITE_SetPosition+0x4a4>
 801268a:	2000      	movs	r0, #0
 801268c:	f7f9 fc14 	bl	800beb8 <GUI_MEMDEV_Select>
 8012690:	4ba0      	ldr	r3, [pc, #640]	; (8012914 <GUI_SPRITE_SetPosition+0x2bc>)
 8012692:	9906      	ldr	r1, [sp, #24]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	6989      	ldr	r1, [r1, #24]
 8012698:	7c5a      	ldrb	r2, [r3, #17]
 801269a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801269c:	9108      	str	r1, [sp, #32]
 801269e:	4291      	cmp	r1, r2
 80126a0:	bf18      	it	ne
 80126a2:	7459      	strbne	r1, [r3, #17]
 80126a4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80126a8:	9310      	str	r3, [sp, #64]	; 0x40
 80126aa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80126ae:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80126b2:	f9b5 6006 	ldrsh.w	r6, [r5, #6]
 80126b6:	921a      	str	r2, [sp, #104]	; 0x68
 80126b8:	ebce 0303 	rsb	r3, lr, r3
 80126bc:	1c59      	adds	r1, r3, #1
 80126be:	9307      	str	r3, [sp, #28]
 80126c0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80126c4:	901f      	str	r0, [sp, #124]	; 0x7c
 80126c6:	1b9b      	subs	r3, r3, r6
 80126c8:	1c5a      	adds	r2, r3, #1
 80126ca:	930e      	str	r3, [sp, #56]	; 0x38
 80126cc:	8a2b      	ldrh	r3, [r5, #16]
 80126ce:	910d      	str	r1, [sp, #52]	; 0x34
 80126d0:	079b      	lsls	r3, r3, #30
 80126d2:	921e      	str	r2, [sp, #120]	; 0x78
 80126d4:	f140 81f7 	bpl.w	8012ac6 <GUI_SPRITE_SetPosition+0x46e>
 80126d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80126da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80126dc:	696b      	ldr	r3, [r5, #20]
 80126de:	9311      	str	r3, [sp, #68]	; 0x44
 80126e0:	ebce 0a01 	rsb	sl, lr, r1
 80126e4:	f1ba 0f00 	cmp.w	sl, #0
 80126e8:	ebc6 0902 	rsb	r9, r6, r2
 80126ec:	dc0c      	bgt.n	8012708 <GUI_SPRITE_SetPosition+0xb0>
 80126ee:	9b07      	ldr	r3, [sp, #28]
 80126f0:	930a      	str	r3, [sp, #40]	; 0x28
 80126f2:	469e      	mov	lr, r3
 80126f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126f8:	44d6      	add	lr, sl
 80126fa:	2100      	movs	r1, #0
 80126fc:	f8cd e01c 	str.w	lr, [sp, #28]
 8012700:	911c      	str	r1, [sp, #112]	; 0x70
 8012702:	9214      	str	r2, [sp, #80]	; 0x50
 8012704:	9204      	str	r2, [sp, #16]
 8012706:	e009      	b.n	801271c <GUI_SPRITE_SetPosition+0xc4>
 8012708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801270a:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
 801270e:	f04f 0e01 	mov.w	lr, #1
 8012712:	2100      	movs	r1, #0
 8012714:	9314      	str	r3, [sp, #80]	; 0x50
 8012716:	f8cd e010 	str.w	lr, [sp, #16]
 801271a:	910a      	str	r1, [sp, #40]	; 0x28
 801271c:	f1b9 0f00 	cmp.w	r9, #0
 8012720:	dc0c      	bgt.n	801273c <GUI_SPRITE_SetPosition+0xe4>
 8012722:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012724:	4622      	mov	r2, r4
 8012726:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801272a:	444a      	add	r2, r9
 801272c:	2300      	movs	r3, #0
 801272e:	920e      	str	r2, [sp, #56]	; 0x38
 8012730:	931b      	str	r3, [sp, #108]	; 0x6c
 8012732:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
 8012736:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 801273a:	e006      	b.n	801274a <GUI_SPRITE_SetPosition+0xf2>
 801273c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801273e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
 8012742:	2301      	movs	r3, #1
 8012744:	9215      	str	r2, [sp, #84]	; 0x54
 8012746:	9309      	str	r3, [sp, #36]	; 0x24
 8012748:	2400      	movs	r4, #0
 801274a:	9806      	ldr	r0, [sp, #24]
 801274c:	a924      	add	r1, sp, #144	; 0x90
 801274e:	f7ff fefb 	bl	8012548 <_GetDeviceRect>
 8012752:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8012754:	9904      	ldr	r1, [sp, #16]
 8012756:	f7ff fe29 	bl	80123ac <_CreateBuffer>
 801275a:	9012      	str	r0, [sp, #72]	; 0x48
 801275c:	2800      	cmp	r0, #0
 801275e:	f000 81b2 	beq.w	8012ac6 <GUI_SPRITE_SetPosition+0x46e>
 8012762:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8012764:	9904      	ldr	r1, [sp, #16]
 8012766:	f7ff fe21 	bl	80123ac <_CreateBuffer>
 801276a:	9013      	str	r0, [sp, #76]	; 0x4c
 801276c:	2800      	cmp	r0, #0
 801276e:	f000 81a5 	beq.w	8012abc <GUI_SPRITE_SetPosition+0x464>
 8012772:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012774:	68d8      	ldr	r0, [r3, #12]
 8012776:	4426      	add	r6, r4
 8012778:	b990      	cbnz	r0, 80127a0 <GUI_SPRITE_SetPosition+0x148>
 801277a:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 801277e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012782:	9019      	str	r0, [sp, #100]	; 0x64
 8012784:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8012788:	434b      	muls	r3, r1
 801278a:	9321      	str	r3, [sp, #132]	; 0x84
 801278c:	fb0e 2304 	mla	r3, lr, r4, r2
 8012790:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012794:	930c      	str	r3, [sp, #48]	; 0x30
 8012796:	9b04      	ldr	r3, [sp, #16]
 8012798:	009b      	lsls	r3, r3, #2
 801279a:	444e      	add	r6, r9
 801279c:	9320      	str	r3, [sp, #128]	; 0x80
 801279e:	e0db      	b.n	8012958 <GUI_SPRITE_SetPosition+0x300>
 80127a0:	f7fd fd2e 	bl	8010200 <GUI_ALLOC_LockH>
 80127a4:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80127a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127ac:	9022      	str	r0, [sp, #136]	; 0x88
 80127ae:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80127b2:	434b      	muls	r3, r1
 80127b4:	9319      	str	r3, [sp, #100]	; 0x64
 80127b6:	fb0e 2304 	mla	r3, lr, r4, r2
 80127ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80127be:	930b      	str	r3, [sp, #44]	; 0x2c
 80127c0:	9b04      	ldr	r3, [sp, #16]
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	444e      	add	r6, r9
 80127c6:	931d      	str	r3, [sp, #116]	; 0x74
 80127c8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80127ca:	428c      	cmp	r4, r1
 80127cc:	f000 809e 	beq.w	801290c <GUI_SPRITE_SetPosition+0x2b4>
 80127d0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80127d4:	4574      	cmp	r4, lr
 80127d6:	db05      	blt.n	80127e4 <GUI_SPRITE_SetPosition+0x18c>
 80127d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80127da:	428c      	cmp	r4, r1
 80127dc:	bfcc      	ite	gt
 80127de:	2300      	movgt	r3, #0
 80127e0:	2301      	movle	r3, #1
 80127e2:	e000      	b.n	80127e6 <GUI_SPRITE_SetPosition+0x18e>
 80127e4:	2300      	movs	r3, #0
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	9318      	str	r3, [sp, #96]	; 0x60
 80127ea:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80127ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80127f0:	9105      	str	r1, [sp, #20]
 80127f2:	ebc9 0206 	rsb	r2, r9, r6
 80127f6:	441f      	add	r7, r3
 80127f8:	920c      	str	r2, [sp, #48]	; 0x30
 80127fa:	4457      	add	r7, sl
 80127fc:	461d      	mov	r5, r3
 80127fe:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012800:	428d      	cmp	r5, r1
 8012802:	d07a      	beq.n	80128fa <GUI_SPRITE_SetPosition+0x2a2>
 8012804:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012806:	4629      	mov	r1, r5
 8012808:	4622      	mov	r2, r4
 801280a:	f000 f9eb 	bl	8012be4 <GUI_GetBitmapPixelIndex>
 801280e:	900f      	str	r0, [sp, #60]	; 0x3c
 8012810:	2800      	cmp	r0, #0
 8012812:	d069      	beq.n	80128e8 <GUI_SPRITE_SetPosition+0x290>
 8012814:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012816:	4295      	cmp	r5, r2
 8012818:	ebca 0c07 	rsb	ip, sl, r7
 801281c:	db07      	blt.n	801282e <GUI_SPRITE_SetPosition+0x1d6>
 801281e:	9b07      	ldr	r3, [sp, #28]
 8012820:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8012824:	429d      	cmp	r5, r3
 8012826:	bfc8      	it	gt
 8012828:	f04f 0b00 	movgt.w	fp, #0
 801282c:	e001      	b.n	8012832 <GUI_SPRITE_SetPosition+0x1da>
 801282e:	f04f 0b00 	mov.w	fp, #0
 8012832:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012836:	429f      	cmp	r7, r3
 8012838:	fa5f fb8b 	uxtb.w	fp, fp
 801283c:	db17      	blt.n	801286e <GUI_SPRITE_SetPosition+0x216>
 801283e:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012842:	429e      	cmp	r6, r3
 8012844:	db13      	blt.n	801286e <GUI_SPRITE_SetPosition+0x216>
 8012846:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 801284a:	429f      	cmp	r7, r3
 801284c:	dc0f      	bgt.n	801286e <GUI_SPRITE_SetPosition+0x216>
 801284e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012852:	429e      	cmp	r6, r3
 8012854:	dc0b      	bgt.n	801286e <GUI_SPRITE_SetPosition+0x216>
 8012856:	4638      	mov	r0, r7
 8012858:	4631      	mov	r1, r6
 801285a:	9a06      	ldr	r2, [sp, #24]
 801285c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801285e:	f8cd c00c 	str.w	ip, [sp, #12]
 8012862:	f7ff fdf8 	bl	8012456 <_GetBkIndex.isra.0>
 8012866:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801286a:	4680      	mov	r8, r0
 801286c:	e001      	b.n	8012872 <GUI_SPRITE_SetPosition+0x21a>
 801286e:	f04f 0800 	mov.w	r8, #0
 8012872:	f1bb 0f00 	cmp.w	fp, #0
 8012876:	d00d      	beq.n	8012894 <GUI_SPRITE_SetPosition+0x23c>
 8012878:	ebb5 010a 	subs.w	r1, r5, sl
 801287c:	d415      	bmi.n	80128aa <GUI_SPRITE_SetPosition+0x252>
 801287e:	ebb4 0209 	subs.w	r2, r4, r9
 8012882:	d412      	bmi.n	80128aa <GUI_SPRITE_SetPosition+0x252>
 8012884:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012886:	f8cd c00c 	str.w	ip, [sp, #12]
 801288a:	f000 f9ab 	bl	8012be4 <GUI_GetBitmapPixelIndex>
 801288e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012892:	b950      	cbnz	r0, 80128aa <GUI_SPRITE_SetPosition+0x252>
 8012894:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012898:	459c      	cmp	ip, r3
 801289a:	db06      	blt.n	80128aa <GUI_SPRITE_SetPosition+0x252>
 801289c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80128a0:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80128a4:	459e      	cmp	lr, r3
 80128a6:	f280 812d 	bge.w	8012b04 <GUI_SPRITE_SetPosition+0x4ac>
 80128aa:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 80128ae:	429f      	cmp	r7, r3
 80128b0:	db17      	blt.n	80128e2 <GUI_SPRITE_SetPosition+0x28a>
 80128b2:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80128b6:	429e      	cmp	r6, r3
 80128b8:	db13      	blt.n	80128e2 <GUI_SPRITE_SetPosition+0x28a>
 80128ba:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80128be:	429f      	cmp	r7, r3
 80128c0:	dc0f      	bgt.n	80128e2 <GUI_SPRITE_SetPosition+0x28a>
 80128c2:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80128c6:	429e      	cmp	r6, r3
 80128c8:	dc0b      	bgt.n	80128e2 <GUI_SPRITE_SetPosition+0x28a>
 80128ca:	9912      	ldr	r1, [sp, #72]	; 0x48
 80128cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80128ce:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
 80128d2:	9100      	str	r1, [sp, #0]
 80128d4:	f853 202e 	ldr.w	r2, [r3, lr, lsl #2]
 80128d8:	9b06      	ldr	r3, [sp, #24]
 80128da:	4638      	mov	r0, r7
 80128dc:	4631      	mov	r1, r6
 80128de:	f7ff fe89 	bl	80125f4 <_SetBkIndexBuffered>
 80128e2:	9905      	ldr	r1, [sp, #20]
 80128e4:	f8c1 8020 	str.w	r8, [r1, #32]
 80128e8:	9b05      	ldr	r3, [sp, #20]
 80128ea:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 80128ee:	9a04      	ldr	r2, [sp, #16]
 80128f0:	4473      	add	r3, lr
 80128f2:	4415      	add	r5, r2
 80128f4:	9305      	str	r3, [sp, #20]
 80128f6:	4417      	add	r7, r2
 80128f8:	e781      	b.n	80127fe <GUI_SPRITE_SetPosition+0x1a6>
 80128fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128fc:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 8012900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012902:	4473      	add	r3, lr
 8012904:	4414      	add	r4, r2
 8012906:	930b      	str	r3, [sp, #44]	; 0x2c
 8012908:	4416      	add	r6, r2
 801290a:	e75d      	b.n	80127c8 <GUI_SPRITE_SetPosition+0x170>
 801290c:	a822      	add	r0, sp, #136	; 0x88
 801290e:	f7fd fc85 	bl	801021c <GUI_ALLOC_UnlockH>
 8012912:	e0ce      	b.n	8012ab2 <GUI_SPRITE_SetPosition+0x45a>
 8012914:	20000034 	.word	0x20000034
 8012918:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801291a:	4294      	cmp	r4, r2
 801291c:	db20      	blt.n	8012960 <GUI_SPRITE_SetPosition+0x308>
 801291e:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 8012922:	4574      	cmp	r4, lr
 8012924:	bfcc      	ite	gt
 8012926:	2300      	movgt	r3, #0
 8012928:	2301      	movle	r3, #1
 801292a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801292c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801292e:	b2db      	uxtb	r3, r3
 8012930:	931d      	str	r3, [sp, #116]	; 0x74
 8012932:	ebc9 0106 	rsb	r1, r9, r6
 8012936:	4417      	add	r7, r2
 8012938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801293a:	910f      	str	r1, [sp, #60]	; 0x3c
 801293c:	4457      	add	r7, sl
 801293e:	9305      	str	r3, [sp, #20]
 8012940:	4615      	mov	r5, r2
 8012942:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012944:	428d      	cmp	r5, r1
 8012946:	d10d      	bne.n	8012964 <GUI_SPRITE_SetPosition+0x30c>
 8012948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801294a:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 801294e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012950:	4473      	add	r3, lr
 8012952:	4414      	add	r4, r2
 8012954:	930c      	str	r3, [sp, #48]	; 0x30
 8012956:	4416      	add	r6, r2
 8012958:	9915      	ldr	r1, [sp, #84]	; 0x54
 801295a:	428c      	cmp	r4, r1
 801295c:	d1dc      	bne.n	8012918 <GUI_SPRITE_SetPosition+0x2c0>
 801295e:	e0a8      	b.n	8012ab2 <GUI_SPRITE_SetPosition+0x45a>
 8012960:	2300      	movs	r3, #0
 8012962:	e7e2      	b.n	801292a <GUI_SPRITE_SetPosition+0x2d2>
 8012964:	4629      	mov	r1, r5
 8012966:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012968:	4622      	mov	r2, r4
 801296a:	f000 f93b 	bl	8012be4 <GUI_GetBitmapPixelIndex>
 801296e:	0e01      	lsrs	r1, r0, #24
 8012970:	29ff      	cmp	r1, #255	; 0xff
 8012972:	9018      	str	r0, [sp, #96]	; 0x60
 8012974:	910b      	str	r1, [sp, #44]	; 0x2c
 8012976:	f000 8093 	beq.w	8012aa0 <GUI_SPRITE_SetPosition+0x448>
 801297a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801297c:	4295      	cmp	r5, r2
 801297e:	ebca 0c07 	rsb	ip, sl, r7
 8012982:	db07      	blt.n	8012994 <GUI_SPRITE_SetPosition+0x33c>
 8012984:	9b07      	ldr	r3, [sp, #28]
 8012986:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 801298a:	429d      	cmp	r5, r3
 801298c:	bfc8      	it	gt
 801298e:	f04f 0b00 	movgt.w	fp, #0
 8012992:	e001      	b.n	8012998 <GUI_SPRITE_SetPosition+0x340>
 8012994:	f04f 0b00 	mov.w	fp, #0
 8012998:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 801299c:	429f      	cmp	r7, r3
 801299e:	fa5f fb8b 	uxtb.w	fp, fp
 80129a2:	db22      	blt.n	80129ea <GUI_SPRITE_SetPosition+0x392>
 80129a4:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 80129a8:	429e      	cmp	r6, r3
 80129aa:	db1e      	blt.n	80129ea <GUI_SPRITE_SetPosition+0x392>
 80129ac:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80129b0:	429f      	cmp	r7, r3
 80129b2:	dc1a      	bgt.n	80129ea <GUI_SPRITE_SetPosition+0x392>
 80129b4:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 80129b8:	429e      	cmp	r6, r3
 80129ba:	dc16      	bgt.n	80129ea <GUI_SPRITE_SetPosition+0x392>
 80129bc:	4631      	mov	r1, r6
 80129be:	9a06      	ldr	r2, [sp, #24]
 80129c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80129c2:	f8cd c00c 	str.w	ip, [sp, #12]
 80129c6:	4638      	mov	r0, r7
 80129c8:	f7ff fd7f 	bl	80124ca <_GetBkIndexAlpha.isra.2>
 80129cc:	f8dd e020 	ldr.w	lr, [sp, #32]
 80129d0:	4b61      	ldr	r3, [pc, #388]	; (8012b58 <GUI_SPRITE_SetPosition+0x500>)
 80129d2:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 80129d6:	691b      	ldr	r3, [r3, #16]
 80129d8:	4680      	mov	r8, r0
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80129e0:	4798      	blx	r3
 80129e2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80129e6:	9019      	str	r0, [sp, #100]	; 0x64
 80129e8:	e001      	b.n	80129ee <GUI_SPRITE_SetPosition+0x396>
 80129ea:	f04f 0800 	mov.w	r8, #0
 80129ee:	f1bb 0f00 	cmp.w	fp, #0
 80129f2:	d00f      	beq.n	8012a14 <GUI_SPRITE_SetPosition+0x3bc>
 80129f4:	ebb5 010a 	subs.w	r1, r5, sl
 80129f8:	d416      	bmi.n	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 80129fa:	ebb4 0209 	subs.w	r2, r4, r9
 80129fe:	d413      	bmi.n	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 8012a00:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012a02:	f8cd c00c 	str.w	ip, [sp, #12]
 8012a06:	f000 f8ed 	bl	8012be4 <GUI_GetBitmapPixelIndex>
 8012a0a:	0e00      	lsrs	r0, r0, #24
 8012a0c:	28ff      	cmp	r0, #255	; 0xff
 8012a0e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8012a12:	d109      	bne.n	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 8012a14:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012a18:	459c      	cmp	ip, r3
 8012a1a:	db05      	blt.n	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 8012a1c:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a22:	4299      	cmp	r1, r3
 8012a24:	f280 8082 	bge.w	8012b2c <GUI_SPRITE_SetPosition+0x4d4>
 8012a28:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	; 0x90
 8012a2c:	429f      	cmp	r7, r3
 8012a2e:	db34      	blt.n	8012a9a <GUI_SPRITE_SetPosition+0x442>
 8012a30:	f9bd 3092 	ldrsh.w	r3, [sp, #146]	; 0x92
 8012a34:	429e      	cmp	r6, r3
 8012a36:	db30      	blt.n	8012a9a <GUI_SPRITE_SetPosition+0x442>
 8012a38:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012a3c:	429f      	cmp	r7, r3
 8012a3e:	dc2c      	bgt.n	8012a9a <GUI_SPRITE_SetPosition+0x442>
 8012a40:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012a44:	429e      	cmp	r6, r3
 8012a46:	dc28      	bgt.n	8012a9a <GUI_SPRITE_SetPosition+0x442>
 8012a48:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8012a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a4e:	f8df b108 	ldr.w	fp, [pc, #264]	; 8012b58 <GUI_SPRITE_SetPosition+0x500>
 8012a52:	f02e 407f 	bic.w	r0, lr, #4278190080	; 0xff000000
 8012a56:	b191      	cbz	r1, 8012a7e <GUI_SPRITE_SetPosition+0x426>
 8012a58:	9a08      	ldr	r2, [sp, #32]
 8012a5a:	f85b 3022 	ldr.w	r3, [fp, r2, lsl #2]
 8012a5e:	691b      	ldr	r3, [r3, #16]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	4798      	blx	r3
 8012a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a66:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012a68:	43da      	mvns	r2, r3
 8012a6a:	b2d2      	uxtb	r2, r2
 8012a6c:	f7fa fdde 	bl	800d62c <GUI__MixColors>
 8012a70:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012a74:	f85b 302e 	ldr.w	r3, [fp, lr, lsl #2]
 8012a78:	691b      	ldr	r3, [r3, #16]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	e004      	b.n	8012a88 <GUI_SPRITE_SetPosition+0x430>
 8012a7e:	9908      	ldr	r1, [sp, #32]
 8012a80:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8012a84:	691b      	ldr	r3, [r3, #16]
 8012a86:	685b      	ldr	r3, [r3, #4]
 8012a88:	4798      	blx	r3
 8012a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012a8c:	9300      	str	r3, [sp, #0]
 8012a8e:	4602      	mov	r2, r0
 8012a90:	4631      	mov	r1, r6
 8012a92:	4638      	mov	r0, r7
 8012a94:	9b06      	ldr	r3, [sp, #24]
 8012a96:	f7ff fdad 	bl	80125f4 <_SetBkIndexBuffered>
 8012a9a:	9905      	ldr	r1, [sp, #20]
 8012a9c:	f8c1 8020 	str.w	r8, [r1, #32]
 8012aa0:	9b05      	ldr	r3, [sp, #20]
 8012aa2:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8012aa6:	9a04      	ldr	r2, [sp, #16]
 8012aa8:	4473      	add	r3, lr
 8012aaa:	4415      	add	r5, r2
 8012aac:	9305      	str	r3, [sp, #20]
 8012aae:	4417      	add	r7, r2
 8012ab0:	e747      	b.n	8012942 <GUI_SPRITE_SetPosition+0x2ea>
 8012ab2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012ab4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012ab6:	6818      	ldr	r0, [r3, #0]
 8012ab8:	f7ff fdbe 	bl	8012638 <_ReleaseBuffer.isra.6>
 8012abc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012abe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012ac0:	6818      	ldr	r0, [r3, #0]
 8012ac2:	f7ff fdb9 	bl	8012638 <_ReleaseBuffer.isra.6>
 8012ac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012ac8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012aca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012acc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012ad0:	809a      	strh	r2, [r3, #4]
 8012ad2:	440a      	add	r2, r1
 8012ad4:	3a01      	subs	r2, #1
 8012ad6:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012ada:	811a      	strh	r2, [r3, #8]
 8012adc:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8012ae0:	f8dd e078 	ldr.w	lr, [sp, #120]	; 0x78
 8012ae4:	9908      	ldr	r1, [sp, #32]
 8012ae6:	4472      	add	r2, lr
 8012ae8:	815a      	strh	r2, [r3, #10]
 8012aea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012aec:	4291      	cmp	r1, r2
 8012aee:	d002      	beq.n	8012af6 <GUI_SPRITE_SetPosition+0x49e>
 8012af0:	4b1a      	ldr	r3, [pc, #104]	; (8012b5c <GUI_SPRITE_SetPosition+0x504>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	745a      	strb	r2, [r3, #17]
 8012af6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012af8:	f7f9 f9de 	bl	800beb8 <GUI_MEMDEV_Select>
 8012afc:	a823      	add	r0, sp, #140	; 0x8c
 8012afe:	f7fd fb8d 	bl	801021c <GUI_ALLOC_UnlockH>
 8012b02:	e026      	b.n	8012b52 <GUI_SPRITE_SetPosition+0x4fa>
 8012b04:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012b08:	459c      	cmp	ip, r3
 8012b0a:	f73f aece 	bgt.w	80128aa <GUI_SPRITE_SetPosition+0x252>
 8012b0e:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012b12:	459e      	cmp	lr, r3
 8012b14:	f73f aec9 	bgt.w	80128aa <GUI_SPRITE_SetPosition+0x252>
 8012b18:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	9100      	str	r1, [sp, #0]
 8012b1e:	6a1a      	ldr	r2, [r3, #32]
 8012b20:	9b06      	ldr	r3, [sp, #24]
 8012b22:	4660      	mov	r0, ip
 8012b24:	4671      	mov	r1, lr
 8012b26:	f7ff fd65 	bl	80125f4 <_SetBkIndexBuffered>
 8012b2a:	e6be      	b.n	80128aa <GUI_SPRITE_SetPosition+0x252>
 8012b2c:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 8012b30:	459c      	cmp	ip, r3
 8012b32:	f73f af79 	bgt.w	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 8012b36:	f9bd 3096 	ldrsh.w	r3, [sp, #150]	; 0x96
 8012b3a:	4299      	cmp	r1, r3
 8012b3c:	f73f af74 	bgt.w	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 8012b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b42:	9b05      	ldr	r3, [sp, #20]
 8012b44:	9200      	str	r2, [sp, #0]
 8012b46:	6a1a      	ldr	r2, [r3, #32]
 8012b48:	9b06      	ldr	r3, [sp, #24]
 8012b4a:	4660      	mov	r0, ip
 8012b4c:	f7ff fd52 	bl	80125f4 <_SetBkIndexBuffered>
 8012b50:	e76a      	b.n	8012a28 <GUI_SPRITE_SetPosition+0x3d0>
 8012b52:	b027      	add	sp, #156	; 0x9c
 8012b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b58:	20026d44 	.word	0x20026d44
 8012b5c:	20000034 	.word	0x20000034

08012b60 <GUI_GetBitmapPixelIndexEx>:
 8012b60:	b510      	push	{r4, lr}
 8012b62:	2804      	cmp	r0, #4
 8012b64:	9c02      	ldr	r4, [sp, #8]
 8012b66:	d025      	beq.n	8012bb4 <GUI_GetBitmapPixelIndexEx+0x54>
 8012b68:	dc0f      	bgt.n	8012b8a <GUI_GetBitmapPixelIndexEx+0x2a>
 8012b6a:	2801      	cmp	r0, #1
 8012b6c:	d017      	beq.n	8012b9e <GUI_GetBitmapPixelIndexEx+0x3e>
 8012b6e:	2802      	cmp	r0, #2
 8012b70:	d136      	bne.n	8012be0 <GUI_GetBitmapPixelIndexEx+0x80>
 8012b72:	0898      	lsrs	r0, r3, #2
 8012b74:	fb04 2101 	mla	r1, r4, r1, r2
 8012b78:	ea6f 0343 	mvn.w	r3, r3, lsl #1
 8012b7c:	5c08      	ldrb	r0, [r1, r0]
 8012b7e:	f003 0306 	and.w	r3, r3, #6
 8012b82:	40d8      	lsrs	r0, r3
 8012b84:	f000 0003 	and.w	r0, r0, #3
 8012b88:	bd10      	pop	{r4, pc}
 8012b8a:	2810      	cmp	r0, #16
 8012b8c:	d01c      	beq.n	8012bc8 <GUI_GetBitmapPixelIndexEx+0x68>
 8012b8e:	2820      	cmp	r0, #32
 8012b90:	d020      	beq.n	8012bd4 <GUI_GetBitmapPixelIndexEx+0x74>
 8012b92:	2808      	cmp	r0, #8
 8012b94:	d124      	bne.n	8012be0 <GUI_GetBitmapPixelIndexEx+0x80>
 8012b96:	fb04 2101 	mla	r1, r4, r1, r2
 8012b9a:	5cc8      	ldrb	r0, [r1, r3]
 8012b9c:	bd10      	pop	{r4, pc}
 8012b9e:	08d8      	lsrs	r0, r3, #3
 8012ba0:	fb04 2101 	mla	r1, r4, r1, r2
 8012ba4:	43db      	mvns	r3, r3
 8012ba6:	5c08      	ldrb	r0, [r1, r0]
 8012ba8:	f003 0307 	and.w	r3, r3, #7
 8012bac:	40d8      	lsrs	r0, r3
 8012bae:	f000 0001 	and.w	r0, r0, #1
 8012bb2:	bd10      	pop	{r4, pc}
 8012bb4:	0858      	lsrs	r0, r3, #1
 8012bb6:	fb04 2101 	mla	r1, r4, r1, r2
 8012bba:	07db      	lsls	r3, r3, #31
 8012bbc:	5c08      	ldrb	r0, [r1, r0]
 8012bbe:	bf4c      	ite	mi
 8012bc0:	f000 000f 	andmi.w	r0, r0, #15
 8012bc4:	0900      	lsrpl	r0, r0, #4
 8012bc6:	bd10      	pop	{r4, pc}
 8012bc8:	1049      	asrs	r1, r1, #1
 8012bca:	fb04 3301 	mla	r3, r4, r1, r3
 8012bce:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8012bd2:	bd10      	pop	{r4, pc}
 8012bd4:	1089      	asrs	r1, r1, #2
 8012bd6:	fb04 3301 	mla	r3, r4, r1, r3
 8012bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012bde:	bd10      	pop	{r4, pc}
 8012be0:	2000      	movs	r0, #0
 8012be2:	bd10      	pop	{r4, pc}

08012be4 <GUI_GetBitmapPixelIndex>:
 8012be4:	b513      	push	{r0, r1, r4, lr}
 8012be6:	460b      	mov	r3, r1
 8012be8:	4604      	mov	r4, r0
 8012bea:	b130      	cbz	r0, 8012bfa <GUI_GetBitmapPixelIndex+0x16>
 8012bec:	88c0      	ldrh	r0, [r0, #6]
 8012bee:	88a1      	ldrh	r1, [r4, #4]
 8012bf0:	9200      	str	r2, [sp, #0]
 8012bf2:	68a2      	ldr	r2, [r4, #8]
 8012bf4:	f7ff ffb4 	bl	8012b60 <GUI_GetBitmapPixelIndexEx>
 8012bf8:	e7ff      	b.n	8012bfa <GUI_GetBitmapPixelIndex+0x16>
 8012bfa:	b002      	add	sp, #8
 8012bfc:	bd10      	pop	{r4, pc}
	...

08012c00 <__libc_init_array>:
 8012c00:	b570      	push	{r4, r5, r6, lr}
 8012c02:	4e0d      	ldr	r6, [pc, #52]	; (8012c38 <__libc_init_array+0x38>)
 8012c04:	4c0d      	ldr	r4, [pc, #52]	; (8012c3c <__libc_init_array+0x3c>)
 8012c06:	1ba4      	subs	r4, r4, r6
 8012c08:	10a4      	asrs	r4, r4, #2
 8012c0a:	2500      	movs	r5, #0
 8012c0c:	42a5      	cmp	r5, r4
 8012c0e:	d109      	bne.n	8012c24 <__libc_init_array+0x24>
 8012c10:	4e0b      	ldr	r6, [pc, #44]	; (8012c40 <__libc_init_array+0x40>)
 8012c12:	4c0c      	ldr	r4, [pc, #48]	; (8012c44 <__libc_init_array+0x44>)
 8012c14:	f000 f854 	bl	8012cc0 <_init>
 8012c18:	1ba4      	subs	r4, r4, r6
 8012c1a:	10a4      	asrs	r4, r4, #2
 8012c1c:	2500      	movs	r5, #0
 8012c1e:	42a5      	cmp	r5, r4
 8012c20:	d105      	bne.n	8012c2e <__libc_init_array+0x2e>
 8012c22:	bd70      	pop	{r4, r5, r6, pc}
 8012c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012c28:	4798      	blx	r3
 8012c2a:	3501      	adds	r5, #1
 8012c2c:	e7ee      	b.n	8012c0c <__libc_init_array+0xc>
 8012c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012c32:	4798      	blx	r3
 8012c34:	3501      	adds	r5, #1
 8012c36:	e7f2      	b.n	8012c1e <__libc_init_array+0x1e>
 8012c38:	080147dc 	.word	0x080147dc
 8012c3c:	080147dc 	.word	0x080147dc
 8012c40:	080147dc 	.word	0x080147dc
 8012c44:	080147e0 	.word	0x080147e0

08012c48 <memcmp>:
 8012c48:	b510      	push	{r4, lr}
 8012c4a:	3901      	subs	r1, #1
 8012c4c:	4402      	add	r2, r0
 8012c4e:	4290      	cmp	r0, r2
 8012c50:	d101      	bne.n	8012c56 <memcmp+0xe>
 8012c52:	2000      	movs	r0, #0
 8012c54:	bd10      	pop	{r4, pc}
 8012c56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012c5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012c5e:	42a3      	cmp	r3, r4
 8012c60:	d0f5      	beq.n	8012c4e <memcmp+0x6>
 8012c62:	1b18      	subs	r0, r3, r4
 8012c64:	bd10      	pop	{r4, pc}

08012c66 <memcpy>:
 8012c66:	b510      	push	{r4, lr}
 8012c68:	1e43      	subs	r3, r0, #1
 8012c6a:	440a      	add	r2, r1
 8012c6c:	4291      	cmp	r1, r2
 8012c6e:	d100      	bne.n	8012c72 <memcpy+0xc>
 8012c70:	bd10      	pop	{r4, pc}
 8012c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c7a:	e7f7      	b.n	8012c6c <memcpy+0x6>

08012c7c <memmove>:
 8012c7c:	4288      	cmp	r0, r1
 8012c7e:	b510      	push	{r4, lr}
 8012c80:	eb01 0302 	add.w	r3, r1, r2
 8012c84:	d803      	bhi.n	8012c8e <memmove+0x12>
 8012c86:	1e42      	subs	r2, r0, #1
 8012c88:	4299      	cmp	r1, r3
 8012c8a:	d10c      	bne.n	8012ca6 <memmove+0x2a>
 8012c8c:	bd10      	pop	{r4, pc}
 8012c8e:	4298      	cmp	r0, r3
 8012c90:	d2f9      	bcs.n	8012c86 <memmove+0xa>
 8012c92:	1881      	adds	r1, r0, r2
 8012c94:	1ad2      	subs	r2, r2, r3
 8012c96:	42d3      	cmn	r3, r2
 8012c98:	d100      	bne.n	8012c9c <memmove+0x20>
 8012c9a:	bd10      	pop	{r4, pc}
 8012c9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ca0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012ca4:	e7f7      	b.n	8012c96 <memmove+0x1a>
 8012ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012caa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012cae:	e7eb      	b.n	8012c88 <memmove+0xc>

08012cb0 <memset>:
 8012cb0:	4402      	add	r2, r0
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d100      	bne.n	8012cba <memset+0xa>
 8012cb8:	4770      	bx	lr
 8012cba:	f803 1b01 	strb.w	r1, [r3], #1
 8012cbe:	e7f9      	b.n	8012cb4 <memset+0x4>

08012cc0 <_init>:
 8012cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cc2:	bf00      	nop
 8012cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cc6:	bc08      	pop	{r3}
 8012cc8:	469e      	mov	lr, r3
 8012cca:	4770      	bx	lr

08012ccc <_fini>:
 8012ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cce:	bf00      	nop
 8012cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cd2:	bc08      	pop	{r3}
 8012cd4:	469e      	mov	lr, r3
 8012cd6:	4770      	bx	lr
