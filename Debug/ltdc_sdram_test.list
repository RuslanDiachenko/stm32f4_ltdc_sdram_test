
ltdc_sdram_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038ec  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098f8  080098f8  000198f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009900  08009900  00019900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009904  08009904  00019904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08009908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
  8 .bss          00000224  20000094  20000094  00020094  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  200002b8  200002b8  00020094  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b16c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003245  00000000  00000000  0003b230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f28  00000000  00000000  0003e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d80  00000000  00000000  0003f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007cc1  00000000  00000000  00040120  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004ac2  00000000  00000000  00047de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004c8a3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004050  00000000  00000000  0004c920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005ff4 	.word	0x08005ff4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08005ff4 	.word	0x08005ff4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_Init+0x40>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005b0:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x40>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <HAL_Init+0x40>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c8:	2003      	movs	r0, #3
 80005ca:	f000 f947 	bl	800085c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f808 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d4:	f004 fad8 	bl	8004b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f95f 	bl	80008c6 <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000620:	f000 f927 	bl	8000872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000002c 	.word	0x2000002c
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004
 8000668:	200000c8 	.word	0x200000c8

0800066c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return uwTick;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <HAL_GetTick+0x14>)
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	200000c8 	.word	0x200000c8

08000684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800068c:	f7ff ffee 	bl	800066c <HAL_GetTick>
 8000690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800069c:	d005      	beq.n	80006aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_Delay+0x40>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006aa:	bf00      	nop
 80006ac:	f7ff ffde 	bl	800066c <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d3f7      	bcc.n	80006ac <HAL_Delay+0x28>
  {
  }
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000004 	.word	0x20000004

080006c8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <NVIC_EnableIRQ+0x30>)
 8000738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073c:	095b      	lsrs	r3, r3, #5
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	f002 021f 	and.w	r2, r2, #31
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	da0b      	bge.n	800078c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <NVIC_SetPriority+0x4c>)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	f003 030f 	and.w	r3, r3, #15
 800077c:	3b04      	subs	r3, #4
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078a:	e009      	b.n	80007a0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	4908      	ldr	r1, [pc, #32]	; (80007b0 <NVIC_SetPriority+0x50>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	2201      	movs	r2, #1
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	1e5a      	subs	r2, r3, #1
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	401a      	ands	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fa:	2101      	movs	r1, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	1e59      	subs	r1, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	4313      	orrs	r3, r2
         );
}
 800080a:	4618      	mov	r0, r3
 800080c:	3724      	adds	r7, #36	; 0x24
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000828:	d301      	bcc.n	800082e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800082a:	2301      	movs	r3, #1
 800082c:	e00f      	b.n	800084e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <SysTick_Config+0x40>)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000836:	210f      	movs	r1, #15
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800083c:	f7ff ff90 	bl	8000760 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <SysTick_Config+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <SysTick_Config+0x40>)
 8000848:	2207      	movs	r2, #7
 800084a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	e000e010 	.word	0xe000e010

0800085c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff2f 	bl	80006c8 <NVIC_SetPriorityGrouping>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000884:	f7ff ff44 	bl	8000710 <NVIC_GetPriorityGrouping>
 8000888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6978      	ldr	r0, [r7, #20]
 8000890:	f7ff ff90 	bl	80007b4 <NVIC_EncodePriority>
 8000894:	4602      	mov	r2, r0
 8000896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff5f 	bl	8000760 <NVIC_SetPriority>
}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff37 	bl	800072c <NVIC_EnableIRQ>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffa2 	bl	8000818 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e03b      	b.n	8000968 <HAL_DMA2D_Init+0x8a>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d106      	bne.n	800090a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f004 f967 	bl	8004bd8 <HAL_DMA2D_MspInit>
  }

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2202      	movs	r2, #2
 800090e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	6852      	ldr	r2, [r2, #4]
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000932:	f022 0107 	bic.w	r1, r2, #7
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	6892      	ldr	r2, [r2, #8]
 800093a:	430a      	orrs	r2, r1
 800093c:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800094c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	68c9      	ldr	r1, [r1, #12]
 8000954:	430b      	orrs	r3, r1
 8000956:	6413      	str	r3, [r2, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2201      	movs	r2, #1
 8000962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000984:	2b01      	cmp	r3, #1
 8000986:	d101      	bne.n	800098c <HAL_DMA2D_Start+0x1c>
 8000988:	2302      	movs	r3, #2
 800098a:	e018      	b.n	80009be <HAL_DMA2D_Start+0x4e>
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	2201      	movs	r2, #1
 8000990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2202      	movs	r2, #2
 8000998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f000 fa98 	bl	8000edc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	f042 0201 	orr.w	r2, r2, #1
 80009ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0U;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d056      	beq.n	8000a94 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80009e6:	f7ff fe41 	bl	800066c <HAL_GetTick>
 80009ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80009ec:	e04b      	b.n	8000a86 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d023      	beq.n	8000a48 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	f003 0320 	and.w	r3, r3, #32
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d005      	beq.n	8000a16 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a0e:	f043 0202 	orr.w	r2, r3, #2
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a24:	f043 0201 	orr.w	r2, r3, #1
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2221      	movs	r2, #33	; 0x21
 8000a32:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2204      	movs	r2, #4
 8000a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e0a2      	b.n	8000b8e <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a4e:	d01a      	beq.n	8000a86 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <HAL_DMA2D_PollForTransfer+0xa0>
 8000a56:	f7ff fe09 	bl	800066c <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	1ad2      	subs	r2, r2, r3
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d90f      	bls.n	8000a86 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a6a:	f043 0220 	orr.w	r2, r3, #32
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2203      	movs	r2, #3
 8000a76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e083      	b.n	8000b8e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0ac      	beq.n	80009ee <HAL_DMA2D_PollForTransfer+0x28>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d106      	bne.n	8000ab0 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa8:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  ||
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d061      	beq.n	8000b74 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ab0:	f7ff fddc 	bl	800066c <HAL_GetTick>
 8000ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8000ab6:	e056      	b.n	8000b66 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d02e      	beq.n	8000b28 <HAL_DMA2D_PollForTransfer+0x162>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d005      	beq.n	8000ae0 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad8:	f043 0204 	orr.w	r2, r3, #4
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d005      	beq.n	8000af6 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aee:	f043 0202 	orr.w	r2, r3, #2
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2229      	movs	r2, #41	; 0x29
 8000b12:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2204      	movs	r2, #4
 8000b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e032      	b.n	8000b8e <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b2e:	d01a      	beq.n	8000b66 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d007      	beq.n	8000b46 <HAL_DMA2D_PollForTransfer+0x180>
 8000b36:	f7ff fd99 	bl	800066c <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d90f      	bls.n	8000b66 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4a:	f043 0220 	orr.w	r2, r3, #32
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2203      	movs	r2, #3
 8000b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000b62:	2303      	movs	r3, #3
 8000b64:	e013      	b.n	8000b8e <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0a1      	beq.n	8000ab8 <HAL_DMA2D_PollForTransfer+0xf2>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2212      	movs	r2, #18
 8000b7a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d026      	beq.n	8000c06 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d021      	beq.n	8000c06 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000bd0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2204      	movs	r2, #4
 8000bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d026      	beq.n	8000c5e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d021      	beq.n	8000c5e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c28:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2220      	movs	r2, #32
 8000c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c36:	f043 0202 	orr.w	r2, r3, #2
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2204      	movs	r2, #4
 8000c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d026      	beq.n	8000cb6 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d021      	beq.n	8000cb6 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c80:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2208      	movs	r2, #8
 8000c88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8e:	f043 0204 	orr.w	r2, r3, #4
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d013      	beq.n	8000ce8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00e      	beq.n	8000ce8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 f853 	bl	8000d8e <HAL_DMA2D_LineEventCallback>
    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d024      	beq.n	8000d3c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d01f      	beq.n	8000d3c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d0a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2202      	movs	r2, #2
 8000d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01f      	beq.n	8000d86 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d01a      	beq.n	8000d86 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d5e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2210      	movs	r2, #16
 8000d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f80e 	bl	8000da2 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
  uint32_t regValue = 0U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d101      	bne.n	8000de8 <HAL_DMA2D_ConfigLayer+0x30>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e070      	b.n	8000eca <HAL_DMA2D_ConfigLayer+0x112>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */

  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b0a      	cmp	r3, #10
 8000dfe:	d003      	beq.n	8000e08 <HAL_DMA2D_ConfigLayer+0x50>
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d10c      	bne.n	8000e22 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	431a      	orrs	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e00a      	b.n	8000e38 <HAL_DMA2D_ConfigLayer+0x80>
  }
  else
  {
    regValue =  pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	041b      	lsls	r3, r3, #16
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	061b      	lsls	r3, r3, #24
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d11e      	bne.n	8000e7c <HAL_DMA2D_ConfigLayer+0xc4>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_DMA2D_ConfigLayer+0x120>)
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	68f9      	ldr	r1, [r7, #12]
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	6253      	str	r3, [r2, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b0a      	cmp	r3, #10
 8000e62:	d003      	beq.n	8000e6c <HAL_DMA2D_ConfigLayer+0xb4>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b09      	cmp	r3, #9
 8000e6a:	d125      	bne.n	8000eb8 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	68d2      	ldr	r2, [r2, #12]
 8000e74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
 8000e7a:	e01d      	b.n	8000eb8 <HAL_DMA2D_ConfigLayer+0x100>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA), regValue);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	69d9      	ldr	r1, [r3, #28]
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_DMA2D_ConfigLayer+0x120>)
 8000e88:	400b      	ands	r3, r1
 8000e8a:	68f9      	ldr	r1, [r7, #12]
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	61d3      	str	r3, [r2, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d003      	beq.n	8000eaa <HAL_DMA2D_ConfigLayer+0xf2>
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b09      	cmp	r3, #9
 8000ea8:	d106      	bne.n	8000eb8 <HAL_DMA2D_ConfigLayer+0x100>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	68d2      	ldr	r2, [r2, #12]
 8000eb2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000eb6:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	00fcfff0 	.word	0x00fcfff0

08000edc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL)));
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f08:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	0410      	lsls	r0, r2, #16
 8000f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f12:	4302      	orrs	r2, r0
 8000f14:	430a      	orrs	r2, r1
 8000f16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000f28:	d174      	bne.n	8001014 <DMA2D_SetConfig+0x138>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000f30:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000f38:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000f40:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d108      	bne.n	8000f62 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f60:	e053      	b.n	800100a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d106      	bne.n	8000f78 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
 8000f76:	e048      	b.n	800100a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d111      	bne.n	8000fa4 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19U);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	0cdb      	lsrs	r3, r3, #19
 8000f84:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	0a9b      	lsrs	r3, r3, #10
 8000f8a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	08db      	lsrs	r3, r3, #3
 8000f90:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	015a      	lsls	r2, r3, #5
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	02db      	lsls	r3, r3, #11
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	e032      	b.n	800100a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d117      	bne.n	8000fdc <DMA2D_SetConfig+0x100>
    {
      tmp1 = (tmp1 >> 31U);
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	0fdb      	lsrs	r3, r3, #31
 8000fb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	0cdb      	lsrs	r3, r3, #19
 8000fb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	0adb      	lsrs	r3, r3, #11
 8000fbc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	015a      	lsls	r2, r3, #5
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	029b      	lsls	r3, r3, #10
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	03db      	lsls	r3, r3, #15
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fda:	e016      	b.n	800100a <DMA2D_SetConfig+0x12e>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	0f1b      	lsrs	r3, r3, #28
 8000fe0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	0d1b      	lsrs	r3, r3, #20
 8000fe6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	0b1b      	lsrs	r3, r3, #12
 8000fec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	011a      	lsls	r2, r3, #4
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	031b      	lsls	r3, r3, #12
 8001002:	431a      	orrs	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	4313      	orrs	r3, r2
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001012:	e003      	b.n	800101c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	60da      	str	r2, [r3, #12]
}
 800101c:	bf00      	nop
 800101e:	372c      	adds	r7, #44	; 0x2c
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e177      	b.n	8001334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8166 	bne.w	800132e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x4a>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b12      	cmp	r3, #18
 8001070:	d123      	bne.n	80010ba <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	69b9      	ldr	r1, [r7, #24]
 80010b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0203 	and.w	r2, r3, #3
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00b      	beq.n	800110e <HAL_GPIO_Init+0xe6>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001102:	2b11      	cmp	r3, #17
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b12      	cmp	r3, #18
 800110c:	d130      	bne.n	8001170 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 0201 	and.w	r2, r3, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80c0 	beq.w	800132e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4a65      	ldr	r2, [pc, #404]	; (8001348 <HAL_GPIO_Init+0x320>)
 80011b4:	4b64      	ldr	r3, [pc, #400]	; (8001348 <HAL_GPIO_Init+0x320>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b62      	ldr	r3, [pc, #392]	; (8001348 <HAL_GPIO_Init+0x320>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a60      	ldr	r2, [pc, #384]	; (800134c <HAL_GPIO_Init+0x324>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_GPIO_Init+0x328>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d037      	beq.n	8001266 <HAL_GPIO_Init+0x23e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a56      	ldr	r2, [pc, #344]	; (8001354 <HAL_GPIO_Init+0x32c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d031      	beq.n	8001262 <HAL_GPIO_Init+0x23a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a55      	ldr	r2, [pc, #340]	; (8001358 <HAL_GPIO_Init+0x330>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d02b      	beq.n	800125e <HAL_GPIO_Init+0x236>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a54      	ldr	r2, [pc, #336]	; (800135c <HAL_GPIO_Init+0x334>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d025      	beq.n	800125a <HAL_GPIO_Init+0x232>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a53      	ldr	r2, [pc, #332]	; (8001360 <HAL_GPIO_Init+0x338>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d01f      	beq.n	8001256 <HAL_GPIO_Init+0x22e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_GPIO_Init+0x33c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x22a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <HAL_GPIO_Init+0x340>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x226>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x344>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x222>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x348>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x21e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_GPIO_Init+0x34c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x21a>
 800123e:	2309      	movs	r3, #9
 8001240:	e012      	b.n	8001268 <HAL_GPIO_Init+0x240>
 8001242:	230a      	movs	r3, #10
 8001244:	e010      	b.n	8001268 <HAL_GPIO_Init+0x240>
 8001246:	2308      	movs	r3, #8
 8001248:	e00e      	b.n	8001268 <HAL_GPIO_Init+0x240>
 800124a:	2307      	movs	r3, #7
 800124c:	e00c      	b.n	8001268 <HAL_GPIO_Init+0x240>
 800124e:	2306      	movs	r3, #6
 8001250:	e00a      	b.n	8001268 <HAL_GPIO_Init+0x240>
 8001252:	2305      	movs	r3, #5
 8001254:	e008      	b.n	8001268 <HAL_GPIO_Init+0x240>
 8001256:	2304      	movs	r3, #4
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x240>
 800125a:	2303      	movs	r3, #3
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x240>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x240>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x240>
 8001266:	2300      	movs	r3, #0
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f002 0203 	and.w	r2, r2, #3
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4093      	lsls	r3, r2
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001278:	4934      	ldr	r1, [pc, #208]	; (800134c <HAL_GPIO_Init+0x324>)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001286:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <HAL_GPIO_Init+0x350>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012aa:	4a33      	ldr	r2, [pc, #204]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b0:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d4:	4a28      	ldr	r2, [pc, #160]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_GPIO_Init+0x350>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_GPIO_Init+0x350>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x350>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_GPIO_Init+0x350>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3301      	adds	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b0f      	cmp	r3, #15
 8001338:	f67f ae84 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800133c:	bf00      	nop
 800133e:	3724      	adds	r7, #36	; 0x24
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40022000 	.word	0x40022000
 8001374:	40022400 	.word	0x40022400
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0c8      	b.n	800158c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f003 fc0a 	bl	8004c28 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800142c:	f001 fe8e 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8001430:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	4a57      	ldr	r2, [pc, #348]	; (8001594 <HAL_I2C_Init+0x1b4>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4952      	ldr	r1, [pc, #328]	; (8001598 <HAL_I2C_Init+0x1b8>)
 8001450:	428b      	cmp	r3, r1
 8001452:	d802      	bhi.n	800145a <HAL_I2C_Init+0x7a>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	e009      	b.n	800146e <HAL_I2C_Init+0x8e>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	494d      	ldr	r1, [pc, #308]	; (800159c <HAL_I2C_Init+0x1bc>)
 8001466:	fba1 1303 	umull	r1, r3, r1, r3
 800146a:	099b      	lsrs	r3, r3, #6
 800146c:	3301      	adds	r3, #1
 800146e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6819      	ldr	r1, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a47      	ldr	r2, [pc, #284]	; (8001598 <HAL_I2C_Init+0x1b8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d812      	bhi.n	80014a4 <HAL_I2C_Init+0xc4>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148e:	2b03      	cmp	r3, #3
 8001490:	d906      	bls.n	80014a0 <HAL_I2C_Init+0xc0>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	fbb2 f3f3 	udiv	r3, r2, r3
 800149e:	e045      	b.n	800152c <HAL_I2C_Init+0x14c>
 80014a0:	2304      	movs	r3, #4
 80014a2:	e043      	b.n	800152c <HAL_I2C_Init+0x14c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10f      	bne.n	80014cc <HAL_I2C_Init+0xec>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e010      	b.n	80014ee <HAL_I2C_Init+0x10e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009a      	lsls	r2, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x116>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e01a      	b.n	800152c <HAL_I2C_Init+0x14c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10a      	bne.n	8001514 <HAL_I2C_Init+0x134>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001512:	e00b      	b.n	800152c <HAL_I2C_Init+0x14c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009a      	lsls	r2, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800152c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	69d1      	ldr	r1, [r2, #28]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6a12      	ldr	r2, [r2, #32]
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6911      	ldr	r1, [r2, #16]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68d2      	ldr	r2, [r2, #12]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6951      	ldr	r1, [r2, #20]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6992      	ldr	r2, [r2, #24]
 800155a:	430a      	orrs	r2, r1
 800155c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	f042 0201 	orr.w	r2, r2, #1
 800156c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	431bde83 	.word	0x431bde83
 8001598:	000186a0 	.word	0x000186a0
 800159c:	10624dd3 	.word	0x10624dd3

080015a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	461a      	mov	r2, r3
 80015ac:	460b      	mov	r3, r1
 80015ae:	817b      	strh	r3, [r7, #10]
 80015b0:	4613      	mov	r3, r2
 80015b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015b8:	f7ff f858 	bl	800066c <HAL_GetTick>
 80015bc:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	f040 80ee 	bne.w	80017a8 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2319      	movs	r3, #25
 80015d2:	2201      	movs	r2, #1
 80015d4:	4977      	ldr	r1, [pc, #476]	; (80017b4 <HAL_I2C_Master_Transmit+0x214>)
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fc6c 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80015e2:	2302      	movs	r3, #2
 80015e4:	e0e1      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_I2C_Master_Transmit+0x54>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0da      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b01      	cmp	r3, #1
 8001608:	d007      	beq.n	800161a <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001628:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2210      	movs	r2, #16
 8001636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a5a      	ldr	r2, [pc, #360]	; (80017b8 <HAL_I2C_Master_Transmit+0x218>)
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001656:	b29a      	uxth	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800165c:	8979      	ldrh	r1, [r7, #10]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 fadc 	bl	8001c20 <I2C_MasterRequestWrite>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00f      	beq.n	800168e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b04      	cmp	r3, #4
 8001674:	d105      	bne.n	8001682 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e093      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e08d      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80016a4:	e066      	b.n	8001774 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fcc1 	bl	8002032 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00f      	beq.n	80016d6 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d109      	bne.n	80016d2 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016cc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06b      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e069      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	1c58      	adds	r0, r3, #1
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6248      	str	r0, [r1, #36]	; 0x24
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	3b01      	subs	r3, #1
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d119      	bne.n	8001744 <HAL_I2C_Master_Transmit+0x1a4>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	d015      	beq.n	8001744 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	1c58      	adds	r0, r3, #1
 8001722:	68f9      	ldr	r1, [r7, #12]
 8001724:	6248      	str	r0, [r1, #36]	; 0x24
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	6a39      	ldr	r1, [r7, #32]
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 fcaf 	bl	80020ac <I2C_WaitOnBTFFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00f      	beq.n	8001774 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	2b04      	cmp	r3, #4
 800175a:	d109      	bne.n	8001770 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800176a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e01c      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e01a      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	2b00      	cmp	r3, #0
 800177a:	d194      	bne.n	80016a6 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	00100002 	.word	0x00100002
 80017b8:	ffff0000 	.word	0xffff0000

080017bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	460b      	mov	r3, r1
 80017ca:	817b      	strh	r3, [r7, #10]
 80017cc:	4613      	mov	r3, r2
 80017ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017d4:	f7fe ff4a 	bl	800066c <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	f040 8215 	bne.w	8001c12 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2319      	movs	r3, #25
 80017ee:	2201      	movs	r2, #1
 80017f0:	4985      	ldr	r1, [pc, #532]	; (8001a08 <HAL_I2C_Master_Receive+0x24c>)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fb5e 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	e208      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_I2C_Master_Receive+0x54>
 800180c:	2302      	movs	r3, #2
 800180e:	e201      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d007      	beq.n	8001836 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2222      	movs	r2, #34	; 0x22
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2210      	movs	r2, #16
 8001852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	893a      	ldrh	r2, [r7, #8]
 8001866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4a68      	ldr	r2, [pc, #416]	; (8001a0c <HAL_I2C_Master_Receive+0x250>)
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001878:	8979      	ldrh	r1, [r7, #10]
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fa50 	bl	8001d24 <I2C_MasterRequestRead>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00f      	beq.n	80018aa <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b04      	cmp	r3, #4
 8001890:	d105      	bne.n	800189e <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1ba      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1b4      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d113      	bne.n	80018da <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e188      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d11b      	bne.n	800191a <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e168      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	2b02      	cmp	r3, #2
 8001920:	d11b      	bne.n	800195a <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001930:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	e148      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001980:	e134      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	2b03      	cmp	r3, #3
 8001988:	f200 80eb 	bhi.w	8001b62 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001990:	2b01      	cmp	r3, #1
 8001992:	d127      	bne.n	80019e4 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 fbc4 	bl	8002126 <I2C_WaitOnRXNEFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	d101      	bne.n	80019b0 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e131      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e12f      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	1c59      	adds	r1, r3, #1
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	6251      	str	r1, [r2, #36]	; 0x24
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	6912      	ldr	r2, [r2, #16]
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019e2:	e103      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d14a      	bne.n	8001a82 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	2200      	movs	r2, #0
 80019f4:	4906      	ldr	r1, [pc, #24]	; (8001a10 <HAL_I2C_Master_Receive+0x254>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa5c 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e106      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
 8001a06:	bf00      	nop
 8001a08:	00100002 	.word	0x00100002
 8001a0c:	ffff0000 	.word	0xffff0000
 8001a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c59      	adds	r1, r3, #1
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	6251      	str	r1, [r2, #36]	; 0x24
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	6912      	ldr	r2, [r2, #16]
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6251      	str	r1, [r2, #36]	; 0x24
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	6912      	ldr	r2, [r2, #16]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a80:	e0b4      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4964      	ldr	r1, [pc, #400]	; (8001c1c <HAL_I2C_Master_Receive+0x460>)
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 fa11 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0bb      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	6251      	str	r1, [r2, #36]	; 0x24
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	6912      	ldr	r2, [r2, #16]
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	494e      	ldr	r1, [pc, #312]	; (8001c1c <HAL_I2C_Master_Receive+0x460>)
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f9e5 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e08f      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	6251      	str	r1, [r2, #36]	; 0x24
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	6912      	ldr	r2, [r2, #16]
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	1c59      	adds	r1, r3, #1
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	6251      	str	r1, [r2, #36]	; 0x24
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	6912      	ldr	r2, [r2, #16]
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b60:	e044      	b.n	8001bec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 fadd 	bl	8002126 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d101      	bne.n	8001b7e <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04a      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e048      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c59      	adds	r1, r3, #1
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	6251      	str	r1, [r2, #36]	; 0x24
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	6912      	ldr	r2, [r2, #16]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d116      	bne.n	8001bec <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	1c59      	adds	r1, r3, #1
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	6251      	str	r1, [r2, #36]	; 0x24
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	6912      	ldr	r2, [r2, #16]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f aec6 	bne.w	8001982 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
  }
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	00010004 	.word	0x00010004

08001c20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d006      	beq.n	8001c4a <I2C_MasterRequestWrite+0x2a>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d003      	beq.n	8001c4a <I2C_MasterRequestWrite+0x2a>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c48:	d108      	bne.n	8001c5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e00b      	b.n	8001c74 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d107      	bne.n	8001c74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f917 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e040      	b.n	8001d12 <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c98:	d107      	bne.n	8001caa <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	897a      	ldrh	r2, [r7, #10]
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ca6:	611a      	str	r2, [r3, #16]
 8001ca8:	e021      	b.n	8001cee <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	897a      	ldrh	r2, [r7, #10]
 8001cb0:	11d2      	asrs	r2, r2, #7
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 0206 	and.w	r2, r2, #6
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f062 020f 	orn	r2, r2, #15
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4915      	ldr	r1, [pc, #84]	; (8001d1c <I2C_MasterRequestWrite+0xfc>)
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f944 	bl	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d101      	bne.n	8001ce0 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e018      	b.n	8001d12 <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e016      	b.n	8001d12 <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	897a      	ldrh	r2, [r7, #10]
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	490b      	ldr	r1, [pc, #44]	; (8001d20 <I2C_MasterRequestWrite+0x100>)
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f92e 	bl	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d101      	bne.n	8001d0c <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e002      	b.n	8001d12 <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	00010008 	.word	0x00010008
 8001d20:	00010002 	.word	0x00010002

08001d24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	460b      	mov	r3, r1
 8001d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d006      	beq.n	8001d5e <I2C_MasterRequestRead+0x3a>
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d003      	beq.n	8001d5e <I2C_MasterRequestRead+0x3a>
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d5c:	d108      	bne.n	8001d70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e00b      	b.n	8001d88 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	2b11      	cmp	r3, #17
 8001d76:	d107      	bne.n	8001d88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	6812      	ldr	r2, [r2, #0]
 8001d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d86:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f88d 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e07f      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dac:	d108      	bne.n	8001dc0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	897a      	ldrh	r2, [r7, #10]
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	e05f      	b.n	8001e80 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	897a      	ldrh	r2, [r7, #10]
 8001dc6:	11d2      	asrs	r2, r2, #7
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	f002 0206 	and.w	r2, r2, #6
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	f062 020f 	orn	r2, r2, #15
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4933      	ldr	r1, [pc, #204]	; (8001eac <I2C_MasterRequestRead+0x188>)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f8b9 	bl	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d101      	bne.n	8001df6 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e056      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e054      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	897a      	ldrh	r2, [r7, #10]
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <I2C_MasterRequestRead+0x18c>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f8a3 	bl	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d101      	bne.n	8001e22 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e040      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e03e      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f000 f82b 	bl	8001eb4 <I2C_WaitOnFlagUntilTimeout>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e01d      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	897a      	ldrh	r2, [r7, #10]
 8001e6e:	11d2      	asrs	r2, r2, #7
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f002 0206 	and.w	r2, r2, #6
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f062 020e 	orn	r2, r2, #14
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	490a      	ldr	r1, [pc, #40]	; (8001eb0 <I2C_MasterRequestRead+0x18c>)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f865 	bl	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d101      	bne.n	8001e9e <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e002      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e000      	b.n	8001ea4 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	00010008 	.word	0x00010008
 8001eb0:	00010002 	.word	0x00010002

08001eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001ec4:	e01f      	b.n	8001f06 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ecc:	d01b      	beq.n	8001f06 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ed4:	f7fe fbca 	bl	800066c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad2      	subs	r2, r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d910      	bls.n	8001f06 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e023      	b.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0c1b      	lsrs	r3, r3, #16
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10d      	bne.n	8001f2c <I2C_WaitOnFlagUntilTimeout+0x78>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	e00c      	b.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x92>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d0bc      	beq.n	8001ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f64:	e040      	b.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f74:	d11c      	bne.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f8e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2204      	movs	r2, #4
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e03c      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fb6:	d017      	beq.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8001fbe:	f7fe fb55 	bl	800066c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	1ad2      	subs	r2, r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d90c      	bls.n	8001fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e020      	b.n	800202a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0c1b      	lsrs	r3, r3, #16
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d10c      	bne.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e00b      	b.n	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4013      	ands	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d19e      	bne.n	8001f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800203e:	e029      	b.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f8ba 	bl	80021ba <I2C_IsAcknowledgeFailed>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e029      	b.n	80020a4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002056:	d01d      	beq.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800205e:	f7fe fb05 	bl	800066c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	1ad2      	subs	r2, r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d912      	bls.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e007      	b.n	80020a4 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d1ce      	bne.n	8002040 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b8:	e029      	b.n	800210e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f87d 	bl	80021ba <I2C_IsAcknowledgeFailed>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e029      	b.n	800211e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d0:	d01d      	beq.n	800210e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020d8:	f7fe fac8 	bl	800066c <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	1ad2      	subs	r2, r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d912      	bls.n	800210e <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e007      	b.n	800211e <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b04      	cmp	r3, #4
 800211a:	d1ce      	bne.n	80020ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002132:	e036      	b.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d114      	bne.n	800216c <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0210 	mvn.w	r2, #16
 800214a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e022      	b.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8002172:	f7fe fa7b 	bl	800066c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	1ad2      	subs	r2, r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d90f      	bls.n	80021a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f043 0220 	orr.w	r2, r3, #32
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e007      	b.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d1c1      	bne.n	8002134 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d114      	bne.n	80021fc <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021da:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2204      	movs	r2, #4
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b20      	cmp	r3, #32
 800221e:	d129      	bne.n	8002274 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002242:	f022 0210 	bic.w	r2, r2, #16
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002270:	2300      	movs	r3, #0
 8002272:	e000      	b.n	8002276 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002274:	2302      	movs	r3, #2
  }
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002282:	b480      	push	{r7}
 8002284:	b085      	sub	sp, #20
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b20      	cmp	r3, #32
 800229a:	d12a      	bne.n	80022f2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80022bc:	89fb      	ldrh	r3, [r7, #14]
 80022be:	f023 030f 	bic.w	r3, r3, #15
 80022c2:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	89fb      	ldrh	r3, [r7, #14]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	89fa      	ldrh	r2, [r7, #14]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 80022f2:	2302      	movs	r3, #2
  }
}  
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0bf      	b.n	800249a <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f002 fce4 	bl	8004cfc <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	6992      	ldr	r2, [r2, #24]
 8002346:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800234a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	6991      	ldr	r1, [r2, #24]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6850      	ldr	r0, [r2, #4]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002364:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6912      	ldr	r2, [r2, #16]
 800236a:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800236c:	430a      	orrs	r2, r1
 800236e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6899      	ldr	r1, [r3, #8]
 800237a:	4b4a      	ldr	r3, [pc, #296]	; (80024a4 <HAL_LTDC_Init+0x1a4>)
 800237c:	400b      	ands	r3, r1
 800237e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	6891      	ldr	r1, [r2, #8]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6990      	ldr	r0, [r2, #24]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4302      	orrs	r2, r0
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68d9      	ldr	r1, [r3, #12]
 80023a8:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_LTDC_Init+0x1a4>)
 80023aa:	400b      	ands	r3, r1
 80023ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	68d1      	ldr	r1, [r2, #12]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6a10      	ldr	r0, [r2, #32]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4302      	orrs	r2, r0
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6919      	ldr	r1, [r3, #16]
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_LTDC_Init+0x1a4>)
 80023d8:	400b      	ands	r3, r1
 80023da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	6911      	ldr	r1, [r2, #16]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4302      	orrs	r2, r0
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6959      	ldr	r1, [r3, #20]
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_LTDC_Init+0x1a4>)
 8002406:	400b      	ands	r3, r1
 8002408:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	6951      	ldr	r1, [r2, #20]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4302      	orrs	r2, r0
 8002424:	430a      	orrs	r2, r1
 8002426:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002446:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4302      	orrs	r2, r0
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8002462:	4302      	orrs	r2, r0
 8002464:	430a      	orrs	r2, r1
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002472:	f042 0206 	orr.w	r2, r2, #6
 8002476:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	6992      	ldr	r2, [r2, #24]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	f000f800 	.word	0xf000f800

080024a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_LTDC_ConfigLayer+0x1a>
 80024be:	2302      	movs	r3, #2
 80024c0:	e02c      	b.n	800251c <HAL_LTDC_ConfigLayer+0x74>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2202      	movs	r2, #2
 80024ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2134      	movs	r1, #52	; 0x34
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4614      	mov	r4, r2
 80024e6:	461d      	mov	r5, r3
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f847 	bl	8002590 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bdb0      	pop	{r4, r5, r7, pc}

08002524 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_LTDC_SetAddress+0x1a>
 800253a:	2302      	movs	r3, #2
 800253c:	e024      	b.n	8002588 <HAL_LTDC_SetAddress+0x64>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2234      	movs	r2, #52	; 0x34
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	3338      	adds	r3, #56	; 0x38
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6979      	ldr	r1, [r7, #20]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f811 	bl	8002590 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2201      	movs	r2, #1
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	4413      	add	r3, r2
 80025ba:	041b      	lsls	r3, r3, #16
 80025bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	01db      	lsls	r3, r3, #7
 80025c8:	4413      	add	r3, r2
 80025ca:	3384      	adds	r3, #132	; 0x84
 80025cc:	461a      	mov	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	01db      	lsls	r3, r3, #7
 80025d8:	440b      	add	r3, r1
 80025da:	3384      	adds	r3, #132	; 0x84
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80025e2:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	01db      	lsls	r3, r3, #7
 80025ee:	4413      	add	r3, r2
 80025f0:	3384      	adds	r3, #132	; 0x84
 80025f2:	4619      	mov	r1, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	4413      	add	r3, r2
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800261c:	4413      	add	r3, r2
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	01db      	lsls	r3, r3, #7
 800262c:	4413      	add	r3, r2
 800262e:	3384      	adds	r3, #132	; 0x84
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	01db      	lsls	r3, r3, #7
 800263c:	440b      	add	r3, r1
 800263e:	3384      	adds	r3, #132	; 0x84
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002646:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	4413      	add	r3, r2
 8002654:	3384      	adds	r3, #132	; 0x84
 8002656:	4619      	mov	r1, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002666:	4413      	add	r3, r2
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	01db      	lsls	r3, r3, #7
 800267a:	4413      	add	r3, r2
 800267c:	3384      	adds	r3, #132	; 0x84
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	01db      	lsls	r3, r3, #7
 800268a:	440b      	add	r3, r1
 800268c:	3384      	adds	r3, #132	; 0x84
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	f023 0307 	bic.w	r3, r3, #7
 8002694:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	01db      	lsls	r3, r3, #7
 80026a0:	4413      	add	r3, r2
 80026a2:	3384      	adds	r3, #132	; 0x84
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80026bc:	041b      	lsls	r3, r3, #16
 80026be:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	061b      	lsls	r3, r3, #24
 80026c6:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	4413      	add	r3, r2
 80026d4:	3384      	adds	r3, #132	; 0x84
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	01db      	lsls	r3, r3, #7
 80026e2:	4413      	add	r3, r2
 80026e4:	3384      	adds	r3, #132	; 0x84
 80026e6:	461a      	mov	r2, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	01db      	lsls	r3, r3, #7
 80026f6:	4413      	add	r3, r2
 80026f8:	3384      	adds	r3, #132	; 0x84
 80026fa:	4619      	mov	r1, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002702:	461a      	mov	r2, r3
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	431a      	orrs	r2, r3
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	01db      	lsls	r3, r3, #7
 800271c:	4413      	add	r3, r2
 800271e:	3384      	adds	r3, #132	; 0x84
 8002720:	461a      	mov	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4619      	mov	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	01db      	lsls	r3, r3, #7
 800272c:	440b      	add	r3, r1
 800272e:	3384      	adds	r3, #132	; 0x84
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002736:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	01db      	lsls	r3, r3, #7
 8002742:	4413      	add	r3, r2
 8002744:	3384      	adds	r3, #132	; 0x84
 8002746:	461a      	mov	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	01db      	lsls	r3, r3, #7
 8002758:	4413      	add	r3, r2
 800275a:	3384      	adds	r3, #132	; 0x84
 800275c:	461a      	mov	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	01db      	lsls	r3, r3, #7
 8002768:	440b      	add	r3, r1
 800276a:	3384      	adds	r3, #132	; 0x84
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	01db      	lsls	r3, r3, #7
 8002782:	4413      	add	r3, r2
 8002784:	3384      	adds	r3, #132	; 0x84
 8002786:	4619      	mov	r1, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	01db      	lsls	r3, r3, #7
 800279e:	4413      	add	r3, r2
 80027a0:	3384      	adds	r3, #132	; 0x84
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	01db      	lsls	r3, r3, #7
 80027ae:	4413      	add	r3, r2
 80027b0:	3384      	adds	r3, #132	; 0x84
 80027b2:	461a      	mov	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	01db      	lsls	r3, r3, #7
 80027c2:	4413      	add	r3, r2
 80027c4:	3384      	adds	r3, #132	; 0x84
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <LTDC_SetConfig+0x24c>
  {
    tmp = 4U;
 80027d6:	2304      	movs	r3, #4
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e01b      	b.n	8002814 <LTDC_SetConfig+0x284>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <LTDC_SetConfig+0x25a>
  {
    tmp = 3U;
 80027e4:	2303      	movs	r3, #3
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	e014      	b.n	8002814 <LTDC_SetConfig+0x284>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d00b      	beq.n	800280a <LTDC_SetConfig+0x27a>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d007      	beq.n	800280a <LTDC_SetConfig+0x27a>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d003      	beq.n	800280a <LTDC_SetConfig+0x27a>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002806:	2b07      	cmp	r3, #7
 8002808:	d102      	bne.n	8002810 <LTDC_SetConfig+0x280>
  {
    tmp = 2U;
 800280a:	2302      	movs	r3, #2
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e001      	b.n	8002814 <LTDC_SetConfig+0x284>
  }
  else
  {
    tmp = 1U;
 8002810:	2301      	movs	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	01db      	lsls	r3, r3, #7
 800281e:	4413      	add	r3, r2
 8002820:	3384      	adds	r3, #132	; 0x84
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	01db      	lsls	r3, r3, #7
 800282e:	440b      	add	r3, r1
 8002830:	3384      	adds	r3, #132	; 0x84
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002838:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	01db      	lsls	r3, r3, #7
 8002844:	4413      	add	r3, r2
 8002846:	3384      	adds	r3, #132	; 0x84
 8002848:	4618      	mov	r0, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	041a      	lsls	r2, r3, #16
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	1acb      	subs	r3, r1, r3
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	3303      	adds	r3, #3
 8002868:	4313      	orrs	r3, r2
 800286a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	01db      	lsls	r3, r3, #7
 8002876:	4413      	add	r3, r2
 8002878:	3384      	adds	r3, #132	; 0x84
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	01db      	lsls	r3, r3, #7
 8002886:	440b      	add	r3, r1
 8002888:	3384      	adds	r3, #132	; 0x84
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002890:	f023 0307 	bic.w	r3, r3, #7
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	01db      	lsls	r3, r3, #7
 80028a0:	4413      	add	r3, r2
 80028a2:	3384      	adds	r3, #132	; 0x84
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	4413      	add	r3, r2
 80028b8:	3384      	adds	r3, #132	; 0x84
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	01db      	lsls	r3, r3, #7
 80028c6:	440b      	add	r3, r1
 80028c8:	3384      	adds	r3, #132	; 0x84
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6013      	str	r3, [r2, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_PWREx_EnableOverDrive+0x90>)
 80028f0:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <HAL_PWREx_EnableOverDrive+0x90>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_PWREx_EnableOverDrive+0x90>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_PWREx_EnableOverDrive+0x94>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290c:	f7fd feae 	bl	800066c <HAL_GetTick>
 8002910:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002912:	e009      	b.n	8002928 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002914:	f7fd feaa 	bl	800066c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002922:	d901      	bls.n	8002928 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e01f      	b.n	8002968 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002934:	d1ee      	bne.n	8002914 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800293c:	f7fd fe96 	bl	800066c <HAL_GetTick>
 8002940:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002942:	e009      	b.n	8002958 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002944:	f7fd fe92 	bl	800066c <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002952:	d901      	bls.n	8002958 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e007      	b.n	8002968 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002964:	d1ee      	bne.n	8002944 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	420e0040 	.word	0x420e0040
 8002978:	40007000 	.word	0x40007000
 800297c:	420e0044 	.word	0x420e0044

08002980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e22d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d075      	beq.n	8002a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299e:	4ba3      	ldr	r3, [pc, #652]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00c      	beq.n	80029c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4ba0      	ldr	r3, [pc, #640]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d112      	bne.n	80029dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4b9d      	ldr	r3, [pc, #628]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c2:	d10b      	bne.n	80029dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	4b99      	ldr	r3, [pc, #612]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d05b      	beq.n	8002a88 <HAL_RCC_OscConfig+0x108>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d157      	bne.n	8002a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e208      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e4:	d106      	bne.n	80029f4 <HAL_RCC_OscConfig+0x74>
 80029e6:	4a91      	ldr	r2, [pc, #580]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	4b90      	ldr	r3, [pc, #576]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xb0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4a8b      	ldr	r2, [pc, #556]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4a88      	ldr	r2, [pc, #544]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	4b87      	ldr	r3, [pc, #540]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xb0>
 8002a18:	4a84      	ldr	r2, [pc, #528]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	4b84      	ldr	r3, [pc, #528]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4a81      	ldr	r2, [pc, #516]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fd fe18 	bl	800066c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fd fe14 	bl	800066c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1cd      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xc0>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fd fe04 	bl	800066c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fd fe00 	bl	800066c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1b9      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0xe8>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d063      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00b      	beq.n	8002aba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x152>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e18d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad2:	4956      	ldr	r1, [pc, #344]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	e03a      	b.n	8002b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af0:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <HAL_RCC_OscConfig+0x2b0>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fd fdb9 	bl	800066c <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fd fdb5 	bl	800066c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e16e      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4943      	ldr	r1, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e015      	b.n	8002b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <HAL_RCC_OscConfig+0x2b0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fd fd98 	bl	800066c <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b40:	f7fd fd94 	bl	800066c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e14d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f0      	bne.n	8002b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d030      	beq.n	8002bcc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCC_OscConfig+0x2b4>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fd fd78 	bl	800066c <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fd fd74 	bl	800066c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e12d      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCC_OscConfig+0x200>
 8002b9e:	e015      	b.n	8002bcc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba0:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_OscConfig+0x2b4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba6:	f7fd fd61 	bl	800066c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bae:	f7fd fd5d 	bl	800066c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e116      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a0 	beq.w	8002d1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c06:	2301      	movs	r3, #1
 8002c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0a:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_OscConfig+0x2b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d121      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c16:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <HAL_RCC_OscConfig+0x2b8>)
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_RCC_OscConfig+0x2b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fd23 	bl	800066c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	e011      	b.n	8002c4e <HAL_RCC_OscConfig+0x2ce>
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	42470000 	.word	0x42470000
 8002c34:	42470e80 	.word	0x42470e80
 8002c38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7fd fd16 	bl	800066c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e0cf      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x478>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
 8002c62:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c64:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6e:	e01c      	b.n	8002caa <HAL_RCC_OscConfig+0x32a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b05      	cmp	r3, #5
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x312>
 8002c78:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c7a:	4b60      	ldr	r3, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	e00b      	b.n	8002caa <HAL_RCC_OscConfig+0x32a>
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d015      	beq.n	8002cde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fd fcdb 	bl	800066c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	e00a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fd fcd7 	bl	800066c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e08e      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ee      	beq.n	8002cba <HAL_RCC_OscConfig+0x33a>
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fd fcc5 	bl	800066c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	e00a      	b.n	8002cfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fd fcc1 	bl	800066c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e078      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d105      	bne.n	8002d1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d10:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d064      	beq.n	8002dec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d05c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d141      	bne.n	8002dba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_RCC_OscConfig+0x480>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fc96 	bl	800066c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fd fc92 	bl	800066c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e04b      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d62:	4926      	ldr	r1, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	019b      	lsls	r3, r3, #6
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_OscConfig+0x480>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fd fc6b 	bl	800066c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fd fc67 	bl	800066c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e020      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x41a>
 8002db8:	e018      	b.n	8002dec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_RCC_OscConfig+0x480>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fd fc54 	bl	800066c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fd fc50 	bl	800066c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e009      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_OscConfig+0x47c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x448>
 8002de6:	e001      	b.n	8002dec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470060 	.word	0x42470060

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0ca      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b67      	ldr	r3, [pc, #412]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b6      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4a52      	ldr	r2, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	494f      	ldr	r1, [pc, #316]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	4b4f      	ldr	r3, [pc, #316]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b46      	ldr	r3, [pc, #280]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07d      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06d      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e065      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4936      	ldr	r1, [pc, #216]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	4b35      	ldr	r3, [pc, #212]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fd fbba 	bl	800066c <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd fbb6 	bl	800066c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04d      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 020f 	and.w	r2, r3, #15
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e030      	b.n	8002fae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	4b18      	ldr	r3, [pc, #96]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4911      	ldr	r1, [pc, #68]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f81d 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fd fb1c 	bl	80005e4 <HAL_InitTick>

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40023c00 	.word	0x40023c00
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	080098ac 	.word	0x080098ac
 8002fc4:	2000002c 	.word	0x2000002c

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60fa      	str	r2, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	617a      	str	r2, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002fdc:	2200      	movs	r2, #0
 8002fde:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe0:	4a51      	ldr	r2, [pc, #324]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	f002 020c 	and.w	r2, r2, #12
 8002fe8:	2a04      	cmp	r2, #4
 8002fea:	d007      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x34>
 8002fec:	2a08      	cmp	r2, #8
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff0:	2a00      	cmp	r2, #0
 8002ff2:	f040 8090 	bne.w	8003116 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff6:	4b4d      	ldr	r3, [pc, #308]	; (800312c <HAL_RCC_GetSysClockFreq+0x164>)
 8002ff8:	613b      	str	r3, [r7, #16]
       break;
 8002ffa:	e08f      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ffe:	613b      	str	r3, [r7, #16]
      break;
 8003000:	e08c      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003002:	4a49      	ldr	r2, [pc, #292]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 8003004:	6852      	ldr	r2, [r2, #4]
 8003006:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800300a:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300c:	4a46      	ldr	r2, [pc, #280]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 800300e:	6852      	ldr	r2, [r2, #4]
 8003010:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003014:	2a00      	cmp	r2, #0
 8003016:	d023      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003018:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	099b      	lsrs	r3, r3, #6
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	ea03 0301 	and.w	r3, r3, r1
 800302e:	ea04 0402 	and.w	r4, r4, r2
 8003032:	4a3f      	ldr	r2, [pc, #252]	; (8003130 <HAL_RCC_GetSysClockFreq+0x168>)
 8003034:	fb02 f104 	mul.w	r1, r2, r4
 8003038:	2200      	movs	r2, #0
 800303a:	fb02 f203 	mul.w	r2, r2, r3
 800303e:	440a      	add	r2, r1
 8003040:	493b      	ldr	r1, [pc, #236]	; (8003130 <HAL_RCC_GetSysClockFreq+0x168>)
 8003042:	fba3 0101 	umull	r0, r1, r3, r1
 8003046:	1853      	adds	r3, r2, r1
 8003048:	4619      	mov	r1, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f04f 0400 	mov.w	r4, #0
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	f7fd f91c 	bl	8000290 <__aeabi_uldivmod>
 8003058:	4603      	mov	r3, r0
 800305a:	460c      	mov	r4, r1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e04c      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003060:	4a31      	ldr	r2, [pc, #196]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 8003062:	6852      	ldr	r2, [r2, #4]
 8003064:	0992      	lsrs	r2, r2, #6
 8003066:	4611      	mov	r1, r2
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003070:	f04f 0600 	mov.w	r6, #0
 8003074:	ea05 0501 	and.w	r5, r5, r1
 8003078:	ea06 0602 	and.w	r6, r6, r2
 800307c:	4629      	mov	r1, r5
 800307e:	4632      	mov	r2, r6
 8003080:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003084:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003088:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800308c:	4651      	mov	r1, sl
 800308e:	465a      	mov	r2, fp
 8003090:	46aa      	mov	sl, r5
 8003092:	46b3      	mov	fp, r6
 8003094:	4655      	mov	r5, sl
 8003096:	465e      	mov	r6, fp
 8003098:	1b4d      	subs	r5, r1, r5
 800309a:	eb62 0606 	sbc.w	r6, r2, r6
 800309e:	4629      	mov	r1, r5
 80030a0:	4632      	mov	r2, r6
 80030a2:	0194      	lsls	r4, r2, #6
 80030a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030a8:	018b      	lsls	r3, r1, #6
 80030aa:	1a5b      	subs	r3, r3, r1
 80030ac:	eb64 0402 	sbc.w	r4, r4, r2
 80030b0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80030b4:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80030b8:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80030bc:	4643      	mov	r3, r8
 80030be:	464c      	mov	r4, r9
 80030c0:	4655      	mov	r5, sl
 80030c2:	465e      	mov	r6, fp
 80030c4:	18ed      	adds	r5, r5, r3
 80030c6:	eb46 0604 	adc.w	r6, r6, r4
 80030ca:	462b      	mov	r3, r5
 80030cc:	4634      	mov	r4, r6
 80030ce:	02a2      	lsls	r2, r4, #10
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	029b      	lsls	r3, r3, #10
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	e897 0018 	ldmia.w	r7, {r3, r4}
 80030e2:	4618      	mov	r0, r3
 80030e4:	4621      	mov	r1, r4
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd f8ce 	bl	8000290 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	3301      	adds	r3, #1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	613b      	str	r3, [r7, #16]
      break;
 8003114:	e002      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetSysClockFreq+0x164>)
 8003118:	613b      	str	r3, [r7, #16]
      break;
 800311a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311c:	693b      	ldr	r3, [r7, #16]
}
 800311e:	4618      	mov	r0, r3
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	00f42400 	.word	0x00f42400
 8003130:	017d7840 	.word	0x017d7840

08003134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_GetHCLKFreq+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	2000002c 	.word	0x2000002c

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003150:	f7ff fff0 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003154:	4601      	mov	r1, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0a9b      	lsrs	r3, r3, #10
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	080098bc 	.word	0x080098bc

08003174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003198:	2b00      	cmp	r3, #0
 800319a:	d061      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800319c:	4ba3      	ldr	r3, [pc, #652]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031a2:	f7fd fa63 	bl	800066c <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031aa:	f7fd fa5f 	bl	800066c <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e177      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031bc:	4b9c      	ldr	r3, [pc, #624]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80031d4:	4996      	ldr	r1, [pc, #600]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01f      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031f4:	4b8e      	ldr	r3, [pc, #568]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80031f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fa:	0f1b      	lsrs	r3, r3, #28
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003202:	498b      	ldr	r1, [pc, #556]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	019a      	lsls	r2, r3, #6
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800321c:	4984      	ldr	r1, [pc, #528]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800321e:	4b84      	ldr	r3, [pc, #528]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003224:	f023 021f 	bic.w	r2, r3, #31
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	3b01      	subs	r3, #1
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003234:	4b7d      	ldr	r3, [pc, #500]	; (800342c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800323a:	f7fd fa17 	bl	800066c <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003240:	e008      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003242:	f7fd fa13 	bl	800066c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e12b      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003254:	4b76      	ldr	r3, [pc, #472]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003274:	2b00      	cmp	r3, #0
 8003276:	d079      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003278:	4b6e      	ldr	r3, [pc, #440]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800327e:	f7fd f9f5 	bl	800066c <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003286:	f7fd f9f1 	bl	800066c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e109      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003298:	4b65      	ldr	r3, [pc, #404]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a4:	d0ef      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	0f1b      	lsrs	r3, r3, #28
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032c0:	495b      	ldr	r1, [pc, #364]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	019a      	lsls	r2, r3, #6
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	061b      	lsls	r3, r3, #24
 80032ce:	431a      	orrs	r2, r3
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	071b      	lsls	r3, r3, #28
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032da:	4955      	ldr	r1, [pc, #340]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032dc:	4b54      	ldr	r3, [pc, #336]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80032de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	4313      	orrs	r3, r2
 80032f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01e      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003300:	4b4b      	ldr	r3, [pc, #300]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	0e1b      	lsrs	r3, r3, #24
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800330e:	4948      	ldr	r1, [pc, #288]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	019a      	lsls	r2, r3, #6
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	071b      	lsls	r3, r3, #28
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003328:	4941      	ldr	r1, [pc, #260]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800332a:	4b41      	ldr	r3, [pc, #260]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003344:	f7fd f992 	bl	800066c <HAL_GetTick>
 8003348:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800334c:	f7fd f98e 	bl	800066c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0a6      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800335e:	4b34      	ldr	r3, [pc, #208]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336a:	d1ef      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 808d 	beq.w	8003494 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003396:	4a28      	ldr	r2, [pc, #160]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033a2:	f7fd f963 	bl	800066c <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7fd f95f 	bl	800066c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e077      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d039      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d032      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033fc:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01e      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800340e:	f7fd f92d 	bl	800066c <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	e014      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fd f929 	bl	800066c <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d90b      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e03f      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x338>
 800342c:	42470068 	.word	0x42470068
 8003430:	40023800 	.word	0x40023800
 8003434:	42470070 	.word	0x42470070
 8003438:	40007000 	.word	0x40007000
 800343c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0e4      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003458:	d10d      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x302>
 800345a:	4916      	ldr	r1, [pc, #88]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
 8003474:	e005      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8003476:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003480:	6093      	str	r3, [r2, #8]
 8003482:	490c      	ldr	r1, [pc, #48]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003486:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	4313      	orrs	r3, r2
 8003492:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034a0:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034a8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	424711e0 	.word	0x424711e0

080034bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e025      	b.n	800351c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f001 fdeb 	bl	80050c0 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f000 fa81 	bl	8003a04 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	f000 faec 	bl	8003aea <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d101      	bne.n	8003540 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
 800353e:	e018      	b.n	8003572 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fb49 	bl	8003be8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d104      	bne.n	8003568 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2205      	movs	r2, #5
 8003562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003566:	e003      	b.n	8003570 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d101      	bne.n	8003594 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	e00e      	b.n	80035b2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 fb5c 	bl	8003c60 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e055      	b.n	8003678 <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f001 fc96 	bl	8004f18 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6851      	ldr	r1, [r2, #4]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6912      	ldr	r2, [r2, #16]
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6952      	ldr	r2, [r2, #20]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6992      	ldr	r2, [r2, #24]
 8003628:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	69d2      	ldr	r2, [r2, #28]
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6a12      	ldr	r2, [r2, #32]
 8003638:	4311      	orrs	r1, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6992      	ldr	r2, [r2, #24]
 800364a:	0c12      	lsrs	r2, r2, #16
 800364c:	f002 0104 	and.w	r1, r2, #4
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	69d2      	ldr	r2, [r2, #28]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003666:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	; 0x28
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_SPI_Transmit+0x26>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e123      	b.n	80038ee <HAL_SPI_Transmit+0x26e>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ae:	f7fc ffdd 	bl	800066c <HAL_GetTick>
 80036b2:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
 80036c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036c4:	e10a      	b.n	80038dc <HAL_SPI_Transmit+0x25c>
  }

  if((pData == NULL ) || (Size == 0))
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <HAL_SPI_Transmit+0x52>
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d6:	e101      	b.n	80038dc <HAL_SPI_Transmit+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2203      	movs	r2, #3
 80036dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	88fa      	ldrh	r2, [r7, #6]
 80036f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	88fa      	ldrh	r2, [r7, #6]
 80036f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371e:	d107      	bne.n	8003730 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800372e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b40      	cmp	r3, #64	; 0x40
 800373c:	d007      	beq.n	800374e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800374c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003756:	d147      	bne.n	80037e8 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_SPI_Transmit+0xea>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d138      	bne.n	80037dc <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	8812      	ldrh	r2, [r2, #0]
 8003772:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3302      	adds	r3, #2
 8003778:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003788:	e028      	b.n	80037dc <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b02      	cmp	r3, #2
 8003796:	d10f      	bne.n	80037b8 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3302      	adds	r3, #2
 80037a6:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80037b6:	e011      	b.n	80037dc <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_SPI_Transmit+0x156>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c4:	d00a      	beq.n	80037dc <HAL_SPI_Transmit+0x15c>
 80037c6:	f7fc ff51 	bl	800066c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037da:	e07f      	b.n	80038dc <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1d1      	bne.n	800378a <HAL_SPI_Transmit+0x10a>
 80037e6:	e048      	b.n	800387a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_SPI_Transmit+0x17a>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d13a      	bne.n	8003870 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	7812      	ldrb	r2, [r2, #0]
 8003804:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3301      	adds	r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800381a:	e029      	b.n	8003870 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d110      	bne.n	800384c <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3301      	adds	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	86da      	strh	r2, [r3, #54]	; 0x36
 800384a:	e011      	b.n	8003870 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_SPI_Transmit+0x1ea>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003858:	d00a      	beq.n	8003870 <HAL_SPI_Transmit+0x1f0>
 800385a:	f7fc ff07 	bl	800066c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	1ad2      	subs	r2, r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800386e:	e035      	b.n	80038dc <HAL_SPI_Transmit+0x25c>
    while (hspi->TxXferCount > 0U)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1d0      	bne.n	800381c <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2201      	movs	r2, #1
 8003882:	2102      	movs	r1, #2
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f836 	bl	80038f6 <SPI_WaitFlagStateUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003894:	e022      	b.n	80038dc <HAL_SPI_Transmit+0x25c>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f894 	bl	80039c8 <SPI_CheckFlag_BSY>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038b0:	e014      	b.n	80038dc <HAL_SPI_Transmit+0x25c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8003904:	e04d      	b.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800390c:	d049      	beq.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003914:	f7fc feaa 	bl	800066c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	1ad2      	subs	r2, r2, r3
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d33e      	bcc.n	80039a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	6852      	ldr	r2, [r2, #4]
 800392e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003932:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393c:	d111      	bne.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003946:	d004      	beq.n	8003952 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	d107      	bne.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396a:	d110      	bne.n	800398e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800397a:	400b      	ands	r3, r1
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800398c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00e      	b.n	80039c0 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	401a      	ands	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d101      	bne.n	80039b6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80039b2:	2201      	movs	r2, #1
 80039b4:	e000      	b.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80039b6:	2200      	movs	r2, #0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d1a3      	bne.n	8003906 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff89 	bl	80038f6 <SPI_WaitFlagStateUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e000      	b.n	80039fc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d029      	beq.n	8003a72 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a2e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a38:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8003a3e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8003a44:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8003a4a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8003a50:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8003a56:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8003a5c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8003a62:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e034      	b.n	8003adc <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a7e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003a88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8003a8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003aa6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003ab0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8003ab6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8003abc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8003ac2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8003ac8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d02e      	beq.n	8003b62 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b10:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003b20:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8003b2a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8003b34:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003b3e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8003b48:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003b52:	4313      	orrs	r3, r2
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e03b      	b.n	8003bda <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b72:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8003b84:	4313      	orrs	r3, r2
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b98:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003ba8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8003bb2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8003bbc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c04:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8003c0e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c20:	f7fc fd24 	bl	800066c <HAL_GetTick>
 8003c24:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003c26:	e010      	b.n	8003c4a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2e:	d00c      	beq.n	8003c4a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <FMC_SDRAM_SendCommand+0x5e>
 8003c36:	f7fc fd19 	bl	800066c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d901      	bls.n	8003c4a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e006      	b.n	8003c58 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1e8      	bne.n	8003c28 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695a      	ldr	r2, [r3, #20]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LCD_PowerOn>:
LCD_DrawPropTypeDef lcdProp;

const uint8_t *ch;

void LCD_PowerOn(void)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8003c8a:	20ca      	movs	r0, #202	; 0xca
 8003c8c:	f000 f944 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8003c90:	20c3      	movs	r0, #195	; 0xc3
 8003c92:	f000 f96b 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x08);
 8003c96:	2008      	movs	r0, #8
 8003c98:	f000 f968 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x50);
 8003c9c:	2050      	movs	r0, #80	; 0x50
 8003c9e:	f000 f965 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERB);
 8003ca2:	20cf      	movs	r0, #207	; 0xcf
 8003ca4:	f000 f938 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f000 f95f 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0xC1);
 8003cae:	20c1      	movs	r0, #193	; 0xc1
 8003cb0:	f000 f95c 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x30);
 8003cb4:	2030      	movs	r0, #48	; 0x30
 8003cb6:	f000 f959 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER_SEQ);
 8003cba:	20ed      	movs	r0, #237	; 0xed
 8003cbc:	f000 f92c 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8003cc0:	2064      	movs	r0, #100	; 0x64
 8003cc2:	f000 f953 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x03);
 8003cc6:	2003      	movs	r0, #3
 8003cc8:	f000 f950 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x12);
 8003ccc:	2012      	movs	r0, #18
 8003cce:	f000 f94d 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x81);
 8003cd2:	2081      	movs	r0, #129	; 0x81
 8003cd4:	f000 f94a 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCA);
 8003cd8:	20e8      	movs	r0, #232	; 0xe8
 8003cda:	f000 f91d 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8003cde:	2085      	movs	r0, #133	; 0x85
 8003ce0:	f000 f944 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f000 f941 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x78);
 8003cea:	2078      	movs	r0, #120	; 0x78
 8003cec:	f000 f93e 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_POWERA);
 8003cf0:	20cb      	movs	r0, #203	; 0xcb
 8003cf2:	f000 f911 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8003cf6:	2039      	movs	r0, #57	; 0x39
 8003cf8:	f000 f938 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x2C);
 8003cfc:	202c      	movs	r0, #44	; 0x2c
 8003cfe:	f000 f935 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003d02:	2000      	movs	r0, #0
 8003d04:	f000 f932 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x34);
 8003d08:	2034      	movs	r0, #52	; 0x34
 8003d0a:	f000 f92f 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x02);
 8003d0e:	2002      	movs	r0, #2
 8003d10:	f000 f92c 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_PRC);
 8003d14:	20f7      	movs	r0, #247	; 0xf7
 8003d16:	f000 f8ff 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8003d1a:	2020      	movs	r0, #32
 8003d1c:	f000 f926 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_DTCB);
 8003d20:	20ea      	movs	r0, #234	; 0xea
 8003d22:	f000 f8f9 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003d26:	2000      	movs	r0, #0
 8003d28:	f000 f920 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f000 f91d 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_FRC);
 8003d32:	20b1      	movs	r0, #177	; 0xb1
 8003d34:	f000 f8f0 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f000 f917 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x1B);
 8003d3e:	201b      	movs	r0, #27
 8003d40:	f000 f914 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8003d44:	20b6      	movs	r0, #182	; 0xb6
 8003d46:	f000 f8e7 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8003d4a:	200a      	movs	r0, #10
 8003d4c:	f000 f90e 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0xA2);
 8003d50:	20a2      	movs	r0, #162	; 0xa2
 8003d52:	f000 f90b 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER1);
 8003d56:	20c0      	movs	r0, #192	; 0xc0
 8003d58:	f000 f8de 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8003d5c:	2010      	movs	r0, #16
 8003d5e:	f000 f905 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8003d62:	20c1      	movs	r0, #193	; 0xc1
 8003d64:	f000 f8d8 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8003d68:	2010      	movs	r0, #16
 8003d6a:	f000 f8ff 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM1);
 8003d6e:	20c5      	movs	r0, #197	; 0xc5
 8003d70:	f000 f8d2 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 8003d74:	2045      	movs	r0, #69	; 0x45
 8003d76:	f000 f8f9 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x15);
 8003d7a:	2015      	movs	r0, #21
 8003d7c:	f000 f8f6 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 8003d80:	20c7      	movs	r0, #199	; 0xc7
 8003d82:	f000 f8c9 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8003d86:	2090      	movs	r0, #144	; 0x90
 8003d88:	f000 f8f0 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_MAC);
 8003d8c:	2036      	movs	r0, #54	; 0x36
 8003d8e:	f000 f8c3 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 8003d92:	20c8      	movs	r0, #200	; 0xc8
 8003d94:	f000 f8ea 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_3GAMMA_EN);
 8003d98:	20f2      	movs	r0, #242	; 0xf2
 8003d9a:	f000 f8bd 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f000 f8e4 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 8003da4:	20b0      	movs	r0, #176	; 0xb0
 8003da6:	f000 f8b7 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 8003daa:	20c2      	movs	r0, #194	; 0xc2
 8003dac:	f000 f8de 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_DFC);
 8003db0:	20b6      	movs	r0, #182	; 0xb6
 8003db2:	f000 f8b1 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8003db6:	200a      	movs	r0, #10
 8003db8:	f000 f8d8 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0xA7);
 8003dbc:	20a7      	movs	r0, #167	; 0xa7
 8003dbe:	f000 f8d5 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x27);
 8003dc2:	2027      	movs	r0, #39	; 0x27
 8003dc4:	f000 f8d2 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x04);
 8003dc8:	2004      	movs	r0, #4
 8003dca:	f000 f8cf 	bl	8003f6c <LCD_WriteData>

	/* colomn address set */
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8003dce:	202a      	movs	r0, #42	; 0x2a
 8003dd0:	f000 f8a2 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f000 f8c9 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f000 f8c6 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003de0:	2000      	movs	r0, #0
 8003de2:	f000 f8c3 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0xEF);
 8003de6:	20ef      	movs	r0, #239	; 0xef
 8003de8:	f000 f8c0 	bl	8003f6c <LCD_WriteData>
	/* Page Address Set */
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8003dec:	202b      	movs	r0, #43	; 0x2b
 8003dee:	f000 f893 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f000 f8ba 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f000 f8b7 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x01);
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f000 f8b4 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x3F);
 8003e04:	203f      	movs	r0, #63	; 0x3f
 8003e06:	f000 f8b1 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_INTERFACE);
 8003e0a:	20f6      	movs	r0, #246	; 0xf6
 8003e0c:	f000 f884 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f000 f8ab 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f000 f8a8 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x06);
 8003e1c:	2006      	movs	r0, #6
 8003e1e:	f000 f8a5 	bl	8003f6c <LCD_WriteData>

	LCD_WriteCommand(LCD_GRAM);
 8003e22:	202c      	movs	r0, #44	; 0x2c
 8003e24:	f000 f878 	bl	8003f18 <LCD_WriteCommand>
	HAL_Delay(100);
 8003e28:	2064      	movs	r0, #100	; 0x64
 8003e2a:	f7fc fc2b 	bl	8000684 <HAL_Delay>

	LCD_WriteCommand(LCD_GAMMA);
 8003e2e:	2026      	movs	r0, #38	; 0x26
 8003e30:	f000 f872 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8003e34:	2001      	movs	r0, #1
 8003e36:	f000 f899 	bl	8003f6c <LCD_WriteData>

	LCD_WriteCommand(LCD_PGAMMA);
 8003e3a:	20e0      	movs	r0, #224	; 0xe0
 8003e3c:	f000 f86c 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8003e40:	200f      	movs	r0, #15
 8003e42:	f000 f893 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x29);
 8003e46:	2029      	movs	r0, #41	; 0x29
 8003e48:	f000 f890 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x24);
 8003e4c:	2024      	movs	r0, #36	; 0x24
 8003e4e:	f000 f88d 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x0C);
 8003e52:	200c      	movs	r0, #12
 8003e54:	f000 f88a 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x0E);
 8003e58:	200e      	movs	r0, #14
 8003e5a:	f000 f887 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x09);
 8003e5e:	2009      	movs	r0, #9
 8003e60:	f000 f884 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x4E);
 8003e64:	204e      	movs	r0, #78	; 0x4e
 8003e66:	f000 f881 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x78);
 8003e6a:	2078      	movs	r0, #120	; 0x78
 8003e6c:	f000 f87e 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x3C);
 8003e70:	203c      	movs	r0, #60	; 0x3c
 8003e72:	f000 f87b 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x09);
 8003e76:	2009      	movs	r0, #9
 8003e78:	f000 f878 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x13);
 8003e7c:	2013      	movs	r0, #19
 8003e7e:	f000 f875 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x05);
 8003e82:	2005      	movs	r0, #5
 8003e84:	f000 f872 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x17);
 8003e88:	2017      	movs	r0, #23
 8003e8a:	f000 f86f 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x11);
 8003e8e:	2011      	movs	r0, #17
 8003e90:	f000 f86c 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x00);
 8003e94:	2000      	movs	r0, #0
 8003e96:	f000 f869 	bl	8003f6c <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 8003e9a:	20e1      	movs	r0, #225	; 0xe1
 8003e9c:	f000 f83c 	bl	8003f18 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f000 f863 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x16);
 8003ea6:	2016      	movs	r0, #22
 8003ea8:	f000 f860 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x1B);
 8003eac:	201b      	movs	r0, #27
 8003eae:	f000 f85d 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x04);
 8003eb2:	2004      	movs	r0, #4
 8003eb4:	f000 f85a 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x11);
 8003eb8:	2011      	movs	r0, #17
 8003eba:	f000 f857 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x07);
 8003ebe:	2007      	movs	r0, #7
 8003ec0:	f000 f854 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x31);
 8003ec4:	2031      	movs	r0, #49	; 0x31
 8003ec6:	f000 f851 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x33);
 8003eca:	2033      	movs	r0, #51	; 0x33
 8003ecc:	f000 f84e 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x42);
 8003ed0:	2042      	movs	r0, #66	; 0x42
 8003ed2:	f000 f84b 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x05);
 8003ed6:	2005      	movs	r0, #5
 8003ed8:	f000 f848 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x0C);
 8003edc:	200c      	movs	r0, #12
 8003ede:	f000 f845 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x0A);
 8003ee2:	200a      	movs	r0, #10
 8003ee4:	f000 f842 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x28);
 8003ee8:	2028      	movs	r0, #40	; 0x28
 8003eea:	f000 f83f 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x2F);
 8003eee:	202f      	movs	r0, #47	; 0x2f
 8003ef0:	f000 f83c 	bl	8003f6c <LCD_WriteData>
	LCD_WriteData(0x0F);
 8003ef4:	200f      	movs	r0, #15
 8003ef6:	f000 f839 	bl	8003f6c <LCD_WriteData>

	LCD_WriteCommand(LCD_SLEEP_OUT);
 8003efa:	2011      	movs	r0, #17
 8003efc:	f000 f80c 	bl	8003f18 <LCD_WriteCommand>
	HAL_Delay(100);
 8003f00:	2064      	movs	r0, #100	; 0x64
 8003f02:	f7fc fbbf 	bl	8000684 <HAL_Delay>
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8003f06:	2029      	movs	r0, #41	; 0x29
 8003f08:	f000 f806 	bl	8003f18 <LCD_WriteCommand>
	/* GRAM start writing */
	LCD_WriteCommand(LCD_GRAM);
 8003f0c:	202c      	movs	r0, #44	; 0x2c
 8003f0e:	f000 f803 	bl	8003f18 <LCD_WriteCommand>
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <LCD_WriteCommand>:

void LCD_WriteCommand(uint8_t com)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {com, 0};
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	733b      	strb	r3, [r7, #12]
 8003f26:	2300      	movs	r3, #0
 8003f28:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f30:	480b      	ldr	r0, [pc, #44]	; (8003f60 <LCD_WriteCommand+0x48>)
 8003f32:	f7fd fa3b 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2104      	movs	r1, #4
 8003f3a:	480a      	ldr	r0, [pc, #40]	; (8003f64 <LCD_WriteCommand+0x4c>)
 8003f3c:	f7fd fa36 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8003f40:	f107 010c 	add.w	r1, r7, #12
 8003f44:	2364      	movs	r3, #100	; 0x64
 8003f46:	2201      	movs	r2, #1
 8003f48:	4807      	ldr	r0, [pc, #28]	; (8003f68 <LCD_WriteCommand+0x50>)
 8003f4a:	f7ff fb99 	bl	8003680 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8003f4e:	2201      	movs	r2, #1
 8003f50:	2104      	movs	r1, #4
 8003f52:	4804      	ldr	r0, [pc, #16]	; (8003f64 <LCD_WriteCommand+0x4c>)
 8003f54:	f7fd fa2a 	bl	80013ac <HAL_GPIO_WritePin>
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40020c00 	.word	0x40020c00
 8003f64:	40020800 	.word	0x40020800
 8003f68:	20000130 	.word	0x20000130

08003f6c <LCD_WriteData>:

void LCD_WriteData(uint8_t data)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[2] = {data, 0};
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	733b      	strb	r3, [r7, #12]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_SET);
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f84:	480b      	ldr	r0, [pc, #44]	; (8003fb4 <LCD_WriteData+0x48>)
 8003f86:	f7fd fa11 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_RESET);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <LCD_WriteData+0x4c>)
 8003f90:	f7fd fa0c 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, buf, 1, 100);
 8003f94:	f107 010c 	add.w	r1, r7, #12
 8003f98:	2364      	movs	r3, #100	; 0x64
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4807      	ldr	r0, [pc, #28]	; (8003fbc <LCD_WriteData+0x50>)
 8003f9e:	f7ff fb6f 	bl	8003680 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <LCD_WriteData+0x4c>)
 8003fa8:	f7fd fa00 	bl	80013ac <HAL_GPIO_WritePin>
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40020c00 	.word	0x40020c00
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	20000130 	.word	0x20000130

08003fc0 <LCD_FillScreen>:

void LCD_FillScreen(uint32_t color)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	6078      	str	r0, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <LCD_FillScreen+0x50>)
 8003fca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fce:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <LCD_FillScreen+0x50>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8003fd6:	480e      	ldr	r0, [pc, #56]	; (8004010 <LCD_FillScreen+0x50>)
 8003fd8:	f7fc fc81 	bl	80008de <HAL_DMA2D_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d112      	bne.n	8004008 <LCD_FillScreen+0x48>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <LCD_FillScreen+0x54>)
 8003fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <LCD_FillScreen+0x54>)
 8003fe8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <LCD_FillScreen+0x54>)
 8003fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4806      	ldr	r0, [pc, #24]	; (8004010 <LCD_FillScreen+0x50>)
 8003ff6:	f7fc fcbb 	bl	8000970 <HAL_DMA2D_Start>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <LCD_FillScreen+0x48>
				hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8004000:	210a      	movs	r1, #10
 8004002:	4803      	ldr	r0, [pc, #12]	; (8004010 <LCD_FillScreen+0x50>)
 8004004:	f7fc fcdf 	bl	80009c6 <HAL_DMA2D_PollForTransfer>
	uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
	for (uint32_t i = 0; i < (n); i++)
	{
		*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*3)) = color;
	}*/
}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000230 	.word	0x20000230
 8004014:	20000188 	.word	0x20000188

08004018 <LCD_DrawPixel>:
    }
    while (x <= 0);
}

void LCD_DrawPixel(uint32_t x, uint32_t y, uint32_t color)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
	hdma2d.Init.Mode = DMA2D_R2M;
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <LCD_DrawPixel+0x64>)
 8004026:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800402a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.OutputOffset = 0;
 800402c:	4b13      	ldr	r3, [pc, #76]	; (800407c <LCD_DrawPixel+0x64>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8004032:	4812      	ldr	r0, [pc, #72]	; (800407c <LCD_DrawPixel+0x64>)
 8004034:	f7fc fc53 	bl	80008de <HAL_DMA2D_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d11a      	bne.n	8004074 <LCD_DrawPixel+0x5c>
	{
		if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <LCD_DrawPixel+0x68>)
 8004040:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <LCD_DrawPixel+0x68>)
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	fb02 f203 	mul.w	r2, r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	441a      	add	r2, r3
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	18ca      	adds	r2, r1, r3
 8004058:	2301      	movs	r3, #1
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2301      	movs	r3, #1
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4806      	ldr	r0, [pc, #24]	; (800407c <LCD_DrawPixel+0x64>)
 8004062:	f7fc fc85 	bl	8000970 <HAL_DMA2D_Start>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <LCD_DrawPixel+0x5c>
				, 1, 1) == HAL_OK)
		{
			HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 800406c:	210a      	movs	r1, #10
 800406e:	4803      	ldr	r0, [pc, #12]	; (800407c <LCD_DrawPixel+0x64>)
 8004070:	f7fc fca9 	bl	80009c6 <HAL_DMA2D_PollForTransfer>
		}
	}
	//*(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (3*(y*hltdc.LayerCfg[0].ImageWidth + x))) = color;
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000230 	.word	0x20000230
 8004080:	20000188 	.word	0x20000188

08004084 <LCD_FontsInit>:
		}
	}
}

void LCD_FontsInit(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
	lcdProp.BackColor = LCD_COLOR_BLACK;
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <LCD_FontsInit+0x24>)
 800408a:	2200      	movs	r2, #0
 800408c:	605a      	str	r2, [r3, #4]
	lcdProp.TextColor = LCD_COLOR_GREEN;
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <LCD_FontsInit+0x24>)
 8004090:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8004094:	601a      	str	r2, [r3, #0]
	lcdProp.pFont = &Font16;
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <LCD_FontsInit+0x24>)
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <LCD_FontsInit+0x28>)
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200000cc 	.word	0x200000cc
 80040ac:	20000008 	.word	0x20000008

080040b0 <LCD_SetFont>:

void LCD_SetFont(sFONT *fonts)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	lcdProp.pFont = fonts;
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <LCD_SetFont+0x1c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6093      	str	r3, [r2, #8]
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200000cc 	.word	0x200000cc

080040d0 <LCD_SetTextColor>:

void LCD_SetTextColor(uint32_t color)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	lcdProp.TextColor = color;
 80040d8:	4a04      	ldr	r2, [pc, #16]	; (80040ec <LCD_SetTextColor+0x1c>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	200000cc 	.word	0x200000cc

080040f0 <LCD_SetBackColor>:

void LCD_SetBackColor(uint32_t color)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	lcdProp.BackColor = color;
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <LCD_SetBackColor+0x1c>)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6053      	str	r3, [r2, #4]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	200000cc 	.word	0x200000cc

08004110 <LCD_DrawChar>:

void LCD_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
 800411a:	460b      	mov	r3, r1
 800411c:	80bb      	strh	r3, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	70fb      	strb	r3, [r7, #3]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  ch = &lcdProp.pFont->table[(c-' ') * lcdProp.pFont->Height * ((lcdProp.pFont->Width + 7) / 8)];
 8004122:	4b4e      	ldr	r3, [pc, #312]	; (800425c <LCD_DrawChar+0x14c>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	3b20      	subs	r3, #32
 800412c:	494b      	ldr	r1, [pc, #300]	; (800425c <LCD_DrawChar+0x14c>)
 800412e:	6889      	ldr	r1, [r1, #8]
 8004130:	88c9      	ldrh	r1, [r1, #6]
 8004132:	fb01 f103 	mul.w	r1, r1, r3
 8004136:	4b49      	ldr	r3, [pc, #292]	; (800425c <LCD_DrawChar+0x14c>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	889b      	ldrh	r3, [r3, #4]
 800413c:	3307      	adds	r3, #7
 800413e:	2b00      	cmp	r3, #0
 8004140:	da00      	bge.n	8004144 <LCD_DrawChar+0x34>
 8004142:	3307      	adds	r3, #7
 8004144:	10db      	asrs	r3, r3, #3
 8004146:	fb03 f301 	mul.w	r3, r3, r1
 800414a:	4413      	add	r3, r2
 800414c:	4a44      	ldr	r2, [pc, #272]	; (8004260 <LCD_DrawChar+0x150>)
 800414e:	6013      	str	r3, [r2, #0]
  height = lcdProp.pFont->Height;
 8004150:	4b42      	ldr	r3, [pc, #264]	; (800425c <LCD_DrawChar+0x14c>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	88db      	ldrh	r3, [r3, #6]
 8004156:	827b      	strh	r3, [r7, #18]
  width = lcdProp.pFont->Width;
 8004158:	4b40      	ldr	r3, [pc, #256]	; (800425c <LCD_DrawChar+0x14c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	889b      	ldrh	r3, [r3, #4]
 800415e:	823b      	strh	r3, [r7, #16]
  offset = 8*((width + 7)/8) - width;
 8004160:	8a3b      	ldrh	r3, [r7, #16]
 8004162:	3307      	adds	r3, #7
 8004164:	2b00      	cmp	r3, #0
 8004166:	da00      	bge.n	800416a <LCD_DrawChar+0x5a>
 8004168:	3307      	adds	r3, #7
 800416a:	10db      	asrs	r3, r3, #3
 800416c:	b2db      	uxtb	r3, r3
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	b2da      	uxtb	r2, r3
 8004172:	8a3b      	ldrh	r3, [r7, #16]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	73fb      	strb	r3, [r7, #15]

  for (uint32_t i = 0; i < height; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e064      	b.n	800424a <LCD_DrawChar+0x13a>
  {
	  pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 8004180:	4b37      	ldr	r3, [pc, #220]	; (8004260 <LCD_DrawChar+0x150>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	8a3b      	ldrh	r3, [r7, #16]
 8004186:	3307      	adds	r3, #7
 8004188:	2b00      	cmp	r3, #0
 800418a:	da00      	bge.n	800418e <LCD_DrawChar+0x7e>
 800418c:	3307      	adds	r3, #7
 800418e:	10db      	asrs	r3, r3, #3
 8004190:	4619      	mov	r1, r3
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	fb03 f301 	mul.w	r3, r3, r1
 8004198:	4413      	add	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
	  switch ((width + 7)/8)
 800419c:	8a3b      	ldrh	r3, [r7, #16]
 800419e:	3307      	adds	r3, #7
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da00      	bge.n	80041a6 <LCD_DrawChar+0x96>
 80041a4:	3307      	adds	r3, #7
 80041a6:	10db      	asrs	r3, r3, #3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d002      	beq.n	80041b2 <LCD_DrawChar+0xa2>
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d004      	beq.n	80041ba <LCD_DrawChar+0xaa>
 80041b0:	e00c      	b.n	80041cc <LCD_DrawChar+0xbc>
	  {
	  	  case 1:
	  		  line = pchar[0];
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	61fb      	str	r3, [r7, #28]
	  		  break;
 80041b8:	e016      	b.n	80041e8 <LCD_DrawChar+0xd8>
	  	  case 2:
	  		  line = (pchar[0] << 8) | pchar[1];
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	3201      	adds	r2, #1
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61fb      	str	r3, [r7, #28]
	  		  break;
 80041ca:	e00d      	b.n	80041e8 <LCD_DrawChar+0xd8>
	  	  case 3:
	  	  default:
	  		  line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	4313      	orrs	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	3202      	adds	r2, #2
 80041e0:	7812      	ldrb	r2, [r2, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61fb      	str	r3, [r7, #28]
	  		  break;
 80041e6:	bf00      	nop
	  }

	  for (uint32_t j = 0; j < width; j++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e023      	b.n	8004236 <LCD_DrawChar+0x126>
	  {
		  if (line & (1 << (width- j + offset- 1)))
 80041ee:	8a3a      	ldrh	r2, [r7, #16]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	4413      	add	r3, r2
 80041f8:	3b01      	subs	r3, #1
 80041fa:	2201      	movs	r2, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	461a      	mov	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <LCD_DrawChar+0x10e>
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.TextColor);
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	18d0      	adds	r0, r2, r3
 8004210:	88b9      	ldrh	r1, [r7, #4]
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <LCD_DrawChar+0x14c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	461a      	mov	r2, r3
 8004218:	f7ff fefe 	bl	8004018 <LCD_DrawPixel>
 800421c:	e008      	b.n	8004230 <LCD_DrawChar+0x120>
		  }
		  else
		  {
			  LCD_DrawPixel((x + j), y, lcdProp.BackColor);
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	18d0      	adds	r0, r2, r3
 8004224:	88b9      	ldrh	r1, [r7, #4]
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <LCD_DrawChar+0x14c>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	461a      	mov	r2, r3
 800422c:	f7ff fef4 	bl	8004018 <LCD_DrawPixel>
	  for (uint32_t j = 0; j < width; j++)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3301      	adds	r3, #1
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	8a3a      	ldrh	r2, [r7, #16]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	429a      	cmp	r2, r3
 800423c:	d8d7      	bhi.n	80041ee <LCD_DrawChar+0xde>
		  }
	  }
	  y++;
 800423e:	88bb      	ldrh	r3, [r7, #4]
 8004240:	3301      	adds	r3, #1
 8004242:	80bb      	strh	r3, [r7, #4]
  for (uint32_t i = 0; i < height; i++)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	3301      	adds	r3, #1
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	8a7a      	ldrh	r2, [r7, #18]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	429a      	cmp	r2, r3
 8004250:	d896      	bhi.n	8004180 <LCD_DrawChar+0x70>
  }
}
 8004252:	bf00      	nop
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200000cc 	.word	0x200000cc
 8004260:	200000d8 	.word	0x200000d8

08004264 <LCD_DrawString>:

void LCD_DrawString(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60ba      	str	r2, [r7, #8]
 800426c:	461a      	mov	r2, r3
 800426e:	4603      	mov	r3, r0
 8004270:	81fb      	strh	r3, [r7, #14]
 8004272:	460b      	mov	r3, r1
 8004274:	81bb      	strh	r3, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
	uint16_t ref_column = 1, i = 0;
 800427a:	2301      	movs	r3, #1
 800427c:	83fb      	strh	r3, [r7, #30]
 800427e:	2300      	movs	r3, #0
 8004280:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = Text;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	617b      	str	r3, [r7, #20]
	while (*ptr++) size++;
 800428e:	e002      	b.n	8004296 <LCD_DrawString+0x32>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	3301      	adds	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	617a      	str	r2, [r7, #20]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f6      	bne.n	8004290 <LCD_DrawString+0x2c>
	xsize = (X_SIZE/lcdProp.pFont->Width);
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <LCD_DrawString+0x118>)
 80042a4:	881a      	ldrh	r2, [r3, #0]
 80042a6:	4b36      	ldr	r3, [pc, #216]	; (8004380 <LCD_DrawString+0x11c>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	889b      	ldrh	r3, [r3, #4]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	613b      	str	r3, [r7, #16]

	switch (Mode)
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d002      	beq.n	80042c0 <LCD_DrawString+0x5c>
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d00e      	beq.n	80042dc <LCD_DrawString+0x78>
 80042be:	e01b      	b.n	80042f8 <LCD_DrawString+0x94>
	{
		case CENTER_MODE:
			ref_column = Xpos + ((xsize - size) * lcdProp.pFont->Width) / 2;
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a2e      	ldr	r2, [pc, #184]	; (8004380 <LCD_DrawString+0x11c>)
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	8892      	ldrh	r2, [r2, #4]
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	89fb      	ldrh	r3, [r7, #14]
 80042d6:	4413      	add	r3, r2
 80042d8:	83fb      	strh	r3, [r7, #30]
			break;
 80042da:	e010      	b.n	80042fe <LCD_DrawString+0x9a>
		case RIGHT_MODE:
			ref_column = - Xpos + ((xsize - size) * lcdProp.pFont->Width);
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <LCD_DrawString+0x11c>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	889b      	ldrh	r3, [r3, #4]
 80042ea:	fb12 f303 	smulbb	r3, r2, r3
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	83fb      	strh	r3, [r7, #30]
			break;
 80042f6:	e002      	b.n	80042fe <LCD_DrawString+0x9a>
		case LEFT_MODE:
		default:
			ref_column = Xpos;
 80042f8:	89fb      	ldrh	r3, [r7, #14]
 80042fa:	83fb      	strh	r3, [r7, #30]
			break;
 80042fc:	bf00      	nop
	}

	if ((ref_column < 1) || (ref_column >= 0x8000))
 80042fe:	8bfb      	ldrh	r3, [r7, #30]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <LCD_DrawString+0xa8>
 8004304:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da15      	bge.n	8004338 <LCD_DrawString+0xd4>
	{
		ref_column = 1;
 800430c:	2301      	movs	r3, #1
 800430e:	83fb      	strh	r3, [r7, #30]
	}
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8004310:	e012      	b.n	8004338 <LCD_DrawString+0xd4>
	{
		LCD_DrawChar(ref_column, Ypos, *Text);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	89b9      	ldrh	r1, [r7, #12]
 8004318:	8bfb      	ldrh	r3, [r7, #30]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fef8 	bl	8004110 <LCD_DrawChar>
		ref_column += lcdProp.pFont->Width;
 8004320:	4b17      	ldr	r3, [pc, #92]	; (8004380 <LCD_DrawString+0x11c>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	889a      	ldrh	r2, [r3, #4]
 8004326:	8bfb      	ldrh	r3, [r7, #30]
 8004328:	4413      	add	r3, r2
 800432a:	83fb      	strh	r3, [r7, #30]
		Text++;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3301      	adds	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
		i++;
 8004332:	8bbb      	ldrh	r3, [r7, #28]
 8004334:	3301      	adds	r3, #1
 8004336:	83bb      	strh	r3, [r7, #28]
	while ((*Text != 0) & (((X_SIZE - (i*lcdProp.pFont->Width)) & 0xFFFF) >= lcdProp.pFont->Width))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <LCD_DrawString+0x118>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	8bbb      	ldrh	r3, [r7, #28]
 800434e:	490c      	ldr	r1, [pc, #48]	; (8004380 <LCD_DrawString+0x11c>)
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	8889      	ldrh	r1, [r1, #4]
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	1ac3      	subs	r3, r0, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	4908      	ldr	r1, [pc, #32]	; (8004380 <LCD_DrawString+0x11c>)
 800435e:	6889      	ldr	r1, [r1, #8]
 8004360:	8889      	ldrh	r1, [r1, #4]
 8004362:	428b      	cmp	r3, r1
 8004364:	bfac      	ite	ge
 8004366:	2301      	movge	r3, #1
 8004368:	2300      	movlt	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	4013      	ands	r3, r2
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ce      	bne.n	8004312 <LCD_DrawString+0xae>
	}
}
 8004374:	bf00      	nop
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000028 	.word	0x20000028
 8004380:	200000cc 	.word	0x200000cc

08004384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800438a:	f7fc f909 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800438e:	f000 f8cd 	bl	800452c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004392:	f000 fadb 	bl	800494c <MX_GPIO_Init>
  MX_LTDC_Init();
 8004396:	f000 f9db 	bl	8004750 <MX_LTDC_Init>
  MX_SPI5_Init();
 800439a:	f000 fa59 	bl	8004850 <MX_SPI5_Init>
  MX_FMC_Init();
 800439e:	f000 fa8d 	bl	80048bc <MX_FMC_Init>
  MX_DMA2D_Init();
 80043a2:	f000 f94d 	bl	8004640 <MX_DMA2D_Init>
  MX_I2C3_Init();
 80043a6:	f000 f993 	bl	80046d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  SDRAM_init(&hsdram1);
 80043aa:	4850      	ldr	r0, [pc, #320]	; (80044ec <main+0x168>)
 80043ac:	f000 fb84 	bl	8004ab8 <SDRAM_init>
  LCD_PowerOn();
 80043b0:	f7ff fc69 	bl	8003c86 <LCD_PowerOn>
  HAL_LTDC_SetAddress(&hltdc,(uint32_t) LCD_FRAME_BUFFER + BUFFER_OFFSET,0);
 80043b4:	2200      	movs	r2, #0
 80043b6:	494e      	ldr	r1, [pc, #312]	; (80044f0 <main+0x16c>)
 80043b8:	484e      	ldr	r0, [pc, #312]	; (80044f4 <main+0x170>)
 80043ba:	f7fe f8b3 	bl	8002524 <HAL_LTDC_SetAddress>
  TP_Config();
 80043be:	f001 f875 	bl	80054ac <TP_Config>

  LCD_FillScreen(LCD_COLOR_BLACK);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7ff fdfc 	bl	8003fc0 <LCD_FillScreen>
  LCD_FontsInit();
 80043c8:	f7ff fe5c 	bl	8004084 <LCD_FontsInit>
  LCD_SetFont(&Font24);
 80043cc:	484a      	ldr	r0, [pc, #296]	; (80044f8 <main+0x174>)
 80043ce:	f7ff fe6f 	bl	80040b0 <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_YELLOW);
 80043d2:	484a      	ldr	r0, [pc, #296]	; (80044fc <main+0x178>)
 80043d4:	f7ff fe7c 	bl	80040d0 <LCD_SetTextColor>
  LCD_SetBackColor(LCD_COLOR_BLUE);
 80043d8:	20ff      	movs	r0, #255	; 0xff
 80043da:	f7ff fe89 	bl	80040f0 <LCD_SetBackColor>
  LCD_DrawChar(10, 10, (uint8_t) 'T');
 80043de:	2254      	movs	r2, #84	; 0x54
 80043e0:	210a      	movs	r1, #10
 80043e2:	200a      	movs	r0, #10
 80043e4:	f7ff fe94 	bl	8004110 <LCD_DrawChar>
  LCD_DrawChar(27, 10, (uint8_t) 'e');
 80043e8:	2265      	movs	r2, #101	; 0x65
 80043ea:	210a      	movs	r1, #10
 80043ec:	201b      	movs	r0, #27
 80043ee:	f7ff fe8f 	bl	8004110 <LCD_DrawChar>
  LCD_DrawChar(44, 10, (uint8_t) 's');
 80043f2:	2273      	movs	r2, #115	; 0x73
 80043f4:	210a      	movs	r1, #10
 80043f6:	202c      	movs	r0, #44	; 0x2c
 80043f8:	f7ff fe8a 	bl	8004110 <LCD_DrawChar>
  LCD_DrawChar(61, 10, (uint8_t) 't');
 80043fc:	2274      	movs	r2, #116	; 0x74
 80043fe:	210a      	movs	r1, #10
 8004400:	203d      	movs	r0, #61	; 0x3d
 8004402:	f7ff fe85 	bl	8004110 <LCD_DrawChar>

  LCD_SetFont(&Font16);
 8004406:	483e      	ldr	r0, [pc, #248]	; (8004500 <main+0x17c>)
 8004408:	f7ff fe52 	bl	80040b0 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKBLUE);
 800440c:	2080      	movs	r0, #128	; 0x80
 800440e:	f7ff fe6f 	bl	80040f0 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_LIGHTRED);
 8004412:	483c      	ldr	r0, [pc, #240]	; (8004504 <main+0x180>)
 8004414:	f7ff fe5c 	bl	80040d0 <LCD_SetTextColor>
  LCD_DrawString(10, 30, (uint8_t *)"Left 16", LEFT_MODE);
 8004418:	2303      	movs	r3, #3
 800441a:	4a3b      	ldr	r2, [pc, #236]	; (8004508 <main+0x184>)
 800441c:	211e      	movs	r1, #30
 800441e:	200a      	movs	r0, #10
 8004420:	f7ff ff20 	bl	8004264 <LCD_DrawString>

  LCD_SetFont(&Font8);
 8004424:	4839      	ldr	r0, [pc, #228]	; (800450c <main+0x188>)
 8004426:	f7ff fe43 	bl	80040b0 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_DARKCYAN);
 800442a:	f248 0080 	movw	r0, #32896	; 0x8080
 800442e:	f7ff fe5f 	bl	80040f0 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8004432:	f04f 10ff 	mov.w	r0, #16711935	; 0xff00ff
 8004436:	f7ff fe4b 	bl	80040d0 <LCD_SetTextColor>
  LCD_DrawString(10, 50, (uint8_t *)"Right 8", RIGHT_MODE);
 800443a:	2302      	movs	r3, #2
 800443c:	4a34      	ldr	r2, [pc, #208]	; (8004510 <main+0x18c>)
 800443e:	2132      	movs	r1, #50	; 0x32
 8004440:	200a      	movs	r0, #10
 8004442:	f7ff ff0f 	bl	8004264 <LCD_DrawString>

  LCD_SetFont(&Font24);
 8004446:	482c      	ldr	r0, [pc, #176]	; (80044f8 <main+0x174>)
 8004448:	f7ff fe32 	bl	80040b0 <LCD_SetFont>
  LCD_SetBackColor(LCD_COLOR_BLACK);
 800444c:	2000      	movs	r0, #0
 800444e:	f7ff fe4f 	bl	80040f0 <LCD_SetBackColor>
  LCD_SetTextColor(LCD_COLOR_CYAN);
 8004452:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004456:	f7ff fe3b 	bl	80040d0 <LCD_SetTextColor>
  LCD_DrawString(10, 100, (uint8_t *)"Center 24", CENTER_MODE);
 800445a:	2301      	movs	r3, #1
 800445c:	4a2d      	ldr	r2, [pc, #180]	; (8004514 <main+0x190>)
 800445e:	2164      	movs	r1, #100	; 0x64
 8004460:	200a      	movs	r0, #10
 8004462:	f7ff feff 	bl	8004264 <LCD_DrawString>

  LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8004466:	f04f 1080 	mov.w	r0, #8388736	; 0x800080
 800446a:	f7ff fe31 	bl	80040d0 <LCD_SetTextColor>
  LCD_DrawString(0, 200, (uint8_t *)"Left 24", LEFT_MODE);
 800446e:	2303      	movs	r3, #3
 8004470:	4a29      	ldr	r2, [pc, #164]	; (8004518 <main+0x194>)
 8004472:	21c8      	movs	r1, #200	; 0xc8
 8004474:	2000      	movs	r0, #0
 8004476:	f7ff fef5 	bl	8004264 <LCD_DrawString>
  HAL_Delay(2000);
 800447a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800447e:	f7fc f901 	bl	8000684 <HAL_Delay>
  LCD_SetFont(&Font20);
 8004482:	4826      	ldr	r0, [pc, #152]	; (800451c <main+0x198>)
 8004484:	f7ff fe14 	bl	80040b0 <LCD_SetFont>
  LCD_SetTextColor(LCD_COLOR_ORANGE);
 8004488:	4825      	ldr	r0, [pc, #148]	; (8004520 <main+0x19c>)
 800448a:	f7ff fe21 	bl	80040d0 <LCD_SetTextColor>
  LCD_FillScreen(0x00);
 800448e:	2000      	movs	r0, #0
 8004490:	f7ff fd96 	bl	8003fc0 <LCD_FillScreen>

  tp_state_t tp_state;
  char str[20] = {0};
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	60da      	str	r2, [r3, #12]
 80044a0:	611a      	str	r2, [r3, #16]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(TP_INT_GPIO_Port, TP_INT_Pin) == 1)
 80044a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044a6:	481f      	ldr	r0, [pc, #124]	; (8004524 <main+0x1a0>)
 80044a8:	f7fc ff68 	bl	800137c <HAL_GPIO_ReadPin>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d1f7      	bne.n	80044a2 <main+0x11e>
	  {
		  TP_GetState(&tp_state);
 80044b2:	f107 0318 	add.w	r3, r7, #24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 f88c 	bl	80055d4 <TP_GetState>
		  if (tp_state.touchDetected)
 80044bc:	7e3b      	ldrb	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0ef      	beq.n	80044a2 <main+0x11e>
		  {
			  sprintf(str, "x=%03d, y=%03d", tp_state.x, tp_state.y);
 80044c2:	8b7b      	ldrh	r3, [r7, #26]
 80044c4:	461a      	mov	r2, r3
 80044c6:	8bbb      	ldrh	r3, [r7, #28]
 80044c8:	1d38      	adds	r0, r7, #4
 80044ca:	4917      	ldr	r1, [pc, #92]	; (8004528 <main+0x1a4>)
 80044cc:	f001 f966 	bl	800579c <siprintf>
			  LCD_DrawString(0, 20, (uint8_t*)str, CENTER_MODE);
 80044d0:	1d3a      	adds	r2, r7, #4
 80044d2:	2301      	movs	r3, #1
 80044d4:	2114      	movs	r1, #20
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7ff fec4 	bl	8004264 <LCD_DrawString>
			  LCD_DrawPixel(tp_state.x, tp_state.y, LCD_COLOR_LIGHTRED);
 80044dc:	8b7b      	ldrh	r3, [r7, #26]
 80044de:	4618      	mov	r0, r3
 80044e0:	8bbb      	ldrh	r3, [r7, #28]
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <main+0x180>)
 80044e4:	4619      	mov	r1, r3
 80044e6:	f7ff fd97 	bl	8004018 <LCD_DrawPixel>
	  if (HAL_GPIO_ReadPin(TP_INT_GPIO_Port, TP_INT_Pin) == 1)
 80044ea:	e7da      	b.n	80044a2 <main+0x11e>
 80044ec:	20000270 	.word	0x20000270
 80044f0:	d0050000 	.word	0xd0050000
 80044f4:	20000188 	.word	0x20000188
 80044f8:	20000018 	.word	0x20000018
 80044fc:	00ffff00 	.word	0x00ffff00
 8004500:	20000008 	.word	0x20000008
 8004504:	00ff8080 	.word	0x00ff8080
 8004508:	0800600c 	.word	0x0800600c
 800450c:	20000020 	.word	0x20000020
 8004510:	08006014 	.word	0x08006014
 8004514:	0800601c 	.word	0x0800601c
 8004518:	08006028 	.word	0x08006028
 800451c:	20000010 	.word	0x20000010
 8004520:	00ffa500 	.word	0x00ffa500
 8004524:	40020000 	.word	0x40020000
 8004528:	08006030 	.word	0x08006030

0800452c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b0a0      	sub	sp, #128	; 0x80
 8004530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004532:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004536:	2230      	movs	r2, #48	; 0x30
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f926 	bl	800578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004540:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	60da      	str	r2, [r3, #12]
 800454e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	2230      	movs	r2, #48	; 0x30
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f001 f917 	bl	800578c <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	4a35      	ldr	r2, [pc, #212]	; (8004638 <SystemClock_Config+0x10c>)
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <SystemClock_Config+0x10c>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	; 0x40
 800456e:	4b32      	ldr	r3, [pc, #200]	; (8004638 <SystemClock_Config+0x10c>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <SystemClock_Config+0x110>)
 8004580:	4b2e      	ldr	r3, [pc, #184]	; (800463c <SystemClock_Config+0x110>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <SystemClock_Config+0x110>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004596:	2302      	movs	r3, #2
 8004598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800459a:	2301      	movs	r3, #1
 800459c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800459e:	2310      	movs	r3, #16
 80045a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045a2:	2302      	movs	r3, #2
 80045a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80045a6:	2300      	movs	r3, #0
 80045a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80045aa:	2308      	movs	r3, #8
 80045ac:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80045ae:	23b4      	movs	r3, #180	; 0xb4
 80045b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045b2:	2302      	movs	r3, #2
 80045b4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80045b6:	2304      	movs	r3, #4
 80045b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe f9de 	bl	8002980 <HAL_RCC_OscConfig>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80045ca:	f000 fa6d 	bl	8004aa8 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045ce:	f7fe f987 	bl	80028e0 <HAL_PWREx_EnableOverDrive>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80045d8:	f000 fa66 	bl	8004aa8 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045dc:	230f      	movs	r3, #15
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045e0:	2302      	movs	r3, #2
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045e4:	2300      	movs	r3, #0
 80045e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80045f8:	2105      	movs	r1, #5
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fc02 	bl	8002e04 <HAL_RCC_ClockConfig>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8004606:	f000 fa4f 	bl	8004aa8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800460a:	2308      	movs	r3, #8
 800460c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800460e:	233c      	movs	r3, #60	; 0x3c
 8004610:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004612:	2302      	movs	r3, #2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800461c:	f107 030c 	add.w	r3, r7, #12
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fda7 	bl	8003174 <HAL_RCCEx_PeriphCLKConfig>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <SystemClock_Config+0x104>
  {
    Error_Handler();
 800462c:	f000 fa3c 	bl	8004aa8 <Error_Handler>
  }
}
 8004630:	bf00      	nop
 8004632:	3780      	adds	r7, #128	; 0x80
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	40007000 	.word	0x40007000

08004640 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8004644:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <MX_DMA2D_Init+0x8c>)
 8004648:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 800464a:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <MX_DMA2D_Init+0x88>)
 800464c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004650:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8004652:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004654:	2201      	movs	r2, #1
 8004656:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <MX_DMA2D_Init+0x88>)
 800465a:	2200      	movs	r2, #0
 800465c:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 800465e:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004660:	2200      	movs	r2, #0
 8004662:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB888;
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004666:	2201      	movs	r2, #1
 8004668:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_REPLACE_ALPHA;
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <MX_DMA2D_Init+0x88>)
 800466c:	2201      	movs	r2, #1
 800466e:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004672:	2200      	movs	r2, #0
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004678:	2200      	movs	r2, #0
 800467a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <MX_DMA2D_Init+0x88>)
 800467e:	2201      	movs	r2, #1
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004684:	2201      	movs	r2, #1
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <MX_DMA2D_Init+0x88>)
 800468a:	2200      	movs	r2, #0
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800468e:	480e      	ldr	r0, [pc, #56]	; (80046c8 <MX_DMA2D_Init+0x88>)
 8004690:	f7fc f925 	bl	80008de <HAL_DMA2D_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 800469a:	f000 fa05 	bl	8004aa8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 800469e:	2100      	movs	r1, #0
 80046a0:	4809      	ldr	r0, [pc, #36]	; (80046c8 <MX_DMA2D_Init+0x88>)
 80046a2:	f7fc fb89 	bl	8000db8 <HAL_DMA2D_ConfigLayer>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 80046ac:	f000 f9fc 	bl	8004aa8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80046b0:	2101      	movs	r1, #1
 80046b2:	4805      	ldr	r0, [pc, #20]	; (80046c8 <MX_DMA2D_Init+0x88>)
 80046b4:	f7fc fb80 	bl	8000db8 <HAL_DMA2D_ConfigLayer>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 80046be:	f000 f9f3 	bl	8004aa8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000230 	.word	0x20000230
 80046cc:	4002b000 	.word	0x4002b000

080046d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <MX_I2C3_Init+0x74>)
 80046d6:	4a1c      	ldr	r2, [pc, #112]	; (8004748 <MX_I2C3_Init+0x78>)
 80046d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <MX_I2C3_Init+0x74>)
 80046dc:	4a1b      	ldr	r2, [pc, #108]	; (800474c <MX_I2C3_Init+0x7c>)
 80046de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <MX_I2C3_Init+0x74>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 130;
 80046e6:	4b17      	ldr	r3, [pc, #92]	; (8004744 <MX_I2C3_Init+0x74>)
 80046e8:	2282      	movs	r2, #130	; 0x82
 80046ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <MX_I2C3_Init+0x74>)
 80046ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <MX_I2C3_Init+0x74>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <MX_I2C3_Init+0x74>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004700:	4b10      	ldr	r3, [pc, #64]	; (8004744 <MX_I2C3_Init+0x74>)
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <MX_I2C3_Init+0x74>)
 8004708:	2200      	movs	r2, #0
 800470a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800470c:	480d      	ldr	r0, [pc, #52]	; (8004744 <MX_I2C3_Init+0x74>)
 800470e:	f7fc fe67 	bl	80013e0 <HAL_I2C_Init>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004718:	f000 f9c6 	bl	8004aa8 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800471c:	2100      	movs	r1, #0
 800471e:	4809      	ldr	r0, [pc, #36]	; (8004744 <MX_I2C3_Init+0x74>)
 8004720:	f7fd fd73 	bl	800220a <HAL_I2CEx_ConfigAnalogFilter>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800472a:	f000 f9bd 	bl	8004aa8 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800472e:	2100      	movs	r1, #0
 8004730:	4804      	ldr	r0, [pc, #16]	; (8004744 <MX_I2C3_Init+0x74>)
 8004732:	f7fd fda6 	bl	8002282 <HAL_I2CEx_ConfigDigitalFilter>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800473c:	f000 f9b4 	bl	8004aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004740:	bf00      	nop
 8004742:	bd80      	pop	{r7, pc}
 8004744:	200000dc 	.word	0x200000dc
 8004748:	40005c00 	.word	0x40005c00
 800474c:	000186a0 	.word	0x000186a0

08004750 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2234      	movs	r2, #52	; 0x34
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f815 	bl	800578c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8004762:	4b39      	ldr	r3, [pc, #228]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004764:	4a39      	ldr	r2, [pc, #228]	; (800484c <MX_LTDC_Init+0xfc>)
 8004766:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8004768:	4b37      	ldr	r3, [pc, #220]	; (8004848 <MX_LTDC_Init+0xf8>)
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004770:	2200      	movs	r2, #0
 8004772:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004776:	2200      	movs	r2, #0
 8004778:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800477a:	4b33      	ldr	r3, [pc, #204]	; (8004848 <MX_LTDC_Init+0xf8>)
 800477c:	2200      	movs	r2, #0
 800477e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 8;
 8004780:	4b31      	ldr	r3, [pc, #196]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004782:	2208      	movs	r2, #8
 8004784:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004788:	2200      	movs	r2, #0
 800478a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800478c:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <MX_LTDC_Init+0xf8>)
 800478e:	221d      	movs	r2, #29
 8004790:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8004792:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004794:	2203      	movs	r2, #3
 8004796:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8004798:	4b2b      	ldr	r3, [pc, #172]	; (8004848 <MX_LTDC_Init+0xf8>)
 800479a:	f240 120d 	movw	r2, #269	; 0x10d
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80047a0:	4b29      	ldr	r3, [pc, #164]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047a2:	f240 1243 	movw	r2, #323	; 0x143
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047aa:	f240 1217 	movw	r2, #279	; 0x117
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047b2:	f240 1247 	movw	r2, #327	; 0x147
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80047b8:	4b23      	ldr	r3, [pc, #140]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80047c0:	4b21      	ldr	r3, [pc, #132]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80047d0:	481d      	ldr	r0, [pc, #116]	; (8004848 <MX_LTDC_Init+0xf8>)
 80047d2:	f7fd fd95 	bl	8002300 <HAL_LTDC_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80047dc:	f000 f964 	bl	8004aa8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80047e4:	23f0      	movs	r3, #240	; 0xf0
 80047e6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80047ec:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80047f0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80047f6:	23ff      	movs	r3, #255	; 0xff
 80047f8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80047fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004802:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004804:	2305      	movs	r3, #5
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800480c:	23f0      	movs	r3, #240	; 0xf0
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8004810:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	2200      	movs	r2, #0
 800482c:	4619      	mov	r1, r3
 800482e:	4806      	ldr	r0, [pc, #24]	; (8004848 <MX_LTDC_Init+0xf8>)
 8004830:	f7fd fe3a 	bl	80024a8 <HAL_LTDC_ConfigLayer>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800483a:	f000 f935 	bl	8004aa8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800483e:	bf00      	nop
 8004840:	3738      	adds	r7, #56	; 0x38
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000188 	.word	0x20000188
 800484c:	40016800 	.word	0x40016800

08004850 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8004854:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <MX_SPI5_Init+0x68>)
 8004858:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800485a:	4b16      	ldr	r3, [pc, #88]	; (80048b4 <MX_SPI5_Init+0x64>)
 800485c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004860:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <MX_SPI5_Init+0x64>)
 800486a:	2200      	movs	r2, #0
 800486c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <MX_SPI5_Init+0x64>)
 800487c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004880:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004882:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004884:	2218      	movs	r2, #24
 8004886:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <MX_SPI5_Init+0x64>)
 800488a:	2200      	movs	r2, #0
 800488c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004890:	2200      	movs	r2, #0
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004894:	4b07      	ldr	r3, [pc, #28]	; (80048b4 <MX_SPI5_Init+0x64>)
 8004896:	2200      	movs	r2, #0
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <MX_SPI5_Init+0x64>)
 800489c:	220a      	movs	r2, #10
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80048a0:	4804      	ldr	r0, [pc, #16]	; (80048b4 <MX_SPI5_Init+0x64>)
 80048a2:	f7fe fe8a 	bl	80035ba <HAL_SPI_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80048ac:	f000 f8fc 	bl	8004aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000130 	.word	0x20000130
 80048b8:	40015000 	.word	0x40015000

080048bc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <MX_FMC_Init+0x88>)
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <MX_FMC_Init+0x8c>)
 80048c6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80048c8:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <MX_FMC_Init+0x88>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80048ce:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <MX_FMC_Init+0x88>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <MX_FMC_Init+0x88>)
 80048d6:	2204      	movs	r2, #4
 80048d8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80048da:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <MX_FMC_Init+0x88>)
 80048dc:	2210      	movs	r2, #16
 80048de:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <MX_FMC_Init+0x88>)
 80048e2:	2240      	movs	r2, #64	; 0x40
 80048e4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <MX_FMC_Init+0x88>)
 80048e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80048ec:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <MX_FMC_Init+0x88>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80048f4:	4b13      	ldr	r3, [pc, #76]	; (8004944 <MX_FMC_Init+0x88>)
 80048f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fa:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <MX_FMC_Init+0x88>)
 80048fe:	2200      	movs	r2, #0
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <MX_FMC_Init+0x88>)
 8004904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004908:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800490a:	2302      	movs	r3, #2
 800490c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800490e:	2307      	movs	r3, #7
 8004910:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8004912:	2304      	movs	r3, #4
 8004914:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8004916:	2307      	movs	r3, #7
 8004918:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800491a:	2303      	movs	r3, #3
 800491c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800491e:	2302      	movs	r3, #2
 8004920:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8004922:	2302      	movs	r3, #2
 8004924:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004926:	1d3b      	adds	r3, r7, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4806      	ldr	r0, [pc, #24]	; (8004944 <MX_FMC_Init+0x88>)
 800492c:	f7fe fdc6 	bl	80034bc <HAL_SDRAM_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8004936:	f000 f8b7 	bl	8004aa8 <Error_Handler>
  }

}
 800493a:	bf00      	nop
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000270 	.word	0x20000270
 8004948:	a0000140 	.word	0xa0000140

0800494c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	; 0x30
 8004950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004952:	f107 031c 	add.w	r3, r7, #28
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	605a      	str	r2, [r3, #4]
 800495c:	609a      	str	r2, [r3, #8]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	4a4c      	ldr	r2, [pc, #304]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004968:	4b4b      	ldr	r3, [pc, #300]	; (8004a98 <MX_GPIO_Init+0x14c>)
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6313      	str	r3, [r2, #48]	; 0x30
 8004972:	4b49      	ldr	r3, [pc, #292]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	4a45      	ldr	r2, [pc, #276]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004984:	4b44      	ldr	r3, [pc, #272]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	6313      	str	r3, [r2, #48]	; 0x30
 800498e:	4b42      	ldr	r3, [pc, #264]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	4a3e      	ldr	r2, [pc, #248]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049a0:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6313      	str	r3, [r2, #48]	; 0x30
 80049aa:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	4a37      	ldr	r2, [pc, #220]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049bc:	4b36      	ldr	r3, [pc, #216]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	6313      	str	r3, [r2, #48]	; 0x30
 80049c6:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80049d2:	2300      	movs	r3, #0
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	4a30      	ldr	r2, [pc, #192]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e0:	6313      	str	r3, [r2, #48]	; 0x30
 80049e2:	4b2d      	ldr	r3, [pc, #180]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049f4:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <MX_GPIO_Init+0x14c>)
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	f043 0310 	orr.w	r3, r3, #16
 80049fc:	6313      	str	r3, [r2, #48]	; 0x30
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	607b      	str	r3, [r7, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004a10:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	f043 0308 	orr.w	r3, r3, #8
 8004a18:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <MX_GPIO_Init+0x14c>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_NCS_GPIO_Port, LTDC_NCS_Pin, GPIO_PIN_SET);
 8004a26:	2201      	movs	r2, #1
 8004a28:	2104      	movs	r1, #4
 8004a2a:	481c      	ldr	r0, [pc, #112]	; (8004a9c <MX_GPIO_Init+0x150>)
 8004a2c:	f7fc fcbe 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_WRX_GPIO_Port, LTDC_WRX_Pin, GPIO_PIN_RESET);
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a36:	481a      	ldr	r0, [pc, #104]	; (8004aa0 <MX_GPIO_Init+0x154>)
 8004a38:	f7fc fcb8 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LTDC_NCS_Pin */
  GPIO_InitStruct.Pin = LTDC_NCS_Pin;
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a40:	2301      	movs	r3, #1
 8004a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_NCS_GPIO_Port, &GPIO_InitStruct);
 8004a4c:	f107 031c 	add.w	r3, r7, #28
 8004a50:	4619      	mov	r1, r3
 8004a52:	4812      	ldr	r0, [pc, #72]	; (8004a9c <MX_GPIO_Init+0x150>)
 8004a54:	f7fc fae8 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_WRX_Pin */
  GPIO_InitStruct.Pin = LTDC_WRX_Pin;
 8004a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a66:	2302      	movs	r3, #2
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LTDC_WRX_GPIO_Port, &GPIO_InitStruct);
 8004a6a:	f107 031c 	add.w	r3, r7, #28
 8004a6e:	4619      	mov	r1, r3
 8004a70:	480b      	ldr	r0, [pc, #44]	; (8004aa0 <MX_GPIO_Init+0x154>)
 8004a72:	f7fc fad9 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8004a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8004a84:	f107 031c 	add.w	r3, r7, #28
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4806      	ldr	r0, [pc, #24]	; (8004aa4 <MX_GPIO_Init+0x158>)
 8004a8c:	f7fc facc 	bl	8001028 <HAL_GPIO_Init>

}
 8004a90:	bf00      	nop
 8004a92:	3730      	adds	r7, #48	; 0x30
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40020800 	.word	0x40020800
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40020000 	.word	0x40020000

08004aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <SDRAM_init>:
#include "sdram.h"

FMC_SDRAM_CommandTypeDef command;

void SDRAM_init(SDRAM_HandleTypeDef *hsdram)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpr = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8004ac4:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <SDRAM_init+0xcc>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004aca:	4b2e      	ldr	r3, [pc, #184]	; (8004b84 <SDRAM_init+0xcc>)
 8004acc:	2208      	movs	r2, #8
 8004ace:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8004ad0:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <SDRAM_init+0xcc>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <SDRAM_init+0xcc>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8004adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae0:	4928      	ldr	r1, [pc, #160]	; (8004b84 <SDRAM_init+0xcc>)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fe fd1e 	bl	8003524 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8004ae8:	200a      	movs	r0, #10
 8004aea:	f7fb fdcb 	bl	8000684 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8004aee:	4b25      	ldr	r3, [pc, #148]	; (8004b84 <SDRAM_init+0xcc>)
 8004af0:	2202      	movs	r2, #2
 8004af2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004af4:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <SDRAM_init+0xcc>)
 8004af6:	2208      	movs	r2, #8
 8004af8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8004afa:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <SDRAM_init+0xcc>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8004b00:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <SDRAM_init+0xcc>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8004b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b0a:	491e      	ldr	r1, [pc, #120]	; (8004b84 <SDRAM_init+0xcc>)
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fe fd09 	bl	8003524 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8004b12:	200a      	movs	r0, #10
 8004b14:	f7fb fdb6 	bl	8000684 <HAL_Delay>
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b18:	4b1a      	ldr	r3, [pc, #104]	; (8004b84 <SDRAM_init+0xcc>)
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004b1e:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <SDRAM_init+0xcc>)
 8004b20:	2208      	movs	r2, #8
 8004b22:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 4;
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <SDRAM_init+0xcc>)
 8004b26:	2204      	movs	r2, #4
 8004b28:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <SDRAM_init+0xcc>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	60da      	str	r2, [r3, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8004b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b34:	4913      	ldr	r1, [pc, #76]	; (8004b84 <SDRAM_init+0xcc>)
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fe fcf4 	bl	8003524 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f7fb fda1 	bl	8000684 <HAL_Delay>

	tmpr = (uint32_t) 0x01 | 0x00 | 0x30 | 0x00 | 0x200;
 8004b42:	f240 2331 	movw	r3, #561	; 0x231
 8004b46:	60fb      	str	r3, [r7, #12]
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8004b48:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <SDRAM_init+0xcc>)
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <SDRAM_init+0xcc>)
 8004b50:	2208      	movs	r2, #8
 8004b52:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <SDRAM_init+0xcc>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmpr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <SDRAM_init+0xcc>)
 8004b5e:	60d3      	str	r3, [r2, #12]
	HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8004b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b64:	4907      	ldr	r1, [pc, #28]	; (8004b84 <SDRAM_init+0xcc>)
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fe fcdc 	bl	8003524 <HAL_SDRAM_SendCommand>
	HAL_Delay(10);
 8004b6c:	200a      	movs	r0, #10
 8004b6e:	f7fb fd89 	bl	8000684 <HAL_Delay>

	HAL_SDRAM_ProgramRefreshRate(hsdram, 1386);
 8004b72:	f240 516a 	movw	r1, #1386	; 0x56a
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe fcff 	bl	800357a <HAL_SDRAM_ProgramRefreshRate>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200002a4 	.word	0x200002a4

08004b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <HAL_MspInit+0x4c>)
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <HAL_MspInit+0x4c>)
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <HAL_MspInit+0x4c>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <HAL_MspInit+0x4c>)
 8004bb0:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_MspInit+0x4c>)
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_MspInit+0x4c>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_DMA2D_MspInit+0x48>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d115      	bne.n	8004c16 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4a0d      	ldr	r2, [pc, #52]	; (8004c24 <HAL_DMA2D_MspInit+0x4c>)
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_DMA2D_MspInit+0x4c>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_DMA2D_MspInit+0x4c>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8004c06:	2200      	movs	r2, #0
 8004c08:	2100      	movs	r1, #0
 8004c0a:	205a      	movs	r0, #90	; 0x5a
 8004c0c:	f7fb fe31 	bl	8000872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004c10:	205a      	movs	r0, #90	; 0x5a
 8004c12:	f7fb fe4a 	bl	80008aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	4002b000 	.word	0x4002b000
 8004c24:	40023800 	.word	0x40023800

08004c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	60da      	str	r2, [r3, #12]
 8004c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a29      	ldr	r2, [pc, #164]	; (8004cec <HAL_I2C_MspInit+0xc4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d14b      	bne.n	8004ce2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f043 0304 	orr.w	r3, r3, #4
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	4a21      	ldr	r2, [pc, #132]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c88:	2312      	movs	r3, #18
 8004c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c90:	2303      	movs	r3, #3
 8004c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c94:	2304      	movs	r3, #4
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4815      	ldr	r0, [pc, #84]	; (8004cf4 <HAL_I2C_MspInit+0xcc>)
 8004ca0:	f7fc f9c2 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004caa:	2312      	movs	r3, #18
 8004cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004cb6:	2304      	movs	r3, #4
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cba:	f107 0314 	add.w	r3, r7, #20
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	480d      	ldr	r0, [pc, #52]	; (8004cf8 <HAL_I2C_MspInit+0xd0>)
 8004cc2:	f7fc f9b1 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004ccc:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_I2C_MspInit+0xc8>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004ce2:	bf00      	nop
 8004ce4:	3728      	adds	r7, #40	; 0x28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40005c00 	.word	0x40005c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40020800 	.word	0x40020800
 8004cf8:	40020000 	.word	0x40020000

08004cfc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	; 0x38
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a77      	ldr	r2, [pc, #476]	; (8004ef8 <HAL_LTDC_MspInit+0x1fc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f040 80e8 	bne.w	8004ef0 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	4a75      	ldr	r2, [pc, #468]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d26:	4b75      	ldr	r3, [pc, #468]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d30:	4b72      	ldr	r3, [pc, #456]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	4a6e      	ldr	r2, [pc, #440]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d42:	4b6e      	ldr	r3, [pc, #440]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d46:	f043 0320 	orr.w	r3, r3, #32
 8004d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4c:	4b6b      	ldr	r3, [pc, #428]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	4a67      	ldr	r2, [pc, #412]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d5e:	4b67      	ldr	r3, [pc, #412]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6313      	str	r3, [r2, #48]	; 0x30
 8004d68:	4b64      	ldr	r3, [pc, #400]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	4a60      	ldr	r2, [pc, #384]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d7a:	4b60      	ldr	r3, [pc, #384]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	6313      	str	r3, [r2, #48]	; 0x30
 8004d84:	4b5d      	ldr	r3, [pc, #372]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d90:	2300      	movs	r3, #0
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	4a59      	ldr	r2, [pc, #356]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d96:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004da0:	4b56      	ldr	r3, [pc, #344]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	4a52      	ldr	r2, [pc, #328]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004db2:	4b52      	ldr	r3, [pc, #328]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbc:	4b4f      	ldr	r3, [pc, #316]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	4a4b      	ldr	r2, [pc, #300]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004dce:	4b4b      	ldr	r3, [pc, #300]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f043 0308 	orr.w	r3, r3, #8
 8004dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd8:	4b48      	ldr	r3, [pc, #288]	; (8004efc <HAL_LTDC_MspInit+0x200>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004df2:	2302      	movs	r3, #2
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004df6:	230e      	movs	r3, #14
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfe:	4619      	mov	r1, r3
 8004e00:	483f      	ldr	r0, [pc, #252]	; (8004f00 <HAL_LTDC_MspInit+0x204>)
 8004e02:	f7fc f911 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8004e06:	f641 0358 	movw	r3, #6232	; 0x1858
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e14:	2302      	movs	r3, #2
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e18:	230e      	movs	r3, #14
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e20:	4619      	mov	r1, r3
 8004e22:	4838      	ldr	r0, [pc, #224]	; (8004f04 <HAL_LTDC_MspInit+0x208>)
 8004e24:	f7fc f900 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e34:	2302      	movs	r3, #2
 8004e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004e38:	2309      	movs	r3, #9
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e40:	4619      	mov	r1, r3
 8004e42:	4831      	ldr	r0, [pc, #196]	; (8004f08 <HAL_LTDC_MspInit+0x20c>)
 8004e44:	f7fc f8f0 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8004e48:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e56:	2302      	movs	r3, #2
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e62:	4619      	mov	r1, r3
 8004e64:	4828      	ldr	r0, [pc, #160]	; (8004f08 <HAL_LTDC_MspInit+0x20c>)
 8004e66:	f7fc f8df 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8004e6a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e70:	2302      	movs	r3, #2
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e7c:	230e      	movs	r3, #14
 8004e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e84:	4619      	mov	r1, r3
 8004e86:	4821      	ldr	r0, [pc, #132]	; (8004f0c <HAL_LTDC_MspInit+0x210>)
 8004e88:	f7fc f8ce 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8004e8c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e92:	2302      	movs	r3, #2
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004e9e:	230e      	movs	r3, #14
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4819      	ldr	r0, [pc, #100]	; (8004f10 <HAL_LTDC_MspInit+0x214>)
 8004eaa:	f7fc f8bd 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8004eae:	2348      	movs	r3, #72	; 0x48
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004ebe:	230e      	movs	r3, #14
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4812      	ldr	r0, [pc, #72]	; (8004f14 <HAL_LTDC_MspInit+0x218>)
 8004eca:	f7fc f8ad 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004ece:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004edc:	2302      	movs	r3, #2
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4808      	ldr	r0, [pc, #32]	; (8004f0c <HAL_LTDC_MspInit+0x210>)
 8004eec:	f7fc f89c 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004ef0:	bf00      	nop
 8004ef2:	3738      	adds	r7, #56	; 0x38
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40016800 	.word	0x40016800
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40021400 	.word	0x40021400
 8004f04:	40020000 	.word	0x40020000
 8004f08:	40020400 	.word	0x40020400
 8004f0c:	40021800 	.word	0x40021800
 8004f10:	40020800 	.word	0x40020800
 8004f14:	40020c00 	.word	0x40020c00

08004f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 0314 	add.w	r3, r7, #20
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <HAL_SPI_MspInit+0x84>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d12c      	bne.n	8004f94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_SPI_MspInit+0x88>)
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_SPI_MspInit+0x88>)
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f48:	6453      	str	r3, [r2, #68]	; 0x44
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <HAL_SPI_MspInit+0x88>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <HAL_SPI_MspInit+0x88>)
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HAL_SPI_MspInit+0x88>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f043 0320 	orr.w	r3, r3, #32
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_SPI_MspInit+0x88>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004f72:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f80:	2303      	movs	r3, #3
 8004f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004f84:	2305      	movs	r3, #5
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <HAL_SPI_MspInit+0x8c>)
 8004f90:	f7fc f84a 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004f94:	bf00      	nop
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40015000 	.word	0x40015000
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40021400 	.word	0x40021400

08004fa8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8004fae:	4b3c      	ldr	r3, [pc, #240]	; (80050a0 <HAL_FMC_MspInit+0xf8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d16f      	bne.n	8005096 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_FMC_MspInit+0xf8>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4a38      	ldr	r2, [pc, #224]	; (80050a4 <HAL_FMC_MspInit+0xfc>)
 8004fc2:	4b38      	ldr	r3, [pc, #224]	; (80050a4 <HAL_FMC_MspInit+0xfc>)
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6393      	str	r3, [r2, #56]	; 0x38
 8004fcc:	4b35      	ldr	r3, [pc, #212]	; (80050a4 <HAL_FMC_MspInit+0xfc>)
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8004fd8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004fdc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004fea:	230c      	movs	r3, #12
 8004fec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fee:	1d3b      	adds	r3, r7, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	482d      	ldr	r0, [pc, #180]	; (80050a8 <HAL_FMC_MspInit+0x100>)
 8004ff4:	f7fc f818 	bl	8001028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	2303      	movs	r3, #3
 8005006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005008:	230c      	movs	r3, #12
 800500a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4826      	ldr	r0, [pc, #152]	; (80050ac <HAL_FMC_MspInit+0x104>)
 8005012:	f7fc f809 	bl	8001028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8005016:	f248 1333 	movw	r3, #33075	; 0x8133
 800501a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501c:	2302      	movs	r3, #2
 800501e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005024:	2303      	movs	r3, #3
 8005026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005028:	230c      	movs	r3, #12
 800502a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	4619      	mov	r1, r3
 8005030:	481f      	ldr	r0, [pc, #124]	; (80050b0 <HAL_FMC_MspInit+0x108>)
 8005032:	f7fb fff9 	bl	8001028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8005036:	f64f 7383 	movw	r3, #65411	; 0xff83
 800503a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503c:	2302      	movs	r3, #2
 800503e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005044:	2303      	movs	r3, #3
 8005046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005048:	230c      	movs	r3, #12
 800504a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800504c:	1d3b      	adds	r3, r7, #4
 800504e:	4619      	mov	r1, r3
 8005050:	4818      	ldr	r0, [pc, #96]	; (80050b4 <HAL_FMC_MspInit+0x10c>)
 8005052:	f7fb ffe9 	bl	8001028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8005056:	f24c 7303 	movw	r3, #50947	; 0xc703
 800505a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800505c:	2302      	movs	r3, #2
 800505e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005064:	2303      	movs	r3, #3
 8005066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005068:	230c      	movs	r3, #12
 800506a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800506c:	1d3b      	adds	r3, r7, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4811      	ldr	r0, [pc, #68]	; (80050b8 <HAL_FMC_MspInit+0x110>)
 8005072:	f7fb ffd9 	bl	8001028 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005076:	2360      	movs	r3, #96	; 0x60
 8005078:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507a:	2302      	movs	r3, #2
 800507c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005082:	2303      	movs	r3, #3
 8005084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005086:	230c      	movs	r3, #12
 8005088:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800508a:	1d3b      	adds	r3, r7, #4
 800508c:	4619      	mov	r1, r3
 800508e:	480b      	ldr	r0, [pc, #44]	; (80050bc <HAL_FMC_MspInit+0x114>)
 8005090:	f7fb ffca 	bl	8001028 <HAL_GPIO_Init>
 8005094:	e000      	b.n	8005098 <HAL_FMC_MspInit+0xf0>
    return;
 8005096:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	200000b0 	.word	0x200000b0
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40021400 	.word	0x40021400
 80050ac:	40020800 	.word	0x40020800
 80050b0:	40021800 	.word	0x40021800
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40020c00 	.word	0x40020c00
 80050bc:	40020400 	.word	0x40020400

080050c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80050c8:	f7ff ff6e 	bl	8004fa8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050e2:	b480      	push	{r7}
 80050e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050e6:	e7fe      	b.n	80050e6 <HardFault_Handler+0x4>

080050e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050ec:	e7fe      	b.n	80050ec <MemManage_Handler+0x4>

080050ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ee:	b480      	push	{r7}
 80050f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050f2:	e7fe      	b.n	80050f2 <BusFault_Handler+0x4>

080050f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050f8:	e7fe      	b.n	80050f8 <UsageFault_Handler+0x4>

080050fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050fa:	b480      	push	{r7}
 80050fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005116:	b480      	push	{r7}
 8005118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005128:	f7fb fa8c 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800512c:	bf00      	nop
 800512e:	bd80      	pop	{r7, pc}

08005130 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <DMA2D_IRQHandler+0x10>)
 8005136:	f7fb fd2e 	bl	8000b96 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000230 	.word	0x20000230

08005144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <SystemInit+0x60>)
 800514a:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <SystemInit+0x60>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <SystemInit+0x64>)
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <SystemInit+0x64>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005164:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <SystemInit+0x64>)
 8005166:	2200      	movs	r2, #0
 8005168:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800516a:	4a0f      	ldr	r2, [pc, #60]	; (80051a8 <SystemInit+0x64>)
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <SystemInit+0x64>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005178:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <SystemInit+0x64>)
 800517c:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <SystemInit+0x68>)
 800517e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005180:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <SystemInit+0x64>)
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <SystemInit+0x64>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800518a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SystemInit+0x64>)
 800518e:	2200      	movs	r2, #0
 8005190:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005192:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <SystemInit+0x60>)
 8005194:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005198:	609a      	str	r2, [r3, #8]
#endif
}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000ed00 	.word	0xe000ed00
 80051a8:	40023800 	.word	0x40023800
 80051ac:	24003010 	.word	0x24003010

080051b0 <touchReset>:
#define IO_Pin_6                   0x40
#define IO_Pin_7                   0x80
#define IO_Pin_ALL                 0xFF

static void touchReset(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af02      	add	r7, sp, #8
	uint8_t sendBuf[2] = {0};
 80051b6:	2300      	movs	r3, #0
 80051b8:	80bb      	strh	r3, [r7, #4]
	sendBuf[0] = TP_REG_SYS_CTRL1;
 80051ba:	2303      	movs	r3, #3
 80051bc:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x02;
 80051be:	2302      	movs	r3, #2
 80051c0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80051c2:	1d3a      	adds	r2, r7, #4
 80051c4:	2364      	movs	r3, #100	; 0x64
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2302      	movs	r3, #2
 80051ca:	2182      	movs	r1, #130	; 0x82
 80051cc:	480b      	ldr	r0, [pc, #44]	; (80051fc <touchReset+0x4c>)
 80051ce:	f7fc f9e7 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80051d2:	2014      	movs	r0, #20
 80051d4:	f7fb fa56 	bl	8000684 <HAL_Delay>
	sendBuf[1] = 0x00;
 80051d8:	2300      	movs	r3, #0
 80051da:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80051dc:	1d3a      	adds	r2, r7, #4
 80051de:	2364      	movs	r3, #100	; 0x64
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	2302      	movs	r3, #2
 80051e4:	2182      	movs	r1, #130	; 0x82
 80051e6:	4805      	ldr	r0, [pc, #20]	; (80051fc <touchReset+0x4c>)
 80051e8:	f7fc f9da 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80051ec:	2014      	movs	r0, #20
 80051ee:	f7fb fa49 	bl	8000684 <HAL_Delay>
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200000dc 	.word	0x200000dc

08005200 <fnctCmd>:

static void fnctCmd(uint8_t fct, FunctionalState state)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	4603      	mov	r3, r0
 8005208:	460a      	mov	r2, r1
 800520a:	71fb      	strb	r3, [r7, #7]
 800520c:	4613      	mov	r3, r2
 800520e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 8005214:	2300      	movs	r3, #0
 8005216:	81bb      	strh	r3, [r7, #12]
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8005218:	2304      	movs	r3, #4
 800521a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 800521c:	f107 020c 	add.w	r2, r7, #12
 8005220:	2364      	movs	r3, #100	; 0x64
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	2301      	movs	r3, #1
 8005226:	2182      	movs	r1, #130	; 0x82
 8005228:	4817      	ldr	r0, [pc, #92]	; (8005288 <fnctCmd+0x88>)
 800522a:	f7fc f9b9 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 800522e:	f107 020c 	add.w	r2, r7, #12
 8005232:	2364      	movs	r3, #100	; 0x64
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	2301      	movs	r3, #1
 8005238:	2182      	movs	r1, #130	; 0x82
 800523a:	4813      	ldr	r0, [pc, #76]	; (8005288 <fnctCmd+0x88>)
 800523c:	f7fc fabe 	bl	80017bc <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 8005240:	7b3b      	ldrb	r3, [r7, #12]
 8005242:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 8005244:	79bb      	ldrb	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <fnctCmd+0x5e>
	{
		tmp &= ~(uint8_t)fct;
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	43db      	mvns	r3, r3
 8005250:	b25a      	sxtb	r2, r3
 8005252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005256:	4013      	ands	r3, r2
 8005258:	b25b      	sxtb	r3, r3
 800525a:	73fb      	strb	r3, [r7, #15]
 800525c:	e003      	b.n	8005266 <fnctCmd+0x66>
	}
	else
	{
		tmp |= (uint8_t)fct;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	4313      	orrs	r3, r2
 8005264:	73fb      	strb	r3, [r7, #15]
	}
	sendBuf[0] = TP_REG_SYS_CTRL2;
 8005266:	2304      	movs	r3, #4
 8005268:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800526e:	f107 020c 	add.w	r2, r7, #12
 8005272:	2364      	movs	r3, #100	; 0x64
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	2302      	movs	r3, #2
 8005278:	2182      	movs	r1, #130	; 0x82
 800527a:	4803      	ldr	r0, [pc, #12]	; (8005288 <fnctCmd+0x88>)
 800527c:	f7fc f990 	bl	80015a0 <HAL_I2C_Master_Transmit>
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200000dc 	.word	0x200000dc

0800528c <ioAFConfig>:

static void ioAFConfig(uint8_t ioPin, FunctionalState state)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af02      	add	r7, sp, #8
 8005292:	4603      	mov	r3, r0
 8005294:	460a      	mov	r2, r1
 8005296:	71fb      	strb	r3, [r7, #7]
 8005298:	4613      	mov	r3, r2
 800529a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuf[2] = {0};
 80052a0:	2300      	movs	r3, #0
 80052a2:	81bb      	strh	r3, [r7, #12]
	sendBuf[1] = TP_REG_GPIO_AF;
 80052a4:	2317      	movs	r3, #23
 80052a6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80052a8:	f107 020c 	add.w	r2, r7, #12
 80052ac:	2364      	movs	r3, #100	; 0x64
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	2301      	movs	r3, #1
 80052b2:	2182      	movs	r1, #130	; 0x82
 80052b4:	4817      	ldr	r0, [pc, #92]	; (8005314 <ioAFConfig+0x88>)
 80052b6:	f7fc f973 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, sendBuf, 1, 100);
 80052ba:	f107 020c 	add.w	r2, r7, #12
 80052be:	2364      	movs	r3, #100	; 0x64
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2301      	movs	r3, #1
 80052c4:	2182      	movs	r1, #130	; 0x82
 80052c6:	4813      	ldr	r0, [pc, #76]	; (8005314 <ioAFConfig+0x88>)
 80052c8:	f7fc fa78 	bl	80017bc <HAL_I2C_Master_Receive>
	tmp = sendBuf[0];
 80052cc:	7b3b      	ldrb	r3, [r7, #12]
 80052ce:	73fb      	strb	r3, [r7, #15]

	if (state != DISABLE)
 80052d0:	79bb      	ldrb	r3, [r7, #6]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <ioAFConfig+0x54>
	{
		tmp |= (uint8_t)ioPin;
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	4313      	orrs	r3, r2
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e008      	b.n	80052f2 <ioAFConfig+0x66>
	}
	else
	{
		tmp &= ~(uint8_t)ioPin;
 80052e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	b25a      	sxtb	r2, r3
 80052e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ec:	4013      	ands	r3, r2
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	73fb      	strb	r3, [r7, #15]
	}

	sendBuf[0] = TP_REG_GPIO_AF;
 80052f2:	2317      	movs	r3, #23
 80052f4:	733b      	strb	r3, [r7, #12]
	sendBuf[1] = tmp;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80052fa:	f107 020c 	add.w	r2, r7, #12
 80052fe:	2364      	movs	r3, #100	; 0x64
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	2302      	movs	r3, #2
 8005304:	2182      	movs	r1, #130	; 0x82
 8005306:	4803      	ldr	r0, [pc, #12]	; (8005314 <ioAFConfig+0x88>)
 8005308:	f7fc f94a 	bl	80015a0 <HAL_I2C_Master_Transmit>
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	200000dc 	.word	0x200000dc

08005318 <readX>:

static void readX(uint16_t *x)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
	int32_t _x;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_X, 0};
 8005320:	234d      	movs	r3, #77	; 0x4d
 8005322:	723b      	strb	r3, [r7, #8]
 8005324:	2300      	movs	r3, #0
 8005326:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8005328:	f107 0208 	add.w	r2, r7, #8
 800532c:	2364      	movs	r3, #100	; 0x64
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	2301      	movs	r3, #1
 8005332:	2182      	movs	r1, #130	; 0x82
 8005334:	481f      	ldr	r0, [pc, #124]	; (80053b4 <readX+0x9c>)
 8005336:	f7fc f933 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800533a:	f107 0208 	add.w	r2, r7, #8
 800533e:	2364      	movs	r3, #100	; 0x64
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2302      	movs	r3, #2
 8005344:	2182      	movs	r1, #130	; 0x82
 8005346:	481b      	ldr	r0, [pc, #108]	; (80053b4 <readX+0x9c>)
 8005348:	f7fc fa38 	bl	80017bc <HAL_I2C_Master_Receive>

	_x = (readBuf[0] << 8) | readBuf[1];
 800534c:	7a3b      	ldrb	r3, [r7, #8]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	7a7a      	ldrb	r2, [r7, #9]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]

	if (_x <= 3000)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800535c:	4293      	cmp	r3, r2
 800535e:	dc05      	bgt.n	800536c <readX+0x54>
	{
		_x = 3870 - _x;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8005366:	330e      	adds	r3, #14
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	e004      	b.n	8005376 <readX+0x5e>
	}
	else
	{
		_x = 3800 - _x;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8005372:	3308      	adds	r3, #8
 8005374:	60fb      	str	r3, [r7, #12]
	}

	*x = _x / 15;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a0f      	ldr	r2, [pc, #60]	; (80053b8 <readX+0xa0>)
 800537a:	fb82 1203 	smull	r1, r2, r2, r3
 800537e:	441a      	add	r2, r3
 8005380:	10d2      	asrs	r2, r2, #3
 8005382:	17db      	asrs	r3, r3, #31
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	801a      	strh	r2, [r3, #0]
	if (*x <= 0)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <readX+0x84>
	{
		*x = 0;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	801a      	strh	r2, [r3, #0]
	}
	else if (*x > 240)
	{
		*x = 239;
	}
}
 800539a:	e006      	b.n	80053aa <readX+0x92>
	else if (*x > 240)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	2bf0      	cmp	r3, #240	; 0xf0
 80053a2:	d902      	bls.n	80053aa <readX+0x92>
		*x = 239;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	22ef      	movs	r2, #239	; 0xef
 80053a8:	801a      	strh	r2, [r3, #0]
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	200000dc 	.word	0x200000dc
 80053b8:	88888889 	.word	0x88888889

080053bc <readY>:

static void readY(uint16_t *y)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	6078      	str	r0, [r7, #4]
	int32_t _y;
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Y, 0};
 80053c4:	234f      	movs	r3, #79	; 0x4f
 80053c6:	723b      	strb	r3, [r7, #8]
 80053c8:	2300      	movs	r3, #0
 80053ca:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80053cc:	f107 0208 	add.w	r2, r7, #8
 80053d0:	2364      	movs	r3, #100	; 0x64
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	2301      	movs	r3, #1
 80053d6:	2182      	movs	r1, #130	; 0x82
 80053d8:	4819      	ldr	r0, [pc, #100]	; (8005440 <readY+0x84>)
 80053da:	f7fc f8e1 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80053de:	f107 0208 	add.w	r2, r7, #8
 80053e2:	2364      	movs	r3, #100	; 0x64
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	2302      	movs	r3, #2
 80053e8:	2182      	movs	r1, #130	; 0x82
 80053ea:	4815      	ldr	r0, [pc, #84]	; (8005440 <readY+0x84>)
 80053ec:	f7fc f9e6 	bl	80017bc <HAL_I2C_Master_Receive>

	_y = (readBuf[0] << 8) | readBuf[1];
 80053f0:	7a3b      	ldrb	r3, [r7, #8]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	7a7a      	ldrb	r2, [r7, #9]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
	_y -= 360;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005400:	60fb      	str	r3, [r7, #12]
	*y = _y / 11;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a0f      	ldr	r2, [pc, #60]	; (8005444 <readY+0x88>)
 8005406:	fb82 1203 	smull	r1, r2, r2, r3
 800540a:	1052      	asrs	r2, r2, #1
 800540c:	17db      	asrs	r3, r3, #31
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	801a      	strh	r2, [r3, #0]

	if (*y <= 0)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <readY+0x6a>
	{
		*y = 0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	801a      	strh	r2, [r3, #0]
	}
	else if (*y > 320)
	{
		*y = 319;
	}
}
 8005424:	e008      	b.n	8005438 <readY+0x7c>
	else if (*y > 320)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800542e:	d903      	bls.n	8005438 <readY+0x7c>
		*y = 319;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f240 123f 	movw	r2, #319	; 0x13f
 8005436:	801a      	strh	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	200000dc 	.word	0x200000dc
 8005444:	2e8ba2e9 	.word	0x2e8ba2e9

08005448 <readZ>:

static void readZ(uint16_t *z)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af02      	add	r7, sp, #8
 800544e:	6078      	str	r0, [r7, #4]
	uint8_t readBuf[2] = {TP_REG_TP_DATA_Z, 0};
 8005450:	2351      	movs	r3, #81	; 0x51
 8005452:	733b      	strb	r3, [r7, #12]
 8005454:	2300      	movs	r3, #0
 8005456:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 8005458:	f107 020c 	add.w	r2, r7, #12
 800545c:	2364      	movs	r3, #100	; 0x64
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2301      	movs	r3, #1
 8005462:	2182      	movs	r1, #130	; 0x82
 8005464:	4810      	ldr	r0, [pc, #64]	; (80054a8 <readZ+0x60>)
 8005466:	f7fc f89b 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 2, 100);
 800546a:	f107 020c 	add.w	r2, r7, #12
 800546e:	2364      	movs	r3, #100	; 0x64
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2302      	movs	r3, #2
 8005474:	2182      	movs	r1, #130	; 0x82
 8005476:	480c      	ldr	r0, [pc, #48]	; (80054a8 <readZ+0x60>)
 8005478:	f7fc f9a0 	bl	80017bc <HAL_I2C_Master_Receive>

	*z = (readBuf[0] << 8) | readBuf[1];
 800547c:	7b3b      	ldrb	r3, [r7, #12]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	b21a      	sxth	r2, r3
 8005482:	7b7b      	ldrb	r3, [r7, #13]
 8005484:	b21b      	sxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b21b      	sxth	r3, r3
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	801a      	strh	r2, [r3, #0]
	if (*z <= 0)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <readZ+0x56>
	{
		*z = 0;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	801a      	strh	r2, [r3, #0]
	}
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	200000dc 	.word	0x200000dc

080054ac <TP_Config>:
	*id = sendBuf[0] << 8;
	*id |= sendBuf[1];
}

void TP_Config(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af02      	add	r7, sp, #8
	touchReset();
 80054b2:	f7ff fe7d 	bl	80051b0 <touchReset>
	fnctCmd(TP_ADC_FCT, ENABLE);
 80054b6:	2101      	movs	r1, #1
 80054b8:	2001      	movs	r0, #1
 80054ba:	f7ff fea1 	bl	8005200 <fnctCmd>
	fnctCmd(TP_TP_FCT, ENABLE);
 80054be:	2101      	movs	r1, #1
 80054c0:	2002      	movs	r0, #2
 80054c2:	f7ff fe9d 	bl	8005200 <fnctCmd>

	uint8_t sendBuf[2] = {TP_REG_ADC_CTRL1, 0x49};
 80054c6:	4b41      	ldr	r3, [pc, #260]	; (80055cc <TP_Config+0x120>)
 80054c8:	881b      	ldrh	r3, [r3, #0]
 80054ca:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80054cc:	1d3a      	adds	r2, r7, #4
 80054ce:	2364      	movs	r3, #100	; 0x64
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2302      	movs	r3, #2
 80054d4:	2182      	movs	r1, #130	; 0x82
 80054d6:	483e      	ldr	r0, [pc, #248]	; (80055d0 <TP_Config+0x124>)
 80054d8:	f7fc f862 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80054dc:	2014      	movs	r0, #20
 80054de:	f7fb f8d1 	bl	8000684 <HAL_Delay>

	sendBuf[0] = TP_REG_ADC_CTRL2;
 80054e2:	2321      	movs	r3, #33	; 0x21
 80054e4:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 80054e6:	2301      	movs	r3, #1
 80054e8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80054ea:	1d3a      	adds	r2, r7, #4
 80054ec:	2364      	movs	r3, #100	; 0x64
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	2302      	movs	r3, #2
 80054f2:	2182      	movs	r1, #130	; 0x82
 80054f4:	4836      	ldr	r0, [pc, #216]	; (80055d0 <TP_Config+0x124>)
 80054f6:	f7fc f853 	bl	80015a0 <HAL_I2C_Master_Transmit>

	ioAFConfig((uint8_t)TOUCH_IO_ALL, DISABLE);
 80054fa:	2100      	movs	r1, #0
 80054fc:	201e      	movs	r0, #30
 80054fe:	f7ff fec5 	bl	800528c <ioAFConfig>

	sendBuf[0] = TP_REG_TP_CFG;
 8005502:	2341      	movs	r3, #65	; 0x41
 8005504:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x9A;
 8005506:	239a      	movs	r3, #154	; 0x9a
 8005508:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800550a:	1d3a      	adds	r2, r7, #4
 800550c:	2364      	movs	r3, #100	; 0x64
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2302      	movs	r3, #2
 8005512:	2182      	movs	r1, #130	; 0x82
 8005514:	482e      	ldr	r0, [pc, #184]	; (80055d0 <TP_Config+0x124>)
 8005516:	f7fc f843 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_TH;
 800551a:	234a      	movs	r3, #74	; 0x4a
 800551c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800551e:	2301      	movs	r3, #1
 8005520:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005522:	1d3a      	adds	r2, r7, #4
 8005524:	2364      	movs	r3, #100	; 0x64
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	2302      	movs	r3, #2
 800552a:	2182      	movs	r1, #130	; 0x82
 800552c:	4828      	ldr	r0, [pc, #160]	; (80055d0 <TP_Config+0x124>)
 800552e:	f7fc f837 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 8005532:	234b      	movs	r3, #75	; 0x4b
 8005534:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005536:	2301      	movs	r3, #1
 8005538:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800553a:	1d3a      	adds	r2, r7, #4
 800553c:	2364      	movs	r3, #100	; 0x64
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	2302      	movs	r3, #2
 8005542:	2182      	movs	r1, #130	; 0x82
 8005544:	4822      	ldr	r0, [pc, #136]	; (80055d0 <TP_Config+0x124>)
 8005546:	f7fc f82b 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_FIFO_STA;
 800554a:	234b      	movs	r3, #75	; 0x4b
 800554c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x00;
 800554e:	2300      	movs	r3, #0
 8005550:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005552:	1d3a      	adds	r2, r7, #4
 8005554:	2364      	movs	r3, #100	; 0x64
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2302      	movs	r3, #2
 800555a:	2182      	movs	r1, #130	; 0x82
 800555c:	481c      	ldr	r0, [pc, #112]	; (80055d0 <TP_Config+0x124>)
 800555e:	f7fc f81f 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_FRACT_XYZ;
 8005562:	2356      	movs	r3, #86	; 0x56
 8005564:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 8005566:	2301      	movs	r3, #1
 8005568:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800556a:	1d3a      	adds	r2, r7, #4
 800556c:	2364      	movs	r3, #100	; 0x64
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2302      	movs	r3, #2
 8005572:	2182      	movs	r1, #130	; 0x82
 8005574:	4816      	ldr	r0, [pc, #88]	; (80055d0 <TP_Config+0x124>)
 8005576:	f7fc f813 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_I_DRIVE;
 800557a:	2358      	movs	r3, #88	; 0x58
 800557c:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x01;
 800557e:	2301      	movs	r3, #1
 8005580:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 8005582:	1d3a      	adds	r2, r7, #4
 8005584:	2364      	movs	r3, #100	; 0x64
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2302      	movs	r3, #2
 800558a:	2182      	movs	r1, #130	; 0x82
 800558c:	4810      	ldr	r0, [pc, #64]	; (80055d0 <TP_Config+0x124>)
 800558e:	f7fc f807 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_TP_CTRL;
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0x03;
 8005596:	2303      	movs	r3, #3
 8005598:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 800559a:	1d3a      	adds	r2, r7, #4
 800559c:	2364      	movs	r3, #100	; 0x64
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	2302      	movs	r3, #2
 80055a2:	2182      	movs	r1, #130	; 0x82
 80055a4:	480a      	ldr	r0, [pc, #40]	; (80055d0 <TP_Config+0x124>)
 80055a6:	f7fb fffb 	bl	80015a0 <HAL_I2C_Master_Transmit>

	sendBuf[0] = TP_REG_INT_STA;
 80055aa:	230b      	movs	r3, #11
 80055ac:	713b      	strb	r3, [r7, #4]
	sendBuf[1] = 0xFF;
 80055ae:	23ff      	movs	r3, #255	; 0xff
 80055b0:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, sendBuf, 2, 100);
 80055b2:	1d3a      	adds	r2, r7, #4
 80055b4:	2364      	movs	r3, #100	; 0x64
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2302      	movs	r3, #2
 80055ba:	2182      	movs	r1, #130	; 0x82
 80055bc:	4804      	ldr	r0, [pc, #16]	; (80055d0 <TP_Config+0x124>)
 80055be:	f7fb ffef 	bl	80015a0 <HAL_I2C_Master_Transmit>

}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	08006040 	.word	0x08006040
 80055d0:	200000dc 	.word	0x200000dc

080055d4 <TP_GetState>:

void TP_GetState(tp_state_t *state)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af02      	add	r7, sp, #8
 80055da:	6078      	str	r0, [r7, #4]
	uint16_t xDiff, yDiff, x, y;
	static uint16_t _x = 0, _y = 0, _z = 0;

	uint8_t readBuf[2] = {TP_REG_TP_CTRL, 0};
 80055dc:	2340      	movs	r3, #64	; 0x40
 80055de:	733b      	strb	r3, [r7, #12]
 80055e0:	2300      	movs	r3, #0
 80055e2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80055e4:	f107 020c 	add.w	r2, r7, #12
 80055e8:	2364      	movs	r3, #100	; 0x64
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	2301      	movs	r3, #1
 80055ee:	2182      	movs	r1, #130	; 0x82
 80055f0:	483b      	ldr	r0, [pc, #236]	; (80056e0 <TP_GetState+0x10c>)
 80055f2:	f7fb ffd5 	bl	80015a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(TP_I2C, TP_ADDR, readBuf, 1, 100);
 80055f6:	f107 020c 	add.w	r2, r7, #12
 80055fa:	2364      	movs	r3, #100	; 0x64
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	2301      	movs	r3, #1
 8005600:	2182      	movs	r1, #130	; 0x82
 8005602:	4837      	ldr	r0, [pc, #220]	; (80056e0 <TP_GetState+0x10c>)
 8005604:	f7fc f8da 	bl	80017bc <HAL_I2C_Master_Receive>

	state->touchDetected = (readBuf[0] & 0x80);
 8005608:	7b3b      	ldrb	r3, [r7, #12]
 800560a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800560e:	b2da      	uxtb	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	701a      	strb	r2, [r3, #0]
	if (state->touchDetected)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d039      	beq.n	8005690 <TP_GetState+0xbc>
	{
		readX(&x);
 800561c:	f107 0312 	add.w	r3, r7, #18
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fe79 	bl	8005318 <readX>
		readY(&y);
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fec6 	bl	80053bc <readY>
		xDiff = x > _x? (x - _x): (_x - x);
 8005630:	8a7a      	ldrh	r2, [r7, #18]
 8005632:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <TP_GetState+0x110>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d905      	bls.n	8005646 <TP_GetState+0x72>
 800563a:	8a7a      	ldrh	r2, [r7, #18]
 800563c:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <TP_GetState+0x110>)
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	b29b      	uxth	r3, r3
 8005644:	e004      	b.n	8005650 <TP_GetState+0x7c>
 8005646:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <TP_GetState+0x110>)
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	8a7b      	ldrh	r3, [r7, #18]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	82fb      	strh	r3, [r7, #22]
		yDiff = y > _y? (y - _y): (_y - y);
 8005652:	8a3a      	ldrh	r2, [r7, #16]
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <TP_GetState+0x114>)
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d905      	bls.n	8005668 <TP_GetState+0x94>
 800565c:	8a3a      	ldrh	r2, [r7, #16]
 800565e:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <TP_GetState+0x114>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	b29b      	uxth	r3, r3
 8005666:	e004      	b.n	8005672 <TP_GetState+0x9e>
 8005668:	4b1f      	ldr	r3, [pc, #124]	; (80056e8 <TP_GetState+0x114>)
 800566a:	881a      	ldrh	r2, [r3, #0]
 800566c:	8a3b      	ldrh	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	b29b      	uxth	r3, r3
 8005672:	82bb      	strh	r3, [r7, #20]
		if (xDiff + yDiff > 5)
 8005674:	8afa      	ldrh	r2, [r7, #22]
 8005676:	8abb      	ldrh	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	2b05      	cmp	r3, #5
 800567c:	dd05      	ble.n	800568a <TP_GetState+0xb6>
		{
			_x = x;
 800567e:	8a7a      	ldrh	r2, [r7, #18]
 8005680:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <TP_GetState+0x110>)
 8005682:	801a      	strh	r2, [r3, #0]
			_y = y;
 8005684:	8a3a      	ldrh	r2, [r7, #16]
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <TP_GetState+0x114>)
 8005688:	801a      	strh	r2, [r3, #0]
		}

		readZ(&_z);
 800568a:	4818      	ldr	r0, [pc, #96]	; (80056ec <TP_GetState+0x118>)
 800568c:	f7ff fedc 	bl	8005448 <readZ>
	}

	state->x = _x;
 8005690:	4b14      	ldr	r3, [pc, #80]	; (80056e4 <TP_GetState+0x110>)
 8005692:	881a      	ldrh	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	805a      	strh	r2, [r3, #2]
	state->y = _y;
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <TP_GetState+0x114>)
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	809a      	strh	r2, [r3, #4]
	state->z = _z;
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <TP_GetState+0x118>)
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	80da      	strh	r2, [r3, #6]

	readBuf[0] = TP_REG_FIFO_STA;
 80056a8:	234b      	movs	r3, #75	; 0x4b
 80056aa:	733b      	strb	r3, [r7, #12]
	readBuf[1] = 0x01;
 80056ac:	2301      	movs	r3, #1
 80056ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80056b0:	f107 020c 	add.w	r2, r7, #12
 80056b4:	2364      	movs	r3, #100	; 0x64
 80056b6:	9300      	str	r3, [sp, #0]
 80056b8:	2302      	movs	r3, #2
 80056ba:	2182      	movs	r1, #130	; 0x82
 80056bc:	4808      	ldr	r0, [pc, #32]	; (80056e0 <TP_GetState+0x10c>)
 80056be:	f7fb ff6f 	bl	80015a0 <HAL_I2C_Master_Transmit>
	readBuf[1] = 0x00;
 80056c2:	2300      	movs	r3, #0
 80056c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(TP_I2C, TP_ADDR, readBuf, 2, 100);
 80056c6:	f107 020c 	add.w	r2, r7, #12
 80056ca:	2364      	movs	r3, #100	; 0x64
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2302      	movs	r3, #2
 80056d0:	2182      	movs	r1, #130	; 0x82
 80056d2:	4803      	ldr	r0, [pc, #12]	; (80056e0 <TP_GetState+0x10c>)
 80056d4:	f7fb ff64 	bl	80015a0 <HAL_I2C_Master_Transmit>
}
 80056d8:	bf00      	nop
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	200000dc 	.word	0x200000dc
 80056e4:	200000b4 	.word	0x200000b4
 80056e8:	200000b6 	.word	0x200000b6
 80056ec:	200000b8 	.word	0x200000b8

080056f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80056f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005728 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056f6:	e003      	b.n	8005700 <LoopCopyDataInit>

080056f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056fe:	3104      	adds	r1, #4

08005700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005700:	480b      	ldr	r0, [pc, #44]	; (8005730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005708:	d3f6      	bcc.n	80056f8 <CopyDataInit>
  ldr  r2, =_sbss
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800570c:	e002      	b.n	8005714 <LoopFillZerobss>

0800570e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800570e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005710:	f842 3b04 	str.w	r3, [r2], #4

08005714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005718:	d3f9      	bcc.n	800570e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800571a:	f7ff fd13 	bl	8005144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800571e:	f000 f811 	bl	8005744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005722:	f7fe fe2f 	bl	8004384 <main>
  bx  lr    
 8005726:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005728:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800572c:	08009908 	.word	0x08009908
  ldr  r0, =_sdata
 8005730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005734:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8005738:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800573c:	200002b8 	.word	0x200002b8

08005740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005740:	e7fe      	b.n	8005740 <ADC_IRQHandler>
	...

08005744 <__libc_init_array>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4e0d      	ldr	r6, [pc, #52]	; (800577c <__libc_init_array+0x38>)
 8005748:	4c0d      	ldr	r4, [pc, #52]	; (8005780 <__libc_init_array+0x3c>)
 800574a:	1ba4      	subs	r4, r4, r6
 800574c:	10a4      	asrs	r4, r4, #2
 800574e:	2500      	movs	r5, #0
 8005750:	42a5      	cmp	r5, r4
 8005752:	d109      	bne.n	8005768 <__libc_init_array+0x24>
 8005754:	4e0b      	ldr	r6, [pc, #44]	; (8005784 <__libc_init_array+0x40>)
 8005756:	4c0c      	ldr	r4, [pc, #48]	; (8005788 <__libc_init_array+0x44>)
 8005758:	f000 fc4c 	bl	8005ff4 <_init>
 800575c:	1ba4      	subs	r4, r4, r6
 800575e:	10a4      	asrs	r4, r4, #2
 8005760:	2500      	movs	r5, #0
 8005762:	42a5      	cmp	r5, r4
 8005764:	d105      	bne.n	8005772 <__libc_init_array+0x2e>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800576c:	4798      	blx	r3
 800576e:	3501      	adds	r5, #1
 8005770:	e7ee      	b.n	8005750 <__libc_init_array+0xc>
 8005772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005776:	4798      	blx	r3
 8005778:	3501      	adds	r5, #1
 800577a:	e7f2      	b.n	8005762 <__libc_init_array+0x1e>
 800577c:	08009900 	.word	0x08009900
 8005780:	08009900 	.word	0x08009900
 8005784:	08009900 	.word	0x08009900
 8005788:	08009904 	.word	0x08009904

0800578c <memset>:
 800578c:	4402      	add	r2, r0
 800578e:	4603      	mov	r3, r0
 8005790:	4293      	cmp	r3, r2
 8005792:	d100      	bne.n	8005796 <memset+0xa>
 8005794:	4770      	bx	lr
 8005796:	f803 1b01 	strb.w	r1, [r3], #1
 800579a:	e7f9      	b.n	8005790 <memset+0x4>

0800579c <siprintf>:
 800579c:	b40e      	push	{r1, r2, r3}
 800579e:	b500      	push	{lr}
 80057a0:	b09c      	sub	sp, #112	; 0x70
 80057a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80057a6:	ab1d      	add	r3, sp, #116	; 0x74
 80057a8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80057ac:	9002      	str	r0, [sp, #8]
 80057ae:	9006      	str	r0, [sp, #24]
 80057b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057b4:	480a      	ldr	r0, [pc, #40]	; (80057e0 <siprintf+0x44>)
 80057b6:	9104      	str	r1, [sp, #16]
 80057b8:	9107      	str	r1, [sp, #28]
 80057ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057be:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80057c6:	6800      	ldr	r0, [r0, #0]
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	a902      	add	r1, sp, #8
 80057cc:	f000 f866 	bl	800589c <_svfiprintf_r>
 80057d0:	9b02      	ldr	r3, [sp, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	b01c      	add	sp, #112	; 0x70
 80057d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057dc:	b003      	add	sp, #12
 80057de:	4770      	bx	lr
 80057e0:	20000030 	.word	0x20000030

080057e4 <__ssputs_r>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	688e      	ldr	r6, [r1, #8]
 80057ea:	429e      	cmp	r6, r3
 80057ec:	4682      	mov	sl, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4691      	mov	r9, r2
 80057f2:	4698      	mov	r8, r3
 80057f4:	d835      	bhi.n	8005862 <__ssputs_r+0x7e>
 80057f6:	898a      	ldrh	r2, [r1, #12]
 80057f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057fc:	d031      	beq.n	8005862 <__ssputs_r+0x7e>
 80057fe:	6825      	ldr	r5, [r4, #0]
 8005800:	6909      	ldr	r1, [r1, #16]
 8005802:	1a6f      	subs	r7, r5, r1
 8005804:	6965      	ldr	r5, [r4, #20]
 8005806:	2302      	movs	r3, #2
 8005808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800580c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005810:	f108 0301 	add.w	r3, r8, #1
 8005814:	443b      	add	r3, r7
 8005816:	429d      	cmp	r5, r3
 8005818:	bf38      	it	cc
 800581a:	461d      	movcc	r5, r3
 800581c:	0553      	lsls	r3, r2, #21
 800581e:	d531      	bpl.n	8005884 <__ssputs_r+0xa0>
 8005820:	4629      	mov	r1, r5
 8005822:	f000 fb39 	bl	8005e98 <_malloc_r>
 8005826:	4606      	mov	r6, r0
 8005828:	b950      	cbnz	r0, 8005840 <__ssputs_r+0x5c>
 800582a:	230c      	movs	r3, #12
 800582c:	f8ca 3000 	str.w	r3, [sl]
 8005830:	89a3      	ldrh	r3, [r4, #12]
 8005832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800583c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005840:	463a      	mov	r2, r7
 8005842:	6921      	ldr	r1, [r4, #16]
 8005844:	f000 fab4 	bl	8005db0 <memcpy>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	6126      	str	r6, [r4, #16]
 8005856:	6165      	str	r5, [r4, #20]
 8005858:	443e      	add	r6, r7
 800585a:	1bed      	subs	r5, r5, r7
 800585c:	6026      	str	r6, [r4, #0]
 800585e:	60a5      	str	r5, [r4, #8]
 8005860:	4646      	mov	r6, r8
 8005862:	4546      	cmp	r6, r8
 8005864:	bf28      	it	cs
 8005866:	4646      	movcs	r6, r8
 8005868:	4632      	mov	r2, r6
 800586a:	4649      	mov	r1, r9
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	f000 faaa 	bl	8005dc6 <memmove>
 8005872:	68a3      	ldr	r3, [r4, #8]
 8005874:	1b9b      	subs	r3, r3, r6
 8005876:	60a3      	str	r3, [r4, #8]
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	441e      	add	r6, r3
 800587c:	6026      	str	r6, [r4, #0]
 800587e:	2000      	movs	r0, #0
 8005880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005884:	462a      	mov	r2, r5
 8005886:	f000 fb65 	bl	8005f54 <_realloc_r>
 800588a:	4606      	mov	r6, r0
 800588c:	2800      	cmp	r0, #0
 800588e:	d1e1      	bne.n	8005854 <__ssputs_r+0x70>
 8005890:	6921      	ldr	r1, [r4, #16]
 8005892:	4650      	mov	r0, sl
 8005894:	f000 fab2 	bl	8005dfc <_free_r>
 8005898:	e7c7      	b.n	800582a <__ssputs_r+0x46>
	...

0800589c <_svfiprintf_r>:
 800589c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a0:	b09d      	sub	sp, #116	; 0x74
 80058a2:	4680      	mov	r8, r0
 80058a4:	9303      	str	r3, [sp, #12]
 80058a6:	898b      	ldrh	r3, [r1, #12]
 80058a8:	061c      	lsls	r4, r3, #24
 80058aa:	460d      	mov	r5, r1
 80058ac:	4616      	mov	r6, r2
 80058ae:	d50f      	bpl.n	80058d0 <_svfiprintf_r+0x34>
 80058b0:	690b      	ldr	r3, [r1, #16]
 80058b2:	b96b      	cbnz	r3, 80058d0 <_svfiprintf_r+0x34>
 80058b4:	2140      	movs	r1, #64	; 0x40
 80058b6:	f000 faef 	bl	8005e98 <_malloc_r>
 80058ba:	6028      	str	r0, [r5, #0]
 80058bc:	6128      	str	r0, [r5, #16]
 80058be:	b928      	cbnz	r0, 80058cc <_svfiprintf_r+0x30>
 80058c0:	230c      	movs	r3, #12
 80058c2:	f8c8 3000 	str.w	r3, [r8]
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058ca:	e0c5      	b.n	8005a58 <_svfiprintf_r+0x1bc>
 80058cc:	2340      	movs	r3, #64	; 0x40
 80058ce:	616b      	str	r3, [r5, #20]
 80058d0:	2300      	movs	r3, #0
 80058d2:	9309      	str	r3, [sp, #36]	; 0x24
 80058d4:	2320      	movs	r3, #32
 80058d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058da:	2330      	movs	r3, #48	; 0x30
 80058dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e0:	f04f 0b01 	mov.w	fp, #1
 80058e4:	4637      	mov	r7, r6
 80058e6:	463c      	mov	r4, r7
 80058e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d13c      	bne.n	800596a <_svfiprintf_r+0xce>
 80058f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80058f4:	d00b      	beq.n	800590e <_svfiprintf_r+0x72>
 80058f6:	4653      	mov	r3, sl
 80058f8:	4632      	mov	r2, r6
 80058fa:	4629      	mov	r1, r5
 80058fc:	4640      	mov	r0, r8
 80058fe:	f7ff ff71 	bl	80057e4 <__ssputs_r>
 8005902:	3001      	adds	r0, #1
 8005904:	f000 80a3 	beq.w	8005a4e <_svfiprintf_r+0x1b2>
 8005908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590a:	4453      	add	r3, sl
 800590c:	9309      	str	r3, [sp, #36]	; 0x24
 800590e:	783b      	ldrb	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 809c 	beq.w	8005a4e <_svfiprintf_r+0x1b2>
 8005916:	2300      	movs	r3, #0
 8005918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	9307      	str	r3, [sp, #28]
 8005920:	9205      	str	r2, [sp, #20]
 8005922:	9306      	str	r3, [sp, #24]
 8005924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005928:	931a      	str	r3, [sp, #104]	; 0x68
 800592a:	2205      	movs	r2, #5
 800592c:	7821      	ldrb	r1, [r4, #0]
 800592e:	4850      	ldr	r0, [pc, #320]	; (8005a70 <_svfiprintf_r+0x1d4>)
 8005930:	f7fa fc5e 	bl	80001f0 <memchr>
 8005934:	1c67      	adds	r7, r4, #1
 8005936:	9b04      	ldr	r3, [sp, #16]
 8005938:	b9d8      	cbnz	r0, 8005972 <_svfiprintf_r+0xd6>
 800593a:	06d9      	lsls	r1, r3, #27
 800593c:	bf44      	itt	mi
 800593e:	2220      	movmi	r2, #32
 8005940:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005944:	071a      	lsls	r2, r3, #28
 8005946:	bf44      	itt	mi
 8005948:	222b      	movmi	r2, #43	; 0x2b
 800594a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800594e:	7822      	ldrb	r2, [r4, #0]
 8005950:	2a2a      	cmp	r2, #42	; 0x2a
 8005952:	d016      	beq.n	8005982 <_svfiprintf_r+0xe6>
 8005954:	9a07      	ldr	r2, [sp, #28]
 8005956:	2100      	movs	r1, #0
 8005958:	200a      	movs	r0, #10
 800595a:	4627      	mov	r7, r4
 800595c:	3401      	adds	r4, #1
 800595e:	783b      	ldrb	r3, [r7, #0]
 8005960:	3b30      	subs	r3, #48	; 0x30
 8005962:	2b09      	cmp	r3, #9
 8005964:	d951      	bls.n	8005a0a <_svfiprintf_r+0x16e>
 8005966:	b1c9      	cbz	r1, 800599c <_svfiprintf_r+0x100>
 8005968:	e011      	b.n	800598e <_svfiprintf_r+0xf2>
 800596a:	2b25      	cmp	r3, #37	; 0x25
 800596c:	d0c0      	beq.n	80058f0 <_svfiprintf_r+0x54>
 800596e:	4627      	mov	r7, r4
 8005970:	e7b9      	b.n	80058e6 <_svfiprintf_r+0x4a>
 8005972:	4a3f      	ldr	r2, [pc, #252]	; (8005a70 <_svfiprintf_r+0x1d4>)
 8005974:	1a80      	subs	r0, r0, r2
 8005976:	fa0b f000 	lsl.w	r0, fp, r0
 800597a:	4318      	orrs	r0, r3
 800597c:	9004      	str	r0, [sp, #16]
 800597e:	463c      	mov	r4, r7
 8005980:	e7d3      	b.n	800592a <_svfiprintf_r+0x8e>
 8005982:	9a03      	ldr	r2, [sp, #12]
 8005984:	1d11      	adds	r1, r2, #4
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	9103      	str	r1, [sp, #12]
 800598a:	2a00      	cmp	r2, #0
 800598c:	db01      	blt.n	8005992 <_svfiprintf_r+0xf6>
 800598e:	9207      	str	r2, [sp, #28]
 8005990:	e004      	b.n	800599c <_svfiprintf_r+0x100>
 8005992:	4252      	negs	r2, r2
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	9207      	str	r2, [sp, #28]
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	783b      	ldrb	r3, [r7, #0]
 800599e:	2b2e      	cmp	r3, #46	; 0x2e
 80059a0:	d10e      	bne.n	80059c0 <_svfiprintf_r+0x124>
 80059a2:	787b      	ldrb	r3, [r7, #1]
 80059a4:	2b2a      	cmp	r3, #42	; 0x2a
 80059a6:	f107 0101 	add.w	r1, r7, #1
 80059aa:	d132      	bne.n	8005a12 <_svfiprintf_r+0x176>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	1d1a      	adds	r2, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bfb8      	it	lt
 80059b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80059bc:	3702      	adds	r7, #2
 80059be:	9305      	str	r3, [sp, #20]
 80059c0:	4c2c      	ldr	r4, [pc, #176]	; (8005a74 <_svfiprintf_r+0x1d8>)
 80059c2:	7839      	ldrb	r1, [r7, #0]
 80059c4:	2203      	movs	r2, #3
 80059c6:	4620      	mov	r0, r4
 80059c8:	f7fa fc12 	bl	80001f0 <memchr>
 80059cc:	b138      	cbz	r0, 80059de <_svfiprintf_r+0x142>
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	1b00      	subs	r0, r0, r4
 80059d2:	fa03 f000 	lsl.w	r0, r3, r0
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	4303      	orrs	r3, r0
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	3701      	adds	r7, #1
 80059de:	7839      	ldrb	r1, [r7, #0]
 80059e0:	4825      	ldr	r0, [pc, #148]	; (8005a78 <_svfiprintf_r+0x1dc>)
 80059e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e6:	2206      	movs	r2, #6
 80059e8:	1c7e      	adds	r6, r7, #1
 80059ea:	f7fa fc01 	bl	80001f0 <memchr>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d035      	beq.n	8005a5e <_svfiprintf_r+0x1c2>
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <_svfiprintf_r+0x1e0>)
 80059f4:	b9fb      	cbnz	r3, 8005a36 <_svfiprintf_r+0x19a>
 80059f6:	9b03      	ldr	r3, [sp, #12]
 80059f8:	3307      	adds	r3, #7
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	3308      	adds	r3, #8
 8005a00:	9303      	str	r3, [sp, #12]
 8005a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a04:	444b      	add	r3, r9
 8005a06:	9309      	str	r3, [sp, #36]	; 0x24
 8005a08:	e76c      	b.n	80058e4 <_svfiprintf_r+0x48>
 8005a0a:	fb00 3202 	mla	r2, r0, r2, r3
 8005a0e:	2101      	movs	r1, #1
 8005a10:	e7a3      	b.n	800595a <_svfiprintf_r+0xbe>
 8005a12:	2300      	movs	r3, #0
 8005a14:	9305      	str	r3, [sp, #20]
 8005a16:	4618      	mov	r0, r3
 8005a18:	240a      	movs	r4, #10
 8005a1a:	460f      	mov	r7, r1
 8005a1c:	3101      	adds	r1, #1
 8005a1e:	783a      	ldrb	r2, [r7, #0]
 8005a20:	3a30      	subs	r2, #48	; 0x30
 8005a22:	2a09      	cmp	r2, #9
 8005a24:	d903      	bls.n	8005a2e <_svfiprintf_r+0x192>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0ca      	beq.n	80059c0 <_svfiprintf_r+0x124>
 8005a2a:	9005      	str	r0, [sp, #20]
 8005a2c:	e7c8      	b.n	80059c0 <_svfiprintf_r+0x124>
 8005a2e:	fb04 2000 	mla	r0, r4, r0, r2
 8005a32:	2301      	movs	r3, #1
 8005a34:	e7f1      	b.n	8005a1a <_svfiprintf_r+0x17e>
 8005a36:	ab03      	add	r3, sp, #12
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	462a      	mov	r2, r5
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <_svfiprintf_r+0x1e4>)
 8005a3e:	a904      	add	r1, sp, #16
 8005a40:	4640      	mov	r0, r8
 8005a42:	f3af 8000 	nop.w
 8005a46:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005a4a:	4681      	mov	r9, r0
 8005a4c:	d1d9      	bne.n	8005a02 <_svfiprintf_r+0x166>
 8005a4e:	89ab      	ldrh	r3, [r5, #12]
 8005a50:	065b      	lsls	r3, r3, #25
 8005a52:	f53f af38 	bmi.w	80058c6 <_svfiprintf_r+0x2a>
 8005a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a58:	b01d      	add	sp, #116	; 0x74
 8005a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5e:	ab03      	add	r3, sp, #12
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	462a      	mov	r2, r5
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <_svfiprintf_r+0x1e4>)
 8005a66:	a904      	add	r1, sp, #16
 8005a68:	4640      	mov	r0, r8
 8005a6a:	f000 f881 	bl	8005b70 <_printf_i>
 8005a6e:	e7ea      	b.n	8005a46 <_svfiprintf_r+0x1aa>
 8005a70:	080098c4 	.word	0x080098c4
 8005a74:	080098ca 	.word	0x080098ca
 8005a78:	080098ce 	.word	0x080098ce
 8005a7c:	00000000 	.word	0x00000000
 8005a80:	080057e5 	.word	0x080057e5

08005a84 <_printf_common>:
 8005a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a88:	4691      	mov	r9, r2
 8005a8a:	461f      	mov	r7, r3
 8005a8c:	688a      	ldr	r2, [r1, #8]
 8005a8e:	690b      	ldr	r3, [r1, #16]
 8005a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	bfb8      	it	lt
 8005a98:	4613      	movlt	r3, r2
 8005a9a:	f8c9 3000 	str.w	r3, [r9]
 8005a9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	b112      	cbz	r2, 8005aae <_printf_common+0x2a>
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f8c9 3000 	str.w	r3, [r9]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	0699      	lsls	r1, r3, #26
 8005ab2:	bf42      	ittt	mi
 8005ab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ab8:	3302      	addmi	r3, #2
 8005aba:	f8c9 3000 	strmi.w	r3, [r9]
 8005abe:	6825      	ldr	r5, [r4, #0]
 8005ac0:	f015 0506 	ands.w	r5, r5, #6
 8005ac4:	d107      	bne.n	8005ad6 <_printf_common+0x52>
 8005ac6:	f104 0a19 	add.w	sl, r4, #25
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	429d      	cmp	r5, r3
 8005ad4:	db29      	blt.n	8005b2a <_printf_common+0xa6>
 8005ad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	3300      	adds	r3, #0
 8005ade:	bf18      	it	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	0692      	lsls	r2, r2, #26
 8005ae4:	d42e      	bmi.n	8005b44 <_printf_common+0xc0>
 8005ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aea:	4639      	mov	r1, r7
 8005aec:	4630      	mov	r0, r6
 8005aee:	47c0      	blx	r8
 8005af0:	3001      	adds	r0, #1
 8005af2:	d021      	beq.n	8005b38 <_printf_common+0xb4>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	68e5      	ldr	r5, [r4, #12]
 8005af8:	f8d9 2000 	ldr.w	r2, [r9]
 8005afc:	f003 0306 	and.w	r3, r3, #6
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	bf08      	it	eq
 8005b04:	1aad      	subeq	r5, r5, r2
 8005b06:	68a3      	ldr	r3, [r4, #8]
 8005b08:	6922      	ldr	r2, [r4, #16]
 8005b0a:	bf0c      	ite	eq
 8005b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b10:	2500      	movne	r5, #0
 8005b12:	4293      	cmp	r3, r2
 8005b14:	bfc4      	itt	gt
 8005b16:	1a9b      	subgt	r3, r3, r2
 8005b18:	18ed      	addgt	r5, r5, r3
 8005b1a:	f04f 0900 	mov.w	r9, #0
 8005b1e:	341a      	adds	r4, #26
 8005b20:	454d      	cmp	r5, r9
 8005b22:	d11b      	bne.n	8005b5c <_printf_common+0xd8>
 8005b24:	2000      	movs	r0, #0
 8005b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4630      	mov	r0, r6
 8005b32:	47c0      	blx	r8
 8005b34:	3001      	adds	r0, #1
 8005b36:	d103      	bne.n	8005b40 <_printf_common+0xbc>
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	3501      	adds	r5, #1
 8005b42:	e7c2      	b.n	8005aca <_printf_common+0x46>
 8005b44:	18e1      	adds	r1, r4, r3
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	2030      	movs	r0, #48	; 0x30
 8005b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b4e:	4422      	add	r2, r4
 8005b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b58:	3302      	adds	r3, #2
 8005b5a:	e7c4      	b.n	8005ae6 <_printf_common+0x62>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4622      	mov	r2, r4
 8005b60:	4639      	mov	r1, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	47c0      	blx	r8
 8005b66:	3001      	adds	r0, #1
 8005b68:	d0e6      	beq.n	8005b38 <_printf_common+0xb4>
 8005b6a:	f109 0901 	add.w	r9, r9, #1
 8005b6e:	e7d7      	b.n	8005b20 <_printf_common+0x9c>

08005b70 <_printf_i>:
 8005b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4617      	mov	r7, r2
 8005b76:	7e0a      	ldrb	r2, [r1, #24]
 8005b78:	b085      	sub	sp, #20
 8005b7a:	2a6e      	cmp	r2, #110	; 0x6e
 8005b7c:	4698      	mov	r8, r3
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b84:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005b88:	f000 80bc 	beq.w	8005d04 <_printf_i+0x194>
 8005b8c:	d81a      	bhi.n	8005bc4 <_printf_i+0x54>
 8005b8e:	2a63      	cmp	r2, #99	; 0x63
 8005b90:	d02e      	beq.n	8005bf0 <_printf_i+0x80>
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x3a>
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	f000 80c8 	beq.w	8005d2a <_printf_i+0x1ba>
 8005b9a:	2a58      	cmp	r2, #88	; 0x58
 8005b9c:	f000 808a 	beq.w	8005cb4 <_printf_i+0x144>
 8005ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005ba8:	e02a      	b.n	8005c00 <_printf_i+0x90>
 8005baa:	2a64      	cmp	r2, #100	; 0x64
 8005bac:	d001      	beq.n	8005bb2 <_printf_i+0x42>
 8005bae:	2a69      	cmp	r2, #105	; 0x69
 8005bb0:	d1f6      	bne.n	8005ba0 <_printf_i+0x30>
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005bba:	d023      	beq.n	8005c04 <_printf_i+0x94>
 8005bbc:	1d11      	adds	r1, r2, #4
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	e027      	b.n	8005c14 <_printf_i+0xa4>
 8005bc4:	2a73      	cmp	r2, #115	; 0x73
 8005bc6:	f000 80b4 	beq.w	8005d32 <_printf_i+0x1c2>
 8005bca:	d808      	bhi.n	8005bde <_printf_i+0x6e>
 8005bcc:	2a6f      	cmp	r2, #111	; 0x6f
 8005bce:	d02a      	beq.n	8005c26 <_printf_i+0xb6>
 8005bd0:	2a70      	cmp	r2, #112	; 0x70
 8005bd2:	d1e5      	bne.n	8005ba0 <_printf_i+0x30>
 8005bd4:	680a      	ldr	r2, [r1, #0]
 8005bd6:	f042 0220 	orr.w	r2, r2, #32
 8005bda:	600a      	str	r2, [r1, #0]
 8005bdc:	e003      	b.n	8005be6 <_printf_i+0x76>
 8005bde:	2a75      	cmp	r2, #117	; 0x75
 8005be0:	d021      	beq.n	8005c26 <_printf_i+0xb6>
 8005be2:	2a78      	cmp	r2, #120	; 0x78
 8005be4:	d1dc      	bne.n	8005ba0 <_printf_i+0x30>
 8005be6:	2278      	movs	r2, #120	; 0x78
 8005be8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005bec:	496e      	ldr	r1, [pc, #440]	; (8005da8 <_printf_i+0x238>)
 8005bee:	e064      	b.n	8005cba <_printf_i+0x14a>
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005bf6:	1d11      	adds	r1, r2, #4
 8005bf8:	6019      	str	r1, [r3, #0]
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0a3      	b.n	8005d4c <_printf_i+0x1dc>
 8005c04:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005c08:	f102 0104 	add.w	r1, r2, #4
 8005c0c:	6019      	str	r1, [r3, #0]
 8005c0e:	d0d7      	beq.n	8005bc0 <_printf_i+0x50>
 8005c10:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da03      	bge.n	8005c20 <_printf_i+0xb0>
 8005c18:	222d      	movs	r2, #45	; 0x2d
 8005c1a:	425b      	negs	r3, r3
 8005c1c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c20:	4962      	ldr	r1, [pc, #392]	; (8005dac <_printf_i+0x23c>)
 8005c22:	220a      	movs	r2, #10
 8005c24:	e017      	b.n	8005c56 <_printf_i+0xe6>
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005c2e:	d003      	beq.n	8005c38 <_printf_i+0xc8>
 8005c30:	1d08      	adds	r0, r1, #4
 8005c32:	6018      	str	r0, [r3, #0]
 8005c34:	680b      	ldr	r3, [r1, #0]
 8005c36:	e006      	b.n	8005c46 <_printf_i+0xd6>
 8005c38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c3c:	f101 0004 	add.w	r0, r1, #4
 8005c40:	6018      	str	r0, [r3, #0]
 8005c42:	d0f7      	beq.n	8005c34 <_printf_i+0xc4>
 8005c44:	880b      	ldrh	r3, [r1, #0]
 8005c46:	4959      	ldr	r1, [pc, #356]	; (8005dac <_printf_i+0x23c>)
 8005c48:	2a6f      	cmp	r2, #111	; 0x6f
 8005c4a:	bf14      	ite	ne
 8005c4c:	220a      	movne	r2, #10
 8005c4e:	2208      	moveq	r2, #8
 8005c50:	2000      	movs	r0, #0
 8005c52:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005c56:	6865      	ldr	r5, [r4, #4]
 8005c58:	60a5      	str	r5, [r4, #8]
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	f2c0 809c 	blt.w	8005d98 <_printf_i+0x228>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	f020 0004 	bic.w	r0, r0, #4
 8005c66:	6020      	str	r0, [r4, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d13f      	bne.n	8005cec <_printf_i+0x17c>
 8005c6c:	2d00      	cmp	r5, #0
 8005c6e:	f040 8095 	bne.w	8005d9c <_printf_i+0x22c>
 8005c72:	4675      	mov	r5, lr
 8005c74:	2a08      	cmp	r2, #8
 8005c76:	d10b      	bne.n	8005c90 <_printf_i+0x120>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	07da      	lsls	r2, r3, #31
 8005c7c:	d508      	bpl.n	8005c90 <_printf_i+0x120>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	6862      	ldr	r2, [r4, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	bfde      	ittt	le
 8005c86:	2330      	movle	r3, #48	; 0x30
 8005c88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c90:	ebae 0305 	sub.w	r3, lr, r5
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	f8cd 8000 	str.w	r8, [sp]
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	aa03      	add	r2, sp, #12
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f7ff feef 	bl	8005a84 <_printf_common>
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d155      	bne.n	8005d56 <_printf_i+0x1e6>
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cae:	b005      	add	sp, #20
 8005cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005cb8:	493c      	ldr	r1, [pc, #240]	; (8005dac <_printf_i+0x23c>)
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005cc2:	f100 0504 	add.w	r5, r0, #4
 8005cc6:	601d      	str	r5, [r3, #0]
 8005cc8:	d001      	beq.n	8005cce <_printf_i+0x15e>
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	e002      	b.n	8005cd4 <_printf_i+0x164>
 8005cce:	0655      	lsls	r5, r2, #25
 8005cd0:	d5fb      	bpl.n	8005cca <_printf_i+0x15a>
 8005cd2:	8803      	ldrh	r3, [r0, #0]
 8005cd4:	07d0      	lsls	r0, r2, #31
 8005cd6:	bf44      	itt	mi
 8005cd8:	f042 0220 	orrmi.w	r2, r2, #32
 8005cdc:	6022      	strmi	r2, [r4, #0]
 8005cde:	b91b      	cbnz	r3, 8005ce8 <_printf_i+0x178>
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	f022 0220 	bic.w	r2, r2, #32
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	2210      	movs	r2, #16
 8005cea:	e7b1      	b.n	8005c50 <_printf_i+0xe0>
 8005cec:	4675      	mov	r5, lr
 8005cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cf2:	fb02 3310 	mls	r3, r2, r0, r3
 8005cf6:	5ccb      	ldrb	r3, [r1, r3]
 8005cf8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d1f5      	bne.n	8005cee <_printf_i+0x17e>
 8005d02:	e7b7      	b.n	8005c74 <_printf_i+0x104>
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	6949      	ldr	r1, [r1, #20]
 8005d0a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d0e:	d004      	beq.n	8005d1a <_printf_i+0x1aa>
 8005d10:	1d10      	adds	r0, r2, #4
 8005d12:	6018      	str	r0, [r3, #0]
 8005d14:	6813      	ldr	r3, [r2, #0]
 8005d16:	6019      	str	r1, [r3, #0]
 8005d18:	e007      	b.n	8005d2a <_printf_i+0x1ba>
 8005d1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d1e:	f102 0004 	add.w	r0, r2, #4
 8005d22:	6018      	str	r0, [r3, #0]
 8005d24:	6813      	ldr	r3, [r2, #0]
 8005d26:	d0f6      	beq.n	8005d16 <_printf_i+0x1a6>
 8005d28:	8019      	strh	r1, [r3, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6123      	str	r3, [r4, #16]
 8005d2e:	4675      	mov	r5, lr
 8005d30:	e7b1      	b.n	8005c96 <_printf_i+0x126>
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	1d11      	adds	r1, r2, #4
 8005d36:	6019      	str	r1, [r3, #0]
 8005d38:	6815      	ldr	r5, [r2, #0]
 8005d3a:	6862      	ldr	r2, [r4, #4]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7fa fa56 	bl	80001f0 <memchr>
 8005d44:	b108      	cbz	r0, 8005d4a <_printf_i+0x1da>
 8005d46:	1b40      	subs	r0, r0, r5
 8005d48:	6060      	str	r0, [r4, #4]
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d54:	e79f      	b.n	8005c96 <_printf_i+0x126>
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	462a      	mov	r2, r5
 8005d5a:	4639      	mov	r1, r7
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	47c0      	blx	r8
 8005d60:	3001      	adds	r0, #1
 8005d62:	d0a2      	beq.n	8005caa <_printf_i+0x13a>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	079b      	lsls	r3, r3, #30
 8005d68:	d507      	bpl.n	8005d7a <_printf_i+0x20a>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	f104 0919 	add.w	r9, r4, #25
 8005d70:	68e3      	ldr	r3, [r4, #12]
 8005d72:	9a03      	ldr	r2, [sp, #12]
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	429d      	cmp	r5, r3
 8005d78:	db05      	blt.n	8005d86 <_printf_i+0x216>
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	9b03      	ldr	r3, [sp, #12]
 8005d7e:	4298      	cmp	r0, r3
 8005d80:	bfb8      	it	lt
 8005d82:	4618      	movlt	r0, r3
 8005d84:	e793      	b.n	8005cae <_printf_i+0x13e>
 8005d86:	2301      	movs	r3, #1
 8005d88:	464a      	mov	r2, r9
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	47c0      	blx	r8
 8005d90:	3001      	adds	r0, #1
 8005d92:	d08a      	beq.n	8005caa <_printf_i+0x13a>
 8005d94:	3501      	adds	r5, #1
 8005d96:	e7eb      	b.n	8005d70 <_printf_i+0x200>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1a7      	bne.n	8005cec <_printf_i+0x17c>
 8005d9c:	780b      	ldrb	r3, [r1, #0]
 8005d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005da6:	e765      	b.n	8005c74 <_printf_i+0x104>
 8005da8:	080098e6 	.word	0x080098e6
 8005dac:	080098d5 	.word	0x080098d5

08005db0 <memcpy>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	1e43      	subs	r3, r0, #1
 8005db4:	440a      	add	r2, r1
 8005db6:	4291      	cmp	r1, r2
 8005db8:	d100      	bne.n	8005dbc <memcpy+0xc>
 8005dba:	bd10      	pop	{r4, pc}
 8005dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc4:	e7f7      	b.n	8005db6 <memcpy+0x6>

08005dc6 <memmove>:
 8005dc6:	4288      	cmp	r0, r1
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	eb01 0302 	add.w	r3, r1, r2
 8005dce:	d803      	bhi.n	8005dd8 <memmove+0x12>
 8005dd0:	1e42      	subs	r2, r0, #1
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	d10c      	bne.n	8005df0 <memmove+0x2a>
 8005dd6:	bd10      	pop	{r4, pc}
 8005dd8:	4298      	cmp	r0, r3
 8005dda:	d2f9      	bcs.n	8005dd0 <memmove+0xa>
 8005ddc:	1881      	adds	r1, r0, r2
 8005dde:	1ad2      	subs	r2, r2, r3
 8005de0:	42d3      	cmn	r3, r2
 8005de2:	d100      	bne.n	8005de6 <memmove+0x20>
 8005de4:	bd10      	pop	{r4, pc}
 8005de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005dee:	e7f7      	b.n	8005de0 <memmove+0x1a>
 8005df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005df8:	e7eb      	b.n	8005dd2 <memmove+0xc>
	...

08005dfc <_free_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4605      	mov	r5, r0
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d045      	beq.n	8005e90 <_free_r+0x94>
 8005e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e08:	1f0c      	subs	r4, r1, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfb8      	it	lt
 8005e0e:	18e4      	addlt	r4, r4, r3
 8005e10:	f000 f8d6 	bl	8005fc0 <__malloc_lock>
 8005e14:	4a1f      	ldr	r2, [pc, #124]	; (8005e94 <_free_r+0x98>)
 8005e16:	6813      	ldr	r3, [r2, #0]
 8005e18:	4610      	mov	r0, r2
 8005e1a:	b933      	cbnz	r3, 8005e2a <_free_r+0x2e>
 8005e1c:	6063      	str	r3, [r4, #4]
 8005e1e:	6014      	str	r4, [r2, #0]
 8005e20:	4628      	mov	r0, r5
 8005e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e26:	f000 b8cc 	b.w	8005fc2 <__malloc_unlock>
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	d90c      	bls.n	8005e48 <_free_r+0x4c>
 8005e2e:	6821      	ldr	r1, [r4, #0]
 8005e30:	1862      	adds	r2, r4, r1
 8005e32:	4293      	cmp	r3, r2
 8005e34:	bf04      	itt	eq
 8005e36:	681a      	ldreq	r2, [r3, #0]
 8005e38:	685b      	ldreq	r3, [r3, #4]
 8005e3a:	6063      	str	r3, [r4, #4]
 8005e3c:	bf04      	itt	eq
 8005e3e:	1852      	addeq	r2, r2, r1
 8005e40:	6022      	streq	r2, [r4, #0]
 8005e42:	6004      	str	r4, [r0, #0]
 8005e44:	e7ec      	b.n	8005e20 <_free_r+0x24>
 8005e46:	4613      	mov	r3, r2
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	b10a      	cbz	r2, 8005e50 <_free_r+0x54>
 8005e4c:	42a2      	cmp	r2, r4
 8005e4e:	d9fa      	bls.n	8005e46 <_free_r+0x4a>
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	1858      	adds	r0, r3, r1
 8005e54:	42a0      	cmp	r0, r4
 8005e56:	d10b      	bne.n	8005e70 <_free_r+0x74>
 8005e58:	6820      	ldr	r0, [r4, #0]
 8005e5a:	4401      	add	r1, r0
 8005e5c:	1858      	adds	r0, r3, r1
 8005e5e:	4282      	cmp	r2, r0
 8005e60:	6019      	str	r1, [r3, #0]
 8005e62:	d1dd      	bne.n	8005e20 <_free_r+0x24>
 8005e64:	6810      	ldr	r0, [r2, #0]
 8005e66:	6852      	ldr	r2, [r2, #4]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	4401      	add	r1, r0
 8005e6c:	6019      	str	r1, [r3, #0]
 8005e6e:	e7d7      	b.n	8005e20 <_free_r+0x24>
 8005e70:	d902      	bls.n	8005e78 <_free_r+0x7c>
 8005e72:	230c      	movs	r3, #12
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	e7d3      	b.n	8005e20 <_free_r+0x24>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	1821      	adds	r1, r4, r0
 8005e7c:	428a      	cmp	r2, r1
 8005e7e:	bf04      	itt	eq
 8005e80:	6811      	ldreq	r1, [r2, #0]
 8005e82:	6852      	ldreq	r2, [r2, #4]
 8005e84:	6062      	str	r2, [r4, #4]
 8005e86:	bf04      	itt	eq
 8005e88:	1809      	addeq	r1, r1, r0
 8005e8a:	6021      	streq	r1, [r4, #0]
 8005e8c:	605c      	str	r4, [r3, #4]
 8005e8e:	e7c7      	b.n	8005e20 <_free_r+0x24>
 8005e90:	bd38      	pop	{r3, r4, r5, pc}
 8005e92:	bf00      	nop
 8005e94:	200000bc 	.word	0x200000bc

08005e98 <_malloc_r>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	1ccd      	adds	r5, r1, #3
 8005e9c:	f025 0503 	bic.w	r5, r5, #3
 8005ea0:	3508      	adds	r5, #8
 8005ea2:	2d0c      	cmp	r5, #12
 8005ea4:	bf38      	it	cc
 8005ea6:	250c      	movcc	r5, #12
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	4606      	mov	r6, r0
 8005eac:	db01      	blt.n	8005eb2 <_malloc_r+0x1a>
 8005eae:	42a9      	cmp	r1, r5
 8005eb0:	d903      	bls.n	8005eba <_malloc_r+0x22>
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
 8005eba:	f000 f881 	bl	8005fc0 <__malloc_lock>
 8005ebe:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <_malloc_r+0xb4>)
 8005ec0:	6814      	ldr	r4, [r2, #0]
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	b991      	cbnz	r1, 8005eec <_malloc_r+0x54>
 8005ec6:	4c22      	ldr	r4, [pc, #136]	; (8005f50 <_malloc_r+0xb8>)
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	b91b      	cbnz	r3, 8005ed4 <_malloc_r+0x3c>
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f867 	bl	8005fa0 <_sbrk_r>
 8005ed2:	6020      	str	r0, [r4, #0]
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f000 f862 	bl	8005fa0 <_sbrk_r>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d126      	bne.n	8005f2e <_malloc_r+0x96>
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	6033      	str	r3, [r6, #0]
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f86c 	bl	8005fc2 <__malloc_unlock>
 8005eea:	e7e4      	b.n	8005eb6 <_malloc_r+0x1e>
 8005eec:	680b      	ldr	r3, [r1, #0]
 8005eee:	1b5b      	subs	r3, r3, r5
 8005ef0:	d41a      	bmi.n	8005f28 <_malloc_r+0x90>
 8005ef2:	2b0b      	cmp	r3, #11
 8005ef4:	d90f      	bls.n	8005f16 <_malloc_r+0x7e>
 8005ef6:	600b      	str	r3, [r1, #0]
 8005ef8:	50cd      	str	r5, [r1, r3]
 8005efa:	18cc      	adds	r4, r1, r3
 8005efc:	4630      	mov	r0, r6
 8005efe:	f000 f860 	bl	8005fc2 <__malloc_unlock>
 8005f02:	f104 000b 	add.w	r0, r4, #11
 8005f06:	1d23      	adds	r3, r4, #4
 8005f08:	f020 0007 	bic.w	r0, r0, #7
 8005f0c:	1ac3      	subs	r3, r0, r3
 8005f0e:	d01b      	beq.n	8005f48 <_malloc_r+0xb0>
 8005f10:	425a      	negs	r2, r3
 8005f12:	50e2      	str	r2, [r4, r3]
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
 8005f16:	428c      	cmp	r4, r1
 8005f18:	bf0d      	iteet	eq
 8005f1a:	6863      	ldreq	r3, [r4, #4]
 8005f1c:	684b      	ldrne	r3, [r1, #4]
 8005f1e:	6063      	strne	r3, [r4, #4]
 8005f20:	6013      	streq	r3, [r2, #0]
 8005f22:	bf18      	it	ne
 8005f24:	460c      	movne	r4, r1
 8005f26:	e7e9      	b.n	8005efc <_malloc_r+0x64>
 8005f28:	460c      	mov	r4, r1
 8005f2a:	6849      	ldr	r1, [r1, #4]
 8005f2c:	e7ca      	b.n	8005ec4 <_malloc_r+0x2c>
 8005f2e:	1cc4      	adds	r4, r0, #3
 8005f30:	f024 0403 	bic.w	r4, r4, #3
 8005f34:	42a0      	cmp	r0, r4
 8005f36:	d005      	beq.n	8005f44 <_malloc_r+0xac>
 8005f38:	1a21      	subs	r1, r4, r0
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f000 f830 	bl	8005fa0 <_sbrk_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0cd      	beq.n	8005ee0 <_malloc_r+0x48>
 8005f44:	6025      	str	r5, [r4, #0]
 8005f46:	e7d9      	b.n	8005efc <_malloc_r+0x64>
 8005f48:	bd70      	pop	{r4, r5, r6, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200000bc 	.word	0x200000bc
 8005f50:	200000c0 	.word	0x200000c0

08005f54 <_realloc_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	4607      	mov	r7, r0
 8005f58:	4614      	mov	r4, r2
 8005f5a:	460e      	mov	r6, r1
 8005f5c:	b921      	cbnz	r1, 8005f68 <_realloc_r+0x14>
 8005f5e:	4611      	mov	r1, r2
 8005f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f64:	f7ff bf98 	b.w	8005e98 <_malloc_r>
 8005f68:	b922      	cbnz	r2, 8005f74 <_realloc_r+0x20>
 8005f6a:	f7ff ff47 	bl	8005dfc <_free_r>
 8005f6e:	4625      	mov	r5, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f74:	f000 f826 	bl	8005fc4 <_malloc_usable_size_r>
 8005f78:	4284      	cmp	r4, r0
 8005f7a:	d90f      	bls.n	8005f9c <_realloc_r+0x48>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4638      	mov	r0, r7
 8005f80:	f7ff ff8a 	bl	8005e98 <_malloc_r>
 8005f84:	4605      	mov	r5, r0
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d0f2      	beq.n	8005f70 <_realloc_r+0x1c>
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	f7ff ff0f 	bl	8005db0 <memcpy>
 8005f92:	4631      	mov	r1, r6
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7ff ff31 	bl	8005dfc <_free_r>
 8005f9a:	e7e9      	b.n	8005f70 <_realloc_r+0x1c>
 8005f9c:	4635      	mov	r5, r6
 8005f9e:	e7e7      	b.n	8005f70 <_realloc_r+0x1c>

08005fa0 <_sbrk_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4c06      	ldr	r4, [pc, #24]	; (8005fbc <_sbrk_r+0x1c>)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	f000 f814 	bl	8005fd8 <_sbrk>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_sbrk_r+0x1a>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_sbrk_r+0x1a>
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	200002b4 	.word	0x200002b4

08005fc0 <__malloc_lock>:
 8005fc0:	4770      	bx	lr

08005fc2 <__malloc_unlock>:
 8005fc2:	4770      	bx	lr

08005fc4 <_malloc_usable_size_r>:
 8005fc4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f1a0 0004 	sub.w	r0, r0, #4
 8005fce:	bfbc      	itt	lt
 8005fd0:	580b      	ldrlt	r3, [r1, r0]
 8005fd2:	18c0      	addlt	r0, r0, r3
 8005fd4:	4770      	bx	lr
	...

08005fd8 <_sbrk>:
 8005fd8:	4b04      	ldr	r3, [pc, #16]	; (8005fec <_sbrk+0x14>)
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	4602      	mov	r2, r0
 8005fde:	b909      	cbnz	r1, 8005fe4 <_sbrk+0xc>
 8005fe0:	4903      	ldr	r1, [pc, #12]	; (8005ff0 <_sbrk+0x18>)
 8005fe2:	6019      	str	r1, [r3, #0]
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	4402      	add	r2, r0
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	4770      	bx	lr
 8005fec:	200000c4 	.word	0x200000c4
 8005ff0:	200002b8 	.word	0x200002b8

08005ff4 <_init>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr

08006000 <_fini>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr
